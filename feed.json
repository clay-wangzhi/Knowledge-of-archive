{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "IT外卖小哥",
  "home_page_url": "https://vuepress-theme-hope-demo.mrhope.site/",
  "feed_url": "https://vuepress-theme-hope-demo.mrhope.site/feed.json",
  "description": "当你发现自己的才华撑不起野心时，就请安静下来学习吧！",
  "author": {
    "name": "Clay"
  },
  "items": [
    {
      "title": "activemq5.15.9集群搭建步骤",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/11%20%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/11.1%20activemq5.15.9%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/11%20%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/11.1%20activemq5.15.9%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "content_html": "<h2 id=\"activemq5-15-9集群搭建步骤\"> activemq5.15.9集群搭建步骤</h2>\n<h3 id=\"下载解压软件\"> 下载解压软件</h3>\n<div><pre><code>cd /opt\nwget https://www-eu.apache.org/dist/activemq/5.15.9/apache-activemq-5.15.9-bin.tar.gz\ntar -xvf apache-activemq-5.15.9-bin.tar.gz\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"修改主机名\"> 修改主机名</h3>\n<p>三台主机三分别操作</p>\n<div><pre><code>hostnamectl set-hostname activemq01.csp\nhostnamectl set-hostname activemq02.csp\nhostnamectl set-hostname activemq03.csp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>注意主机名的设置，不能带下划线，否则会报错</p>\n</blockquote>\n<h3 id=\"修改配置文件\"> 修改配置文件</h3>\n<div><pre><code>cd /opt/apache-activemq-5.15.9/conf/\nvim activemq.xml \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>修改以下文件</p>\n<div><pre><code>brokerName=&quot;activemqCluster&quot;\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>brokaerName三台主机名称必须一致</p>\n</blockquote>\n<div><pre><code>        &lt;persistenceAdapter&gt;\n            &lt;!--&lt;kahaDB directory=&quot;${activemq.data}/kahadb&quot;/&gt;--&gt;\n            &lt;replicatedLevelDB\n            directory=&quot;${activemq.data}/leveldb&quot;\n            replicas=&quot;3&quot;\n            bind=&quot;tcp://0.0.0.0:62222&quot;\n            zkAddress=&quot;192.168.165.29:2181,192.168.165.30:2181,192.168.165.31:2181&quot;\n            hostname=&quot;192.168.165.33&quot;\n            zkPath=&quot;/activemq/leveldb-stores&quot;\n            sync=&quot;local_disk&quot;/&gt;\n        &lt;/persistenceAdapter&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>注释掉<code>&lt;kahaDB directory=&quot;${activemq.data}/kahadb&quot;/&gt;</code>这一行</p>\n<p>新增下面内容</p>\n<p>directory=&quot;${activemq.data}/leveldb&quot; 集群方式</p>\n<p>replicas=&quot;3&quot; 集群结点个数</p>\n<p>bind activemq集群通信端口</p>\n<p>zkAddress zookeeper集群地址</p>\n<p>hostname 本机IP</p>\n<p>zkPath activemq集群在zookeeper集群交互文件存储位置</p>\n<p>sync：在消息被消费完成前，同步信息所存贮的策略。如果有多种策略用逗号隔开，ActiveMQ会选择较强的策略。而如果有local_mem, local_disk这两种策略的话，那么ActiveMQ则优先选择local_disk策略，存储在本地硬盘。</p>\n<h3 id=\"开放防火墙端口\"> 开放防火墙端口</h3>\n<div><pre><code># cat /etc/sysconfig/iptables\n*filter\n:INPUT ACCEPT [0systemctl restart iptables.service:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 8161 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 61616 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 62222 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n\n# systemctl restart iptables.service\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"启动-停止\"> 启动&amp;停止</h3>\n<div><pre><code>/opt/apache-activemq-5.15.9/bin/activemq start\n/opt/apache-activemq-5.15.9/bin/activemq stop\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"验证activemq集群高可用\"> 验证ActiveMQ集群高可用</h3>\n<p>要验证ActiveMQ集群的高可用，我们只需要关闭能访问http://ip:8161/admin/的ActiveMQ服务，然后访问其他两个。</p>\n<p>如果其中有一个能访问，那就说明ActiveMQ+ZooKeeper集群高可用已经配置成功</p>\n<p>当一个ActiveMQ节点挂掉，或者一个ZooKeeper节点挂掉，ActiveMQ服务依然正常运转。如果仅剩一个ActiveMQ节点，因为不能选举Master，ActiveMQ不能正常运转；同样的，如果ZooKeeper仅剩一个节点活动，不管ActiveMQ各节点是否存活，ActiveMQ也不能正常提供服务。\n（ActiveMQ集群的高可用，依赖于ZooKeeper集群的高可用。）</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "高可用开源方案 Keepalived VS Heartbeat对比",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/12%20%E5%B8%B8%E8%A7%81%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/12.1%20keepalived%E5%92%8Cheartbeat%E5%AF%B9%E6%AF%94/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/12%20%E5%B8%B8%E8%A7%81%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/12.1%20keepalived%E5%92%8Cheartbeat%E5%AF%B9%E6%AF%94/",
      "content_html": "<h2 id=\"高可用开源方案-keepalived-vs-heartbeat对比\"> 高可用开源方案 Keepalived VS Heartbeat对比</h2>\n<p>最近因为项目需要，简单的试用了两款高可用开源方案：Keepalived和Heartbeat。两者都很流行，但差异还是很大的，现将试用过程中的感受以及相关知识点简单总结一下，供大家选择方案的时候参考。</p>\n<p>1）<strong>Keepalived使用更简单</strong>：从安装、配置、使用、维护等角度上对比，Keepalived都比Heartbeat要简单得多，尤其是Heartbeat2.1.4后拆分成3个子项目，安装、配置、使用都比较复杂，尤其是出问题的时候，都不知道具体是哪个子系统出问题了；而Keepalived只有1个安装文件、1个配置文件，配置文件也简单很多；</p>\n<p>2）<strong>Heartbeat功能更强大</strong>：Heartbeat虽然复杂，但功能更强大，配套工具更全，适合做大型集群管理，而Keepalived主要用于集群倒换，基本没有管理功能；</p>\n<p>3）<strong>协议不同</strong>：Keepalived使用VRRP协议进行通信和选举，Heartbeat使用心跳进行通信和选举；Heartbeat除了走网络外，还可以通过串口通信，貌似更可靠；</p>\n<p>4）<strong>使用方式基本类似</strong>：如果要基于两者设计高可用方案，最终都要根据业务需要写自定义的脚本，Keepalived的脚本没有任何约束，随便怎么写都可以；Heartbeat的脚本有约束，即要支持service start/stop/restart这种方式，而且Heartbeart提供了很多默认脚本，简单的绑定ip，启动apache等操作都已经有了；</p>\n<p>使用建议：<strong>优先使用Keepalived</strong>，当Keepalived不够用的时候才选择Heartbeat</p>\n<p>转载链接：https://blog.csdn.net/educast/article/details/50377575</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "zookeeper3.4.14集群搭建步骤",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/12%20%E5%B8%B8%E8%A7%81%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/12.2%20zookeeper3.4.14%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/12%20%E5%B8%B8%E8%A7%81%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/12.2%20zookeeper3.4.14%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "content_html": "<h2 id=\"zookeeper3-4-14集群搭建步骤\"> zookeeper3.4.14集群搭建步骤</h2>\n<h3 id=\"下载解压\"> 下载解压</h3>\n<div><pre><code>cd /opt\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\ntar -xvf zookeeper-3.4.14.tar.gz \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"修改相关配置\"> 修改相关配置</h3>\n<div><pre><code>mkdir -p /var/lib/zookeeper/data\nmkdir -p /var/lib/zookeeper/log\nmkdir -p /var/log/zookeeper\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>生产myid文件（三台主机分别执行）</p>\n<div><pre><code>echo 29 &gt; /var/lib/zookeeper/data/myid\necho 30 &gt; /var/lib/zookeeper/data/myid\necho 31 &gt; /var/lib/zookeeper/data/myid\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>修改zoo.cfg文件</p>\n<div><pre><code>cd /opt/zookeeper-3.4.14/conf\ncp zoo_sample.cfg zoo.cfg\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code># egrep -v &quot;^#|^$&quot; zoo.cfg \ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/var/lib/zookeeper/data\ndataLogDir=/var/lib/zookeeper/log\nclientPort=2181\nserver.29=192.168.165.29:2888:3888\nserver.30=192.168.165.30:2888:3888\nserver.31=192.168.165.31:2888:3888\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>修改/zkEnv.sh文件</p>\n<div><pre><code>cd /opt/zookeeper-3.4.14/bin\n</code></pre>\n<div><span>1</span><br></div></div><p>找到 ZOO_LOG_DIR=&quot;.&quot; 一行，换成如下</p>\n<div><pre><code># vim zkEnv.sh\nZOO_LOG_DIR=&quot;/var/log/zookeeper&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"修改防火墙规则\"> 修改防火墙规则</h3>\n<div><pre><code># cat /etc/sysconfig/iptables\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 2181 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 2888 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3888 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n\n# systemctl restart iptables.service \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"启动集群\"> 启动集群</h3>\n<div><pre><code>/opt/zookeeper-3.4.14/bin/zkServer.sh start\n/opt/zookeeper-3.4.14/bin/zkServer.sh status\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>通过<code>nc</code>方式验证</p>\n<div><pre><code>yum -y install nc\necho stat | nc 192.168.165.46 2181\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>通过四字命令<code>srvr</code>方式验证</p>\n<div><pre><code># telnet 192.168.165.45 2181\nTrying 192.168.165.45...\nConnected to 192.168.165.45.\nEscape character is &#39;^]&#39;.\nsrvr\nZookeeper version: 3.4.14-4c25d480e66aadd371de8bd2fd8da255ac140bcf, built on 03/06/2019 16:18 GMT\nLatency min/avg/max: 0/0/0\nReceived: 2\nSent: 1\nConnections: 1\nOutstanding: 0\nZxid: 0x0\nMode: follower\nNode count: 4\nConnection closed by foreign host.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "分布式FastDfs+nginx缓存高可用集群构建",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/12%20%E5%B8%B8%E8%A7%81%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/12.3%20%E5%88%86%E5%B8%83%E5%BC%8FFastDfs+nginx%E7%BC%93%E5%AD%98%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%9E%84%E5%BB%BA/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/12%20%E5%B8%B8%E8%A7%81%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/12.3%20%E5%88%86%E5%B8%83%E5%BC%8FFastDfs+nginx%E7%BC%93%E5%AD%98%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%9E%84%E5%BB%BA/",
      "content_html": "<h2 id=\"分布式fastdfs-nginx缓存高可用集群构建\"> 分布式FastDfs+nginx缓存高可用集群构建</h2>\n<h3 id=\"介绍\"> 介绍</h3>\n<p>FastDFS：开源的高性能分布式文件系统；主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡</p>\n<p>FastDFS：角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)</p>\n<ol>\n<li>Tracker Server: 跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的storage server和group，每个storage在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。多个Tracker之间是对等关系，不存在单点故障</li>\n<li>Storage Server: 存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server（高可用），组内的storage server上的数据互为备份</li>\n<li>Client:客户端，上传下载数据的服务器</li>\n</ol>\n<p><img src=\"images/fastdfs1.png\" alt=\"\"></p>\n<p><strong>FastDfs+nginx缓存高可用集群环境流程示意图：</strong></p>\n<p><img src=\"images/fastdfs2.png\" alt=\"\"></p>\n<p>实验环境机器说明：</p>\n<table>\n<thead>\n<tr>\n<th>机器名称</th>\n<th>IP地址</th>\n<th>应用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tracker01.csp</td>\n<td>192.168.165.36</td>\n<td>FastDFS,libfastcommon,nginx,keepalived，ngx_cache_purge</td>\n<td>CentOS Linux release 7.6.1810 (Core)</td>\n</tr>\n<tr>\n<td>tracker02.csp</td>\n<td>192.168.165.37</td>\n<td>FastDFS,libfastcommon,nginx,keepalived，ngx_cache_purge</td>\n<td>CentOS Linux release 7.6.1810 (Core)</td>\n</tr>\n<tr>\n<td>storage01.csp</td>\n<td>192.168.165.38</td>\n<td>FastDFS,libfastcommon,nginx,fastdfs-nginx-module</td>\n<td>CentOS Linux release 7.6.1810 (Core)</td>\n</tr>\n<tr>\n<td>storage02.csp</td>\n<td>192.168.165.39</td>\n<td>FastDFS,libfastcommon,nginx,fastdfs-nginx-module</td>\n<td>CentOS Linux release 7.6.1810 (Core)</td>\n</tr>\n<tr>\n<td>storage03.csp</td>\n<td>192.168.165.40</td>\n<td>FastDFS,libfastcommon,nginx,fastdfs-nginx-module</td>\n<td>CentOS Linux release 7.6.1810 (Core)</td>\n</tr>\n<tr>\n<td>storage04.csp</td>\n<td>192.168.165.41</td>\n<td>FastDFS,libfastcommon,nginx,fastdfs-nginx-module</td>\n<td>CentOS Linux release 7.6.1810 (Core)</td>\n</tr>\n<tr>\n<td>VIP</td>\n<td>192.168.165.42</td>\n<td>无</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"fastdfs的安装\"> fastdfs的安装</h3>\n<p>6台主机同时进行</p>\n<p>下载安装包</p>\n<div><pre><code>mkdir -p /usr/local/software\ncd /usr/local/software\nwget https://github.com/happyfish100/fastdfs/archive/V5.11.tar.gz\nwget https://github.com/happyfish100/fastdfs-client-java/archive/master.zip\nmv master.zip fastdfs-client-java.zip\nwget https://github.com/happyfish100/fastdfs-nginx-module/archive/master.zip\nmv master.zip fastdfs-nginx-module.zip\nwget https://github.com/happyfish100/libfastcommon/archive/master.zip\nmv master.zip libfastcommon.zip\nwget http://nginx.org/download/nginx-1.16.0.tar.gz\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>安装相关依赖</p>\n<div><pre><code>yum -y install make cmake gcc gcc-c++\n</code></pre>\n<div><span>1</span><br></div></div><p>安装 libfastcommon</p>\n<div><pre><code>unzip libfastcommon.zip -d /usr/local/fast/\ncd /usr/local/fast/libfastcommon-master\n./make.sh \n./make.sh install\nln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>安装 FastDFS</p>\n<div><pre><code>tar -zxf V5.11.tar.gz -C /usr/local/fast/\ncd /usr/local/fast/fastdfs-5.11\n./make.sh\n./make.sh install\ncp -f ./conf/client.conf /etc/fdfs/\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"tracker安装\"> tracker安装</h3>\n<p>在两台tracker上执行</p>\n<div><pre><code>cd /etc/fdfs/\ncp tracker.conf.sample tracker.conf\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>修改tracker配置文件</p>\n<div><pre><code># egrep -v &quot;^$|^#&quot; tracker.conf\ndisabled=false\nbind_addr=0.0.0.0\nport=22122\nconnect_timeout=30\nnetwork_timeout=60\nbase_path=/fastdfs/tracker\nmax_connections=256\naccept_threads=1\nwork_threads=4\nmin_buff_size = 8KB\nmax_buff_size = 128KB\nstore_lookup=2\nstore_group=group2\nstore_server=0\nstore_path=0\ndownload_server=0\nreserved_storage_space = 10%\nlog_level=info\nrun_by_group=\nrun_by_user=\nallow_hosts=*\nsync_log_buff_interval = 10\ncheck_active_interval = 120\nthread_stack_size = 64KB\nstorage_ip_changed_auto_adjust = true\nstorage_sync_file_max_delay = 86400\nstorage_sync_file_max_time = 300\nuse_trunk_file = false \nslot_min_size = 256\nslot_max_size = 16MB\ntrunk_file_size = 64MB\ntrunk_create_file_advance = false\ntrunk_create_file_time_base = 02:00\ntrunk_create_file_interval = 86400\ntrunk_create_file_space_threshold = 20G\ntrunk_init_check_occupying = false\ntrunk_init_reload_from_binlog = false\ntrunk_compress_binlog_min_interval = 0\nuse_storage_id = false\nstorage_ids_filename = storage_ids.conf\nid_type_in_filename = ip\nstore_slave_file_use_link = false\nrotate_error_log = false\nerror_log_rotate_time=00:00\nrotate_error_log_size = 0\nlog_file_keep_days = 0\nuse_connection_pool = false\nconnection_pool_max_idle_time = 3600\nhttp.server_port=8080\nhttp.check_alive_interval=30\nhttp.check_alive_type=tcp\nhttp.check_alive_uri=/status.html\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><p>修改的内容为：</p>\n<div><pre><code>bind_addr=0.0.0.0\nbase_path=/fastdfs/tracker\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>创建工作目录</p>\n<div><pre><code>mkdir -pv /fastdfs/tracker\n</code></pre>\n<div><span>1</span><br></div></div><p>启动追踪器</p>\n<div><pre><code>/etc/init.d/fdfs_trackerd start\ntail -f /fastdfs/tracker/logs/trackerd.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>开放防火墙端口</p>\n<div><pre><code># cat /etc/sysconfig/iptables\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22122 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n\n# systemctl restart iptables.service\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"storage安装\"> storage安装</h3>\n<div><pre><code>cd /etc/fdfs/\ncp storage.conf.sample storage.conf\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>修改配置文件</p>\n<div><pre><code># egrep -v &quot;^$|^#&quot; storage.conf\ndisabled=false\ngroup_name=group1\nbind_addr=\nclient_bind=true\nport=23000\nconnect_timeout=30\nnetwork_timeout=60\nheart_beat_interval=30\nstat_report_interval=60\nbase_path=/fastdfs/storage\nmax_connections=256\nbuff_size = 256KB\naccept_threads=1\nwork_threads=4\ndisk_rw_separated = true\ndisk_reader_threads = 1\ndisk_writer_threads = 1\nsync_wait_msec=50\nsync_interval=0\nsync_start_time=00:00\nsync_end_time=23:59\nwrite_mark_file_freq=500\nstore_path_count=1\nstore_path0=/fastdfs/storage\nsubdir_count_per_path=256\ntracker_server=192.168.162.193:22122\ntracker_server=192.168.162.194:22122\nlog_level=info\nrun_by_group=\nrun_by_user=\nallow_hosts=*\nfile_distribute_path_mode=0\nfile_distribute_rotate_count=100\nfsync_after_written_bytes=0\nsync_log_buff_interval=10\nsync_binlog_buff_interval=10\nsync_stat_file_interval=300\nthread_stack_size=512KB\nupload_priority=10\nif_alias_prefix=\ncheck_file_duplicate=0\nfile_signature_method=hash\nkey_namespace=FastDFS\nkeep_alive=0\nuse_access_log = false\nrotate_access_log = false\naccess_log_rotate_time=00:00\nrotate_error_log = false\nerror_log_rotate_time=00:00\nrotate_access_log_size = 0\nrotate_error_log_size = 0\nlog_file_keep_days = 0\nfile_sync_skip_invalid_record=false\nuse_connection_pool = false\nconnection_pool_max_idle_time = 3600\nhttp.domain_name=\nhttp.server_port=8888\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div><p>修改的文件内容为：</p>\n<div><pre><code>group_name=group1 #4台机器分成2组(group1:192.168.165.38,39和group2:192.168.165.40,41)\nbase_path=/fastdfs/storage #设置 storage 的日志目录\nstore_path_count=1 #默认就为1，（存储路径个数，需要和 store_path个数匹配）\nstore_path0=/fastdfs/storage #设置存储路径\ntracker_server=192.168.162.193:22122\ntracker_server=192.168.162.194:22122#tracker 服务的IP和端口，多个就添加多条记录\nhttp.server_port=8888 #设置http端口号\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>创建目录</p>\n<div><pre><code>mkdir -pv /fastdfs/storage\n</code></pre>\n<div><span>1</span><br></div></div><p>启动 storage：</p>\n<div><pre><code>/etc/init.d/fdfs_storaged start\ntail -f /fastdfs/storage/logs/storaged.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>查看集群状态：</p>\n<p>在任意一台storage主机即可</p>\n<div><pre><code>/usr/bin/fdfs_monitor /etc/fdfs/storage.conf\n</code></pre>\n<div><span>1</span><br></div></div><p>开放防火墙端口</p>\n<div><pre><code>cat /etc/sysconfig/iptables\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 23000 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n\n# systemctl restart iptables.service\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"客户端测试\"> 客户端测试</h3>\n<p>tracker台中可以随意找一台做客户端测试下:</p>\n<div><pre><code># egrep -v &quot;^$|^#&quot; client.conf\nconnect_timeout=30\nnetwork_timeout=60\nbase_path=/fastdfs/tracker\ntracker_server=192.168.165.36:22122\ntracker_server=192.168.165.37:22122\nlog_level=info\nuse_connection_pool = false\nconnection_pool_max_idle_time = 3600\nload_fdfs_parameters_from_tracker=false\nuse_storage_id = false\nstorage_ids_filename = storage_ids.conf\nhttp.tracker_server_port=8888\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>修改文件的内容为：</p>\n<div><pre><code>base_path=/fastdfs/tracker #tracker服务器文件路径\ntracker_server=192.168.165.36:22122\ntracker_server=192.168.165.37:22122\nhttp.tracker_server_port=8888 # tracker 服务器的 http端口号，必须和tracker的设置对应起来\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>上传一张图片到服务器上</p>\n<div><pre><code>/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /home/111/1.jpg \n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"配置fastdfs集群支持http\"> 配置FastDFS集群支持http</h3>\n<p>支持http请求，安装nginx（4个storage节点安装nginx,首先安装fastdfs-nginx-module,fastdfs与nginx集成模块）</p>\n<div><pre><code>cd /usr/local/software/\nunzip fastdfs-nginx-module.zip -d /usr/local/fast/\ncd /usr/local/fast/fastdfs-nginx-module-master/src\nyum -y install pcre pcre-devel\nyum -y install zlib zlib-devel\nyum -y install openssl openssl-devel\ncd /usr/local/software\ntar -zxf nginx-1.9.9.tar.gz -C /usr/local/\ncd /usr/local/nginx-1.9.9\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>修改config编译文件</p>\n<div><pre><code># vim /usr/local/fast/fastdfs-nginx-module-master/src/config\nngx_addon_name=ngx_http_fastdfs_module\n\nif test -n &quot;${ngx_module_link}&quot;; then\n    ngx_module_type=HTTP\n    ngx_module_name=$ngx_addon_name\n    ngx_module_incs=&quot;/usr/include/fastdfs /usr/include/fastcommon&quot;\n    ngx_module_libs=&quot;-lfastcommon -lfdfsclient&quot;\n    ngx_module_srcs=&quot;$ngx_addon_dir/ngx_http_fastdfs_module.c&quot;\n    ngx_module_deps=\n    CFLAGS=&quot;$CFLAGS -D_FILE_OFFSET_BITS=64 -DFDFS_OUTPUT_CHUNK_SIZE=&#39;256*1024&#39; -DFDFS_MOD_CONF_FILENAME=&#39;\\&quot;/etc/fdfs/mod_fastdfs.conf\\&quot;&#39;&quot;\n    . auto/module\nelse\n    HTTP_MODULES=&quot;$HTTP_MODULES ngx_http_fastdfs_module&quot;\n    NGX_ADDON_SRCS=&quot;$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_fastdfs_module.c&quot;\n    CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon&quot;\n    CORE_LIBS=&quot;$CORE_LIBS -lfastcommon -lfdfsclient&quot;\n    CFLAGS=&quot;$CFLAGS -D_FILE_OFFSET_BITS=64 -DFDFS_OUTPUT_CHUNK_SIZE=&#39;256*1024&#39; -DFDFS_MOD_CONF_FILENAME=&#39;\\&quot;/etc/fdfs/mod_fastdfs.conf\\&quot;&#39;&quot;\nfi\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>编译安装</p>\n<div><pre><code>./configure --add-module=/usr/local/fast/fastdfs-nginx-module-master/src/\nmake -j 4\nmake install\ncd /usr/local/fast/fastdfs-nginx-module-master/src/\ncp mod_fastdfs.conf /etc/fdfs/\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>修改mod_fastdfs.conf配置文件</p>\n<div><pre><code># egrep -v &quot;^$|^#&quot; /etc/fdfs/mod_fastdfs.conf\nconnect_timeout=20\nnetwork_timeout=30\nbase_path=/tmp\nload_fdfs_parameters_from_tracker=true\nstorage_sync_file_max_delay = 86400\nuse_storage_id = false\nstorage_ids_filename = storage_ids.conf\ntracker_server=192.168.165.36:22122\ntracker_server=192.168.165.37:22122\nstorage_server_port=23000\ngroup_name=group1\nurl_have_group_name = true\nstore_path_count=1\nstore_path0=/fastdfs/storage\nlog_level=info\nlog_filename=\nresponse_mode=proxy\nif_alias_prefix=\nflv_support = true\nflv_extension = flv\ngroup_count = 2\n[group1]\ngroup_name=group1\nstorage_server_port=23000\nstore_path_count=1\nstore_path0=/fastdfs/storage\n[group2]\ngroup_name=group3\nstorage_server_port=23000\nstore_path_count=1\nstore_path0=/fastdfs/storage\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><blockquote>\n<p>注意:group1:192.168.165.38,39和group2:192.168.165.40,41</p>\n</blockquote>\n<p>复制FastDFS(fastdfs-5.11)里的2个文件到/etc/fdfs/目录下</p>\n<div><pre><code>cd /usr/local/fast/fastdfs-5.11/conf/\ncp http.conf mime.types /etc/fdfs/\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>创建一个软链接，在/fastdfs/storage 文件存储目录下创建软链接，将其链接到实际存放数据的目录</p>\n<div><pre><code>ln -s /fastdfs/storage/data/ /fastdfs/storage/data/M00\n</code></pre>\n<div><span>1</span><br></div></div><p>修改nginx配置文件为：</p>\n<div><pre><code>cat /usr/local/nginx/conf/nginx.conf\n\n#user  nobody;\nworker_processes  4;\nworker_cpu_affinity auto;\nworker_rlimit_nofile 65535;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  65535;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       8888;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}\n        location ~ /group([0-9])/M00 {\n            ngx_fastdfs_module;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n}\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br></div></div><p>启动nginx</p>\n<div><pre><code>/usr/local/nginx/sbin/nginx\n</code></pre>\n<div><span>1</span><br></div></div><p>上传图片，然后访问测试</p>\n<h3 id=\"tracker-server-上安装-nginx缓存\"> tracker server 上安装 nginx缓存</h3>\n<div><pre><code>tar -zxf ngx_cache_purge-2.3.tar.gz -C /usr/local/fast/\nyum -y install pcre pcre-devel\nyum -y install zlib zlib-devel\nyum -y install openssl openssl-devel\ncd /usr/local/software\ntar -xvf nginx-1.16.0.tar.gz -C /usr/local/\ncd /usr/local/nginx-1.16.0/\n./configure --add-module=/usr/local/fast/ngx_cache_purge-2.3\nmake -j 4\nmake install\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>创建缓存目录</p>\n<div><pre><code>mkdir -pv /fastdfs/cache/nginx/proxy_cache\n</code></pre>\n<div><span>1</span><br></div></div><p>修改nginx配置文件：</p>\n<div><pre><code># cat /usr/local/nginx/conf/nginx.conf\n\n#user  nobody;\nworker_processes  4;\nworker_cpu_affinity auto;\nworker_rlimit_nofile 65535;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  65535;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    server_tokens off;\n    gzip on;\n    gzip_disable &quot;MSIE [1-6]\\.&quot;;\n    gzip_min_length 1100;\n    gzip_buffers 4 8k;\n    gzip_comp_level 3;\n    gzip_proxied any;\n    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json image/jpeg image/gif image/png image/jpg;\n\n    large_client_header_buffers 4 8k;\n    client_header_buffer_size 8k;\n    tcp_nopush on;\n    tcp_nodelay on;\n    server_names_hash_bucket_size 128;\n    client_max_body_size 300m;\n    client_body_buffer_size 128k;\n\n    proxy_redirect off;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_connect_timeout 90;\n    proxy_send_timeout 90;\n    proxy_read_timeout 90;\n    proxy_buffer_size 16k;\n    proxy_buffers 4 64k;\n    proxy_busy_buffers_size 128k;\n    proxy_temp_file_write_size 128k;\n    proxy_cache_path /fastdfs/cache/nginx/proxy_cache levels=1:2 keys_zone=http-cache:200m max_size=1g inactive=30d;\n    proxy_temp_path /fastdfs/cache/nginx/proxy_cache/tmp;\n\n    upstream fdfs {\n        server 192.168.165.38:8888 weight=1 max_fails=3 fail_timeout=30s;\n        server 192.168.165.39:8888 weight=1 max_fails=3 fail_timeout=30s;\n        server 192.168.165.40:8888 weight=1 max_fails=3 fail_timeout=30s;\n        server 192.168.165.41:8888 weight=1 max_fails=3 fail_timeout=30s;\n    }\n\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        location ~/group([0-9])/M00 {\n            proxy_next_upstream http_502 http_504 error timeout invalid_header;\n            proxy_cache http-cache;\n            proxy_cache_valid 200 304 12h;\n            proxy_cache_key $uri$is_args$args;\n            proxy_pass http://fdfs;\n            expires 30d;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n}\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br></div></div><p>启动nginx</p>\n<div><pre><code>/usr/local/nginx/sbin/nginx\n</code></pre>\n<div><span>1</span><br></div></div><p>上传图片，访问测试</p>\n<h3 id=\"keepalived安装\"> keepalived安装</h3>\n<div><pre><code>yum -y install keepalived\n</code></pre>\n<div><span>1</span><br></div></div><p>修改配置文件</p>\n<div><pre><code># cat /etc/keepalived/keepalived.conf \n! Configuration File for keepalived\n\nglobal_defs {\n    router_id LVS_DEVEL\n}\n\nvrrp_script chk_nginx {\n    script &quot;/etc/keepalived/chk_nginx.sh&quot;\n    interval 6\n    weight -2\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface eth0\n    virtual_router_id 51\n    priority 100\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.165.42/24\n    }\n    track_script {\n        chk_nginx\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><blockquote>\n<p>准备：另一台的state改为BACKUP，priority改为小于100的值</p>\n</blockquote>\n<p>配置健康检查脚本：</p>\n<div><pre><code># cat /etc/keepalived/chk_nginx.sh \n#!/bin/bash\n#\n# check nginx status\n\nA=$(ps -C nginx --no-header |wc -l)\nif [[ ${A} -eq 0 ]];then\n  /usr/local/nginx/sbin/nginx\n  sleep 3\n  if [ $(ps -C nginx --no-header |wc -l) -eq 0 ];then\n    local message=&quot;$(date) &#39;:nginx is not healthy, try to killall keepalived&#39;&quot;\n    echo ${message} &gt;&gt; /etc/keepalived/keepalived.log\n    systemctl stop keepalived.service\n  fi\nfi\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>赋予执行权限：</p>\n<div><pre><code>chomd +x /etc/keepalived/chk_nginx.sh \n</code></pre>\n<div><span>1</span><br></div></div><p>添加防火墙规则</p>\n<div><pre><code># cat /etc/sysconfig/iptables\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -p vrrp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22122 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n\n#  systemctl restart iptables.service\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>启动服务</p>\n<div><pre><code>systemctl start keepalived\n</code></pre>\n<div><span>1</span><br></div></div><p>用vip访问测试</p>\n<p>参考链接：</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/NGames/archive/2019/06/23/11065282.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/NGames/archive/2019/06/23/11065282.html</a></p>\n</blockquote>\n<h3 id=\"\"> </h3>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "centos7下搭建shadowsocks",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/13%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/13.1%20centos7%E4%B8%8B%E6%90%AD%E5%BB%BAshadowsocks/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/13%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/13.1%20centos7%E4%B8%8B%E6%90%AD%E5%BB%BAshadowsocks/",
      "content_html": "<h2 id=\"centos7下搭建shadowsocks\"> centos7下搭建shadowsocks</h2>\n<h3 id=\"安装pip\"> 安装pip</h3>\n<p>由于安装的是python 版本的 shadowsocks，所以首先安装pip</p>\n<div><pre><code>$ curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;\n$ python get-pip.py\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"安装shadowsocks\"> 安装shadowsocks</h3>\n<div><pre><code>$ pip install --upgrade pip\n$ pip install shadowsocks\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"创建配置文件\"> 创建配置文件</h3>\n<p>创建文件所在目录:/etc</p>\n<div><pre><code>#创建文件命令,\n$ vi /etc/shadowsocks.json\n#若进入了etc目录\n$ vi shadowsocks.json\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>配置文件内容：</p>\n<div><pre><code>单端口：\n {\n &quot;server&quot;:&quot;0.0.0.0&quot;,            --服务器IP，直接用0.0.0.0也可\n &quot;server_port&quot;:8888,            --端口端口\n &quot;local_address&quot;: &quot;127.0.0.1&quot;,  --本地地址，可省略\n &quot;local_port&quot;:1080,             --本地端口，可省略\n &quot;password&quot;:&quot;password&quot;,         --密码\n &quot;timeout&quot;:300,                 --超时时间，可省略\n &quot;method&quot;:&quot;aes-256-cfb&quot;,        --加密策略，有多重策略，具体自查\n}\n多端口：\n{\n    &quot;server&quot;:&quot;0.0.0.0&quot;,\n    &quot;local_address&quot;:&quot;127.0.0.1&quot;,\n    &quot;local_port&quot;:1080,\n    &quot;port_password&quot;:{           --每个端口对应一个密码\n        &quot;1111&quot;:&quot;password1&quot;,\n        &quot;1112&quot;:&quot;password2&quot;,\n        &quot;1113&quot;:&quot;password3&quot;\n    },\n    &quot;timeout&quot;:300,\n    &quot;method&quot;:&quot;aes-256-cfb&quot;,\n    &quot;fast_open&quot;:false\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id=\"启动shadowsocks\"> 启动shadowsocks</h3>\n<div><pre><code>#启动\nssserver -c /etc/shadowsocks.json -d start\n#停止\nssserver -c /etc/shadowsocks.json -d stop\n#重启\nssserver -c /etc/shadowsocks.json -d restart\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>启动成功即可通过ss客户端使用。\n在window端可以在控制台通过以下命令查看端口是否打开</p>\n<div><pre><code>telnet {ip} {potr}\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"配置自启动\"> 配置自启动</h3>\n<p>新建启动脚本文件/etc/systemd/system/shadowsocks.service，内容如下：</p>\n<div><pre><code>[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>通过以下命令注册，启动服务</p>\n<div><pre><code>$ systemctl enable shadowsocks\n$ systemctl start shadowsocks\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>启动后可以查看服务状态</p>\n<div><pre><code>$ systemctl status shadowsocks -l\n</code></pre>\n<div><span>1</span><br></div></div><p>若启动成功：</p>\n<div><pre><code>● shadowsocks.service - Shadowsocks\n   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)\n   Active: active (running) since Sun 2017-08-13 18:03:41 CST; 1h 29min ago\n Main PID: 9567 (ssserver)\n   CGroup: /system.slice/shadowsocks.service\n           └─9567 /usr/bin/python2 /usr/bin/ssserver -c /etc/shadowsocks.json\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"firewalld防火墙\"> firewalld防火墙</h3>\n<p>centos7用的firewalld，若不进行设置，可能会导致SS无法使用\n这部分规则可以通过阿里云安全组添加，也可以直接通过代码添加，这里介绍直接添加规则方法</p>\n<div><pre><code># 开放端口\n$ firewall-cmd --permanent --add-port=18381-18385/tcp \n# 修改规则后需要重启\n$ firewall-cmd --reload \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>转载链接：https://segmentfault.com/a/1190000010639190</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Linux下配置jdk的环境变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/13%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/13.2%20centos%E4%B8%8B%E9%85%8D%E7%BD%AEjdk%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/13%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/13.2%20centos%E4%B8%8B%E9%85%8D%E7%BD%AEjdk%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
      "content_html": "<h2 id=\"linux下配置jdk的环境变量\"> Linux下配置jdk的环境变量</h2>\n<p>Hello everyone, let's learn jdk together！</p>\n<h3 id=\"yum安装\"> yum安装</h3>\n<p>yum 查询可以安装的软件</p>\n<div><pre><code>yum list | grep jdk\n</code></pre>\n<div><span>1</span><br></div></div><p><img src=\"/images/jdk1.png\" alt=\"\"></p>\n<p>根据需求选择版本进行安装</p>\n<div><pre><code>yum -y install java-1.8.0-openjdk* \n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"rpm安装\"> rpm安装</h3>\n<p>jdk官网地址为：http://www.oracle.com</p>\n<p>各个版本的下载地址为：http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html   （网页会变，请自动百度，当前日期：2018-03-06）</p>\n<p>根据需求下载rpm版本  （必须有oracle账号进行登录）</p>\n<div><pre><code>wget http://download.oracle.com/otn/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm?AuthParam=1520474898_85357527f14068896db993a783a48e94\nrpm -ivh jdk-7u75-linux-x64.rpm\\?AuthParam\\=1520474898_85357527f14068896db993a783a48e94 \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"压缩包安装\"> 压缩包安装</h3>\n<p>我个人喜欢压缩包安装，灵活性较高</p>\n<p>根据需求下载压缩包版本</p>\n<div><pre><code>wget http://download.oracle.com/otn/java/jdk/7u76-b13/jdk-7u76-linux-x64.tar.gz?AuthParam=1520475252_b3af0149915380bf1a4a0a8d962893ca\nmv jdk-7u76-linux-x64.tar.gz\\?AuthParam\\=1520475252_b3af0149915380bf1a4a0a8d962893ca jdk-7u76-linux-x64.tar.gz\ntar -xvf jdk-7u76-linux-x64.tar.gz\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>配置环境变量</p>\n<div><pre><code># vim /etc/profile\nexport JAVA_HOME=/opt/jdk1.7.0_76\nexport JRE_HOME=/opt/jdk1.7.0_76/jre\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\n# source /etc/profile\n# java -version\njava version &quot;1.7.0_76&quot;\nJava(TM) SE Runtime Environment (build 1.7.0_76-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 24.76-b04, mixed mode)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "image": "https://vuepress-theme-hope-demo.mrhope.site/images/jdk1.png",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "centos6.5下安装python3.6、pip、ipython",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/13%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/13.3%20%E5%AE%89%E8%A3%85python3-6/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/13%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/13.3%20%E5%AE%89%E8%A3%85python3-6/",
      "content_html": "<p>centos6.5下安装python3.6、pip、ipython</p>\n\n<h2 id=\"安装依赖包\"> 安装依赖包</h2>\n<p>test</p>\n<div><pre><code># yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel\n</code></pre>\n<div><span>1</span><br></div></div><p>开始下载、编译、安装python3.6</p>\n<div><pre><code># wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz\n# tar vxf Python-3.6.1.tgz\n# cd Python-3.6.1.tgz\n# ./configure --prefix=/usr/local   #编译，自定义安装目录，如果自定目录不在环境变量重要，要把安装的目录加入到环境变量中\n# make &amp;&amp; make install  #这个过程会非常慢 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>检查是否安装成功</p>\n<div><pre><code># python3\nPython 3.6.1 (default, May 12 2017, 00:21:59) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"安装pip-pip-9-0\"> 安装pip（pip-9.0）</h2>\n<div><pre><code># wget https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz#md5=35f01da33009719497f01a4ba69d63c9  #pip下载，官网去下载。\n# tar zxf pip-9.0.1.tar.gz \n# cd pip-9.0.1\n# python3 setup.py install\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"安装ipython\"> 安装ipython</h2>\n<div><pre><code># pip install ipython\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"设置-3-x-为默认版本\"> 设置 3.x 为默认版本</h2>\n<div><pre><code>rm -f /usr/bin/python\nln -s /usr/local/bin/python3 /usr/bin/python\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"配置yum\"> 配置yum</h2>\n<p>升级 Python 之后，由于将默认的 python 指向了 python3，yum 不能正常使用，需要编辑 yum 的配置文件：</p>\n<div><pre><code>vim /usr/bin/yum\n</code></pre>\n<div><span>1</span><br></div></div><p>同时修改：</p>\n<div><pre><code>vim /usr/libexec/urlgrabber-ext-down\n</code></pre>\n<div><span>1</span><br></div></div><p>将 #!/usr/bin/python 改为 #!/usr/bin/python2.7，保存退出即可。</p>\n<p>参考链接；</p>\n<p>https://www.cnblogs.com/thong2006/p/6843633.html</p>\n",
      "date_published": "2017-09-27T21:00:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "hexo(next)+github博客的搭建",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/13%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/13.4%20%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/13%20%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/13.4%20%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/",
      "content_html": "<p>​\t本文主要讲解博客的搭建过程，next主题优化，next配置文件详解等。<img src=\"images/blogchongjianfengmian.jpg\" alt=\"\"></p>\n\n<h2 id=\"hexo-github的搭建过程2\"> hexo+github的搭建过程2</h2>\n<h3 id=\"准备安装软件\"> 准备安装软件</h3>\n<p><strong>依次安装</strong></p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Git</a></li>\n</ul>\n<h3 id=\"配置和使用github\"> 配置和使用github</h3>\n<h4 id=\"注册github\"> 注册github</h4>\n<p>访问<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">github.com</a>右上角singnup</p>\n<p>uername 最好都用小写，因为最后建立的博客地址是：<a href=\"https://link.zhihu.com/?target=http%3A//username.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">http://username.github.io</a>；邮箱十分重要，GitHub 上很多通知都是通过邮箱的。</p>\n<h4 id=\"创建repository\"> 创建Repository</h4>\n<p>Repository 名字应该是<a href=\"https://link.zhihu.com/?target=http%3A//username.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">http://username.github.io</a>。</p>\n<p>其他的可以选择添加一些描述也可以选择默认什么也不添加 ，点击creat repository</p>\n<h4 id=\"配置ssh-keys\"> 配置SSH keys</h4>\n<p>运行git bash</p>\n<div><pre><code>$ ssh-keygen -t rsa -C <span>\"邮件地址@youremail.com\"</span>\nGenerating public/private rsa key pair.\nEnter <span>file</span> <span>in</span> <span>which</span> to save the key <span>(</span>/Users/your_user_directory/.ssh/id_rsa<span>)</span>:<span>&lt;</span>回车就好<span>></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>【提示1】这里的邮箱地址，输入注册 Github 的邮箱地址；</p>\n<p>【提示2】「-C」的是大写的「C」</p>\n<p>然后系统会要你输入密码：</p>\n<div><pre><code>Enter passphrase <span>(</span>empty <span>for</span> no passphrase<span>)</span>:<span>&lt;</span>设置密码<span>></span>\nEnter same passphrase again:<span>&lt;</span>再次输入密码<span>></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p>\n<p>注意：输入密码的时候没有输入痕迹的，不要以为什么也没有输入。</p>\n<h4 id=\"添加ssh-key到github\"> 添加SSH Key到GitHub</h4>\n<p>在本地文件夹找到id_rsa.pub文件，.ssh文件夹里记事本打开这个文件复制全部内容到github相应位。</p>\n<p><strong>测试</strong></p>\n<p>打开git bash，输入以下代码</p>\n<div><pre><code>$ <span>ssh</span> -T git@github.com\n</code></pre>\n<div><span>1</span><br></div></div><p>如何返回值中有successfully字段代表配置成功了。</p>\n<h4 id=\"设置用户信息\"> 设置用户信息</h4>\n<p>打开git bash，完善个人信息</p>\n<div><pre><code>$ <span>git</span> config --global user.name <span>\"user\"</span> //输入注册时的username\n$ <span>git</span> config --global user.email  <span>\"email\"</span> //填写注册邮箱\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"搭建hexo博客\"> 搭建hexo博客</h3>\n<p>利用npm命令安装hexo</p>\n<div><pre><code>$ npm install -g hexo\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li><strong>创建独立博客项目文件夹</strong></li>\n</ul>\n<p>安装完成后，关掉前面那个 Git Bash 窗口。在本地创建一个与 Repository 中博客项目同名的文件夹（如E:\\username.github.io）在文件夹上点击鼠标右键，选择 Git bash here；</p>\n<p>【提示】在进行博客搭建工作时，每次使用命令都要在E:\\username.github.io目录下。</p>\n<p>执行下面的指令，Hexo 就会自动在 E:\\username.github.io文件夹建立独立博客所需要的所有文件啦！</p>\n<div><pre><code>$ hexo init\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li><strong>安装依赖包</strong></li>\n</ul>\n<div><pre><code>$ <span>npm</span> <span>install</span>\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li><strong>确保git部署</strong></li>\n</ul>\n<div><pre><code>$ <span>npm</span> <span>install</span> hexo-deployer-git --save\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li><strong>本地查看</strong></li>\n</ul>\n<p>现在已经搭建好本地的 Hexo 博客了，执行完下面的命令就可以到浏览器输入 localhost:4000 查看到啦</p>\n<div><pre><code>$ hexo g\n$ hexo s\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>hexo g 每次进行相应改动都要hexo g 生成一下</p>\n<p>hexo s 启动服务预览</p>\n<p>执行完 hexo init 命令后会给一个默认的主题：landscape</p>\n<p>你可以到官网找你喜欢的主题进行下载 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener noreferrer\">hexo themes</a> <a href=\"https://www.zhihu.com/question/24422335/answer/46357100\" target=\"_blank\" rel=\"noopener noreferrer\">知乎：有哪些好看的 Hexo 主题？</a></p>\n<p>找到它所在的 Github Repository （怎么找，我喜欢的那个，恰好博主放了他的github地址）</p>\n<p>找到之后通过git命令下载</p>\n<p>在主题的repository点击clone 复制一下那个地址</p>\n<div><pre><code>$ <span>git</span> clone https://github.com/theme-next/hexo-theme-next themes/next\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"next主题使用及优化\"> next主题使用及优化</h2>\n<h3 id=\"启用主题\"> 启用主题</h3>\n<p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>\n<p>启用 NexT 主题</p>\n<div><pre><code><span>theme</span><span>:</span> next\n</code></pre>\n<div><span>1</span><br></div></div><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>\n<h3 id=\"选择-scheme\"> 选择 Scheme</h3>\n<p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>\n</ul>\n<p>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 <code>#</code> 去除即可。</p>\n<p>选择 Pisces Scheme</p>\n<div><pre><code><span>#scheme: Muse</span>\n<span>#scheme: Mist</span>\n<span>scheme</span><span>:</span> Pisces\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"设置-语言\"> 设置 语言</h3>\n<p>编辑 站点配置文件， 将 <code>language</code> 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>\n<div><pre><code><span>language</span><span>:</span> zh<span>-</span>CN\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"local-search\"> Local Search</h3>\n<p>添加百度/谷歌/本地 自定义站点内容搜索</p>\n<ol>\n<li>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</li>\n</ol>\n<div><pre><code>$ <span>npm</span> <span>install</span> hexo-generator-searchdb --save\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>编辑 站点配置文件，新增以下内容到任意位置：</li>\n</ol>\n<div><pre><code><span>search</span><span>:</span>\n  <span>path</span><span>:</span> search.xml\n  <span>field</span><span>:</span> post\n  <span>format</span><span>:</span> html\n  <span>limit</span><span>:</span> <span>10000</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"3\">\n<li>编辑 主题配置文件，启用本地搜索功能：</li>\n</ol>\n<div><pre><code><span># Local search</span>\n<span>local_search</span><span>:</span>\n  <span>enable</span><span>:</span> <span>true</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"文章模块的美化\"> 文章模块的美化</h2>\n<h3 id=\"文章内代码美化\"> 文章内代码美化</h3>\n<ul>\n<li>行内代码\n在主题目录下，将<code>source/css/_custom/custom.styl</code>文件修改如下：</li>\n</ul>\n<div><pre><code><span>//行内代码样式\ncode</span> <span>{</span>\n    <span>color</span><span>:</span> #ff7600<span>;</span>\n    <span>background</span><span>:</span> #fbf7f8<span>;</span>\n    <span>border</span><span>:</span> 1px solid #d6d6d6<span>;</span>\n    <span>padding</span><span>:</span>1px 4px<span>;</span>\n    <span>word-break</span><span>:</span> break-all<span>;</span>\n    <span>border-radius</span><span>:</span>4px<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>\n<li>区块代码\n在主题目录下，修改<code>config.yml</code>文件：</li>\n</ul>\n<div><pre><code><span>#   样式可选： normal | night | night eighties | night blue | night bright</span>\n<span>highlight_theme</span><span>:</span> night\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"文章结束语\"> 文章结束语</h3>\n<ul>\n<li>**添加模块文件 **</li>\n</ul>\n<p>在主题目录下<code>layout/_macro</code>中新建 <code>passage-end-tag.swig</code>文件,并添加以下内容：</p>\n<div><pre><code><span>&lt;div></span>\n    <span>{</span>% if not is_index %<span>}</span>\n        <span>&lt;div style=\"text-align:center;color: #ccc;font-size:14px;\">\n              -------------本文结束&lt;i>&lt;/i>感谢您的阅读-------------\n        &lt;/div></span>\n    <span>{</span>% endif %<span>}</span>\n&lt;/div>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>\n<li><strong>导入模板文件</strong></li>\n</ul>\n<p>在<code>layout/_macro/post.swig</code>文件中，找到：</p>\n<div><pre><code><span>{</span>#####################<span>}</span>\n<span>{</span>### END POST BODY ###<span>}</span>\n<span>{</span>#####################<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在上面代码之前添加：</p>\n<div><pre><code><span>&lt;div></span>\n      <span>{</span>% if not is_index %<span>}</span>\n          <span>{</span>% include <span>'passage-end-tag.swig'</span> %<span>}</span>\n      <span>{</span>% endif %<span>}</span>\n&lt;/div>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>\n<li><strong>配置</strong>\n在主题配置文件中添加：</li>\n</ul>\n<div><pre><code><span># 文章末尾添加“本文结束”标记</span>\n<span>passage_end_tag</span><span>:</span>\n  <span>enabled</span><span>:</span> <span>true</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"增强文章底部版权信息\"> 增强文章底部版权信息</h3>\n<ul>\n<li>增加文章md文件的头部信息中添加<code>copyright: true</code>时，添加版权声明</li>\n<li>增加文章标题、发布时间、更新时间等信息</li>\n</ul>\n<p>在目录 <code>next/layout/_macro/下</code>添加 <code>my-copyright.swig</code>：</p>\n<div><pre><code><span>{</span>% if page.copyright %<span>}</span>\n<span>&lt;div>\n  &lt;script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\">&lt;/script>\n  \n  &lt;!-- JS库 sweetalert 可修改路径 -->\n  &lt;script src=\"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js\">&lt;/script>\n  &lt;script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\">&lt;/script>\n  &lt;p>&lt;span>本文标题:&lt;/span>&lt;a href=\"{{ url_for(page.path) }}\"></span><span>{</span><span>{</span> page.title <span>}</span><span>}</span><span>&lt;/a>&lt;/p>\n  &lt;p>&lt;span>文章作者:&lt;/span>&lt;a href=\"/\" title=\"访问 {{ theme.author }} 的个人博客\"></span><span>{</span><span>{</span> theme.author <span>}</span><span>}</span><span>&lt;/a>&lt;/p>\n  &lt;p>&lt;span>发布时间:&lt;/span></span><span>{</span><span>{</span> page.date.<span>format</span><span>(</span><span>\"YYYY年MM月DD日 - HH:MM\"</span><span>)</span> <span>}</span><span>}</span><span>&lt;/p>\n  &lt;p>&lt;span>最后更新:&lt;/span></span><span>{</span><span>{</span> page.updated.<span>format</span><span>(</span><span>\"YYYY年MM月DD日 - HH:MM\"</span><span>)</span> <span>}</span><span>}</span><span>&lt;/p>\n  &lt;p>&lt;span>原始链接:&lt;/span>&lt;a href=\"{{ url_for(page.path) }}\" title=\"{{ page.title }}\"></span><span>{</span><span>{</span> page.permalink <span>}</span><span>}</span>&lt;/a>\n    &lt;span class=<span>\"copy-path\"  title=\"点击复制文章链接\">&lt;i data-clipboard-text=\"</span><span>{</span><span>{</span> page.permalink <span>}</span><span>}</span><span>\"  aria-label=\"</span>复制成功！\">&lt;/i>&lt;/span>\n  &lt;/p>\n  &lt;p>&lt;span><span>许可协议</span><span>:</span>&lt;/span>&lt;i class=<span>\"fa fa-creative-commons\"</span>>&lt;/i> &lt;a rel=<span>\"license\"</span> href=<span>\"https://creativecommons.org/licenses/by-nc-nd/4.0/\"</span> target=<span>\"_blank\"</span> title=<span>\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"</span>>署名-非商业性使用-禁止演绎 4.0 国际&lt;/a> 转载请保留原文链接及作者。&lt;/p>  \n&lt;/div>\n&lt;script> \n    var clipboard = new <span>Clipboard</span><span>(</span><span>'.fa-clipboard'</span><span>)</span><span>;\n    $(\".fa-clipboard\").click(function()</span><span>{</span>\n      <span>clipboard.on('success', function()</span><span>{</span>\n        <span>swal(</span><span>{</span>   \n          <span>title</span><span>:</span> <span>\"\"</span><span>,</span>   \n          <span>text</span><span>:</span> <span>'复制成功'</span><span>,</span>\n          <span>icon</span><span>:</span> <span>\"success\"</span><span>,</span> \n          <span>showConfirmButton</span><span>:</span> true\n          <span>}</span><span>)</span><span>;</span>\n\t<span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;  \n&lt;/script></span>\n<span>{</span>% endif %<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>在目录<code>next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>：</p>\n<div><pre><code><span>.my_post_copyright</span> <span>{</span>\n  <span>width</span><span>:</span> 85%<span>;</span>\n  <span>max-width</span><span>:</span> 45em<span>;</span>\n  <span>margin</span><span>:</span> 2.8em auto 0<span>;</span>\n  <span>padding</span><span>:</span> 0.5em 1.0em<span>;</span>\n  <span>border</span><span>:</span> 1px solid #d3d3d3<span>;</span>\n  <span>font-size</span><span>:</span> 0.93rem<span>;</span>\n  <span>line-height</span><span>:</span> 1.6em<span>;</span>\n  <span>word-break</span><span>:</span> break-all<span>;</span>\n  <span>background</span><span>:</span> <span>rgba</span><span>(</span>255<span>,</span>255<span>,</span>255<span>,</span>0.4<span>)</span><span>;</span>\n<span>}</span>\n<span>.my_post_copyright p</span><span>{</span><span>margin</span><span>:</span>0<span>;</span><span>}</span>\n<span>.my_post_copyright span</span> <span>{</span>\n  <span>display</span><span>:</span> inline-block<span>;</span>\n  <span>width</span><span>:</span> 5.2em<span>;</span>\n  <span>color</span><span>:</span> #b5b5b5<span>;</span>\n  <span>font-weight</span><span>:</span> bold<span>;</span>\n<span>}</span>\n<span>.my_post_copyright .raw</span> <span>{</span>\n  <span>margin-left</span><span>:</span> 1em<span>;</span>\n  <span>width</span><span>:</span> 5em<span>;</span>\n<span>}</span>\n<span>.my_post_copyright a</span> <span>{</span>\n  <span>color</span><span>:</span> #808080<span>;</span>\n  <span>border-bottom</span><span>:</span>0<span>;</span>\n<span>}</span>\n<span>.my_post_copyright a:hover</span> <span>{</span>\n  <span>color</span><span>:</span> #a3d2a3<span>;</span>\n  <span>text-decoration</span><span>:</span> underline<span>;</span>\n<span>}</span>\n<span>.my_post_copyright:hover .fa-clipboard</span> <span>{</span>\n  <span>color</span><span>:</span> #000<span>;</span>\n<span>}</span>\n<span>.my_post_copyright .post-url:hover</span> <span>{</span>\n  <span>font-weight</span><span>:</span> normal<span>;</span>\n<span>}</span>\n<span>.my_post_copyright .copy-path</span> <span>{</span>\n  <span>margin-left</span><span>:</span> 1em<span>;</span>\n  <span>width</span><span>:</span> 1em<span>;\n  +mobile()</span><span>{</span><span>display</span><span>:</span>none<span>;</span><span>}</span>\n<span>}</span>\n<span>.my_post_copyright .copy-path:hover</span> <span>{</span>\n  <span>color</span><span>:</span> #808080<span>;</span>\n  <span>cursor</span><span>:</span> pointer<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p>修改<code>next/layout/_macro/post.swig</code>，在代码</p>\n<div><pre><code><span>{</span>#####################<span>}</span>\n<span>{</span>### END POST BODY ###<span>}</span>\n<span>{</span>#####################<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>之前添加增加如下代码：</p>\n<div><pre><code><span>&lt;div></span>\n      <span>{</span>% if not is_index %<span>}</span>\n        <span>{</span>% include <span>'my-copyright.swig'</span> %<span>}</span>\n      <span>{</span>% endif %<span>}</span>\n&lt;/div>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>修改<code>next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p>\n<div><pre><code>@import <span>\"my-post-copyright\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>保存重新生成即可。</p>\n<h2 id=\"参考\"> 参考</h2>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/32957389\" target=\"_blank\" rel=\"noopener noreferrer\">技术小白搭建hexo+github博客</a></p>\n<p><a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener noreferrer\">next最新版主题下载使用</a></p>\n<p><a href=\"https://theme-next.iissnan.com\" target=\"_blank\" rel=\"noopener noreferrer\">next主题官方文档</a></p>\n<p><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"noopener noreferrer\">next主题个性化教程</a></p>\n<p><a href=\"https://iassas.com/archives/d6a90b9.html\" target=\"_blank\" rel=\"noopener noreferrer\">next主题配置文件详解</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_39345384/article/details/80544660\" target=\"_blank\" rel=\"noopener noreferrer\">NexT v6.0+ 背景动画Canvas_nest设置无效的解决方案</a></p>\n<p><a href=\"http://zhuxin.tech/2017/10/20/%E7%BB%99%20Hexo%20%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E7%99%BE%E5%BA%A6%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%AA%8C%E8%AF%81/\" target=\"_blank\" rel=\"noopener noreferrer\">给Hexo搭建的博客增加百度谷歌搜索引擎验证</a></p>\n<p><a href=\"https://github.com/theme-next/hexo-symbols-count-time\" target=\"_blank\" rel=\"noopener noreferrer\">添加文章字数和读取文章的时间</a></p>\n<p><a href=\"https://www.jianshu.com/p/344cf061598d\" target=\"_blank\" rel=\"noopener noreferrer\">hexo + next主题高级配置</a></p>\n</blockquote>\n",
      "date_published": "2016-06-06T14:00:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "1.*在浏览器中打开*http://IP/phpldapadmin",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/25%20openldap/phpldapadmin%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/25%20openldap/phpldapadmin%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC/",
      "content_html": "<h3 id=\"_1-在浏览器中打开http-ip-phpldapadmin\"> 1.<strong><strong>在浏览器中打开</strong></strong>http://IP/phpldapadmin</h3>\n<h3 id=\"_2-点击【login】按钮-输入管理员密码。\"> 2. 点击【Login】按钮，输入管理员密码。</h3>\n<p><img src=\"images/1327931-20180831110424329-793110324.png\" alt=\"img\"></p>\n<h3 id=\"_3-点击【创建新条目】\"> 3.****点击【<strong><strong>创建新条目</strong></strong>】.</h3>\n<p><img src=\"images/1327931-20180831110429812-17489868.png\" alt=\"img\"></p>\n<h3 id=\"_4-点击【generic-postfix-group】\"> 4. 点击【<strong><strong>Generic: Postfix Group</strong></strong>】.</h3>\n<p><img src=\"images/1327931-20180831110436692-1272423331.png\" alt=\"img\"></p>\n<h3 id=\"_5-输入【users】-点击【创建对象】\"> 5. 输入【Users】, 点击【<strong><strong>创建对象</strong></strong>】</h3>\n<p><img src=\"images/1327931-20180831110503252-505929691.png\" alt=\"img\"></p>\n<h3 id=\"_6-点击【提交】\"> 6. 点击【<strong><strong>提交</strong></strong>】</h3>\n<p><img src=\"images/1327931-20180831110509143-992814925.png\" alt=\"img\"></p>\n<h3 id=\"_7-下一步添加用户-点击刚才所创建的组【users】\"> 7. 下一步添加用户****，****点击刚才所创建的组【<strong><strong>u</strong></strong>sers】</h3>\n<h3 id=\"_8-点击【创建一个子条目】\"> 8****. 点击【<strong><strong>创建一个子条目</strong></strong>】</h3>\n<p><img src=\"images/1327931-20180831110516069-1260241219.png\" alt=\"img\"></p>\n<h3 id=\"_9-点击【generic-user-account】按钮。\"> 9****. 点击【Generic: User Account】按钮。</h3>\n<p><img src=\"images/1327931-20180831110522490-1008013931.png\" alt=\"img\"></p>\n<h3 id=\"_10-根据自己的情况-添加信息然后点击【创建对象】\"> 10.<strong><strong>根据自己的情况，添加信息</strong></strong>然后点击【创建对象】</h3>\n<p>示例：</p>\n<p><img src=\"images/1327931-20180831110530109-967678460.png\" alt=\"img\"></p>\n<h3 id=\"_11-点击【提交】\"> 11. 点击【<strong><strong>提交</strong></strong>】</h3>\n<p><img src=\"images/1327931-20180831110540330-1343019554.png\" alt=\"img\"></p>\n<h3 id=\"_12-点击新增的用户-点击右侧-【增加新的属性】\"> 12.<strong><strong>点击</strong></strong>新增的用户，点击右侧****【<strong><strong>增加新的属性</strong></strong>】</h3>\n<p><img src=\"images/1327931-20180831110546251-141798944.png\" alt=\"img\"></p>\n<h3 id=\"_13-选择属性【email】\"> 13.****选择属性【Email】</h3>\n<p><img src=\"images/1327931-20180831110551737-1997743890.png\" alt=\"img\"></p>\n<h3 id=\"_14-添好email地址\"> 14. 添好Email地址</h3>\n<p>示例如下。</p>\n<p><img src=\"images/1327931-20180831110557247-126754661.png\" alt=\"img\"></p>\n<p>15.点击【Update Object】</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "一、 /etc/security/limits.conf 详解",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/limit.conf%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/limit.conf%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/",
      "content_html": "<h2 id=\"一、-etc-security-limits-conf-详解\"> 一、 /etc/security/limits.conf 详解</h2>\n<p><code>/etc/security/limits.conf</code> 文件实际是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 <code>pam_limits.so</code> 的配置文件，而且只针对于单个会话。 该设置不会影响系统服务的资源限制。还要注意 <code>/etc/security/limits.d/</code> 的这个目录，</p>\n<h3 id=\"etc-security-limits-conf-配置解析\"> /etc/security/limits.conf 配置解析</h3>\n<div><pre><code># /etc/security/limits.conf\n#\n#This file sets the resource limits for the users logged in via PAM.\n该文件为通过PAM登录的用户设置资源限制。\n#It does not affect resource limits of the system services.\n#它不影响系统服务的资源限制。\n#Also note that configuration files in /etc/security/limits.d directory,\n#which are read in alphabetical order, override the settings in this\n#file in case the domain is the same or more specific.\n请注意/etc/security/limits.d下按照字母顺序排列的配置文件会覆盖 /etc/security/limits.conf中的\ndomain相同的的配置\n#That means for example that setting a limit for wildcard domain here\n#can be overriden with a wildcard setting in a config file in the\n#subdirectory, but a user specific setting here can be overriden only\n#with a user specific setting in the subdirectory.\n这意味着，例如使用通配符的domain会被子目录中相同的通配符配置所覆盖，但是某一用户的特定配置\n只能被字母路中用户的配置所覆盖。其实就是某一用户A如果在/etc/security/limits.conf有配置，当\n/etc/security/limits.d子目录下配置文件也有用户A的配置时，那么A中某些配置会被覆盖。最终取的值是 /etc/security/limits.d 下的配置文件的配置。\n\n#\n#Each line describes a limit for a user in the form:\n#每一行描述一个用户配置\n#&lt;domain&gt; &lt;type&gt; &lt;item&gt; &lt;value&gt;\n\n#Where:\n#&lt;domain&gt; can be:\n# - a user name    一个用户名\n# - a group name, with @group syntax    用户组格式为@GROUP_NAME\n# - the wildcard *, for default entry    默认配置为*，代表所有用户\n# - the wildcard %, can be also used with %group syntax,\n# for maxlogin limit \n#\n#&lt;type&gt; can have the two values:\n# - &quot;soft&quot; for enforcing the soft limits \n# - &quot;hard&quot; for enforcing hard limits\n有soft，hard和-，soft指的是当前系统生效的设置值，软限制也可以理解为警告值。\nhard表名系统中所能设定的最大值。soft的限制不能比hard限制高，用-表名同时设置了soft和hard的值。\n#&lt;item&gt; can be one of the following:    &lt;item&gt;可以使以下选项中的一个\n# - core - limits the core file size (KB)    限制内核文件的大小。\n# - data - max data size (KB)    最大数据大小\n# - fsize - maximum filesize (KB)    最大文件大小\n# - memlock - max locked-in-memory address space (KB)    最大锁定内存地址空间\n# - nofile - max number of open file descriptors 最大打开的文件数(以文件描叙符，file descripter计数) \n# - rss - max resident set size (KB) 最大持久设置大小\n# - stack - max stack size (KB) 最大栈大小\n# - cpu - max CPU time (MIN)    最多CPU占用时间，单位为MIN分钟\n# - nproc - max number of processes 进程的最大数目\n# - as - address space limit (KB) 地址空间限制 \n# - maxlogins - max number of logins for this user    此用户允许登录的最大数目\n# - maxsyslogins - max number of logins on the system    系统最大同时在线用户数\n# - priority - the priority to run user process with    运行用户进程的优先级\n# - locks - max number of file locks the user can hold    用户可以持有的文件锁的最大数量\n# - sigpending - max number of pending signals\n# - msgqueue - max memory used by POSIX message queues (bytes)\n# - nice - max nice priority allowed to raise to values: [-20, 19] max nice优先级允许提升到值\n# - rtprio - max realtime pr iority\n#\n#&lt;domain&gt; &lt;type&gt; &lt;item&gt; &lt;value&gt;\n#\n\n#* soft core 0\n#* hard rss 10000\n#@student hard nproc 20\n#@faculty soft nproc 20\n#@faculty hard nproc 50\n#ftp hard nproc 0\n#@st\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br></div></div><h3 id=\"etc-security-limits-d-目录\"> /etc/security/limits.d/目录</h3>\n<ul>\n<li>\n<p><code>/etc/security/limits.d/</code>目录</p>\n<p>该目录下默认有<code>*-nproc.conf</code>文件，该文件是用于限制用户的线程限制。我们也可以在该目录创建配置文件</p>\n<p>在<code>/etc/security/limits.d/</code>下，以 .conf 结尾。</p>\n<ul>\n<li>\n<p>centos 7</p>\n<p>在CentOS 7版本中为<code>/etc/security/limits.d/20-nproc.conf</code>，</p>\n<div><pre><code># Default limit for number of user&#39;s processes to prevent\n# accidental fork bombs.\n# See rhbz #432903 for reasoning.\n\n*          soft    nproc     4096 # 所有的用户默认可以打开最大的进程数为 4096\nroot       soft    nproc     unlimited # root 用户默认可以打开最大的进程数 无限制的。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>\n<li>\n<p>CentOS 6</p>\n<p>在CentOS 6版本中为<code>/etc/security/limits.d/90-nproc.conf</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、-ulimit-如何配置\"> 二、 ulimit 如何配置</h2>\n<h3 id=\"配置注意事项\"> 配置注意事项</h3>\n<p>注意不能设置 <code>nofile</code>不能设置 <code>unlimited</code>，<code>noproc</code>可以.\n当我们设置了 <code>nofile</code>不能设置 <code>unlimited</code> 后，我们进行 ssh 登录，是登录不了的，并且报错下面的内容。</p>\n<div><pre><code>Dec  1 14:57:57 localhost sshd[1543]: pam_limits(sshd:session): Could not set limit for &#39;nofile&#39;: Operation not permitted\n</code></pre>\n<div><span>1</span><br></div></div><p>当我们设置的 <code>nofile</code> 的值可以设置的最大值为 1048576(2**20)，设置的值大于该数，就会进行登录不了。也会显示上面的登录错误。(亲测)</p>\n<h3 id=\"基础配置\"> 基础配置</h3>\n<p>我们不将所有的配置配置在<code>/etc/security/limits.conf</code> 而是将配置放在 <code>/etc/security/limits.d/</code> 下。\n比如我们将 nofile的配置放在 <code>/etc/security/limits.d/20-nofile.conf</code> ，nproc 的配置放在 <code>/etc/security/limits.d/20-nproc.conf</code>.</p>\n<p>一般我们需要配置的 <code>/etc/security/limits.d/20-nofile.conf</code> 为。</p>\n<div><pre><code>root soft nofile 65535\nroot hard nofile 65535\n* soft nofile 65535\n* hard nofile 65535\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><code>/etc/security/limits.d/20-nproc.conf</code> 设置为</p>\n<div><pre><code>*    -     nproc   65535\nroot soft  nproc  unlimited\nroot hard  nproc  unlimited\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"注意覆盖点的问题。\"> 注意覆盖点的问题。</h3>\n<p><strong>示例一：</strong>\n当 <code>/etc/security/limits.conf</code> 配置了:</p>\n<div><pre><code>root soft nofile 65538\nroot hard nofile 65538\n* soft nofile 65539\n* hard nofile 65539\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这个root 用户的 默认取值是 65538 ，* 统配符虽然在 root 配置后面，但是 root 的配置只能被 root 进行覆盖。</p>\n<p>我们看下这个配置，当这样配置的时候</p>\n<div><pre><code>root soft nofile 65538\nroot hard nofile 65538\n* soft nofile 65539\n* hard nofile 65539\nroot soft nofile 65539\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这个的 root 用户的取值还是 65538 ，因为虽然 <code>root soft nofile 65539</code> 会覆盖我们之前的配置，但是这个配置是不生效的。因为 <code>root soft nofile 65539</code> 配置的值大于<code>root hard nofile 65538</code> , <code>soft</code> 配置的值不能大于 <code>hard</code>.</p>\n<p><strong>示例二：</strong>\n当我们在 <code>/etc/security/limits.conf</code> 配置了:</p>\n<div><pre><code>root soft nofile 65538\nroot hard nofile 65538\n* soft nofile 65539\n* hard nofile 65539\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后我们在 <code>/etc/security/limits.d/20-nofile.conf</code> 配置了：</p>\n<div><pre><code>root soft nofile 65536\nroot hard nofile 65536\n* soft nofile 65540\n* hard nofile 65540\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>最后的取值是会取 <code>/etc/security/limits.d/20-nofile.conf</code> 里面的值。</p>\n<blockquote>\n<ol>\n<li>配置，只能被特定覆盖。</li>\n<li><code>/etc/security/limits.d/</code> 下文件的相同配置可以覆盖 <code>/etc/security/limits.conf</code></li>\n<li><code>soft</code>和<code>hard</code>需要都进行设置,才能生效。</li>\n<li><code>nofile</code>不能设置 <code>unlimited</code></li>\n<li><code>nofile</code>可以设置的最大值为 1048576(2**20)，设置的值大于该数，就会进行登录不了。</li>\n<li>soft 设置的值 一定要小于或等于 hard 的值。</li>\n</ol>\n</blockquote>\n<p>具体详细配置根据应用情况进行配置。</p>\n<h2 id=\"三、ulimit-配置后生效\"> 三、ulimit 配置后生效</h2>\n<h3 id=\"临时配置\"> 临时配置</h3>\n<p>设置可以打开文件的最大数为 65536</p>\n<div><pre><code>ulimit  -SHn  65536\n</code></pre>\n<div><span>1</span><br></div></div><p>重启后失效。</p>\n<h3 id=\"永久配置\"> 永久配置</h3>\n<p>配置到配置文件<code>/etc/security/limits.conf</code>或者 <code>/etc/security/limits.d/</code> 中。\n然后退出当前会话，重新登录。 即可生效，重启配置也会保留。</p>\n<h3 id=\"配置不生效的问题\"> 配置不生效的问题</h3>\n<p>按照上面的配置好了之后，我们进行设置登录到服务器，我发现是配置没有生效的，但是我使用 su - root 之后，发现配置是生效的。 很怪异。\n设备环境： Centos6.</p>\n<h4 id=\"问题原因\"> 问题原因</h4>\n<p>主要是 Centos6 的原因，我们排查到 sshd 服务的 PAM 模块是没有开启的，而<code>/etc/security/limits.conf</code> 文件实际是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 <code>pam_limits.so</code> 的配置文件，我们没有开启 PAM 模块，最终也就没有读取到 <code>/etc/security/limits.conf</code> 的内容。 而 su 进行切换的时候使用的是 终端tty登陆(默认使用PAM模块),</p>\n<h4 id=\"解决办法\"> 解决办法</h4>\n<p>在 <code>/etc/ssh/sshd_config</code> 将 <code>UsePAM no</code> 更改为 <code>UsePAM yes</code>, 然后重启 sshd 服务。</p>\n<h2 id=\"四、ulimit-常用命令\"> 四、ulimit 常用命令</h2>\n<div><pre><code>      -S\tuse the `soft&#39; resource limit # 设置软限制\n      -H\tuse the `hard&#39; resource limit # 设置硬限制\n      -a\tall current limits are reported# 显示所有的配置。\n      -b\tthe socket buffer size # 设置socket buffer 的最大值。\n      -c\tthe maximum size of core files created # 设置core文件的最大值.\n      -d\tthe maximum size of a process&#39;s data segment  # 设置线程数据段的最大值\n      -e\tthe maximum scheduling priority (`nice&#39;) # 设置最大调度优先级\n      -f\tthe maximum size of files written by the shell and its children # 创建文件的最大值。\n      -i\tthe maximum number of pending signals # 设置最大的等待信号\n      -l\tthe maximum size a process may lock into memory #设置在内存中锁定进程的最大值\n      -m\tthe maximum resident set size \n      -n\tthe maximum number of open file descriptors # 设置最大可以的打开文件描述符。\n      -p\tthe pipe buffer size\n      -q\tthe maximum number of bytes in POSIX message queues\n      -r\tthe maximum real-time scheduling priority\n      -s\tthe maximum stack size\n      -t\tthe maximum amount of cpu time in seconds\n      -u\tthe maximum number of user processes  # 设置用户可以创建的最大进程数。\n      -v\tthe size of virtual memory  # 设置虚拟内存的最大值\n      -x\tthe maximum number of file locks\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id=\"查看配置\"> 查看配置</h3>\n<p>查看所有的配置</p>\n<div><pre><code>ulimit  -a\n</code></pre>\n<div><span>1</span><br></div></div><p>查看配置的最大打开文件数</p>\n<div><pre><code>ulimit  -n\n</code></pre>\n<div><span>1</span><br></div></div><p>更改配置</p>\n<div><pre><code>ulimit  -SHn  65536\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>转载链接：https://www.cnblogs.com/operationhome/p/11966041.html</p>\n</blockquote>\n",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "附录 F. I/O 与 I/O 重定向详细介绍",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/appendix/F_io_and_redirection/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/appendix/F_io_and_redirection/",
      "content_html": "<h1 id=\"附录-f-i-o-与-i-o-重定向详细介绍\"> 附录 F. I/O 与 I/O 重定向详细介绍</h1>\n<p>一个指令会预期前三个文件描述符可用。第一个， <em>fd 0</em> (标准输入， <code>stdin</code>) 用于读取。其他两个 (<em>fd 1</em>, <code>stdout</code> 和 <em>fd 2</em>, <code>stderr</code>) 用于写入。</p>\n<p>每个指令都关联着一个 <code>stdin</code>, <code>stdout</code> 和 <code>stderr</code> 。<strong><code>ls 2&gt;&amp;1</code></strong> 意味着临时将 ls 的 <code>stderr</code> 连接到与 Shell 的 <code>stdout</code> 一样的「资源」。</p>\n<p>按照惯例，指令从 fd 0 (<code>stdin</code>) 读取输入，正常输出打印到 fd 1 (<code>stdin</code>)，错误输出打印到 fd 2 (<code>stderr</code>)。如果这三个文件描述符有一个没被打开，你可能会碰上问题：</p>\n<div><pre><code>bash$ <span>cat</span> /etc/passwd <span>>&amp;</span>-\ncat: standard output: Bad <span>file</span> descriptor\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>例如，当 <strong>xterm</strong> 运行，它首先自我初始化。在运行用户的 Shell 之前， <strong>xterm</strong> 会打开终端设备 (/dev/pts/<n> 或类似) 三次。</p>\n<p>此时 Bash 继承这三个文件描述符，且每个 Bash 运行的指令 (子进程) 因此继承它们，除非你重定向它们。重定向意味着重设一个文件描述符到另一个文件 (或者管道，或任何有权限的东西)。文件描述符可以本地重设 (对于一个指令、指令组、子 Shell、while / case / for 循环等)，或者，对余下的 Shell 会话全局重设 (通过 exec)。</p>\n<p><code>ls &gt; /dev/null</code> 意味着在其文件描述符 1 连接到 <code>/dev/null</code> 的情况下运行 <strong>ls</strong> 。</p>\n<div><pre><code>bash$ <span>lsof</span> -a -p <span>$$</span> -d0,1,2\nCOMMAND PID     <span>USER</span>   FD   TYPE DEVICE SIZE NODE NAME\n <span>bash</span>    <span>363</span> bozo        0u   CHR  <span>136,1</span>         <span>3</span> /dev/pts/1\n <span>bash</span>    <span>363</span> bozo        1u   CHR  <span>136,1</span>         <span>3</span> /dev/pts/1\n <span>bash</span>    <span>363</span> bozo        2u   CHR  <span>136,1</span>         <span>3</span> /dev/pts/1\n\n\nbash$ <span>exec</span> <span><span>2</span>></span> /dev/null\nbash$ <span>lsof</span> -a -p <span>$$</span> -d0,1,2\nCOMMAND PID     <span>USER</span>   FD   TYPE DEVICE SIZE NODE NAME\n <span>bash</span>    <span>371</span> bozo        0u   CHR  <span>136,1</span>         <span>3</span> /dev/pts/1\n <span>bash</span>    <span>371</span> bozo        1u   CHR  <span>136,1</span>         <span>3</span> /dev/pts/1\n <span>bash</span>    <span>371</span> bozo        2w   CHR    <span>1,3</span>       <span>120</span> /dev/null\n\n\nbash$ <span>bash</span> -c <span>'lsof -a -p <span>$$</span> -d0,1,2'</span> <span>|</span> <span>cat</span>\nCOMMAND PID <span>USER</span>   FD   TYPE DEVICE SIZE NODE NAME\n <span>lsof</span>    <span>379</span> root    0u   CHR  <span>136,1</span>         <span>3</span> /dev/pts/1\n <span>lsof</span>    <span>379</span> root    1w  FIFO    <span>0,0</span>      <span>7118</span> pipe\n <span>lsof</span>    <span>379</span> root    2u   CHR  <span>136,1</span>         <span>3</span> /dev/pts/1\n\n\nbash$ <span>echo</span> <span>\"<span><span>$(</span><span>bash</span> -c <span>'lsof -a -p <span>$$</span> -d0,1,2'</span> <span><span>2</span>></span><span>&amp;1</span><span>)</span></span>\"</span>\nCOMMAND PID <span>USER</span>   FD   TYPE DEVICE SIZE NODE NAME\n <span>lsof</span>    <span>426</span> root    0u   CHR  <span>136,1</span>         <span>3</span> /dev/pts/1\n <span>lsof</span>    <span>426</span> root    1w  FIFO    <span>0,0</span>      <span>7520</span> pipe\n <span>lsof</span>    <span>426</span> root    2w  FIFO    <span>0,0</span>      <span>7520</span> pipe\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id=\"练习\"> 练习</h2>\n<p>分析以下脚本。</p>\n<div><pre><code><span>#! /usr/bin/env bash</span>\n\n<span>mkfifo</span> /tmp/fifo1 /tmp/fifo2\n<span>while</span> <span>read</span> a<span>;</span> <span>do</span> <span>echo</span> <span>\"FIFO1: <span>$a</span>\"</span><span>;</span> <span>done</span> <span>&lt;</span> /tmp/fifo1 <span>&amp;</span> <span>exec</span> <span><span>7</span>></span> /tmp/fifo1\n<span>exec</span> <span><span>8</span>></span> <span>></span><span>(</span><span>while</span> <span>read</span> a<span>;</span> <span>do</span> <span>echo</span> <span>\"FD8: <span>$a</span>, to fd7\"</span><span>;</span> <span>done</span> <span>></span><span>&amp;7</span><span>)</span>\n\n<span>exec</span> <span><span>3</span>></span><span>&amp;1</span>\n<span>(</span>\n <span>(</span>\n  <span>(</span>\n   <span>while</span> <span>read</span> a<span>;</span> <span>do</span> <span>echo</span> <span>\"FIFO2: <span>$a</span>\"</span><span>;</span> <span>done</span> <span>&lt;</span> /tmp/fifo2 <span>|</span> <span>tee</span> /dev/stderr <span>\\</span>\n   <span>|</span> <span>tee</span> /dev/fd/4 <span>|</span> <span>tee</span> /dev/fd/5 <span>|</span> <span>tee</span> /dev/fd/6 <span>></span><span>&amp;7</span> <span>&amp;</span> <span>exec</span> <span><span>3</span>></span> /tmp/fifo2\n\n   <span>echo</span> 1st, to stdout\n   <span>sleep</span> <span>1</span>\n   <span>echo</span> 2nd, to stderr <span>></span><span>&amp;2</span>\n   <span>sleep</span> <span>1</span>\n   <span>echo</span> 3rd, to fd <span>3</span> <span>></span><span>&amp;3</span>\n   <span>sleep</span> <span>1</span>\n   <span>echo</span> 4th, to fd <span>4</span> <span>></span><span>&amp;4</span>\n   <span>sleep</span> <span>1</span>\n   <span>echo</span> 5th, to fd <span>5</span> <span>></span><span>&amp;5</span>\n   <span>sleep</span> <span>1</span>\n   <span>echo</span> 6th, through a pipe <span>|</span> <span>sed</span> <span>'s/.*/PIPE: &amp;, to fd 5/'</span> <span>></span><span>&amp;5</span>\n   <span>sleep</span> <span>1</span>\n   <span>echo</span> 7th, to fd <span>6</span> <span>></span><span>&amp;6</span>\n   <span>sleep</span> <span>1</span>\n   <span>echo</span> 8th, to fd <span>7</span> <span>></span><span>&amp;7</span>\n   <span>sleep</span> <span>1</span>\n   <span>echo</span> 9th, to fd <span>8</span> <span>></span><span>&amp;8</span>\n\n  <span>)</span> <span><span>4</span>></span><span>&amp;1</span> <span>></span><span>&amp;3</span> <span><span>3</span>>&amp;</span>- <span>|</span> <span>while</span> <span>read</span> a<span>;</span> <span>do</span> <span>echo</span> <span>\"FD4: <span>$a</span>\"</span><span>;</span> <span>done</span> <span><span>1</span>></span><span>&amp;3</span> <span><span>5</span>>&amp;</span>- <span><span>6</span>>&amp;</span>-\n <span>)</span> <span><span>5</span>></span><span>&amp;1</span> <span>></span><span>&amp;3</span> <span>|</span> <span>while</span> <span>read</span> a<span>;</span> <span>do</span> <span>echo</span> <span>\"FD5: <span>$a</span>\"</span><span>;</span> <span>done</span> <span><span>1</span>></span><span>&amp;3</span> <span><span>6</span>>&amp;</span>-\n<span>)</span> <span><span>6</span>></span><span>&amp;1</span> <span>></span><span>&amp;3</span> <span>|</span> <span>while</span> <span>read</span> a<span>;</span> <span>do</span> <span>echo</span> <span>\"FD6: <span>$a</span>\"</span><span>;</span> <span>done</span> <span><span>3</span>>&amp;</span>-\n\n<span>rm</span> -f /tmp/fifo1 /tmp/fifo2\n\n\n<span># 对每个指令和子 Shell，猜猜哪个 fd 指向什么。</span>\n<span># 祝你好运！</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "附录 T. ASCII 表",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/appendix/T_ascii_table/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/appendix/T_ascii_table/",
      "content_html": "<h1 id=\"附录-t-ascii-表\"> 附录 T. ASCII 表</h1>\n<p>传统上，这类书的附录会有一个 ASCII 表。但本书不会。取而代之的是这些生成一张完整 ASCII 表的简短脚本。</p>\n<p>例 T-1. 一个生成 ASCII 表的脚本</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># ascii.sh</span>\n<span># ver. 0.2, reldate 26 Aug 2008</span>\n<span># Patched by ABS Guide author.</span>\n\n<span># Original script by Sebastian Arming.</span>\n<span># Used with permission (thanks!).</span>\n\n<span>exec</span> <span>></span>ASCII.txt         <span>#  Save stdout to file,</span>\n                        <span>#+ as in the example scripts</span>\n                        <span>#+ reassign-stdout.sh and upperconv.sh.</span>\n\n<span>MAXNUM</span><span>=</span><span>256</span>\n<span><span>COLUMNS</span></span><span>=</span><span>5</span>\n<span>OCT</span><span>=</span><span>8</span>\n<span>OCTSQU</span><span>=</span><span>64</span>\n<span>LITTLESPACE</span><span>=</span>-3\n<span>BIGSPACE</span><span>=</span>-5\n\n<span>i</span><span>=</span><span>1</span> <span># Decimal counter</span>\n<span>o</span><span>=</span><span>1</span> <span># Octal counter</span>\n\n<span>while</span> <span>[</span> <span>\"<span>$i</span>\"</span> -lt <span>\"<span>$MAXNUM</span>\"</span> <span>]</span><span>;</span> <span>do</span>  <span># We don't have to count past 400 octal.</span>\n        <span>paddi</span><span>=</span><span>\"    <span>$i</span>\"</span>\n        <span>echo</span> -n <span>\"<span>${paddi<span>:</span> $BIGSPACE}</span>  \"</span>       <span># Column spacing.</span>\n        <span>paddo</span><span>=</span><span>\"00<span>$o</span>\"</span>\n<span>#       echo -ne \"\\\\${paddo: $LITTLESPACE}\"   # Original.</span>\n        <span>echo</span> -ne <span>\"<span title=\"\\\\\">\\\\</span>0<span>${paddo<span>:</span> $LITTLESPACE}</span>\"</span>  <span># Fixup.</span>\n<span>#                   ^</span>\n        <span>echo</span> -n <span>\"     \"</span>\n        <span>if</span> <span><span>((</span> i <span>%</span> $COLUMNS <span>==</span> <span>0</span><span>))</span></span><span>;</span> <span>then</span>       <span># New line.</span>\n           <span>echo</span>\n        <span>fi</span>\n        <span><span>((</span>i<span>++</span><span>,</span> o<span>++</span><span>))</span></span>\n        <span># The octal notation for 8 is 10, and 64 decimal is 100 octal.</span>\n        <span><span>((</span> i <span>%</span> $OCT <span>==</span> <span>0</span><span>))</span></span>    <span>&amp;&amp;</span> <span><span>((</span>o<span>+</span><span>=</span><span>2</span><span>))</span></span>\n        <span><span>((</span> i <span>%</span> $OCTSQU <span>==</span> <span>0</span><span>))</span></span> <span>&amp;&amp;</span> <span><span>((</span>o<span>+</span><span>=</span><span>20</span><span>))</span></span>\n<span>done</span>\n\n<span>exit</span> <span>$?</span>\n\n<span># Compare this script with the \"pr-asc.sh\" example.</span>\n<span># This one handles \"unprintable\" characters.</span>\n\n<span># Exercise:</span>\n<span># Rewrite this script to use decimal numbers, rather than octal.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><p>例 T-2. 另一个 ASCII 表脚本</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># Script author: Joseph Steinhauser</span>\n<span># Lightly edited by ABS Guide author, but not commented.</span>\n<span># Used in ABS Guide with permission.</span>\n\n<span>#-------------------------------------------------------------------------</span>\n<span>#-- File:  ascii.sh    Print ASCII chart, base 10/8/16         (JETS-2012)</span>\n<span>#-------------------------------------------------------------------------</span>\n<span>#-- Usage: ascii [oct|dec|hex|help|8|10|16]</span>\n<span>#--</span>\n<span>#-- This script prints out a summary of ASCII char codes from Zero to 127.</span>\n<span>#-- Numeric values may be printed in Base10, Octal, or Hex.</span>\n<span>#--</span>\n<span>#-- Format Based on: /usr/share/lib/pub/ascii with base-10 as default.</span>\n<span>#-- For more detail, man ascii . . .</span>\n<span>#-------------------------------------------------------------------------</span>\n\n<span>[</span> -n <span>\"<span>$BASH_VERSION</span>\"</span> <span>]</span> <span>&amp;&amp;</span> <span>shopt</span> -s extglob\n\n<span>case</span> <span>\"<span>$1</span>\"</span> <span>in</span>\n   oct<span>|</span><span>[</span>Oo<span>]</span>?<span>(</span><span>[</span>Cc<span>]</span><span>[</span>Tt<span>]</span><span>)</span><span>|</span><span>8</span><span>)</span>       <span>Obase</span><span>=</span>Octal<span>;</span>  <span>Numy</span><span>=</span>3o<span>;</span><span>;</span>\n   hex<span>|</span><span>[</span>Hh<span>]</span>?<span>(</span><span>[</span>Ee<span>]</span><span>[</span>Xx<span>]</span><span>)</span><span>|</span><span>16</span><span>|</span><span>[</span>Xx<span>]</span><span>)</span> <span>Obase</span><span>=</span>Hex<span>;</span>    <span>Numy</span><span>=</span>2X<span>;</span><span>;</span>\n   <span>help</span><span>|</span>?<span>(</span>-<span>)</span><span>[</span>h?<span>]</span><span>)</span>        <span>sed</span> -n <span>'2,/^[ ]*$/p'</span> <span>$0</span><span>;</span><span>exit</span><span>;</span><span>;</span>\n   code<span>|</span><span>[</span>Cc<span>]</span><span>[</span>Oo<span>]</span><span>[</span>Dd<span>]</span><span>[</span>Ee<span>]</span><span>)</span>sed -n <span>'/case/,<span>$p</span>'</span>   <span>$0</span><span>;</span><span>exit</span><span>;</span><span>;</span>\n   *<span>)</span> <span>Obase</span><span>=</span>Decimal\n<span>esac</span> <span># CODE is actually shorter than the chart!</span>\n\n<span>printf</span> <span>\"<span title=\"\\t\">\\t</span><span title=\"\\t\">\\t</span>## <span>$Obase</span> ASCII Chart ##<span title=\"\\n\">\\n</span><span title=\"\\n\">\\n</span>\"</span><span>;</span> <span>FM1</span><span>=</span><span>\"|%0<span>${Numy<span>:-</span>3d}</span>\"</span><span>;</span> <span>LD</span><span>=</span>-1\n\n<span>AB</span><span>=</span><span>\"nul soh stx etx eot enq ack bel bs tab nl vt np cr so si dle\"</span>\n<span>AD</span><span>=</span><span>\"dc1 dc2 dc3 dc4 nak syn etb can em sub esc fs gs rs us sp\"</span>\n\n<span>for</span> <span>TOK</span> <span>in</span> <span>$AB</span> <span>$AD</span><span>;</span> <span>do</span> ABR<span>[</span><span><span>$((</span>LD<span>+</span><span>=</span><span>1</span><span>))</span></span><span>]</span><span>=</span><span>$TOK</span><span>;</span> <span>done</span><span>;</span>\nABR<span>[</span><span>127</span><span>]</span><span>=</span>del\n\n<span>IDX</span><span>=</span><span>0</span>\n<span>while</span> <span>[</span> <span>$IDX</span> -le <span>127</span> <span>]</span> <span>&amp;&amp;</span> <span>CHR</span><span>=</span><span>\"<span>${ABR<span>[</span>$IDX<span>]</span>}</span>\"</span>\n   <span>do</span> <span><span>((</span>${#CHR}<span>))</span></span><span>&amp;&amp;</span> <span>FM2</span><span>=</span><span>'%-3s'</span><span>||</span> <span>FM2</span><span>=</span><span><span>`</span><span>printf</span> <span>'<span title=\"\\\\\">\\\\</span><span title=\"\\\\\">\\\\</span>%o  '</span> $IDX<span>`</span></span>\n      <span>printf</span> <span>\"<span>$FM1</span> <span>$FM2</span>\"</span> <span>\"<span>$IDX</span>\"</span> <span>$CHR</span><span>;</span> <span><span>((</span> <span>(</span>IDX<span>+</span><span>=</span><span>1</span><span>)</span><span>%</span><span>8</span><span>))</span></span><span>||</span><span>echo</span> <span>'|'</span>\n   <span>done</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><p>例 T-3. 第三个 ASCII 表脚本，使用 <em>awk</em></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># ASCII table script, using awk.</span>\n<span># Author: Joseph Steinhauser</span>\n<span># Used in ABS Guide with permission.</span>\n\n\n<span>#-------------------------------------------------------------------------</span>\n<span>#-- File:  ascii     Print ASCII chart, base 10/8/16         (JETS-2010)</span>\n<span>#-------------------------------------------------------------------------</span>\n<span>#-- Usage: ascii [oct|dec|hex|help|8|10|16]</span>\n<span>#--</span>\n<span>#-- This script prints a summary of ASCII char codes from Zero to 127.</span>\n<span>#-- Numeric values may be printed in Base10, Octal, or Hex (Base16).</span>\n<span>#--</span>\n<span>#-- Format Based on: /usr/share/lib/pub/ascii with base-10 as default.</span>\n<span>#-- For more detail, man ascii</span>\n<span>#-------------------------------------------------------------------------</span>\n\n<span>[</span> -n <span>\"<span>$BASH_VERSION</span>\"</span> <span>]</span> <span>&amp;&amp;</span> <span>shopt</span> -s extglob\n\n<span>case</span> <span>\"<span>$1</span>\"</span> <span>in</span>\n   oct<span>|</span><span>[</span>Oo<span>]</span>?<span>(</span><span>[</span>Cc<span>]</span><span>[</span>Tt<span>]</span><span>)</span><span>|</span><span>8</span><span>)</span>       <span>Obase</span><span>=</span>Octal<span>;</span>  <span>Numy</span><span>=</span>3o<span>;</span><span>;</span>\n   hex<span>|</span><span>[</span>Hh<span>]</span>?<span>(</span><span>[</span>Ee<span>]</span><span>[</span>Xx<span>]</span><span>)</span><span>|</span><span>16</span><span>|</span><span>[</span>Xx<span>]</span><span>)</span> <span>Obase</span><span>=</span>Hex<span>;</span>    <span>Numy</span><span>=</span>2X<span>;</span><span>;</span>\n   <span>help</span><span>|</span>?<span>(</span>-<span>)</span><span>[</span>h?<span>]</span><span>)</span>        <span>sed</span> -n <span>'2,/^[ ]*$/p'</span> <span>$0</span><span>;</span><span>exit</span><span>;</span><span>;</span>\n   code<span>|</span><span>[</span>Cc<span>]</span><span>[</span>Oo<span>]</span><span>[</span>Dd<span>]</span><span>[</span>Ee<span>]</span><span>)</span>sed -n <span>'/case/,<span>$p</span>'</span>   <span>$0</span><span>;</span><span>exit</span><span>;</span><span>;</span>\n   *<span>)</span> <span>Obase</span><span>=</span>Decimal\n<span>esac</span>\n<span>export</span> Obase   <span># CODE is actually shorter than the chart!</span>\n\n<span>awk</span> <span>'BEGIN{print \"<span title=\"\\n\">\\n</span><span title=\"\\t\">\\t</span><span title=\"\\t\">\\t</span>## \"ENVIRON[\"Obase\"]\" ASCII Chart ##<span title=\"\\n\">\\n</span>\"\n           ab=\"soh,stx,etx,eot,enq,ack,bel,bs,tab,nl,vt,np,cr,so,si,dle,\"\n           ad=\"dc1,dc2,dc3,dc4,nak,syn,etb,can,em,sub,esc,fs,gs,rs,us,sp\"\n           split(ab ad,abr,\",\");abr[0]=\"nul\";abr[127]=\"del\";\n           fm1=\"|%0'</span>\"<span>${Numy<span>:-</span> 4d}</span><span>\"' %-3s\"</span>\n           for<span>(</span>idx<span>=</span><span>0</span><span>;</span>idx<span>&lt;</span><span>128</span><span>;</span>idx++<span>)</span><span>{</span>fmt<span>=</span>fm1 <span>(</span>++colz%8?<span>\"\"</span><span>:</span><span>\"|<span title=\"\\n\">\\n</span>\"</span><span>)</span>\n           printf<span>(</span>fmt,idx,<span>(</span>idx <span>in</span> abr<span>)</span>?abr<span>[</span>idx<span>]</span>:sprintf<span>(</span><span>\"%c\"</span>,idx<span>))</span><span>}</span> <span>}</span>'\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第一章 为什么使用shell编程",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/01_shell_programming/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/01_shell_programming/",
      "content_html": "<h1 id=\"第一章-为什么使用shell编程\"> 第一章 为什么使用shell编程</h1>\n<blockquote>\n<p>没有任何一种程序设计语言是完美的，甚至没有一个最好的语言。只有在特定环境下适合的语言。</p>\n<p>—— Herbert Mayer</p>\n</blockquote>\n<p>无论你是否打算真正编写shell脚本，只要你想要在一定程度上熟悉系统管理，了解掌握shell脚本的相关知识都是非常有必要的。例如Linux系统在启动的时候会执行<code>/etc/rc.d</code>目录下的shell脚本来恢复系统配置和准备服务。详细了解这些启动脚本对分析系统行为大有益处，何况，你很有可能会去修改它们呢。</p>\n<p>编写shell脚本并不困难，shell脚本由许多小的部分组成，而其中只有数量相当少的与shell本身特性，操作和选项<sup></sup>有关的部分才需要去学习。Shell语法非常简单朴素，很像是在命令行中调用和连接工具，你只需遵循很少一部分的&quot;规则&quot;就可以了。大部分短小的脚本通常在第一次就可以正常工作，即使是一个稍长一些的脚本，调试起来也十分简单。</p>\n<blockquote>\n<p>在个人计算机发展的早期，BASIC语言让计算机专业人士能够在早期的微机上编写程序。几十年后，Bash脚本可以让所有仅对Linux或UNIX系统有初步了解的用户在现代计算机上做同样的事。</p>\n<p>我们现在已经可以做出一些又小又快的单板机，比如<a href=\"http://www.raspberrypi.org/\" target=\"_blank\" rel=\"noopener noreferrer\">树莓派</a>。Bash脚本提供了一种发掘这些有趣设备潜力的方式。</p>\n</blockquote>\n<p>使用shell脚本构建一个复杂应用原型（prototype），不失为是一种虽有缺陷但非常快速的方式。在项目开发初期，使用脚本实现部分功能往往显得十分有用。在使用C/C++，Java，Perl或Python编写最终代码前，可以使用shell脚本测试，修补应用结构，提前发现重大缺陷。</p>\n<p>Shell脚本与经典的UINX哲学相似，将复杂的任务划分为简单的子任务，将组件与工具连接起来。许多人认为比起新一代功能强大、高度集成的语言，例如Perl，shell脚本至少是一种在美学上更加令人愉悦的解决问题的方式，Perl试图做到面面俱到，但你必须强迫自己改变思维方式适应它。</p>\n<p>Herbert Mayer曾说：“有用的语言需要数组、指针以及构建数据结构的通用机制”。如果依据这些标准，那shell脚本距“有用”还差得很远，甚至是“无用”的。</p>\n<h3 id=\"什么时候不应该使用shell脚本\"> 什么时候不应该使用shell脚本</h3>\n<ul>\n<li>资源密集型的任务，尤其是对速度有要求（如排序、散列、递归<sup></sup>等）</li>\n<li>需要做大量的数学运算，例如浮点数运算，高精度运算或者复数运算（使用C++或FORTRAN代替）</li>\n<li>有跨平台需求（使用C或者Java代替）</li>\n<li>必须使用结构化编程的复杂应用（如变量类型检查、函数原型等）</li>\n<li>影响系统全局的关键性任务</li>\n<li>对安全性有高要求，需要保证系统的完整性以及阻止入侵、破解、恶意破坏</li>\n<li>项目包含有连锁依赖关系的组件</li>\n<li>需要大量的文件操作（Bash只能访问连续的文件，并且是以一种非常笨拙且低效的逐行访问的方式进行的）</li>\n<li>需要使用多维数组</li>\n<li>需要使用如链表、树等数据结构</li>\n<li>需要产生或操作图像和图形用户接口（GUI）</li>\n<li>需要直接访问系统硬件或外部设备</li>\n<li>需要使用端口或套接字输入输出端口（Socket I/O）</li>\n<li>需要使用库或旧程序的接口</li>\n<li>私有或闭源的项目（Shell脚本直接将源代码公开，所有人都可以看到）</li>\n</ul>\n<p>如果你的应用满足上述任意一条，你可以考虑使用更加强大的脚本语言，如Perl，Tcl，Python，Ruby等，或考虑使用编译型语言，如C，C++或Java等。即使如此，在开发阶段使用shell脚本建立应用原型也是十分有用的。</p>\n<p>我们接下来将使用Bash。Bash是&quot;Bourne-Again shell&quot;的首字母缩略词<sup></sup>，Bash来源于Stephen Bourne开发的Bourne shell（sh）。如今Bash已成为了大部分UNIX衍生版中shell脚本事实上的标准。本书所涉及的大部分概念在其他shell中也是适用的，例如Korn Shell，Bash从它当中继承了一部分的特性<sup></sup>；又如C Shell及其变体（需要注意的是，1993年10月Tom Christiansen在<a href=\"http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/\" target=\"_blank\" rel=\"noopener noreferrer\">Usenet帖子</a>中指出，因C Shell内部固有的问题，不推荐使用C Shell编程）</p>\n<p>接下来的部分将是一些编写shell脚本的指导。这些指导很大程度上依赖于实例来阐述shell的特性。本书所有的例子都能够正常工作，并在尽可能的范围内进行过测试，其中的一部分已经运用在实际生产生活中。读者们可以使用这些在存档中的例子（文件名为<code>scriptname.sh</code>或<code>scriptname.bash</code>）<sup></sup>，赋予它们可执行权限（<code>chmod u+rx scriptname</code>），然后执行它们看看会发生什么。如果<a href=\"http://bash.deta.in/abs-guide-latest.tar.bz2\" target=\"_blank\" rel=\"noopener noreferrer\">存档</a>不可用，读者朋友也可以从本书的HTML或者PDF版本中复制粘贴代码出来。需要注意的是，在部分例子中使用了一些暂时还未被解释的特性，这需要读者暂时跳过它们。</p>\n<p>除特别说明，本书所有例子均由<a href=\"mailto:thegrendel.abs@gmail.com\">本书作者</a>编写。</p>\n<blockquote>\n<p>His countenance was bold and bashed not.</p>\n<p>—— Edmund Spenser</p>\n</blockquote>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>这些操作和选项被称为内建命令（builtin），是shell的内部特征。 </p>\n</li>\n<li id=\"fn2\"><p>虽然递归可以在shell脚本中实现，但是它的效率很低且实现起来很复杂、不具有美感。 </p>\n</li>\n<li id=\"fn3\"><p>首字母缩略词是由每一个单词的首字母拼接而成的易读的代替短语。这不是一个好习惯，通常会引起一些不必要的麻烦。 </p>\n</li>\n<li id=\"fn4\"><p>ksh88中的许多特性，甚至一些ksh93的特性都被合并到Bash中了。 </p>\n</li>\n<li id=\"fn5\"><p>按照惯例，用户编写的Bourne shell脚本应该在文件名后加上<code>.sh</code>的扩展名。而那些系统脚本，比如在<code>/etc/rc.d</code>中的脚本通常不遵循这种规范。 </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "2.1 调用一个脚本",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/02_1_invoking_the_script/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/02_1_invoking_the_script/",
      "content_html": "<h1 id=\"_2-1-调用一个脚本\"> 2.1 调用一个脚本</h1>\n<p>写完一个脚本以后，你可以通过<code>sh scriptname</code>或<code>bash scriptname</code>来调用它（不推荐使用<code>sh &lt;scriptname</code>调用脚本，因为这会禁用脚本从标准输入（stdin）读入数据）。更方便的方式是使用<code>chmod</code>命令使脚本可以被直接执行。</p>\n<p>执行命令：</p>\n<p><code>chmod 555 scriptname</code>（给予所有用户读取/执行的权限）</p>\n<p>或</p>\n<p><code>chmod +rx scriptname</code>（给予所有用户读取/执行的权限）</p>\n<p><code>chmod u+rx scriptname</code>（仅给予脚本所有者读取/执行的权限）</p>\n<p>当脚本的权限被设置好后，你就可以直接使用<code>./scriptname</code>[^3]进行调用测试了。如果脚本文件以sha-bang开头，那么它将自动调用指定的命令解释器运行脚本。</p>\n<p>完成调试与测试后，你可能会将脚本文件移至<code>/usr/local/bin</code>（使用root权限）中，使脚本可以被所有用户调用。这时你可以直接在命令行中输入<code>scriptname [ENTER]</code>执行脚本。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "2.2 牛刀小试",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/02_2_preliminary_exercises/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/02_2_preliminary_exercises/",
      "content_html": "<h1 id=\"_2-2-牛刀小试\"> 2.2 牛刀小试</h1>\n<ol>\n<li>系统管理员通常会写一些脚本来完成自动化工作。试举例说明使用脚本的便利之处。</li>\n<li>请尝试写一个脚本。调用脚本，会打印当前系统时间和日期，所有已登录的用户和系统运行时间。并将这些信息保存到一个日志文件中。</li>\n</ol>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第二章 和Sha-Bang（#!）一起出发",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/02_starting_off_with_a_sha_bang/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/02_starting_off_with_a_sha_bang/",
      "content_html": "<h1 id=\"第二章-和sha-bang-一起出发\"> 第二章 和Sha-Bang（#!）一起出发</h1>\n<blockquote>\n<p>Shell编程声名显赫</p>\n<p>—— Larry Wall</p>\n</blockquote>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./02_1_invoking_the_script.html\">2.1 调用一个脚本</a></li>\n<li><a href=\"./02_2_preliminary_exercises.html\">2.2 牛刀小试</a></li>\n</ul>\n<hr>\n<p>一个最简单的脚本其实就是将一连串系统命令存储在一个文件中。最起码，它能帮你省下重复输入这一连串命令的功夫。</p>\n<p>样例 2-1. <em>cleanup</em>：清理<code>/var/log</code>目录下的日志文件</p>\n<div><pre><code><span># Cleanup</span>\n<span># 请使用root权限执行</span>\n\n<span>cd</span> /var/log\n<span>cat</span> /dev/null <span>></span> messages\n<span>cat</span> /dev/null <span>></span> wtmp\n<span>echo</span> <span>\"Log files cleaned up.\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这支脚本仅仅是一些可以很容易从终端或控制台输入的命令的集合罢了，没什么特殊的地方。将命令放在脚本中的好处是，你不用再一遍遍重复输入这些命令啦。脚本成了一支<em>程序</em>、一款<em>工具</em>，它可以很容易的被修改或为特殊需求定制。</p>\n<p>样例 2-2. <em>cleanup</em>：改进的清理脚本</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># Bash脚本标准起始行。</span>\n\n<span># Cleanup, version 2</span>\n\n<span># 请使用root权限执行。</span>\n<span># 这里可以插入代码来打印错误信息，并在未使用root权限时退出。</span>\n\n<span>LOG_DIR</span><span>=</span>/var/log\n<span># 使用变量比硬编码（hard-coded）更合适</span>\n<span>cd</span> <span>$LOG_DIR</span>\n\n<span>cat</span> /dev/null <span>></span> messages\n<span>cat</span> /dev/null <span>></span> wtmp\n\n\n<span>echo</span> <span>\"Logs cleaned up.\"</span>\n\n<span>exit</span> <span># 正确终止脚本的方式。</span>\n     <span># 不带参数的exit返回上一条指令的运行结果。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>现在我们看到了一个真正意义上的脚本! 让我们继续前进...</p>\n<p>样例 2-3. <em>cleanup</em>：改良、通用版</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># Cleanup, version 3</span>\n\n<span># 注意：</span>\n<span># --------</span>\n<span># 此脚本涉及到许多后边才会解释的特性。</span>\n<span># 当你阅读完整本书的一半以后，理解它们就没有任何困难了。</span>\n\n\n<span>LOG_DIR</span><span>=</span>/var/log\n<span>ROOT_UID</span><span>=</span><span>0</span>     <span># UID为0的用户才拥有root权限。</span>\n<span><span>LINES</span></span><span>=</span><span>50</span>       <span># 默认保存messages日志文件行数。</span>\n<span>E_XCD</span><span>=</span><span>86</span>       <span># 无法切换工作目录的错误码。</span>\n<span>E_NOTROOT</span><span>=</span><span>87</span>   <span># 非root权限用户执行的错误码。</span>\n\n\n\n<span># 请使用root权限运行。</span>\n<span>if</span> <span>[</span> <span>\"<span>$UID</span>\"</span> -ne <span>\"<span>$ROOT_UID</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Must be root to run this script.\"</span>\n  <span>exit</span> <span>$E_NOTROOT</span>\n<span>fi</span>\n\n<span>if</span> <span>[</span> -n <span>\"<span>$1</span>\"</span> <span>]</span>\n<span># 测试命令行参数（保存行数）是否为空</span>\n<span>then</span>\n  <span>lines</span><span>=</span><span>$1</span>\n<span>else</span>\n  <span>lines</span><span>=</span><span>$LINES</span> <span># 如果为空则使用默认设置</span>\n<span>fi</span>\n\n\n<span>#  Stephane Chazelas 建议使用如下方法检查命令行参数，</span>\n<span>#  但是这已经超出了此阶段教程的范围。</span>\n<span>#</span>\n<span>#    E_WRONGARGS=85  # Non-numerical argument (bad argument format).</span>\n<span>#    case \"$1\" in</span>\n<span>#    \"\"      ) lines=50;;</span>\n<span>#    *[!0-9]*) echo \"Usage: `basename $0` lines-to-cleanup\";</span>\n<span>#     exit $E_WRONGARGS;;</span>\n<span>#    *       ) lines=$1;;</span>\n<span>#    esac</span>\n<span>#</span>\n<span>#* 在第十一章“循环与分支”中会对此作详细的阐述。</span>\n\n\n<span>cd</span> <span>$LOG_DIR</span>\n\n<span>if</span> <span>[</span> <span><span>`</span><span>pwd</span><span>`</span></span> <span>!=</span> <span>\"<span>$LOG_DIR</span>\"</span> <span>]</span>  <span># 也可以这样写 if [ \"$PWD\" != \"$LOG_DIR\" ]</span>\n                            <span># 检查工作目录是否为 /var/log ?</span>\n<span>then</span>\n  <span>echo</span> <span>\"Can't change to <span>$LOG_DIR</span>\"</span>\n  <span>exit</span> <span>$E_XCD</span>\n<span>fi</span>  <span># 在清理日志前，二次确认是否在正确的工作目录下。</span>\n\n<span># 更高效的写法：</span>\n<span>#</span>\n<span># cd /var/log || {</span>\n<span>#   echo \"Cannot change to necessary directory.\" >&amp;2</span>\n<span>#   exit $E_XCD;</span>\n<span># }</span>\n\n\n<span>tail</span> -n <span>$lines</span> messages <span>></span> mesg.temp <span># 保存messages日志文件最后一部分</span>\n<span>mv</span> mesg.temp messages              <span># 替换系统日志文件以达到清理目的</span>\n\n<span>#  cat /dev/null > messages</span>\n<span>#* 我们不需要使用这个方法了，上面的方法更安全</span>\n\n<span>cat</span> /dev/null <span>></span> wtmp  <span>#  ': > wtmp' 与 '> wtmp' 有同样的效果</span>\n<span>echo</span> <span>\"Log files cleaned up.\"</span>\n<span>#  注意在/var/log目录下的其他日志文件不会被这个脚本清除</span>\n\n<span>exit</span> <span>0</span>\n<span>#  返回0表示脚本运行成功</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br></div></div><p>也许你并不希望清空全部的系统日志，这个脚本保留了messages日志的最后一部分。随着学习的深入，你将明白更多提高脚本运行效率的方法。</p>\n<hr>\n<p>脚本起始行<em>sha-bang</em>（#!）<sup></sup>告诉系统这个脚本文件需要使用指定的命令解释器来执行。#!实际上是一个占两字节<sup></sup>的<em>幻数</em>（magic number）,幻数可以用来标识特殊的文件类型，在这里则是标记可执行shell脚本（你可以在终端中输入<code>man magic</code>了解更多信息）。紧随#!的是一个路径名。此路径指向用来解释此脚本的程序，它可以是shell，可以是程序设计语言，也可以是实用程序。这个解释器从头（#!的下一行）开始执行整个脚本的命令，同时忽略注释。<sup></sup></p>\n<div><pre><code>#!/bin/sh\n#!/bin/bash\n#!/usr/bin/perl\n#!/usr/bin/tcl\n#!/bin/sed -f\n#!/bin/awk -f\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>上面每一条脚本起始行都调用了不同的解释器，比如<code>/bin/sh</code>调用了系统默认shell（Linux系统中默认是bash）<sup></sup>。大部分UNIX商业发行版中默认的是Bourne shell，即<code>#!/bin/sh</code>。你可以以牺牲Bash特性为代价，在非Linux的机器上运行sh脚本。当然，脚本得遵循POSIX<sup></sup> sh标准。</p>\n<p>需要注意的是<code>#!</code>后的路径必须正确，否则当你运行脚本时只会得到一条错误信息，通常是&quot;Command not found.&quot;<sup></sup></p>\n<p>当脚本仅包含一些通用的系统命令而不使用shell内部指令时，可以省略<code>#!</code>。第三个例子需要<code>#!</code>是因为当对变量赋值时，例如<code>lines=50</code>，使用了与shell特性相关的结构<sup></sup>。再重复一次，<code>#!/bin/sh</code>调用的是系统默认shell解释器，在Linux系统中默认为<code>/bin/bash</code>。</p>\n<p>这个例子鼓励读者使用模块化的方式编写脚本，并在平时记录和收集一些在以后可能会用到的代码模板。最终你将拥有一个相当丰富易用的代码库。以下的代码可以用来测试脚本被调用时的参数数量是否正确。</p>\n<div><pre><code><span>E_WRONG_ARGS</span><span>=</span><span>85</span>\n<span>script_parameters</span><span>=</span><span>\"-a -h -m -z\"</span>\n                 <span># -a = all, -h = help 等等</span>\n\n<span>if</span> <span>[</span> <span>$#</span> -ne <span>$Number_of_expected_args</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> <span>$script_parameters</span>\"</span>\n  <span># `basename $0` 是脚本的文件名</span>\n  <span>exit</span> <span>$E_WRONG_ARGS</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>大多数情况下，你会针对特定的任务编写脚本。本章的第一个脚本就是这样。然后你也许会泛化（generalize）脚本使其能够适应更多相似的任务，比如用变量代替硬编码，用函数代替重复代码。</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>在文献中更常见的形式是she-bang或者sh-bang。它们都来源于词汇sharp(#)和bang(!)的连接。 </p>\n</li>\n<li id=\"fn2\"><p>一些UNIX的衍生版（基于4.2 BSD）声称他们使用四字节的幻数，在#!后增加一个空格，即<code>#! /bin/sh</code>。而<a href=\"http://www.in-ulm.de/~mascheck/various/shebang/#details\" target=\"_blank\" rel=\"noopener noreferrer\">Sven Mascheck</a>指出这是虚构的。 </p>\n</li>\n<li id=\"fn3\"><p>命令解释器首先将会解释#!这一行，而因为#!以#打头，因此解释器将其视作注释。起始行作为调用解释器的作用已经完成了。</p><p>事实上即使脚本中含有不止一个#!,bash也会将除第一个`#!`以外的解释为注释。</p><pre>#!/bin/bash<br/><br/>echo \"Part 1 of script.\"<br/>a=1<br/><br/>#!/bin/bash<br/># 这并不会启动新的脚本<br/><br/>echo \"Part 2 of script.\"<br/>echo $a  # $a的值仍旧为1</pre>\n </li>\n<li id=\"fn4\"><p>这里允许使用一些技巧。</p><pre>#!/bin/rm<br/># 自我删除的脚本<br/><br/># 当你运行这个脚本，除了这个脚本本身消失以外并不会发生什么。<br/><br/>WHATEVER=85<br/><br/>echo \"This line will never print (betcha!).\"<br/><br/>exit $WHATEVER  # 这没有任何关系。脚本将不会从这里退出。<br/>                # 尝试在脚本终止后打印echo $a。<br/>                # 得到的值将会是0而不是85.</pre>当然你也可以建立一个起始行是`#!/bin/more`的README文件，并且使它可以执行。结果就是这个文件成为了一个可以打印本身的文件。（查看样例 19-3，使用`cat`命令的here document也许是一个更好的选择）\n </li>\n<li id=\"fn5\"><p>可移植操作系统接口（POSIX）尝试标准化类UNIX操作系统。POSIX规范可以在<a href=\"http://www.opengroup.org/onlinepubs/007904975/toc.htm\" target=\"_blank\" rel=\"noopener noreferrer\">Open Group site</a>中查看。 </p>\n</li>\n<li id=\"fn6\"><p>为了避免这种情况的发生，可以使用<code>#!/bin/env bash</code>作为起始行。这在bash不在<code>/bin</code>的UNIX系统中会有效果。 </p>\n</li>\n<li id=\"fn7\"><p>如果bash是系统默认shell，那么脚本并不一定需要#!作为起始行。但是当你在其他的shell中运行脚本，例如tcsh，则需要使用#!。 </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第一部分 初见Shell",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part1/",
      "content_html": "<h1 id=\"第一部分-初见shell\"> 第一部分 初见Shell</h1>\n<blockquote>\n<p><em>脚本：文章；书面文档</em></p>\n<p><em>——韦伯斯特字典1913年版</em></p>\n</blockquote>\n<p>Shell是一种命令解释器，它不仅分离了用户层与操作系统内核，更是一门强大的编程语言。我们称为shell编写的程序为脚本（script）。脚本是一种易于使用的工具，它能够将系统调用、工具软件、实用程序（utility）和已编译的二进制文件联系在一起构建程序。实际上，shell脚本可以调用所有的UNIX命令、实用程序以及工具软件。如果你觉得这还不够，使用像<code>test</code>命令和循环结构这样的shell内建命令能够让脚本更加灵活强大。Shell脚本特别适合完成系统管理任务和那些不需要复杂结构性语言实现的重复工作。</p>\n<h3 id=\"内容目录\"> 内容目录</h3>\n<ul>\n<li><a href=\"./01_shell_programming.html\">1. 为什么使用shell编程</a></li>\n<li><a href=\"./02_starting_off_with_a_sha_bang.html\">2. 和Sha-Bang（#!）一起出发</a>\n<ul>\n<li><a href=\"./02_1_invoking_the_script.html\">2.1 调用一个脚本</a></li>\n<li><a href=\"./02_2_preliminary_exercises.html\">2.2 牛刀小试</a></li>\n</ul>\n</li>\n</ul>\n<p>原著链接：http://tldp.org/LDP/abs/html/</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第三章 特殊字符",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/03_special_characters/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/03_special_characters/",
      "content_html": "<h1 id=\"第三章-特殊字符\"> 第三章 特殊字符</h1>\n<p>是什么让一个字符变得<em>特殊</em>呢？如果一个字符不仅具有<em>字面</em>意义，而且具有<em>元意（meta-meaning）</em>，我们就称它为特殊字符。特殊字符同命令和关键词（keywords）一样，是bash脚本的组成部分。</p>\n<p>你在脚本或其他地方都能够找到特殊字符。</p>\n<h3 id=\"\"> #</h3>\n<p>注释符。如果一行脚本的开头是#（除了#!），那么代表这一行是注释，不会被执行。</p>\n<div><pre><code><span># 这是一行注释</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>注释也可能会在一行命令结束之后出现。</p>\n<div><pre><code><span>echo</span> <span>\"A comment will follow.\"</span> <span># 这儿可以写注释</span>\n<span>#                            ^ 注意在#之前有空格</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>注释也可以出现在一行开头的空白符（whitespace）之后。</p>\n<div><pre><code>\t<span># 这个注释前面存在着一个制表符（tab）</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>注释甚至可以嵌入到管道命令（pipe）之中。</p>\n<div><pre><code><span>initial</span><span>=</span><span>(</span> <span><span>`</span><span>cat</span> <span>\"<span>$startfile</span>\"</span> <span>|</span> <span>sed</span> -e <span>'/#/d'</span> <span>|</span> <span>tr</span> -d <span>'<span title=\"\\n\">\\n</span>'</span> <span>|</span><span>\\</span>\n<span># 删除所有带'#'注释符号的行</span>\n           <span>sed</span> -e <span>'s/\\./\\. /g'</span> -e <span>'s/_/_ /g'</span><span>`</span></span> <span>)</span>\n<span># 摘录自脚本 life.sh</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 命令不能写在同一行注释之后。因为没有任何方法可以结束注释(仅支持单行注释)，为了让新命令正常执行，另起一行写吧。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 当然，在<code>echo</code>语句中被引用或被转义的#不会被认为是注释。同样，在某些参数替换式或常量表达式中的#也不会被认为是注释。</p>\n</blockquote>\n<div><pre><code><span>echo</span> <span>\"The # here does not begin a comment.\"</span>\n<span>echo</span> <span>'The # here does not begin a comment.'</span>\n<span>echo</span> The <span>\\</span># here does not begin a comment.\n<span>echo</span> The <span># here begins a comment.</span>\n\n<span>echo</span> <span>${<span>PATH</span><span>#</span>*<span>:</span>}</span>       <span># 参数替换而非注释</span>\n<span>echo</span> <span><span>$((</span> <span>2</span>#<span>101011</span> <span>))</span></span>  <span># 进制转换而非注释</span>\n\n<span># 感谢S.C.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>因为引用符和转义符（&quot; ' \\）转义了#。</p>\n<p>一些模式匹配操作同样使用了#。</p>\n<h3 id=\"-2\"> ;</h3>\n<p>命令分隔符[分号]。允许在同一行内放置两条或更多的命令。</p>\n<div><pre><code><span>echo</span> hello<span>;</span> <span>echo</span> there\n\n<span>if</span> <span>[</span> -x <span>\"<span>$filename</span>\"</span> <span>]</span><span>;</span> <span>then</span>    <span>#  注意在分号以后有一个空格</span>\n<span>#+                   ^^</span>\n  <span>echo</span> <span>\"File <span>$filename</span> exists.\"</span><span>;</span> <span>cp</span> <span>$filename</span> <span>$filename</span>.bak\n<span>else</span>   <span>#                       ^^</span>\n  <span>echo</span> <span>\"File <span>$filename</span> not found.\"</span><span>;</span> <span>touch</span> <span>$filename</span>\n<span>fi</span><span>;</span> <span>echo</span> <span>\"File test complete.\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>注意有时候&quot;;&quot;需要被转义才能正常工作。</p>\n<h3 id=\"-3\"> ;;</h3>\n<p><code>case</code>条件语句终止符[双分号]。</p>\n<div><pre><code><span>case</span> <span>\"<span>$variable</span>\"</span> <span>in</span>\n  abc<span>)</span>  <span>echo</span> <span>\"\\<span>$variable</span> = abc\"</span> <span>;</span><span>;</span>\n  xyz<span>)</span>  <span>echo</span> <span>\"\\<span>$variable</span> = xyz\"</span> <span>;</span><span>;</span>\n<span>esac</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"-4\"> ;;&amp;, ;&amp;</h3>\n<p><code>case</code>条件语句终止符（Bash4+ 版本）。</p>\n<h3 id=\"-5\"> .</h3>\n<p>句点命令[句点]。等价于<code>source</code>命令（查看样例 15-22）。这是一个bash的内建命令。</p>\n<h3 id=\"-6\"> .</h3>\n<p>句点可以作为文件名的一部分。如果它在文件名开头，那说明此文件是隐藏文件。使用不带参数的<code>ls</code>命令不会显示隐藏文件。</p>\n<div><pre><code>bash$ touch .hidden-file\nbash$ ls -l\ntotal 10\n -rw-r--r--    1 bozo      4034 Jul 18 22:04 data1.addressbook\n -rw-r--r--    1 bozo      4602 May 25 13:58 data1.addressbook.bak\n -rw-r--r--    1 bozo       877 Dec 17  2000 employment.addressbook\n\t\n\t\nbash$ ls -al\ntotal 14\n drwxrwxr-x    2 bozo  bozo      1024 Aug 29 20:54 ./\n drwx------   52 bozo  bozo      3072 Aug 29 20:51 ../\n -rw-r--r--    1 bozo  bozo      4034 Jul 18 22:04 data1.addressbook\n -rw-r--r--    1 bozo  bozo      4602 May 25 13:58 data1.addressbook.bak\n -rw-r--r--    1 bozo  bozo       877 Dec 17  2000 employment.addressbook\n -rw-rw-r--    1 bozo  bozo         0 Aug 29 20:54 .hidden-file\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>当句点出现在目录中时，单个句点代表当前工作目录，两个句点代表上级目录。</p>\n<div><pre><code>bash$ pwd\n/home/bozo/projects\n\nbash$ cd .\nbash$ pwd\n/home/bozo/projects\n\nbash$ cd ..\nbash$ pwd\n/home/bozo/\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>句点通常代表文件移动的目的地（目录），下式代表的是当前目录。</p>\n<div><pre><code>bash$ cp /home/bozo/current_work/junk/* .\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>复制所有的“垃圾文件”到<code>当前目录</code></p>\n</blockquote>\n<h3 id=\"-7\"> .</h3>\n<p>句点匹配符。在<em>正则表达式</em>中，点号意味着匹配任意单个字符。</p>\n<h3 id=\"-8\"> &quot;</h3>\n<p>部分引用[双引号]。在字符串中保留大部分特殊字符。详细内容将在<a href=\"./05_quoting.html\">第五章</a>介绍。</p>\n<h3 id=\"-9\"> '</h3>\n<p>全引用[单引号]。在字符串中保留所有的特殊字符。是部分引用的强化版。详细内容将在<a href=\"./05_quoting.html\">第五章</a>介绍。</p>\n<h3 id=\"-10\"> ,</h3>\n<p>逗号运算符。逗号运算符<sup></sup>将一系列的算术表达式串联在一起。算术表达式依次被执行，但只返回最后一个表达式的值。</p>\n<div><pre><code><span>let</span> <span>\"t2 = <span><span>((</span>a <span>=</span> <span>9</span><span>,</span> <span>15</span> <span>/</span> <span>3</span><span>))</span></span>\"</span>\n<span># a被赋值为9，t2被赋值为15 / 3</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>逗号运算符也可以用来连接字符串。</p>\n<div><pre><code><span>for</span> <span>file</span> <span>in</span> /<span>{</span>,usr/<span>}</span>bin/*calc\n<span>#             ^    在 /bin 与 /usr/bin 目录中</span>\n<span>#+                 找到所有的以\"calc\"结尾的可执行文件</span>\n<span>do</span>\n        <span>if</span> <span>[</span> -x <span>\"<span>$file</span>\"</span> <span>]</span>\n        <span>then</span>\n          <span>echo</span> <span>$file</span>\n        <span>fi</span>\n<span>done</span>\n\n<span># /bin/ipcalc</span>\n<span># /usr/bin/kcalc</span>\n<span># /usr/bin/oidcalc</span>\n<span># /usr/bin/oocalc</span>\n\n<span># 感谢Rory Winston提供的执行结果</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id=\"-11\"> ,, ,</h3>\n<p>在参数替换中进行小写字母转换（Bash4 新增）。</p>\n<h3 id=\"-12\"> \\</h3>\n<p>转义符[反斜杠]。转义某字符的标志。</p>\n<p><code>\\x</code>转义了字符x。双引号&quot;&quot;内的X与单引号内的X具有同样的效果。\n转义符也可以用来转义&quot;与'，使它们表达其字面含义。</p>\n<p>第五章将更加深入的解释转义字符。</p>\n<h3 id=\"-13\"> /</h3>\n<p>文件路径分隔符[正斜杠]。起分割路径的作用。（比如 <code>/home/bozo/projects/Makefile</code>）</p>\n<p>它也在算术运算中充当除法运算符。</p>\n<h3 id=\"-14\"> `</h3>\n<p>命令替换符。<code>`command`</code>结构可以使得命令的输出结果赋值给一个变量。通常也被称作后引号（backquotes）或反引号（backticks）。</p>\n<h3 id=\"-15\"> :</h3>\n<p>空命令[冒号]。它在shell中等价于&quot;NOP&quot;（即no op，空操作）与shell内建命令true有同样的效果。它本身也是Bash的内建命令之一，返回值是true（0）。</p>\n<div><pre><code><span>:</span>\n<span>echo</span> <span>$?</span>   <span># 返回0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>在无限循环中的应用：</p>\n<div><pre><code><span>while</span> <span>:</span>\n<span>do</span>\n   operation-1\n   operation-2\n   <span>..</span>.\n   operation-n\n<span>done</span>\n\n<span># 等价于</span>\n<span>#    while true</span>\n<span>#    do</span>\n<span>#      ...</span>\n<span>#    done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>可在 <code>if/then</code> 中充当占位符：</p>\n<div><pre><code><span>if</span> condition\n<span>then</span> <span>:</span>   <span># 什么都不做，跳出判断执行下一条语句</span>\n<span>else</span>\n   take-some-action\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>在二元操作中作占位符: 查看<em>样例 8-2</em>或<em>默认参数</em>部分。</p>\n<div><pre><code><span>:</span> <span>${username=`whoami`}</span>\n<span># ${username=`whoami`}   如果没有:就会报错</span>\n<span>#                        除非 \"username\" 是系统命令或内建命令</span>\n\n<span>:</span> <span>${1?\"Usage<span>:</span> $0 ARGUMENT\"}</span>     <span># 摘自样例脚本 \"usage-message.sh\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>查看<em>样例 19-10</em>了解空命令在here document中作为占位符的情况。</p>\n<p>使用参数替换为字符串变量赋值（查看<em>样例 10-7</em>）。</p>\n<div><pre><code><span>:</span> <span>${<span>HOSTNAME</span>?}</span> <span>${<span>USER</span>?}</span> <span>${MAIL?}</span>\n<span>#  如果其中一个或多个必要的环境变量没有被设置</span>\n<span>#  将会打印错误</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>查看<em>变量扩展</em>或<em>字符串替换</em>章节了解空命令在其中的作用。</p>\n<p>与<code>&gt;</code>重定向操作符结合，可以在不改变文件权限的情况下清空文件。如果文件不存在，那么将创建这个文件。</p>\n<div><pre><code><span>:</span> <span>></span> data.xxx   <span># 文件 \"data.xxx\" 已被清空</span>\n\n<span># 与 cat /dev/null >data.xxx 作用相同</span>\n<span># 但是此操作不会产生一个新进程，因为 \":\" 是shell内建命令。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>也可查看<em>样例 16-15</em>。</p>\n<p>与<code>&gt;&gt;</code>重定向操作符结合，将不会清空任何已存在的文件（<code>: &gt;&gt; target_file</code>）。如果文件不存在，将创建这个文件。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 以上操作仅适用于普通文件，不适用于管道、符号链接和特殊文件。</p>\n</blockquote>\n<p>空命令可以用来作为一行注释的开头，尽管我们并不推荐这么做。使用 # 可以使解释器关闭该行的错误检测，所以几乎所有的内容都可以出现在注释#中。使用空命令却不是这样的：</p>\n<div><pre><code><span>:</span> 这一行注释将会产生一个错误，<span>(</span> <span>if</span> <span>[</span> <span>$x</span> -eq <span>3</span><span>]</span> <span>)</span>。\n</code></pre>\n<div><span>1</span><br></div></div><p>:也可以作为一个域分隔符，比如在<code>/etc/passwd</code>和 <code>$PATH</code> 变量中。</p>\n<div><pre><code>bash$ echo $PATH\n/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>将冒号作为函数名也是可以的。</p>\n<div><pre><code>:<span>(</span><span>)</span>\n<span>{</span>\n  <span>echo</span> <span>\"The name of this function is \"</span><span>$FUNCNAME</span><span>\" \"</span>\n  <span># 为什么要使用冒号作函数名？</span>\n  <span># 这是一种混淆代码的方法......</span>\n<span>}</span>\n\n<span>:</span>\n\n<span># 函数名是 :</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>这种写法并不具有可移植性，也不推荐使用。事实上，在Bash的最近的版本更新中已经禁用了这种用法。但我们还可以使用*下划线 _*来替代。</p>\n<p>冒号也可以作为非空函数的占位符。</p>\n<div><pre><code><span>not_empty</span> <span>(</span><span>)</span>\n<span>{</span>\n  <span>:</span>\n<span>}</span> <span># 含有空指令，这并不是一个空函数。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"-16\"> !</h3>\n<p>取反（或否定）操作符[感叹号]。! 操作符反转已执行的命令的返回状态（查看<em>样例 6-2</em>）。它同时可以反转测试操作符的意义，例如可以将相等（=）反转成不等（!=）。它是一个Bash关键词。</p>\n<p>在一些特殊场景下，它也会出现在间接变量引用中。</p>\n<p>在另外一些特殊场景下，即在命令行下可以使用 ! 调用Bash的历史记录（<em>附录 L</em>）。需要注意的是，在脚本中，这个机制是被禁用的。</p>\n<h3 id=\"-17\"> *</h3>\n<p>通配符[星号]。在文件匹配（globbing）操作时扩展文件名。如果它独立出现，则匹配该目录下的所有文件。</p>\n<div><pre><code>bash$ echo *\nabs-book.sgml add-drive.sh agram.sh alias.sh\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>在<em>正则表达式</em>中表示匹配任意多个（包括0）前个字符。</p>\n<h3 id=\"-18\"> *</h3>\n<p>算术运算符。在进行算术运算时，表示乘法运算。</p>\n<p>** 双星号可以表示乘方运算或扩展文件匹配。</p>\n<h3 id=\"-19\"> ?</h3>\n<p>测试操作符[问号]。在一些特定的语句中，? 表示一个条件测试。</p>\n<p>在一个双圆括号结构中，? 可以表示一个类似C语言风格的三元（trinary）运算符的一个组成部分。<sup></sup></p>\n<p><code>condition?result-if-true:result-if-false</code></p>\n<div><pre><code><span><span>((</span> var0 <span>=</span> var1<span>&lt;</span><span>98</span><span>?</span><span>9</span><span>:</span><span>21</span> <span>))</span></span>\n<span>#不要加空格，紧挨着写</span>\n\n<span>#等价于</span>\n<span># if [ \"$var1\" -lt 98 ]</span>\n<span># then</span>\n<span>#   var0=9</span>\n<span># else</span>\n<span>#   var0=21</span>\n<span># fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在参数替换表达式中，? 用来测试一个变量是否已经被赋值。</p>\n<h3 id=\"-20\"> ?</h3>\n<p>通配符。它在进行文件匹配（globbing）时以单字符通配符扩展文件名。\n在<em>扩展正则表达式</em>中匹配一个单字符。</p>\n<h3 id=\"-21\"> $</h3>\n<p>取值符号[钱字符]，用来进行变量替换（即取出变量的内容）。</p>\n<div><pre><code><span>var1</span><span>=</span><span>5</span>\n<span>var2</span><span>=</span>23skidoo\n\n<span>echo</span> <span>$var1</span>     <span># 5</span>\n<span>echo</span> <span>$var2</span>     <span># 23skidoo</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果在变量名前有 $，则表示此变量的值。</p>\n<h3 id=\"-22\"> $</h3>\n<p>行结束符[EOF]。\n在<em>正则表达式</em>中，$ 匹配行尾字符串。</p>\n<h3 id=\"-23\"> ${}</h3>\n<p>参数替换。</p>\n<h3 id=\"-24\"> $'...'</h3>\n<p>引用字符串扩展。这个结构将转义八进制或十六进制的值转换成ASCII<sup></sup>或Unicode字符。</p>\n<h3 id=\"-25\"> $*, $@</h3>\n<p>位置参数。</p>\n<h3 id=\"-26\"> $?</h3>\n<p>返回状态变量。此变量保存一个命令、一个函数或该脚本自身的返回状态。</p>\n<h3 id=\"-27\"> $$</h3>\n<p>进程ID变量。此变量保存该运行脚本的进程ID<sup></sup>。</p>\n<h3 id=\"-28\"> ()</h3>\n<p>命令组。</p>\n<p><code>(a=hello; echo $a)</code></p>\n<p><img src=\"http://tldp.org/LDP/abs/images/important.gif\" alt=\"notice\"> 通过括号执行一系列命令会产生一个子shell（subshell）。\n括号中的变量，即在子shell中的变量，在脚本的其他部分是不可见的。父进程脚本不能访问子进程（子shell）所创建的变量。</p>\n<div><pre><code><span>a</span><span>=</span><span>123</span>\n<span>(</span> <span>a</span><span>=</span><span>321</span><span>;</span> <span>)</span>\n\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>   <span># a = 123</span>\n<span># 在括号中的 \"a\" 就像个局部变量。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>数组初始化。</p>\n<div><pre><code><span>Array</span><span>=</span><span>(</span>element1 element2 element3<span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"xxx-yyy-zzz\"> {xxx,yyy,zzz,...}</h3>\n<p>花括号扩展结构。</p>\n<div><pre><code><span>echo</span> <span>\\</span>\"<span>{</span>These,words,are,quoted<span>}</span><span>\\</span>\"   <span># \" 将作为单词的前缀和后缀</span>\n<span># \"These\" \"words\" \"are\" \"quoted\"</span>\n\n\n<span>cat</span> <span>{</span>file1,file2,file3<span>}</span> <span>></span> combined_file\n<span># 将 file1, file2 与 file3 拼接在一起后写入 combined_file 中。</span>\n\n<span>cp</span> file22.<span>{</span>txt,backup<span>}</span>\n<span># 将 \"file22.txt\" 拷贝为 \"file22.backup\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>这个命令可以作用于花括号内由逗号分隔的文件描述列表。<sup></sup> 文件名扩展（匹配）作用于大括号间的各个文件。</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 除非被引用或被转义，否则空白符不应在花括号中出现。</p>\n<div><pre><code><span>echo</span> <span>{</span>file1,file2<span>}</span><span>\\</span> :<span>{</span><span>\\</span> A,<span>\" B\"</span>,<span>' C'</span><span>}</span>\nfile1 <span>:</span> A file1 <span>:</span> B file1 <span>:</span> C file2 <span>:</span> A file2 <span>:</span> B file2 <span>:</span> C\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"a-z\"> {a..z}</h3>\n<p>扩展的花括号扩展结构。</p>\n<div><pre><code><span>echo</span> <span>{</span>a<span>..</span>z<span>}</span> <span>#  a b c d e f g h i j k l m n o p q r s t u v w x y z</span>\n<span># 输出 a 到 z 之间所有的字母。</span>\n\t\n<span>echo</span> <span>{</span><span>0</span><span>..</span><span>3</span><span>}</span> <span># 0 1 2 3</span>\n<span># 输出 0 到 3 之间所有的数字。</span>\n\n\n<span>base64_charset</span><span>=</span><span>(</span> <span>{</span>A<span>..</span>Z<span>}</span> <span>{</span>a<span>..</span>z<span>}</span> <span>{</span><span>0</span><span>..</span><span>9</span><span>}</span> + / <span>=</span> <span>)</span>\n<span># 使用扩展花括号初始化一个数组。</span>\n<span># 摘自 vladz 编写的样例脚本 \"base64.sh\"。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>Bash第三版中引入了 {a..z} 扩展的花括号扩展结构。</p>\n<h3 id=\"-29\"> {}</h3>\n<p>代码块[花括号]，又被称作内联组（inline group）。它实际上创建了一个匿名函数（anonymous function），即没有名字的函数。但是，不同于那些“标准”函数，代码块内的变量在脚本的其他部分仍旧是可见的。</p>\n<div><pre><code>bash$ { local a;\n              a=123; }\nbash: local: can only be used in a\nfunction\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span>a</span><span>=</span><span>123</span>\n<span>{</span> <span>a</span><span>=</span><span>321</span><span>;</span> <span>}</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>   <span># a = 321   (代码块内赋值)</span>\n\n<span># 感谢S.C.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>代码块可以经由I/O重定向进行输入或输出。</p>\n<p><strong>样例 3-1. 代码块及I/O重定向</strong></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 读取文件 /etc/fstab</span>\n\n<span>File</span><span>=</span>/etc/fstab\n\n<span>{</span>\n<span>read</span> line1\n<span>read</span> line2\n<span>}</span> <span>&lt;</span> <span>$File</span>\n\n<span>echo</span> <span>\"First line in <span>$File</span> is:\"</span>\n<span>echo</span> <span>\"<span>$line1</span>\"</span>\n<span>echo</span>\n<span>echo</span> <span>\"Second line in <span>$File</span> is:\"</span>\n<span>echo</span> <span>\"<span>$line2</span>\"</span>\n\n<span>exit</span> <span>0</span>\n\n<span># 你知道如何解析剩下的行吗？</span>\n<span># 提示：使用 awk 或...</span>\n<span># Hans-Joerg Diers 建议：使用Bash的内建命令 set。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p><strong>样例 3-2. 将代码块的输出保存至文件中</strong></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># rpm-check.sh</span>\n\n<span># 查询一个rpm文件的文件描述、包含文件列表，以及是否可以被安装。</span>\n<span># 将输出保存至文件。</span>\n<span>#</span>\n<span># 这个脚本使用代码块来描述。</span>\n\n<span>SUCCESS</span><span>=</span><span>0</span>\n<span>E_NOARGS</span><span>=</span><span>65</span>\n\n<span>if</span> <span>[</span> -z <span>\"<span>$1</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> rpm-file\"</span>\n  <span>exit</span> <span>$E_NOARGS</span>\n<span>fi</span>  \n\n<span>{</span> <span># 代码块起始</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"Archive Description:\"</span>\n  <span>rpm</span> -qpi <span>$1</span>       <span># 查询文件描述。</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"Archive Listing:\"</span>\n  <span>rpm</span> -qpl <span>$1</span>       <span># 查询文件列表。</span>\n  <span>echo</span>\n  <span>rpm</span> -i --test <span>$1</span>  <span># 查询是否可以被安装。</span>\n  <span>if</span> <span>[</span> <span>\"<span>$?</span>\"</span> -eq <span>$SUCCESS</span> <span>]</span>\n  <span>then</span>\n    <span>echo</span> <span>\"<span>$1</span> can be installed.\"</span>\n  <span>else</span>\n    <span>echo</span> <span>\"<span>$1</span> cannot be installed.\"</span>\n  <span>fi</span>  \n  <span>echo</span>              <span># 代码块结束。</span>\n<span>}</span> <span>></span> <span>\"<span>$1</span>.test\"</span>       <span># 输出重定向至文件。</span>\n\n<span>echo</span> <span>\"Results of rpm test in file <span>$1</span>.test\"</span>\n\n<span># rpm各项参数的具体含义可查看man文档</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 与由圆括号包裹起来的命令组不同，由花括号包裹起来的代码块不产生子进程。<sup></sup></p>\n<p>也可以使用非标准的 for 循环语句来遍历代码块。</p>\n<h3 id=\"-30\"> {}</h3>\n<p>文本占位符。在 <code>xargs -i</code> 后作为输出的占位符使用。</p>\n<div><pre><code><span>ls</span> <span>.</span> <span>|</span> <span>xargs</span> -i -t <span>cp</span> ./<span>{</span><span>}</span> <span>$1</span>\n<span>#            ^^         ^^</span>\n\n<span># 摘自 \"ex42.sh\" (copydir.sh)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"-31\"> {} ;</h3>\n<p>路径名。通常在 <code>find</code> 命令中使用，但这不是shell的内建命令。</p>\n<blockquote>\n<p>定义：路径名是包含完整路径的文件名，例如<code>/home/bozo/Notes/Thursday/schedule.txt</code>。我们通常又称之为绝对路径。</p>\n</blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 在执行<code>find -exec</code>时最后需要加上<code>;</code>，但是分号需要被转义以保证其不会被shell解释。</p>\n<h3 id=\"-32\"> [ ]</h3>\n<p>测试。在 [ ] 之间填写测试表达式。值得注意的是，[ 是shell内建命令 <code>test</code> 的一个组成部分，而不是外部命令 <code>/usr/bin/test</code> 的链接。</p>\n<h3 id=\"-33\"> [[ ]]</h3>\n<p>测试。在 [[ ]] 之间填写测试表达式。相比起单括号测试 （[ ]），它更加的灵活。它是一个shell的关键字。</p>\n<p>详情查看<em>关于 [[ ]] 结构的讨论</em>。</p>\n<h3 id=\"-34\"> [ ]</h3>\n<p>数组元素。在数组中，可以使用中括号的偏移量来用来访问数组中的每一个元素。</p>\n<div><pre><code>Array<span>[</span><span>1</span><span>]</span><span>=</span>slot_1\n<span>echo</span> <span>${Array<span>[</span>1<span>]</span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"-35\"> [ ]</h3>\n<p>字符集、字符范围。\n在<em>正则表达式</em>中，中括号用来匹配指定字符集或字符范围内的任意字符。</p>\n<h3 id=\"-36\"> $[ ... ]</h3>\n<p>整数扩展符。在 $[ ] 中可以计算整数的算术表达式。</p>\n<div><pre><code><span>a</span><span>=</span><span>3</span>\n<span>b</span><span>=</span><span>7</span>\n\n<span>echo</span> $<span>[</span><span>$a</span>+<span>$b</span><span>]</span>   <span># 10</span>\n<span>echo</span> $<span>[</span><span>$a</span>*<span>$b</span><span>]</span>   <span># 21</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"-37\"> (( ))</h3>\n<p>整数扩展符。在 (( )) 中可以计算整数的算术表达式。</p>\n<p>详情查看<em>关于 (( ... )) 结构的讨论</em>。</p>\n<h3 id=\"-38\"> &gt; &amp;&gt; &gt;&amp; &gt;&gt; &lt; &lt;&gt;</h3>\n<p>重定向。</p>\n<p><code>scriptname &gt;filename</code> 将脚本 <em>scriptname</em> 的输出重定向到 <em>filename</em> 中。如果文件存在，那么覆盖掉文件内容。</p>\n<p><code>command &amp;&gt;filename</code> 将命令 <em>command</em> 的标准输出(stdout) 和标准错误输出(stderr) 重定向到 <em>filename</em>。</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 重定向在用于清除测试条件的输出时特别有效。例如测试一个特定的命令是否存在。</p>\n<div><pre><code>bash$ type bogus_command &amp;&gt;/dev/null\n\n\nbash$ echo $?\n1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>或写在脚本中：</p>\n<div><pre><code><span>command_test</span> <span>(</span><span>)</span> <span>{</span> <span>type</span> <span>\"<span>$1</span>\"</span> <span>&amp;></span>/dev/null<span>;</span> <span>}</span>\n<span>#                                      ^</span>\n \n<span>cmd</span><span>=</span>rmdir            <span># 存在的命令。</span>\ncommand_test <span>$cmd</span><span>;</span> <span>echo</span> <span>$?</span>   <span># 返回0</span>\n\n\n<span>cmd</span><span>=</span>bogus_command    <span># 不存在的命令。</span>\ncommand_test <span>$cmd</span><span>;</span> <span>echo</span> <span>$?</span>   <span># 返回1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><code>command &gt;&amp;2</code> 将命令的标准输出重定向至标准错误输出。</p>\n<p><code>scriptname &gt;&gt;filename</code> 将脚本 <em>scriptname</em> 的输出追加到 <em>filename</em> 文件末尾。如果文件不存在，那么将创建这个文件。</p>\n<p><code>[i]&lt;&gt;filename</code> 打开文件 <em>filename</em> 用来读写，并且分配一个文件描述符<em>i</em>指向它。如果文件不存在，那么将创建这个文件。</p>\n<p>进程替换：\n<code>(command)&gt;</code>\n<code>&lt;(command)</code></p>\n<p>在某些情况下， &quot;&lt;&quot; 与 &quot;&gt;&quot; 将用作字符串比较。</p>\n<p>在另外一些情况下， &quot;&lt;&quot; 与 &quot;&gt;&quot; 将用作数字比较。详情查看<em>样例 16-9</em>。</p>\n<h3 id=\"-39\"> &lt;&lt;</h3>\n<p>在here document中进行重定向。</p>\n<h3 id=\"-40\"> &lt;&lt;&lt;</h3>\n<p>在here string中进行重定向。</p>\n<h3 id=\"-41\"> &lt;, &gt;</h3>\n<p>ASCII码比较。</p>\n<div><pre><code><span>veg1</span><span>=</span>carrots\n<span>veg2</span><span>=</span>tomatoes\n\n<span>if</span> <span>[</span><span>[</span> <span>\"veg1\"</span> <span>&lt;</span> <span>\"veg2\"</span> <span>]</span><span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Although <span>$veg1</span> precede <span>$veg2</span> in the dictionary,\"</span>\n  <span>echo</span> -n <span>\"this does not necessarily imply anything \"</span>\n  <span>echo</span> <span>\"about my culinary preferences.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"What kind of dictionary are you using, anyhow?\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"-42\"> &lt;, &gt;</h3>\n<p><em>正则表达式</em>中的单词边界（word boundary）。</p>\n<div><pre><code>bash$ grep &#39;\\&lt;the\\&gt;&#39; textfile\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"-43\"> |</h3>\n<p>管道（pipe）。管道可以将上一个命令的输出作为下一个命令的输入，或者直接输出到shell中。管道是一种可以将一系列命令连接在一起的绝妙方式。</p>\n<div><pre><code><span>echo</span> <span>ls</span> -l <span>|</span> <span>sh</span>\n<span>#  将 \"echo ls -l\" 的结果输出到shell中，</span>\n<span>#  与直接输入 \"ls -l\" 的结果相同。</span>\n\n\n<span>cat</span> *.lst <span>|</span> <span>sort</span> <span>|</span> <span>uniq</span>\n<span># 将所有后缀名为 lst 的文件合并后排序，接着删掉所有重复行。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p>管道是一种在进程间通信的典型方法。它将一个进程的输出作为另一个进程的输入。举一个经典的例子，像 <code>cat</code> 或者 <code>echo</code> 这样的命令，可以通过管道将它们产生的数据流导入到过滤器（filter）中。过滤器是可以用来处理输入流的命令。<sup></sup></p>\n<p><code>cat $filename1 $filename2 | grep $search_word</code></p>\n<p>查看<a href=\"http://www.faqs.org/faqs/unix-faq/faq/part3/\" target=\"_blank\" rel=\"noopener noreferrer\">UNIX FAQ第三章</a>获取更多关于使用UNIX管道的信息。</p>\n</blockquote>\n<p>命令的输出同样可以通过管道输入到脚本中。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># uppercase.sh : 将所有输入变成大写</span>\n\n<span>tr</span> <span>'a-z'</span> <span>'A-Z'</span>\n<span>#  为了防止产生单字符文件名，</span>\n<span>#  必须使用单引号引用字符范围。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>现在，让我们将 <code>ls -l</code> 的输出通过管道导入到脚本中。</p>\n<div><pre><code>bash$ ls -l | ./uppercase.sh\n -RW-RW-R--    1 BOZO  BOZO       109 APR  7 19:49 1.TXT\n -RW-RW-R--    1 BOZO  BOZO       109 APR 14 16:48 2.TXT\n -RW-R--R--    1 BOZO  BOZO       725 APR 20 20:56 DATA-FILE\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 在管道中，每一个进程的输出必须作为下个进程的输入被正确读入，如果不这样，数据流会被阻塞（block），管道就无法按照预期正常工作。</p>\n<div><pre><code><span>cat</span> file1 file2 <span>|</span> <span>ls</span> -l <span>|</span> <span>sort</span>\n<span># \"cat file1 file2\" 的输出会消失。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>管道是在一个子进程中运行的，因此它并不能修改父进程脚本中的变量。</p>\n<div><pre><code><span>variable</span><span>=</span><span>\"initial_value\"</span>\n<span>echo</span> <span>\"new_value\"</span> <span>|</span> <span>read</span> variable\n<span>echo</span> <span>\"variable = <span>$variable</span>\"</span>     <span># variable = initial_value</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果管道中的任意一个命令意外中止了，管道将会提前中断，我们称其为<em>管道破裂</em>(Broken Pipe)。出现这种情况，系统将发送一个 <code>SIGPIPE</code> 信号。</p>\n<h3 id=\"-44\"> &gt;|</h3>\n<p>强制重定向。即使在 <code>noclobber</code> 选项被设置的情况下，重定向也会覆盖已存在的文件。</p>\n<h3 id=\"-45\"> ||</h3>\n<p>或（OR）逻辑运算符。在测试结构中，任意一个测试条件为真，整个表达式为真。返回 0（成功标志位）。</p>\n<h3 id=\"-46\"> &amp;</h3>\n<p>后台运行操作符。如果命令后带&amp;，那么此命令将转至后台运行。</p>\n<div><pre><code>bash$ sleep 10 &amp;\n[1] 850\n[1]+  Done                    sleep 10\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在脚本中，命令甚至循环都可以在后台运行。</p>\n<p><strong>样例 3-3. 在后台运行的循环</strong></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># background-loop.sh</span>\n\n<span>for</span> <span>i</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span> <span>6</span> <span>7</span> <span>8</span> <span>9</span> <span>10</span>            <span># 第一个循环</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$i</span> \"</span>\n<span>done</span> <span>&amp;</span> <span># 这个循环在后台运行。</span>\n       <span># 有时会在第二个循环结之后才执行此后台循环。</span>\n\n<span>echo</span>   <span># 此'echo' 有时不显示</span>\n\n<span>for</span> <span>i</span> <span>in</span> <span>11</span> <span>12</span> <span>13</span> <span>14</span> <span>15</span> <span>16</span> <span>17</span> <span>18</span> <span>19</span> <span>20</span>   <span># 第二个循环</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$i</span> \"</span>\n<span>done</span>\n\n<span>echo</span>   <span># 此'echo' 有时不显示</span>\n\n<span># ======================================================</span>\n\n<span># 脚本期望输出结果：</span>\n<span># 1 2 3 4 5 6 7 8 9 10</span>\n<span># 11 12 13 14 15 16 17 18 19 20</span>\n\n<span># 一些情况下可能会输出：</span>\n<span># 11 12 13 14 15 16 17 18 19 20</span>\n<span># 1 2 3 4 5 6 7 8 9 10 bozo $</span>\n<span># 第二个 'echo' 没有被执行，为什么？</span>\n\n<span># 另外一些情况下可能会输出：</span>\n<span># 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</span>\n<span># 第一个 'echo' 没有被执行，为什么？</span>\n\n<span># 非常罕见的情况下，可能会输出：</span>\n<span># 11 12 13 1 2 3 4 5 6 7 8 9 10 14 15 16 17 18 19 20</span>\n<span># 前台循环抢占（preempt）了后台循环。</span>\n\n<span>exit</span> <span>0</span>\n\n<span>#  Nasimuddin Ansari 建议：在第6行和第14行的</span>\n<span>#  echo -n \"$i \" 后增加 sleep 1，</span>\n<span>#  会得到许多有趣的结果。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 脚本在后台执行命令时可能因为等待键盘事件被挂起。幸运的是，有一套方案可以解决这个问题。</p>\n<h3 id=\"-47\"> &amp;&amp;</h3>\n<p>与（AND）逻辑操作符。在测试结构中，所有测试条件都为真，表达式才为真，返回 0（成功标志位）。</p>\n<h3 id=\"-48\"> -</h3>\n<p>选项与前缀。它可以作为命令的选项标志，也可以作为一个操作符的前缀，也可以作为在参数代换中作为默认参数的前缀。</p>\n<p><code>COMMAND -[Option1][Option2][..]</code></p>\n<p><code>ls -al</code></p>\n<p><code>sort -dfu $filename</code></p>\n<div><pre><code><span>if</span> <span>[</span> <span>$file1</span> -ot <span>$file2</span> <span>]</span>\n<span>then</span> <span>#      ^</span>\n  <span>echo</span> <span>\"File <span>$file1</span> is older than <span>$file2</span>.\"</span>\n<span>fi</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -eq <span>\"<span>$b</span>\"</span> <span>]</span>\n<span>then</span> <span>#    ^</span>\n  <span>echo</span> <span>\"<span>$a</span> is equal to <span>$b</span>.\"</span>\n<span>fi</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$c</span>\"</span> -eq <span>24</span> -a <span>\"<span>$d</span>\"</span> -eq <span>47</span> <span>]</span>\n<span>then</span> <span>#    ^              ^</span>\n  <span>echo</span> <span>\"<span>$c</span> equals 24 and <span>$d</span> equals 47.\"</span>\n<span>fi</span>\n\n\n<span>param2</span><span>=</span><span>${param1<span>:-</span>$DEFAULTVAL}</span>\n<span>#               ^</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"-49\"> --</h3>\n<p>双横线一般作为命令长选项的前缀。</p>\n<p><code>sort --ignore-leading-blanks</code></p>\n<p>双横线与Bash内建命令一起使用时，意味着该命令选项的结束。</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/tip.gif\" alt=\"info\"> 下面提供了一种删除文件名以横线开头文件的简单方法。</p>\n<div><pre><code>bash$ ls -l\n-rw-r--r-- 1 bozo bozo 0 Nov 25 12:29 -badname\n\n\nbash$ rm -- -badname\n\nbash$ ls -l\ntotal 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>双横线通常也和 <code>set</code> 连用。</p>\n<p><code>set -- $variable</code>（查看<em>样例 15-18</em>）。</p>\n<h3 id=\"-50\"> -</h3>\n<p>重定向输入输出[短横线]。</p>\n<div><pre><code>bash$ cat -\nabc\nabc\n\n...\n\nCtl-D\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在这个例子中，<code>cat -</code> 输出由键盘读入的标准输入(stdin) 到 标准输出(stdout)。但是在真实应用的 I/O 重定向中是否有使用 '-'？</p>\n<div><pre><code><span>(</span>cd /source/directory <span>&amp;&amp;</span> <span>tar</span> cf - <span>.</span> <span>)</span> <span>|</span> <span>(</span>cd /dest/directory <span>&amp;&amp;</span> <span>tar</span> xpvf -<span>)</span>\n\n<span># 将整个文件树从一个目录移动到另一个目录。</span>\n<span># 感谢 Alan Cox &lt;a.cox@swansea.ac.uk> 所作出的部分改动</span>\n\n<span># 1) cd /source/directory</span>\n<span>#    工作目录定位到文件所属的源目录</span>\n<span># 2) &amp;&amp;</span>\n<span>#    \"与链\"：如果 'cd' 命令操作成功，那么执行下一条命令</span>\n<span># 3) tar cf - .</span>\n<span>#    'tar c' (create 创建) 创建一份新的档案</span>\n<span>#    'tar f -' (file 指定文件) 在 '-' 后指定一个目标文件作为输出</span>\n<span>#    '.' 代表当前目录</span>\n<span># 4) |</span>\n<span>#    通过管道进行重定向</span>\n<span># 5) ( ... )</span>\n<span>#    在建立的子进程中执行命令</span>\n<span># 6) cd /dest/directory</span>\n<span>#    工作目录定位到目标目录</span>\n<span># 7) &amp;&amp;</span>\n<span>#    与 2) 相同</span>\n<span># 8) tar xpvf -</span>\n<span>#    'tar x' 解压档案</span>\n<span>#    'tar p' (preserve 保留) 保留档案内文件的所有权及文件权限</span>\n<span>#    'tar v' (verbose 冗余) 发送全部信息到标准输出</span>\n<span>#    'tar f -' (file 指定文件) 在 '-' 后指定一个目标文件作为输入</span>\n<span>#</span>\n<span>#    注意 'x' 是一个命令，而 'p', 'v', 'f' 是选项。</span>\n\n<span># 干的漂亮！</span>\n\n\n<span># 更加优雅的写法是:</span>\n<span>#   cd source/directory</span>\n<span>#   tar cf - . | (cd ../dest/directory; tar xpvf -)</span>\n<span>#</span>\n<span># 同样可以写成:</span>\n<span>#   cp -a /source/directory/* /dest/directory</span>\n<span># 或:</span>\n<span>#   cp -a /source/directory/* /source/directory/.[^.]* /dest/directory</span>\n<span># 可以在源目录中有隐藏文件时使用</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><div><pre><code>bunzip2 -c linux-2.6.16.tar.bz2 <span>|</span> <span>tar</span> xvf -\n<span>#  --未解压的 tar 文件--        | --将解压出的 tar 传递给 \"tar\"--</span>\n<span>#  如果不使用管道让 \"tar\" 处理 \"bunzip2\" 得到的文件，</span>\n<span>#  那么就需要使用单独的两步来完成。</span>\n<span>#  目的是为了解压 \"bzipped\" 压缩的内核源代码。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>下面的例子中，&quot;-&quot; 并不是一个Bash的操作符，它仅仅是 <code>tar</code>, <code>cat</code> 等一些特定UNIX命令中将结果输出到标准输出的选项。</p>\n<div><pre><code>bash$ echo &quot;whatever&quot; | cat -\nwhatever \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>当需要文件名的时候，- 可以用来代替某个文件而重定向到标准输出（通常出现在 <code>tar cf</code> 中）或从 <em>stdin</em> 中接受数据。这是一种在管道中使用面向文件（file-oriented）工具作为过滤器的方法。</p>\n<div><pre><code>bash$ file\nUsage: file [-bciknvzL] [-f namefile] [-m magicfiles] file...\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>单独执行 <code>file</code> 命令，将会得到一条错误信息。</p>\n<p>在命令后增加一个 &quot;-&quot; 可以得到一个更加有用的结果。它会使得shell暂停等待用户输入。</p>\n<div><pre><code>bash$ file -\nabc\nstandard input:              ASCII text\n\n\nbash$ file -\n#!/bin/bash\nstandard input:              Bourne-Again shell script text executable\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>现在命令能够接受标准输入并且处理它们了。</p>\n<p>&quot;-&quot; 能够通过管道将标准输出重定向到其他命令中。这就可以做到像在某个文件前添加几行这样的事情。</p>\n<p>使用 <code>diff</code> 比较两个文件的部分内容：</p>\n<div><pre><code><span>grep</span> Linux file1 <span>|</span> <span>diff</span> file2 -\n</code></pre>\n<div><span>1</span><br></div></div><p>最后介绍一个使用 - 的 <code>tar</code> 命令的实际案例。</p>\n<p><strong>样例 3-4. 备份最近一天修改过的所有文件</strong></p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>#  将当前目录下24小时之内修改过的所有文件备份成一个</span>\n<span>#  \"tarball\" (经 tar 打包`与 gzip 压缩) 文件</span>\n\n<span>BACKUPFILE</span><span>=</span>backup-<span><span>$(</span><span>date</span> +%m-%d-%Y<span>)</span></span>\n<span>#                 在备份文件中嵌入时间</span>\n<span>#                 感谢 Joshua Tschida 提供的建议</span>\n\n<span>archive</span><span>=</span><span>${1<span>:-</span>$BACKUPFILE}</span>\n<span>#  如果没有在命令行中特别制定备份格式，</span>\n<span>#  那么将会默认设置为 \"backup-MM-DD-YYYY.tar.gz\"。</span>\n\n<span>tar</span> cvf - <span><span>`</span><span>find</span> <span>.</span> -mtime -1 -type f -print<span>`</span></span> <span>></span> <span>$archive</span>.tar\n<span>gzip</span> <span>$archive</span>.tar\n<span>echo</span> <span>\"Directory <span>$PWD</span> backed up in archive file <span title=\"\\&quot;\">\\\"</span><span>$archive</span>.tar.gz<span title=\"\\&quot;\">\\\"</span>.\"</span>\n\n<span>#  Stephane Chazeles 指出如果目录中有非常多的文件，</span>\n<span>#  或文件名中包含空白符时，上面的代码会运行失败。</span>\n\n<span># 他建议使用以下的任意一种方法：</span>\n<span># -------------------------------------------------------------------</span>\n<span>#   find . -mtime -1 -type f -print0 | xargs -0 tar rvf \"$archive.tar\"</span>\n<span>#   使用了 GNU 版本的 \"find\" 命令。</span>\n\n\n<span>#   find . -mtime -1 -type f -exec tar rvf \"$archive.tar\" '{}' \\;</span>\n<span>#   兼容其他的 UNIX 发行版，但是速度会比较慢</span>\n<span># -------------------------------------------------------------------</span>\n\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 以 &quot;-&quot; 开头的文件在和&quot;-&quot; 重定向操作符一起使用时可能会导致一些问题。因此合格的脚本必须首先检查这种情况。如果遇到，就需要给文件名加一个合适的前缀，比如 <code>./-FILENAME, $PWD/-FILENAME</code> 或者<code>$PATHNAME/-FILENAME</code> 。</p>\n<p>如果变量的值以 '-' 开头，也可能会造成类似问题。</p>\n<div><pre><code><span>var</span><span>=</span><span>'-n'</span>\n<span>echo</span> <span>$var</span>\n<span># 等同于 \"echo -n\"，不会输出任何东西。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"-51\"> -</h3>\n<p>先前的工作目录。使用 <code>cd -</code> 命令可以返回先前的工作目录。它实际上是使用了 <code>$OLDPWD</code> 环境变量。</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 不要将这里的 &quot;-&quot; 与先前的 &quot;-&quot; 重定位操作符混淆。&quot;-&quot; 的具体含义需要根据上下文来解释。</p>\n<h3 id=\"-52\"> -</h3>\n<p>减号。算术运算符中的减法标志。</p>\n<h3 id=\"-53\"> =</h3>\n<p>等号。赋值操作符。</p>\n<div><pre><code><span>a</span><span>=</span><span>28</span>\n<span>echo</span> <span>$a</span>   <span># 28</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>在一些情况下，&quot;=&quot; 可以作为字符串比较操作符。</p>\n<h3 id=\"-54\"> +</h3>\n<p>加号。加法算术运算。</p>\n<p>在一些情况下，+ 是作为正则表达式中的一个操作符。</p>\n<h3 id=\"-55\"> +</h3>\n<p>选项操作符。作为一个命令或过滤器的选项标记。</p>\n<p>特定的一些指令和内建命令使用 + 启用特定的选项，使用 - 禁用特定的选项。在参数代换中，+ 是作为变量扩展的备用值（alternate value）的前缀。</p>\n<h3 id=\"-56\"> %</h3>\n<p>取模。取模操作运算符。</p>\n<div><pre><code><span>let</span> <span>\"z = 5 % 3\"</span>\n<span>echo</span> <span>$z</span>  <span># 2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>在另外一些情况下，% 是一种模式匹配的操作符。</p>\n<h3 id=\"-57\"> ~</h3>\n<p>主目录[波浪号]。它相当于内部变量 <code>$HOME</code>。<code>~bozo</code> 是 bozo 的主目录，执行 <code>ls ~bozo</code> 将会列出他的主目录中内容。<code>~/</code> 是当前用户的主目录，执行 <code>ls ~/</code> 将会列出其中所有的内容。</p>\n<div><pre><code>bash$ echo ~bozo\n/home/bozo\n\nbash$ echo ~\n/home/bozo\n\nbash$ echo ~/\n/home/bozo/\n\nbash$ echo ~:\n/home/bozo:\n\nbash$ echo ~nonexistent-user\n~nonexistent-user\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id=\"-58\"> ~+</h3>\n<p>当前工作目录。它等同于内部变量 <code>$PWD</code>。</p>\n<h3 id=\"-59\"> ~-</h3>\n<p>先前的工作目录。它等同于内部变量 <code>$OLDPWD</code>。</p>\n<h3 id=\"-60\"> =~</h3>\n<p><em>正则表达式</em>匹配。将在 *Bash version 3 *章节中介绍。</p>\n<h3 id=\"-61\"> ^</h3>\n<p>行起始符。在正则表达式中，&quot;^&quot; 代表一行文本的开始。</p>\n<h3 id=\"-62\"> ^, ^^</h3>\n<p>参数替换中的大写转换符（在Bash第4版新增）。</p>\n<h3 id=\"控制字符\"> 控制字符</h3>\n<p>改变终端或文件显示的一些行为。一个控制符是由 <em>CONTRL + key</em> 组成的（同时按下）。控制字符同样可以通过转义以八进制或十六进制的方式显示。</p>\n<p>控制符不能在脚本中使用。</p>\n<h4 id=\"ctrl-a\"> Ctrl-A</h4>\n<p>移动光标至行首。</p>\n<h4 id=\"ctrl-b\"> Ctrl-B</h4>\n<p>非破坏性退格（即不删除字符）。</p>\n<h4 id=\"ctrl-c\"> Ctrl-C</h4>\n<p>中断指令。终止当前运行的任务。</p>\n<h4 id=\"ctrl-d\"> Ctrl-D</h4>\n<p>登出shell（类似 <code>exit</code>）</p>\n<p>键入 <code>EOF</code>（end-of-file，文件终止标记），中断 <em>stdin</em> 的输入。</p>\n<p>当你在终端或 <em>xterm</em> 窗口中输入字符时，<code>Ctl-D</code> 将会删除光标上的字符。当没有字符时，<code>Crl-D</code> 将会登出shell。在 <em>xterm</em> 中，将会关闭整个窗口。</p>\n<h4 id=\"ctrl-e\"> Ctrl-E</h4>\n<p>移动光标至行末。</p>\n<h4 id=\"ctrl-f\"> Ctrl-F</h4>\n<p>光标向前移动一个字符。</p>\n<h4 id=\"ctrl-g\"> Ctrl-G</h4>\n<p>响铃<code>BEL</code>。在一些老式打字机终端上，将会响铃。而在 <em>xterm</em> 中，将会产生“哔”声。</p>\n<h4 id=\"ctrl-h\"> Ctrl-H</h4>\n<p>抹除（破坏性退格）。退格删除前面的字符。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 在字符串中嵌入 Ctrl-H</span>\n\n<span>a</span><span>=</span><span>\"^H^H\"</span>                  <span># 两个退格符 Ctrl-H</span>\n                          <span># 在 vi/vim 中使用 Ctrl-V Ctrl-H 来键入</span>\n<span>echo</span> <span>\"abcdef\"</span>             <span># abcdef</span>\n<span>echo</span>\n<span>echo</span> -n <span>\"abcdef<span>$a</span> \"</span>       <span># abcd f</span>\n<span>#                ^              ^ 末尾有空格退格两次的结果</span>\n<span>echo</span>\n<span>echo</span> -n <span>\"abcdef<span>$a</span>\"</span>        <span># abcdef</span>\n<span>#                                ^ 末尾没有空格时为什么退格无效了？</span>\n                          <span># 并不是我们期望的结果。</span>\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span># Constantin Hagemeier 建议尝试一下：</span>\n<span># a=$'\\010\\010'</span>\n<span># a=$'\\b\\b'</span>\n<span># a=$'\\x08\\x08'</span>\n<span># 但是这些并不会改变结果。</span>\n\n<span>########################################</span>\n\n<span># 现在来试试这个。</span>\n\n<span>rubout</span><span>=</span><span>\"^H^H^H^H^H\"</span>       <span># 5个 Ctrl-H</span>\n\n<span>echo</span> -n <span>\"12345678\"</span>\n<span>sleep</span> <span>2</span>\n<span>echo</span> -n <span>\"<span>$rubout</span>\"</span>\n<span>sleep</span> <span>2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><h4 id=\"ctrl-i\"> Ctrl-I</h4>\n<p>水平制表符。</p>\n<h4 id=\"ctrl-j\"> Ctrl-J</h4>\n<p>另起一行（换行）。在脚本中，你也可使用八进制 '\\012' 或者十六进制 '\\x0a' 来表示。</p>\n<h4 id=\"ctrl-k\"> Ctrl-K</h4>\n<p>垂直制表符。</p>\n<p>当你在终端或 <em>xterm</em> 窗口中输入字符时，<code>Ctrl-K</code> 将会删除光标上及其后的所有字符。而在脚本中，<code>Ctrl-K</code> 的作用有些不同。具体查看下方 Lee Lee Maschmeyer 写的样例。</p>\n<h4 id=\"ctrl-l\"> Ctrl-L</h4>\n<p>清屏、走纸。在终端中等同于 <code>clear</code> 命令。在打印时，<code>Ctrl-L</code> 将会使纸张移动到底部。</p>\n<h4 id=\"ctrl-m\"> Ctrl-M</h4>\n<p>回车（CR）。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 感谢 Lee Maschmeyer 提供的样例。</span>\n\n<span>read</span> -n <span>1</span> -s -p <span>\\</span>\n$<span>'Control-M leaves cursor at beginning of this line. Press Enter. <span title=\"\\x0d\">\\x0d</span>'</span>\n           <span># '0d' 是 Control-M 的十六进制的值</span>\n<span>echo</span> <span>></span><span>&amp;2</span>   <span># '-s' 参数禁用了回显，所以需要显式的另起一行。</span>\n\n<span>read</span> -n <span>1</span> -s -p $<span>'Control-J leaves cursor on next line. <span title=\"\\x0a\">\\x0a</span>'</span>\n           <span># '0a' 是 Control-J 换行符的十六进制的值</span>\n<span>echo</span> <span>></span><span>&amp;2</span>\n\n<span>###</span>\n\n<span>read</span> -n <span>1</span> -s -p $<span>'And Control-K<span title=\"\\x0b\">\\x0b</span>goes straight down.'</span>\n<span>echo</span> <span>></span><span>&amp;2</span>   <span># Control-K 是垂直制表符。</span>\n\n<span># 一个更好的垂直制表符例子是：</span>\n\n<span>var</span><span>=</span>$<span>'<span title=\"\\x0a\">\\x0a</span>This is the bottom line<span title=\"\\x0b\">\\x0b</span>This is the top line<span title=\"\\x0a\">\\x0a</span>'</span>\n<span>echo</span> <span>\"<span>$var</span>\"</span>\n<span>#  这将会产生与上面的例子类似的结果。但是</span>\n<span>echo</span> <span>\"<span>$var</span>\"</span> <span>|</span> col\n<span>#  这却会使得右侧行高于左侧行。</span>\n<span>#  这也解释了为什么我们需要在行首和行尾加上换行符</span>\n<span>#  来避免显示的混乱。</span>\n\n<span># Lee Maschmeyer 的解释：</span>\n<span># --------------------------</span>\n<span>#  在第一个垂直制表符的例子中，垂直制表符使其</span>\n<span>#  在没有回车的情况下向下打印。</span>\n<span>#  这在那些不能回退的设备上，例如 Linux 的终端才可以。</span>\n<span>#  而垂直制表符的真正目的是向上而非向下。</span>\n<span>#  它可以用来在打印机中用来打印上标。</span>\n<span>#  col 工具可以用来模拟真实的垂直制表符行为。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h4 id=\"ctrl-n\"> Ctrl-N</h4>\n<p>在命令行历史记录中调用下一条历史命令<sup></sup>。</p>\n<h4 id=\"ctrl-o\"> Ctrl-O</h4>\n<p>在命令行中另起一行。</p>\n<h4 id=\"ctrl-p\"> Ctrl-P</h4>\n<p>在命令行历史记录中调用上一条历史命令。</p>\n<h4 id=\"ctrl-q\"> Ctrl-Q</h4>\n<p>恢复（XON）。</p>\n<p>终端恢复读入 <em>stdin</em>。</p>\n<h4 id=\"ctrl-r\"> Ctrl-R</h4>\n<p>在命令行历史记录中进行搜索。</p>\n<h4 id=\"ctrl-s\"> Ctrl-S</h4>\n<p>挂起（XOFF）。</p>\n<p>终端冻结 <em>stdin</em>。（可以使用 <code>Ctrl-Q</code> 恢复）</p>\n<h4 id=\"ctrl-t\"> Ctrl-T</h4>\n<p>交换光标所在字符与其前一个字符。</p>\n<h4 id=\"ctrl-u\"> Ctrl-U</h4>\n<p>删除光标所在字符之前的所有字符。\n在一些情况下，不管光标在哪个位置，<code>Ctrl-U</code> 都会删除整行文字。</p>\n<h4 id=\"ctrl-v\"> Ctrl-V</h4>\n<p>输入时，使用 <code>Ctrl-V</code> 允许插入控制字符。例如，下面两条语句是等价的：</p>\n<div><pre><code><span>echo</span> -e <span>'<span title=\"\\x0a\">\\x0a</span>'</span>\n<span>echo</span> <span>&lt;</span>Ctl-V<span>></span><span>&lt;</span>Ctl-J<span>></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>Ctrl-V</code> 在文本编辑器中特别有用。</p>\n<h4 id=\"ctrl-w\"> Ctrl-W</h4>\n<p>当你在终端或 <em>xterm</em> 窗口中输入字符时，<code>Ctrl-W</code> 将会删除光标所在字符之前到其最近的空白符之间的所有字符。\n在一些情况下，<code>Ctrl-W</code> 会删除到之前最近的非字母或数字的字符。</p>\n<h4 id=\"ctrl-x\"> Ctrl-X</h4>\n<p>在一些特定的文本处理程序中，剪切高亮文本并复制到剪贴板（clipboard）。</p>\n<h4 id=\"ctrl-y\"> Ctrl-Y</h4>\n<p>粘贴之前使用 <code>Ctrl-U</code> 或 <code>Ctrl-W</code> 删除的文字。</p>\n<h4 id=\"ctrl-z\"> Ctrl-Z</h4>\n<p>暂停当前运行的任务。</p>\n<p>在一些特定的文本处理程序中是替代操作。</p>\n<p>在 MSDOS 文件系统中作为 <code>EOF</code>（end-of-file，文件终止标记）。</p>\n<h3 id=\"空白符\"> 空白符</h3>\n<p>作为命令或变量之间的分隔符。空白符包含空格、制表符、换行符或它们的任意组合。<sup></sup>在一些地方，比如变量赋值时，空白符不应该出现，否则会造成语法错误。</p>\n<p>空白行在脚本中不会有任何实际作用，但是可以划分代码，使代码更具可读性。</p>\n<p>特殊变量 <code>$IFS</code> 是作为一些特定命令的输入域（field）分隔符，默认值为空白符。</p>\n<blockquote>\n<p>定义：域是字符串中离散的数据块。使用空白符或者指定的字符（通常由 <code>$IFS</code> 决定）来分隔临近域。在一些情况下，域也可以被称作记录（record）。</p>\n</blockquote>\n<p>如果想在字符串或者变量中保留空白符，请引用。</p>\n<p>UNIX 过滤器可以使用 POSIX 字符类 <code>[:space:]</code> 来寻找和操作空白符。</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>操作符（operator）用来执行表达式（operation）。最常见的例子就是算术运算符+ - * /。在Bash中，操作符和关键字的概念有一些重叠。 </p>\n</li>\n<li id=\"fn2\"><p>它更被人熟知的名字是三元（ternary）操作符。但是读起来不清晰，而且容易令人混淆。trinary 是一种更加优雅的写法。 </p>\n</li>\n<li id=\"fn3\"><p>美国信息交换标准代码（American Standard Code for Information Interchange）。这是一套可以由计算机存储和处理的7位（bit）字符（包含字母、数字和一系列有限的符号）编码系统。 </p>\n</li>\n<li id=\"fn4\"><p>进程标识符（PID），是分配给正在运行进程的唯一数字标识。可以使用 <code>ps</code> 命令查看进程的 PID。&lt;br &gt;定义：进程是正在执行的命令或程序，通常也称作任务。 </p>\n</li>\n<li id=\"fn5\"><p>由shell来执行大括号扩展操作。命令本身是在扩展的基础上进行操作的。 </p>\n</li>\n<li id=\"fn6\"><p>例外：作为管道的一部分的大括号中的代码块可能会运行在子进程中。&lt;br &gt;<pre>ls | { read firstline; read secondline; }<br/>#  错误。大括号中的代码块在子进程中运行，<br />#+ 因此 &quot;ls&quot; 命令输出的结果不能传递到代码块中。<br/>echo &quot;First line is $firstline; second line is $secondline&quot;  # 无效。<br/><br/># 感谢 S.C.</pre> </p>\n</li>\n<li id=\"fn7\"><p>正如在古代催情剂（philtre）被认为是一种能引发神奇变化的药剂一样，UNIX 中的过滤器（filter）也是有类似的作用的。<br/>（如果一个程序员做出了一个能够在 Linux 设备上运行的 &quot;love philtre&quot;，那么他将会获得巨大的荣誉。） </p>\n</li>\n<li id=\"fn8\"><p>Bash将之前在命令行中执行过的命令存储在缓存（buffer）中，或者一块内存区域里。可以使用内建命令 <code>history</code> 来查看。 </p>\n</li>\n<li id=\"fn9\"><p>换行符本身也是一个空白符。因此这就是为什么仅仅包含一个换行符的空行也被认为是空白符。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "4.1 变量替换",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_1_variable_substitution/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_1_variable_substitution/",
      "content_html": "<h1 id=\"_4-1-变量替换\"> 4.1 变量替换</h1>\n<p>变量名是其所指向值的一个占位符（placeholder）。引用变量值的过程我们称之为变量替换（variable substitution）。</p>\n<h3 id=\"\"> $</h3>\n<p>接下来我们仔细区分一下<strong>变量名</strong>与<strong>变量值</strong>。如果变量名是 <code>variable1</code>， 那么 <code>$variable1</code> 就是对变量值的引用。<sup></sup></p>\n<div><pre><code>bash$ variable1=23\n\n\nbash$ echo variable1\nvariable1\n\nbash$ echo $variable1\n23\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>变量仅仅在声明时、赋值时、被删除时（<code>unset</code>）、被导出时（<code>export</code>），算术运算中使用双括号结构((...))时或在代表信号时（signal，查看样例 32-5）才不需要有 $ 前缀。赋值可以是使用 =（比如 <code>var1=27</code>），可以是在 <code>read</code> 语句中，也可以是在循环的头部（<code>for var2 in 1 2 3</code>）。</p>\n<p>在双引号<code>&quot;&quot;</code>字符串中可以使用变量替换。我们称之为部分引用，有时候也称弱引用。而使用单引号<code>''</code>引用时，变量只会作为字符串显示，变量替换不会发生。我们称之为全引用，有时也称强引用。更多细节将在第五章讲解。</p>\n<p>实际上, <code>$variable</code> 这种写法是 <code>${variable}</code> 的简化形式。在某些特殊情况下，使用 <code>$variable</code> 写法会造成语法错误，使用完整形式会更好（查看章节 10.2）。</p>\n<p>样例 4-1. 变量赋值与替换</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># ex9.sh</span>\n\n<span># 变量赋值与替换</span>\n\n<span>a</span><span>=</span><span>375</span>\n<span>hello</span><span>=</span><span>$a</span>\n<span>#   ^ ^</span>\n\n<span>#----------------------------------------------------</span>\n<span># 初始化变量时，赋值号 = 的两侧绝不允许有空格出现。</span>\n<span># 如果有空格会发生什么？</span>\n\n<span>#   \"VARIABLE =value\"</span>\n<span>#            ^</span>\n<span>#% 脚本将会尝试运行带参数 \"=value\" 的 \"VARIABLE \" 命令。</span>\n\n<span>#   \"VARIABLE= value\"</span>\n<span>#             ^</span>\n<span>#% 脚本将会尝试运行 \"value\" 命令，</span>\n<span>#+ 同时设置环境变量 \"VARIABLE\" 为 \"\"。</span>\n<span>#----------------------------------------------------</span>\n\n\n<span>echo</span> hello    <span># hello</span>\n<span># 没有引用变量，\"hello\" 只是一个字符串...</span>\n\n<span>echo</span> <span>$hello</span>   <span># 375</span>\n<span>#    ^          这是变量引用。</span>\n\n<span>echo</span> <span>${hello}</span> <span># 375</span>\n<span>#               与上面的类似，变量引用。</span>\n\n<span># 字符串内引用变量</span>\n<span>echo</span> <span>\"<span>$hello</span>\"</span>    <span># 375</span>\n<span>echo</span> <span>\"<span>${hello}</span>\"</span>  <span># 375</span>\n\n<span>echo</span>\n\n<span>hello</span><span>=</span><span>\"A B  C   D\"</span>\n<span>echo</span> <span>$hello</span>   <span># A B C D</span>\n<span>echo</span> <span>\"<span>$hello</span>\"</span> <span># A B  C   D</span>\n<span># 正如我们所见，echo $hello 与 echo \"$hello\" 的结果不同。</span>\n<span># ====================================</span>\n<span># 字符串内引用变量将会保留变量的空白符。</span>\n<span># ====================================</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>'<span>$hello</span>'</span>  <span># $hello</span>\n<span>#    ^      ^</span>\n<span>#  单引号会禁用掉（转义）变量引用，这导致 \"$\" 将以普通字符形式被解析。</span>\n\n<span># 注意单双引号字符串引用效果的不同。</span>\n\n<span>hello</span><span>=</span>    <span># 将其设置为空值</span>\n<span>echo</span> <span>\"\\<span>$hello</span> (null value) = <span>$hello</span>\"</span>      <span># $hello (null value) =</span>\n<span># 注意 </span>\n<span># 将一个变量设置为空与删除(unset)它不同，尽管它们的表现形式相同。</span>\n\n<span># -----------------------------------------------</span>\n\n<span># 使用空白符分隔，可以在一行内对多个变量进行赋值。</span>\n<span># 但是这会降低程序的可读性，并且可能会导致部分程序不兼容的问题。</span>\n\n<span>var1</span><span>=</span><span>21</span>  <span>var2</span><span>=</span><span>22</span>  <span>var3</span><span>=</span><span>$V3</span>\n<span>echo</span>\n<span>echo</span> <span>\"var1=<span>$var1</span>   var2=<span>$var2</span>   var3=<span>$var3</span>\"</span>\n\n<span># 在一些老版本的 shell 中这样写可能会有问题。</span>\n\n<span># -----------------------------------------------</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>numbers</span><span>=</span><span>\"one two three\"</span>\n<span>#           ^   ^</span>\n<span>other_numbers</span><span>=</span><span>\"1 2 3\"</span>\n<span>#               ^ ^</span>\n<span># 如果变量中有空白符号，那么必须用引号进行引用。</span>\n<span># other_numbers=1 2 3                  # 出错</span>\n<span>echo</span> <span>\"numbers = <span>$numbers</span>\"</span>\n<span>echo</span> <span>\"other_numbers = <span>$other_numbers</span>\"</span>  <span># other_numbers = 1 2 3</span>\n<span># 也可以转义空白符。</span>\n<span>mixed_bag</span><span>=</span><span>2</span><span>\\</span> ---<span>\\</span> Whatever\n<span>#           ^    ^ 使用 \\ 转义空格</span>\n\n<span>echo</span> <span>\"<span>$mixed_bag</span>\"</span>         <span># 2 --- Whatever</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>echo</span> <span>\"uninitialized_variable = <span>$uninitialized_variable</span>\"</span>\n<span># 未初始化的变量是空值(null表示不含有任何值)。</span>\n<span>uninitialized_variable</span><span>=</span>   <span># 只声明而不初始化，等同于设为空值。</span>\n<span>echo</span> <span>\"uninitialized_variable = <span>$uninitialized_variable</span>\"</span> <span># 仍旧为空</span>\n\n<span>uninitialized_variable</span><span>=</span><span>23</span>       <span># 设置变量</span>\n<span>unset</span> uninitialized_variable    <span># 删除变量</span>\n<span>echo</span> <span>\"uninitialized_variable = <span>$uninitialized_variable</span>\"</span>\n                                <span># uninitialized_variable =</span>\n                                <span># 变量值为空</span>\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 一个未被赋值或未初始化的变量拥有空值（null value）。<em>注意：null值不等同于0</em>。</p>\n</blockquote>\n<div><pre><code><span>if</span> <span>[</span> -z <span>\"<span>$unassigned</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"\\<span>$unassigned</span> is NULL.\"</span>\n<span>fi</span>     <span># $unassigned is NULL.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>在赋值前使用变量可能会导致错误。但在算术运算中使用未赋值变量是可行的。</p>\n</blockquote>\n<div><pre><code><span>echo</span> <span>\"<span>$uninitialized</span>\"</span>            <span># 空行</span>\n<span>let</span> <span>\"uninitialized += 5\"</span>         <span># 加5</span>\n<span>echo</span> <span>\"<span>$uninitialized</span>\"</span>            <span># 5</span>\n<span># 结论：</span>\n<span># 一个未初始化的变量不含值(null)，但在算术运算中会被作为0处理。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<p>也可参考样例 15-23。</p>\n</blockquote>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>实际上，变量名是被称作左值（lvalue），意思是出现在赋值表达式的左侧的值，比如 <code>VARIABLE=23</code>。变量值被称作右值（rvalue），意思是出现在赋值表达式右侧的值，比如 <code>VAR2=$VARIABLE</code>。<br />事实上，变量名只是一个引用，一枚指针，指向实际存储数据内存地址的指针。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "4.2 变量赋值",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_2_variable_assignment/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_2_variable_assignment/",
      "content_html": "<h1 id=\"_4-2-变量赋值\"> 4.2 变量赋值</h1>\n<h3 id=\"\"> =</h3>\n<p>赋值操作符（在其前后没有空白符）。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"noitce\"> 不要混淆 = 与 -eq，后者用来进行比较而非赋值。</p>\n<p>同时也要注意 = 根据使用场景既可作赋值操作符，也可作比较操作符。</p>\n</blockquote>\n<p>样例 4-2. 变量赋值</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 非引用形式变量</span>\n\n<span>echo</span>\n\n<span># 什么时候变量是非引用形式，即变量名前没有 '$' 符号的呢？</span>\n<span># 当变量在被赋值而不是被引用时。</span>\n\n<span># 赋值</span>\n<span>a</span><span>=</span><span>879</span>\n<span>echo</span> <span>\"The value of <span title=\"\\&quot;\">\\\"</span>a<span title=\"\\&quot;\">\\\"</span> is <span>$a</span>.\"</span>\n\n<span># 使用 'let' 进行赋值</span>\n<span>let</span> <span>a</span><span>=</span><span>16</span>+5\n<span>echo</span> <span>\"The value of <span title=\"\\&quot;\">\\\"</span>a<span title=\"\\&quot;\">\\\"</span> is now <span>$a</span>.\"</span>\n\n<span>echo</span>\n\n<span># 在 'for' 循环中赋值（隐式赋值）</span>\n<span>echo</span> -n <span>\"Values of <span title=\"\\&quot;\">\\\"</span>a<span title=\"\\&quot;\">\\\"</span> in the loop are: \"</span>\n<span>for</span> <span>a</span> <span>in</span> <span>7</span> <span>8</span> <span>9</span> <span>11</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$a</span> \"</span>\n<span>done</span>\n\n<span>echo</span>\n<span>echo</span>\n\n<span># 在 'read' 表达式中（另一种赋值形式）</span>\n<span>echo</span> -n <span>\"Enter <span title=\"\\&quot;\">\\\"</span>a<span title=\"\\&quot;\">\\\"</span> \"</span>\n<span>read</span> a\n<span>echo</span> <span>\"The value of <span title=\"\\&quot;\">\\\"</span>a<span title=\"\\&quot;\">\\\"</span> is now <span>$a</span>.\"</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>样例 4-3. 奇妙的变量赋值</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>a</span><span>=</span><span>23</span>              <span># 简单形式</span>\n<span>echo</span> <span>$a</span>\n<span>b</span><span>=</span><span>$a</span>\n<span>echo</span> <span>$b</span>\n\n<span># 来我们玩点炫的（命令替换）。</span>\n\n<span>a</span><span>=</span><span><span>`</span><span>echo</span> Hello<span>!</span><span>`</span></span>   <span># 将 'echo' 命令的结果赋值给 'a'</span>\n<span>echo</span> <span>$a</span>\n<span>#  注意在命令替换结构中包含感叹号(!)在命令行中使用将会失效，</span>\n<span>#+ 因为它将会触发 Bash 的历史(history)机制。</span>\n<span>#  在shell脚本内，Bash 的历史机制默认关闭。</span>\n\n<span>a</span><span>=</span><span><span>`</span><span>ls</span> -l<span>`</span></span>         <span># 将 'ls -l' 命令的结果赋值给 'a'</span>\n<span>echo</span> <span>$a</span>           <span># 不带引号引用，将会移除所有的制表符与分行符</span>\n<span>echo</span>\n<span>echo</span> <span>\"<span>$a</span>\"</span>         <span># 引号引用变量将会保留空白符</span>\n                  <span># 查看 \"引用\" 章节。</span>\n                  \n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>使用 <code>$(...)</code> 形式进行赋值（与反引号不同的新形式），与命令替换形式相似。</p>\n<div><pre><code><span># 摘自 /etc/rc.d/rc.local</span>\n<span>R</span><span>=</span><span><span>$(</span><span>cat</span> /etc/redhat-release<span>)</span></span>\n<span>arch</span><span>=</span><span><span>$(</span><span>uname</span> -m<span>)</span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "4.3 Bash变量是弱类型的",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_3_bash_variables_are_untyped/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_3_bash_variables_are_untyped/",
      "content_html": "<h1 id=\"_4-3-bash变量是弱类型的\"> 4.3 Bash变量是弱类型的</h1>\n<p>不同于许多其他编程语言，Bash 并不区分变量的类型。本质上说，<em>Bash 变量是字符串</em>，但在某些情况下，Bash 允许对变量进行算术运算和比较。决定因素则是变量值是否只含有数字。</p>\n<p>样例 4-4. 整数还是字符串？</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># int-or-string.sh</span>\n\n<span>a</span><span>=</span><span>2334</span>                   <span># 整数。</span>\n<span>let</span> <span>\"a += 1\"</span>\n<span>echo</span> <span>\"a = <span>$a</span> \"</span>           <span># a = 2335</span>\n<span>echo</span>                     <span># 依旧是整数。</span>\n\n\n<span>b</span><span>=</span><span>${a<span>/</span>23<span>/</span>BB}</span>             <span># 将 \"23\" 替换为 \"BB\"。</span>\n                         <span># $b 变成了字符串。</span>\n<span>echo</span> <span>\"b = <span>$b</span>\"</span>            <span># b = BB35</span>\n<span>declare</span> -i b             <span># 将其声明为整数并没有什么卵用。</span>\n<span>echo</span> <span>\"b = <span>$b</span>\"</span>            <span># b = BB35</span>\n\n<span>let</span> <span>\"b += 1\"</span>             <span># BB35 + 1</span>\n<span>echo</span> <span>\"b = <span>$b</span>\"</span>            <span># b = 1</span>\n<span>echo</span>                     <span># Bash 认为字符串的\"整数值\"为0。</span>\n\n<span>c</span><span>=</span>BB34\n<span>echo</span> <span>\"c = <span>$c</span>\"</span>            <span># c = BB34</span>\n<span>d</span><span>=</span><span>${c<span>/</span>BB<span>/</span>23}</span>             <span># 将 \"BB\" 替换为 \"23\"。</span>\n                         <span># $d 变为了一个整数。</span>\n<span>echo</span> <span>\"d = <span>$d</span>\"</span>            <span># d = 2334</span>\n<span>let</span> <span>\"d += 1\"</span>             <span># 2334 + 1</span>\n<span>echo</span> <span>\"d = <span>$d</span>\"</span>            <span># d = 2335</span>\n<span>echo</span>\n\n\n<span># 如果是空值会怎样呢？</span>\n<span>e</span><span>=</span><span>''</span>                     <span># ...也可以是 e=\"\" 或 e=</span>\n<span>echo</span> <span>\"e = <span>$e</span>\"</span>            <span># e =</span>\n<span>let</span> <span>\"e += 1\"</span>             <span># 空值是否允许进行算术运算？</span>\n<span>echo</span> <span>\"e = <span>$e</span>\"</span>            <span># e = 1</span>\n<span>echo</span>                     <span># 空值变为了一个整数。</span>\n\n<span># 如果时未声明的变量呢？</span>\n<span>echo</span> <span>\"f = <span>$f</span>\"</span>            <span># f =</span>\n<span>let</span> <span>\"f += 1\"</span>             <span># 是否允许进行算术运算？</span>\n<span>echo</span> <span>\"f = <span>$f</span>\"</span>            <span># f = 1</span>\n<span>echo</span>                     <span># 未声明变量变为了一个整数。</span>\n<span>#</span>\n<span># 然而……</span>\n<span>let</span> <span>\"f /= <span>$undecl_var</span>\"</span>   <span># 可以除以0么？</span>\n<span>#   let: f /= : syntax error: operand expected (error token is \" \")</span>\n<span># 语法错误！在这里 $undecl_var 并没有被设置为0！</span>\n<span>#</span>\n<span># 但是，仍旧……</span>\n<span>let</span> <span>\"f /= 0\"</span>\n<span>#   let: f /= 0: division by 0 (error token is \"0\")</span>\n<span># 预期之中。</span>\n\n\n<span># 在执行算术运算时，Bash 通常将其空值的整数值设为0。</span>\n<span># 但是不要做这种事情！</span>\n<span># 因为这可能会导致一些意外的后果。</span>\n\n\n<span># 结论：上面的结果都表明 Bash 中的变量是弱类型的。</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div><p>弱类型变量有利有弊。它可以使编程更加灵活、更加容易（给与你足够的想象空间）。但它也同样的容易造成一些小错误，容易养成粗心大意的编程习惯。</p>\n<p>为了减轻脚本持续跟踪变量类型的负担，Bash <em>不允许</em>变量声明。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "4.4 特殊的变量类型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_4_special_variable_types/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_4_special_variable_types/",
      "content_html": "<h1 id=\"_4-4-特殊的变量类型\"> 4.4 特殊的变量类型</h1>\n<h3 id=\"局部变量\"> 局部变量</h3>\n<p>仅在代码块或函数中才可见的变量（参考函数章节的局部变量部分）。</p>\n<h3 id=\"环境变量\"> 环境变量</h3>\n<p>会影响用户及shell行为的变量。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 一般情况下，每一个进程都有自己的“环境”（environment），也就是一组该进程可以访问到的变量。从这个意义上来说，shell表现出与其他进程一样的行为。</p>\n<p>每当shell启动时，都会创建出与其环境对应的shell环境变量。改变或增加shell环境变量会使shell更新其自身的环境。<em>子进程</em>（由父进程执行产生）会继承<em>父进程</em>的环境变量。</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 分配给环境变量的空间是有限的。创建过多环境变量或占用空间过大的环境变量有可能会造成问题。</p>\n</blockquote>\n<div><pre><code>bash$ eval &quot;`seq 10000 | sed -e &#39;s/.*/export var&amp;=ZZZZZZZZZZZZZZ/&#39;`&quot;\n&gt;\nbash$ du\nbash: /usr/bin/du: Argument list too long\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>注意，上面的&quot;错误&quot;已经在Linux内核版本号为2.6.23的系统中修复了。</p>\n<p>（感谢 Stéphane Chazelas 对此问题的解释并提供了上面的例子。）</p>\n</blockquote>\n<p>如果在脚本中设置了环境变量，那么这些环境变量需要被“导出”，也就是通知脚本所在的<em>环境</em>做出相应的更新。这个“导出”操作就是 <code>export</code> 命令。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 脚本只能将变量导出到子进程，即在这个脚本中所调用的命令或程序。在命令行中调用的脚本不能够将变量回传给命令行环境，即<em>子进程不能将变量回传给父进程</em>。</p>\n<p><strong>定义：</strong> 子进程（child process）是由另一个进程，即其父进程（parent process）所启动的子程序。</p>\n</blockquote>\n<h3 id=\"位置参数\"> 位置参数</h3>\n<p>从命令行中传递给脚本的参数<sup></sup>：<code>$0, $1, $2, $3 ...</code>\n即<strong>命令行参数</strong>。</p>\n<p><code>$0</code> 代表脚本名称，<code>$1</code> 代表第一个参数，<code>$2</code> 代表第二个，<code>$3</code> 代表第三个，以此类推<sup></sup>。在 <code>$9</code> 之后的参数必须被包含在大括号中，如 <code>${10}, ${11}, ${12}</code>。</p>\n<p>特殊变量 <code>$*</code> 与 <code>$@</code> 代表所有位置参数。</p>\n<p>样例 4-5. 位置参数</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span># 调用脚本时使用至少10个参数，例如</span>\n<span># ./scriptname 1 2 3 4 5 6 7 8 9 10</span>\n<span>MINPARAMS</span><span>=</span><span>10</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"The name of this script is <span title=\"\\&quot;\">\\\"</span><span>$0</span><span title=\"\\&quot;\">\\\"</span>.\"</span>\n<span># 附带 ./ 代表当前目录</span>\n<span>echo</span> <span>\"The name of this script is <span title=\"\\&quot;\">\\\"</span><span><span>`</span><span>basename</span> $0<span>`</span></span><span title=\"\\&quot;\">\\\"</span>.\"</span>\n<span># 除去路径信息（查看 'basename'）</span>\n\n<span>echo</span>\n\n<span>if</span> <span>[</span> -n <span>\"<span>$1</span>\"</span> <span>]</span>              <span># 测试变量是否存在</span>\n<span>then</span>\n <span>echo</span> <span>\"Parameter #1 is <span>$1</span>\"</span>  <span># 使用引号转义#</span>\n<span>fi</span>\n\n<span>if</span> <span>[</span> -n <span>\"<span>$2</span>\"</span> <span>]</span>\n<span>then</span>\n <span>echo</span> <span>\"Parameter #2 is <span>$2</span>\"</span>\n<span>fi</span>\n\n<span>if</span> <span>[</span> -n <span>\"<span>$3</span>\"</span> <span>]</span>\n<span>then</span>\n <span>echo</span> <span>\"Parameter #3 is <span>$3</span>\"</span>\n<span>fi</span>\n\n<span># ...</span>\n\n<span>if</span> <span>[</span> -n <span>\"<span>${10}</span>\"</span> <span>]</span>  <span># 大于 $9 的参数必须被放在大括号中</span>\n<span>then</span>\n <span>echo</span> <span>\"Parameter #10 is <span>${10}</span>\"</span>\n<span>fi</span>\n\n<span>echo</span> <span>\"-----------------------------------\"</span>\n<span>echo</span> <span>\"All the command-line parameters are: \"</span><span>$*</span><span>\"\"</span>\n\n<span>if</span> <span>[</span> <span>$#</span> -lt <span>\"<span>$MINPARAMS</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"This script needs at least <span>$MINPARAMS</span> command-line arguments!\"</span>\n<span>fi</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><p>在位置参数中使用大括号助记符提供了一种非常简单的方式来访问传入脚本的最后一个参数。在其中会使用到间接引用。</p>\n<div><pre><code><span>args</span><span>=</span><span>$#</span>           <span># 传入参数的个数</span>\n<span>lastarg</span><span>=</span><span>${<span>!</span>args}</span>\n<span># 这是 $args 的一种间接引用方式</span>\n\n<span># 也可以使用:       lastarg=${!#}             (感谢 Chris Monson.)</span>\n<span># 这是 $# 的一种间接引用方式。</span>\n<span># 注意 lastarg=${!$#} 是无效的。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>一些脚本能够根据调用时文件名的不同来执行不同的操作。要达到这样的效果，脚本需要检测 <code>$0</code>，也就是调用时的文件名<sup></sup>。同时，也必须存在指向这个脚本所有别名的符号链接文件（symbolic links）。详情查看样例 16-2。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/tip.gif\" alt=\"info\"> 如果一个脚本需要一个命令行参数但是在调用的时候却没有传入，那么这将会造成一个空变量赋值。这通常不是我们想要的。一种避免的方法是，在使用期望的位置参数时候，在赋值语句两侧添加一个额外的字符。</p>\n</blockquote>\n<div><pre><code><span>variable1_</span><span>=</span><span>$1_</span>  <span># 而不是 variable1=$1</span>\n<span># 使用这种方法可以在没有位置参数的情况下避免产生错误。</span>\n\n<span>critical_argument01</span><span>=</span><span>$variable1_</span>\n\n<span># 多余的字符可以被去掉，就像下面这样：</span>\n<span>variable1</span><span>=</span><span>${variable1_<span>/</span>_<span>/</span>}</span>\n<span># 仅仅当 $variable1_ 是以下划线开头时候才会有一些副作用。</span>\n<span># 这里使用了我们稍后会介绍的参数替换模板中的一种。</span>\n<span># （将替换模式设为空等价于删除。）</span>\n\n<span># 更直接的处理方法就是先检测预期的位置参数是否被传入。</span>\n<span>if</span> <span>[</span> -z <span>$1</span> <span>]</span>\n<span>then</span>\n  <span>exit</span> <span>$E_MISSING_POS_PARAM</span>\n<span>fi</span>\n\n\n<span>#  但是，正如 Fabin Kreutz 指出的，</span>\n<span>#+ 上面的方法会有一些意想不到的副作用。</span>\n<span>#  更好的方法是使用参数替换：</span>\n<span>#         ${1:-$DefaultVal}</span>\n<span>#  详情查看第十章“操作变量”的第二节“变量替换”。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>样例 4-6. <em>wh</em>, <em>whois</em> 域名查询</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># ex18.sh</span>\n\n<span># 在下面三个可选的服务器中进行 whois 域名查询：</span>\n<span># ripe.net, cw.net, radb.net</span>\n\n<span># 将这个脚本重命名为 'wh' 后放在 /usr/local/bin 目录下</span>\n\n<span># 这个脚本需要进行符号链接：</span>\n<span># ln -s /usr/local/bin/wh /usr/local/bin/wh-ripe</span>\n<span># ln -s /usr/local/bin/wh /usr/local/bin/wh-apnic</span>\n<span># ln -s /usr/local/bin/wh /usr/local/bin/wh-tucows</span>\n\n<span>E_NOARGS</span><span>=</span><span>75</span>\n\n\n<span>if</span> <span>[</span> -z <span>\"<span>$1</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> [domain-name]\"</span>\n  <span>exit</span> <span>$E_NOARGS</span>\n<span>fi</span>\n\n<span># 检查脚本名，访问对应服务器进行查询。</span>\n<span>case</span> <span><span>`</span><span>basename</span> $0<span>`</span></span> <span>in</span>    <span># 也可以写:    case ${0##*/} in</span>\n    <span>\"wh\"</span>       <span>)</span> whois <span>$1</span>@whois.tucows.com<span>;</span><span>;</span>\n    <span>\"wh-ripe\"</span>  <span>)</span> whois <span>$1</span>@whois.ripe.net<span>;</span><span>;</span>\n    <span>\"wh-apnic\"</span> <span>)</span> whois <span>$1</span>@whois.apnic.net<span>;</span><span>;</span>\n    <span>\"wh-cw\"</span>    <span>)</span> whois <span>$1</span>@whois.cw.net<span>;</span><span>;</span>\n    *          <span>)</span> <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> [domain-name]\"</span><span>;</span><span>;</span>\n<span>esac</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>使用 <code>shift</code> 命令可以将全体位置参数向左移一位, 重新赋值。</p>\n<p><code>$1 &lt;--- $2</code>, <code>$2 &lt;--- $3</code>, <code>$3 &lt;--- $4</code>，以此类推。</p>\n<p>原先的 <code>$1</code> 将会消失，而 <code>$0</code>（脚本名称）不会有任何改变。如果你在脚本中使用了大量的位置参数，<code>shift</code> 可以让你不使用{大括号}助记法也可以访问超过10个的位置参数。</p>\n<p>样例 4-7. 使用 <code>shift</code> 命令</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># shft.sh: 使用 `shift` 命令步进访问所有的位置参数。</span>\n\n<span># 将这个脚本命名为 shft.sh，然后在调用时跟上一些参数。</span>\n<span># 例如：</span>\n<span>#    sh shft.sh a b c def 83 barndoor</span>\n\n<span>until</span> <span>[</span> -z <span>\"<span>$1</span>\"</span> <span>]</span>  <span># 直到访问完所有的参数</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$1</span> \"</span>\n  <span>shift</span>\n<span>done</span>\n\n<span>echo</span>               <span># 换行。</span>\n\n<span># 那些被访问完的参数又会怎样呢？</span>\n<span>echo</span> <span>\"<span>$2</span>\"</span>\n<span># 什么都不会被打印出来。</span>\n<span># 当 $2 被移动到 $1 且没有 $3 时，$2 将会保持空。</span>\n<span># 因此 shift 是移动参数而非复制参数。</span>\n\n<span>exit</span>\n\n<span>#  可以参考 echo-params.sh 脚本，在不使用 shift 命令的情况下，</span>\n<span>#+ 步进访问所有位置参数。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p><code>shift</code> 命令也可以带一个参数来指明一次移动多少位。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># shift-past.sh</span>\n\n<span>shift</span> <span>3</span>    <span># 移动3位。</span>\n<span># 与 n=3; shift $n 效果相同。</span>\n\n<span>echo</span> <span>\"<span>$1</span>\"</span>\n\n<span>exit</span> <span>0</span>\n\n<span># ======================== #</span>\n\n\n$ <span>sh</span> shift-past.sh <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span>\n<span>4</span>\n\n<span>#  但是就像 Eleni Fragkiadaki 指出的那样，</span>\n<span>#  如果尝试将位置参数（$#）传给 'shift'，</span>\n<span>#  将会导致脚本错误的结束，同时位置参数也不会发送改变。</span>\n<span>#  这也许是因为陷入了一个死循环...</span>\n<span>#  比如：</span>\n<span>#      until [ -z \"$1\" ]</span>\n<span>#      do</span>\n<span>#         echo -n \"$1 \"</span>\n<span>#         shift 20    #  如果少于20个位置参数，</span>\n<span>#      done           #+ 那么循环将永远不会结束。</span>\n<span>#</span>\n<span>#  当你不确定是否有这么多的参数时，你可以加入一个测试：</span>\n<span>#      shift 20 || break</span>\n<span>#               ^^^^^^^^</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 使用 <code>shift</code> 命令同给函数传参相类似。详情查看样例 36-18。</p>\n</blockquote>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>函数同样也可以接受与使用位置参数。 </p>\n</li>\n<li id=\"fn2\"><p>是调用脚本的进程设置了 $0 参数。就是脚本的文件名。详情可以查看 <code>execv</code> 的使用手册。<br>在命令行中，<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span>0</span><span>是</span><span>s</span><span>h</span><span>e</span><span style=\"margin-right:0.01968em;\">ll</span><span>的名称。</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&lt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span>p</span><span>re</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>&gt;</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>ba</span><span>s</span><span>h</span></span></span></span> echo $0<br>bash<br><br>tcsh% echo $0<br>tcsh</pre> </p>\n</li>\n<li id=\"fn3\"><p>如果脚本被引用（sourced）执行或者被链接（symlinked）执行时会失效。安全的方法是检测变量 <code>$BASH_Source</code>。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/note.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第四章 变量与参数",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_introduction_to_variables_and_parameters/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/04_introduction_to_variables_and_parameters/",
      "content_html": "<h1 id=\"第四章-变量与参数\"> 第四章 变量与参数</h1>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./04_1_variable_substitution.html\">4.1 变量替换</a></li>\n<li><a href=\"./04_2_variable_assignment.html\">4.2 变量赋值</a></li>\n<li><a href=\"./04_3_bash_variables_are_untyped.html\">4.3 Bash变量弱类型</a></li>\n<li><a href=\"./04_4_special_variable_types.html\">4.4 特殊变量类型</a></li>\n</ul>\n<p>变量（variable）在编程语言中用来表示数据。它本身只是一个标记，指向数据在计算机内存中的一个或一组地址。</p>\n<p>变量通常出现在算术运算，数量操作及字符串解析中。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "5.1 引用变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/05_1_quoting_variables/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/05_1_quoting_variables/",
      "content_html": "<h1 id=\"_5-1-引用变量\"> 5.1 引用变量</h1>\n<p>引用变量时，通常建议将变量包含在双引号中。因为这样可以防止除 <code>$</code>，<code>`</code>（反引号）和<code>\\</code>（转义符）之外的其他特殊字符被重新解释。<sup></sup>在双引号中仍然可以使用<code>$</code>引用变量（<code>&quot;$variable&quot;</code>），也就是将变量名替换为变量值（详情查看样例 4-1）。</p>\n<p>使用双引号可以防止字符串被分割。<sup></sup>即使参数中拥有很多空白分隔符，被包在双引号中后依旧是算作单一字符。</p>\n<div><pre><code><span>List</span><span>=</span><span>\"one two three\"</span>\n\n<span>for</span> <span>a</span> <span>in</span> <span>$List</span>     <span># 空白符将变量分成几个部分。</span>\n<span>do</span>\n  <span>echo</span> <span>\"<span>$a</span>\"</span>\n<span>done</span>\n<span># one</span>\n<span># two</span>\n<span># three</span>\n\n<span>echo</span> <span>\"---\"</span>\n\n<span>for</span> <span>a</span> <span>in</span> <span>\"<span>$List</span>\"</span>   <span># 在单一变量中保留所有空格。</span>\n<span>do</span> <span>#     ^     ^</span>\n  <span>echo</span> <span>\"<span>$a</span>\"</span>\n<span>done</span>\n<span># one two three</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>下面是一个更加复杂的例子：</p>\n<div><pre><code><span>variable1</span><span>=</span><span>\"a variable containing five words\"</span>\nCOMMAND This is <span>$variable1</span>    <span># 带上7个参数执行COMMAND命令：</span>\n<span># \"This\" \"is\" \"a\" \"variable\" \"containing\" \"five\" \"words\"</span>\n\nCOMMAND <span>\"This is <span>$variable1</span>\"</span>  <span># 带上1个参数执行COMMAND命令：</span>\n<span># \"This is a variable containing five words\"</span>\n\n\n<span>variable2</span><span>=</span><span>\"\"</span>    <span># 空值。</span>\n\nCOMMAND  <span>$variable2</span> <span>$variable2</span> <span>$variable2</span>\n                <span># 不带参数执行COMMAND命令。</span>\nCOMMAND <span>\"<span>$variable2</span>\"</span> <span>\"<span>$variable2</span>\"</span> <span>\"<span>$variable2</span>\"</span>\n                <span># 带上3个参数执行COMMAND命令。</span>\nCOMMAND <span>\"<span>$variable2</span> <span>$variable2</span> <span>$variable2</span>\"</span>\n                <span># 带上1个参数执行COMMAND命令（2空格）。</span>\n\n<span># 感谢 Stéphane Chazelas。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/tip.gif\" alt=\"info\"> 当字符分割或者保留空白符出现问题时，才需要在<code>echo</code>语句中用双引号包住参数。</p>\n</blockquote>\n<p>样例 5-1. 输出一些奇怪的变量</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># weirdvars.sh: 输出一些奇怪的变量</span>\n\n<span>echo</span>\n\n<span>var</span><span>=</span><span>\"'(]<span title=\"\\\\\">\\\\</span>{}\\$<span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>echo</span> <span>$var</span>        <span># '(]\\{}$\"</span>\n<span>echo</span> <span>\"<span>$var</span>\"</span>      <span># '(]\\{}$\"     没有任何区别。</span>\n\n<span>echo</span>\n\n<span><span>IFS</span></span><span>=</span><span>'\\'\necho <span>$var</span>        # '</span><span>(</span><span>]</span> <span>{</span><span>}</span>$<span>\"     \\ 被转换成了空格，为什么？\necho \"</span><span>$var</span><span>\"      # '(]\\{}$\"</span>\n\n<span># 上面的例子由 Stephane Chazelas 提供。</span>\n\n<span>echo</span>\n\n<span>var2</span><span>=</span><span>\"<span title=\"\\\\\">\\\\</span><span title=\"\\\\\">\\\\</span><span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>echo</span> <span>$var2</span>       <span>#   \"</span>\n<span>echo</span> <span>\"<span>$var2</span>\"</span>     <span># \\\\\"</span>\n<span>echo</span>\n<span># 但是...var2=\"\\\\\\\\\"\" 不是合法的语句，为什么？</span>\n<span>var3</span><span>=</span><span>'<span title=\"\\\\\">\\\\</span><span title=\"\\\\\">\\\\</span>'</span>\n<span>echo</span> <span>\"<span>$var3</span>\"</span>     <span># \\\\\\\\</span>\n<span># 强引用是可以的。</span>\n\n\n<span># ************************************************************ #</span>\n<span># 就像第一个例子展示的那样，嵌套引用是允许的。</span>\n\n<span>echo</span> <span>\"<span><span>$(</span><span>echo</span> <span>'\"'</span><span>)</span></span>\"</span>           <span># \"</span>\n<span>#    ^           ^</span>\n\n\n<span># 在有些时候这种方法非常有用。</span>\n\n<span>var1</span><span>=</span><span>\"Two bits\"</span>\n<span>echo</span> <span>\"\\<span>$var1</span> = \"</span><span>$var1</span><span>\"\"</span>      <span># $var1 = Two bits</span>\n<span>#    ^                ^</span>\n\n<span># 或者，可以像 Chris Hiestand 指出的那样：</span>\n\n<span>if</span> <span>[</span><span>[</span> <span>\"<span><span>$(</span><span>du</span> <span>\"<span>$My_File1</span>\"</span><span>)</span></span>\"</span> -gt <span>\"<span><span>$(</span><span>du</span> <span>\"<span>$My_File2</span>\"</span><span>)</span></span>\"</span> <span>]</span><span>]</span>\n<span>#     ^     ^         ^ ^     ^     ^         ^ ^</span>\n<span>then</span>\n  <span>..</span>.\n<span>fi</span>\n<span># ************************************************************ #</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><p>单引号（' '）与双引号类似，但是在单引号中不能引用变量，因为 <code>$</code> 不再具有特殊含义。在单引号中，除<code>'</code>之外的所有特殊字符都将会被直接按照字面意思解释。可以认为单引号（“全引用”）是双引号（“部分引用”）的一种更严格的形式。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 因为在单引号中转义符（\\）都已经按照字面意思解释了，因此尝试在单引号中包含单引号将不会产生你所预期的结果。</p>\n</blockquote>\n<div><pre><code><span>echo</span> <span>\"Why can't I write 's between single quotes\"</span>\n<span>></span>\n<span>echo</span>\n<span>></span>\n<span># 可以采取迂回的方式。</span>\n<span>echo</span> <span>'Why can'</span><span>\\</span>'<span>'t I write '</span>\"<span>'\"'</span>s between single quotes'\n<span>#    |-------|  |----------|   |-----------------------|</span>\n<span># 由三个单引号引用的字符串，再加上转义以及双引号包住的单引号组成。</span>\n<span>></span>\n<span># 感谢 Stéphane Chazelas 提供的例子。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>在命令行里，如果双引号包含了 &quot;!&quot; 将会产生错误。这是因为shell将其解释为查看历史命令。而在脚本中，因为历史机制已经被关闭，所以不会产生这个问题。<br>我们更加需要注意的是在双引号中 <code>\\</code> 的反常行为，尤其是在使用 <code>echo -e</code> 命令时。<br><pre>bash$ echo hello\\!<br>hello!<br>bash$ echo &quot;hello\\!&quot;<br>hello\\!<br><br><br>bash$ echo \\<br>&gt;<br>bash$ echo &quot;\\&quot;<br>&gt;<br>bash$ echo \\a<br>a<br>bash$ echo &quot;\\a&quot;<br>\\a<br><br><br>bash$ echo x\\ty<br>xty<br>bash$ echo &quot;x\\ty&quot;<br>x\\ty<br><br>bash$ echo -e x\\ty<br>xty<br>bash$ echo -e &quot;x\\ty&quot;<br>x       y</pre>在 <code>echo</code> 后的双引号中一般会转义 <code>\\</code>。并且 <code>echo -e</code> 会将 <code>&quot;\\t&quot;</code> 解释成制表符。<br>（感谢 Wayne Pollock 提出这些；感谢Geoff Lee 与 Daniel Barclay 对此做出的解释。） </p>\n</li>\n<li id=\"fn2\"><p>字符分割（word splitting）在本文中的意思是指将一个字符串分割成独立的、离散的变量。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/tip.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "5.2 转义",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/05_2_escaping/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/05_2_escaping/",
      "content_html": "<h1 id=\"_5-2-转义\"> 5.2 转义</h1>\n<p>转义是一种引用单字符的方法。通过在特殊字符前加上转义符 <code>\\</code> 来告诉shell按照字面意思去解释这个字符。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 需要注意的是，在一些特定的命令和工具，比如 <code>echo</code> 和 <code>sed</code> 中，转义字符通常会起到相反的效果，即可能会使得那些字符产生特殊含义。</p>\n</blockquote>\n<p>在 <code>echo</code> 与 <code>sed</code> 命令中，转义字符的特殊含义</p>\n<h3 id=\"n\"> \\n</h3>\n<p>换行（line feed）。</p>\n<h3 id=\"r\"> \\r</h3>\n<p>回车（carriage return）。</p>\n<h3 id=\"t\"> \\t</h3>\n<p>水平制表符。</p>\n<h3 id=\"v\"> \\v</h3>\n<p>垂直制表符。</p>\n<h3 id=\"b\"> \\b</h3>\n<p>退格。</p>\n<h3 id=\"a\"> \\a</h3>\n<p>警报、响铃或闪烁。</p>\n<h3 id=\"_0xx\"> \\0xx</h3>\n<p>ASCII码的八进制形式，等价于 <code>0nn</code>，其中 <code>nn</code> 是数字。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/important.gif\" alt=\"important\"> 在 <code>$' ... '</code> 字符串扩展结构中可以通过转义八进制或十六进制的ASCII码形式给变量赋值，比如 <code>quote=$'\\042'</code>。</p>\n</blockquote>\n<p>样例 5-2. 转义字符</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># escaped.sh: 转义字符</span>\n\n<span>##############################################</span>\n<span>### 首先让我们先看一下转义字符的基本用法。 ###</span>\n<span>##############################################</span>\n\n<span># 转义新的一行。</span>\n<span># ------------</span>\n\n<span>echo</span> <span>\"\"</span>\n\n<span>echo</span> <span>\"This will print\nas two lines.\"</span>\n<span># This will print</span>\n<span># as two lines.</span>\n\n<span>echo</span> <span>\"This will print \\\nas one line.\"</span>\n<span># This will print as one line.</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>echo</span> <span>\"=============\"</span>\n\n\n<span>echo</span> <span>\"<span title=\"\\v\">\\v</span><span title=\"\\v\">\\v</span><span title=\"\\v\">\\v</span><span title=\"\\v\">\\v</span>\"</span>      <span># 按字面意思打印 \\v\\v\\v\\v</span>\n<span># 使用 echo 命令的 -e 选项来打印转义字符。</span>\n<span>echo</span> <span>\"=============\"</span>\n<span>echo</span> <span>\"VERTICAL TABS\"</span>\n<span>echo</span> -e <span>\"<span title=\"\\v\">\\v</span><span title=\"\\v\">\\v</span><span title=\"\\v\">\\v</span><span title=\"\\v\">\\v</span>\"</span>   <span># 打印四个垂直制表符。</span>\n<span>echo</span> <span>\"==============\"</span>\n\n<span>echo</span> <span>\"QUOTATION MARK\"</span>\n<span>echo</span> -e <span>\"<span title=\"\\042\">\\042</span>\"</span>       <span># 打印 \" （引号，八进制ASCII码为42）。</span>\n<span>echo</span> <span>\"==============\"</span>\n\n\n\n<span># 使用 $'\\X' 这样的形式后可以不需要加 -e 选项。</span>\n\n<span>echo</span><span>;</span> <span>echo</span> <span>\"NEWLINE and (maybe) BEEP\"</span>\n<span>echo</span> $<span>'<span title=\"\\n\">\\n</span>'</span>           <span># 新的一行。</span>\n<span>echo</span> $<span>'<span title=\"\\a\">\\a</span>'</span>           <span># 警报（响铃）。</span>\n                     <span># 根据不同的终端版本，也可能是闪屏。</span>\n\n<span># 我们之前介绍了 $'\\nnn' 字符串扩展，而现在我们要看到的是...</span>\n\n<span># ============================================ #</span>\n<span># 自 Bash 第二个版本开始的 $'\\nnn' 字符串扩展结构。</span>\n<span># ============================================ #</span>\n\n<span>echo</span> <span>\"Introducing the \\$\\' ... \\' string-expansion construct . . . \"</span>\n<span>echo</span> <span>\". . . featuring more quotation marks.\"</span>\n\n<span>echo</span> $<span>'<span title=\"\\t\">\\t</span> <span title=\"\\042\">\\042</span> <span title=\"\\t\">\\t</span>'</span>   <span># 在制表符之间的引号。</span>\n<span># 需要注意的是 '\\nnn' 是一个八进制的值。</span>\n\n<span># 字符串扩展同样适用于十六进制的值，格式是 $'\\xhhh'。</span>\n<span>echo</span> $<span>'<span title=\"\\t\">\\t</span> <span title=\"\\x22\">\\x22</span> <span title=\"\\t\">\\t</span>'</span>  <span># 在制表符之间的引号。</span>\n<span># 感谢 Greg Keraunen 指出这些。</span>\n<span># 在早期的 Bash 版本中允许使用 '\\x022' 这样的形式。</span>\n\n<span>echo</span>\n\n\n<span># 将 ASCII 码字符赋值给变量。</span>\n<span># -----------------------</span>\n<span>quote</span><span>=</span>$<span>'<span title=\"\\042\">\\042</span>'</span>        <span># 将 \" 赋值给变量。</span>\n<span>echo</span> <span>\"<span>$quote</span> Quoted string <span>$quote</span> and this lies outside the quotes.\"</span>\n\n<span>echo</span>\n\n<span># 连接多个 ASCII 码字符给变量。</span>\n<span>triple_underline</span><span>=</span>$<span>'<span title=\"\\137\">\\137</span><span title=\"\\137\">\\137</span><span title=\"\\137\">\\137</span>'</span>  <span># 137是 '_' ASCII码的八进制形式</span>\n<span>echo</span> <span>\"<span>$triple_underline</span> UNDERLINE <span>$triple_underline</span>\"</span>\n\n<span>echo</span>\n\n<span>ABC</span><span>=</span>$<span>'<span title=\"\\101\">\\101</span><span title=\"\\102\">\\102</span><span title=\"\\103\">\\103</span><span title=\"\\010\">\\010</span>'</span>           <span># 101，102，103是 A, B, C </span>\n                                  <span># ASCII码的八进制形式。</span>\n<span>echo</span> <span>$ABC</span>\n\n<span>echo</span>\n\n<span>escape</span><span>=</span>$<span>'<span title=\"\\033\">\\033</span>'</span>                    <span># 033 是 ESC 的八进制形式</span>\n<span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span>escape<span title=\"\\&quot;\">\\\"</span> echoes an <span>$escape</span>\"</span>\n                                  <span># 没有可见输出</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br></div></div><p>下面是一个更加复杂的例子：</p>\n<p>样例 5-3. 检测键盘输入</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 作者：Sigurd Solaas，作于2011年4月20日</span>\n<span># 授权在《高级Bash脚本编程指南》中使用。</span>\n<span># 需要 Bash 版本高于4.2。</span>\n\n<span>key</span><span>=</span><span>\"no value yet\"</span>\n<span>while</span> <span>true</span><span>;</span> <span>do</span>\n  <span>clear</span>\n  <span>echo</span> <span>\"Bash Extra Keys Demo. Keys to try:\"</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"* Insert, Delete, Home, End, Page_Up and Page_Down\"</span>\n  <span>echo</span> <span>\"* The four arrow keys\"</span>\n  <span>echo</span> <span>\"* Tab, enter, escape, and space key\"</span>\n  <span>echo</span> <span>\"* The letter and number keys, etc.\"</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"    d = show date/time\"</span>\n  <span>echo</span> <span>\"    q = quit\"</span>\n  <span>echo</span> <span>\"================================\"</span>\n  <span>echo</span>\n  \n  <span># 将独立的Home键值转换为数字7上的Home键值：</span>\n  <span>if</span> <span>[</span> <span>\"<span>$key</span>\"</span> <span>=</span> $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x4f\">\\x4f</span><span title=\"\\x48\">\\x48</span>'</span> <span>]</span><span>;</span> <span>then</span>\n   <span>key</span><span>=</span>$<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x31\">\\x31</span><span title=\"\\x7e\">\\x7e</span>'</span>\n   <span>#   引用字符扩展结构。</span>\n  <span>fi</span>\n  \n  <span># 将独立的End键值转换为数字1上的End键值：</span>\n  <span>if</span> <span>[</span> <span>\"<span>$key</span>\"</span> <span>=</span> $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x4f\">\\x4f</span><span title=\"\\x46\">\\x46</span>'</span> <span>]</span><span>;</span> <span>then</span>\n   <span>key</span><span>=</span>$<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x34\">\\x34</span><span title=\"\\x7e\">\\x7e</span>'</span>\n  <span>fi</span>\n  \n  <span>case</span> <span>\"<span>$key</span>\"</span> <span>in</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x32\">\\x32</span><span title=\"\\x7e\">\\x7e</span>'</span><span>)</span>  <span># 插入</span>\n    <span>echo</span> Insert Key\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x33\">\\x33</span><span title=\"\\x7e\">\\x7e</span>'</span><span>)</span>  <span># 删除</span>\n    <span>echo</span> Delete Key\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x31\">\\x31</span><span title=\"\\x7e\">\\x7e</span>'</span><span>)</span>  <span># 数字7上的Home键</span>\n    <span>echo</span> Home Key\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x34\">\\x34</span><span title=\"\\x7e\">\\x7e</span>'</span><span>)</span>  <span># 数字1上的End键</span>\n    <span>echo</span> End Key\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x35\">\\x35</span><span title=\"\\x7e\">\\x7e</span>'</span><span>)</span>  <span># 上翻页</span>\n    <span>echo</span> Page_Up\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x36\">\\x36</span><span title=\"\\x7e\">\\x7e</span>'</span><span>)</span>  <span># 下翻页</span>\n    <span>echo</span> Page_Down\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x41\">\\x41</span>'</span><span>)</span>  <span># 上箭头</span>\n    <span>echo</span> Up arrow\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x42\">\\x42</span>'</span><span>)</span>  <span># 下箭头</span>\n    <span>echo</span> Down arrow\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x43\">\\x43</span>'</span><span>)</span>  <span># 右箭头</span>\n    <span>echo</span> Right arrow\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span><span title=\"\\x5b\">\\x5b</span><span title=\"\\x44\">\\x44</span>'</span><span>)</span>  <span># 左箭头</span>\n    <span>echo</span> Left arrow\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x09\">\\x09</span>'</span><span>)</span>  <span># 制表符</span>\n    <span>echo</span> Tab Key\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x0a\">\\x0a</span>'</span><span>)</span>  <span># 回车</span>\n    <span>echo</span> Enter Key\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x1b\">\\x1b</span>'</span><span>)</span>  <span># ESC</span>\n    <span>echo</span> Escape Key\n   <span>;</span><span>;</span>\n   $<span>'<span title=\"\\x20\">\\x20</span>'</span><span>)</span>  <span># 空格</span>\n    <span>echo</span> Space Key\n   <span>;</span><span>;</span>\n   d<span>)</span>\n    <span>date</span>\n   <span>;</span><span>;</span>\n   q<span>)</span>\n    <span>echo</span> Time to quit<span>..</span>.\n    <span>echo</span>\n    <span>exit</span> <span>0</span>\n   <span>;</span><span>;</span>\n   *<span>)</span>\n    <span>echo</span> Your pressed: <span>\\</span>'<span>\"<span>$key</span>\"</span><span>\\</span>'\n   <span>;</span><span>;</span>\n  <span>esac</span>\n  \n  <span>echo</span>\n  <span>echo</span> <span>\"================================\"</span>\n  \n  <span>unset</span> K1 K2 K3\n  <span>read</span> -s -N1 -p <span>\"Press a key: \"</span>\n  <span>K1</span><span>=</span><span>\"<span>$REPLY</span>\"</span>\n  <span>read</span> -s -N2 -t <span>0.001</span>\n  <span>K2</span><span>=</span><span>\"<span>$REPLY</span>\"</span>\n  <span>read</span> -s -N1 -t <span>0.001</span>\n  <span>K3</span><span>=</span><span>\"<span>$REPLY</span>\"</span>\n  <span>key</span><span>=</span><span>\"<span>$K1</span><span>$K2</span><span>$K3</span>\"</span>\n  \n<span>done</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br></div></div><p>还可以查看样例 37-1。</p>\n<h3 id=\"\"> \\&quot;</h3>\n<p>转义引号，指代自身。</p>\n<div><pre><code><span>echo</span> <span>\"Hello\"</span>                     <span># Hello</span>\n<span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span>Hello<span title=\"\\&quot;\">\\\"</span> ... he said.\"</span>    <span># \"Hello\" ... he said.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"-2\"> \\$</h3>\n<p>转义美元符号（跟在 <code>\\\\$</code> 后的变量名将不会被引用）。</p>\n<div><pre><code><span>echo</span> <span>\"\\<span>$variable01</span>\"</span>           <span># $variable01</span>\n<span>echo</span> <span>\"The book cost \\<span>$7</span>.98.\"</span>  <span># The book cost $7.98.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"-3\"> \\\\</h3>\n<p>转义反斜杠，指代自身。</p>\n<div><pre><code><span>echo</span> <span>\"<span title=\"\\\\\">\\\\</span>\"</span>  <span># 结果是 \\</span>\n\n<span># 然而...</span>\n\n<span>echo</span> \"<span>\\</span>\"   <span># 在命令行中会出现第二行并提示输入。</span>\n           <span># 在脚本中会出错。</span>\n           \n<span># 但是...</span>\n\n<span>echo</span> '<span>\\</span>'   <span># 结果是 \\</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 根据转义符所在的上下文（强引用、弱引用，命令替换或者在 here document）的不同，它的行为也会有所不同。</p>\n</blockquote>\n<div><pre><code>                      <span>#  简单转义与引用</span>\n<span>echo</span> <span>\\</span>z               <span>#  z</span>\n<span>echo</span> <span>\\</span><span>\\</span>z              <span># \\z</span>\n<span>echo</span> <span>'\\z'</span>             <span># \\z</span>\nehco <span>'<span title=\"\\\\\">\\\\</span>z'</span>            <span># \\\\z</span>\n<span>echo</span> <span>\"\\z\"</span>             <span># \\z</span>\n<span>echo</span> <span>\"<span title=\"\\\\\">\\\\</span>z\"</span>            <span># \\z</span>\n<span>></span>\n                      <span>#  命令替换</span>\n<span>echo</span> <span><span>`</span><span>echo</span> <span>\\</span>z<span>`</span></span>        <span>#  z</span>\n<span>echo</span> <span><span>`</span><span>echo</span> <span>\\</span><span>\\</span>z<span>`</span></span>       <span>#  z</span>\n<span>echo</span> <span><span>`</span><span>echo</span> <span>\\</span><span>\\</span><span>\\</span>z<span>`</span></span>      <span># \\z</span>\n<span>echo</span> <span><span>`</span><span>echo</span> <span>\\</span><span>\\</span><span>\\</span><span>\\</span>z<span>`</span></span>     <span># \\z</span>\n<span>echo</span> <span><span>`</span><span>echo</span> <span>\\</span><span>\\</span><span>\\</span><span>\\</span><span>\\</span><span>\\</span>z<span>`</span></span>   <span># \\z</span>\n<span>echo</span> <span><span>`</span><span>echo</span> <span>\\</span><span>\\</span><span>\\</span><span>\\</span><span>\\</span><span>\\</span><span>\\</span>z<span>`</span></span>  <span># \\\\z</span>\n<span>echo</span> <span><span>`</span><span>echo</span> <span>\"\\z\"</span><span>`</span></span>      <span># \\z</span>\n<span>echo</span> <span><span>`</span><span>echo</span> <span>\"<span title=\"\\\\\">\\\\</span>z\"</span><span>`</span></span>     <span># \\z</span>\n<span>></span>\n                      <span># Here Document</span>\n<span>cat</span> <span>&lt;&lt;</span><span>EOF\n\\z\nEOF</span>                   <span># \\z</span>\n<span>></span>\n<span>cat</span> <span>&lt;&lt;</span><span>EOF\n<span title=\"\\\\\">\\\\</span>z\nEOF</span>                   <span># \\z</span>\n<span>></span>\n<span># 以上例子由 Stéphane Chazelas 提供。 </span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><blockquote>\n<p>含有转义字符的字符串可以赋值给变量，但是仅仅将单一的转义符赋值给变量是不可行的。</p>\n</blockquote>\n<div><pre><code><span>variable</span><span>=</span><span>\\</span>\n<span>echo</span> <span>\"<span>$variable</span>\"</span>\n<span># 这样做会报如下错误：</span>\n<span># tesh.sh: : command not found</span>\n<span># 单独的转义符不能够赋值给变量。</span>\n<span># </span>\n<span>#  事实上，\"\\\" 转义了换行，实际效果是：</span>\n<span>#+ variable=echo \"$variable\"</span>\n<span>#+ 这是一个非法的赋值方式。</span>\n<span>></span>\n<span>variable</span><span>=</span><span>\\</span>\n23skidoo\n<span>echo</span> <span>\"<span>$variable</span>\"</span>        <span># 23skidoo</span>\n                        <span># 因为第二行是一个合法的赋值，因此不会报错。</span>\n<span>></span>\n<span>variable</span><span>=</span><span>\\</span> \n<span>#        \\^    转义符后有一个空格</span>\n<span>echo</span> <span>\"<span>$variable</span>\"</span>        <span># 空格</span>\n<span>></span>\n<span>variable</span><span>=</span><span>\\</span><span>\\</span>\n<span>echo</span> <span>\"<span>$variable</span>\"</span>        <span># \\</span>\n<span>></span>\n<span>variable</span><span>=</span><span>\\</span><span>\\</span><span>\\</span>\n<span>echo</span> <span>\"<span>$variable</span>\"</span>\n<span># 这样做会报如下错误：</span>\n<span># tesh.sh: \\: command not found</span>\n<span>#</span>\n<span>#  第一个转义符转转义了第二个，但是第三个转义符仍旧转义的是换行，</span>\n<span>#+ 跟开始的那个例子一样，因此会报错。</span>\n<span>></span>\n<span>variable</span><span>=</span><span>\\</span><span>\\</span><span>\\</span><span>\\</span>\n<span>echo</span> <span>\"<span>$variable</span>\"</span>        <span># \\\\</span>\n                        <span># 第二个和第四个转义符被转义了，因此可行。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>转义空格能够避免在命令参数列表中的字符分割问题。</p>\n<div><pre><code><span>file_list</span><span>=</span><span>\"/bin/cat /bin/gzip /bin/more /usr/bin/less /usr/bin/emacs-20.7\"</span>\n<span># 将一系列文件作为命令的参数。</span>\n\n<span># 增加两个文件到列表中，并且列出整个表。</span>\n<span>ls</span> -l /usr/X11R6/bin/xsetroot /sbin/dump <span>$file_list</span>\n\n<span>echo</span> <span>\"-------------------------------------------------------------------------\"</span>\n\n<span># 如果我们转义了这些空格会怎样？</span>\n<span>ls</span> -l /usr/X11R6/bin/xsetroot<span>\\</span> /sbin/dump<span>\\</span> <span>$file_list</span>\n<span># 错误：因为转义了两个空格，因此前三个文件被连接成了一个参数传递给了 'ls -l'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>转义符也提供一种可以撰写多行命令的方式。通常，每一行是一个命令，但是转义换行后命令就可以在下一行继续撰写。</p>\n<div><pre><code><span>(</span>cd /source/directory <span>&amp;&amp;</span> <span>tar</span> cf - <span>.</span> <span>)</span> <span>|</span> <span>\\</span>\n<span>(</span>cd /dest/directory <span>&amp;&amp;</span> <span>tar</span> xpvf -<span>)</span>\n<span># 回顾 Alan Cox 的目录树拷贝命令，但是把它拆成了两行。</span>\n\n<span># 或者你也可以：</span>\n<span>tar</span> cf - -C /source/directory <span>.</span> <span>|</span>\n<span>tar</span> xpvf - -C /dest/directory\n<span># 可以看下方的注释。</span>\n<span># （感谢 Stéphane Chazelas。）</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 在脚本中，如果以 &quot;|&quot; 管道作为一行的结束字符，那么不需要加转义符 \\ 也可以写多行命令。但是一个好的编程习惯就是在写多行命令的事后，无论什么情况都要在行尾加上转义符 \\。</p>\n</blockquote>\n<div><pre><code><span>echo</span> <span>\"foo\nbar\"</span>\n<span>#foo</span>\n<span>#bar</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>'foo\nbar'</span>    <span># 没有区别。</span>\n<span>#foo</span>\n<span>#bar</span>\n\n<span>echo</span>\n\n<span>echo</span> foo<span>\\</span>\nbar     <span># 转义换行。</span>\n<span>#foobar</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"foo\\\nbar\"</span>     <span># 没有区别，在弱引用中，\\ 转义符仍旧转义了换行。</span>\n<span>#foobar</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>'foo\\\nbar'</span>     <span># 在强引用中，\\ 就按照字面意思来解释了。</span>\n<span>#foo\\</span>\n<span>#bar</span>\n\n<span># 由 Stéphane Chazelas 提供的例子。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div>",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第五章 引用",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/05_quoting/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/05_quoting/",
      "content_html": "<h1 id=\"第五章-引用\"> 第五章 引用</h1>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./05_1_quoting_variables.html\">5.1 引用变量</a></li>\n<li><a href=\"./05_2_escaping.html\">5.2 转义</a></li>\n</ul>\n<hr>\n<p>引用就是将一个字符串用引号括起来。这样做是为了保护Shell/Shell脚本中被重新解释过或带扩展功能的<a href=\"http://tldp.org/LDP/abs/html/special-chars.html\" target=\"_blank\" rel=\"noopener noreferrer\">特殊字符</a>（如果一个字符带有其特殊意义而不仅仅是字面量的话，这个字符就能称为“特殊字符”。比如星号“*”就能表示<a href=\"http://tldp.org/LDP/abs/html/regexp.html#REGEXREF\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>中的一个<a href=\"http://tldp.org/LDP/abs/html/globbingref.html\" target=\"_blank\" rel=\"noopener noreferrer\">通配符</a>）。</p>\n<div><pre><code>bash$ ls -l [Vv]*\n-rw-rw-r--    1 bozo  bozo       324 Apr  2 15:05 VIEWDATA.BAT\n-rw-rw-r--    1 bozo  bozo       507 May  4 14:25 vartrace.sh\n-rw-rw-r--    1 bozo  bozo       539 Apr 14 17:11 viewdata.sh\n\nbash$ ls -l &#39;[Vv]*&#39;\nls: [Vv]*: No such file or directory\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>\n<p>可以看到，提示不存在该文件。这里的<code>'[Vv]*</code>被当成了文件名。\n在日常沟通和写作中，当我们引用一个短语的时候，我们会将它单独隔开并赋予它特殊的意义，而在bash脚本中，当我们<em>引用</em>一个字符串，意味着保留它的<em>字面量</em>。</p>\n</blockquote>\n<p>很多程序和公用代码会展开被引用字符串中的特殊字符。引用的一个重用用途是保护Shell中的命令行参数，但仍然允许调用的程序扩展它。</p>\n<div><pre><code>bash$ grep &#39;[Ff]irst&#39; *.txt\nfile1.txt:This is the first line of file1.txt.\nfile2.txt:This is the First line of file2.txt.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>在所有.txt文件中找出包含first或者First字符串的行</p>\n</blockquote>\n<p>注意，不加引号的 <code>grep [Ff]irst *.txt</code> 在Bash下也同样有效。<sup></sup></p>\n<p>引用也可以控制<a href=\"http://tldp.org/LDP/abs/html/internal.html#ECHOREF\" target=\"_blank\" rel=\"noopener noreferrer\">echo</a>命令的断行符。</p>\n<div><pre><code>bash$ echo $(ls -l)\ntotal 8 -rw-rw-r-- 1 bo bo 13 Aug 21 12:57 t.sh -rw-rw-r-- 1 bo bo 78 Aug 21 12:57 u.sh\n\n\nbash$ echo &quot;$(ls -l)&quot;\ntotal 8\n -rw-rw-r--  1 bo bo  13 Aug 21 12:57 t.sh\n -rw-rw-r--  1 bo bo  78 Aug 21 12:57 u.sh\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>前提是当前目录下有文件名为First或first的文件。这也是使用引用的另一个原因。（感谢 Harald Koenig 指出了这一点） </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第六章 退出与退出状态",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/06_exit_and_exit_status/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/06_exit_and_exit_status/",
      "content_html": "<h1 id=\"第六章-退出与退出状态\"> 第六章 退出与退出状态</h1>\n<blockquote>\n<p>Bourne shell里存在不明确之处，但人们也会使用它们。</p>\n<p>—— Chat Ramey</p>\n</blockquote>\n<p>跟C程序类似，<code>exit</code> 命令被用来结束脚本。同时，它也会返回一个值，返回值可以被交给父进程。</p>\n<p>每个命令都会返回一个退出状态（exit status），有时也叫做返回状态（return status）或退出码（exit code）。命令执行成功返回0，如果返回一个非0值，通常情况下会被认为是一个错误代码。一个运行状态良好的UNIX命令、程序和工具在正常执行退出后都会返回一个0的退出码，当然也有例外。</p>\n<p>同样地，脚本中的函数和脚本本身也会返回一个退出状态。在脚本或者脚本函数中执行的最后的命令会决定它们的退出状态。在脚本中，<code>exit nnn</code> 命令将会把nnn退出状态码传递给shell（nnn 必须是 0-255 之间的整型数）。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 当一个脚本以不带参数的 <code>exit</code> 来结束时，脚本的退出状态由脚本最后执行命令决定（<code>exit</code> 命令之前）。</p>\n</blockquote>\n<div><pre><code><span>#!/bin/bash</span>\n\nCOMMAND_1\n\n<span>..</span>.\n\nCOMMAND_LAST\n\n<span># 将以最后的命令来决定退出状态</span>\n\n<span>exit</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><blockquote>\n<p><code>exit</code>，<code>exit $?</code> 以及省略 <code>exit</code> 效果等同。</p>\n</blockquote>\n<div><pre><code><span>#!/bin/bash </span>\n\nCOMMAND_1\n\n<span>..</span>.\n\nCOMMAND_LAST\n\n<span>#将以最后的命令来决定退出状态</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><div><pre><code><span>#!/bin/bash</span>\n\nCOMMAND_1\n\n<span>..</span>.\n\nCOMMAND_LAST\n\n<span>#将以最后的命令来决定退出状态</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><code>$?</code> 读取上一个执行命令的退出状态。在一个函数返回后，<code>$?</code> 给出函数最后执行的那条命令的退出状态。这就是Bash函数的&quot;返回值&quot;。<sup></sup></p>\n<p>在<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#PIPEREF\" target=\"_blank\" rel=\"noopener noreferrer\">管道</a>执行后，<code>$?</code> 给出最后执行的那条命令的退出状态。</p>\n<p>在脚本终止后，命令行下键入<code>$?</code>会给出脚本的退出状态，即在脚本中最后一条命令执行后的退出状态。一般情况下，0为成功，1-255为失败。</p>\n<p>样例 6-1. 退出与退出状态</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>echo</span> hello\n<span>echo</span> <span>$?</span>    <span># 返回值为0，因为执行成功。</span>\n\nlskdf      <span># 不认识的命令。</span>\n<span>echo</span> <span>$?</span>    <span># 返回非0值，因为失败了。</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>113</span>   <span># 将返回113给shell</span>\n           <span># 为了验证这些，在脚本结束的地方使用“echo $?”</span>\n\n<span>#  按照惯例，'exit 0' 意味着执行成功，</span>\n<span>#+ 非0意味着错误或者异常情况。</span>\n<span>#  查看附录章节“退出码的特殊含义”</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><code>$?</code> 对于测试脚本中的命令的执行结果特别有用（查看样例 16-35和样例 16-20）。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 逻辑非操作符 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#NOTREF\" target=\"_blank\" rel=\"noopener noreferrer\">!</a> 将会反转测试或命令的结果，并且这将会影响退出状态。</p>\n</blockquote>\n<p>样例 6-2. 否定一个条件使用!</p>\n<div><pre><code><span>true</span>    <span># true 是 shell 内建命令。</span>\n<span>echo</span> <span>\"exit status of <span title=\"\\&quot;\">\\\"</span>true<span title=\"\\&quot;\">\\\"</span> = <span>$?</span>\"</span>     <span># 0</span>\n\n<span>!</span> <span>true</span>\n<span>echo</span> <span>\"exit status of <span title=\"\\&quot;\">\\\"</span>! true<span title=\"\\&quot;\">\\\"</span> = <span>$?</span>\"</span>   <span># 1</span>\n<span># 注意在命令之间的 \"!\" 需要一个空格。</span>\n<span># !true 将导致一个\"command not found\"错误。</span>\n<span>#</span>\n<span># 如果一个命令以'!'开头，那么将调用 Bash 的历史机制，显示这个命令被使用的历史。</span>\n\n<span>true</span>\n<span>!</span>true\n<span># 这次就没有错误了，但是同样也没有反转。</span>\n<span># 它不过是重复之前的命令（true）。</span>\n\n\n<span># ============================================================ #</span>\n<span># 在 _pipe_ 前使用 ! 将改变返回的退出状态。</span>\n<span>ls</span> <span>|</span> bogus_command      <span>#bash: bogus_command: command not found</span>\n<span>echo</span> <span>$?</span>                 <span>#127</span>\n<span>></span>\n<span>!</span> <span>ls</span> <span>|</span> bogus_command    <span>#bash: bogus_command:command not found</span>\n<span>echo</span> <span>$?</span>                 <span>#0</span>\n<span># 注意 ! 不会改变管道的执行。</span>\n<span># 只改变退出状态。</span>\n<span>#============================================================  #</span>\n<span>></span>\n<span># 感谢 Stéphane Chazelas 和 Kristopher Newsome。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 某些特定的退出码具有一些特定的<a href=\"http://tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF\" target=\"_blank\" rel=\"noopener noreferrer\">保留含义</a>，用户不应该在自己的脚本中重新定义它们。</p>\n</blockquote>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>在函数没有用<a href=\"http://tldp.org/LDP/abs/html/complexfunct.html#RETURNREF\" target=\"_blank\" rel=\"noopener noreferrer\">return</a>来结束这个函数的情况下。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/note.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "7.1 测试结构",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_1_test_constructs/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_1_test_constructs/",
      "content_html": "<h1 id=\"_7-1-测试结构\"> 7.1 测试结构</h1>\n<ul>\n<li>\n<p><code>if/then</code> 结构是用来检测一系列命令的 <a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态</a> 是否为0（按 UNIX 惯例,退出码 0 表示命令执行成功），如果为0，则执行接下来的一个或多个命令。</p>\n</li>\n<li>\n<p>测试结构会使用一个特殊的命令 <code>[</code>（参看特殊字符章节 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#LEFTBRACKET\" target=\"_blank\" rel=\"noopener noreferrer\">左方括号</a>）。等同于 <code>test</code> 命令，它是一个<a href=\"http://tldp.org/LDP/abs/html/internal.html#BUILTINREF\" target=\"_blank\" rel=\"noopener noreferrer\">内建命令</a>，写法更加简洁高效。该命令将其参数视为比较表达式或文件测试，以比较结果作为其退出状态码返回（0 为真，1 为假）。</p>\n</li>\n<li>\n<p>Bash 在 2.02 版本中引入了扩展测试命令 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#DBLBRACKETS\" target=\"_blank\" rel=\"noopener noreferrer\"><code>[[...]]</code></a>，它提供了一种与其他语言语法更为相似的方式进行比较操作。注意， <code>[[</code> 是一个 <a href=\"http://tldp.org/LDP/abs/html/internal.html#KEYWORDREF\" target=\"_blank\" rel=\"noopener noreferrer\">关键字</a> 而非一个命令。</p>\n<p>Bash 将 <code>[[ $a -lt $b ]]</code> 视为一整条语句，执行并返回退出状态。</p>\n</li>\n<li>\n<p>结构 <a href=\"http://tldp.org/LDP/abs/html/dblparens.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>(( ... ))</code></a> 和 <a href=\"http://tldp.org/LDP/abs/html/internal.html#LETREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>let ...</code></a> 根据其执行的算术表达式的结果决定退出状态码。这样的 <a href=\"http://tldp.org/LDP/abs/html/arithexp.html#ARITHEXPREF\" target=\"_blank\" rel=\"noopener noreferrer\">算术扩展</a> 结构可以用来进行 <a href=\"http://tldp.org/LDP/abs/html/comparison-ops.html#ICOMPARISON1\" target=\"_blank\" rel=\"noopener noreferrer\">数值比较</a>。</p>\n</li>\n</ul>\n<div><pre><code><span><span>((</span> <span>0</span> <span>&amp;&amp;</span> <span>1</span> <span>))</span></span>                 <span># 逻辑与</span>\n<span>echo</span> <span>$?</span>     <span># 1     ***</span>\n<span># 然后 ...</span>\n<span>let</span> <span>\"num = <span><span>((</span> <span>0</span> <span>&amp;&amp;</span> <span>1</span> <span>))</span></span>\"</span>\n<span>echo</span> <span>$num</span>   <span># 0</span>\n<span># 然而 ...</span>\n<span>let</span> <span>\"num = <span><span>((</span> <span>0</span> <span>&amp;&amp;</span> <span>1</span> <span>))</span></span>\"</span>\n<span>echo</span> <span>$?</span>     <span># 1     ***</span>\n\n\n<span><span>((</span> <span>200</span> <span>||</span> <span>11</span> <span>))</span></span>              <span># 逻辑或</span>\n<span>echo</span> <span>$?</span>     <span># 0     ***</span>\n<span># ...</span>\n<span>let</span> <span>\"num = <span><span>((</span> <span>200</span> <span>||</span> <span>11</span> <span>))</span></span>\"</span>\n<span>echo</span> <span>$num</span>   <span># 1</span>\n<span>let</span> <span>\"num = <span><span>((</span> <span>200</span> <span>||</span> <span>11</span> <span>))</span></span>\"</span>\n<span>echo</span> <span>$?</span>     <span># 0     ***</span>\n\n\n<span><span>((</span> <span>200</span> <span>|</span> <span>11</span> <span>))</span></span>               <span># 按位或</span>\n<span>echo</span> <span>$?</span>                      <span># 0     ***</span>\n<span># ...</span>\n<span>let</span> <span>\"num = <span><span>((</span> <span>200</span> <span>|</span> <span>11</span> <span>))</span></span>\"</span>\n<span>echo</span> <span>$num</span>                    <span># 203</span>\n<span>let</span> <span>\"num = <span><span>((</span> <span>200</span> <span>|</span> <span>11</span> <span>))</span></span>\"</span>\n<span>echo</span> <span>$?</span>                      <span># 0     ***</span>\n\n<span># \"let\" 结构的退出状态与双括号算术扩展的退出状态是相同的。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 注意，双括号算术扩展表达式的退出状态码不是一个错误的值。算术表达式为0，返回1；算术表达式不为0，返回0。</p>\n<div><pre><code><span>var</span><span>=</span>-2 <span>&amp;&amp;</span> <span><span>((</span> var<span>+</span><span>=</span><span>2</span> <span>))</span></span>\n<span>echo</span> <span>$?</span>                   <span># 1</span>\n\n<span>var</span><span>=</span>-2 <span>&amp;&amp;</span> <span><span>((</span> var<span>+</span><span>=</span><span>2</span> <span>))</span></span> <span>&amp;&amp;</span> <span>echo</span> <span>$var</span>\n                          <span># 并不会输出 $var, 因为((var+=2))的状态码为1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>\n<li><code>if</code> 不仅可以用来测试括号内的条件表达式，还可以用来测试其他任何命令。</li>\n</ul>\n<div><pre><code><span>if</span> <span>cmp</span> a b <span>&amp;></span> /dev/null  <span># 消去输出结果</span>\n<span>then</span> <span>echo</span> <span>\"Files a and b are identical.\"</span>\n<span>else</span> <span>echo</span> <span>\"Files a and b differ.\"</span>\n<span>fi</span>\n\n<span># 下面介绍一个非常实用的 “if-grep\" 结构：</span>\n<span># -----------------------------------</span>\n<span>if</span> <span>grep</span> -q Bash <span>file</span>\n  <span>then</span> <span>echo</span> <span>\"File contains at least one occurrence of Bash.\"</span>\n<span>fi</span>\n    \n<span>word</span><span>=</span>Linux\n<span>letter_sequence</span><span>=</span>inu\n<span>if</span> <span>echo</span> <span>\"<span>$word</span>\"</span> <span>|</span> <span>grep</span> -q <span>\"<span>$letter_sequence</span>\"</span>\n<span># 使用 -q 选项消去 grep 的输出结果</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$letter_sequence</span> found in \"</span><span>$word</span><span>\"\nelse\n  echo \"</span><span>$letter_sequence</span> not found <span>in</span> <span>$word</span><span>\"\nfi\n\n\nif COMMAND_WHOSE_EXIT_STATUS_IS_0_UNLESS_ERROR_OCCURRED\n  then echo \"</span>Command succeed.<span>\"\n  else echo \"</span>Command failed.\"\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><ul>\n<li>感谢 Stéphane Chazelas 提供了后两个例子。</li>\n</ul>\n<p>样例 7-1. 什么才是真？</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span># 提示：</span>\n<span># 如果你不确定某个表达式的布尔值，可以用 if 结构进行测试。</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>0<span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> <span>0</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"0 is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"0 is false.\"</span>\n<span>fi</span>            <span># 0 为真。</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>1<span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> <span>1</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"1 is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"1 is false.\"</span>\n<span>fi</span>            <span># 1 为真。</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>-1<span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> -1 <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"-1 is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"-1 is false.\"</span>\n<span>fi</span>            <span># -1 为真。</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>NULL<span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> <span>]</span>        <span># NULL, 空</span>\n<span>then</span>\n  <span>echo</span> <span>\"NULL is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"NULL is false.\"</span>\n<span>fi</span>            <span># NULL 为假。</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>xyz<span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> xyz <span>]</span>    <span># 字符串</span>\n<span>then</span>\n  <span>echo</span> <span>\"Random string is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"Random string is false.\"</span>\n<span>fi</span>            <span># 随机字符串为真。</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span><span>$xyz</span><span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> <span>$xyz</span> <span>]</span>   <span># 原意是测试 $xyz 是否为空，但是</span>\n              <span># 现在 $xyz 只是一个没有初始化的变量。</span>\n<span>then</span>\n  <span>echo</span> <span>\"Uninitialized variable is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"Uninitialized variable is flase.\"</span>\n<span>fi</span>            <span># 未初始化变量含有null空值，为假。</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>-n \\<span>$xyz</span><span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> -n <span>\"<span>$xyz</span>\"</span> <span>]</span>            <span># 更加准确的写法。</span>\n<span>then</span>\n  <span>echo</span> <span>\"Uninitialized variable is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"Uninitialized variable is false.\"</span>\n<span>fi</span>            <span># 未初始化变量为假。</span>\n\n<span>echo</span>\n\n\n<span>xyz</span><span>=</span>          <span># 初始化为空。</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>-n \\<span>$xyz</span><span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> -n <span>\"<span>$xyz</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Null variable is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"Null variable is false.\"</span>\n<span>fi</span>            <span># 空变量为假。</span>\n\n<span>echo</span>\n\n<span># 什么时候 \"false\" 为真？</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>false<span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>if</span> <span>[</span> <span>\"false\"</span> <span>]</span>              <span>#  看起来 \"false\" 只是一个字符串</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span>false<span title=\"\\&quot;\">\\\"</span> is true.\"</span> <span>#+ 测试结果为真。</span>\n<span>else</span>\n  <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span>false<span title=\"\\&quot;\">\\\"</span> is false.\"</span>\n<span>fi</span>            <span># \"false\" 为真。</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"Testing <span title=\"\\&quot;\">\\\"</span>\\<span>$false</span><span title=\"\\&quot;\">\\\"</span>\"</span>  <span># 未初始化的变量。</span>\n<span>if</span> <span>[</span> <span>\"<span>$false</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span>\\<span>$false</span><span title=\"\\&quot;\">\\\"</span> is true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span>\\<span>$false</span><span title=\"\\&quot;\">\\\"</span> is false.\"</span>\n<span>fi</span>            <span># \"$false\" 为假。</span>\n              <span># 得到了我们想要的结果。</span>\n\n<span># 如果测试空变量 \"$true\" 会有什么样的结果？</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br></div></div><p>练习：理解 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#EX10\" target=\"_blank\" rel=\"noopener noreferrer\">样例 7-1</a></p>\n<div><pre><code><span>if</span> <span>[</span> condition-true <span>]</span>\n<span>then</span>\n   <span>command</span> <span>1</span>\n   <span>command</span> <span>2</span>\n   <span>..</span>.\n<span>else</span>  <span># 如果测试条件为假，则执行 else 后面的代码段</span>\n   <span>command</span> <span>3</span>\n   <span>command</span> <span>4</span>\n   <span>..</span>.\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 如果把 <code>if</code> 和 <code>then</code> 写在同一行时，则必须在 <code>if</code> 语句后加上一个分号来结束语句。因为 <code>if</code> 和 <code>then</code> 都是 <a href=\"http://tldp.org/LDP/abs/html/internal.html#KEYWORDREF\" target=\"_blank\" rel=\"noopener noreferrer\">关键字</a>。以关键字（或者命令）开头的语句，必须先结束该语句(分号;)，才能执行下一条语句。</p>\n<div><pre><code><span>if</span> <span>[</span> -x <span>\"<span>$filename</span>\"</span> <span>]</span><span>;</span> <span>then</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"else-if-与-elif\"> Else if 与 elif</h3>\n<p>elif</p>\n<p><code>elif</code> 是 <code>else if</code> 的缩写。可以把多个 <code>if/then</code> 语句连到外边去，更加简洁明了。</p>\n<div><pre><code><span>if</span> <span>[</span> condition1 <span>]</span>\n<span>then</span>\n   command1\n   command2\n   command3\n<span>elif</span> <span>[</span>condition2 <span>]</span>\n<span># 等价于 else if</span>\n<span>then</span>\n   command4\n   command5\n<span>else</span>\n   default-command\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><code>if test condition-true</code> 完全等价于 <code>if [ condition-true ]</code>。当语句开始执行时，左括号 <code>[</code> 是作为调用 <code>test</code> 命令的标记<sup></sup>，而右括号则不严格要求，但在新版本的 Bash 里，右括号必须补上。</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> <code>test</code> 命令是 Bash 的 <a href=\"http://tldp.org/LDP/abs/html/internal.html#BUILTINREF\" target=\"_blank\" rel=\"noopener noreferrer\">内建命令</a>，可以用来检测文件类型和比较字符串。在 Bash 脚本中，<code>test</code> 不调用 <code>sh-utils</code> 包下的文件 <code>/usr/bin/test</code>。同样，<code>[</code> 也不会调用链接到 <code>/usr/bin/test</code> 的 <code>/usr/bin/[</code> 文件。</p>\n<div><pre><code>bash$ type test\ntest is a shell builtin\nbash$ type &#39;[&#39;\n[ is a shell builtin\nbash$ type &#39;[[&#39;\n[[ is a shell keyword\nbash$ type &#39;]]&#39;\n]] is a shell keyword\nbash$ type &#39;]&#39;\nbash: type: ]: not found\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>如果你想在 Bash 脚本中使用 <code>/usr/bin/test</code>，那你必须把路径写全。</p>\n<p>样例 7-2. <code>test</code>，<code>/usr/bin/test</code>，<code>[]</code> 和 <code>/usr/bin/[</code> 的等价性</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>echo</span>\n\n<span>if</span> <span>test</span> -z <span>\"<span>$1</span>\"</span>\n<span>then</span>\n  <span>echo</span> <span>\"No command-line arguments.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"First command-line argument is <span>$1</span>.\"</span>\n<span>fi</span>\n\n<span>echo</span>\n\n<span>if</span> /usr/bin/test -z <span>\"<span>$1</span>\"</span>      <span># 等价于内建命令 \"test\"</span>\n<span>#  ^^^^^^^^^^^^^              # 指定全路径</span>\n<span>then</span>\n  <span>echo</span> <span>\"No command-line arguments.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"First command-line argument is <span>$1</span>.\"</span>\n<span>fi</span>\n\n<span>echo</span>\n\n<span>if</span> <span>[</span> -z <span>\"<span>$1</span>\"</span> <span>]</span>                <span># 功能和上面的代码相同。</span>\n<span>#   if [ -z \"$1\"                理论上可行，但是 Bash 会提示缺失右括号</span>\n<span>then</span>\n  <span>echo</span> <span>\"No command-line arguments.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"First command-line argument is <span>$1</span>.\"</span>\n<span>fi</span>\n\n<span>echo</span>\n\n\n<span>if</span> /usr/bin/<span>[</span> -z <span>\"<span>$1</span>\"</span> <span>]</span>       <span># 功能和上面的代码相同。</span>\n<span># if /usr/bin/[ -z \"$1\"       # 理论上可行，但是会报错</span>\n<span>#                             # 已经在 Bash 3.x 版本被修复了</span>\n<span>then</span>\n  <span>echo</span> <span>\"No command-line arguments.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"First command-line argument is <span>$1</span>.\"</span>\n<span>fi</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><p>在 Bash 里，<code>[[ ]]</code> 是比 <code>[ ]</code> 更加通用的写法。其作为扩展<code>test</code> 命令从 ksh88 中被继承了过来。</p>\n<p>在 <code>[[</code> 和 <code>]]</code> 中不会进行文件名扩展或字符串分割，但是可以进行参数扩展和命令替换。</p>\n<div><pre><code><span>file</span><span>=</span>/etc/passwd\n\n<span>if</span> <span>[</span><span>[</span> -e <span>$file</span> <span>]</span><span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Password file exists.\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>使用 <code>[[...]]</code> 代替 <code>[...]</code>可以避免很多逻辑错误。比如可以在 <code>[[]]</code> 中使用 <code>&amp;&amp;</code>，<code>||</code>，<code>&lt;</code> 和 <code>&gt;</code> 运算符，而在 <code>[]</code> 中使用会报错。</p>\n<p>在 <code>[[]]</code> 中会自动执行八进制和十六进制的进制转换操作。</p>\n<div><pre><code><span># [[ 八进制和十六进制进制转换 ]]</span>\n<span># 感谢 Moritz Gronbach 提出。</span>\n\n\n<span>decimal</span><span>=</span><span>15</span>\n<span>octal</span><span>=</span>017   <span># = 15 (十进制)</span>\n<span>hex</span><span>=</span>0x0f    <span># = 15 (十进制)</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$decimal</span>\"</span> -eq <span>\"<span>$octal</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$decimal</span> equals <span>$octal</span>\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"<span>$decimal</span> is not equal to <span>$octal</span>\"</span>       <span># 15 不等于 017</span>\n<span>fi</span>      <span># 在单括号 [ ] 之间不会进行进制转换。</span>\n\n\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>$decimal</span>\"</span> -eq <span>\"<span>$octal</span>\"</span> <span>]</span><span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$decimal</span> equals <span>$octal</span>\"</span>                <span># 15 等于 017</span>\n<span>else</span>\n  <span>echo</span> <span>\"<span>$decimal</span> is not equal to <span>$octal</span>\"</span>\n<span>fi</span>      <span># 在双括号 [[ ]] 之间会进行进制转换。</span>\n\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>$decimal</span>\"</span> -eq <span>\"<span>$hex</span>\"</span> <span>]</span><span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$decimal</span> equals <span>$hex</span>\"</span>                  <span># 15 等于 0x0f</span>\n<span>else</span>\n  <span>echo</span> <span>\"<span>$decimal</span> is not equal to <span>$hex</span>\"</span>\n<span>fi</span>      <span># 十六进制也可以进行转换。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 语法上并不严格要求在 <code>if</code> 之后一定要写 <code>test</code> 命令或者测试结构（<code>[]</code> 或 <code>[[]]</code>）。</p>\n<div><pre><code><span>dir</span><span>=</span>/home/bozo\n\n<span>if</span> <span>cd</span> <span>\"<span>$dir</span>\"</span> <span><span>2</span>></span>/dev/null<span>;</span> <span>then</span>   <span># \"2>/dev/null\" 重定向消去错误输出。</span>\n  <span>echo</span> <span>\"Now in <span>$dir</span>.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"Can't change to <span>$dir</span>.\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><code>if COMMAND</code> 的退出状态就是<code>COMMAND</code> 的退出状态。</p>\n<p>同样的，测试括号也不一定需要与 <code>if</code> 一起使用。其可以同 <a href=\"http://tldp.org/LDP/abs/html/list-cons.html#LISTCONSREF\" target=\"_blank\" rel=\"noopener noreferrer\">列表结构</a> 结合而不需要 <code>if</code>。</p>\n<div><pre><code><span>var1</span><span>=</span><span>20</span>\n<span>var2</span><span>=</span><span>22</span>\n<span>[</span> <span>\"<span>$var1</span>\"</span> -ne <span>\"<span>$var2</span>\"</span> <span>]</span> <span>&amp;&amp;</span> <span>echo</span> <span>\"<span>$var1</span> is not equal to <span>$var2</span>\"</span>\n\n<span>home</span><span>=</span>/home/bozo\n<span>[</span> -d <span>\"<span>$home</span>\"</span> <span>]</span> <span>||</span> <span>echo</span> <span>\"<span>$home</span> directory does not exist.\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><a href=\"http://tldp.org/LDP/abs/html/dblparens.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>(( ))</code> 结构</a> 扩展和执行算术表达式。如果执行结果为0，其返回的 <a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态码</a> 为1（假）。非0表达式返回的退出状态为0（真）。这与上述所使用的 <code>test</code> 和 <code>[ ]</code> 结构形成鲜明的对比。</p>\n<p>样例 7-3. 使用 <code>(( ))</code> 进行算术测试</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># arith-tests.sh</span>\n<span># 算术测试。</span>\n\n<span># (( ... )) 结构执行并测试算术表达式。</span>\n<span># 与 [ ... ] 结构的退出状态正好相反。</span>\n\n<span><span>((</span> <span>0</span> <span>))</span></span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>0</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>         <span># 1</span>\n\n<span><span>((</span> <span>1</span> <span>))</span></span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>1</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>         <span># 0</span>\n\n<span><span>((</span> <span>5</span> <span>></span> <span>4</span> <span>))</span></span>                                      <span># 真</span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>5</span> <span>></span> <span>4</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>     <span># 0</span>\n\n<span><span>((</span> <span>5</span> <span>></span> <span>9</span> <span>))</span></span>                                      <span># 假</span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>5</span> <span>></span> <span>9</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>     <span># 1</span>\n\n<span><span>((</span> <span>5</span> <span>==</span> <span>5</span> <span>))</span></span>                                     <span># 真</span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>5</span> <span>==</span> <span>5</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>    <span># 0</span>\n<span># (( 5 = 5 )) 会报错。</span>\n\n<span><span>((</span> <span>5</span> <span>-</span> <span>5</span> <span>))</span></span>                                      <span># 0</span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>5</span> <span>-</span> <span>5</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>     <span># 1</span>\n\n<span><span>((</span> <span>5</span> <span>/</span> <span>4</span> <span>))</span></span>                                      <span># 合法</span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>5</span> <span>/</span> <span>4</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>     <span># 0 </span>\n\n<span><span>((</span> <span>1</span> <span>/</span> <span>2</span> <span>))</span></span>                                      <span># 结果小于1</span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>1</span> <span>/</span> <span>2</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>     <span># 舍入至0。</span>\n                                                 <span># 1</span>\n\n<span><span>((</span> <span>1</span> <span>/</span> <span>0</span> <span>))</span></span> <span><span>2</span>></span>/dev/null                          <span># 除0，非法</span>\n<span>#           ^^^^^^^^^^^</span>\n<span>echo</span> <span>\"Exit status of <span title=\"\\&quot;\">\\\"</span><span><span>((</span> <span>1</span> <span>/</span> <span>0</span> <span>))</span></span><span title=\"\\&quot;\">\\\"</span> is <span>$?</span>.\"</span>     <span># 1</span>\n\n<span># \"2>/dev/null\" 的作用是什么？</span>\n<span># 如果将其移除会发生什么？</span>\n<span># 尝试移除这条语句并重新执行脚本。</span>\n\n<span># ======================================= #</span>\n\n<span># (( ... )) 在 if-then 中也非常有用</span>\n\n<span>var1</span><span>=</span><span>5</span>\n<span>var2</span><span>=</span><span>4</span>\n\n<span>if</span> <span><span>((</span> var1 <span>></span> var2 <span>))</span></span>\n<span>then</span> <span>#^      ^      注意不是 $var1 和 $var2，为什么？</span>\n  <span>echo</span> <span>\"<span>$var1</span> is greater then <span>$var2</span>\"</span>\n<span>fi</span>     <span># 5 大于 4</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div><hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>标记是一个具有特殊意义（<a href=\"http://tldp.org/LDP/abs/html/x17129.html#METAMEANINGREF\" target=\"_blank\" rel=\"noopener noreferrer\">元语义</a>）的符号或者短字符串。在 Bash 里像 <code>[</code> 和 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#DOTREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>.（点命令）</code></a> 这样的标记可以扩展成关键字和命令。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "7.2 文件测试操作",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_2_file_test_operators/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_2_file_test_operators/",
      "content_html": "<h1 id=\"_7-2-文件测试操作\"> 7.2 文件测试操作</h1>\n<p>下列每一个运算符在满足其下条件时，返回的结果为真。</p>\n<h3 id=\"e\"> -e</h3>\n<p>检测文件是否存在</p>\n<h3 id=\"a\"> -a</h3>\n<p>检测文件是否存在</p>\n<p>等价于 <code>-e</code>。不推荐使用，已被弃用<sup></sup>。</p>\n<h3 id=\"f\"> -f</h3>\n<p>文件是常规文件(regular file)，而非目录或 <a href=\"http://tldp.org/LDP/abs/html/devref1.html#DEVFILEREF\" target=\"_blank\" rel=\"noopener noreferrer\">设备文件</a></p>\n<h3 id=\"s\"> -s</h3>\n<p>文件大小不为0</p>\n<h3 id=\"d\"> -d</h3>\n<p>文件是一个目录</p>\n<h3 id=\"b\"> -b</h3>\n<p>文件是一个 <a href=\"http://tldp.org/LDP/abs/html/devref1.html#BLOCKDEVREF\" target=\"_blank\" rel=\"noopener noreferrer\">块设备</a></p>\n<h3 id=\"c\"> -c</h3>\n<p>文件是一个 <a href=\"http://tldp.org/LDP/abs/html/devref1.html#CHARDEVREF\" target=\"_blank\" rel=\"noopener noreferrer\">字符设备</a></p>\n<div><pre><code><span>device0</span><span>=</span><span>\"/dev/sda2\"</span>    <span># /   (根目录)</span>\n<span>if</span> <span>[</span> -b <span>\"<span>$device0</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$device0</span> is a block device.\"</span>\n<span>fi</span>\n\n<span># /dev/sda2 是一个块设备。</span>\n\n\n\n<span>device1</span><span>=</span><span>\"/dev/ttyS1\"</span>   <span># PCMCIA 调制解调卡</span>\n<span>if</span> <span>[</span> -c <span>\"<span>$device1</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$device1</span> is a character device.\"</span>\n<span>fi</span>\n\n<span># /dev/ttyS1 是一个字符设备。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"p\"> -p</h3>\n<p>文件是一个 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#PIPEREF\" target=\"_blank\" rel=\"noopener noreferrer\">管道设备</a></p>\n<div><pre><code><span>function</span> <span>show_input_type</span><span>(</span><span>)</span>\n<span>{</span>\n   <span>[</span> -p /dev/fd/0 <span>]</span> <span>&amp;&amp;</span> <span>echo</span> PIPE <span>||</span> <span>echo</span> STDIN\n<span>}</span>\n\nshow_input_type <span>\"Input\"</span>                           <span># STDIN</span>\n<span>echo</span> <span>\"Input\"</span> <span>|</span> show_input_type                    <span># PIPE</span>\n\n<span># 这个例子由 Carl Anderson 提供。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"h\"> -h</h3>\n<p>文件是一个 <a href=\"http://tldp.org/LDP/abs/html/basic.html#SYMLINKREF\" target=\"_blank\" rel=\"noopener noreferrer\">符号链接</a></p>\n<h3 id=\"l\"> -L</h3>\n<p>文件是一个符号链接</p>\n<h3 id=\"s-2\"> -S</h3>\n<p>文件是一个 <a href=\"http://tldp.org/LDP/abs/html/devref1.html#SOCKETREF\" target=\"_blank\" rel=\"noopener noreferrer\">套接字</a></p>\n<h3 id=\"t\"> -t</h3>\n<p>文件（<a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#FDREF\" target=\"_blank\" rel=\"noopener noreferrer\">文件描述符</a>）与终端设备关联</p>\n<p>该选项通常被用于 <a href=\"http://tldp.org/LDP/abs/html/intandnonint.html#II2TEST\" target=\"_blank\" rel=\"noopener noreferrer\">测试</a> 脚本中的 <code>stdin [ -t 0 ]</code> 或 <code>stdout [ -t 1 ]</code> 是否为终端设备。</p>\n<h3 id=\"r\"> -r</h3>\n<p>该文件对执行测试的用户可读</p>\n<h3 id=\"w\"> -w</h3>\n<p>该文件对执行测试的用户可写</p>\n<h3 id=\"x\"> -x</h3>\n<p>该文件可被执行测试的用户所执行</p>\n<h3 id=\"g\"> -g</h3>\n<p>文件或目录设置了 set-group-id <code>sgid</code> 标志</p>\n<p>如果一个目录设置了 <code>sgid</code> 标志，那么在该目录中所有的新建文件的权限组都归属于该目录的权限组，而非文件创建者的权限组。该标志对共享文件夹很有用。</p>\n<h3 id=\"u\"> -u</h3>\n<p>文件设置了 set-user-id <code>suid</code> 标志。</p>\n<p>一个属于 root 的可执行文件设置了 <code>suid</code> 标志后，即使是一个普通用户执行也拥有 root 权限<sup></sup>。对需要访问硬件设备的可执行文件（例如 <code>pppd</code> 和 <code>cdrecord</code>）很有用。如果没有 <code>suid</code> 标志，这些可执行文件就不能被非 root 用户所调用了。</p>\n<div><pre><code>-rwsr-xr-t    1 root       178236 Oct  2  2000 /usr/sbin/pppd\n</code></pre>\n<div><span>1</span><br></div></div><p>设置了 <code>suid</code> 标志后，在权限中会显示 <code>s</code>。</p>\n<h3 id=\"k\"> -k</h3>\n<p>设置了粘滞位(sticky bit)。</p>\n<p>标志粘滞位是一种特殊的文件权限。如果文件设置了粘滞位，那么该文件将会被存储在高速缓存中以便快速访问<sup></sup>。如果目录设置了该标记，那么它将会对目录的写权限进行限制，目录中只有文件的拥有者可以修改或删除文件。设置标记后你可以在权限中看到 <code>t</code>。</p>\n<div><pre><code>drwxrwxrwt    7 root         1024 May 19 21:26 tmp/\n</code></pre>\n<div><span>1</span><br></div></div><p>如果一个用户不是设置了粘滞位目录的拥有者，但对该目录有写权限，那么他仅仅可以删除目录中他所拥有的文件。这可以防止用户不经意间删除或修改其他人的文件，例如 <code>/tmp</code> 文件夹。（当然目录的所有者可以删除或修改该目录下的所有文件）</p>\n<h3 id=\"o\"> -O</h3>\n<p>执行用户是文件的拥有者</p>\n<h3 id=\"g-2\"> -G</h3>\n<p>文件的组与执行用户的组相同</p>\n<h3 id=\"n\"> -N</h3>\n<p>文件在在上次访问后被修改过了</p>\n<h3 id=\"f1-nt-f2\"> f1 -nt f2</h3>\n<p>文件 f1 比文件 f2 新</p>\n<h3 id=\"f1-ot-f2\"> f1 -ot f2</h3>\n<p>文件 f1 比文件 f2 旧</p>\n<h3 id=\"f1-ef-f2\"> f1 -ef f2</h3>\n<p>文件 f1 和文件 f2 硬链接到同一个文件</p>\n<h3 id=\"\"> !</h3>\n<p>取反——对测试结果取反(如果条件缺失则返回真)。</p>\n<p>样例 7-4. 检测链接是否损坏</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># broken-link.sh</span>\n<span># Lee bigelow &lt;ligelowbee@yahoo.com> 编写。</span>\n<span># ABS Guide 经许可可以使用。</span>\n\n<span>#  该脚本用来发现输出损坏的链接。输出的结果是被引用的，</span>\n<span>#+ 所以可以直接导到 xargs 中进行处理 ：）</span>\n<span>#  例如：sh broken-link.sh /somedir /someotherdir|xargs rm</span>\n<span>#</span>\n<span>#  更加优雅的方式：</span>\n<span>#</span>\n<span>#  find \"somedir\" -type 1 -print0|\\</span>\n<span>#  xargs -r0 file|\\</span>\n<span>#  grep \"broken symbolic\"|</span>\n<span>#  sed -e 's/^\\|: *broken symbolic.*$/\"/g'</span>\n<span>#</span>\n<span>#  但是这种方法不是纯 Bash 写法。</span>\n<span>#  警告：小心 /proc 文件下的文件和任意循环链接！</span>\n<span>############################################</span>\n\n\n<span>#  如果不给脚本传任何参数，那么 directories-to-search 设置为当前目录</span>\n<span>#+ 否则设置为传进的参数</span>\n<span>#####################</span>\n\n<span>[</span> <span>$#</span> -eq <span>0</span> <span>]</span> <span>&amp;&amp;</span> <span>directory</span><span>=</span><span><span>`</span><span>pwd</span><span>`</span></span> <span>||</span> <span>directory</span><span>=</span><span>$@</span>\n\n\n<span>#  函数 linkchk 是用来检测传入的文件夹中是否包含损坏的链接文件，</span>\n<span>#+ 并引用输出他们。</span>\n<span>#  如果文件夹中包含子文件夹，那么将子文件夹继续传给 linkchk 函数进行检测。</span>\n<span>#################</span>\n\n<span>linkchk</span> <span>(</span><span>)</span> <span>{</span>\n    <span>for</span> <span>element</span> <span>in</span> <span>$1</span>/*<span>;</span> <span>do</span>\n      <span>[</span> -h <span>\"<span>$element</span>\"</span> -a <span>!</span> -e <span>\"<span>$element</span>\"</span> <span>]</span> <span>&amp;&amp;</span> <span>echo</span> <span>\\</span>\"<span>$element</span><span>\\</span>\"\n      <span>[</span> -d <span>\"<span>$element</span>\"</span> <span>]</span> <span>&amp;&amp;</span> linkchk <span>$element</span>\n    <span># -h 用来检测是否是链接，-d 用来检测是否是文件夹。</span>\n    <span>done</span>\n<span>}</span>\n\n<span>#  检测传递给 linkchk() 函数的参数是否是一个存在的文件夹，</span>\n<span>#+ 如果不是则报错。</span>\n<span>################</span>\n<span>for</span> <span>directory</span> <span>in</span> <span>$direcotrys</span><span>;</span> <span>do</span>\n    <span>if</span> <span>[</span> -d <span>$directory</span> <span>]</span>\n        <span>then</span> linkchk <span>$directory</span>\n        <span>else</span>\n            <span>echo</span> <span>\"<span>$directory</span> is not a directory\"</span>\n            <span>echo</span> <span>\"Usage <span>$0</span> dir1 dir2 ...\"</span>\n    <span>fi</span>\n<span>done</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div><p><a href=\"http://tldp.org/LDP/abs/html/zeros.html#COOKIES\" target=\"_blank\" rel=\"noopener noreferrer\">样例 31-1</a>，<a href=\"http://tldp.org/LDP/abs/html/loops1.html#BINGREP\" target=\"_blank\" rel=\"noopener noreferrer\">样例 11-8</a>，<a href=\"http://tldp.org/LDP/abs/html/loops1.html#FILEINFO\" target=\"_blank\" rel=\"noopener noreferrer\">样例 11-3</a>，<a href=\"http://tldp.org/LDP/abs/html/zeros.html#RAMDISK\" target=\"_blank\" rel=\"noopener noreferrer\">样例 31-3</a>和<a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#MAILFORMAT\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-1</a> 也包含了测试运算符的使用。</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>摘自1913年版本的韦氏词典<br><pre>Deprecate<br>...<br><br>To pray against, as an evil;<br>to seek to avert by prayer;<br>to desire the removal of;<br>to seek deliverance from;<br>to express deep regret for;<br>to disapprove of strongly.</pre> </p>\n</li>\n<li id=\"fn2\"><p>注意使用 suid 的可执行文件可能会带来安全问题。suid 标记对 shell 脚本没有影响。 </p>\n</li>\n<li id=\"fn3\"><p>在 Linux 系统中，文件已经不使用粘滞位了, 粘滞位只作用于目录。 </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "7.3 其他比较操作",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_3_other_comparison_operators/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_3_other_comparison_operators/",
      "content_html": "<h1 id=\"_7-3-其他比较操作\"> 7.3 其他比较操作</h1>\n<p>二元比较操作比较变量或者数量。注意整数和字符串比较使用的是两套运算符。</p>\n<h2 id=\"整数比较\"> 整数比较</h2>\n<h3 id=\"eq\"> -eq</h3>\n<p>等于</p>\n<p><code>if [ &quot;$a&quot; -eq &quot;$b&quot; ]</code></p>\n<h3 id=\"ne\"> -ne</h3>\n<p>不等于</p>\n<p><code>if [ &quot;$a&quot; -ne &quot;$b&quot; ]</code></p>\n<h3 id=\"gt\"> -gt</h3>\n<p>大于</p>\n<p><code>if [ &quot;$a&quot; -gt &quot;$b&quot; ]</code></p>\n<h3 id=\"ge\"> -ge</h3>\n<p>大于等于</p>\n<p><code>if [ &quot;$a&quot; -ge &quot;$b&quot; ]</code></p>\n<h3 id=\"lt\"> -lt</h3>\n<p>小于</p>\n<p><code>if [ &quot;$a&quot; -lt &quot;$b&quot; ]</code></p>\n<h3 id=\"le\"> -le</h3>\n<p>小于等于</p>\n<p><code>if [ &quot;$a&quot; -le &quot;$b&quot; ]</code></p>\n<h3 id=\"\"> &lt;</h3>\n<p>小于（使用 <a href=\"http://tldp.org/LDP/abs/html/dblparens.html\" target=\"_blank\" rel=\"noopener noreferrer\">双圆括号</a>）</p>\n<p><code>((&quot;$a&quot; &lt; &quot;$b&quot;))</code></p>\n<h3 id=\"-2\"> &lt;=</h3>\n<p>小于等于（使用双圆括号）</p>\n<p><code>((&quot;$a&quot; &lt;= &quot;$b&quot;))</code></p>\n<h3 id=\"-3\"> &gt;</h3>\n<p>大于（使用双圆括号）</p>\n<p><code>((&quot;$a&quot; &gt; &quot;$b&quot;))</code></p>\n<h3 id=\"-4\"> &gt;=</h3>\n<p>大于等于（使用双圆括号）</p>\n<p><code>((&quot;$a&quot; &gt;= &quot;$b&quot;))</code></p>\n<h2 id=\"字符串比较\"> 字符串比较</h2>\n<h3 id=\"-5\"> =</h3>\n<p>等于</p>\n<p><code>if [ &quot;$a&quot; = &quot;$b&quot; ]</code></p>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 注意在<code>=</code>前后要加上<a href=\"http://tldp.org/LDP/abs/images/caution.gif\" target=\"_blank\" rel=\"noopener noreferrer\">空格</a></p>\n<p><code>if [ &quot;$a&quot;=&quot;$b&quot; ]</code> 和上面不等价。</p>\n<h3 id=\"-6\"> ==</h3>\n<p>等于</p>\n<p><code>if [ &quot;$a&quot; == &quot;$b&quot; ]</code></p>\n<p>和 <code>=</code> 同义</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> <code>==</code> 运算符在 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#DBLBRACKETS\" target=\"_blank\" rel=\"noopener noreferrer\">双方括号</a> 和单方括号里表现不同。</p>\n<div><pre><code><span>[</span><span>[</span> <span>$a</span> <span>==</span> z* <span>]</span><span>]</span>   <span># $a 以 \"z\" 开头时为真（模式匹配）</span>\n<span>[</span><span>[</span> <span>$a</span> <span>==</span> <span>\"z*\"</span> <span>]</span><span>]</span> <span># $a 等于 z* 时为真（字符匹配）</span>\n\n<span>[</span> <span>$a</span> <span>==</span> z* <span>]</span>     <span># 发生文件匹配和字符分割。</span>\n<span>[</span> <span>\"<span>$a</span>\"</span> <span>==</span> <span>\"z*\"</span> <span>]</span> <span># $a 等于 z* 时为真（字符匹配）</span>\n\n<span># 感谢 Stéphane Chazelas</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"-7\"> !=</h3>\n<p>不等于</p>\n<p><code>if [ &quot;$a&quot; != &quot;$b&quot; ]</code></p>\n<p>在 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#DBLBRACKETS\" target=\"_blank\" rel=\"noopener noreferrer\"><code>[[ ... ]]</code></a> 结构中会进行模式匹配。</p>\n<h3 id=\"-8\"> &lt;</h3>\n<p>小于，按照 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#ASCIIDEF\" target=\"_blank\" rel=\"noopener noreferrer\">ASCII码</a> 排序。</p>\n<p><code>if [[ &quot;$a&quot; &lt; &quot;$b&quot; ]]</code></p>\n<p><code>if [ &quot;$a&quot; \\&lt; &quot;$b&quot; ]</code></p>\n<p>注意在 <code>[]</code> 结构里 <code>&lt;</code> 需要被 <a href=\"http://tldp.org/LDP/abs/html/escapingsection.html#ESCP\" target=\"_blank\" rel=\"noopener noreferrer\">转义</a>。</p>\n<h3 id=\"-9\"> &gt;</h3>\n<p>大于，按照 ASCII 码排序。</p>\n<p><code>if [[ &quot;$a&quot; &gt; &quot;$b&quot; ]]</code></p>\n<p><code>if [ &quot;$a&quot; \\&gt; &quot;$b&quot; ]</code></p>\n<p>注意在 <code>[]</code> 结构里 <code>&gt;</code> 需要被转义。</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/arrays.html#BUBBLE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 27-11</a> 包含了比较运算符。</p>\n<h3 id=\"z\"> -z</h3>\n<p>字符串为空，即字符串长度为0。</p>\n<div><pre><code><span>String</span><span>=</span><span>''</span>   <span># 长度为0的字符串变量。</span>\n\n<span>if</span> <span>[</span> -z <span>\"<span>$String</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"\\<span>$String</span> is null.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"\\<span>$String</span> is NOT null.\"</span>\n<span>fi</span>     <span># $String is null.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"n\"> -n</h3>\n<p>字符串非空（<code>null</code>）。</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 使用 <code>-n</code> 时字符串必须是在括号中且被引用的。使用 <code>! -z</code> 判断未引用的字符串或者直接判断（<a href=\"http://tldp.org/LDP/abs/html/comparison-ops.html#STRTEST\" target=\"_blank\" rel=\"noopener noreferrer\">样例 7-6</a>）通常可行，但是非常危险。判断字符串时一定要引用<sup></sup>。</p>\n<p>样例 7-5. 算术比较和字符串比较</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>a</span><span>=</span><span>4</span>\n<span>b</span><span>=</span><span>5</span>\n\n<span># 这里的 \"a\" 和 \"b\" 可以是整数也可以是字符串。</span>\n<span># 因为 Bash 的变量是弱类型的，因此字符串和整数比较有很多相同之处。</span>\n\n<span># 在 Bash 中可以用处理整数的方式来处理全是数字的字符串。</span>\n<span># 但是谨慎使用。</span>\n\n<span>echo</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -ne <span>\"<span>$b</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$a</span> is not equal to <span>$b</span>\"</span>\n  <span>echo</span> <span>\"(arithmetic comparison)\"</span>\n<span>fi</span>\n\n<span>echo</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> <span>!=</span> <span>\"<span>$b</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$a</span> is not equal to <span>$b</span>.\"</span>\n  <span>echo</span> <span>\"(string comparison)\"</span>\n  <span>#     \"4\"  != \"5\"</span>\n  <span># ASCII 52 != ASCIII 53</span>\n<span>fi</span>\n\n<span># 在这个例子里 \"-ne\" 和 \"!=\" 都可以。</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>样例 7-6. 测试字符串是否为空（<code>null</code>）</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># str-test.sh: 测试是否为空字符串或是未引用的字符串。</span>\n\n<span># 使用 if [ ... ] 结构</span>\n\n<span># 如果字符串未被初始化，则其值是未定义的。</span>\n<span># 这种状态就是空 \"null\"（并不是 0）。</span>\n\n<span>if</span> <span>[</span> -n <span>$string1</span> <span>]</span>    <span># 并未声明或是初始化 string1。</span>\n<span>then</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is not null.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is null.\"</span>\n<span>fi</span>\n<span># 尽管没有初始化 string1，但是结果显示其非空。</span>\n\n<span>echo</span>\n\n<span># 再试一次。</span>\n\n<span>if</span> <span>[</span> -n <span>\"<span>$string1</span>\"</span> <span>]</span>   <span># 这次引用了 $string1。</span>\n<span>then</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is not null.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is null.\"</span>\n<span>fi</span>                    <span># 在测试括号内引用字符串得到了正确的结果。</span>\n\n<span>echo</span>\n\n<span>if</span> <span>[</span> <span>$string1</span> <span>]</span>       <span># 这次只有一个 $string1。</span>\n<span>then</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is not null.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is null.\"</span>\n<span>fi</span>                    <span># 结果正确。</span>\n<span># 独立的 [ ... ] 测试运算符可以用来检测字符串是否为空。</span>\n<span># 但是最好将字符串进行引用（if [ \"$string1\" ]）。</span>\n<span>#</span>\n<span># Stephane Chazelas 指出：</span>\n<span>#    if [ $string1 ]    只有一个参数 \"]\"</span>\n<span>#    if [ \"$string1\" ]  则有两个参数，空的 \"$string1\" 和 \"]\"</span>\n\n\n<span>echo</span>\n\n\n<span>string1</span><span>=</span>initialized\n\n<span>if</span> <span>[</span> <span>$string1</span> <span>]</span>       <span># $string1 这次仍然没有被引用。</span>\n<span>then</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is not null.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is null.\"</span>\n<span>fi</span>                    <span># 这次的结果仍然是正确的。</span>\n<span># 最好将字符串引用（\"$string1\"）</span>\n\n\n<span>string1</span><span>=</span><span>\"a = b\"</span>\n\n<span>if</span> <span>[</span> <span>$string1</span> <span>]</span>       <span># $string1 这次仍然没有被引用。</span>\n<span>then</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is not null.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"String <span title=\"\\&quot;\">\\\"</span>string1<span title=\"\\&quot;\">\\\"</span> is null.\"</span>\n<span>fi</span>                    <span># 这次没有引用就错了。</span>\n\n<span>exit</span> <span>0</span>   <span># 同时感谢 Florian Wisser 的提示。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br></div></div><p>样例 7-7. <code>zmore</code></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># zmore</span>\n\n<span># 使用筛选器 'more' 查看 gzipped 文件。</span>\n\n<span>E_NOARGS</span><span>=</span><span>85</span>\n<span>E_NOTFOUND</span><span>=</span><span>86</span>\n<span>E_NOTGZIP</span><span>=</span><span>87</span>\n\n<span>if</span> <span>[</span> <span>$#</span> -eq <span>0</span> <span>]</span> <span># 作用和 if [ -z \"$1\" ] 相同。</span>\n<span># $1 可以为空： zmore \"\" arg2 arg3</span>\n<span>then</span>\n  <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> filename\"</span> <span>></span><span>&amp;2</span>\n  <span># 将错误信息通过标准错误 stderr 进行输出。</span>\n  <span>exit</span> <span>$E_NOARGS</span>\n  <span># 脚本的退出状态为 85.</span>\n<span>fi</span>\n\n<span>filename</span><span>=</span><span>$1</span>\n\n<span>if</span> <span>[</span> <span>!</span> -f <span>\"<span>$filename</span>\"</span> <span>]</span>   <span># 引用字符串以防字符串中带有空格。</span>\n<span>then</span>\n  <span>echo</span> <span>\"File <span>$filename</span> not found!\"</span> <span>></span><span>&amp;2</span>   <span># 通过标准错误 stderr 进行输出。</span>\n  <span>exit</span> <span>$E_NOTFOUND</span>\n<span>fi</span>\n\n<span>if</span> <span>[</span> <span>${filename<span>##</span>*.}</span> <span>!=</span> <span>\"gz\"</span> <span>]</span>\n<span># 在括号内使用变量代换。</span>\n<span>then</span>\n  <span>echo</span> <span>\"File <span>$1</span> is not a gzipped file!\"</span>\n  <span>exit</span> <span>$E_NOTGZIP</span>\n<span>fi</span>\n\nzcat <span>$1</span> <span>|</span> <span>more</span>\n\n<span># 使用筛选器 'more'</span>\n<span># 也可以用 'less' 替代</span>\n\n<span>exit</span> <span>$?</span>   <span># 脚本的退出状态由管道 pipe 的退出状态决定。</span>\n<span>#  实际上 \"exit $?\" 不一定要写出来，</span>\n<span>#+ 因为无论如何脚本都会返回最后执行命令的退出状态。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><h2 id=\"复合比较\"> 复合比较</h2>\n<h3 id=\"a\"> -a</h3>\n<p>逻辑与</p>\n<p><code>exp1 -a exp2</code> 返回真当且仅当 <code>exp1</code> 和 <code>exp2</code> 均为真。</p>\n<h3 id=\"o\"> -o</h3>\n<p>逻辑或</p>\n<p>如果 <code>exp1</code> 或 <code>exp2</code> 为真，则 <code>exp1 -o exp2</code> 返回真。</p>\n<p>以上两个操作和 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#DBLBRACKETS\" target=\"_blank\" rel=\"noopener noreferrer\">双方括号</a> 结构中的 Bash 比较运算符号 <code>&amp;&amp;</code> 和 <code>||</code> 类似。</p>\n<div><pre><code><span>[</span><span>[</span> condition1 <span>&amp;&amp;</span> condition2 <span>]</span><span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>测试操作 <code>-o</code> 和 <code>-a</code> 可以在 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#TTESTREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>test</code></a> 命令或在测试括号中进行。</p>\n<div><pre><code><span>if</span> <span>[</span> <span>\"<span>$expr1</span>\"</span> -a <span>\"<span>$expr2</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Both expr1 and expr2 are true.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"Either expr1 or expr2 is false.\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> rihad 指出：</p>\n<div><pre><code><span>[</span> <span>1</span> -eq <span>1</span> <span>]</span> <span>&amp;&amp;</span> <span>[</span> -n <span>\"<span><span>`</span><span>echo</span> <span>true</span> <span><span>1</span>></span><span>&amp;2</span><span>`</span></span>\"</span> <span>]</span>   <span># 真</span>\n<span>[</span> <span>1</span> -eq <span>2</span> <span>]</span> <span>&amp;&amp;</span> <span>[</span> -n <span>\"<span><span>`</span><span>echo</span> <span>true</span> <span><span>1</span>></span><span>&amp;2</span><span>`</span></span>\"</span> <span>]</span>   <span># 没有输出</span>\n<span># ^^^^^^^ 条件为假。到这里为止，一切都按预期执行。</span>\n\n<span># 但是</span>\n<span>[</span> <span>1</span> -eq <span>2</span> -a -n <span>\"<span><span>`</span><span>echo</span> <span>true</span> <span><span>1</span>></span><span>&amp;2</span><span>`</span></span>\"</span> <span>]</span>       <span># 真</span>\n<span># ^^^^^^^ 条件为假。但是为什么结果为真？</span>\n\n<span># 是因为括号内的两个条件子句都执行了么？</span>\n<span>[</span><span>[</span> <span>1</span> -eq <span>2</span> <span>&amp;&amp;</span> -n <span>\"<span><span>`</span><span>echo</span> <span>true</span> <span><span>1</span>></span><span>&amp;2</span><span>`</span></span>\"</span> <span>]</span><span>]</span>     <span># 没有输出</span>\n<span># 并不是。</span>\n\n<span>#  所以显然 &amp;&amp; 和 || 具备“短路”机制，</span>\n<span>#+ 例如对于 &amp;&amp;，若第一个表达式为假，则不执行第二个表达式直接返回假，</span>\n<span>#+ 而 -a 和 -o 则不是。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>复合比较操作的例子可以参考 <a href=\"http://tldp.org/LDP/abs/html/ops.html#ANDOR\" target=\"_blank\" rel=\"noopener noreferrer\">样例 8-3</a>，<a href=\"http://tldp.org/LDP/abs/html/arrays.html#TWODIM\" target=\"_blank\" rel=\"noopener noreferrer\">样例 27-17</a> 和 <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#WHX\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-29</a>。</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>S.C. 指出在复合测试中，仅仅引用字符串可能还不够。比如表达式 <code>[ -n &quot;$string&quot; -o &quot;$a&quot; = &quot;$b&quot; ]</code> 在某些 Bash 版本下，如果 <code>$string</code> 为空可能会出错。更加安全的方式是，对于可能为空的字符串，添加一个额外的字符，例如 <code>[ &quot;x$string&quot; != x -o &quot;x$a&quot; = &quot;x$b&quot; ]</code>（其中的 x 互相抵消）。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "7.4 嵌套 if/then 条件测试",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_4_nested_if_then_condition_tests/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_4_nested_if_then_condition_tests/",
      "content_html": "<h1 id=\"_7-4-嵌套-if-then-条件测试\"> 7.4 嵌套 if/then 条件测试</h1>\n<p>可以嵌套 <code>if/then</code> 条件测试结构。嵌套的结果等价于使用 <a href=\"http://tldp.org/LDP/abs/html/ops.html#LOGOPS1\" target=\"_blank\" rel=\"noopener noreferrer\"><code>&amp;&amp;</code></a> 复合比较运算符。</p>\n<div><pre><code><span>a</span><span>=</span><span>3</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -gt <span>0</span> <span>]</span>\n<span>then</span>\n  <span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -lt <span>5</span> <span>]</span>\n  <span>then</span>\n    <span>echo</span> <span>\"The value of <span title=\"\\&quot;\">\\\"</span>a<span title=\"\\&quot;\">\\\"</span> lies somewhere between 0 and 5.\"</span>\n  <span>fi</span>\n<span>fi</span>\n\n<span># 和下面的结果相同</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -gt <span>0</span> <span>]</span> <span>&amp;&amp;</span> <span>[</span> <span>\"<span>$a</span>\"</span> -lt <span>5</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"The value of <span title=\"\\&quot;\">\\\"</span>a<span title=\"\\&quot;\">\\\"</span> lies somewhere between 0 and 5.\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>在 <a href=\"http://tldp.org/LDP/abs/html/bashver2.html#CARDS\" target=\"_blank\" rel=\"noopener noreferrer\">样例 37-4</a> 和 <a href=\"http://tldp.org/LDP/abs/html/system.html#BACKLIGHT\" target=\"_blank\" rel=\"noopener noreferrer\">样例 17-11</a> 中展示了嵌套 <code>if/then</code> 条件测试结构。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "7.5 牛刀小试",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_5_testing_your_knowledge_of_tests/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_5_testing_your_knowledge_of_tests/",
      "content_html": "<h1 id=\"_7-5-牛刀小试\"> 7.5 牛刀小试</h1>\n<p>系统文件 <code>xinitrc</code> 可以用来启动软件 X Server。该文件包含了许多 <code>if/then</code> 测试结构。下面的代码摘录自较早版本的 <code>xinitrc</code>（大约在 Red Hat 7.1 版本）。</p>\n<div><pre><code><span>if</span> <span>[</span> -f <span>$HOME</span>/.Xclients <span>]</span><span>;</span> <span>then</span>\n  <span>exec</span> <span>$HOME</span>/.Xclients\n<span>elif</span> <span>[</span> -f /etc/X11/xinit/Xclients <span>]</span><span>;</span> <span>then</span>\n  <span>exec</span> /etc/X11/xinit/Xclients\n<span>else</span>\n    <span># 安全分支。尽管程序不会执行这个分支。</span>\n    <span># （我们在 Xclients 中也提供了相同的机制）增强程序可靠性。</span>\n    xclock -geometry 100x100-5+5 <span>&amp;</span>\n    xterm -geometry 80x50-50+150 <span>&amp;</span>\n    <span>if</span> <span>[</span> -f /usr/bin/netscape -a -f /usr/share/doc/HTML/index.html <span>]</span><span>;</span> <span>then</span>\n            netscape /usr/share/doc/HTML/index.html\n    <span>fi</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>试着解释代码片段中的条件测试结构, 然后试着在 /etc/X11/xinit/xinitrc 查看最新版本，并且分析其中的 if/then 条件测试结构。为了更好的进行分析，你可能需要继续阅读后面章节中对 <a href=\"http://tldp.org/LDP/abs/html/textproc.html#GREPREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>grep</code></a>，<a href=\"http://tldp.org/LDP/abs/html/sedawk.html#SEDREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>sed</code></a> 和 <a href=\"http://tldp.org/LDP/abs/html/regexp.html#REGEXREF\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a> 的讨论。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第七章 测试",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_tests/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/07_tests/",
      "content_html": "<h1 id=\"第七章-测试\"> 第七章 测试</h1>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./07_1_test_constructs.html\">7.1 测试结构</a></li>\n<li><a href=\"./07_2_file_test_operators.html\">7.2 文件测试操作</a></li>\n<li><a href=\"./07_3_other_comparison_operators.html\">7.3 其他比较操作</a></li>\n<li><a href=\"./07_4_nested_if_then_condition_tests.html\">7.4 嵌套 if/then 条件测试</a></li>\n<li><a href=\"./07_5_testing_your_knowledge_of_tests.html\">7.5 牛刀小试</a></li>\n</ul>\n<p>每一个完备的程序设计语言都可以对一个条件进行判断，然后根据判断结果执行相应的指令。Bash 拥有 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#TTESTREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>test</code></a> 命令，<a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#DBLBRACKETS\" target=\"_blank\" rel=\"noopener noreferrer\">双方括号</a>、<a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#DBLPARENSTST\" target=\"_blank\" rel=\"noopener noreferrer\">双圆括号</a> 测试操作符以及 <code>if/then</code> 测试结构。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "8.1. 运算符",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_1_operators/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_1_operators/",
      "content_html": "<h1 id=\"_8-1-运算符\"> 8.1. 运算符</h1>\n<h2 id=\"赋值运算符\"> 赋值运算符</h2>\n<p><em>变量赋值</em>，初始化或改变一个变量的值。</p>\n<h3 id=\"\"> =</h3>\n<p>等号<code>=</code>赋值运算符，既可用于算术赋值，也可用于字符串赋值。</p>\n<div><pre><code>var=27\ncategory=minerals  # &quot;=&quot;左右不允许有空格\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 注意，不要混淆<code>=</code>赋值运算符与<code>=</code><a href=\"http://tldp.org/LDP/abs/html/comparison-ops.html#EQUALSIGNREF\" target=\"_blank\" rel=\"noopener noreferrer\">测试操作符</a>。</p>\n</blockquote>\n<div><pre><code>#   =   作为测试操作符\n\nif [ &quot;$string1&quot; = &quot;$string2&quot; ]\nthen\n   command\nfi\n\n#  [ &quot;X$string1&quot; = &quot;X$string2&quot; ] 这样写是安全的,\n#  这样写可以避免任意一个变量为空时的报错。\n#  (变量前加的&quot;X&quot;字符规避了变量为空的情况)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"算术运算符\"> 算术运算符</h2>\n<h3 id=\"-2\"> +</h3>\n<p>加</p>\n<h3 id=\"-3\"> -</h3>\n<p>减</p>\n<h3 id=\"-4\"> *</h3>\n<p>乘</p>\n<h3 id=\"-5\"> /</h3>\n<p>除</p>\n<h3 id=\"-6\"> **</h3>\n<p>幂运算</p>\n<div><pre><code># Bash, 2.02版本，推出了&quot;**&quot;幂运算操作符。\n\nlet &quot;z=5**3&quot;    # 5 * 5 * 5\necho &quot;z = $z&quot;   # z = 125\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"-7\"> %</h3>\n<p>取余(返回整数除法的余数)</p>\n<div><pre><code>bash$ expr 5 % 3\n2\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>5/3=1，余2\n取余运算符经常被用于生成一定范围内的数( 案例9-11, 案例9-15)，以及格式化程序输出(案例 27-16，案例 A-6)。\n取余运算符还可以用来产生素数（案例A-15），取余的出现大大扩展了整数的算术运算。</p>\n<p><strong>样例 8-1. 最大公约数</strong></p>\n<div><pre><code>#!/bin/bash\n# gcd.sh: 最大公约数\n#         使用欧几里得算法\n\n#  两个整数的最大公约数（gcd）\n#  是两数能同时整除的最大数\n\n#  欧几里得算法使用辗转相除法\n#    In each pass,\n#       dividend &lt;---  divisor\n#       divisor  &lt;---  remainder\n#    until remainder = 0.\n#    The gcd = dividend, on the final pass.\n#\n#  关于欧几里得算法更详细的讨论，可以查看:\n#  Jim Loy&#39;s site, http://www.jimloy.com/number/euclids.htm.\n\n\n# ------------------------------------------------------\n# 参数检查\nARGS=2\nE_BADARGS=85\n\nif [ $# -ne &quot;$ARGS&quot; ]\nthen\n  echo &quot;Usage: `basename $0` first-number second-number&quot;\n  exit $E_BADARGS\nfi\n# ------------------------------------------------------\n\n\ngcd ()\n{\n\n  dividend=$1             #  随意赋值，\n  divisor=$2              #  两数谁大谁小是无关紧要的，\n                          #  为什么?\n\n  remainder=1             #  如果在测试括号里使用了一个未初始化的变量，\n                          #  会报错的。\n\n  until [ &quot;$remainder&quot; -eq 0 ]\n  do    #  ^^^^^^^^^^  该变量必须在使用前初始化！\n    let &quot;remainder = $dividend % $divisor&quot;\n    dividend=$divisor     # 对被除数，除数重新赋值\n    divisor=$remainder\n  done                    # 欧几里得算法\n\n}                         # 最后的 $dividend 就是最大公约数（gcd）\n\n\ngcd $1 $2\n\necho; echo &quot;GCD of $1 and $2 = $dividend&quot;; echo\n\n\n# 练习 :\n# ---------\n# 1) 检查命令行参数，保证其为整数，\n#+   如果有错误，捕捉错误并在脚本退出前打印出适当的错误信息。\n# 2) 使用本地变量(local variables)重写gcd()函数。\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br></div></div><h3 id=\"-8\"> +=</h3>\n<p>加等 （加上一个数）<sup></sup>\n<code>let &quot;var += 5&quot;</code> 的结果是<code>var</code>变量的值增加了5。</p>\n<h3 id=\"-9\"> -=</h3>\n<p>减等 （减去一个数）</p>\n<h3 id=\"-10\"> *=</h3>\n<p>乘等 （乘以一个数）\n<code>let &quot;var *= 4&quot;</code> 的结果是<code>var</code>变量的值乘了4。</p>\n<h3 id=\"-11\"> /=</h3>\n<p>除等 （除以一个数）</p>\n<h3 id=\"-12\"> %=</h3>\n<p>余等 （取余赋值）</p>\n<h3 id=\"小结\"> 小结</h3>\n<p>算术运算符常用于<code>expr</code>或<code>let</code>表达式中。</p>\n<p><strong>样例 8-2. 使用算术运算符</strong></p>\n<div><pre><code>#!/bin/bash\n# 使变量自增1，10种不同的方法实现\n\nn=1; echo -n &quot;$n &quot;\n\nlet &quot;n = $n + 1&quot;   # 可以使用 let &quot;n = n + 1&quot;\necho -n &quot;$n &quot;\n\n\n: $((n = $n + 1))\n#  &quot;:&quot; 是必要的，不加的话，bash会将\n#+ &quot;$((n = $n + 1))&quot;看做一条命令。\necho -n &quot;$n &quot;\n\n(( n = n + 1 ))\n#  更简洁的写法。\n#  感谢 David Lombard指出。\necho -n &quot;$n &quot;\n\nn=$(($n + 1))\necho -n &quot;$n &quot;\n\n: $[ n = $n + 1 ]\n#  &quot;:&quot; 是必要的，不加的话，bash会将\n#+ &quot;$[ n = $n + 1 ]&quot;看做一条命令。\n#  即使&quot;n&quot;是字符串，也是可行的。\necho -n &quot;$n &quot;\n\nn=$[ $n + 1 ]\n#  即使&quot;n&quot;是字符串，也是可行的。\n#* 不要用这种写法，它已被废弃且不具有兼容性。\n#  感谢 Stephane Chazelas.\necho -n &quot;$n &quot;\n\n# 使用C风格的自增运算符也是可以的\n# 感谢 Frank Wang 指出。\n\nlet &quot;n++&quot;          # let &quot;++n&quot; 可行\necho -n &quot;$n &quot;\n\n(( n++ ))          # (( ++n ))  可行\necho -n &quot;$n &quot;\n\n: $(( n++ ))       # : $(( ++n )) 可行\necho -n &quot;$n &quot;\n\n: $[ n++ ]         # : $[ ++n ] 可行\necho -n &quot;$n &quot;\n\necho\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><p>在早期的Bash版本中，整型变量是带符号的长整型数（32-bit），取值范围从 -2147483648 到 2147483647。如果算术操作超出了整数的取值范围，结果会不准确。</p>\n<div><pre><code>echo $BASH_VERSION   # Bash 1.14版本\n\na=2147483646\necho &quot;a = $a&quot;        # a = 2147483646\nlet &quot;a+=1&quot;           # 自增 &quot;a&quot;.\necho &quot;a = $a&quot;        # a = 2147483647\nlet &quot;a+=1&quot;           # 再次自增&quot;a&quot;，超出取值范围。\necho &quot;a = $a&quot;        # a = -2147483648\n                     #      错误：超出范围，\n                     #+     最左边的符号位被重置，\n                     #+     结果变负\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>Bash版本 &gt;= 2.05b, Bash支持了64-bit整型数。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 注意，Bash并不支持浮点运算，Bash会将带小数点的数看做字符串。</p>\n</blockquote>\n<div><pre><code>a=1.5\n\nlet &quot;b = $a + 1.3&quot;  # 报错\n# t2.sh: let: b = 1.5 + 1.3: syntax error in expression\n#                            (error token is &quot;.5 + 1.3&quot;)\n\necho &quot;b = $b&quot;       # b=1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>如果你想在脚本中使用浮点数运算，借助<a href=\"http://tldp.org/LDP/abs/html/mathc.html#BCREF\" target=\"_blank\" rel=\"noopener noreferrer\">bc</a>或外部数学函数库吧。</p>\n<h2 id=\"位运算\"> 位运算</h2>\n<p>位运算很少出现在shell脚本中，在bash中加入位运算的初衷似乎是为了操控和检测来自<code>ports</code>或<code>sockets</code>的数据。位运算在编译型语言中能发挥更大的作用，比如C/C++，位运算提供了直接访问系统硬件的能力。然而，聪明的vladz在他的base64.sh(案例 A-54)脚本中也用到了位运算。\n下面介绍位运算符。</p>\n<h3 id=\"-13\"> &lt;&lt;</h3>\n<p>左移运算符(左移1位相当于乘2)</p>\n<h3 id=\"-14\"> &lt;&lt;=</h3>\n<p>左移赋值</p>\n<p><code>let &quot;var &lt;&lt;= 2&quot;</code> 的结果是var变量的值向左移了2位(乘以4)</p>\n<h3 id=\"-15\"> &gt;&gt;</h3>\n<p>右移运算符(右移1位相当于除2)</p>\n<h3 id=\"-16\"> &gt;&gt;=</h3>\n<p>右移赋值</p>\n<h3 id=\"-17\"> &amp;</h3>\n<p>按位与（AND）</p>\n<h3 id=\"-18\"> &amp;=</h3>\n<p>按位与等（AND-equal）</p>\n<h3 id=\"-19\"> |</h3>\n<p>按位或（OR）</p>\n<h3 id=\"-20\"> |=</h3>\n<p>按位或等（OR-equal）</p>\n<h3 id=\"-21\"> ~</h3>\n<p>按位取反</p>\n<h3 id=\"-22\"> ^</h3>\n<p>按位异或（XOR）</p>\n<h3 id=\"-23\"> ^=</h3>\n<p>按位异或等（XOR-equal）</p>\n<h2 id=\"逻辑-布尔-运算符\"> 逻辑(布尔)运算符</h2>\n<h3 id=\"-24\"> !</h3>\n<p>非(NOT)</p>\n<div><pre><code>if [ ! -f $FILENAME ]\nthen\n  ...\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"-25\"> &amp;&amp;</h3>\n<p>与(AND)</p>\n<div><pre><code>if [ $condition1 ] &amp;&amp; [ $condition2 ]\n#  等同于:  if [ $condition1 -a $condition2 ]\n#  返回true如果 condition1 和 condition2 同时为真...\n\nif [[ $condition1 &amp;&amp; $condition2 ]]    # 可行\n#  注意，&amp;&amp; 运算符不能用在[ ... ]结构里。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> &amp;&amp;也可以被用在<code>list</code>结构中连接命令。</p>\n</blockquote>\n<h3 id=\"-26\"> ||</h3>\n<p>或(OR)</p>\n<div><pre><code>if [ $condition1 ] || [ $condition2 ]\n\n#  等同于:  if [ $condition1 -a $condition2 ]\n#  返回true如果 condition1 和 condition2 任意一个为真...\n\nif [[ $condition1 || $condition2 ]]    # 可行\n#  注意，|| 运算符不能用在[ ... ]结构里。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"小结-2\"> 小结</h3>\n<p><strong>样例 8-3. 在条件测试中使用 &amp;&amp; 和 ||</strong></p>\n<div><pre><code>#!/bin/bash\n\na=24\nb=47\n\nif [ &quot;$a&quot; -eq 24 ] &amp;&amp; [ &quot;$b&quot; -eq 47 ]\nthen\n  echo &quot;Test #1 succeeds.&quot;\nelse\n  echo &quot;Test #1 fails.&quot;\nfi\n\n#  错误:   if [ &quot;$a&quot; -eq 24 &amp;&amp; &quot;$b&quot; -eq 47 ]\n#          这样写的话，bash会先执行&#39;[ &quot;$a&quot; -eq 24&#39;\n#          然后就找不到右括号&#39;]&#39;了...\n#\n#  注意:  if [[ $a -eq 24 &amp;&amp; $b -eq 24 ]]  这样写是可以的\n#  双方括号测试结构比单方括号更加灵活。\n#  (双方括号中的&quot;&amp;&amp;&quot;与单方括号中的&quot;&amp;&amp;&quot;意义不同)\n#  感谢 Stephane Chazelas 指出。\n\n\nif [ &quot;$a&quot; -eq 98 ] || [ &quot;$b&quot; -eq 47 ]\nthen\n  echo &quot;Test #2 succeeds.&quot;\nelse\n  echo &quot;Test #2 fails.&quot;\nfi\n\n\n#  使用 -a 和 -o 选项也具有同样的效果。\n#  感谢 Patrick Callahan 指出。\n\n\nif [ &quot;$a&quot; -eq 24 -a &quot;$b&quot; -eq 47 ]\nthen\n  echo &quot;Test #3 succeeds.&quot;\nelse\n  echo &quot;Test #3 fails.&quot;\nfi\n\n\nif [ &quot;$a&quot; -eq 98 -o &quot;$b&quot; -eq 47 ]\nthen\n  echo &quot;Test #4 succeeds.&quot;\nelse\n  echo &quot;Test #4 fails.&quot;\nfi\n\n\na=rhino\nb=crocodile\nif [ &quot;$a&quot; = rhino ] &amp;&amp; [ &quot;$b&quot; = crocodile ]\nthen\n  echo &quot;Test #5 succeeds.&quot;\nelse\n  echo &quot;Test #5 fails.&quot;\nfi\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div><p><code>&amp;&amp;</code>和<code>||</code>运算符也可以用在算术运算中。</p>\n<div><pre><code>bash$ echo $(( 1 &amp;&amp; 2 )) $((3 &amp;&amp; 0)) $((4 || 0)) $((0 || 0))\n1 0 1 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"其他运算符\"> 其他运算符</h2>\n<h3 id=\"-27\"> ,</h3>\n<p>逗号运算符\n逗号运算符用于连接两个或多个算术操作，所有的操作会被依次求值（可能会有副作用）。<sup></sup></p>\n<div><pre><code>let &quot;t1 = ((5 + 3, 7 - 1, 15 - 4))&quot;\necho &quot;t1 = $t1&quot;           ^^^^^^  # t1 = 11\n# 这里的t1 被赋值了11，为什么？\n\nlet &quot;t2 = ((a = 9, 15 / 3))&quot;      # 对&quot;a&quot;赋值并对&quot;t2&quot;求值。\necho &quot;t2 = $t2    a = $a&quot;         # t2 = 5    a = 9\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>逗号运算符常被用在<code>for</code>循环中。参看案例 11-13。</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>取决与不同的上下文，+= 也可能作为字符串连接符。它可以很方便地修改环境变量。 </p>\n</li>\n<li id=\"fn2\"><p>副作用，顾名思义，就是预料之外的结果。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "8.2. 数字常量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_2_numerical_constants/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_2_numerical_constants/",
      "content_html": "<h1 id=\"_8-2-数字常量\"> 8.2. 数字常量</h1>\n<p>通常情况下，shell脚本会把数字以十进制整数看待(base 10)，除非数字加了特殊的前缀或标记。\n带前缀0的数字是八进制数(base 8)；带前缀0x的数字是十六进制数(base 16)。\n内嵌 # 的数字会以 BASE#NUMBER 的方式进行求值（不能超出当前shell支持整数的范围）。</p>\n<p><strong>样例 8-4. 数字常量的表示</strong></p>\n<div><pre><code>#!/bin/bash\n# numbers.sh: 不同进制数的表示\n\n# 十进制数: 默认\nlet &quot;dec = 32&quot;\necho &quot;decimal number = $dec&quot;             # 32\n# 一切正常。\n\n\n# 八进制数: 带前导&#39;0&#39;的数\nlet &quot;oct = 032&quot;\necho &quot;octal number = $oct&quot;               # 26\n# 结果以 十进制 打印输出了。\n# ------ ------ -----------\n\n\n# 十六进制数: 带前导&#39;0x&#39;或&#39;0X&#39;的数\nlet &quot;hex = 0x32&quot;\necho &quot;hexadecimal number = $hex&quot;         # 50\n\necho $((0x9abc))                         # 39612\n#     ^^      ^^   双圆括号进行表达式求值\n# 结果以十进制打印输出。\n\n\n\n# 其他进制数: BASE#NUMBER\n# BASE 范围:  2 - 64\n# NUMBER 必须以 BASE 规定的正确形式书写，如下:\n\nlet &quot;bin = 2#111100111001101&quot;\necho &quot;binary number = $bin&quot;              # 31181\n\nlet &quot;b32 = 32#77&quot;\necho &quot;base-32 number = $b32&quot;             # 231\n\nlet &quot;b64 = 64#@_&quot;\necho &quot;base-64 number = $b64&quot;             # 4031\n\n# 这种表示法只对进制范围(2 - 64)内的 ASCII 字符有效。\n# 10 数字 + 26 小写字母 + 26 大写字母 + @ + _\n\n\necho\n\necho $((36#zz)) $((2#10101010)) $((16#AF16)) $((53#1aA))\n                                         # 1295 170 44822 3375\n\n#  重要提醒:\n#  ---------\n#  使用超出进制范围以外的符号会报错。\n\nlet &quot;bad_oct = 081&quot;\n\n# (可能的) 报错信息:\n#  bad_oct = 081: value too great for base (error token is &quot;081&quot;)\n#              Octal numbers use only digits in the range 0 - 7.\n\nexit $?        # 退出码 = 1 (错误)\n\n# 感谢 Rich Bartell 和 Stephane Chazelas 的说明。\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "双圆括号结构",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_3_the_double_parentheses_construct/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_3_the_double_parentheses_construct/",
      "content_html": "<h1 id=\"双圆括号结构\"> 双圆括号结构</h1>\n<p>与<code>let</code>命令类似，<code>(( ... ))</code> 结构允许对算术表达式的扩展和求值。它是<code>let</code>命令的简化形式。例如，a=$(( 5 + 3 )) 会将变量a赋值成 5 + 3，也就是8。在Bash中，双圆括号结构也允许以C风格的方式操作变量。例如，(( var++ ))。</p>\n<p><strong>样例 8-5. 以C风格的方式操作变量</strong></p>\n<div><pre><code>#!/bin/bash\n# c-vars.sh\n# 以C风格的方式操作变量，使用(( ... ))结构\n\n\necho\n\n(( a = 23 ))  #  C风格的变量赋值，注意&quot;=&quot;等号前后都有空格\n\necho &quot;a (initial value) = $a&quot;   # 23\n\n(( a++ ))     #  后缀自增&#39;a&#39;，C-style.\necho &quot;a (after a++) = $a&quot;       # 24\n\n(( a-- ))     #  后缀自减&#39;a&#39;, C-style.\necho &quot;a (after a--) = $a&quot;       # 23\n\n\n(( ++a ))     #  前缀自增&#39;a&#39;, C-style.\necho &quot;a (after ++a) = $a&quot;       # 24\n\n(( --a ))     #  前缀自减&#39;a&#39;, C-style.\necho &quot;a (after --a) = $a&quot;       # 23\n\necho\n\n########################################################\n#  注意，C风格的++，--运算符，前缀形式与后缀形式有不同的\n#+ 副作用。\n\nn=1; let --n &amp;&amp; echo &quot;True&quot; || echo &quot;False&quot;  # False\nn=1; let n-- &amp;&amp; echo &quot;True&quot; || echo &quot;False&quot;  # True\n\n#  感谢 Jeroen Domburg。\n########################################################\n\necho\n\n(( t = a&lt;45?7:11 ))   # C风格三目运算符。\n#       ^  ^ ^\necho &quot;If a &lt; 45, then t = 7, else t = 11.&quot;  # a = 23\necho &quot;t = $t &quot;                              # t = 7\n\necho\n\n\n# -----------\n# 复活节彩蛋!\n# -----------\n#  Chet Ramey 偷偷往Bash里加入了C风格的语句结构，\n#  还没写文档说明 (实际上很多是从ksh中继承过来的)。\n#  在Bash 文档中，Ramey把 (( ... ))结构称为shell 算术运算，\n#  但是这种表述并不准确...\n#  抱歉啊，Chet，把你的秘密抖出来了。\n\n#  参看 &quot;for&quot; 和 &quot;while&quot; 循环章节关于 (( ... )) 结构的部分。\n\n#  (( ... )) 结构在Bash 2.04版本之后才能正常工作。\n\nexit\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div><p>还可以参看 <strong>样例 11-13</strong> 与 <strong>样例 8-4</strong>。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "运算符优先级",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_4_operator_precedence/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_4_operator_precedence/",
      "content_html": "<h1 id=\"运算符优先级\"> 运算符优先级</h1>\n<p>在脚本中，运算执行的顺序被称为<em>优先级</em>: 高优先级的操作会比低优先级的操作先执行。<sup></sup></p>\n<p><strong>表 8-1. 运算符优先级(从高到低)</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">含义</th>\n<th style=\"text-align:left\">注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">var++ var--</td>\n<td style=\"text-align:left\">后缀自增/自减</td>\n<td style=\"text-align:left\">C风格运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">++var --var</td>\n<td style=\"text-align:left\">前缀自增/自减</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">! ~</td>\n<td style=\"text-align:left\">按位取反/逻辑取反</td>\n<td style=\"text-align:left\">对每一比特位取反/对逻辑判断的结果取反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">**</td>\n<td style=\"text-align:left\">幂运算</td>\n<td style=\"text-align:left\">算数运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">* / %</td>\n<td style=\"text-align:left\">乘, 除, 取余</td>\n<td style=\"text-align:left\">算数运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+ -</td>\n<td style=\"text-align:left\">加, 减</td>\n<td style=\"text-align:left\">算数运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;&lt; &gt;&gt;</td>\n<td style=\"text-align:left\">左移, 右移</td>\n<td style=\"text-align:left\">比特位运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-z -n</td>\n<td style=\"text-align:left\">一元比较</td>\n<td style=\"text-align:left\">字符串是/否为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-e -f -t -x, etc</td>\n<td style=\"text-align:left\">一元比较</td>\n<td style=\"text-align:left\">文件测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-lt -gt -le -ge &lt;=  &gt;=</td>\n<td style=\"text-align:left\">复合比较</td>\n<td style=\"text-align:left\">字符串/整数比较</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-nt -ot -ef</td>\n<td style=\"text-align:left\">复合比较</td>\n<td style=\"text-align:left\">文件测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:left\">AND(按位与)</td>\n<td style=\"text-align:left\">按位与操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">XOR(按位异或)</td>\n<td style=\"text-align:left\">按位异或操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">|</td>\n<td style=\"text-align:left\">OR(按位或)</td>\n<td style=\"text-align:left\">按位或操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;&amp; -a</td>\n<td style=\"text-align:left\">AND(逻辑与)</td>\n<td style=\"text-align:left\">逻辑与, 复合比较</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">|| -o</td>\n<td style=\"text-align:left\">OR(逻辑或)</td>\n<td style=\"text-align:left\">逻辑或, 复合比较</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">? :</td>\n<td style=\"text-align:left\">if/else三目运算符</td>\n<td style=\"text-align:left\">C风格运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">=</td>\n<td style=\"text-align:left\">赋值</td>\n<td style=\"text-align:left\">不要与test中的等号混淆</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*= /= %= += -= &lt;&lt;= &gt;&gt;= &amp;=</td>\n<td style=\"text-align:left\">赋值运算</td>\n<td style=\"text-align:left\">先运算后赋值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">,</td>\n<td style=\"text-align:left\">逗号运算符</td>\n<td style=\"text-align:left\">连接一系列语句</td>\n</tr>\n</tbody>\n</table>\n<p>实际上，你只需要记住以下规则就可以了:</p>\n<ul>\n<li>先乘除取余，后加减，与算数运算相似</li>\n<li>复合逻辑运算符，&amp;&amp;, ||, -a, -o 优先级较低</li>\n<li>优先级相同的操作按<em>从左至右</em>顺序求值</li>\n</ul>\n<p>现在，让我们利用运算符优先级的知识来分析一下<em>Fedora Core Linux</em>中的<code>/etc/init.d/functions</code>文件。</p>\n<div><pre><code>while [ -n &quot;$remaining&quot; -a &quot;$retry&quot; -gt 0 ]; do\n\n# 初看之下很恐怖...\n\n\n# 分开来分析\nwhile [ -n &quot;$remaining&quot; -a &quot;$retry&quot; -gt 0 ]; do\n#       --condition 1-- ^^ --condition 2-\n\n#  如果变量&quot;$remaining&quot; 长度不为0\n#+      并且AND (-a)\n#+ 变量 &quot;$retry&quot; 大于0\n#+ 那么\n#+ [ 方括号表达式 ] 返回成功(0)\n#+ while-loop 开始迭代执行语句。\n#  ==============================================================\n#  &quot;condition 1&quot; 和 &quot;condition 2&quot; 在 AND之前执行，为什么？\n#  因为AND(-a)优先级比-n,-gt来得低，逻辑与会在最后求值。\n#################################################################\n\nif [ -f /etc/sysconfig/i18n -a -z &quot;${NOLOCALE:-}&quot; ] ; then\n\n\n# 同样，分开来分析\nif [ -f /etc/sysconfig/i18n -a -z &quot;${NOLOCALE:-}&quot; ] ; then\n#    --condition 1--------- ^^ --condition 2-----\n\n#  如果文件&quot;/etc/sysconfig/i18n&quot; 存在\n#+      并且AND (-a)\n#+ 变量 $NOLOCALE 长度不为0\n#+ 那么\n#+ [ 方括号表达式 ] 返回成功(0)\n#+ 执行接下来的语句。\n#\n#  和之前的情况一样，逻辑与AND(-a)最后求值。\n#  因为在方括号测试结构中，逻辑运算的优先级是最低的。\n#  ==============================================================\n#  注意:\n#  ${NOLOCALE:-} 是一个参数扩展式，看起来有点多余。\n#  但是, 如果 $NOLOCALE 没有提前声明, 它会被设成null，\n#  在某些情况下，这会有点问题。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/tip.gif\" alt=\"tip\">为了避免在复杂比较运算中的错误，可以把运算分散到几个括号结构中。</p>\n<div><pre><code>if [ &quot;$v1&quot; -gt &quot;$v2&quot;  -o  &quot;$v1&quot; -lt &quot;$v2&quot;  -a  -e &quot;$filename&quot; ]\n# 这样写不清晰...\n\nif [[ &quot;$v1&quot; -gt &quot;$v2&quot; ]] || [[ &quot;$v1&quot; -lt &quot;$v2&quot; ]] &amp;&amp; [[ -e &quot;$filename&quot; ]]\n# 好多了 -- 把逻辑判断分散到多个组之中\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></blockquote>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>Precedence(优先级)，根据上下文，与priority含义相近。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/tip.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第八章 运算符相关话题",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_operations_and_related_topics/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/08_operations_and_related_topics/",
      "content_html": "<h1 id=\"第八章-运算符相关话题\"> 第八章 运算符相关话题</h1>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./08_1_operators.html\">8.1 运算符</a></li>\n<li><a href=\"./08_2_numerical_constants.html\">8.2 数字常量</a></li>\n<li><a href=\"./08_3_the_double_parentheses_construct.html\">8.3 双圆括号结构</a></li>\n<li><a href=\"./08_4_operator_precedence.html\">8.4 运算符优先级</a></li>\n</ul>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第二部分 shell基础",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part2/",
      "content_html": "<h1 id=\"第二部分-shell基础\"> 第二部分 shell基础</h1>\n<h3 id=\"目录\"> 目录</h3>\n<ul>\n<li><a href=\"./03_special_characters.html\">3. 特殊字符</a></li>\n<li><a href=\"./04_introduction_to_variables_and_parameters.html\">4. 变量与参数</a>\n<ul>\n<li><a href=\"./04_1_variable_substitution.html\">4.1 变量替换</a></li>\n<li><a href=\"./04_2_variable_assignment.html\">4.2 变量赋值</a></li>\n<li><a href=\"./04_3_bash_variables_are_untyped.html\">4.3 Bash弱类型变量</a></li>\n<li><a href=\"./04_4_special_variable_types.html\">4.4 特殊变量类型</a></li>\n</ul>\n</li>\n<li><a href=\"./05_quoting.html\">5. 引用</a>\n<ul>\n<li><a href=\"./05_1_quoting_variables.html\">5.1 引用变量</a></li>\n<li><a href=\"./05_2_escaping.html\">5.2 转义</a></li>\n</ul>\n</li>\n<li><a href=\"./06_exit_and_exit_status.html\">6. 退出与退出状态</a></li>\n<li><a href=\"./07_tests.html\">7. 测试</a>\n<ul>\n<li><a href=\"./07_1_test_constructs.html\">7.1 测试结构</a></li>\n<li><a href=\"./07_2_file_test_operators.html\">7.2 文件测试操作</a></li>\n<li><a href=\"./07_3_other_comparison_operators.html\">7.3 其他比较操作</a></li>\n<li><a href=\"./07_4_nested_if_then_condition_tests.html\">7.4 嵌套 if/then 条件测试</a></li>\n<li><a href=\"./07_5_testing_your_knowledge_of_tests.html\">7.5 牛刀小试</a></li>\n</ul>\n</li>\n<li><a href=\"./08_operations_and_related_topics.html\">8. 运算符和相关话题</a>\n<ul>\n<li><a href=\"./08_1_operators.html\">8.1 运算符</a></li>\n<li>8.2 数字常量</li>\n<li>8.3 双圆括号结构</li>\n<li>8.4 运算符优先级</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "9.1 内部变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_1_internal_variables/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_1_internal_variables/",
      "content_html": "<h1 id=\"_9-1-内部变量\"> 9.1 内部变量</h1>\n<h2 id=\"内建变量\"> 内建变量</h2>\n<p>影响 Bash 脚本行为的变量。</p>\n<h3 id=\"bash\"> $BASH</h3>\n<p>Bash程序的路径。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$BASH</span>\n/bin/bash\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"bash-env\"> $BASH_ENV</h3>\n<p>这个环境变量会指向一个 Bash 启动文件，该文件在脚本被调用时会被读取。</p>\n<h3 id=\"bash-subshell\"> $BASH_SUBSHELL</h3>\n<p>该变量用于提示所处的 subshell 层级。这是在 Bash version 3 中被引入的新特性。</p>\n<p>具体用法可以参考 <a href=\"http://tldp.org/LDP/abs/html/subshells.html#SUBSHELL\" target=\"_blank\" rel=\"noopener noreferrer\">样例21-1</a>。</p>\n<h3 id=\"bashpid\"> $BASHPID</h3>\n<p>当前 Bash 进程实例的进程ID号。虽然与 <code>$$</code> 变量不一样，但是通常它们会给出相同的结果。</p>\n<div><pre><code>bash4$ <span>echo</span> <span>$$</span>\n<span>11015</span>\n\n\nbash4$ <span>echo</span> <span>$BASHPID</span>\n<span>11015</span>\n\n\nbash4$ <span>ps</span> ax <span>|</span> <span>grep</span> bash4\n<span>11015</span> pts/2    R      <span>0</span>:00 bash4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>然而...</p>\n<div><pre><code><span>#!/bin/bash4</span>\n\n<span>echo</span> <span>\"\\$\\$ outside of subshell = <span>$$</span>\"</span>                              <span># 9602</span>\n<span>echo</span> <span>\"\\<span>$BASH_SUBSHELL</span>  outside of subshell = <span>$BASH_SUBSHELL</span>\"</span>      <span># 0</span>\n<span>echo</span> <span>\"\\<span>$BASHPID</span> outside of subshell = <span>$BASHPID</span>\"</span>                   <span># 9602</span>\n\n<span>echo</span>\n\n<span>(</span> <span>echo</span> <span>\"\\$\\$ inside of subshell = <span>$$</span>\"</span>                             <span># 9602</span>\n  <span>echo</span> <span>\"\\<span>$BASH_SUBSHELL</span> inside of subshell = <span>$BASH_SUBSHELL</span>\"</span>      <span># 1</span>\n  <span>echo</span> <span>\"\\<span>$BASHPID</span> inside of subshell = <span>$BASHPID</span>\"</span> <span>)</span>                <span># 9603</span>\n  <span>#  注意 $$ 总是返回父进程的 PID。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id=\"bash-versinfo-n\"> $BASH_VERSINFO[n]</h3>\n<p>这是一个6个元素的数组，其中包含了已经安装的 Bash 的版本信息。该变量与变量 <code>$BASH_VERSION</code> 类似，但是更加详细。</p>\n<div><pre><code><span># Bash 版本信息：</span>\n\n<span>for</span> <span>n</span> <span>in</span> <span>0</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span>\n<span>do</span>\n  <span>echo</span> <span>\"BASH_VERSINFO[<span>$n</span>] = <span>${<span>BASH_VERSINFO</span><span>[</span>$n<span>]</span>}</span>\"</span>\n<span>done</span>\n\n<span># BASH_VERSINFO[0] = 3                      # 主版本号</span>\n<span># BASH_VERSINFO[1] = 00                     # 次版本号</span>\n<span># BASH_VERSINFO[2] = 14                     # 补丁号</span>\n<span># BASH_VERSINFO[3] = 1                      # 构建版本号</span>\n<span># BASH_VERSINFO[4] = release                # 发行状态</span>\n<span># BASH_VERSINFO[5] = i386-redhat-linux-gnu  # 架构</span>\n                                            <span># (与 $MACHTYPE 相同)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id=\"bash-version\"> $BASH_VERSION</h3>\n<p>已经安装的 Bash 的版本信息。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$BASH_VERSION</span>\n<span>3.2</span>.25<span>(</span><span>1</span><span>)</span>-release\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>tcsh% <span>echo</span> <span>$BASH_VERSION</span>\n<span>BASH_VERSION</span><span>:</span> Undefined variable.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>利用 <code>$BASH_VERSION</code> 来判断运行的是哪个 shell 是一个不错的方法，因为变量 <code>$SHELL</code> 并不总是能够给出正确的答案。</p>\n<h3 id=\"cdpath\"> $CDPATH</h3>\n<p>变量指定 <code>cd</code> 命令可以搜索的路径，路径之间用冒号进行分隔。该变量的功能类似于指定可执行文件搜索路径的变量 <code>$PATH</code>。可以在本地文件 <code>~/.bashrc</code> 中设置该变量。</p>\n<div><pre><code>bash$ <span>cd</span> bash-doc\nbash: <span>cd</span> <span>:</span> bash-doc: No such <span>file</span> or directory\n\n\nbash$ <span>CDPATH</span><span>=</span>/usr/share/doc\nbash$ <span>cd</span> bash-doc\n/usr/share/doc/bash-doc\n\n\nbash$ <span>echo</span> <span>$PWD</span>\n/usr/share/doc/bash-doc\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"dirstack\"> $DIRSTACK</h3>\n<p>指代目录栈中顶部的值<sup></sup>，目录栈由命令 <code>pushd</code> 和 <code>popd</code> 控制。</p>\n<p>该变量相当于命令 <code>dirs</code>，但是 <code>dirs</code> 命令会显示整个目录栈。</p>\n<h3 id=\"editor\"> $EDITOR</h3>\n<p>脚本所调用的默认编辑器，通常是 <code>vi</code> 或是 <code>emcas</code>。</p>\n<h3 id=\"euid\"> $EUID</h3>\n<p>有效用户ID。</p>\n<p>有效用户ID（EUID）是指当前用户正在使用的用户ID，可以通过 <code>su</code> 命令修改。</p>\n<p>{% hint style=&quot;warning&quot; %}</p>\n<p><code>$EUID</code> 与 <code>$UID</code> 并不总是相同的。</p>\n<p>{% endhint %}</p>\n<h3 id=\"funcname\"> $FUNCNAME</h3>\n<p>当前运行函数的函数名。</p>\n<div><pre><code><span>xyz23</span> <span>(</span><span>)</span>\n<span>{</span>\n  <span>echo</span> <span>\"<span>$FUNCNAME</span> now executing.\"</span>  <span># xyz2 now executing.</span>\n<span>}</span>\n\nxyz23\n\n<span>echo</span> <span>\"FUNCNAME = <span>$FUNCNAME</span>\"</span>        <span># FUNCNAME =</span>\n                                   <span># 如果在函数外则为空值。 </span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>可以参考 <a href=\"\">样例 A-50</a>。</p>\n<h3 id=\"globignore\"> $GLOBIGNORE</h3>\n<p>在<a href=\"./../part5/18_2_globbing.html\">文件匹配</a>时所忽略的文件名模式列表。</p>\n<h3 id=\"groups\"> $GROUPS</h3>\n<p>当前用户所属的用户组。</p>\n<p>该变量存储了当前用户所归属的用户组ID列表，是一个数组。内容与记录在文件 <code>/etc/passwd</code> 和文件 <code>/etc/group</code> 中的一致。</p>\n<div><pre><code>root<span># echo $GROUPS</span>\n<span>0</span>\n\n\nroot<span># echo ${GROUPS[1]}</span>\n<span>1</span>\n\n\nroot<span># echo ${GROUPS[5]}</span>\n<span>6</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"home\"> $HOME</h3>\n<p>当前用户的主目录，其值通常为 <code>/home/username</code> （参考 <a href=\"\">样例 10-7</a>）。</p>\n<h3 id=\"homename\"> $HOMENAME</h3>\n<p>系统启动的初始化脚本通过命令 <code>hostname</code> 给系统分配主机名。而函数 <code>gethostname()</code> 则是给 Bash 的内部变量 <code>$HOSTNAME</code> 赋值。可以参考 <a href=\"\">样例 10-7</a>。</p>\n<h3 id=\"hosttype\"> $HOSTTYPE</h3>\n<p>主机类型。</p>\n<p>类似变量 <a href=\"\"><code>$MACHTYPE</code></a>，用于识别系统硬件信息。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$HOSTTYPE</span>\ni686\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"ifs\"> $IFS</h3>\n<p>内部字段分隔符。</p>\n<p>该变量决定了 Bash 在解析字符串时如何去识别 <a href=\"\">字段</a> 或单词边界。</p>\n<p><code>$IFS</code> 的缺省值是空白符（空格，制表符以及换行符），但其可以被修改。例如你在处理逗号分隔的文件时可以将其设置为逗号。需要注意 <a href=\"\"><code>$*</code></a> 使用保存在 <code>$IFS</code> 中的第一个字符。可以参考 <a href=\"\">样例 5-1</a>。</p>\n<div><pre><code>bash$ <span>echo</span> <span>\"<span>$IFS</span>\"</span>\n\n<span>(</span>当 <span>$IFS</span> 设置为缺省值时，显示空行。<span>)</span>\n\n\nbash$ <span>echo</span> <span>\"<span>$IFS</span>\"</span> <span>|</span> <span>cat</span> -vte\n ^I$\n $\n<span>(</span>显示空白符：首先是一个空格，然后是 ^I <span>[</span>水平制表符<span>]</span>，\n 然后是换行符，最后在末尾显示 <span>\"$\"</span>。<span>)</span>\n\n\nbash$ <span>bash</span> -c <span>'set w x y z; IFS=\":-;\"; echo \"<span>$*</span>\"'</span>\nw:x:y:z\n<span>(</span>从字符串中解析命令，然后将命令参数分配给位置参数。<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>通过设置 <code>$IFS</code> 来忽略文件路径名中空格带来的影响。</p>\n<div><pre><code><span><span>IFS</span></span><span>=</span><span>\"<span><span>$(</span><span>printf</span> <span>'<span title=\"\\n\">\\n</span><span title=\"\\t\">\\t</span>'</span><span>)</span></span>\"</span>   <span># 按 David Wheeler 所述。</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>{% hint style=&quot;warning&quot; %}</p>\n<p>相比于其他字符，变量 <code>$IFS</code> 在处理空白符时有所不同。</p>\n<h4 id=\"样例-9-1-ifs-与空白符\"> 样例 9-1. $IFS 与空白符</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># ifs.sh</span>\n\n\n<span>var1</span><span>=</span><span>\"a+b+c\"</span>\n<span>var2</span><span>=</span><span>\"d-e-f\"</span>\n<span>var3</span><span>=</span><span>\"g,h,i\"</span>\n\n<span><span>IFS</span></span><span>=</span>+\n<span># 加号会被解析成分隔符。</span>\n<span>echo</span> <span>$var1</span>     <span># a b c</span>\n<span>echo</span> <span>$var2</span>     <span># d-e-f</span>\n<span>echo</span> <span>$var3</span>     <span># g,h,i</span>\n\n<span>echo</span>\n\n<span><span>IFS</span></span><span>=</span><span>\"-\"</span>\n<span># 恢复对加号的默认解析。</span>\n<span># 现在减号会被解析成分隔符。</span>\n<span>echo</span> <span>$var1</span>     <span># a+b+c</span>\n<span>echo</span> <span>$var2</span>     <span># d e f</span>\n<span>echo</span> <span>$var3</span>     <span># g,h,i</span>\n\n<span>echo</span>\n\n<span><span>IFS</span></span><span>=</span><span>\",\"</span>\n<span># 现在逗号会被解析成分隔符。</span>\n<span># 恢复对减号的默认解析。</span>\n<span>echo</span> <span>$var1</span>     <span># a+b+c</span>\n<span>echo</span> <span>$var2</span>     <span># d-e-f</span>\n<span>echo</span> <span>$var3</span>     <span># g h i</span>\n\n<span>echo</span>\n\n<span><span>IFS</span></span><span>=</span><span>\" \"</span>\n<span># 现在空格会被解析成分隔符。</span>\n<span># 逗号恢复成默认解析。</span>\n<span>echo</span> <span>$var1</span>     <span># a+b+c</span>\n<span>echo</span> <span>$var2</span>     <span># d-e-f</span>\n<span>echo</span> <span>$var3</span>     <span># g,h,i</span>\n\n<span># ======================================================== #</span>\n\n<span># 然而...</span>\n<span># $IFS 处理空白符的方式不同其他字符。</span>\n\n<span>output_args_one_per_line</span><span>(</span><span>)</span>\n<span>{</span>\n  <span>for</span> arg\n  <span>do</span>\n    <span>echo</span> <span>\"[<span>$arg</span>]\"</span>\n  <span>done</span> <span>#  ^    ^   为了获得更好的视觉体验，把参数放到了括号里。</span>\n<span>}</span>\n\n<span>echo</span><span>;</span> <span>echo</span> <span>\"IFS=<span title=\"\\&quot;\">\\\"</span>  <span title=\"\\&quot;\">\\\"</span>\"</span>\n<span>echo</span> <span>\"-------\"</span>\n\n<span><span>IFS</span></span><span>=</span><span>\" \"</span>\n<span>var</span><span>=</span><span>\" a  b c   \"</span>\n<span>#    ^ ^^   ^^^</span>\noutput_args_one_per_line <span>$var</span>  <span># output_args_one_per_line `echo \" a  b c   \"`</span>\n<span># [a]</span>\n<span># [b]</span>\n<span># [c]</span>\n\n\n<span>echo</span><span>;</span> <span>echo</span> <span>\"IFS=:\"</span>\n<span>echo</span> <span>\"-----\"</span>\n\n<span><span>IFS</span></span><span>=</span>:\n<span>var</span><span>=</span><span>\":a::b:c:::\"</span>               <span># 与上面一样的模式，</span>\n<span>#    ^ ^^   ^^^                #+ 仅仅是将 \" \" 替换成了 \":\" ...</span>\noutput_args_one_per_line <span>$var</span>\n<span># []</span>\n<span># [a]</span>\n<span># []</span>\n<span># [b]</span>\n<span># [c]</span>\n<span># []</span>\n<span># []</span>\n\n<span># 注意那些“空的”括号。</span>\n<span># 同样的情况也会出现在 awk 命令所使用的 \"FS\" 字段分隔符中。</span>\n\n\n<span>echo</span>\n\n<span>exit</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br></div></div><p>{% endhint %}</p>\n<p>（非常感谢 Stéphane Chazelas 提供了上面的样例并做出的详细说明。）</p>\n<p>也可以参考 <a href=\"\">样例 16-41</a>，<a href=\"\">样例 11-8</a> 和 <a href=\"\">样例19-14</a>，获取更多使用 <code>$IFS</code> 的技巧。</p>\n<h3 id=\"ignoreeof\"> $IGNOREEOF</h3>\n<p>忽略 EOF：用于指示 Shell 在注销前需要忽略多少个文件结束符(EOF，contrl-D)。</p>\n<h3 id=\"lc-collate\"> $LC_COLLATE</h3>\n<p>经常会在文件 <a href=\"\"><code>.bashrc</code></a> 或是文件 <code>/etc/profile</code> 中被设置。该变量控制文件名扩展和模式匹配中的排序顺序。如果设置不得当，<code>LC_COLLATE</code> 将会导致 <a href=\"\">文件名匹配</a> 中出现非预期结果。</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p>在 Bash 2.05 版本之后，文件名匹配在不再区分中括号中字母的大小写。例如 <code>ls [A-M]*</code> 将会同时匹配 <code>File1.txt</code> 和 <code>file1.txt</code> 两个文件。如果想要恢复成之前的模式，则需要在文件 <code>/etc/profile</code> 或文件 <code>~/.bashrc</code> 中通过语句 <code>export LC_COLLATE=C</code> 设置 <code>LC_COLLATE</code> 的值为 <code>C</code>。</p>\n<p>{% endhint %}</p>\n<h3 id=\"lc-ctype\"> $LC_CTYPE</h3>\n<p>这个内部变量控制在 <a href=\"\">文件匹配</a> 和模式匹配中的字符解析行为。</p>\n<h3 id=\"lineno\"> $LINENO</h3>\n<p>该变量记录了其在脚本中被使用时所处行的行号。该变量只有在被使用时才有意义，在调试过程中非常有用。</p>\n<div><pre><code><span># *** 调试部分起始 ***</span>\n<span>last_cmd_arg</span><span>=</span><span>$_</span>  <span># 保存最后的命令。</span>\n\n<span>echo</span> <span>\"At line number <span>$LINENO</span>, variable <span title=\"\\&quot;\">\\\"</span>v1<span title=\"\\&quot;\">\\\"</span> = <span>$v1</span>\"</span>\n<span>echo</span> <span>\"Last command argument processed = <span>$last_cmd_arg</span>\"</span>\n<span># *** 调试部分终止 ***</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"machtype\"> $MACHTYPE</h3>\n<p>设备类型。</p>\n<p>识别系统硬件。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$MACHTYPE</span>\ni686\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"oldpwd\"> $OLDPWD</h3>\n<p>上一个工作目录(OLD-Print-Working-Directory)，也就是之前所在的目录。</p>\n<h3 id=\"ostype\"> $OSTYPE</h3>\n<p>操作系统类型。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$OSTYPE</span>\nlinux\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"path\"> $PATH</h3>\n<p>可执行文件搜索路径，其值通常包含 <code>/usr/bin</code>，<code>/usr/X11R6/bin/</code>，<code>/usr/local/bin</code> 等路径。</p>\n<p>给定一个命令，shell就会自动从搜索路径包含的目录中利用哈希表搜索该可执行命令。而搜索路径就保存在 <a href=\"\">环境变量</a> <code>$PATH</code> 中，其中包含的一系列目录则通过冒号进行分隔。通常情况下，<code>$PATH</code> 会定义在文件 <code>/etc/profile</code> 或文件 <a href=\"\"><code>~/.bashrc</code></a> 中（参考 <a href=\"\">附录 H</a>）。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$PATH</span>\n/bin:/usr/bin:/usr/local/bin/:/usr/X11R6/bin:/sbin:/usr/sbin\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>PATH=${PATH}:/opt/bin</code> 表示添加目录 <code>/opt/bin</code> 到当前的搜索路径中。在脚本中可以通过这种方式临时添加目录到搜索路径。而当脚本结束时，<code>$PATH</code> 就会恢复到原始值（类似于脚本这样的子进程所作出的修改，不会影响到例如 shell 这样的父进程的环境）。</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p>基于安全考虑，通常在 <code>$PATH</code> 中会省略当前工作目录 <code>./</code>。</p>\n<p>{% endhint %}</p>\n<h3 id=\"pipestatus\"> $PIPESTATUS</h3>\n<p>该 <a href=\"\">数组</a> 变量保存了最后运行的前台 <a href=\"\">管道</a> 的 <a href=\"\">退出状态(es)</a>。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$PIPESTATUS</span>\n<span>0</span>\n\nbash$ <span>ls</span> -al <span>|</span> bogus_command\nbash: bogus_command: <span>command</span> not found\nbash$ <span>echo</span> <span>${<span>PIPESTATUS</span><span>[</span>1<span>]</span>}</span>\n<span>127</span>\n\nbash$ <span>ls</span> -al <span>|</span> bogus_command\nbash: bogus_command: <span>command</span> not found\nbash$ <span>echo</span> <span>$?</span>\n<span>127</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><code>$PIPESTATUS</code> 数组中的每一个元素都代表了该管道中相对应命令的退出状态。<code>$PIPESTATUS[0]</code> 表示管道中第一个命令的退出状态，<code>$PIPESTATUS[1]</code> 表示第二个命令的退出状态，以此类推。</p>\n<p>{% hint style=&quot;warning&quot; %}</p>\n<p>在Bash 3.0 以下版本的登录shell中，变量 <code>$PIPESTATUS</code> 可能会包含一个不正确的 0 值。</p>\n<div><pre><code>tcsh% <span>bash</span>\n\nbash$ <span>who</span> <span>|</span> <span>grep</span> nobody <span>|</span> <span>sort</span>\nbash$ <span>echo</span> <span>${<span>PIPESTATUS</span><span>[</span>*<span>]</span>}</span>\n<span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果脚本包含了上述代码，应该得到期望的输出是 0 1 0。</p>\n<p>感谢 Wayne Pollock 指出了这个问题并提供了上述的样例。</p>\n<p>{% endhint %}</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p>在某些场景下，<code>$PIPESTATUS</code> 变量将会产生非预期结果。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$BASH_VERSION</span>\n<span>3.00</span>.14<span>(</span><span>1</span><span>)</span>-release\n\nbash$ <span>ls</span> <span>|</span> bogus_command <span>|</span> <span>wc</span>\nbash: bogus_command: <span>command</span> not found\n <span>0</span>       <span>0</span>       <span>0</span>\n\nbash$ <span>echo</span> <span>${<span>PIPESTATUS</span><span>[</span>@<span>]</span>}</span>\n<span>141</span> <span>127</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>Chet Ramey 把上述非预期结果的原因归咎于 <a href=\"\"><code>ls</code></a> 命令的行为。如果 <code>ls</code> 将结果输出到没有被读取的管道上，产生的 SIGPIPE 信号将会终止 <code>ls</code> 命令，同时其 <a href=\"\">退出状态</a> 从期望的 0 变为 141。而同样的情况也会发生在命令 <code>tr</code> 中。</p>\n<p>{% endhint %}</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p><code>$PIPESTATUS</code> 是一个易失的变量。该变量需要在目标管道执行完成后，且其他任何命令执行之前去捕获。</p>\n<div><pre><code>bash$ <span>ls</span> <span>|</span> bogus_command <span>|</span> <span>wc</span>\nbash: bogus_command: <span>command</span> not found\n <span>0</span>       <span>0</span>                <span>0</span>\n\nbash$ <span>echo</span> <span>${<span>PIPESTATUS</span><span>[</span>@<span>]</span>}</span>\n<span>0</span> <span>127</span> <span>0</span>\n\nbash$ <span>echo</span> <span>${<span>PIPESTATUS</span><span>[</span>@<span>]</span>}</span>\n<span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>{% endhint %}</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p>在 <code>$PIPESTATUS</code> 不能给出所期望的信息的情况下，使用 <a href=\"\">pipeline 选项</a> 可能会有帮助。</p>\n<p>{% endhint %}</p>\n<h3 id=\"ppid\"> $PPID</h3>\n<p>一个进程的 <code>$PPID</code> 即该进程的父进程的进程ID(pid)。<sup></sup></p>\n<p>可以与命令 <a href=\"\"><code>pidof</code></a> 进行比较。</p>\n<h3 id=\"prompt-command\"> $PROMPT_COMMAND</h3>\n<p>该变量存储在主提示符 <code>$PS1</code> 显示之前所需要执行的命令。</p>\n<h3 id=\"ps1\"> $PS1</h3>\n<p>主提示符，即在命令行中显示的提示符。</p>\n<h3 id=\"ps2\"> $PS2</h3>\n<p>次要提示符，当需要额外输入时出现的提示符。默认显示为 <code>&gt;</code>。</p>\n<h3 id=\"ps3\"> $PS3</h3>\n<p>三级提示符，显示在 <code>select</code> 循环中（参考 <a href=\"\">样例 11-30</a>）。</p>\n<h3 id=\"ps4\"> $PS4</h3>\n<p>四级提示符，当使用 <code>-x [verbose trace]</code> <a href=\"\">选项</a> 调用脚本时显示的提示符。默认显示为 <code>+</code>。</p>\n<p>其可以作为调试的辅助手段，把一些诊断信息显示在 <code>$PS4</code> 中可能会有帮助。</p>\n<div><pre><code><span>P4</span><span>=</span><span>'<span><span>$(</span><span>read</span> <span>time</span> junk <span>&lt;</span> /proc/$$/schedstat<span>;</span> <span>echo</span> <span>\"@@@ <span>$time</span> @@@ \"</span> <span>)</span></span>'</span>\n<span># 根据 Erik Brandsberg 提供的建议。</span>\n<span>set</span> -x\n<span># 可以在后面写各种命令...</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"pwd\"> $PWD</h3>\n<p>工作目录（你当前所在的目录）。</p>\n<p>该变量是内建命令 <a href=\"\"><code>pwd</code></a> 的翻版。</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>E_WRONG_DIRECTORY</span><span>=</span><span>85</span>\n\n<span>clear</span> <span># 清空屏幕。</span>\n\n<span>TargetDirectory</span><span>=</span>/home/bozo/projects/GreatAmericanNovel\n\n<span>cd</span> <span>$TargetDirectory</span>\n<span>echo</span> <span>\"Deleting stale files in <span>$TargetDirectory</span>.\"</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$PWD</span>\"</span> <span>!=</span> <span>\"<span>$TargetDirectory</span>\"</span> <span>]</span>\n<span>then</span>    <span># 小心不要偶然清空了错误的目录。</span>\n  <span>echo</span> <span>\"Wrong directory!\"</span>\n  <span>echo</span> <span>\"In <span>$PWD</span>, rather than <span>$TargetDirectory</span>!\"</span>\n  <span>echo</span> <span>\"Bailing out!\"</span>\n  <span>exit</span> <span>$E_WRONG_DIRECTORY</span>\n<span>fi</span>\n\n<span>rm</span> -rf *\n<span>rm</span> .<span>[</span>A-Za-z0-9<span>]</span>*    <span># 删除隐藏文件。</span>\n<span># rm -f .[^.]* ..?*   删除那些以多个点开头的文件。</span>\n<span># (shopt -s dotglob; rm -f *)   这样写也可以。</span>\n<span># 感谢 S.C. 提出这点。</span>\n\n<span>#  文件名可以包含ASCII码中范围为 0-255 的所有字符，</span>\n<span>#+ 除了字符 \"/\"。</span>\n<span>#  删除以一些特殊字符开头的文件，例如 -</span>\n<span>#+ 留作练习。（提示： rm ./-weirdname 或者 rm -- -weirdname）</span>\n<span>result</span><span>=</span><span>$?</span>   <span># 删除操作的结果。如果删除成功，值为0。</span>\n\n<span>echo</span>\n<span>ls</span> -al              <span># 是不是还有剩余没有删除的文件？</span>\n<span>echo</span> <span>\"Done.\"</span>\n<span>echo</span> <span>\"Old files deleted in <span>$TargetDirectory</span>.\"</span>\n<span>echo</span>\n\n<span># 如果有其他需要，在这里完成。</span>\n\n<span>exit</span> <span>$result</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h3 id=\"reply\"> $REPLY</h3>\n<p>当没有给 <a href=\"\"><code>read</code></a> 命令提供接收参数时的默认接收参数。该变量同样适用于 <a href=\"\"><code>select</code></a> 菜单接收用户输入值的场景，需要注意的是，用户只需要输入菜单项的编号，而不需要输入完整的菜单项内容。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># reply.sh</span>\n\n<span># REPLY 是 'read' 命令的默认接收参数。</span>\n\n<span>echo</span>\n<span>echo</span> -n <span>\"What is your favorite vegetable? \"</span>\n<span>read</span>\n\n<span>echo</span> <span>\"Your favorite vegetable is <span>$REPLY</span>.\"</span>\n<span>#  当且仅当 'read' 命令没有接收参数的时候，</span>\n<span>#+ REPLY 才能保存最近一次 'read' 命令接收的值。</span>\n\n<span>echo</span>\n<span>echo</span> -n <span>\"What is your favorite fruit? \"</span>\n<span>read</span> fruit\n<span>echo</span> <span>\"Your favorite fruit is <span>$fruit</span>.\"</span>\n<span>echo</span> <span>\"but...\"</span>\n<span>echo</span> <span>\"Value of \\<span>$REPLY</span> is still <span>$REPLY</span>.\"</span>\n<span>#  因为变量 $fruit 接收了新一次 \"read\" 命令所读入的值，</span>\n<span>#+ 所以 $REPLY 仍旧存储的是上一次接收的值。</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h3 id=\"seconds\"> $SECONDS</h3>\n<p>该变量记录到目前为止脚本执行的时间，单位为秒。</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>TIME_LIMIT</span><span>=</span><span>10</span>\n<span>INTERVAL</span><span>=</span><span>1</span>\n\n<span>echo</span>\n<span>echo</span> <span>\"Hit Control-C to exit before <span>$TIME_LIMIT</span> seconds.\"</span>\n<span>echo</span>\n\n<span>while</span> <span>[</span> <span>\"<span>$SECONDS</span>\"</span> -le <span>\"<span>$TIME_LIMIT</span>\"</span> <span>]</span>\n<span>do</span>   <span>#   $SECONDS 是一个 shell 的内部变量。</span>\n  <span>if</span> <span>[</span> <span>\"<span>$SECONDS</span>\"</span> -eq <span>1</span> <span>]</span>\n  <span>then</span>\n    <span>units</span><span>=</span>second\n  <span>else</span>\n    <span>units</span><span>=</span>seconds\n  <span>fi</span>\n  \n  <span>echo</span> <span>\"This script has been running <span>$SECONDS</span> <span>$units</span>.\"</span>\n  <span>#  在一台性能较差或负载过重的设备上，</span>\n  <span>#+ 这个脚本可能会偶尔跳过几个计数。</span>\n  <span>sleep</span> <span>$INTERVAL</span>\n<span>done</span>\n\n<span>echo</span> -e <span>\"<span title=\"\\a\">\\a</span>\"</span>  <span># 发出蜂鸣声！</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h3 id=\"shellopts\"> $SHELLOPTS</h3>\n<p>该只读变量记录了 shell 中已启用的 <a href=\"\">选项</a> 列表。</p>\n<div><pre><code>bash$ <span>echo</span> <span>$SHELLOPTS</span>\nbraceexpand:hashall:histexpand:monitor:history:interactive-comments:emacs\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"shlvl\"> $SHLVL</h3>\n<p>当前 shell 的层级，即嵌套了多少层 Bash <sup></sup>。如果命令行的层级 <code>$SHLVL</code> 为 1，那么在其中执行的脚本层级则增加到 2。</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p>该变量 <a href=\"\">不受 subshell 影响</a>。当你需要指出嵌套了多少层 subshell 时，需要使用变量 。</p>\n<p>{% endhint %}</p>\n<h3 id=\"tmout\"> $TMOUT</h3>\n<p>如果 <code>$TMOUT</code> 被设为非 0 值 <code>time</code>，那么 shell 会在 <code>$time</code> 秒后超时，然后导致 shell 登出。</p>\n<p>在 Bash 2.05b 版本之后，可以在脚本中将 <code>read</code> 命令与 <code>$TMOUT</code> 变量进行结合。</p>\n<div><pre><code><span># 只能在 Bash 2.05b 及之后的版本中成功执行。</span>\n\n<span>TMOUT</span><span>=</span><span>3</span>    <span># 提示会在 3 秒后超时。</span>\n\n<span>echo</span> <span>\"What is your favorite song?\"</span>\n<span>echo</span> <span>\"Quickly now, you only have <span>$TMOUT</span> seconds to answer!\"</span>\n<span>read</span> song\n\n<span>if</span> <span>[</span> -z <span>\"<span>$song</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>song</span><span>=</span><span>\"(no answer)\"</span>\n  <span># 默认值。</span>\n<span>fi</span>\n\n<span>echo</span> <span>\"Your favorite song is <span>$song</span>.\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>在脚本中，同样也存在其他一些实现超时功能的更复杂的方法。其中一个方法是设置一个循环的计时器，当脚本超时的时候，计时器会给脚本发送一个信号。同时，也需要一个处理信号的程序来 <a href=\"\">捕获</a>（参考 <a href=\"\">样例 32-5</a>）由循环计时器产生的中断。</p>\n<h4 id=\"样例-9-2-限时输入\"> 样例 9-2. 限时输入</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># timed-input.sh</span>\n\n<span># TMOUT=3    在新版本的 Bash 中起效。</span>\n\n<span>TIMER_INTERRUPT</span><span>=</span><span>14</span>\n<span>TIMELIMIT</span><span>=</span><span>3</span>  <span># 在该实例中设置为 3 秒。</span>\n             <span># 同样可以设置成其他值。</span>\n             \n<span>PrintAnswer</span><span>(</span><span>)</span>\n<span>{</span>\n  <span>if</span> <span>[</span> <span>\"<span>$answer</span>\"</span> <span>=</span> TIMEOUT <span>]</span>\n  <span>then</span>\n    <span>echo</span> <span>$answer</span>\n  <span>else</span>       <span># 不要混淆了这两个实例。</span>\n    <span>echo</span> <span>\"Your favorite veggie is <span>$answer</span>\"</span>\n    <span>kill</span> <span>$!</span>  <span>#  终止在后台运行的</span>\n             <span>#+ 不再被需要的 TimerOn 函数。</span>\n             <span>#  $! 代表最后一个在后台运行的作业的进程ID。</span>\n  <span>fi</span>\n\n<span>}</span>\n                \n                \n<span>TimerOn</span><span>(</span><span>)</span>\n<span>{</span>\n  <span>sleep</span> <span>$TIMELIMIT</span> <span>&amp;&amp;</span> <span>kill</span> -s <span>14</span> <span>$$</span> <span>&amp;</span>\n  <span># 等待 3 秒，然后给脚本发送一个信号。</span>\n<span>}</span>\n\n\n<span>Int14Vector</span><span>(</span><span>)</span>\n<span>{</span>\n  <span>answer</span><span>=</span><span>\"TIMEOUT\"</span>\n  PrintAnswer\n  <span>exit</span> <span>$TIMER_INTERRUPT</span>\n<span>}</span>\n\n<span>trap</span> Int14Vector <span>$TIMER_INTERRUPT</span>\n<span># 我们的目的就是通过时间中断 (14) 终止程序。</span>\n\n<span>echo</span> <span>\"What is your favorite vegetable \"</span>\nTimerOn\n<span>read</span> answer\nPrintAnswer\n\n\n<span>#  必须承认，这个实现限时输入的方法并不优雅。</span>\n<span>#  但利用 \"read\" 命令的 \"-t\" 选项可以简化这个操作。</span>\n<span>#  参考脚本 \"t-out.sh\"。</span>\n<span>#  思考一下，如果不是对用户的单次输入时间进行限制，</span>\n<span>#+ 而是对整个脚本的运行时间进行限制，应该怎么做？</span>\n\n<span>#  如果你需要更优雅的写法 ...</span>\n<span>#+ 可以考虑用 C 或者 C++ 来编写应用，</span>\n<span>#+ 并使用其中包含的类似 'alarm' 或是 ‘setitimer' 等合适的库函数来实现计时。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div><p>还有一种方法是使用 <a href=\"\"><code>stty</code></a>。</p>\n<h4 id=\"样例-9-3-再来一次-限时输入\"> 样例 9-3. 再来一次，限时输入</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># timeout.sh</span>\n\n<span>#  该脚本由 Stephane Chazelas 编写，</span>\n<span>#+ 并由本书作者修改。</span>\n\n<span>INTERVAL</span><span>=</span><span>5</span>                <span># 超时所需的时间间隔</span>\n\n<span>timedout_read</span><span>(</span><span>)</span> <span>{</span>\n  <span>timeout</span><span>=</span><span>$1</span>\n  <span>varname</span><span>=</span><span>$2</span>\n  <span>old_tty_settings</span><span>=</span><span><span>`</span>stty -g<span>`</span></span>\n  stty -icanon min <span>0</span> <span>time</span> <span>${timeout}</span><span>0</span>\n  <span>eval</span> <span>read</span> <span>$varname</span>      <span># 或者直接写成 read $varname</span>\n  stty <span>\"<span>$old_tty_settings</span>\"</span>\n  <span># 参考 \"stty\" 的帮助页面 (man)。</span>\n<span>}</span>\n\n<span>echo</span><span>;</span> <span>echo</span> -n <span>\"What's your name? Quick! \"</span>\ntimedout_read <span>$INTERVAL</span> your_name\n\n<span>#  该脚本也许并不能在所有类型的终端上正常运行。</span>\n<span>#  最大的超时时间间隔依赖于终端。</span>\n<span>#+ （通常是 25.5 秒）。</span>\n\n<span>echo</span>\n\n<span>if</span> <span>[</span> <span>!</span> -z <span>\"<span>$your_name</span>\"</span> <span>]</span>  <span># 如果在超时前输入了姓名 ...</span>\n<span>then</span>\n  <span>echo</span> <span>\"Your name is <span>$your_name</span>.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"Timed out.\"</span>\n<span>fi</span>\n\n<span>echo</span>\n\n<span># 该脚本的计时行为与 \"timed-input.sh\" 中的计时行为有所不同，</span>\n<span># 该脚本的计时器会在每次按键后被重置。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>可能最简单的方法就是利用 <a href=\"\"><code>read</code></a> 命令的 <code>-t</code> 选项。</p>\n<h4 id=\"样例-9-4-限时-read\"> 样例 9-4. 限时 read</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># t-out.sh [time-out]</span>\n<span># 从 \"syngin seven\" 的建议中所汲取的灵感，谢谢你们。</span>\n\n\n<span>TIMELIMIT</span><span>=</span><span>4</span>         <span># 4 秒</span>\n\n<span>read</span> -t <span>$TIMELIMIT</span> variable <span>&lt;</span><span>&amp;1</span>\n<span>#                           ^^^</span>\n<span>#  在这个实例中，只有 Bash 1.x 或 Bash 2.x 版本需要 \"&lt;&amp;1\"，</span>\n<span>#  而在 Bash 3 及更高版本则不需要。</span>\n\n<span>echo</span>\n\n<span>if</span> <span>[</span> -z <span>\"<span>$variable</span>\"</span> <span>]</span>  <span># 判断是否为空。</span>\n<span>then</span>\n  <span>echo</span> <span>\"Timed out, variable still unset.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"variable = <span>$variable</span>\"</span>\n<span>fi</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id=\"uid\"> $UID</h3>\n<p>用户 ID。</p>\n<p>记录在文件 <a href=\"\"><code>/etc/passwd</code></a> 中当前用户的用户标识号。</p>\n<p>该 ID 表示的是当前用户的真实 ID，即使用户通过 <code>su</code> 命令临时切换至另一个用户，这个 ID 也不会改变。<code>$UID</code> 是一个只读变量，不能够被命令行或是脚本中的命令所修改，并与内建命令 <a href=\"\"><code>id</code></a> 相对应。</p>\n<h4 id=\"样例-9-5-我是-root-用户吗\"> 样例 9-5. 我是 root 用户吗？</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># am-i-root.sh:   我是否是 root 用户？</span>\n\n<span>ROOT_UID</span><span>=</span><span>0</span>   <span># Root 用户的 $UID 为 0。</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$UID</span>\"</span> -eq <span>\"<span>$ROOT_UID</span>\"</span> <span>]</span>  <span># 只有真正的 \"root\" 用户才能经受得住考研。</span>\n<span>then</span>\n  <span>echo</span> <span>\"You are root.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"You are just an ordinary user (but mom loves you just the same).\"</span>\n<span>fi</span>\n\n<span>exit</span> <span>0</span>\n\n\n<span># ============================================================= #</span>\n<span># 下面的代码将不会被执行，因为脚本已经退出了。</span>\n\n<span># 另外一种判断是否是 root 用户的方法：</span>\n\n<span>ROOTUSER_NAME</span><span>=</span>root\n\n<span>username</span><span>=</span><span><span>`</span><span>id</span> -nu<span>`</span></span>              <span># 或是...  username=`whoami`</span>\n<span>if</span> <span>[</span> <span>\"<span>$username</span>\"</span> <span>=</span> <span>\"<span>$ROOTUSER_NAME</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Rooty, toot, toot. You are root.\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"You are just a regular fella.\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>还可以参考 <a href=\"\">样例2-3</a>。</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p>变量 <code>$ENV</code>，<code>$LOGNAME</code>，<code>$MAIL</code>，<code>$TERM</code>，<code>$USER</code> 以及 <code>$USERNAME</code> 并不是 Bash 的 <a href=\"\">内建变量</a>，而是在 <a href=\"\"><code>Bash</code></a> 或系统的某个启动文件中，被设置而成的 <a href=\"\">环境变量</a>。代表当前用户登录 shell 名称的变量 <code>$SHELL</code> 是在文件 <code>/etc/password</code> 或是某个初始化脚本中被设定的，它也不是一个 Bash 的内建变量。</p>\n<div><pre><code>tcsh% <span>echo</span> <span>$LOGNAME</span>\nbozo\ntcsh% <span>echo</span> <span>$SHELL</span>\n/bin/tcsh\ntcsh% <span>echo</span> <span>$TERM</span>\nrxvt\n\nbash$ <span>echo</span> <span>$LOGNAME</span>\nbozo\nbash$ <span>echo</span> <span>$SHELL</span>\n/bin/tcsh\nbash$ <span>echo</span> <span>$TERM</span>\nrxvt\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>{% endhint %}</p>\n<h2 id=\"位置参数\"> 位置参数</h2>\n<h3 id=\"_0-1-2-等\"> $0, $1, $2 等</h3>\n<p>位置参数。出现在从命令行传递给脚本、函数或是通过内建命令 <a href=\"\"><code>set</code></a> 设置变量时（参考 <a href=\"\">样例 4-5</a> 或是 <a href=\"\">样例 15-16</a>）。</p>\n<h3 id=\"\"> $#</h3>\n<p>命令行参数<sup></sup>或是位置参数的个数（参考 <a href=\"\">样例 36-2</a>）。</p>\n<h3 id=\"-2\"> $*</h3>\n<p>将所有的位置参数整合，视作一个单词。</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p>该参数必须是被引用的状态，<code>&quot;$*&quot;</code>。</p>\n<p>{% endhint %}</p>\n<h3 id=\"-3\"> $@</h3>\n<p>该参数等同于 <code>$*</code>，但其中每个参数都是独立的被引用的字符串。也就是说，所有的参数都是被原封不动的进行传递，并没有被解析或是扩展。这意味着，参数列表中的每一个参数都被独立视为一个单词。</p>\n<p>{% hint style=&quot;info&quot; %}</p>\n<p>同样，该参数必须是被引用的状态，<code>&quot;$@&quot;</code>。</p>\n<p>{% endhint %}</p>\n<h4 id=\"样例-9-6-参数列表-利用-和-列出参数\"> 样例 9-6. 参数列表：利用 $* 和 $@ 列出参数</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># arglist.sh</span>\n<span># 在调用该脚本时需要跟上一些参数，例如 \"one two three\" ...</span>\n\n<span>E_BADARGS</span><span>=</span><span>85</span>\n\n<span>if</span> <span>[</span> <span>!</span> -n <span>\"<span>$1</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> argument1 argument2 etc.\"</span>\n  <span>exit</span> <span>$E_BADARGS</span>\n<span>fi</span>\n\n<span>echo</span>\n\n<span>index</span><span>=</span><span>1</span>          <span># 初始化计数器。</span>\n\n<span>echo</span> <span>\"Listing args with <span title=\"\\&quot;\">\\\"</span>\\<span>$*</span><span title=\"\\&quot;\">\\\"</span>:\"</span>\n<span>for</span> <span>arg</span> <span>in</span> <span>\"<span>$*</span>\"</span>  <span># 如果这里没有引用 \"$*\"，脚本将不会正常运行。</span>\n<span>do</span>\n  <span>echo</span> <span>\"Arg #<span>$index</span> = <span>$arg</span>\"</span>\n  <span>let</span> <span>\"index+=1\"</span>\n<span>done</span>             <span># $* 将所有参数视作一个单词。</span>\n<span>echo</span> <span>\"Entire arg list seen as single word.\"</span>\n\n<span>echo</span>\n\n<span>index</span><span>=</span><span>1</span>          <span># 重置计数器。</span>\n                 <span># 如果忘了这一步将会发生什么？</span>\n                 \n<span>echo</span> <span>\"Listing args with <span title=\"\\&quot;\">\\\"</span>\\<span>$@</span><span title=\"\\&quot;\">\\\"</span>:\"</span>\n<span>for</span> <span>arg</span> <span>in</span> <span>\"<span>$@</span>\"</span>\n<span>do</span>\n  <span>echo</span> <span>\"Arg #<span>$index</span> = <span>$arg</span>\"</span>\n  <span>let</span> <span>\"index+=1\"</span>\n<span>done</span>             <span># $@ 将所有参数视作独立的单词。</span>\n<span>echo</span> <span>\"Arg list seen as separate words.\"</span>\n\n<span>echo</span>\n\n<span>index</span><span>=</span><span>1</span>          <span># 重置计数器。</span>\n\n<span>echo</span> <span>\"Listing args with \\<span>$*</span> (unquoted):\"</span>\n<span>for</span> <span>arg</span> <span>in</span> <span>$*</span>\n<span>do</span>\n  <span>echo</span> <span>\"Arg #<span>$index</span> = <span>$arg</span>\"</span>\n  <span>let</span> <span>\"index+=1\"</span>\n<span>done</span>             <span># 未被引用的 $* 将所有参数视作独立的单词。</span>\n<span>echo</span> <span>\"Arg list seen as separate words.\"</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><p>在 <code>shift</code> 命令执行后，<code>$@</code> 将会保留除了 <code>$1</code> 之外的剩余的命令行参数，而 <code>$1</code> 则会被丢弃。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 使用 ./scriptname 1 2 3 4 5 调用脚本</span>\n\n<span>echo</span> <span>\"<span>$@</span>\"</span>    <span># 1 2 3 4 5</span>\n<span>shift</span>\n<span>echo</span> <span>\"<span>$@</span>\"</span>    <span># 2 3 4 5</span>\n<span>shift</span>\n<span>echo</span> <span>\"<span>$@</span>\"</span>    <span># 3 4 5</span>\n\n<span># 每一次 \"shift\" 都会丢弃参数 $1。</span>\n<span># \"$@\" 则包含了剩余的所有参数。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>参数 <code>$@</code> 也可被用作过滤 shell 脚本输入的工具。结构 <code>cat &quot;$@&quot;</code> 可以接受来自标准输入 <code>stdin</code> 的输入，也可以接受传递给脚本的参数中的文件中的输入。参考 <a href=\"\">样例 16-24</a> 和 <a href=\"\">样例 16-25</a>。</p>\n<p>{% hint style=&quot;warning&quot; %}</p>\n<p>根据分隔符 <a href=\"\"><code>$IFS</code></a> 设置的不同，<code>$*</code> 和 <code>$@</code> 有时会出现不一致或非预期行为。</p>\n<p>{% endhint %}</p>\n<h4 id=\"样例-9-7-和-的不一致行为\"> 样例 9-7. $* 和 $@ 的不一致行为</h4>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>#  Bash 的内部变量 \"$*\" 和 \"$@\" 拥有不稳定的行为，</span>\n<span>#+ 这些行为是否出现通常依赖于它们是否是被引用的状态。</span>\n<span>#  下面的代码会演示在分词和换行时，这些变量所会出现的一些不一致的处理方式。</span>\n\n\n<span>set</span> -- <span>\"First one\"</span> <span>\"second\"</span> <span>\"third:one\"</span> <span>\"\"</span> <span>\"Fifth: :one\"</span>\n<span># 设置脚本参数，$1, $2, $3 等等。</span>\n\n<span>echo</span> \n\n<span>echo</span> <span>'IFS unchanged, using \"<span>$*</span>\"'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>\"<span>$*</span>\"</span>               <span># 被引用状态。</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>   <span># 这一行在下面所有的例子中都保持不变。</span>\n                            <span># 输出参数。</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS unchanged, using <span>$*</span>'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>$*</span>                 <span># 未被引用状态。</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS unchanged, using \"<span>$@</span>\"'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>\"<span>$@</span>\"</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS unchanged, using <span>$@</span>'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>$@</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span><span>IFS</span></span><span>=</span>:\n<span>echo</span> <span>'IFS=\":\", using \"<span>$*</span>\"'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>\"<span>$*</span>\"</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS=\":\", using <span>$*</span>'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>$*</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>var</span><span>=</span><span>$*</span>\n<span>echo</span> <span>'IFS=\":\", using \"<span>$var</span>\" (var=<span>$*</span>)'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>\"<span>$var</span>\"</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS=\":\", using <span>$var</span> (var=<span>$*</span>)'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>$var</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>var</span><span>=</span><span>\"<span>$*</span>\"</span>\n<span>echo</span> <span>'IFS=\":\", using <span>$var</span> (var=\"<span>$*</span>\")'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>$var</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS=\":\", using \"<span>$var</span>\" (var=\"<span>$*</span>\")'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>\"<span>$var</span>\"</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS=\":\", using \"<span>$@</span>\"'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>\"<span>$@</span>\"</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS=\":\", using <span>$@</span>'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>$@</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>var</span><span>=</span><span>$@</span>\n<span>echo</span> <span>'IFS=\":\", using <span>$var</span> (var=<span>$@</span>)'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>$var</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS=\":\", using \"<span>$var</span>\" (var=<span>$@</span>)'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>\"<span>$var</span>\"</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>var</span><span>=</span><span>\"<span>$@</span>\"</span>\n<span>echo</span> <span>'IFS=\":\", using \"<span>$var</span>\" (var=\"<span>$@</span>\")'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>\"<span>$var</span>\"</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n<span>echo</span> ---\n\n<span>echo</span> <span>'IFS=\":\", using <span>$var</span> (var=\"<span>$@</span>\")'</span>\n<span>c</span><span>=</span><span>0</span>\n<span>for</span> <span>i</span> <span>in</span> <span>$var</span>\n<span>do</span> <span>echo</span> <span>\"<span><span>$((</span>c<span>+</span><span>=</span><span>1</span><span>))</span></span>: [<span>$i</span>]\"</span>\n<span>done</span>\n\n<span>echo</span>\n\n<span># 尝试在 ksh 或是 zsh -y 下执行这个脚本。</span>\n\n<span>exit</span> <span>0</span>\n\n<span>#  这个样例是由 Stephane Chazelas 所编写，</span>\n<span>#+ 由本书作者轻微改动。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br></div></div><p>{% hint style=&quot;info&quot; %}</p>\n<p><code>$@</code> 和 <code>$*</code> 仅在被双引号引用时才会表现出不同。</p>\n<p>{% endhint %}</p>\n<h4 id=\"样例-9-8-当-ifs-为空时-和-的表现\"> 样例 9-8. 当 $IFS 为空时 $* 和 $@ 的表现</h4>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>#  如果 $IFS 被设置为空，</span>\n<span>#+ 那么 \"$*\" 和 \"$@\" 将不会像期望的那样输出位置参数。</span>\n\nmecho <span>(</span><span>)</span>       <span># 输出位置参数。</span>\n<span>{</span>\n<span>echo</span> <span>\"<span>$1</span>,<span>$2</span>,<span>$3</span>\"</span><span>;</span>\n<span>}</span>\n\n\n<span><span>IFS</span></span><span>=</span><span>\"\"</span>         <span># 设置为空。</span>\n<span>set</span> a b c      <span># 位置参数。</span>\n\nmecho <span>\"<span>$*</span>\"</span>     <span># abc,,</span>\n<span>#                   ^^</span>\nmecho <span>$*</span>       <span># a,b,c</span>\n\nmecho <span>$@</span>       <span># a,b,c</span>\nmecho <span>\"<span>$@</span>\"</span>     <span># a,b,c</span>\n\n<span>#  当 $IFS 为空时 $* 和 $@ 的行为</span>\n<span>#+ 依赖于 Bash 或是 sh 所运行的版本。</span>\n<span>#  因此不宜在脚本中使用这个“特性”。</span>\n\n\n<span># 感谢 Stephane Chazelas。</span>\n\n<span>exit</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h2 id=\"其他特殊参数\"> 其他特殊参数</h2>\n<h3 id=\"-4\"> $-</h3>\n<p>使用 <a href=\"\"><code>set</code></a> 命令设置的脚本标记。参考 <a href=\"\">样例 15-16</a>。</p>\n<p>{% hint style=&quot;warning&quot; %}</p>\n<p>这个参数最开始是从 ksh 引入到 Bash中的。但很遗憾的是，该参数在 Bash 脚本中并不能可靠地运行。该参数可能的一个用法是用于 <a href=\"\">自检脚本是否可交互</a>。</p>\n<p>{% endhint %}</p>\n<h3 id=\"-5\"> $!</h3>\n<p>运行在后台的最后一个任务的 <a href=\"\">进程ID</a>。</p>\n<div><pre><code><span>LOG</span><span>=</span><span>$0</span>.log\n\n<span>COMMAND1</span><span>=</span><span>\"sleep 100\"</span>\n\n<span>echo</span> <span>\"Logging PIDs background commands for script: <span>$0</span>\"</span> <span>>></span> <span>\"<span>$LOG</span>\"</span>\n<span># 这样就可以监控命令，并在必要的时候终止它们。</span>\n<span>echo</span> <span>>></span> <span>\"<span>$LOG</span>\"</span>\n\n<span># 记录命令。</span>\n\n<span>echo</span> -n <span>\"PID of <span title=\"\\&quot;\">\\\"</span><span>$COMMAND1</span><span title=\"\\&quot;\">\\\"</span>:  \"</span> <span>>></span> <span>\"<span>$LOG</span>\"</span>\n<span>${COMMAND1}</span> <span>&amp;</span>\n<span>echo</span> <span>$!</span> <span>>></span> <span>\"<span>$LOG</span>\"</span>\n<span># \"sleep 100\" 的 PID 是 1506</span>\n\n<span># 感谢 Jacques Lederer 提出的该建议。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>将 <code>$!</code> 用于控制任务：</p>\n<div><pre><code>possibly_hanging_job <span>&amp;</span> <span>{</span> <span>sleep</span> <span>${TIMEOUT}</span><span>;</span> <span>eval</span> <span>'kill -9 <span>$!</span>'</span> <span>&amp;></span> /dev/null<span>;</span> <span>}</span>\n<span># 强制终止一个出错的程序。</span>\n<span># 非常有用，例如可以用在启动脚本中。</span>\n\n<span># 感谢 Sylvain Fourmanoit 提出的这个利用变量 \"$!\" 的创造性用法。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>也可以这么使用：</p>\n<div><pre><code><span># 该样例由 Matthew Sage 编写。</span>\n<span># 本书经授权后使用。</span>\n\n<span>TIMEOUT</span><span>=</span><span>30</span>   <span># 以秒为单位的超时时间值。</span>\n<span>count</span><span>=</span><span>0</span>\n\npossibly_hanging_job <span>&amp;</span> <span>{</span>\n        <span>while</span> <span><span>((</span>count <span>&lt;</span> TIMEOUT <span>))</span></span><span>;</span> <span>do</span>\n                <span>eval</span> <span>'[ ! -d \"/proc/<span>$!</span>\" ] &amp;&amp; <span><span>((</span>count <span>=</span> TIMEOUT<span>))</span></span>'</span>\n                <span># 当前运行进程的详细信息都可以在 /proc 中找到。</span>\n                <span># \"-d\" 用于测试进程是否存在（即在 /proc 文件夹下该进程的文件夹是否存在）。</span>\n                <span># 我们在等待出问题的任务出现。</span>\n                <span><span>((</span>count<span>++</span><span>))</span></span>\n                <span>sleep</span> <span>1</span>\n        <span>done</span>\n        <span>eval</span> <span>'[ -d \"/proc/<span>$!</span>\" ] &amp;&amp; kill -15 <span>$!</span>'</span>\n        <span># 如果被挂起的任务正在运行就终止它。</span>\n<span>}</span>\n\n<span>#  -------------------------------------------------------------- #</span>\n\n<span>#  然而，如果另外一个进程在 \"hanging_job\" 之后开始运行</span>\n<span>#+ 该函数可能不能正常运行 ...</span>\n<span>#  在那种情况下，一个非我们预期的任务会被终止。</span>\n<span>#  Ariel Meragelman 提出了如下的解决方案。</span>\n\n<span>TIMEOUT</span><span>=</span><span>30</span>\n<span>count</span><span>=</span><span>0</span>\n\npossibly_hanging_job <span>&amp;</span> <span>{</span>\n    <span>while</span> <span><span>((</span>count <span>&lt;</span> TIMEOUT <span>))</span></span><span>;</span> <span>do</span>\n            <span>eval</span> <span>'[ !-d \"/proc/<span>$lastjob</span>\" ] &amp;&amp; <span><span>((</span>count <span>=</span> TIMEOUT<span>))</span></span>'</span>\n            <span>lastjob</span><span>=</span><span>$!</span>\n            <span><span>((</span>count<span>++</span><span>))</span></span>\n            <span>sleep</span> <span>1</span>\n    <span>done</span>\n    <span>eval</span> <span>'[ -d \"/proc/<span>$lastjob</span>\" ] &amp;&amp; kill -15 <span>$lastjob</span>'</span>\n<span>}</span>\n\n<span>exit</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h3 id=\"-6\"> $_</h3>\n<p>该变量被设置为上一个执行的命令的最后一个参数。</p>\n<h4 id=\"样例-9-9-下划线变量\"> 样例 9-9. 下划线变量</h4>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>echo</span> <span>$_</span>              <span>#  /bin/bash</span>\n                     <span>#  仅通过调用 /bin/bash 执行该脚本。</span>\n                     <span>#  注意这个结果会根据脚本如何被调用</span>\n                     <span>#+ 而有所不同。</span>\n\n<span>du</span> <span>></span>/dev/null        <span>#  这样命令就不会在命令行上有任何输出。</span>\n<span>echo</span> <span>$_</span>              <span>#  du</span>\n\n<span>ls</span> -al <span>></span>/dev/null    <span>#  这样命令就不会在命令行上有任何输出。</span>\n<span>echo</span> <span>$_</span>              <span>#  -al (最后一个参数)</span>\n\n<span>:</span>\n<span>echo</span> <span>$_</span>              <span>#  :</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id=\"-7\"> $?</h3>\n<p>命令、<a href=\"\">函数</a> 或是脚本自身的 <a href=\"\">退出状态</a>。参考 <a href=\"\">样例 24-7</a>。</p>\n<h3 id=\"-8\"> $$</h3>\n<p>脚本自身的进程 ID<sup></sup>。该变量 <code>$$</code> 通常在脚本构建独有的临时文件时被使用（参考 <a href=\"\">样例 32-6</a>，<a href=\"\">样例 16-31</a>，以及 <a href=\"\">样例 15-27</a>）。该方法通常比调用 <a href=\"\"><code>mktemp</code></a> 命令更简单。</p>\n<h2 id=\"注记\"> 注记</h2>\n<p>{% hint style=&quot;info&quot; %}\n栈寄存器是一段连续的内存空间，在该空间中，存入（压栈）的值是以倒序的方式取出（出栈）的。最后一个存入的值被最先取出。其通常又被称为后进先出(LIFO)或是下堆栈。\n{% endhint %}</p>\n<p>{% hint style=&quot;info&quot; %}\n当前运行脚本的进程 ID 就是 <code>$$</code>。\n{% endhint %}</p>\n<p>{% hint style=&quot;info&quot; %}\n类似于 <a href=\"\">递归</a>。在本文中，嵌套是指代一种模式被嵌入在一种更大的模式中。在 1913 年出版的韦伯斯特大辞典中用一种更加优雅的方式解释了什么是嵌套：“一组按体积大小排列的盒子、箱子或是类似的东西，它们中的每一个都被放入到另一个更大的箱子中。(A collection of boxes, cases, or the like, of graduated size, each put within the one next larger.)”。\n{% endhint %}</p>\n<p>{% hint style=&quot;info&quot; %}\n术语“变量(argument)”和“参数(parameter)”通常情况下是可以互相交换使用的。在本书中，它们具有相同的含义：传入脚本或函数的变量。\n{% endhint %}</p>\n<p>{% hint style=&quot;info&quot; %}\n在 subshell 中运行的脚本，<code>$$</code> <a href=\"\">返回脚本的进程 ID</a> 而非 subshell 的。\n{% endhint %}</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>Footnotes placeholder </p>\n</li>\n<li id=\"fn2\"><p>Footnotes placeholder </p>\n</li>\n<li id=\"fn3\"><p>Footnotes placeholder </p>\n</li>\n<li id=\"fn4\"><p>Footnotes placeholder </p>\n</li>\n<li id=\"fn5\"><p>Footnotes placeholder </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "9.2.1 declare 的另类用法",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_2_1_another_use_for_declare/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_2_1_another_use_for_declare/",
      "content_html": "<h1 id=\"_9-2-1-declare-的另类用法\"> 9.2.1 <code>declare</code> 的另类用法</h1>\n<p><code>declare</code> 命令可以帮助用户识别变量、<a href=\"\">环境变量</a> 或是其他信息，与 <a href=\"\">数组</a> 搭配效果更佳。</p>\n<div><pre><code>bash$ <span>declare</span> <span>|</span> <span>grep</span> <span>HOME</span>\n<span><span>HOME</span></span><span>=</span>/home/bozo\n\n\nbash$ <span>zzy</span><span>=</span><span>68</span>\nbash$ <span>declare</span> <span>|</span> <span>grep</span> zzy\n<span>zzy</span><span>=</span><span>68</span>\n\n\nbash$ <span>Colors</span><span>=</span><span>(</span><span>[</span><span>0</span><span>]</span><span>=</span><span>\"purple\"</span> <span>[</span><span>1</span><span>]</span><span>=</span><span>\"reddish-orange\"</span> <span>[</span><span>2</span><span>]</span><span>=</span><span>\"light green\"</span><span>)</span>\nbash$ <span>echo</span> <span>${Colors<span>[</span>@<span>]</span>}</span>\npurple reddish-orange light green\nbash$ <span>declare</span> <span>|</span> <span>grep</span> Colors\n<span>Colors</span><span>=</span><span>(</span><span>[</span><span>0</span><span>]</span><span>=</span><span>\"purple\"</span> <span>[</span><span>1</span><span>]</span><span>=</span><span>\"reddish-orange\"</span> <span>[</span><span>2</span><span>]</span><span>=</span><span>\"light green\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "9.2 变量类型标注：declare 与 typeset",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_2_typing_variables_declare_or_typeset/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_2_typing_variables_declare_or_typeset/",
      "content_html": "<h1 id=\"_9-2-变量类型标注-declare-与-typeset\"> 9.2 变量类型标注：<code>declare</code> 与 <code>typeset</code></h1>\n<p><a href=\"\">内建命令</a> <code>declare</code> 和 <code>typeset</code> 是完全相同的命令，其被用于修改变量的属性。相比起一部分编程语言来说，这种修改属于非常弱的类型标注方式<sup></sup>。<code>declare</code> 命令只有在 Bash version 2 及更高版本才能使用，而 <code>typeset</code> 命令可以在 ksh 脚本中运行。</p>\n<h2 id=\"declare-typeset-命令选项\"> <code>declare</code>/<code>typeset</code> 命令选项</h2>\n<h3 id=\"r-只读-readonly\"> -r 只读（readonly）</h3>\n<p>（<code>declare -r var1</code> 与 <code>readonly var1</code> 的作用相同）</p>\n<p>该选项约等于 C 语言中的类型限定符 <code>const</code>。任何尝试修改只读变量的行为都会导致脚本出错。</p>\n<div><pre><code><span>declare</span> -r <span>var1</span><span>=</span><span>1</span>\n<span>echo</span> <span>\"var1 = <span>$var1</span>\"</span>   <span># var1 = 1</span>\n\n<span><span>((</span> var1<span>++</span> <span>))</span></span>          <span># x.sh: line 4: var1: readonly variable</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"i-整型-integer\"> -i 整型（integer）</h3>\n<div><pre><code><span>declare</span> -i number\n<span># 脚本会将之后所有出现的 \"number\" 变量的类型都视作整型。</span>\n\n<span>number</span><span>=</span><span>3</span>\n<span>echo</span> <span>\"Number = <span>$number</span>\"</span>     <span># Number = 3</span>\n\n<span>number</span><span>=</span>three\n<span>echo</span> <span>\"Number = <span>$number</span>\"</span>     <span># Number = 0</span>\n<span># 脚本试图将字符串 \"three\" 视为整型。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>被视为整型的变量无需命令 <a href=\"\"><code>expr</code></a> 或是 <a href=\"\"><code>let</code></a> 即可进行数学运算。</p>\n<div><pre><code><span>n</span><span>=</span><span>6</span>/3\n<span>echo</span> <span>\"n = <span>$n</span>\"</span>       <span># n = 6/3</span>\n\n<span>declare</span> -i n\n<span>n</span><span>=</span><span>6</span>/3\n<span>echo</span> <span>\"n = <span>$n</span>\"</span>       <span># n = 2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"a-数组-array\"> -a 数组（array）</h3>\n<div><pre><code><span>declare</span> -a indices\n</code></pre>\n<div><span>1</span><br></div></div><p>变量 <code>indices</code> 会被视作 <a href=\"\">数组</a>。</p>\n<h3 id=\"f-函数-function\"> -f 函数（function）</h3>\n<div><pre><code><span>declare</span> -f\n</code></pre>\n<div><span>1</span><br></div></div><p>如果没有在 <code>declare -f</code> 后带上任何参数，该语句将会列出在脚本中已经定义的所有函数。</p>\n<div><pre><code><span>declare</span> -f function_name\n</code></pre>\n<div><span>1</span><br></div></div><p>而 <code>declare -f function_name</code> 则仅仅列出名为 <code>function_name</code> 的函数。</p>\n<h3 id=\"x-导出-export\"> -x 导出（export）</h3>\n<div><pre><code><span>declare</span> -x var3\n</code></pre>\n<div><span>1</span><br></div></div><p>该语句声明了变量 <code>var3</code> 可以导出到该变量所属脚本之外的 shell 环境中。</p>\n<h3 id=\"x-var-value\"> -x var=$value</h3>\n<div><pre><code><span>declare</span> -x <span>var3</span><span>=</span><span>373</span>\n</code></pre>\n<div><span>1</span><br></div></div><p><code>declare</code> 命令允许在设置变量属性的同时给变量赋值。</p>\n<h4 id=\"样例9-10-使用-declare-命令标注变量类型\"> 样例9-10. 使用 <code>declare</code> 命令标注变量类型</h4>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>func1</span> <span>(</span><span>)</span>\n<span>{</span>\n  <span>echo</span> This is a function.\n<span>}</span>\n\n<span>declare</span> -f        <span># 显示上面的所有函数。</span>\n\n<span>echo</span>\n\n<span>declare</span> -i var1   <span># var1 是一个整型变量。</span>\n<span>var1</span><span>=</span><span>2367</span>\n<span>echo</span> <span>\"var1 declared as <span>$var1</span>\"</span>\n<span>var1</span><span>=</span>var1+1       <span># 整型变量的运算可以省略 let 命令。</span>\n<span>echo</span> <span>\"var1 incremented by 1 is <span>$var1</span>.\"</span>\n<span># 尝试修改整型变量。</span>\n<span>echo</span> <span>\"Attempting to change var1 to floating point value, 2367.1.\"</span>\n<span>var1</span><span>=</span><span>2367.1</span>       <span># 报错，并且 var1 的值并没有被修改。</span>\n<span>echo</span> <span>\"var1 is still <span>$var1</span>\"</span>\n\n<span>echo</span>\n\n<span>declare</span> -r <span>var2</span><span>=</span><span>13.36</span>         <span># 'declare' 允许在设置变量属性时，</span>\n                              <span>#+ 同时给变量赋值。</span>\n<span>echo</span> <span>\"var2 declared as <span>$var2</span>\"</span> <span># 尝试修改只读变量。</span>\n<span>var2</span><span>=</span><span>13.37</span>                    <span># 报错，然后脚本异常结束。</span>\n\n<span>echo</span> <span>\"var2 is still <span>$var2</span>\"</span>    <span># 这行语句将不会被执行。</span>\n\n<span>exit</span> <span>0</span>                        <span># 脚本也不会从这里结束。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><p>{% hint style=&quot;warning&quot; %}</p>\n<p>使用内建命令 <code>declare</code> 还可以限制变量的 <a href=\"\">作用域</a>。</p>\n<div><pre><code><span>foo</span> <span>(</span><span>)</span>\n<span>{</span>\n<span>FOO</span><span>=</span><span>\"bar\"</span>\n<span>}</span>\n\n<span>bar</span> <span>(</span><span>)</span>\n<span>{</span>\nfoo\n<span>echo</span> <span>$FOO</span>\n<span>}</span>\n\nbar   <span># 输出 bar。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>但是...</p>\n<div><pre><code><span>foo</span><span>(</span><span>)</span><span>{</span>\n<span>declare</span> <span>FOO</span><span>=</span><span>\"bar\"</span>\n<span>}</span>\n\n<span>bar</span> <span>(</span><span>)</span>\n<span>{</span>\nfoo\n<span>echo</span> <span>$FOO</span>\n<span>}</span>\n\nbar  <span># 什么都不会输出。</span>\n\n\n<span># 感谢 Michael Iatrou 指出这点。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>{% endhint %}</p>\n<h2 id=\"注记\"> 注记</h2>\n<p>{% hint style=&quot;info&quot; %}\n在本书中，变量类型标注（typing）是指指定变量类型并限制其属性。例如一个变量被 <code>declared</code> 或是 <code>typed</code> 命令声明为整型，则该变量不再适用于各种 <a href=\"\">字符串操作</a>。</p>\n<div><pre><code><span>declare</span> -i intvar\n\n<span>intvar</span><span>=</span><span>23</span>\n<span>echo</span> <span>\"<span>$intvar</span>\"</span>   <span># 23</span>\n<span>intvar</span><span>=</span>stringval\n<span>echo</span> <span>\"<span>$intvar</span>\"</span>   <span># 0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>{% endhint %}</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>Footnotes placeholder </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "9.3 $RANDOM：生成随机数",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_3_random_generate_random_integer/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_3_random_generate_random_integer/",
      "content_html": "<h1 id=\"_9-3-random-生成随机数\"> 9.3 <code>$RANDOM</code>：生成随机数</h1>\n<blockquote>\n<p>任何试图通过确定性方法生成随机数的行为都是在犯罪。</p>\n<p>—— 约翰·冯·诺伊曼</p>\n</blockquote>\n<p><code>$RANDOM</code> 是 Bash 中用来生成 0 至 32767 之间随机整数<sup></sup>的一个内置 <a href=\"\">函数</a>（而非常量）。其<strong>不应</strong>被用于生成密钥。</p>\n<h4 id=\"样例-9-11-生成随机数\"> 样例 9-11. 生成随机数</h4>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span># $RANDOM 每一次调用都会返回一个随机的不同的整数。</span>\n<span># 随机数的标称范围为 0 - 32767（16位有符号整型）。</span>\n\n<span>MAXCOUNT</span><span>=</span><span>10</span>\n<span>count</span><span>=</span><span>1</span>\n\n<span>echo</span>\n<span>echo</span> <span>\"<span>$MAXCOUNT</span> random numbers:\"</span>\n<span>echo</span> <span>\"-----------------\"</span>\n<span>while</span> <span>[</span> <span>\"<span>$count</span>\"</span> -le <span>$MAXCOUNT</span> <span>]</span>      <span># 生成 10 ($MAXCOUNT) 个随机整数。</span>\n<span>do</span>\n  <span>number</span><span>=</span><span>$RANDOM</span>\n  <span>echo</span> <span>$number</span>\n  <span>let</span> <span>\"count += 1\"</span>  <span># 增加计数。</span>\n<span>done</span>\n<span>echo</span> <span>\"-----------------\"</span>\n\n<span># 如果你需要一个小于指定上界的随机数，可以使用 'modulo' 操作符。</span>\n<span># 该操作符可以返回除法后的余数。</span>\n\n<span>RANGE</span><span>=</span><span>500</span>\n\n<span>echo</span>\n\n<span>number</span><span>=</span><span>$RANDOM</span>\n<span>let</span> <span>\"number %= <span>$RANGE</span>\"</span>\n<span>#           ^^</span>\n<span>echo</span> <span>\"Random number less than <span>$RANGE</span> --- <span>$number</span>\"</span>\n\n<span>echo</span>\n\n\n\n<span>#  如果你需要生成的随机数大于一个指定的下界，</span>\n<span>#+ 可以增加一步判断，判别并丢弃所有小于下界的数。</span>\n\n<span>FLOOR</span><span>=</span><span>200</span>\n\n<span>number</span><span>=</span><span>0</span>   <span># 初始化</span>\n<span>while</span> <span>[</span> <span>\"<span>$number</span>\"</span> -le <span>$FLOOR</span> <span>]</span>\n<span>do</span>\n  <span>number</span><span>=</span><span>$RANDOM</span>\n<span>done</span>\n<span>echo</span> <span>\"Random number greater than <span>$FLOOR</span> --- <span>$number</span>\"</span>\n<span>echo</span>\n\n   <span># 现在来看一种可以代替上面循环的更简单的方式，也就是</span>\n   <span>#       let \"number = $RANDOM + $FLOOR\"</span>\n   <span># 该方式可以不使用 while 循环，效率更高。</span>\n   <span># 但是，该方法可能会产生一些问题，是什么呢？</span>\n\n\n\n<span># 通过结合上面的两种方法，可以获得一个特定范围内的随机数。</span>\n<span>number</span><span>=</span><span>0</span>   <span># 初始化</span>\n<span>while</span> <span>[</span> <span>\"<span>$number</span>\"</span> -le <span>$FLOOR</span> <span>]</span>\n<span>do</span>\n  <span>number</span><span>=</span><span>$RANDOM</span>\n  <span>let</span> <span>\"number %= <span>$RANGE</span>\"</span>  <span># 将 $number 缩小至 $RANGE 的范围内。</span>\n<span>done</span>\n<span>echo</span> <span>\"Random number between <span>$FLOOR</span> and <span>$RANGE</span> --- <span>$number</span>\"</span>\n<span>echo</span>\n\n\n\n<span># 生成二元选择值，即真(true)或假(false)。</span>\n<span>BINARY</span><span>=</span><span>2</span>\n<span>T</span><span>=</span><span>1</span>\n<span>number</span><span>=</span><span>$RANDOM</span>\n\n<span>let</span> <span>\"number %= <span>$BINARY</span>\"</span>\n<span>#  如果使用    let \"number >>= 14\"    可以获得更优的随机分布</span>\n<span>#+ （除了最低位，其余二进制位都右移）。</span>\n<span>if</span> <span>[</span> <span>\"<span>$number</span>\"</span> -eq <span>$T</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"TRUE\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"FALSE\"</span>\n<span>fi</span>\n\n<span>echo</span>\n\n\n<span># 扔一个骰子。</span>\n<span>SPOTS</span><span>=</span><span>6</span>   <span># 模 6 的余数范围为 0 - 5。</span>\n          <span># 然后加 1 就可以得到期望的范围 1 - 6。</span>\n          <span># 感谢 Paulo Marcel Coelho Aragao 简化了代码。</span>\n<span>die1</span><span>=</span><span>0</span>\n<span>die2</span><span>=</span><span>0</span>\n<span># 如果设置 SPOTS=7 就可以不用加 1 得到值。这是不是一种更好的方法，为什么？</span>\n\n<span># 为了保证公平，独立的投每一个骰子。</span>\n\n    <span>let</span> <span>\"die1 = <span>$RANDOM</span> % <span>$SPOTS</span> + 1\"</span> <span># 投第一个骰子。</span>\n    <span>let</span> <span>\"die2 = <span>$RANDOM</span> % <span>$SPOTS</span> + 1\"</span> <span># 投第二个骰子。</span>\n    <span>#  哪一种运算符有更高的优先级，</span>\n    <span>#+ 取余(%)还是加法(+)？</span>\n\n\n<span>let</span> <span>\"throw = <span>$die1</span> + <span>$die2</span>\"</span>\n<span>echo</span> <span>\"Throw of the dice = <span>$throw</span>\"</span>\n<span>echo</span>\n\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br></div></div><h4 id=\"样例-9-12-从牌组中随机选牌\"> 样例 9-12. 从牌组中随机选牌</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># pick-card.sh</span>\n\n<span># 该样例演示了如何从数组中随机选择元素。</span>\n\n\n<span># 随机选择任意一张牌。</span>\n\n<span>Suites</span><span>=</span><span>\"Clubs\nDiamonds\nHearts\nSpades\"</span>\n\n<span>Denominations</span><span>=</span><span>\"2\n3\n4\n5\n6\n7\n8\n9\n10\nJack\nQueen\nKing\nAce\"</span>\n\n<span># 注意一个变量占了多行。</span>\n\n\n<span>suite</span><span>=</span><span>(</span><span>$Suites</span><span>)</span>                <span># 读入数组变量。</span>\n<span>denomination</span><span>=</span><span>(</span><span>$Denominations</span><span>)</span>\n\n<span>num_suites</span><span>=</span><span>${<span>#</span>suite<span>[</span>*<span>]</span>}</span>        <span># 数组中的元素数量。</span>\n<span>num_denominations</span><span>=</span><span>${<span>#</span>denomination<span>[</span>*<span>]</span>}</span>\n\n<span>echo</span> -n <span>\"<span>${denomination<span>[</span>$((RANDOM<span>%</span>num_denominations))<span>]</span>}</span> of \"</span>\n<span>echo</span> <span>${suite<span>[</span>$((RANDOM<span>%</span>num_suites))<span>]</span>}</span>\n\n\n<span># $bozo sh pick-cards.sh</span>\n<span># Jack of Clubs</span>\n\n\n<span># 感谢 jipe 指出可以用 $RANDOM 随机选牌。</span>\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><h4 id=\"example-9-13-模拟布朗运动\"> Example 9-13. 模拟布朗运动</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># brownian.sh</span>\n<span># 作者：Mendel Cooper</span>\n<span># 发布日期：10/26/07</span>\n<span># 开源协议：GPL3</span>\n\n<span>#  ----------------------------------------------------------------</span>\n<span>#  该脚本模拟了布朗运动。</span>\n<span>#+ 布朗运动是指微小粒子受到流体粒子随机碰撞，</span>\n<span>#+ 而在流体中做的无规则随机运动。</span>\n<span>#+ 也就是俗称的“醉汉走路”。</span>\n\n<span>#  布朗运动也可以被视作是一个简化的高尔顿板。</span>\n<span>#+ 高尔顿板是一个有着交错排列的钉子的倾斜板子，</span>\n<span>#+ 每次可以从中向下滚动一堆石子。</span>\n<span>#+ 在板子底端是一排槽位，</span>\n<span>#+ 石子最后会落在槽位中。</span>\n<span>#  把它想象成一个简单的弹珠游戏就可以了。</span>\n<span>#  当运行这个脚本之后，</span>\n<span>#+ 你就会发现大部分的石子都聚集在中间的槽位里。</span>\n<span>#+ 这与预期的二项分布相符。</span>\n<span>#  作为模拟高尔顿板的程序，</span>\n<span>#+ 脚本忽略了许多参数，</span>\n<span>#+ 例如板子的倾斜角度、石子滚动的摩擦系数、</span>\n<span>#+ 冲击角度以及钉子的弹性系数等等。</span>\n<span>#  忽略的这些参数能够在多大程度上影响模拟的精度？</span>\n<span>#  -------------------------------------------------------------</span>\n\n<span>PASSES</span><span>=</span><span>500</span>            <span>#  粒子作用数 / 石子数。</span>\n<span>ROWS</span><span>=</span><span>10</span>               <span>#  碰撞数 / 每一排钉子的数量。</span>\n<span>RANGE</span><span>=</span><span>3</span>               <span>#  $RANDOM 的输出范围为 0 - 2。</span>\n<span>POS</span><span>=</span><span>0</span>                 <span>#  滚落左侧或是右侧。</span>\n<span><span>RANDOM</span></span><span>=</span><span>$$</span>             <span>#  将脚本的进程 ID 作为</span>\n                      <span>#+ 生成随机数的种子。</span>\n\n<span>declare</span> -a Slots      <span># 用于储存落入每一个槽位的石子数量。</span>\n<span>NUMSLOTS</span><span>=</span><span>21</span>           <span># 底部槽位的数量。</span>\n\n\n<span>Initialize_Slots</span> <span>(</span><span>)</span> <span>{</span> <span># 初始化数组。</span>\n<span>for</span> <span>i</span> <span>in</span> <span><span>$(</span> <span>seq</span> $NUMSLOTS <span>)</span></span>\n<span>do</span>\n  Slots<span>[</span><span>$i</span><span>]</span><span>=</span><span>0</span>\n<span>done</span>\n\n<span>echo</span>                  <span># 在正式模拟开始之前先输出空行。</span>\n  <span>}</span>\n\n\n<span>Show_Slots</span> <span>(</span><span>)</span> <span>{</span>\n<span>echo</span><span>;</span> <span>echo</span>\n<span>echo</span> -n <span>\" \"</span>\n<span>for</span> <span>i</span> <span>in</span> <span><span>$(</span> <span>seq</span> $NUMSLOTS <span>)</span></span>   <span># 更精致地输出数组中的所有元素。</span>\n<span>do</span>\n  <span>printf</span> <span>\"%3d\"</span> <span>${Slots<span>[</span>$i<span>]</span>}</span>   <span># 每个结果都占三个字符的宽度。</span>\n<span>done</span>\n\n<span>echo</span> <span># 槽位：</span>\n<span>echo</span> <span>\" |__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|\"</span>\n<span>echo</span> <span>\"                                ||\"</span>\n<span>echo</span> <span>#  需要注意的是，如果任意一个槽位中石子的数量超过 99，</span>\n     <span>#+ 将会打乱整个程序的显示效果。</span>\n     <span>#  如果只运行 500 次通常可以避免这个问题。</span>\n  <span>}</span>\n\n\n<span>Move</span> <span>(</span><span>)</span> <span>{</span>              <span># 将一个单位左移、右移或保持原地不动。</span>\n  <span>Move</span><span>=</span><span>$RANDOM</span>         <span># $RANDOM 到底有多随机？让我们看看...</span>\n  <span>let</span> <span>\"Move %= RANGE\"</span>  <span># 标准化至范围 0 - 2。</span>\n  <span>case</span> <span>\"<span>$Move</span>\"</span> <span>in</span>\n    <span>0</span> <span>)</span> <span>;</span><span>;</span>                   <span># 什么也不做，也就是原地不动。</span>\n    <span>1</span> <span>)</span> <span><span>((</span>POS<span>--</span><span>))</span></span><span>;</span><span>;</span>          <span># 左移。</span>\n    <span>2</span> <span>)</span> <span><span>((</span>POS<span>++</span><span>))</span></span><span>;</span><span>;</span>          <span># 右移。</span>\n    * <span>)</span> <span>echo</span> -n <span>\"Error \"</span><span>;</span><span>;</span>   <span># 出现异常！（应该永远不会发生）</span>\n  <span>esac</span>\n  <span>}</span>\n\n\n<span>Play</span> <span>(</span><span>)</span> <span>{</span>                    <span># 模拟单次运行（内部循环）。</span>\n<span>i</span><span>=</span><span>0</span>\n<span>while</span> <span>[</span> <span>\"<span>$i</span>\"</span> -lt <span>\"<span>$ROWS</span>\"</span> <span>]</span>   <span># 每一排钉子经过且仅经过一次石子。</span>\n<span>do</span>\n  Move\n  <span><span>((</span>i<span>++</span><span>))</span></span><span>;</span>\n<span>done</span>\n\n<span>SHIFT</span><span>=</span><span>11</span>                     <span># 为什么是 11 而不是 10？</span>\n<span>let</span> <span>\"POS += <span>$SHIFT</span>\"</span>          <span># 将原点移到中间。</span>\n<span><span>((</span> Slots[$POS]<span>++</span> <span>))</span></span>          <span># 调试：echo $POS</span>\n\n<span># echo -n \"$POS \"</span>\n\n  <span>}</span>\n\n\n<span>Run</span> <span>(</span><span>)</span> <span>{</span>                     <span># 外部循环。</span>\n<span>p</span><span>=</span><span>0</span>\n<span>while</span> <span>[</span> <span>\"<span>$p</span>\"</span> -lt \"<span>$PASSES</span> <span>]</span>\n<span>do</span>\n  Play\n  <span><span>((</span> p<span>++</span> <span>))</span></span>\n  <span>POS</span><span>=</span><span>0</span>                      <span># 重置为 0。为什么要这么做？</span>\n<span>done</span>\n  <span>}</span>\n\n\n<span># --------------</span>\n<span># main ()</span>\nInitialize_Slots\nRun\nShow_Slots\n<span># --------------</span>\n\n<span>exit</span> <span>$?</span>\n\n<span>#  练习：</span>\n<span>#  ---------</span>\n<span>#  1) 将结果显示为一张直方图，</span>\n<span>#+    或者是一张散点图。</span>\n<span>#  2) 修改脚本，使用 /dev/urandom 提到 $RANDOM。</span>\n<span>#     这会使脚本更加的随机化么？</span>\n<span>#  3) 当每一个石子落下的时候，</span>\n<span>#+    尝试添加一些动画效果。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br></div></div><p>Jipe 提供了一些生成指定范围内随机数的方法。</p>\n<div><pre><code><span>#  生成范围为 6 到 30 的随机数。</span>\n   <span>rnumber</span><span>=</span><span><span>$((</span>RANDOM<span>%</span><span>25</span><span>+</span><span>6</span><span>))</span></span>\n\n<span>#  生成范围为 6 到 30 的随机数，</span>\n<span>#+ 并且该随机数能被 3 整除。</span>\n   <span>rnumber</span><span>=</span><span><span>$((</span><span>(</span>RANDOM<span>%</span><span>30</span><span>/</span><span>3</span><span>+</span><span>1</span><span>)</span><span>*</span><span>3</span><span>))</span></span>\n\n<span>#  需要注意这种方法并不是在所有情况下都能起效。</span>\n<span>#  会在 $RANDOM%30 为 0 时失效。</span>\n\n<span>#  Frank Wang 建议可以换用下面的方法：</span>\n   <span>rnumber</span><span>=</span><span><span>$((</span> RANDOM<span>%</span><span>27</span><span>/</span><span>3</span><span>*</span><span>3</span><span>+</span><span>6</span> <span>))</span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>Bill Gradwohl 提出了一种改良后的仅适用于正数的公式。</p>\n<div><pre><code><span>rnumber</span><span>=</span><span><span>$((</span><span>(</span>RANDOM<span>%</span><span>(</span>max<span>-</span>min<span>+</span>divisibleBy<span>))</span></span>/divisibleBy*divisibleBy+min<span>))</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>Bill 在这还给出了一个生成指定范围内随机数的通用函数。</p>\n<h4 id=\"样例-9-14-指定范围随机数\"> 样例 9-14. 指定范围随机数</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># random-between.sh</span>\n<span># 生成指定范围内的随机数。</span>\n<span># 本书作者在 Bill Gradwhol 所提供的脚本的基础上作了些细微修改。</span>\n<span># Anthony Le Clezio 修正了 187 行和 189 行。</span>\n<span># 本书被授权使用该脚本。</span>\n\n\n<span>randomBetween</span><span>(</span><span>)</span> <span>{</span>\n   <span>#  生成一个范围在 $min 和 $max 之间，</span>\n   <span>#+ 并且能被 $divisibleBy 整除的</span>\n   <span>#+ 随机正数或负数。</span>\n   <span>#  返回的随机数遵循合理的随机分布。</span>\n   \n   <span>#  Bill Gradwohl - Oct 1, 2003</span>\n   \n   <span>syntax</span><span>(</span><span>)</span> <span>{</span>\n   <span># 嵌套函数。</span>\n      <span>echo</span>\n      <span>echo</span>    <span>\"Syntax: randomBetween [min] [max] [multiple]\"</span>\n      <span>echo</span>\n      <span>echo</span> -n <span>\"Expects up to 3 passed parameters, \"</span>\n      <span>echo</span>    <span>\"but all are completely optional.\"</span>\n      <span>echo</span>    <span>\"min is the minimum value\"</span>\n      <span>echo</span>    <span>\"max is the maximum value\"</span>\n      <span>echo</span> -n <span>\"multiple specifies that the answer must be \"</span>\n      <span>echo</span>     <span>\"a multiple of this value.\"</span>\n      <span>echo</span>    <span>\"    i.e. answer must be evenly divisible by this number.\"</span>\n      <span>echo</span>\n      <span>echo</span>    <span>\"If any value is missing, defaults area supplied as: 0 32767 1\"</span>\n      <span>echo</span> -n <span>\"Successful completion returns 0, \"</span>\n      <span>echo</span>      <span>\"unsuccessful completion returns\"</span>\n      <span>echo</span>    <span>\"function syntax and 1.\"</span>\n      <span>echo</span> -n <span>\"The answer is returned in the global variable \"</span>\n      <span>echo</span>    <span>\"randomBetweenAnswer\"</span>\n      <span>echo</span> -n <span>\"Negative values for any passed parameter are \"</span>\n      <span>echo</span>    <span>\"handled correctly.\"</span>\n   <span>}</span>\n   \n   <span>local</span> <span>min</span><span>=</span><span>${1<span>:-</span>0}</span>\n   <span>local</span> <span>max</span><span>=</span><span>${2<span>:-</span>32767}</span>\n   <span>local</span> <span>divisibleBy</span><span>=</span><span>${3<span>:-</span>1}</span>\n   <span># 考虑到没有给函数传参的情况，给变量设置默认值。</span>\n   \n   <span>local</span> x\n   <span>local</span> spread\n   \n   <span># 确保 divisibleBy 的值为正数。</span>\n   <span>[</span> <span>${divisibleBy}</span> -lt <span>0</span> <span>]</span> <span>&amp;&amp;</span> <span>divisibleBy</span><span>=</span><span><span>$((</span><span>0</span><span>-</span>divisibleBy<span>))</span></span>\n   \n   <span># 合规校验。</span>\n   <span>if</span> <span>[</span> <span>$#</span> -gt <span>3</span> -o <span>${divisibleBy}</span> -eq <span>0</span> -o  <span>${min}</span> -eq <span>${max}</span> <span>]</span><span>;</span> <span>then</span>\n      syntax\n      <span>return</span> <span>1</span>\n   <span>fi</span>\n   \n   <span># 检查 min 和 max 的值是否颠倒。</span>\n   <span>if</span> <span>[</span> <span>${min}</span> -gt <span>${max}</span> <span>]</span><span>;</span> <span>then</span>\n      <span># 交换它们。</span>\n      <span>x</span><span>=</span><span>${min}</span>\n      <span>min</span><span>=</span><span>${max}</span>\n      <span>max</span><span>=</span><span>${x}</span>\n   <span>fi</span>\n   \n   <span>#  如果 min 值本身不能被 $divisibleBy 整除，</span>\n   <span>#+ 则将其修正到范围内。</span>\n   <span>if</span> <span>[</span> <span><span>$((</span>min<span>/</span>divisibleBy<span>*</span>divisibleBy<span>))</span></span> -ne <span>${min}</span> <span>]</span><span>;</span> <span>then</span>\n      <span>if</span> <span>[</span> <span>${min}</span> -lt <span>0</span> <span>]</span><span>;</span> <span>then</span>\n         <span>min</span><span>=</span><span><span>$((</span>min<span>/</span>divisibleBy<span>*</span>divisibleBy<span>))</span></span>\n      <span>else</span>\n         <span>min</span><span>=</span><span><span>$((</span><span>((</span>min<span>/</span>divisibleBy<span>)</span><span>+</span><span>1</span><span>)</span><span>*</span>divisibleBy<span>))</span></span>\n      <span>fi</span>\n   <span>fi</span>\n   \n   <span>#  如果 max 值本身不能被 $divisibleBy 整除，</span>\n   <span>#+ 则将其修正到范围内。</span>\n   <span>if</span> <span>[</span> <span><span>$((</span>max<span>/</span>divisibleBy<span>*</span>divisibleBy<span>))</span></span> -ne <span>${max}</span> <span>]</span><span>;</span> <span>then</span>\n      <span>if</span> <span>[</span> <span>${max}</span> -lt <span>0</span> <span>]</span><span>;</span> <span>then</span>\n         <span>max</span><span>=</span><span><span>$((</span><span>((</span>max<span>/</span>divisibleBy<span>)</span><span>-</span><span>1</span><span>)</span><span>*</span>divisibleBy<span>))</span></span>\n      <span>else</span>\n         <span>max</span><span>=</span><span><span>$((</span>max<span>/</span>divisibleBy<span>*</span>divisibleBy<span>))</span></span>\n      <span>fi</span>\n   <span>fi</span>\n\n   <span>#  ---------------------------------------------------------------------</span>\n   <span>#  接下来开始真正的内容。</span>\n   \n   <span>#  需要注意的是，为了得到端点间合理的随机分布，</span>\n   <span>#+ 随机数的取值范围应是 0 至 abs(max-min)+divisibleBy，</span>\n   <span>#+ 而不是简单的 abs(max-min)+1。</span>\n   \n   <span>#  少量的增长将会带来端点间</span>\n   <span>#+ 合理的随机分布。</span>\n   \n   <span>#  将公式修改为使用 abs(max-min)+1 仍然可以得到正确的答案，</span>\n   <span>#+ 但是获得的这些随机数的随机性是有缺陷的，</span>\n   <span>#+ 因为这种情况下返回的端点值 ($min 和 $max) 的次数远少于</span>\n   <span>#+ 使用正确公式时所返回的次数。</span>\n   <span>#  ---------------------------------------------------------------------</span>\n\n   <span>spread</span><span>=</span><span><span>$((</span>max<span>-</span>min<span>))</span></span>\n   <span>#  Omair Eshkenazi 指出在这里没有必要进行校验，</span>\n   <span>#+ 因为 max 和 min 的值已经被交换了。</span>\n   <span>[</span> <span>${spread}</span> -lt <span>0</span> <span>]</span> <span>&amp;&amp;</span> <span>spread</span><span>=</span><span><span>$((</span><span>0</span><span>-</span>spread<span>))</span></span>\n   <span>let</span> <span>spread</span><span>+=</span>divisibleBy\n   <span>randomBetweenAnswer</span><span>=</span><span><span>$((</span><span>(</span>RANDOM<span>%</span>spread<span>)</span><span>/</span>divisibleBy<span>*</span>divisibleBy<span>+</span>min<span>))</span></span>\n   \n   <span>return</span> <span>0</span>\n   \n   <span>#  但是 Paulo Marcel Coelho Aragao 指出</span>\n   <span>#+ 当 $max 和 $min 不能被 $divisibleBy 整除时，</span>\n   <span>#+ 该公式就会失效。</span>\n   <span>#</span>\n   <span>#  他建议替换为下面的公式：</span>\n   <span>#    rnumber = $(((RANDOM%(max-min+1)+min)/divisibleBy*divisibleBy))</span>\n   \n<span>}</span>\n\n<span># 接下来测试函数。</span>\n<span>min</span><span>=</span>-14\n<span>max</span><span>=</span><span>20</span>\n<span>divisibleBy</span><span>=</span><span>3</span>\n\n\n<span>#  循环执行足够多次数的函数，生成包含这些随机数的数组，</span>\n<span>#+ 然后校验数组中是否包含了端点范围内的每一个数字。</span>\n\n<span>declare</span> -a answer\n<span>minimum</span><span>=</span><span>${min}</span>\n<span>maximum</span><span>=</span><span>${max}</span>\n   <span>if</span> <span>[</span> <span><span>$((</span>minimum<span>/</span>divisibleBy<span>*</span>divisibleBy<span>))</span></span> -ne <span>${minimum}</span> <span>]</span><span>;</span> <span>then</span>\n      <span>if</span> <span>[</span> <span>${minimum}</span> -lt <span>0</span> <span>]</span><span>;</span> <span>then</span>\n         <span>minimum</span><span>=</span><span><span>$((</span>minimum<span>/</span>divisibleBy<span>*</span>divisibleBy<span>))</span></span>\n      <span>else</span>\n         <span>minimum</span><span>=</span><span><span>$((</span><span>((</span>minimum<span>/</span>divisibleBy<span>)</span><span>+</span><span>1</span><span>)</span><span>*</span>divisibleBy<span>))</span></span>\n      <span>fi</span>\n   <span>fi</span>\n   \n   \n   <span>#  如果 max 值本身不能被 $divisibleBy 整除，</span>\n   <span>#+ 则将其修正到范围内。</span>\n   \n   <span>if</span> <span>[</span> <span><span>$((</span>maximum<span>/</span>divisibleBy<span>*</span>divisibleBy<span>))</span></span> -ne <span>${maximum}</span> <span>]</span><span>;</span> <span>then</span>\n      <span>if</span> <span>[</span> <span>${maximum}</span> -lt <span>0</span> <span>]</span><span>;</span> <span>then</span>\n         <span>maximum</span><span>=</span><span><span>$((</span><span>((</span>maximum<span>/</span>divisibleBy<span>)</span><span>-</span><span>1</span><span>)</span><span>*</span>divisibleBy<span>))</span></span>\n      <span>else</span>\n         <span>maximum</span><span>=</span><span><span>$((</span>maximum<span>/</span>divisibleBy<span>*</span>divisibleBy<span>))</span></span>\n      <span>fi</span>\n   <span>fi</span>\n\n\n<span>#  需要保证数组的下标只能为正数，</span>\n<span>#+ 因此这里需要通过位移来保证</span>\n<span>#+ 结果为正。</span>\n\n<span>disp</span><span>=</span><span><span>$((</span><span>0</span><span>-</span>minimum<span>))</span></span>\n<span>for</span> <span><span>((</span>i<span>=</span>${minimum}<span>;</span> i<span>&lt;=</span>${maximum}<span>;</span> i<span>+</span><span>=</span>divisibleBy<span>))</span></span><span>;</span> <span>do</span>\n   answer<span>[</span>i+disp<span>]</span><span>=</span><span>0</span>\n<span>done</span>\n\n\n<span># 现在开始循环执行函数以获得大量的随机数。</span>\n<span>loopIt</span><span>=</span><span>1000</span>   <span>#  脚本的作者建议使用 100000，</span>\n              <span>#+ 但是这会花费大量的时间。</span>\n              \n<span>for</span> <span><span>((</span>i<span>=</span><span>0</span><span>;</span> i<span>&lt;</span>${loopIt}<span>;</span> i<span>++</span><span>))</span></span><span>;</span> <span>do</span>\n\n   <span>#  注意，我们在这里颠倒了 min 和 max 的值，</span>\n   <span>#+ 为的是校验函数在这种情况下是否能正常执行。</span>\n   \n   randomBetween <span>${max}</span> <span>${min}</span> <span>${divisibleBy}</span>\n   \n   <span># 如果获得了非预期的答案，则报错。</span>\n   <span>[</span> <span>${randomBetweenAnswer}</span> -lt <span>${min}</span> -o <span>${randomBetweenAnswer}</span> -gt <span>${max}</span> <span>]</span> <span>\\</span>\n   <span>&amp;&amp;</span> <span>echo</span> MIN or MAX error - <span>${randomBetweenAnswer}</span><span>!</span>\n   <span>[</span> <span><span>$((</span>randomBetweenAnswer<span>%</span>${divisibleBy}<span>))</span></span> -ne <span>0</span> <span>]</span> <span>\\</span>\n   <span>&amp;&amp;</span> <span>echo</span> DIVISIBLE BY error - <span>${randomBetweenAnswer}</span><span>!</span>\n   \n   <span># 保存统计结果。</span>\n   answer<span>[</span>randomBetweenAnswer+disp<span>]</span><span>=</span><span><span>$((</span>answer[randomBetweenAnswer<span>+</span>disp]<span>+</span><span>1</span><span>))</span></span>\n<span>done</span>\n\n\n\n<span># 校验最终结果。</span>\n\n<span>for</span> <span><span>((</span>i<span>=</span>${minimum}<span>;</span> i<span>&lt;=</span>${maximum}<span>;</span> i<span>+</span><span>=</span>divisibleBy<span>))</span></span><span>;</span> <span>do</span>\n   <span>[</span> <span>${answer<span>[</span>i+disp<span>]</span>}</span> -eq <span>0</span> <span>]</span> <span>\\</span>\n   <span>&amp;&amp;</span> <span>echo</span> <span>\"We never got an answer of <span>$i</span>.\"</span> <span>\\</span>\n   <span>||</span> <span>echo</span> <span>\"<span>${i}</span> occurred <span>${answer<span>[</span>i+disp<span>]</span>}</span> times.\"</span>\n<span>done</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br></div></div><p>那么 <code>$RANDOM</code> 到底有多随机？最好的测试方法就是写一个脚本跟踪由 <code>$RANDOM</code> 生成的随机数的分布。接下来让我们多投几次由 <code>$RANDOM</code> 做的骰子...</p>\n<h4 id=\"样例-9-15-用-random-投骰子\"> 样例 9-15. 用 <code>RANDOM</code> 投骰子</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># RANDOM 有多随机？</span>\n\n<span><span>RANDOM</span></span><span>=</span><span>$$</span>       <span># 用脚本的进程 ID 重置随机数生成器种子。</span>\n\n<span>PIPS</span><span>=</span><span>6</span>          <span># 骰子有 6 个点。</span>\n<span>MAXTHORWS</span><span>=</span><span>600</span>   <span># 如果你没有更好消磨时间的办法，就增加这个值。</span>\n                <span># 投骰子的次数。</span>\n\n<span>ones</span><span>=</span><span>0</span>          <span>#  必须初始化计数器的值为 0，</span>\n<span>twos</span><span>=</span><span>0</span>          <span>#+ 因为未初始化的变量的值为 null 而非 0。</span>\n<span>threes</span><span>=</span><span>0</span>\n<span>fours</span><span>=</span><span>0</span>\n<span>fives</span><span>=</span><span>0</span>\n<span>sixes</span><span>=</span><span>0</span>\n\n<span>print_result</span> <span>(</span><span>)</span>\n<span>{</span>\n<span>echo</span>\n<span>echo</span> <span>\"ones =   <span>$ones</span>\"</span>\n<span>echo</span> <span>\"twos =   <span>$twos</span>\"</span>\n<span>echo</span> <span>\"threes = <span>$threes</span>\"</span>\n<span>echo</span> <span>\"fours =  <span>$fours</span>\"</span>\n<span>echo</span> <span>\"fives =  <span>$fives</span>\"</span>\n<span>echo</span> <span>\"sixes =  <span>$sixes</span>\"</span>\n<span>echo</span>\n<span>}</span>\n\n<span>update_count</span><span>(</span><span>)</span>\n<span>{</span>\n<span>case</span> <span>\"<span>$1</span>\"</span> <span>in</span>\n  <span>0</span><span>)</span> <span><span>((</span>ones<span>++</span><span>))</span></span><span>;</span><span>;</span>   <span># 因为骰子没有 0 点，所以这个其实对应的是 1 点。</span>\n  <span>1</span><span>)</span> <span><span>((</span>twos<span>++</span><span>))</span></span><span>;</span><span>;</span>   <span># 这个对应 2 点。</span>\n  <span>2</span><span>)</span> <span><span>((</span>threes<span>++</span><span>))</span></span><span>;</span><span>;</span> <span># 以此类推。</span>\n  <span>3</span><span>)</span> <span><span>((</span>fours<span>++</span><span>))</span></span><span>;</span><span>;</span>\n  <span>4</span><span>)</span> <span><span>((</span>fives<span>++</span><span>))</span></span><span>;</span><span>;</span>\n  <span>5</span><span>)</span> <span><span>((</span>sixes<span>++</span><span>))</span></span><span>;</span><span>;</span>\n<span>esac</span>\n<span>}</span>\n\n<span>echo</span>\n\n\n<span>while</span> <span>[</span> <span>\"<span>$throw</span>\"</span> -lt <span>\"<span>$MAXTHROWS</span>\"</span> <span>]</span>\n<span>do</span>\n  <span>let</span> <span>\"die1 = RANDOM % <span>$PIPS</span>\"</span>\n  update_count <span>$die1</span>\n  <span>let</span> <span>\"throw += 1\"</span>\n<span>done</span>\n\nprint_result\n\n<span>exit</span> <span>$?</span>\n\n<span>#  假设 RANDOM 是真随机，那么计数结果应该均匀分布。</span>\n<span>#  当 $MAXTHROWS 的值为 600 时，每一个计数器的值都应该在 100 左右，</span>\n<span>#+ 上下浮动大约 20。</span>\n<span>#</span>\n<span>#  记住 RANDOM 是一个 ***伪随机*** 生成器，</span>\n<span>#+ 并且也不是其中最优秀的那一个。</span>\n\n<span>#  随机化是一个很深奥且复杂的话题。</span>\n<span>#  足够长的“随机”序列可能会出现一些</span>\n<span>#+ 混乱或其他非随机化的表现。</span>\n\n<span># 练习（简单）：</span>\n<span># ---------------</span>\n<span># 重写脚本，修改为投掷硬币 1000 次。</span>\n<span># 显示为正面 \"HEADS\" 和背面 \"TAILS\"。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br></div></div><p>从上一个样例中我们可以发现，在每次调用 <code>RANDOM</code> 生成器时，最好利用重置生成器种子。在 <code>RANDOM</code> 生成器中使用相同的种子会生成相同序列的随机数。<sup></sup>（与 C 语言中的 <code>random()</code> 函数的行为一致）</p>\n<h4 id=\"样例-9-16-重置-random-种子\"> 样例 9-16. 重置 <code>RANDOM</code> 种子</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span># seeding-random.sh: 设置 RANDOM 变量的种子。</span>\n<span># 版本号 1.1, 发布日期 09 Feb 2013</span>\n\n<span>MAXCOUNT</span><span>=</span><span>25</span>       <span># 生成随机数的个数。</span>\n<span>SEED</span><span>=</span>\n\n<span>random_numbers</span> <span>(</span><span>)</span>\n<span>{</span>\n<span>local</span> <span>count</span><span>=</span><span>0</span>\n<span>local</span> number\n\n<span>while</span> <span>[</span> <span>\"<span>$count</span>\"</span> -lt <span>\"<span>$MAXCOUNT</span>\"</span> <span>]</span>\n<span>do</span>\n  <span>number</span><span>=</span><span>$RANDOM</span>\n  <span>echo</span> -n <span>\"<span>$number</span> \"</span>\n  <span>let</span> <span>\"count++\"</span>\n<span>done</span>\n<span>}</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>SEED</span><span>=</span><span>1</span>\n<span><span>RANDOM</span></span><span>=</span><span>$SEED</span>      <span># 设置变量 RANDOM 会为随机数生成器设置种子。</span>\n<span>echo</span> <span>\"Random seed = <span>$SEED</span>\"</span>\nrandom_numbers\n\n<span><span>RANDOM</span></span><span>=</span><span>$SEED</span>      <span># 同样的种子 ...</span>\n<span>echo</span><span>;</span> <span>echo</span> <span>\"Again, with same random seed ...\"</span>\n<span>echo</span> <span>\"Random seed = <span>$SEED</span>\"</span>\nrandom_numbers    <span># ... 生成了同样的数字序列。</span>\n                  <span>#</span>\n                  <span># 在什么情况下重复一个随机化序列会有用？</span>\n                  \n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>SEED</span><span>=</span><span>2</span>\n<span><span>RANDOM</span></span><span>=</span><span>$SEED</span>      <span># 用不同的种子再试一次 ...</span>\n<span>echo</span> <span>\"Random seed = <span>$SEED</span>\"</span>\nrandom_numbers    <span># ... 生成了不同的数字序列。</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span># RANDOM=$$  利用脚本的进程 ID 设置 RANDOM 的种子。</span>\n<span># 同样也可以利用 'time' 或是 'date' 命令设置 RANDOM 的种子。</span>\n\n<span># 更花哨一点的 ...</span>\n<span>SEED</span><span>=</span><span><span>$(</span><span>head</span> -1 /dev/urandom <span>|</span> od -N <span>1</span> <span>|</span> <span>awk</span> <span>'{ print <span>$2</span> }'</span><span>|</span> <span>sed</span> s/^0*//<span>)</span></span>\n<span>#  从 /dev/urandom （系统的伪随机设备文件）中</span>\n<span>#+ 获取伪随机输出，</span>\n<span>#+ 然后通过 \"od\" 转换为可打印八进制字符行，</span>\n<span>#+ 然后 \"awk\" 命令会检索出一个数字作为种子，</span>\n<span>#+ 最后用 \"sed\" 命令删除数字前面所有的前置 0。</span>\n<span><span>RANDOM</span></span><span>=</span><span>$SEED</span>\n<span>echo</span> <span>\"Random seed = <span>$SEED</span>\"</span>\nrandom_numbers\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div><p>{% hint style=&quot;info&quot; %}</p>\n<p>伪设备文件 <code>/dev/urandom</code> 提供了比 <code>$RANDOM</code> 变量更随机化的伪随机数。命令 <code>dd if=/dev/urandom of=targetfile bs=1 count=XXX</code> 将会创建一个包含均匀分布的伪随机数的文件。但是想要在脚本中将这些随机数赋值给变量需要做一些变通，比如使用命令 <a href=\"\"><code>od</code></a> 进行过滤（参照上面的样例以及 <a href=\"\">样例 16-14</a> 和 <a href=\"\">样例 A-36</a>）或者使用管道导入命令 <a href=\"\">md5sum</a> 中（参照 <a href=\"\">样例 36-16</a>）。</p>\n<p>当然也有其他在脚本中生成伪随机数的方法。比如 <code>Awk</code> 命令就提供了这样一种非常简易的方法。</p>\n<h4 id=\"样例-9-17-使用-awk-命令生成伪随机数\"> 样例 9-17. 使用 <a href=\"\"><code>awk</code></a> 命令生成伪随机数</h4>\n<div><pre><code><span>#!/bin/bash</span>\n<span>#  random2.sh: 返回大小在 0 - 1 内，</span>\n<span>#+ 精度为小数点后 6 位的伪随机数。例如：0.822725</span>\n<span>#  使用 awk rand() 函数。</span>\n\n<span>AWKSCRIPT</span><span>=</span><span>' { srand(); print rand() } '</span>\n<span>#           传递给 awk 的命令或参数</span>\n<span># 注意 srand() 重置了 awk 的随机数生成种子。</span>\n\n\n<span>echo</span> -n <span>\"Random number between 0 and 1 = \"</span>\n\n<span>echo</span> <span>|</span> <span>awk</span> <span>\"<span>$AWKSCRIPT</span>\"</span>\n<span># 如果省略 'echo' 将会发生什么？</span>\n\n<span>exit</span> <span>0</span>\n\n\n<span># 练习：</span>\n<span># ---------</span>\n\n<span># 1) 使用循环结构，输出 10 个不同的随机数。</span>\n<span>#      （提示：你必须在每次循环中使用 srand() 函数重置种子以获得不同的随机数种子。</span>\n<span>#+       如果你省略了这一步会发生什么？）</span>\n\n<span># 2) 利用整型乘数作为随机数的缩放因子，</span>\n<span>#+   生成大小在 10 到 100 之间的随机数。</span>\n\n<span># 3) 内容与练习 #2 相同，只是这次生成随机整数。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>同样，命令 <a href=\"\"><code>date</code></a> 可以用于 <a href=\"\">生成整型随机数序列</a>。</p>\n<p>{% endhint %}</p>\n<h2 id=\"注记\"> 注记</h2>\n<p>{% hint style=&quot;info&quot; %}\n真正的“随机性”，就其存在而言，只存在于一些类似放射性衰变这样还未被完全理解的自然现象中。计算机只能模拟这样的随机性，因此计算机生成的“随机数”序列被称作伪随机数。\n{% endhint %}</p>\n<p>{% hint style=&quot;info&quot; %}\n计算机用于生成伪随机数的种子可以被视作一个标识标签。例如，你可以将用种子 23 生成的随机数序列视作第23号序列。</p>\n<p>伪随机数序列的一个属性是该序列在开始重复之前的周期长度。一个好的伪随机数生成器能够生成周期非常长的序列。\n{% endhint %}</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>Footnote Placeholder </p>\n</li>\n<li id=\"fn2\"><p>Footnote Placeholder </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第九章 换个角度看变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_another_look_at_variables/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/09_another_look_at_variables/",
      "content_html": "<h1 id=\"第九章-换个角度看变量\"> 第九章 换个角度看变量</h1>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./09_1_internal_variables.html\">9.1 内部变量</a></li>\n<li><a href=\"./09_2_typing_variables_declare_or_typeset.html\">9.2 变量类型标注：<code>declare</code> 与 <code>typeset</code></a>\n<ul>\n<li><a href=\"./09_2_1_another_use_for_declare.html\">9.2.1 <code>declare</code> 的另类用法</a></li>\n</ul>\n</li>\n<li><a href=\"./09_3_random_generate_random_integer.html\">9.3 <code>$RANDOM</code>：生成随机数</a></li>\n</ul>\n<p>在脚本中恰当的使用变量可以增强脚本并提高适应性。因此就需要了解变量的微妙之处和细微差异。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "10.1.1 使用 awk 处理字符串",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_1_1_manipulating_strings_using_awk/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_1_1_manipulating_strings_using_awk/",
      "content_html": "<h1 id=\"_10-1-1-使用-awk-处理字符串\"> 10.1.1 使用 <code>awk</code> 处理字符串</h1>\n<p>在 Bash 脚本中可以调用字符串处理工具 <code>awk</code> 来替换内置的字符串处理操作。</p>\n<p>样例 10-6. 使用另一种方式来截取和定位子字符串</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># substring-extraction.sh</span>\n\n<span>String</span><span>=</span>23skidoo1\n<span>#      012345678    Bash</span>\n<span>#      123456789    awk</span>\n<span># 注意不同字符串索引系统：</span>\n<span># Bash 中第一个字符的位置为0。</span>\n<span># Awk 中第一个字符的位置为1。</span>\n\n<span>echo</span> <span>${String<span>:</span>2<span>:</span>4}</span> <span># 从第3位开始（0-1-2），4个字符的长度</span>\n                                         <span># skid</span>\n\n<span># Awk 中与 ${string:pos:length} 等价的是 substr(string,pos,length)。</span>\n<span>echo</span> <span>|</span> <span>awk</span> <span>'\n{ print substr(\"'</span>\"<span>${String}</span><span>\"'\"</span>,3,4<span>)</span>      <span># skid</span>\n<span>}</span>\n<span>'\n#  将空的 \"echo\" 通过管道传递给 awk 作为一个模拟输入，\n#+ 这样就不需要提供一个文件名来操作 awk 了。\n\necho \"----\"\n\n# 同样的：\n\necho | awk '</span>\n<span>{</span> print index<span>(</span><span>\"'\"</span><span>${String}</span><span>\"'\"</span>, <span>\"skid\"</span><span>)</span>      <span># 3</span>\n<span>}</span>                                           <span># （skid 从第3位开始）</span>\n'   <span># 这里使用 awk 等价于 \"expr index\"。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "10.1.2 参考资料",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_1_2_further_reference/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_1_2_further_reference/",
      "content_html": "<h1 id=\"_10-1-2-参考资料\"> 10.1.2 参考资料</h1>\n<p>更多关于脚本中处理字符串的资料，可以查看 <a href=\"http://tldp.org/LDP/abs/html/parameter-substitution.html\" target=\"_blank\" rel=\"noopener noreferrer\">章节 10.2</a> 以及 <a href=\"http://tldp.org/LDP/abs/html/moreadv.html#EXPRREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>expr</code></a> 命令的<a href=\"http://tldp.org/LDP/abs/html/moreadv.html#EXPEXTRSUB\" target=\"_blank\" rel=\"noopener noreferrer\">相关章节</a>。</p>\n<p>脚本样例：</p>\n<ol>\n<li><a href=\"http://tldp.org/LDP/abs/html/moreadv.html#EX45\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-9</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/parameter-substitution.html#LENGTH\" target=\"_blank\" rel=\"noopener noreferrer\">样例 10-9</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/parameter-substitution.html#PATTMATCHING\" target=\"_blank\" rel=\"noopener noreferrer\">样例 10-10</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/parameter-substitution.html#RFE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 10-11</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/parameter-substitution.html#VARMATCH\" target=\"_blank\" rel=\"noopener noreferrer\">样例 10-13</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#INSERTIONSORT\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-36</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#QKY\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-41</a></li>\n</ol>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "10.1 字符串处理",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_1_manipulating_strings/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_1_manipulating_strings/",
      "content_html": "<h1 id=\"_10-1-字符串处理\"> 10.1 字符串处理</h1>\n<p>Bash 支持的字符串操作数量达到了一个惊人的数目。但可惜的是，这些操作工具缺乏一个统一的核心。他们中的一些是<a href=\"http://tldp.org/LDP/abs/html/parameter-substitution.html#PARAMSUBREF\" target=\"_blank\" rel=\"noopener noreferrer\">参数代换</a>的子集，另外一些则是 UNIX 下 <a href=\"http://tldp.org/LDP/abs/html/moreadv.html#EXPRREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>expr</code></a> 函数的子集。这将会导致语法前后不一致或者功能上出现重叠，更不用说那些可能导致的混乱了。</p>\n<h3 id=\"字符串长度\"> 字符串长度</h3>\n<h4 id=\"string\"> <code>${#string}</code></h4>\n<h4 id=\"expr-length-string\"> <code>expr length $string</code></h4>\n<p>上面两个表达式等价于C语言中的 <code>strlen()</code> 函数。</p>\n<h4 id=\"expr-string\"> <code>expr &quot;$string&quot; : '.*'</code></h4>\n<div><pre><code><span>stringZ</span><span>=</span>abcABC123ABCabc\n\n<span>echo</span> <span>${<span>#</span>stringZ}</span>                 <span># 15</span>\n<span>echo</span> <span><span>`</span><span>expr</span> length $stringz<span>`</span></span>      <span># 15</span>\n<span>echo</span> <span><span>`</span><span>expr</span> <span>\"<span>$stringZ</span>\"</span> <span>:</span> <span>'.*'</span><span>`</span></span>    <span># 15</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>样例 10-1. 在文本的段落之间插入空行</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># paragraph-space.sh</span>\n<span># 版本 2.1，发布日期 2012年7月29日</span>\n\n<span># 在无空行的文本文件的段落之间插入空行。</span>\n<span># 像这样使用: $0 &lt;FILENAME</span>\n\n<span>MINLEN</span><span>=</span><span>60</span>        <span># 可以试试修改这个值。它用来做判断。</span>\n<span>#  假设一行的字符数小于 $MINLEN，并且以句点结束段落。</span>\n<span>#+ 结尾部分有练习！</span>\n\n<span>while</span> <span>read</span> line  <span># 当文件有许多行的时候</span>\n<span>do</span>\n  <span>echo</span> <span>\"<span>$line</span>\"</span>   <span># 输出行本身。</span>\n  \n  <span>len</span><span>=</span><span>${<span>#</span>line}</span>\n  <span>if</span> <span>[</span><span>[</span> <span>\"<span>$len</span>\"</span> -lt <span>\"<span>$MINLEN</span>\"</span> <span>&amp;&amp;</span> <span>\"<span>$line</span>\"</span> <span>=</span>~ <span>[</span>*<span>{</span><span>\\</span>.<span>}</span><span>]</span>$ <span>]</span><span>]</span>\n<span># if [[ \"$len\" -lt \"$MINLEN\" &amp;&amp; \"$line\" =~ \\[*\\.\\] ]]</span>\n<span># 新版Bash将不能正常运行前一个版本的脚本。Ouch！</span>\n<span># 感谢 Halim Srama 指出这点，并且给出了修正版本。</span>\n    <span>then</span> <span>echo</span>    <span>#  在该行以句点结束时，</span>\n  <span>fi</span>             <span>#+ 增加一行空行。</span>\n<span>done</span>\n\n<span>exit</span>\n\n<span># 练习：</span>\n<span># -----</span>\n<span>#  1) 该脚本通常会在文件的最后插入一个空行。</span>\n<span>#+    尝试解决这个问题。</span>\n<span>#  2) 在第17行仅仅考虑到了以句点作为句子终止的情况。</span>\n<span>#+    修改以满足其他的终止符，例如 ?, ! 和 \"。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><h3 id=\"起始部分字符串匹配长度\"> 起始部分字符串匹配长度</h3>\n<h4 id=\"expr-match-string-substring\"> <code>expr match &quot;$string&quot; '$substring'</code></h4>\n<p>其中，<code>$substring</code> 是一个<a href=\"http://tldp.org/LDP/abs/html/regexp.html#REGEXREF\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>。</p>\n<h4 id=\"expr-string-substring\"> <code>expr &quot;$string&quot; : '$substring'</code></h4>\n<p>其中，<code>$substring</code> 是一个正则表达式。</p>\n<div><pre><code>\n<span>stringZ</span><span>=</span>abcABC123ABCabc\n<span>#       |------|</span>\n<span>#       12345678</span>\n\n<span>echo</span> <span><span>`</span><span>expr</span> match <span>\"<span>$stringZ</span>\"</span> <span>'abc[A-Z]*.2'</span><span>`</span></span>   <span># 8</span>\n<span>echo</span> <span><span>`</span><span>expr</span> <span>\"<span>$stringZ</span>\"</span> <span>:</span> <span>'abc[A-Z]*.2'</span><span>`</span></span>       <span># 8</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"索引\"> 索引</h3>\n<h4 id=\"expr-index-string-substring\"> <code>expr index $string $substring</code></h4>\n<p>返回在 <code>$string</code> 中第一个出现的 <code>$substring</code> 字符所在的位置。</p>\n<div><pre><code><span>stringZ</span><span>=</span>abcABC123ABCabc\n<span>#       123456 ...</span>\n<span>echo</span> <span><span>`</span><span>expr</span> index <span>\"<span>$stringZ</span>\"</span> C12<span>`</span></span>             <span># 6</span>\n                                             <span># C 的位置。</span>\n<span>echo</span> <span><span>`</span><span>expr</span> index <span>\"<span>$stringZ</span>\"</span> 1c<span>`</span></span>              <span># 3</span>\n<span># 'c' (第三号位) 较 '1' 出现的更早。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>几乎等价于C语言中的 <code>strchr()</code>。</p>\n<h3 id=\"截取字符串-字符串分片\"> 截取字符串（字符串分片）</h3>\n<h4 id=\"string-position\"> <code>${string:position}</code></h4>\n<p>在 <code>$string</code> 中截取自 <code>$position</code> 起的字符串。</p>\n<p>如果参数 <code>$string</code> 是 &quot;*&quot; 或者 &quot;@&quot;，那么将会截取自 <code>$position</code> 起的<a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#POSPARAMREF\" target=\"_blank\" rel=\"noopener noreferrer\">位置参数</a>。<sup></sup></p>\n<h4 id=\"string-position-length\"> <code>${string:position:length}</code></h4>\n<p>在 <code>$string</code> 中截取自 <code>$position</code> 起，长度为 <code>$length</code> 的字符串。</p>\n<div><pre><code>\n<span>stringZ</span><span>=</span>abcABC123ABCabc\n<span>#       0123456789.....</span>\n<span>#       索引位置从0开始。</span>\n\n<span>echo</span> <span>${stringZ<span>:</span>0}</span>                            <span># abcABC123ABCabc</span>\n<span>echo</span> <span>${stringZ<span>:</span>1}</span>                            <span># bcABC123ABCabc</span>\n<span>echo</span> <span>${stringZ<span>:</span>7}</span>                            <span># 23ABCabc</span>\n\n<span>echo</span> <span>${stringz<span>:</span>7<span>:</span>3}</span>                          <span># 23A</span>\n                                             <span># 三个字符的子字符串。</span>\n                                             \n                                             \n\n<span># 从右至左进行截取可行么？</span>\n\n<span>echo</span> <span>${stringZ<span>:-</span>4}</span>                           <span># abcABC123ABCabc</span>\n<span># ${parameter:-default} 将会得到整个字符串。</span>\n<span># 但是……</span>\n\n<span>echo</span> <span>${stringZ<span>:</span>(-4)}</span>                         <span># Cabc</span>\n<span>echo</span> <span>${stringZ<span>:</span> -4}</span>                          <span># Cabc</span>\n<span># 现在可以了。</span>\n<span># 括号或者增加空格都可以\"转义\"位置参数。</span>\n\n<span># 感谢 Dan Jacobson 指出这些。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>其中，参数 <code>position</code> 与 <code>length</code> 可以传入一个变量而不一定需要传入常量。</p>\n<p>样例 10-2. 产生一个8个字符的随机字符串</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># rand-string.sh</span>\n<span># 产生一个8个字符的随机字符串。</span>\n\n<span>if</span> <span>[</span> -n <span>\"<span>$1</span>\"</span> <span>]</span>  <span>#  如果在命令行中已经传入了参数，</span>\n<span>then</span>            <span>#+ 那么就以它作为起始字符串。</span>\n  <span>str0</span><span>=</span><span>\"<span>$1</span>\"</span>\n<span>else</span>            <span>#  否则，就将脚本的进程标识符PID作为起始字符串。</span>\n  <span>str0</span><span>=</span><span>\"<span>$$</span>\"</span>\n<span>fi</span>\n\n<span>POS</span><span>=</span><span>2</span>  <span># 从字符串的第二位开始。</span>\n<span>LEN</span><span>=</span><span>8</span>  <span># 截取八个字符。</span>\n\n<span>str1</span><span>=</span><span><span>$(</span> <span>echo</span> <span>\"<span>$str0</span>\"</span> <span>|</span> md5sum <span>|</span> md5sum <span>)</span></span>\n<span>#                      ^^^^^^   ^^^^^^</span>\n<span># 将字符串通过管道计算两次 md5 来进行两次混淆。</span>\n\n<span>randstring</span><span>=</span><span>\"<span>${str1<span>:</span>$POS<span>:</span>$LEN}</span>\"</span>\n<span>#                  ^^^^ ^^^^</span>\n<span># 允许传入参数</span>\n\n<span>echo</span> <span>\"<span>$randstring</span>\"</span>\n\n<span>exit</span> <span>$?</span>\n\n<span># bozo$ ./rand-string.sh my-password</span>\n<span># 1bdd88c4</span>\n\n<span># 不过不建议将其作为一种能够抵抗黑客的生成密码的方法。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>如果参数 <code>$string</code> 是 &quot;*&quot; 或者 &quot;@&quot;，那么将会截取自 <code>$position</code> 起，最大个数为 <code>$length</code> 的位置参数。</p>\n<div><pre><code><span>echo</span> <span>${*<span>:</span>2}</span>          <span># 输出第二个及之后的所有位置参数。</span>\n<span>echo</span> <span>${@<span>:</span>2}</span>          <span># 同上。</span>\n\n<span>echo</span> <span>${*<span>:</span>2<span>:</span>3}</span>        <span># 从第二个位置参数起，输出三个位置参数。 </span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id=\"expr-substr-string-position-length\"> <code>expr substr $string $position $length</code></h4>\n<p>在 <code>$string</code> 中截取自 <code>$position</code> 起，长度为 <code>$length</code> 的字符串。</p>\n<div><pre><code><span>stringZ</span><span>=</span>abcABC123ABCabc\n<span>#       123456789......</span>\n<span>#       索引位置从1开始。</span>\n\n<span>echo</span> <span><span>`</span><span>expr</span> substr $stringZ <span>1</span> <span>2</span><span>`</span></span>              <span># ab</span>\n<span>echo</span> <span><span>`</span><span>expr</span> substr $stringZ <span>4</span> <span>3</span><span>`</span></span>              <span># ABC</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id=\"expr-match-string-substring-2\"> <code>expr match &quot;$string&quot; '\\($substring\\)'</code></h4>\n<p>在 <code>$string</code> 中截取自 <code>$position</code> 起的字符串，其中 <code>$substring</code> 是<a href=\"http://tldp.org/LDP/abs/html/regexp.html#REGEXREF\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>。</p>\n<h4 id=\"expr-string-substring-2\"> <code>expr &quot;$string&quot; : '\\($substring\\)'</code></h4>\n<p>在 <code>$string</code> 中截取自 <code>$position</code> 起的字符串，其中 <code>$substring</code> 是正则表达式。</p>\n<div><pre><code><span>stringZ</span><span>=</span>abcABC123ABCabc\n<span>#       =======</span>\n\n<span>echo</span> <span><span>`</span><span>expr</span> match <span>\"<span>$stringZ</span>\"</span> <span>'\\(.[b-c]*[A-Z]..[0-9]\\)'</span><span>`</span></span>   <span># abcABC1</span>\n<span>echo</span> <span><span>`</span><span>expr</span> <span>\"<span>$stringZ</span>\"</span> <span>:</span> <span>'\\(.[b-c]*[A-Z]..[0-9]\\)'</span><span>`</span></span>       <span># abcABC1</span>\n<span>echo</span> <span><span>`</span><span>expr</span> <span>\"<span>$stringZ</span>\"</span> <span>:</span> <span>'\\(.......\\)'</span><span>`</span></span>                   <span># abcABC1</span>\n<span># 上面所有的形式都给出了相同的结果。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h4 id=\"expr-match-string-substring-3\"> <code>expr match &quot;$string&quot; '.*\\($substring\\)'</code></h4>\n<p>从 <code>$string</code> 结尾部分截取 <code>$substring</code> 字符串，其中 <code>$substring</code> 是正则表达式。</p>\n<h4 id=\"expr-string-substring-3\"> <code>expr &quot;$string&quot; : '.*\\($substring\\)'</code></h4>\n<p>从 <code>$string</code> 结尾部分截取 <code>$substring</code> 字符串，其中 <code>$substring</code> 是正则表达式。</p>\n<div><pre><code><span>stringZ</span><span>=</span>abcABC123ABCabc\n<span>#                ======</span>\n\n<span>echo</span> <span><span>`</span><span>expr</span> match <span>\"<span>$stringZ</span>\"</span> <span>'.*\\([A-C][A-C][A-C][a-c]*\\)'</span><span>`</span></span>    <span># ABCabc</span>\n<span>echo</span> <span><span>`</span><span>expr</span> <span>\"<span>$stringZ</span>\"</span> <span>:</span> <span>'.*\\(......\\)'</span><span>`</span></span>                       <span># ABCabc</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"删除子串\"> 删除子串</h3>\n<h4 id=\"string-substring\"> <code>${string#substring}</code></h4>\n<p>删除从 <code>$string</code> 起始部分起，匹配到的最短的 <code>$substring</code>。</p>\n<h4 id=\"string-substring-2\"> <code>${string##substring}</code></h4>\n<p>删除从 <code>$string</code> 起始部分起，匹配到的最长的 <code>$substring</code>。</p>\n<div><pre><code><span>stringZ</span><span>=</span>abcABC123ABCabc\n<span>#       |----|          最长</span>\n<span>#       |----------|    最短</span>\n\n<span>echo</span> <span>${stringZ<span>#</span>a*C}</span>      <span># 123ABCabc</span>\n<span># 删除 'a' 与 'c' 之间最短的匹配。</span>\n\n<span>echo</span> <span>${stringZ<span>##</span>a*C}</span>     <span># abc</span>\n<span># 删除 'a' 与 'c' 之间最长的匹配。</span>\n\n\n\n<span># 你可以使用变量代替 substring。</span>\n\n<span>X</span><span>=</span><span>'a*C'</span>\n\n<span>echo</span> <span>${stringZ<span>#</span>$X}</span>      <span># 123ABCabc</span>\n<span>echo</span> <span>${stringZ<span>##</span>$X}</span>     <span># abc</span>\n                        <span># 同上。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h4 id=\"string-substring-3\"> <code>${string%substring}</code></h4>\n<p>删除从 <code>$string</code> 结尾部分起，匹配到的最短的 <code>$substring</code>。</p>\n<p>例如：</p>\n<div><pre><code><span># 将当前目录下所有后缀名为 \"TXT\" 的文件改为 \"txt\" 后缀。</span>\n<span># 例如 \"file1.TXT\" 改为 \"file1.txt\"。</span>\n\n<span>SUFF</span><span>=</span>TXT\n<span>suff</span><span>=</span>txt\n\n<span>for</span> <span>i</span> <span>in</span> <span><span>$(</span><span>ls</span> *.$SUFF<span>)</span></span>\n<span>do</span>\n  <span>mv</span> -f <span>$i</span> <span><span>$(</span>i%.$SUFF<span>)</span></span><span>.</span><span>$suff</span>\n  <span>#  除了从变量 $i 右侧匹配到的最短的字符串之外，</span>\n  <span>#+ 其他一切都保持不变。</span>\n<span>done</span> <span>### 如果需要，循环可以压缩成一行的形式。</span>\n\n<span># 感谢 Rory Winston。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h4 id=\"string-substring-4\"> <code>${string%%substring}</code></h4>\n<p>删除从 <code>$string</code> 结尾部分起，匹配到的最长的 <code>$substring</code>。</p>\n<div><pre><code>\n<span>stringZ</span><span>=</span>abcABC123ABCabc\n<span>#                    ||     最短</span>\n<span>#        |------------|     最长</span>\n\n<span>echo</span> <span>${stringZ<span>%</span>b*c}</span>      <span># abcABC123ABCa</span>\n<span># 从结尾处删除 'b' 与 'c' 之间最短的匹配。</span>\n\n<span>echo</span> <span>${stringZ<span>%%</span>b*c}</span>     <span># a</span>\n<span># 从结尾处删除 'b' 与 'c' 之间最长的匹配。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>这个操作对生成文件名非常有帮助。</p>\n<p>样例 10-3. 改变图像文件的格式及文件名</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span>#  cvt.sh:</span>\n<span>#  将目录下所有的 MacPaint 文件转换为 \"pbm\" 格式。</span>\n\n<span>#  使用由 Brian Henderson (bryanh@giraffe-data.com) 维护的</span>\n<span>#+ \"netpbm\" 包下的 \"macptobpm\" 二进制工具。</span>\n<span>#  Netpbm 是大多数 Linux 发行版的标准组成部分。</span>\n\n<span>OPERATION</span><span>=</span>macptopbm\n<span>SUFFIX</span><span>=</span>pbm          <span># 新的文件名后缀。</span>\n\n<span>if</span> <span>[</span> -n <span>\"<span>$1</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>directory</span><span>=</span><span>$1</span>      <span># 如果已经通过脚本参数传入了目录名的情况……</span>\n<span>else</span>\n  <span>directory</span><span>=</span><span>$PWD</span>    <span># 否则就使用当前工作目录。</span>\n<span>fi</span>\n\n<span>#  假设目标目录下的所有 MacPaint 图像文件都拥有</span>\n<span>#+ \".mac\" 的文件后缀名。</span>\n\n<span>for</span> <span>file</span> <span>in</span> <span>$directory</span>/*    <span># 文件名匹配。</span>\n<span>do</span>\n  <span>filename</span><span>=</span><span>${file<span>%</span>.*c}</span>      <span>#  从文件名中删除 \".mac\" 后缀</span>\n                            <span>#+ ('.*c' 匹配 '.' 与 'c' 之间的</span>\n                            <span>#  所有字符，包括其本身)。</span>\n  <span>$OPERATION</span> <span>$file</span> <span>></span> <span>\"<span>$filename</span>.<span>$SUFFIX</span>\"</span>\n                            <span># 将转换结果重定向到新的文件。</span>\n  <span>rm</span> -f <span>$file</span>               <span># 在转换后删除原文件。</span>\n  <span>echo</span> <span>\"<span>$filename</span>.<span>$SUFFIX</span>\"</span>  <span># 将记录输出到 stdout 中。</span>\n<span>done</span>\n\n<span>exit</span> <span>0</span>\n\n<span># 练习：</span>\n<span># -----</span>\n<span># 这个脚本会将当前工作目录下的所有文件进行转换。</span>\n<span># 修改脚本，使得它仅转换 \".mac\" 后缀的文件。</span>\n\n\n\n<span># *** 还可以使用另外一种方法。 *** #</span>\n\n<span>#!/bin/bash</span>\n<span># 将图像批处理转换成不同的格式。</span>\n<span># 假设已经安装了 imagemagick。（在大部分 Linux 发行版中都有）</span>\n\n<span>INFMT</span><span>=</span>png   <span># 可以是 tif, jpg, gif 等等。</span>\n<span>OUTFMT</span><span>=</span>pdf  <span># 可以是 tif, jpg, gif, pdf 等等。</span>\n\n<span>for</span> <span>pic</span> <span>in</span> *<span>\"<span>$INFMT</span>\"</span>\n<span>do</span>\n  <span>p2</span><span>=</span><span><span>$(</span><span>ls</span> <span>\"<span>$pic</span>\"</span> <span>|</span> <span>sed</span> -e s/<span>\\</span>.$INFMT//<span>)</span></span>\n  <span># echo $p2</span>\n  convert <span>\"<span>$pic</span>\"</span> <span>$p2</span><span>.</span><span>$OUTFMT</span>\n<span>done</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div><p>样例 10-4. 将流音频格式转换成 ogg 格式</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># ra2ogg.sh: 将流音频文件 (*.ra) 转换成 ogg 格式。</span>\n\n<span># 使用 \"mplayer\" 媒体播放器程序：</span>\n<span>#      http://www.mplayerhq.hu/homepage</span>\n<span># 使用 \"ogg\" 库与 \"oggenc\"：</span>\n<span>#      http://www.xiph.org/</span>\n<span>#</span>\n<span># 脚本同时需要安装一些解码器，例如 sipr.so 等等一些。</span>\n<span># 这些解码器可以在 compat-libstdc++ 包中找到。</span>\n\n\n<span>OFILEPREF</span><span>=</span><span>${1<span>%%</span>ra}</span>      <span># 删除 \"ra\" 后缀。</span>\n<span>OFILESUFF</span><span>=</span>wav           <span># wav 文件后缀。</span>\n<span>OUTFILE</span><span>=</span><span>\"<span>$OFILEPREF</span>\"</span>\"<span>$OFILESUFF</span><span>\"\nE_NOARGS=85\n\nif [ -z \"</span><span>$1</span><span>\" ]          # 必须指定一个文件进行转换。\nthen\n  echo \"</span>Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> <span>[</span>filename<span>]</span><span>\"\n  exit <span>$E_NOAGRS</span>\nfi\n\n\n######################################################\nmplayer \"</span><span>$1</span><span>\" -ao pcm:file=<span>$OUTFILE</span>\noggenc \"</span><span>$OUTFILE</span><span>\"  # 由 oggenc 自动加上正确的文件后缀名。\n######################################################\n\nrm \"</span><span>$OUTFILE</span><span>\"      # 立即删除 *.wav 文件。\n                   # 如果你仍需保留原文件，注释掉上面这一行即可。\n                   \nexit <span>$?</span>\n\n#  注意：\n#  -----\n#  在网站上，点击一个 *.ram 的流媒体音频文件\n#+ 通常只会下载到 *.ra 音频文件的 URL。\n#  你可以使用 \"</span><span>wget</span><span>\" 或者类似的工具下载 *.ra 文件本身。\n\n\n#  练习：\n#  -----\n#  这个脚本仅仅转换 *.ra 文件。\n#  修改脚本增加适应性，使其可以转换 *.ram 或其他文件格式。\n#\n#  如果你非常有热情，你可以扩展这个脚本使其\n#+ 可以自动下载并且转换流媒体音频文件。\n#  给定一个 URL，自动下载流媒体音频文件 (使用 \"</span>wget\"<span>)</span>，\n<span>#+ 然后转换它。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><p>下面是使用字符串截取结构对 <a href=\"http://tldp.org/LDP/abs/html/extmisc.html#GETOPTY\" target=\"_blank\" rel=\"noopener noreferrer\"><code>getopt</code></a> 的一个简单模拟。</p>\n<p>样例 10-5. 模拟 <code>getopt</code></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># getopt-simple.sh</span>\n<span># 作者: Chris Morgan</span>\n<span># 允许在高级脚本编程指南中使用。</span>\n\n\n<span>getopt_simple</span><span>(</span><span>)</span>\n<span>{</span>\n    <span>echo</span> <span>\"getopt_simple()\"</span>\n    <span>echo</span> <span>\"Parameters are '<span>$*</span>'\"</span>\n    <span>until</span> <span>[</span> -z <span>\"<span>$1</span>\"</span> <span>]</span>\n    <span>do</span>\n      <span>echo</span> <span>\"Processing parameter of: '<span>$1</span>'\"</span>\n      <span>if</span> <span>[</span> <span>${1<span>:</span>0<span>:</span>1}</span> <span>=</span> <span>'/'</span> <span>]</span>\n      <span>then</span>\n          <span>tmp</span><span>=</span><span>${1<span>:</span>1}</span>               <span># 删除开头的 '/'</span>\n          <span>parameter</span><span>=</span><span>${tmp<span>%%</span>=*}</span>     <span># 取出名称。</span>\n          <span>value</span><span>=</span><span>${tmp<span>##</span>*=}</span>         <span># 取出值。</span>\n          <span>echo</span> <span>\"Parameter: '<span>$parameter</span>', value: '<span>$value</span>'\"</span>\n          <span>eval</span> <span>$parameter</span><span>=</span><span>$value</span>\n      <span>fi</span>\n      <span>shift</span>\n    <span>done</span>\n<span>}</span>\n\n<span># 将所有参数传递给 getopt_simple()。</span>\ngetopt_simple <span>$*</span>\n\n<span>echo</span> <span>\"test is '<span>$test</span>'\"</span>\n<span>echo</span> <span>\"test2 is '<span>$test2</span>'\"</span>\n\n<span>exit</span> <span>0</span>  <span># 可以查看该脚本的修改版 UseGetOpt.sh。</span>\n\n---\n\n<span>sh</span> getopt_example.sh /test<span>=</span>value1 /test2<span>=</span>value2\n\nParameters are <span>'/test=value1 /test2=value2'</span>\nProcessing parameter of: <span>'/test=value1'</span>\nParameter: <span>'test'</span>, value: <span>'value1'</span>\nProcessing parameter of: <span>'/test2=value2'</span>\nParameter: <span>'test2'</span>, value: <span>'value2'</span>\n<span>test</span> is <span>'value1'</span>\ntest2 is <span>'value2'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><h3 id=\"子串替换\"> 子串替换</h3>\n<h4 id=\"string-substring-replacement\"> <code>${string/substring/replacement}</code></h4>\n<p>替换匹配到的第一个 <code>$substring</code> 为 <code>$replacement</code>。<sup></sup></p>\n<h4 id=\"string-substring-replacement-2\"> <code>${string//substring/replacement}</code></h4>\n<p>替换匹配到的所有 <code>$substring</code> 为 <code>$replacement</code>。</p>\n<div><pre><code><span>stringZ</span><span>=</span>abcABC123ABCabc\n\n<span>echo</span> <span>${stringZ<span>/</span>abc<span>/</span>xyz}</span>       <span># xyzABC123ABCabc</span>\n                              <span># 将匹配到的第一个 'abc' 替换为 'xyz'。</span>\n                              \n<span>echo</span> <span>${stringZ<span>/</span><span>/</span>abc<span>/</span>xyz}</span>      <span># xyzABC123ABCxyz</span>\n                              <span># 将匹配到的所有 'abc' 替换为 'xyz'。</span>\n                              \n<span>echo</span>  ---------------\n<span>echo</span> <span>\"<span>$stringZ</span>\"</span>               <span># abcABC123ABCabc</span>\n<span>echo</span>  ---------------\n                              <span># 字符串本身并不会被修改！</span>\n                              \n<span># 匹配以及替换的字符串可以是参数么？</span>\n<span>match</span><span>=</span>abc\n<span>repl</span><span>=</span>000\n<span>echo</span> <span>${stringZ<span>/</span>$match<span>/</span>$repl}</span>  <span># 000ABC123ABCabc</span>\n<span>#              ^      ^         ^^^</span>\n<span>echo</span> <span>${stringZ<span>/</span><span>/</span>$match<span>/</span>$repl}</span> <span># 000ABC123ABC000</span>\n<span># Yes!          ^      ^        ^^^         ^^^</span>\n\n<span>echo</span>\n\n<span># 如果没有给定 $replacement 字符串会怎样？</span>\n<span>echo</span> <span>${stringZ<span>/</span>abc}</span>           <span># ABC123ABCabc</span>\n<span>echo</span> <span>${stringZ<span>/</span><span>/</span>abc}</span>          <span># ABC123ABC</span>\n<span># 仅仅是将其删除而已。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h4 id=\"string-substring-replacement-3\"> <code>${string/#substring/replacement}</code></h4>\n<p>替换 <code>$string</code> 中最前端匹配到的 <code>$substring</code> 为 <code>$replacement</code>。</p>\n<h4 id=\"string-substring-replacement-4\"> <code>${string/%substring/replacement}</code></h4>\n<p>替换 <code>$string</code> 中最末端匹配到的 <code>$substring</code> 为 <code>$replacement</code>。</p>\n<div><pre><code><span>stringZ</span><span>=</span>abcABC123ABCabc\n\n<span>echo</span> <span>${stringZ<span>/</span><span>#</span>abc<span>/</span>XYZ}</span>          <span># XYZABC123ABCabc</span>\n                                  <span># 将前端的 'abc' 替换为 'XYZ'</span>\n                                  \n<span>echo</span> <span>${stringZ<span>/</span><span>%</span>abc<span>/</span>XYZ}</span>          <span># abcABC123ABCXYZ</span>\n                                  <span># 将末端的 'abc' 替换为 'XYZ'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>这种情况同时适用于命令行参数和传入函数的参数。 </p>\n</li>\n<li id=\"fn2\"><p>注意根据使用时上下文的不同，<code>$substring</code> 和 <code>$replacement</code> 可以是文本字符串也可以是变量。可以参考第一个样例。 </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "10.2 参数替换",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_2_parameter_substitution/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_2_parameter_substitution/",
      "content_html": "<h1 id=\"_10-2-参数替换\"> 10.2 参数替换</h1>\n<p>参数替换用来处理或扩展变量。</p>\n<h3 id=\"parameter\"> <code>${parameter}</code></h3>\n<p>等同于 <code>$parameter</code>，是变量 parameter 的值。在一些特定的环境下，只允许使用不易混淆的 <code>${parameter}</code> 形式。</p>\n<p>可以用于连接变量与字符串。</p>\n<div><pre><code><span>your_id</span><span>=</span><span>${<span>USER</span>}</span>-on-<span>${<span>HOSTNAME</span>}</span>\n<span>echo</span> <span>\"<span>$your_id</span>\"</span>\n<span># </span>\n<span>echo</span> <span>\"Old \\<span>$PATH</span> = <span>$PATH</span>\"</span>\n<span><span>PATH</span></span><span>=</span><span>${<span>PATH</span>}</span>:/opt/bin  <span># 在脚本执行过程中临时在 $PATH 中加入 /opt/bin。</span>\n<span>echo</span> <span>\"New \\<span>$PATH</span> = <span>$PATH</span>\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"parameter-default-parameter-default\"> <code>${parameter-default}, ${parameter:-default}</code></h3>\n<p>在没有设置变量的情况下使用缺省值。</p>\n<div><pre><code><span>var1</span><span>=</span><span>1</span>\n<span>var2</span><span>=</span><span>2</span>\n<span># 没有设置 var3。</span>\n\n<span>echo</span> <span>${var1-$var2}</span>   <span># 1</span>\n<span>echo</span> <span>${var3-$var2}</span>   <span># 2</span>\n<span>#           ^          注意前面的 $ 前缀。</span>\n\n\n\n<span>echo</span> <span>${username-`whoami`}</span>\n<span># 如果变量 $username 没有被设置，输出 `whoami` 的结果。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> <code>${parameter-default}</code> 与 <code>${parameter:-default}</code> 的作用几乎相同，唯一不同的情况就是当变量 parameter 已经被声明但值为空时。</p>\n</blockquote>\n<div><pre><code><span>#!/bin/bash</span>\n<span># param-sub.sh</span>\n\n<span># 无论变量的值是否为空，其是否已被声明决定了缺省设置的触发。</span>\n\n<span>username0</span><span>=</span>\n<span>echo</span> <span>\"username0 has been declared, but is set to null.\"</span>\n<span>echo</span> <span>\"username0 = <span>${username0-`whoami`}</span>\"</span>\n<span># 将不会输出 `whoami` 的结果。</span>\n\n<span>echo</span>\n\n<span>echo</span> username1 has not been declared.\n<span>echo</span> <span>\"username1 = <span>${username1-`whoami`}</span>\"</span>\n<span># 将会输出 `whoami` 的结果。</span>\n\n<span>username2</span><span>=</span>\n<span>echo</span> <span>\"username2 has been declared, but is set to null.\"</span>\n<span>echo</span> <span>\"username2 = <span>${username2<span>:-</span>`whoami`}</span>\"</span>\n<span>#                            ^</span>\n<span># 因为这里是 :- 而不是 -，所以将会输出 `whoami` 的结果。</span>\n<span># 与上面的 username0 比较。</span>\n\n\n<span># </span>\n\n<span># 再来一次：</span>\n\n<span>variable</span><span>=</span>\n<span># 变量已被声明，但其值为空。</span>\n\n<span>echo</span> <span>\"<span>${varibale-0}</span>\"</span>    <span># 没有输出。</span>\n<span>echo</span> <span>\"<span>${variable<span>:-</span>1}</span>\"</span>   <span># 1</span>\n<span>#               ^</span>\n\nunser variable\n\n<span>echo</span> <span>\"<span>${variable-2}</span>\"</span>    <span># 2</span>\n<span>echo</span> <span>\"<span>${variable<span>:-</span>3}</span>\"</span>   <span># 3</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><p>当传入的命令行参数的数量不足时，可以使用这种缺省参数结构。</p>\n<div><pre><code><span>DEFAULT_FILENAME</span><span>=</span>generic.data\n<span>filename</span><span>=</span><span>${1<span>:-</span>$DEFAULT_FILENAME}</span>\n<span># 如果没有其他特殊情况，下面的代码块将会操作文件 \"generic.data\"。</span>\n<span># 代码块开始</span>\n<span># ...</span>\n<span># ...</span>\n<span># ...</span>\n<span># 代码块结束</span>\n\n\n\n<span># 摘自样例 \"hanoi2.bash\"：</span>\n<span>DISKS</span><span>=</span><span>${1<span>:-</span>E_NOPARAM}</span>   <span># 必须指定碟子的个数。</span>\n<span>#  将 $DISKS 设置为传入的第一个命令行参数，</span>\n<span>#+ 如果没有传入第一个参数，则设置为 $E_NOPARAM。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>可以查看 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#EX58\" target=\"_blank\" rel=\"noopener noreferrer\">样例 3-4</a>，<a href=\"http://tldp.org/LDP/abs/html/zeros.html#EX73\" target=\"_blank\" rel=\"noopener noreferrer\">样例 31-2</a> 和 <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#COLLATZ\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-6</a>。</p>\n<p>可以同 <a href=\"http://tldp.org/LDP/abs/html/list-cons.html#ANDDEFAULT\" target=\"_blank\" rel=\"noopener noreferrer\">使用与链设置缺省命令行参数</a> 做比较。</p>\n<h3 id=\"parameter-default-parameter-default-2\"> <code>${parameter=default}, ${parameter:=default}</code></h3>\n<p>在没有设置变量的情况下，将其设置为缺省值。</p>\n<p>两种形式的作用几乎相同，唯一不同的情况与上面类似，就是当变量 parameter 已经被声明但值为空时。<sup></sup></p>\n<div><pre><code><span>echo</span> <span>${var=abc}</span>   <span># abc</span>\n<span>echo</span> <span>${vat=xyz}</span>   <span># abc</span>\n<span># $var 已经在第一条语句中被赋值为 abc，因此第二条语句将不会改变它的值。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"parameter-alt-value-parameter-alt-value\"> <code>${parameter+alt_value}, ${parameter:+alt_value}</code></h3>\n<p>如果变量已被设置，使用 alt_value，否则使用空值。</p>\n<p>两种形式的作用几乎相同，唯一不同的情况就是当变量 parameter 已经被声明但值为空时，看下面的例子。</p>\n<div><pre><code><span>echo</span> <span>\"###### \\<span>${parameter+alt_value}</span> ########\"</span>\n<span>echo</span>\n\n<span>a</span><span>=</span><span>${param1+xyz}</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>      <span># a =</span>\n\n<span>param2</span><span>=</span>\n<span>a</span><span>=</span><span>${param2+xyz}</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>      <span># a = xyz</span>\n\n<span>param3</span><span>=</span><span>123</span>\n<span>a</span><span>=</span><span>${param3+xyz}</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>      <span># a = xyz</span>\n\n<span>echo</span>\n<span>echo</span> <span>\"###### \\<span>${parameter<span>:+</span>alt_value}</span> ########\"</span>\n<span>echo</span>\n\n<span>a</span><span>=</span><span>${param4<span>:+</span>xyz}</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>      <span># a =</span>\n\n<span>param5</span><span>=</span>\n<span>a</span><span>=</span><span>${param5<span>:+</span>xyz}</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>      <span># a =</span>\n<span># 不同于 a=${param5+xyz}</span>\n\n<span>param6</span><span>=</span><span>123</span>\n<span>a</span><span>=</span><span>${param6<span>:+</span>xyz}</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>      <span># a = xyz</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h3 id=\"parameter-err-msg-parameter-err-msg\"> <code>${parameter?err_msg}, ${parameter:?err_msg}</code></h3>\n<p>如果变量已被设置，那么使用原值，否则输出 err_msg 并且终止脚本，返回 <a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">错误码</a> 1。</p>\n<p>两种形式的作用几乎相同，唯一不同的情况与上面类似，就是当变量 parameter 已经被声明但值为空时。</p>\n<p>样例 10-7. 如何使用变量替换和错误信息</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span># 检查系统环境变量。</span>\n<span># 这是一种良好的预防性维护措施。</span>\n<span># 如果控制台用户的名称 $USER 没有被设置，那么主机将不能够识别用户。</span>\n\n<span>:</span> <span>${<span>HOSTNAME</span>?}</span> <span>${<span>USER</span>?}</span> <span>${<span>HOME</span>?}</span> <span>${MAIL?}</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"Name of the machine is <span>$HOSTNAME</span>.\"</span>\n  <span>echo</span> <span>\"You are <span>$USER</span>.\"</span>\n  <span>echo</span> <span>\"Your home directory is <span>$HOME</span>.\"</span>\n  <span>echo</span> <span>\"Your mail INBOX is located in <span>$MAIL</span>.\"</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"If you are reading this message,\"</span>\n  <span>echo</span> <span>\"critcial environmental variables have been set.\"</span>\n  <span>echo</span>\n  <span>echo</span>\n  \n<span># ------------------------------------------------------</span>\n\n<span># ${variablename?} 结构统一可以检查脚本中的变量是否被设置。</span>\n\n<span>ThisVariable</span><span>=</span>Value-of-ThisVariable\n<span># 顺带一提，这个字符串的值可以被设置成名称中不可以使用的禁用字符。</span>\n<span>:</span> <span>${ThisVariable?}</span>\n<span>echo</span> <span>\"Value of ThisVariable is <span>$ThisVariable</span>.\"</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n\n<span>:</span> <span>${ZZXy23AB?\"ZZXy23AB has not been set.\"}</span>\n<span># 因为 ZZXy23AB 没有被设置，所以脚本会终止同时显示错误消息。</span>\n\n<span># 你可以指定错误消息。</span>\n<span># : ${variablename?\"ERROR MESSAGE\"}</span>\n\n\n<span># 与这些结果相同:  dummy_variable=${ZZXy23AB?}</span>\n<span>#                 dummy_variable=${ZZXy23AB?\"ZZXy23AB has not been set.\"}</span>\n<span>#</span>\n<span>#                 echo ${ZZXy23AB?} >/dev/null</span>\n\n<span># 将上面这些检查变量是否被设置的方法同 \"set -u\" 作比较。</span>\n\n\n\n<span>echo</span> <span>\"You will not see this message, because script already terminated.\"</span>\n\n<span>HERE</span><span>=</span><span>0</span>\n<span>exit</span> <span>$HERE</span>   <span># 将不会从这里退出。</span>\n\n<span>#  事实上，这个脚本将会返回退出码（echo $?）1。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><p>样例 10-8. 参数替换与 &quot;usage&quot; 消息</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># usage-message.sh</span>\n\n<span>:</span> <span>${1?\"Usage<span>:</span> $0 ARGUMENT\"}</span>\n<span># 如果命令行参数缺失，脚本将会在这里结束，并且返回下面的错误信息。</span>\n<span>#    usage-message.sh: 1: Usage: usage-message.sh ARGUMENT</span>\n\n<span>echo</span> <span>\"These two lines echo only if command-line parameter given.\"</span>\n<span>echo</span> <span>\"command-line parameter = <span title=\"\\&quot;\">\\\"</span><span>$1</span><span title=\"\\&quot;\">\\\"</span>\"</span>\n\n<span>exit</span> <span>0</span>  <span># 仅当命令行参数存在是才会从这里退出。</span>\n\n<span># 在传入和未传入命令行参数的情况下查看退出状态。</span>\n<span># 如果传入了命令行参数，那么 \"$?\" 的结果是0。</span>\n<span># 如果没有，那么 \"$?\" 的结果是1。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>参数替换用来处理或扩展变量。下面的表达式是对 <code>expr</code> 处理字符串的操作的补足（查看样例 16-9）。这些特殊的表达式通常养来解析文件的路径名。</p>\n<h3 id=\"变量长度-删除子串\"> 变量长度 / 删除子串</h3>\n<h4 id=\"var\"> <code>${#var}</code></h4>\n<p>字符串的长度（<code>$var</code> 中字符的个数）。对任意 <a href=\"http://tldp.org/LDP/abs/html/arrays.html#ARRAYREF\" target=\"_blank\" rel=\"noopener noreferrer\">数组</a> array，<code>${#array}</code> 返回数组中第一个元素的长度。</p>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 以下情况例外：</p>\n<ul>\n<li><code>${#*}</code> 和 <code>${#@}</code> 返回位置参数的个数。</li>\n<li>任意数组 array，<code>${#array[*]}</code> 和 <code>${#array[@]}</code> 返回数组中元素的个数。</li>\n</ul>\n</blockquote>\n<p>样例 10-9. 变量长度</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># length.sh</span>\n\n<span>E_NO_ARGS</span><span>=</span><span>65</span>\n\n<span>if</span> <span>[</span> <span>$#</span> -eq <span>0</span> <span>]</span>  <span># 脚本必须传入参数。</span>\n<span>then</span>\n  <span>echo</span> <span>\"Please invoke this script with one or more command-line arguments.\"</span>\n  <span>exit</span> <span>$E_NO_ARGS</span>\n<span>fi</span>\n\n<span>var01</span><span>=</span>abcdEFGH28ij\n<span>echo</span> <span>\"var01 = <span>${var01}</span>\"</span>\n<span>echo</span> <span>\"Length of var01 = <span>${<span>#</span>var01}</span>\"</span>\n<span># 现在我们尝试加入空格。</span>\n<span>var02</span><span>=</span><span>\"abcd EFGH28ij\"</span>\n<span>echo</span> <span>\"var02 = <span>${var02}</span>\"</span>\n<span>echo</span> <span>\"Length of var02 = <span>${<span>#</span>var02}</span>\"</span>\n\n<span>echo</span> <span>\"Number of command-line arguments passed to script = <span>${<span>#</span>@}</span>\"</span>\n<span>echo</span> <span>\"Number of command-line arguments passed to script = <span>${<span>#</span>*}</span>\"</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h4 id=\"var-pattern-var-pattern\"> <code>${var#Pattern}, ${var##Pattern}</code></h4>\n<p><code>${var#Pattern}</code> 删除 <code>$var</code> 前缀部分匹配到的最短长度的 <code>$Pattern</code>。</p>\n<p><code>${var##Pattern}</code> 删除 <code>$var</code> 前缀部分匹配到的最长长度的 <code>$Pattern</code>。</p>\n<p>摘自 <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#DAYSBETWEEN\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-7</a> 的例子：</p>\n<div><pre><code><span># 函数摘自样例 \"day-between.sh\"。</span>\n<span># 删除传入的参数中的前缀0。</span>\n\nstrip_leading_zero <span>(</span><span>)</span> <span>#  删除传入参数中可能存在的</span>\n<span>{</span>                     <span>#+ 前缀0。</span>\n  <span>return</span><span>=</span><span>${1<span>#</span>0}</span>       <span>#  \"1\" 代表 \"$1\"，即传入的参数。</span>\n<span>}</span>                     <span>#  从 \"$1\" 中删除 \"0\"。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>下面是由 Manfred Schwarb 提供的上述函数的改进版本：</p>\n<div><pre><code>strip_leading_zero2 <span>(</span><span>)</span> <span># 删除前缀0，</span>\n<span>{</span>                      <span># 否则 Bash 会将其解释为8进制数。</span>\n  <span>shopt</span> -s extglob     <span># 启用扩展通配特性。</span>\n  <span>local</span> <span>val</span><span>=</span><span>${1<span>##</span>+(0)}</span> <span># 使用本地变量，匹配前缀中所有的0。</span>\n  <span>shopt</span> -u extglob     <span># 禁用扩展通配特性。</span>\n  <span>_strip_leading_zero2</span><span>=</span><span>${var<span>:-</span>0}</span>\n                       <span># 如果输入的为0，那么返回 0 而不是 \"\"。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>另外一个样例：</p>\n<div><pre><code><span>echo</span> <span><span>`</span><span>basename</span> <span>$PWD</span><span>`</span></span>        <span># 当前工作目录的目录名。</span>\n<span>echo</span> <span>\"<span>${<span>PWD</span><span>##</span>*<span>/</span>}</span>\"</span>           <span># 当前工作目录的目录名。</span>\n<span>echo</span>\n<span>echo</span> <span><span>`</span><span>basename</span> $0<span>`</span></span>          <span># 脚本名。</span>\n<span>echo</span> <span>$0</span>                     <span># 脚本名。</span>\n<span>echo</span> <span>\"<span>${0<span>##</span>*<span>/</span>}</span>\"</span>             <span># 脚本名。</span>\n<span>echo</span>\n<span>filename</span><span>=</span>test.data\n<span>echo</span> <span>\"<span>${filename<span>##</span>*.}</span>\"</span>      <span># data</span>\n                            <span># 文件扩展名。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h4 id=\"var-pattern-var-pattern-2\"> <code>${var%Pattern}, ${var%%Pattern}</code></h4>\n<p><code>${var%Pattern}</code> 删除 <code>$var</code> 后缀部分匹配到的最短长度的 <code>$Pattern</code>。</p>\n<p><code>${var%%Pattern}</code> 删除 <code>$var</code> 后缀部分匹配到的最长长度的 <code>$Pattern</code>。</p>\n<p>在 Bash 的 <a href=\"http://tldp.org/LDP/abs/html/bashver2.html#BASH2REF\" target=\"_blank\" rel=\"noopener noreferrer\">第二个版本</a> 中增加了一些额外的选择。</p>\n<p>样例 10-10. 参数替换中的模式匹配</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># patt-matching.sh</span>\n\n<span># 使用 # ## % %% 参数替换操作符进行模式匹配</span>\n\n<span>var1</span><span>=</span>abcd12345abc6789\n<span>pattern1</span><span>=</span>a*c  <span># 通配符 * 可以匹配 a 与 c 之间的任意字符</span>\n\n<span>echo</span>\n<span>echo</span> <span>\"var1 = <span>$var1</span>\"</span>           <span># abcd12345abc6789</span>\n<span>echo</span> <span>\"var1 = <span>${var1}</span>\"</span>         <span># abcd12345abc6789</span>\n                              <span># （另一种形式）</span>\n<span>echo</span> <span>\"Number of characters in <span>${var1}</span> = <span>${<span>#</span>var1}</span>\"</span>\n<span>echo</span>\n\n<span>echo</span> <span>\"pattern1 = <span>$pattern1</span>\"</span>   <span># a*c  (匹配 'a' 与 'c' 之间的一切)</span>\n<span>echo</span> <span>\"--------------\"</span>\n<span>echo</span> <span>'<span>${var1<span>#</span>$pattern1}</span>  ='</span> <span>\"<span>${var1<span>#</span>$pattern1}</span>\"</span>    <span>#         d12345abc6789</span>\n<span># 匹配到首部最短的3个字符                                   abcd12345abc6789</span>\n<span>#             ^                                           |-|</span>\n<span>echo</span> <span>'<span>${var1<span>##</span>$pattern1}</span> ='</span> <span>\"<span>${var1<span>##</span>$pattern1}</span>\"</span>   <span>#                  6789</span>\n<span># 匹配到首部最长的12个字符                                  abcd12345abc6789</span>\n<span>#             ^                                           |----------|</span>\n\n<span>echo</span><span>;</span> <span>echo</span><span>;</span> <span>echo</span>\n\n<span>pattern2</span><span>=</span>b*9            <span># 匹配 'b' 与 '9' 之间的任意字符</span>\n<span>echo</span> <span>\"var1 = <span>$var1</span>\"</span>     <span># 仍旧是 abcd12345abc6789</span>\n<span>echo</span>\n<span>echo</span> <span>\"pattern2 = <span>$pattern2</span>\"</span>\n<span>echo</span> <span>\"--------------\"</span>\n<span>echo</span> <span>'<span>${var1<span>%</span>pattern2}</span>  ='</span> <span>\"<span>${var1<span>%</span>$pattern2}</span>\"</span>     <span>#     abcd12345a</span>\n<span># 匹配到尾部最短的6个字符                                  abcd12345abc6789</span>\n<span>#             ^                                                    |----|</span>\n<span>echo</span> <span>'<span>${var1<span>%%</span>pattern2}</span> ='</span> <span>\"<span>${var1<span>%%</span>$pattern2}</span>\"</span>    <span>#     a</span>\n<span># 匹配到尾部最长的12个字符                                 abcd12345abc6789</span>\n<span>#             ^                                           |-------------|</span>\n\n<span># 牢记 # 与 ## 是从字符串左侧开始，</span>\n<span>#      % 与 %% 是从右侧开始。</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><p>样例 10-11. 更改文件扩展名：</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># rfe.sh: 更改文件扩展名。</span>\n<span>#</span>\n<span>#         rfe old_extension new_extension</span>\n<span>#</span>\n<span># 如：</span>\n<span># 将当前目录下所有 *.gif 文件重命名为 *.jpg，</span>\n<span>#         rfe gif jpg</span>\n\n\n<span>E_BADARGS</span><span>=</span><span>65</span>\n\n<span>case</span> <span>$#</span> <span>in</span>\n  <span>0</span><span>|</span><span>1</span><span>)</span>             <span># 竖线 | 在这里表示逻辑或关系。</span>\n  <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> old_file_suffix new_file_suffix\"</span>\n  <span>exit</span> <span>$E_BADARGS</span>  <span># 如果只有0个或1个参数，那么退出脚本。</span>\n  <span>;</span><span>;</span>\n<span>esac</span>\n\n\n<span>for</span> <span>filename</span> <span>in</span> *.<span>$1</span>\n<span># 遍历以第一个参数作为后缀名的文件列表。</span>\n<span>do</span>\n  <span>mv</span> <span>$filename</span> <span>${filename<span>%</span>$1}</span><span>$2</span>\n  <span># 删除文件后缀名，增加第二个参数作为后缀名。</span>\n<span>done</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h3 id=\"变量扩展-替换子串\"> 变量扩展 / 替换子串</h3>\n<p>下面这些结构采用自 ksh。</p>\n<h4 id=\"var-pos\"> <code>${var:pos}</code></h4>\n<p>扩展为从偏移量 pos 处截取的变量 var。</p>\n<h4 id=\"var-pos-len\"> <code>${var:pos:len}</code></h4>\n<p>扩展为从偏移量 pos 处截取变量 var 最大长度为 len 的字符串。</p>\n<h4 id=\"var-pattern-replacement\"> <code>${var/Pattern/Replacement}</code></h4>\n<p>替换 var 中第一个匹配到的 Pattern 为 Replacement。</p>\n<p>如果 Replacement 被省略，那么匹配到的第一个 Pattern 将被替换为空，即删除。</p>\n<h4 id=\"var-pattern-replacement-2\"> <code>${var//Pattern/Replacement}</code></h4>\n<p>全局替换。替换 var 中所有匹配到的 Pattern 为 Replacement。</p>\n<p>跟上面一样，如果 Replacement 被省略，那么匹配到的所有 Pattern 将被替换为空，即删除。</p>\n<p>样例 10-12. 使用模式匹配解析任意字符串</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>var1</span><span>=</span>abcd-1234-defg\n<span>echo</span> <span>\"var1 = <span>$var1</span>\"</span>\n\n<span>t</span><span>=</span><span>${var1<span>#</span>*-*}</span>\n<span>echo</span> <span>\"var1 (with everything, up to and including first - stripped out) = <span>$t</span>\"</span>\n<span>#  t=${var1#*-} 效果相同，</span>\n<span>#+ 因为 # 只匹配最短的字符串，</span>\n<span>#+ 并且 * 可以任意匹配，其中也包括空字符串。</span>\n<span># （感谢 Stephane Chazelas 指出这一点。）</span>\n\n<span>t</span><span>=</span><span>${var<span>##</span>*-*}</span>\n<span>echo</span> <span>\"If var1 contains a <span title=\"\\&quot;\">\\\"</span>-<span title=\"\\&quot;\">\\\"</span>, returns empty string...   var1 = <span>$t</span>\"</span>\n\n\n<span>t</span><span>=</span><span>${var1<span>%</span>*-*}</span>\n<span>echo</span> <span>\"var1 (with everything from the last - on stripped out) = <span>$t</span>\"</span>\n\n<span>echo</span>\n\n<span># -------------------------------------------</span>\n<span>path_name</span><span>=</span>/home/bozo/ideas/thoughts/for.today\n<span># -------------------------------------------</span>\n<span>echo</span> <span>\"path_name = <span>$path_name</span>\"</span>\n<span>t</span><span>=</span><span>${path_name<span>##</span><span>/</span>*<span>/</span>}</span>\n<span>echo</span> <span>\"path_name, stripped of prefixes = <span>$t</span>\"</span>\n<span># 在这里与 t=`basename $path_name` 效果相同。</span>\n<span>#  t=${path_name%/}; t=${t##*/}  是更加通用的方法，</span>\n<span>#+ 但有时仍旧也会出现问题。</span>\n<span>#  如果 $path_name 以换行结束，那么 `basename $path_name` 将会失效，</span>\n<span>#+ 但是上面这种表达式却可以。</span>\n<span># （感谢 S.C.）</span>\n\n<span>t</span><span>=</span><span>${path_name<span>%</span><span>/</span>*.*}</span>\n<span># 同 t=`dirname $path_name` 效果相同。</span>\n<span>echo</span> <span>\"path_name, stripped of suffixes = <span>$t</span>\"</span>\n<span># 在一些情况下会失效，比如 \"../\", \"/foo////\", # \"foo/\", \"/\"。</span>\n<span>#  在删除后缀时，尤其是当文件名没有后缀，目录名却有后缀时，</span>\n<span>#+ 事情会变的非常复杂。</span>\n<span># （感谢 S.C.）</span>\n\n<span>echo</span>\n\n<span>t</span><span>=</span><span>${path_name<span>:</span>11}</span>\n<span>echo</span> <span>\"<span>$path_name</span>, with first 11 chars stripped off = <span>$t</span>\"</span>\n<span>t</span><span>=</span><span>${path_name<span>:</span>11<span>:</span>5}</span>\n<span>echo</span> <span>\"<span>$path_name</span>, with first 11 chars stripped off, length 5 = <span>$t</span>\"</span>\n\n<span>echo</span>\n\n<span>t</span><span>=</span><span>${path_name<span>/</span>bozo<span>/</span>clown}</span>\n<span>echo</span> <span>\"<span>$path_name</span> with <span title=\"\\&quot;\">\\\"</span>bozo<span title=\"\\&quot;\">\\\"</span> replaced by <span title=\"\\&quot;\">\\\"</span>clown<span title=\"\\&quot;\">\\\"</span> = <span>$t</span>\"</span>\n<span>t</span><span>=</span><span>${path_name<span>/</span>today<span>/</span>}</span>\n<span>echo</span> <span>\"<span>$path_name</span> with <span title=\"\\&quot;\">\\\"</span>today<span title=\"\\&quot;\">\\\"</span> deleted = <span>$t</span>\"</span>\n<span>t</span><span>=</span><span>${path_name<span>/</span><span>/</span>o<span>/</span>O}</span>\n<span>echo</span> <span>\"<span>$path_name</span> with all o's capitalized = <span>$t</span>\"</span>\n<span>t</span><span>=</span><span>${path_name<span>/</span><span>/</span>o<span>/</span>}</span>\n<span>echo</span> <span>\"<span>$path_name</span> with all o's deleted = <span>$t</span>\"</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div><h4 id=\"var-pattern-replacement-3\"> <code>${var/#Pattern/Replacement}</code></h4>\n<p>替换 var 前缀部分匹配到的 Pattern 为 Replacement。</p>\n<h4 id=\"var-pattern-replacement-4\"> <code>${var/%Pattern/Replacement}</code></h4>\n<p>替换 var 后缀部分匹配到的 Pattern 为 Replacement。</p>\n<p>样例 10-13. 在字符串首部或尾部进行模式匹配</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># var-match.sh:</span>\n<span># 演示在字符串首部或尾部进行模式替换。</span>\n\n<span>v0</span><span>=</span>abc1234zip1234abc    <span># 初始值。</span>\n<span>echo</span> <span>\"v0 = <span>$v0</span>\"</span>         <span># abc1234zip1234abc</span>\n<span>echo</span>\n\n<span># 在字符串首部进行匹配</span>\n<span>v1</span><span>=</span><span>${v0<span>/</span><span>#</span>abc<span>/</span>ABCDEF}</span>    <span># abc1234zip123abc</span>\n                        <span># |-|</span>\n<span>echo</span> <span>\"v1 = <span>$v1</span>\"</span>         <span># ABCDEF1234zip1234abc</span>\n                        <span># |----|</span>\n                        \n<span># 在字符串尾部进行匹配</span>\n<span>v2</span><span>=</span><span>${v0<span>/</span><span>%</span>abc<span>/</span>ABCDEF}</span>    <span># abc1234zip123abc</span>\n                        <span>#              |-|</span>\n<span>echo</span> <span>\"v2 = <span>$v2</span>\"</span>         <span># abc1234zip1234ABCDEF</span>\n                        <span>#               |----|</span>\n                        \n<span>echo</span>\n\n<span>#  --------------------------------------------</span>\n<span>#  必须在字符串的最开始或者最末尾的地方进行匹配，</span>\n<span>#+ 否则将不会发生替换。</span>\n<span>#  --------------------------------------------</span>\n<span>v3</span><span>=</span><span>${v0<span>/</span><span>#</span>123<span>/</span>000}</span>       <span># 虽然匹配到了，但是不在最开始的地方。</span>\n<span>echo</span> <span>\"v3 = <span>$v3</span>\"</span>         <span># abc1234zip1234abc</span>\n                        <span># 没有替换。</span>\n<span>v4</span><span>=</span><span>${v0<span>/</span><span>%</span>123<span>/</span>000}</span>       <span># 虽然匹配到了，但是不在最末尾的地方。</span>\n<span>echo</span> <span>\"v4 = <span>$v4</span>\"</span>         <span># abc1234zip1234abc</span>\n                        <span># 没有替换。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h4 id=\"varprefix-varprefix\"> <code>${!varprefix*}, ${!varprefix@}</code></h4>\n<p>匹配先前声明过所有以 varprefix 作为变量名前缀的变量。</p>\n<div><pre><code><span># 这是带 * 或 @ 的间接引用的一种变换形式。</span>\n<span># 在 Bash 2.04 版本中加入了这个特性。</span>\n\n<span>xyz23</span><span>=</span>whatever\n<span>xyz23</span><span>=</span>\n\n<span>a</span><span>=</span><span>${<span>!</span>xyz*}</span>         <span>#  扩展为声明变量中以 \"xyz\"</span>\n<span># ^ ^   ^           + 开头变量名。</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>      <span>#  a = xyz23 xyz24</span>\n<span>a</span><span>=</span><span>${<span>!</span>xyz@}</span>         <span>#  同上。</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>      <span>#  a = xyz23 xyz24</span>\n\n<span>echo</span> <span>\"---\"</span>\n\n<span>abc23</span><span>=</span>something_else\n<span>b</span><span>=</span><span>${<span>!</span>abc*}</span>\n<span>echo</span> <span>\"b = <span>$b</span>\"</span>      <span>#  b = abc23</span>\n<span>c</span><span>=</span><span>${<span>!</span>b}</span>            <span>#  这是我们熟悉的间接引用的形式。</span>\n<span>echo</span> <span>$c</span>            <span>#  something_else</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>如果在非交互的脚本中，<code>$parameter</code> 为空，那么程序将会终止，并且返回 <a href=\"http://tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF\" target=\"_blank\" rel=\"noopener noreferrer\">错误码 127</a>（意为“找不到命令”）。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/note.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第十章 变量处理",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_manipulating_variables/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/10_manipulating_variables/",
      "content_html": "<h1 id=\"第十章-变量处理\"> 第十章 变量处理</h1>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./10_1_manipulating_strings.html\">10.1 字符串处理</a>\n<ul>\n<li><a href=\"./10_1_1_manipulating_strings_using_awk.html\">10.1.1 使用 <code>awk</code> 处理字符串</a></li>\n<li><a href=\"./10_1_2_further_reference.html\">10.1.2 参考资料</a></li>\n</ul>\n</li>\n<li><a href=\"./10_2_parameter_substitution.html\">10.2 参数替换</a></li>\n</ul>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "11.1 循环",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_1_loops/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_1_loops/",
      "content_html": "<h1 id=\"_11-1-循环\"> 11.1 循环</h1>\n<p>循环是当循环控制条件为真时，一系列命令迭代<sup></sup>执行的代码块。</p>\n<h3 id=\"for-循环\"> for 循环</h3>\n<h3 id=\"for-arg-in-list\"> <code>for arg in [list]</code></h3>\n<p>这是 shell 中最基本的循环结构，它与C语言形式的循环有着明显的不同。</p>\n<div><pre><code><span>for</span> <span>arg</span> <span>in</span> <span>[</span>list<span>]</span>\n<span>do</span>\n  command<span>(</span>s<span>)</span><span>..</span>.\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 在循环的过程中，<code>arg</code> 会从 <code>list</code> 中连续获得每一个变量的值。</p>\n</blockquote>\n<div><pre><code><span>for</span> <span>arg</span> <span>in</span> <span>\"<span>$var1</span>\"</span> <span>\"<span>$var2</span>\"</span> <span>\"<span>$var3</span>\"</span> <span>..</span>. <span>\"<span>$varN</span>\"</span>\n<span># 第一次循环中，arg = $var1</span>\n<span># 第二次循环中，arg = $var2</span>\n<span># 第三次循环中，arg = $var3</span>\n<span># ...</span>\n<span># 第 N 次循环中，arg = $varN</span>\n<span>></span>\n<span># 为了防止可能的字符分割问题，[list] 中的参数都需要被引用。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>参数 list 中允许含有 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#ASTERISKREF\" target=\"_blank\" rel=\"noopener noreferrer\">通配符</a>。</p>\n<p>如果 <code>do</code> 和 <code>for</code> 写在同一行时，需要在 list 之后加上一个分号。</p>\n<p><code>for arg in [list] ; do</code></p>\n<p>样例 11-1. 简单的 for 循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 列出太阳系的所有行星。</span>\n\n<span>for</span> <span>planet</span> <span>in</span> Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\n<span>do</span>\n  <span>echo</span> <span>$planet</span>  <span># 每一行输出一个行星。</span>\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>for</span> <span>planet</span> <span>in</span> <span>\"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\"</span>\n    <span># 所有的行星都输出在一行上。</span>\n    <span># 整个 'list' 被包裹在引号中时是作为一个单一的变量。</span>\n    <span># 为什么？因为空格也是变量的一部分。</span>\n<span>do</span>\n  <span>echo</span> <span>$planet</span>\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span> <span>\"Whoops! Pluto is no longer a planet!\"</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>[list] 中的每一个元素中都可能含有多个参数。这在处理参数组中非常有用。在这种情况下，使用 <a href=\"http://tldp.org/LDP/abs/html/internal.html#SETREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>set</code></a> 命令（查看 <a href=\"http://tldp.org/LDP/abs/html/internal.html#EX34\" target=\"_blank\" rel=\"noopener noreferrer\">样例 15-16</a>）强制解析 [list] 中的每一个元素，并将元素的每一个部分分配给位置参数。</p>\n<p>样例 11-2. <code>for</code> 循环 [list] 中的每一个变量有两个参数的情况</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 让行星再躺次枪。</span>\n\n<span># 将每个行星与其到太阳的距离放在一起。</span>\n\n<span>for</span> <span>planet</span> <span>in</span> <span>\"Mercury 36\"</span> <span>\"Venus 67\"</span> <span>\"Earth 93\"</span> <span>\"Mars 142\"</span> <span>\"Jupiter 483\"</span>\n<span>do</span>\n  <span>set</span> -- <span>$planet</span>  <span>#  解析变量 \"planet\"</span>\n                  <span>#+ 并将其每个部分赋值给位置参数。</span>\n  <span># \"--\" 防止一些极端情况，比如 $planet 为空或者以破折号开头。</span>\n  \n  <span># 因为位置参数会被覆盖掉，因此需要先保存原先的位置参数。</span>\n  <span># 你可以使用数组来保存</span>\n  <span>#         original_params=(\"$@\")</span>\n  \n  <span>echo</span> <span>\"<span>$1</span>\t\t<span>$2</span>,000,000 miles from the sum\"</span>\n  <span>#-------两个制表符---将后面的一系列 0 连到参数 $2 上。</span>\n<span>done</span>\n\n<span># （感谢 S.C. 做出的额外注释。）</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>一个单一变量也可以成为 <code>for</code> 循环中的 [list]。</p>\n<p>样例 11-3. 文件信息：查看一个单一变量中含有的文件列表的文件信息</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># fileinfo.sh</span>\n\n<span>FILES</span><span>=</span><span>\"/usr/sbin/accept\n/usr/sbin/pwck\n/usr/sbin/chroot\n/usr/bin/fakefile\n/sbin/badblocks\n/sbin/ypbind\"</span>     <span># 你可能会感兴趣的一系列文件。</span>\n                  <span># 包含一个不存在的文件，/usr/bin/fakefile。</span>\n                  \n<span>echo</span>\n\n<span>for</span> <span>file</span> <span>in</span> <span>$FILES</span>\n<span>do</span>\n\n  <span>if</span> <span>[</span> <span>!</span> -e <span>\"<span>$file</span>\"</span> <span>]</span>       <span># 检查文件是否存在。</span>\n  <span>then</span>\n    <span>echo</span> <span>\"<span>$file</span> does not exist.\"</span><span>;</span> <span>echo</span>\n    <span>continue</span>                <span># 继续判断下一个文件。</span>\n  <span>fi</span>\n  \n  <span>ls</span> -l <span>$file</span> <span>|</span> <span>awk</span> <span>'{ print <span>$8</span> \"         file size: \" <span>$5</span> }'</span>  <span># 输出其中的两个域。</span>\n  whatis <span><span>`</span><span>basename</span> $file<span>`</span></span>   <span># 文件信息。</span>\n  <span># 脚本正常运行需要注意提前设置好 whatis 的数据。</span>\n  <span># 使用 root 权限运行 /usr/bin/makewhatis 可以完成。</span>\n  <span>echo</span>\n<span>done</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p><code>for</code> 循环中的 [list] 可以是一个参数。</p>\n<p>样例 11-4. 操作含有一系列文件的参数</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>filename</span><span>=</span><span>\"*txt\"</span>\n\n<span>for</span> <span>file</span> <span>in</span> <span>$filename</span>\n<span>do</span>\n <span>echo</span> <span>\"Contents of <span>$file</span>\"</span>\n <span>echo</span> <span>\"---\"</span>\n <span>cat</span> <span>\"<span>$file</span>\"</span>\n <span>echo</span>\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>如果在匹配文件扩展名的 <code>for</code> 循环中的 [list] 含有通配符（* 和 ?），那么将会进行文件名扩展。</p>\n<p>样例 11-5. 在 <code>for</code> 循环中操作文件</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># list-glob.sh: 通过文件名扩展在 for 循环中产生 [list]。</span>\n<span># 通配 = 文件名扩展。</span>\n\n<span>echo</span>\n\n<span>for</span> <span>file</span> <span>in</span> *\n<span>#           ^  Bash 在检测到通配表达式时，</span>\n<span>#+             会进行文件名扩展。</span>\n<span>do</span>\n  <span>ls</span> -l <span>\"<span>$file</span>\"</span>  <span># 列出 $PWD（当前工作目录）下的所有文件。</span>\n  <span>#  回忆一下，通配符 \"*\" 会匹配所有的文件名，</span>\n  <span>#+ 但是，在文件名扩展中，他将不会匹配以点开头的文件。</span>\n  \n  <span>#  如果没有匹配到文件，那么它将会扩展为它自身。</span>\n  <span>#  为了防止出现这种情况，需要设置 nullglob 选项。</span>\n  <span>#+    (shopt -s nullglob)。</span>\n  <span>#  感谢 S.C.</span>\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>for</span> <span>file</span> <span>in</span> <span>[</span>jx<span>]</span>*\n<span>do</span>\n  <span>rm</span> -f <span>$file</span>    <span># 删除当前目录下所有以 \"j\" 或 \"x\" 开头的文件。</span>\n  <span>echo</span> <span>\"Removed file <span title=\"\\&quot;\">\\\"</span><span>$file</span><span title=\"\\&quot;\">\\\"</span>\"</span><span>.</span>\n<span>done</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><p>如果在 <code>for</code> 循环中省略 <code>in [list]</code> 部分，那么循环将会遍历位置参数（<code>$@</code>）。<a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#PRIMES\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-15</a> 中使用到了这一点。也可以查看 <a href=\"http://tldp.org/LDP/abs/html/internal.html#REVPOSPARAMS\" target=\"_blank\" rel=\"noopener noreferrer\">样例 15-17</a>。</p>\n<p>样例 11-6. 缺少 <code>in [list]</code> 的 <code>for</code> 循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span># 尝试在带参数和不带参数两种情况下调用这个脚本，观察发生了什么。</span>\n\n<span>for</span> a\n<span>do</span>\n <span>echo</span> -n <span>\"<span>$a</span> \"</span>\n<span>done</span>\n\n<span>#  缺失 'in list' 的情况下，循环会遍历 '$@'</span>\n<span>#+（命令行参数列表，包括空格）。</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>可以在 <code>for</code> 循环中使用 <a href=\"http://tldp.org/LDP/abs/html/commandsub.html#COMMANDSUBREF\" target=\"_blank\" rel=\"noopener noreferrer\">命令代换</a> 生成 [list]。查看 <a href=\"http://tldp.org/LDP/abs/html/extmisc.html#EX53\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-54</a>，<a href=\"http://tldp.org/LDP/abs/html/loops1.html#SYMLINKS\" target=\"_blank\" rel=\"noopener noreferrer\">样例 11-11</a> 和 <a href=\"http://tldp.org/LDP/abs/html/mathc.html#BASE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-48</a>。</p>\n<p>样例 11-7. 在 <code>for</code> 循环中使用命令代换生成 [list]</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># for-loopcmd.sh: 带命令代换所生成 [list] 的 for 循环</span>\n\n<span>NUMBERS</span><span>=</span><span>\"9 7 3 8 37.53\"</span>\n\n<span>for</span> <span>number</span> <span>in</span> <span><span>`</span><span>echo</span> $NUMBERS<span>`</span></span>  <span># for number in 9 7 3 8 37.53</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$number</span> \"</span>\n<span>done</span>\n\n<span>echo</span>\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>下面是使用命令代换生成 [list] 的更加复杂的例子。</p>\n<p>样例 11-8. 一种替代 <code>grep</code> 搜索二进制文件的方法</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># bin-grep.sh: 在二进制文件中定位匹配的字符串。</span>\n\n<span># 一种替代 `grep` 搜索二进制文件的方法</span>\n<span># 与 \"grep -a\" 的效果类似</span>\n\n<span>E_BADARGS</span><span>=</span><span>65</span>\n<span>E_NOFILE</span><span>=</span><span>66</span>\n\n<span>if</span> <span>[</span> <span>$#</span> -ne <span>2</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> search_string filename\"</span>\n  <span>exit</span> <span>$E_BADARGS</span>\n<span>fi</span>\n\n<span>if</span> <span>[</span> <span>!</span> -f <span>\"<span>$2</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"File <span title=\"\\&quot;\">\\\"</span><span>$2</span><span title=\"\\&quot;\">\\\"</span> does not exist.\"</span>\n  <span>exit</span> <span>$E_NOFILE</span>\n<span>fi</span>\n\n\n<span><span>IFS</span></span><span>=</span>$<span>'<span title=\"\\012\">\\012</span>'</span>       <span># 按照 Anton Filippov 的意见应该是</span>\n                  <span># IFS=\"\\n\"</span>\n<span>for</span> <span>word</span> <span>in</span> <span><span>$(</span> strings <span>\"<span>$2</span>\"</span> <span>|</span> <span>grep</span> <span>\"<span>$1</span>\"</span> <span>)</span></span>\n<span># \"strings\" 命令列出二进制文件中的所有字符串。</span>\n<span># 将结果通过管道输出到 \"grep\" 中，检查是不是匹配的字符串。</span>\n<span>do</span>\n  <span>echo</span> <span>$word</span>\n<span>done</span>\n\n<span># 就像 S.C. 指出的那样，第 23-30 行可以换成下面的形式：</span>\n<span>#    strings \"$2\" | grep \"$1\" | tr -s \"$IFS\" '[\\n*]'</span>\n\n\n<span># 尝试运行脚本 \"./bin-grep.sh mem /bin/ls\"</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>下面的例子同样展示了如何使用命令代换生成 [list]。</p>\n<p>样例 11-9. 列出系统中的所有用户</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># userlist.sh</span>\n\n<span>PASSWORD_FILE</span><span>=</span>/etc/passwd\n<span>n</span><span>=</span><span>1</span>           <span># 用户数量</span>\n\n<span>for</span> <span>name</span> <span>in</span> <span><span>$(</span><span>awk</span> <span>'BEGIN{fs=\":\"}{print <span>$1</span>}'</span> <span>&lt;</span> <span>\"<span>$PASSWORD_FILE</span>\"</span> <span>)</span></span>\n<span># 分隔符 = :              ^^^^^^</span>\n<span># 输出第一个域                    ^^^^^^^^</span>\n<span># 读取密码文件 /etc/passwd                    ^^^^^^^^^^^^^^^^^</span>\n<span>do</span>\n  <span>echo</span> <span>\"USER #<span>$n</span> = <span>$name</span>\"</span>\n  <span>let</span> <span>\"n += 1\"</span>\n<span>done</span>\n\n\n<span># USER #1 = root</span>\n<span># USER #2 = bin</span>\n<span># USER #3 = daemon</span>\n<span># ...</span>\n<span># USER #33 = bozo</span>\n\n<span>exit</span> <span>$?</span>\n\n<span># 讨论：</span>\n<span># -----</span>\n<span># 一个普通用户是如何读取 /etc/passwd 文件的？</span>\n<span># 提示：检查 /etc/passwd 的文件权限。</span>\n<span># 这算不算是一个安全漏洞？为什么？</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>另外一个关于 [list] 的例子也来自于命令代换。</p>\n<p>样例 11-10. 检查目录中所有二进制文件的原作者</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># findstring.sh</span>\n<span># 在指定目录的二进制文件中寻找指定的字符串。</span>\n\n<span>directory</span><span>=</span>/usr/bin\n<span>fstring</span><span>=</span><span>\"Free Software Foundation\"</span>  <span># 查看哪些文件来自于 FSF。</span>\n\n<span>for</span> <span>file</span> <span>in</span> <span><span>$(</span> <span>find</span> $directory -type f -name <span>'*'</span> <span>|</span> <span>sort</span> <span>)</span></span>\n<span>do</span>\n  strings -f <span>$file</span> <span>|</span> <span>grep</span> <span>\"<span>$fstring</span>\"</span> <span>|</span> <span>sed</span> -e <span>\"s%<span>$driectory</span>%%\"</span>\n  <span>#  在 \"sed\" 表达式中，你需要替换掉 \"/\" 分隔符，</span>\n  <span>#+ 因为 \"/\" 是一个会被过滤的字符。</span>\n  <span>#  如果不做替换，将会产生一个错误。（你可以尝试一下。）</span>\n<span>done</span>\n\n<span>exit</span> <span>$?</span>\n\n<span># 简单的练习：</span>\n<span># ----------</span>\n<span># 修改脚本，使其可以从命令行参数中获取 $directory 和 $fstring。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>最后一个关于 [list] 和命令代换的例子，但这个例子中的命令是一个<a href=\"http://tldp.org/LDP/abs/html/functions.html#FUNCTIONREF\" target=\"_blank\" rel=\"noopener noreferrer\">函数</a>。</p>\n<div><pre><code><span>generate_list</span> <span>(</span><span>)</span>\n<span>{</span>\n  <span>echo</span> <span>\"one two three\"</span>\n<span>}</span>\n\n<span>for</span> <span>word</span> <span>in</span> <span><span>$(</span>generate_list<span>)</span></span>  <span># \"word\" 获得函数执行的结果。</span>\n<span>do</span>\n  <span>echo</span> <span>\"<span>$word</span>\"</span>\n<span>done</span>\n\n<span># one</span>\n<span># two</span>\n<span># three</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><code>for</code> 循环的结果可以通过管道导向至一个或多个命令中。</p>\n<p>样例 11-11. 列出目录中的所有符号链接。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># symlinks.sh: 列出目录中的所有符号链接。</span>\n\n<span>directory</span><span>=</span><span>${1-`pwd`}</span>\n<span># 如果没有特别指定，缺省目录为当前工作目录。</span>\n<span># 等价于下面的代码块。</span>\n<span># ---------------------------------------------------</span>\n<span># ARGS=1                 # 只有一个命令行参数。</span>\n<span>#</span>\n<span># if [ $# -ne \"$ARGS\" ]  # 如果不是只有一个参数的情况下</span>\n<span># then</span>\n<span>#   directory=`pwd`      # 设为当前工作目录。</span>\n<span># else</span>\n<span>#   directory=$1</span>\n<span># fi</span>\n<span># ---------------------------------------------------</span>\n\n<span>echo</span> <span>\"symbolic links in directory <span title=\"\\&quot;\">\\\"</span><span>$directory</span><span title=\"\\&quot;\">\\\"</span>\"</span>\n\n<span>for</span> <span>file</span> <span>in</span> <span>\"<span><span>$(</span> <span>find</span> $directory -type <span>1</span> <span>)</span></span>\"</span>   <span># -type 1 = 符号链接</span>\n<span>do</span>\n  <span>echo</span> <span>\"<span>$file</span>\"</span>\n<span>done</span> <span>|</span> <span>sort</span>                                  <span># 否则文件顺序会是乱序。</span>\n<span>#  严格的来说这里并不需要使用循环，</span>\n<span>#+ 因为 \"find\" 命令的输出结果已经被扩展成一个单一字符串了。</span>\n<span>#  然而，为了方便大家理解，我们使用了循环的方式。</span>\n\n<span>#  Dominik 'Aeneas' Schnitzer 指出，</span>\n<span>#+ 不引用 $( find $directory -type 1 ) 的话，</span>\n<span>#  脚本将在文件名包含空格时阻塞。</span>\n\n<span>exit</span> <span>0</span>\n\n\n<span># --------------------------------------------------------</span>\n<span># Jean Helou 提供了另外一种方法：</span>\n\n<span>echo</span> <span>\"symbolic links in directory <span title=\"\\&quot;\">\\\"</span><span>$directory</span><span title=\"\\&quot;\">\\\"</span>\"</span>\n<span># 备份当前的内部字段分隔符。谨慎永远没有坏处。</span>\n<span>OLDIFS</span><span>=</span><span>$IFS</span>\n<span><span>IFS</span></span><span>=</span>:\n\n<span>for</span> <span>file</span> <span>in</span> <span><span>$(</span><span>find</span> $directory -type <span>1</span> -printf <span>\"%p<span>$IFS</span>\"</span><span>)</span></span>\n<span>do</span>     <span>#                              ^^^^^^^^^^^^^^^^</span>\n       <span>echo</span> <span>\"<span>$file</span>\"</span>\n       <span>done</span><span>|</span><span>sort</span>\n\n<span># James \"Mike\" Conley 建议将 Helou 的代码修改为：</span>\n\n<span>OLDIFS</span><span>=</span><span>$IFS</span>\n<span><span>IFS</span></span><span>=</span><span>''</span> <span># 空的内部字段分隔符意味着将不会分隔任何字符串</span>\n<span>for</span> <span>file</span> <span>in</span> <span><span>$(</span> <span>find</span> $directory -type <span>1</span> <span>)</span></span>\n<span>do</span>\n  <span>echo</span> <span>$file</span>\n  <span>done</span> <span>|</span> <span>sort</span>\n  \n<span>#  上面的代码可以在目录名包含冒号（前一个允许包含空格）</span>\n<span>#+ 的情况下仍旧正常工作。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div><p>只需要对上一个样例做一些小小的改动，就可以把在标准输出 <code>stdout</code> 中的循环 <a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#IOREDIRREF\" target=\"_blank\" rel=\"noopener noreferrer\">重定向</a> 到文件中。</p>\n<p>样例 11-12. 将目录中的所有符号链接保存到文件中。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># symlinks.sh: 列出目录中的所有符号链接。</span>\n\n<span>OUTFILE</span><span>=</span>symlinks.list\n\n<span>directory</span><span>=</span><span>${1-`pwd`}</span>\n<span># 如果没有特别指定，缺省目录为当前工作目录。</span>\n\n\n<span>echo</span> <span>\"symbolic links in directory <span title=\"\\&quot;\">\\\"</span><span>$directory</span><span title=\"\\&quot;\">\\\"</span>\"</span> <span>></span> <span>\"<span>$OUTFILE</span>\"</span>\n<span>echo</span> <span>\"---------------------------\"</span> <span>>></span> <span>\"<span>$OUTFILE</span>\"</span>\n\n<span>for</span> <span>file</span> <span>in</span> <span>\"<span><span>$(</span> <span>find</span> $directory -type <span>1</span> <span>)</span></span>\"</span>    <span># -type 1 = 符号链接</span>\n<span>do</span>\n  <span>echo</span> <span>\"<span>$file</span>\"</span>\n<span>done</span> <span>|</span> <span>sort</span> <span>>></span> <span>\"<span>$OUTFILE</span>\"</span>                     <span># 将 stdout 的循环结果</span>\n<span>#           ^^^^^^^^^^^^^                       重定向到文件。</span>\n\n<span># echo \"Output file = $OUTFILE\"</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>还有另外一种看起来非常像C语言中循环那样的语法。你需要使用到 <a href=\"http://tldp.org/LDP/abs/html/dblparens.html#DBLPARENSREF\" target=\"_blank\" rel=\"noopener noreferrer\">双圆括号</a> 语法。</p>\n<p>样例 11-13. C语言风格的循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 用多种方式数到10。</span>\n\n<span>echo</span>\n\n<span># 基础版</span>\n<span>for</span> <span>a</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span> <span>6</span> <span>7</span> <span>8</span> <span>9</span> <span>10</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$a</span> \"</span>\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span># +==========================================+</span>\n\n<span># 使用 \"seq\"</span>\n<span>for</span> <span>a</span> <span>in</span> <span><span>`</span><span>seq</span> <span>10</span><span>`</span></span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$a</span> \"</span>\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span># +==========================================+</span>\n\n<span># 使用大括号扩展语法</span>\n<span># Bash 3+ 版本有效。</span>\n<span>for</span> <span>a</span> <span>in</span> <span>{</span><span>1</span><span>..</span><span>10</span><span>}</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$a</span> \"</span>\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span># +==========================================+</span>\n\n<span># 现在用类似C语言的语法再实现一次。</span>\n\n<span>LIMIT</span><span>=</span><span>10</span>\n\n<span>for</span> <span><span>((</span>a<span>=</span><span>1</span><span>;</span> a <span>&lt;=</span> LIMIT <span>;</span> a<span>++</span><span>))</span></span>  <span># 双圆括号语法，不带 $ 的 LIMIT</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$a</span> \"</span>\n<span>done</span>                           <span># 从 ksh93 中学习到的特性。</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span># +==========================================+</span>\n\n<span># 我们现在使用C语言中的逗号运算符来使得两个变量同时增加。</span>\n\n<span>for</span> <span><span>((</span>a<span>=</span><span>1</span><span>,</span> b<span>=</span><span>1</span><span>;</span> a <span>&lt;=</span> LIMIT <span>;</span> a<span>++</span><span>,</span> b<span>++</span><span>))</span></span>\n<span>do</span>  <span># 逗号连接操作。</span>\n  <span>echo</span> -n <span>\"<span>$a</span>-<span>$b</span> \"</span>\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br></div></div><p>还可以查看 <a href=\"http://tldp.org/LDP/abs/html/arrays.html#QFUNCTION\" target=\"_blank\" rel=\"noopener noreferrer\">样例 27-16</a>，<a href=\"http://tldp.org/LDP/abs/html/arrays.html#TWODIM\" target=\"_blank\" rel=\"noopener noreferrer\">样例 27-17</a> 和 <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#COLLATZ\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-6</a>。</p>\n<p>---</p>\n<p>接下来，我们将展示在真实环境中应用的循环。</p>\n<p>样例 11-14. 在批处理模式下使用 <code>efax</code></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 传真（必须提前安装了 'efax' 模块）。</span>\n\n<span>EXPECTED_ARGS</span><span>=</span><span>2</span>\n<span>E_BADARGS</span><span>=</span><span>85</span>\n<span>MODEM_PORT</span><span>=</span><span>\"/dev/ttyS2\"</span>   <span># 你的电脑可能会不一样。</span>\n<span>#                ^^^^^       PCMCIA 调制解调卡缺省端口。</span>\n\n<span>if</span> <span>[</span> <span>$#</span> -ne <span>$EXPECTED_ARGS</span> <span>]</span>\n<span># 检查是不是传入了适当数量的命令行参数。</span>\n<span>then</span>\n   <span>echo</span> <span>\"Usage: <span><span>`</span><span>basename</span> $0<span>`</span></span> phone# text-file\"</span>\n   <span>exit</span> <span>$E_BADARGS</span>\n<span>fi</span>\n\n\n<span>if</span> <span>[</span> <span>!</span> -f <span>\"<span>$2</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"File <span>$2</span> is not a text file.\"</span>\n  <span>#     File 不是一个正常文件或者文件不存在。</span>\n  <span>exit</span> <span>$E_BADARGS</span>\n<span>fi</span>\n\n\nfax <span>make</span> <span>$2</span>              <span># 根据文本文件创建传真格式文件。</span>\n\n<span>for</span> <span>file</span> <span>in</span> <span><span>$(</span><span>ls</span> $2.0*<span>)</span></span>  <span># 连接转换后的文件。</span>\n                         <span># 在参数列表中使用通配符（文件名通配）。</span>\n<span>do</span>\n  <span>fil</span><span>=</span><span>\"<span>$fil</span> <span>$file</span>\"</span>\n<span>done</span>\n\nefax -d <span>\"<span>$MODEM_PORT</span>\"</span>  -t <span>\"T<span>$1</span>\"</span> <span>$fil</span>   <span># 最后使用 efax。</span>\n<span># 如果上面一行执行失败，尝试添加 -o1。</span>\n\n\n<span>#  S.C. 指出，上面的 for 循环可以被压缩为</span>\n<span>#     efax -d /dev/ttyS2 -o1 -t \"T$1\" $2.0*</span>\n<span>#+ 但是这并不是一个好主意。</span>\n\n<span>exit</span> <span>$?</span>   <span># efax 同时也会将诊断信息传递给标准输出。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> <a href=\"http://tldp.org/LDP/abs/html/internal.html#KEYWORDREF\" target=\"_blank\" rel=\"noopener noreferrer\">关键字</a> <code>do</code> 和 <code>done</code> 圈定了 for 循环代码块的范围。但是在一些特殊的情况下，也可以被 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#CODEBLOCKREF\" target=\"_blank\" rel=\"noopener noreferrer\">大括号</a> 取代。</p>\n</blockquote>\n<div><pre><code><span>for</span><span><span>((</span>n<span>=</span><span>1</span><span>;</span> n<span>&lt;=</span><span>10</span><span>;</span> n<span>++</span><span>))</span></span>\n<span># 没有 do！</span>\n<span>{</span>\n  <span>echo</span> -n <span>\"* <span>$n</span> *\"</span>\n<span>}</span>\n<span># 没有 done！</span>\n<span>></span>\n<span>></span>\n<span># 输出：</span>\n<span># * 1 ** 2 ** 3 ** 4 ** 5 ** 6 ** 7 ** 8 ** 9 ** 10 *</span>\n<span># 并且 echo $? 返回 0，因此 Bash 并不认为这是一个错误。</span>\n<span>></span>\n<span>></span>\n<span>echo</span>\n<span>></span>\n<span>></span>\n<span>#  但是注意在典型的 for 循环 for n in [list] ... 中，</span>\n<span>#+ 需要在结尾加一个分号。</span>\n<span>></span>\n<span>for</span> <span>n</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span>\n<span>{</span>  <span>echo</span> -n <span>\"<span>$n</span> \"</span><span>;</span> <span>}</span>\n<span>#               ^</span>\n<span>></span>\n<span>></span>\n<span># 感谢 Yongye 指出这一点。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h3 id=\"while-循环\"> while 循环</h3>\n<p><code>while</code> 循环结构会在循环顶部检测循环条件，若循环条件为真（ <a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态</a> 为0）则循环持续进行。与 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#FORLOOPREF1\" target=\"_blank\" rel=\"noopener noreferrer\"><code>for</code> 循环</a> 不同的是，<code>while</code> 循环是在不知道循环次数的情况下使用的。</p>\n<div><pre><code><span>while</span> <span>[</span> condition <span>]</span>\n<span>do</span>\n  command<span>(</span>s<span>)</span><span>..</span>.\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在 <code>while</code> 循环结构中，你不仅可以使用像 <code>if/test</code> 中那样的 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#TESTCONSTRUCTS1\" target=\"_blank\" rel=\"noopener noreferrer\">括号结构</a>，也可以使用用途更广泛的 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#DBLBRACKETS\" target=\"_blank\" rel=\"noopener noreferrer\">双括号结构</a>（<code>while [[ condition ]]</code>）。</p>\n<p>就像在 <code>for</code> 循环中那样，将 <code>do</code> 和循环条件放在同一行时需要加一个分号。</p>\n<p><code>while [ condition ] ; do</code></p>\n<p>在 <code>while</code> 循环中，括号结构 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#WHILENOBRACKETS\" target=\"_blank\" rel=\"noopener noreferrer\">并不是必须存在的</a>。比如说 <a href=\"http://tldp.org/LDP/abs/html/internal.html#GETOPTSX\" target=\"_blank\" rel=\"noopener noreferrer\"><code>getopts</code> 结构</a>。</p>\n<p>样例 11-15. 简单的 <code>while</code> 循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>var0</span><span>=</span><span>0</span>\n<span>LIMIT</span><span>=</span><span>10</span>\n\n<span>while</span> <span>[</span> <span>\"<span>$var0</span>\"</span> -lt <span>\"<span>$LIMIT</span>\"</span> <span>]</span>\n<span>#      ^                    ^</span>\n<span># 必须有空格，因为这是测试结构</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$var0</span> \"</span>        <span># -n 不会另起一行</span>\n  <span>#             ^           空格用来分开输出的数字。</span>\n  \n  <span>var0</span><span>=</span><span><span>`</span><span>expr</span> $var0 + <span>1</span><span>`</span></span>   <span># var0=$(($var0+1))  效果相同。</span>\n                          <span># var0=$((var0 + 1)) 效果相同。</span>\n                          <span># let \"var0 += 1\"    效果相同。</span>\n<span>done</span>                      <span># 还有许多其他的方法也可以达到相同的效果。</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>样例 11-16. 另一个例子</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>echo</span>\n                               <span># 等价于：</span>\n<span>while</span> <span>[</span> <span>\"<span>$var1</span>\"</span> <span>!=</span> <span>\"end\"</span> <span>]</span>     <span># while test \"$var1\" != \"end\"</span>\n<span>do</span>\n  <span>echo</span> <span>\"Input variable #1 (end to exit) \"</span>\n  <span>read</span> var1                    <span># 不是 'read $var1' （为什么？）。</span>\n  <span>echo</span> <span>\"variable #1 = <span>$var1</span>\"</span>   <span># 因为存在 \"#\"，所以需要使用引号。</span>\n  <span># 如果输入的是 \"end\"，也将会在这里输出。</span>\n  <span># 在结束本轮循环之前都不会再测试循环条件了。</span>\n  <span>echo</span>\n<span>done</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>一个 <code>while</code> 循环可以有多个测试条件，但只有最后的那一个条件决定了循环是否终止。这是一种你需要注意到的不同于其他循环的语法。</p>\n<p>样例 11-17. 多条件 <code>while</code> 循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>var1</span><span>=</span>unset\n<span>previous</span><span>=</span><span>$var1</span>\n\n<span>while</span> <span>echo</span> <span>\"previous-variable = <span>$previous</span>\"</span>\n      <span>echo</span>\n      <span>previous</span><span>=</span><span>$var1</span>\n      <span>[</span> <span>\"<span>$var1</span>\"</span> <span>!=</span> end <span>]</span> <span># 记录下 $var1 之前的值。</span>\n      <span># 在 while 循环中有4个条件，但只有最后的那个控制循环。</span>\n      <span># 最后一个条件的退出状态才会被记录。</span>\n<span>do</span>\n<span>echo</span> <span>\"Input variable #1 (end to exit) \"</span>\n  <span>read</span> var1\n  <span>echo</span> <span>\"variable #1 = <span>$var1</span>\"</span>\n<span>done</span>\n\n<span># 猜猜这是怎样实现的。</span>\n<span># 这是一个很小的技巧。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>就像 <code>for</code> 循环一样， <code>while</code> 循环也可以使用双圆括号结构写得像\u0019C语言那样（也可以查看<a href=\"http://tldp.org/LDP/abs/html/dblparens.html#CVARS\" target=\"_blank\" rel=\"noopener noreferrer\">样例 8-5</a>）。</p>\n<p>样例 11-18. C语言风格的 <code>while</code> 循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># wh-loopc.sh: 在 \"while\" 循环中计数到10。</span>\n\n<span>LIMIT</span><span>=</span><span>10</span>                 <span># 循环10次。</span>\n<span>a</span><span>=</span><span>1</span>\n\n<span>while</span> <span>[</span> <span>\"<span>$a</span>\"</span> -le <span>$LIMIT</span> <span>]</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$a</span> \"</span>\n  <span>let</span> <span>\"a+=1\"</span>\n<span>done</span>                     <span># 没什么好奇怪的吧。</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span># +==============================================+</span>\n\n<span># 现在我们用C语言风格再写一次。</span>\n\n<span><span>((</span>a <span>=</span> <span>1</span><span>))</span></span>      <span># a=1</span>\n<span># 双圆括号结构允许像C语言一样在赋值语句中使用空格。</span>\n\n<span>while</span> <span><span>((</span> a <span>&lt;=</span> LIMIT <span>))</span></span>   <span>#  双圆括号结构，</span>\n<span>do</span>                       <span>#+ 并且没有使用 \"$\"。</span>\n  <span>echo</span> -n <span>\"<span>$a</span> \"</span>\n  <span><span>((</span>a <span>+</span><span>=</span> <span>1</span><span>))</span></span>             <span># let \"a+=1\"</span>\n  <span># 是的，就是这样。</span>\n  <span># 双圆括号结构允许像C语言一样自增一个变量。</span>\n<span>done</span>\n\n<span>echo</span>\n\n<span># 这可以让C和Java程序猿感觉更加舒服。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>在测试部分，<code>while</code> 循环可以调用 <a href=\"http://tldp.org/LDP/abs/html/functions.html#FUNCTIONREF\" target=\"_blank\" rel=\"noopener noreferrer\">函数</a>。</p>\n<div><pre><code><span>t</span><span>=</span><span>0</span>\n\n<span>condition</span> <span>(</span><span>)</span>\n<span>{</span>\n  <span><span>((</span>t<span>++</span><span>))</span></span>\n  \n  <span>if</span> <span>[</span> <span>$t</span> -lt <span>5</span> <span>]</span>\n  <span>then</span>\n    <span>return</span> <span>0</span>  <span># true 真</span>\n  <span>else</span>\n    <span>return</span> <span>1</span>  <span># false 假</span>\n  <span>fi</span>\n<span>}</span>\n\n<span>while</span> condition\n<span>#     ^^^^^^^^^</span>\n<span>#     调用函数循环四次。</span>\n<span>do</span>\n  <span>echo</span> <span>\"Still going: t = <span>$t</span>\"</span>\n<span>done</span>\n\n<span># Still going: t = 1</span>\n<span># Still going: t = 2</span>\n<span># Still going: t = 3</span>\n<span># Still going: t = 4</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><blockquote>\n<p>和 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#IFGREPREF\" target=\"_blank\" rel=\"noopener noreferrer\">if 测试</a> 结构一样，<code>while</code> 循环也可以省略括号。</p>\n</blockquote>\n<div><pre><code><span>while</span> condition\n<span>do</span>\n  command<span>(</span>s<span>)</span> <span>..</span>.\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在 <code>while</code> 循环中结合 <a href=\"http://tldp.org/LDP/abs/html/internal.html#READREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>read</code></a> 命令，我们就得到了一个非常易于使用的 <a href=\"http://tldp.org/LDP/abs/html/internal.html#WHILEREADREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>while read</code></a> 结构。它可以用来读取和解析文件。</p>\n<div><pre><code><span>cat</span> <span>$filename</span> <span>|</span>    <span># 从文件获得输入。</span>\n<span>while</span> <span>read</span> line    <span># 只要还有可以读入的行，循环就继续。</span>\n<span>do</span>\n  <span>..</span>.\n<span>done</span>\n\n<span># ==================== 摘自样例脚本 \"sd.sh\" =================== #</span>\n\n  <span>while</span> <span>read</span> value   <span># 一次读入一个数据。</span>\n  <span>do</span>\n    <span>rt</span><span>=</span><span><span>$(</span><span>echo</span> <span>\"scale=<span>$SC</span>; <span>$rt</span> + <span>$value</span>\"</span> <span>|</span> <span>bc</span><span>)</span></span>\n    <span><span>((</span> ct<span>++</span> <span>))</span></span>\n  <span>done</span>\n  \n  <span>am</span><span>=</span><span><span>$(</span><span>echo</span> <span>\"scale=<span>$SC</span>; <span>$rt</span> / <span>$ct</span>\"</span> <span>|</span> <span>bc</span><span>)</span></span>\n  \n  <span>echo</span> <span>$am</span><span>;</span> <span>return</span> <span>$ct</span>   <span># 这个功能“返回”了2个值。</span>\n  <span># 注意：这个技巧在 $ct > 255 的情况下会失效。</span>\n  <span># 如果要操作更大的数字，注释掉上面的 \"return $ct\" 就可以了。</span>\n<span>}</span> <span>&lt;</span><span>\"<span>$datafile</span>\"</span>   <span># 传入数据文件。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 在 <code>while</code> 循环后面可以通过 &lt; 将标准输入 <a href=\"http://tldp.org/LDP/abs/html/redircb.html#REDIRREF\" target=\"_blank\" rel=\"noopener noreferrer\">重定位到文件</a> 中。\n<code>while</code> 循环同样可以 <a href=\"http://tldp.org/LDP/abs/html/internal.html#READPIPEREF\" target=\"_blank\" rel=\"noopener noreferrer\">通过管道</a> 传入标准输入中。</p>\n</blockquote>\n<h3 id=\"until\"> until</h3>\n<p>与 <code>while</code> 循环相反，<code>until</code> 循环测试其顶部的循环条件，直到其中的条件为真时停止。</p>\n<div><pre><code><span>until</span> <span>[</span> condition-is-true <span>]</span>\n<span>do</span>\n  commands<span>(</span>s<span>)</span><span>..</span>.\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>注意到，跟其他的一些编程语言不同，<code>until</code> 循环的测试条件在循环顶部。</p>\n<p>就像在 <code>for</code> 循环中那样，将 <code>do</code> 和循环条件放在同一行时需要加一个分号。</p>\n<p><code>until[ condition-is-true ] ; do</code></p>\n<p>样例 11-19. <code>until</code> 循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>END_CONDITION</span><span>=</span>end\n\n<span>until</span> <span>[</span> <span>\"<span>$var1</span>\"</span> <span>=</span> <span>\"<span>$END_CONDITION</span>\"</span> <span>]</span>\n<span># 在循环顶部测试条件。</span>\n<span>do</span>\n  <span>echo</span> <span>\"Input variable #1 \"</span>\n  <span>echo</span> <span>\"(<span>$END_CONDITION</span> to exit)\"</span>\n  <span>read</span> var1\n  <span>echo</span> <span>\"variable #1 = <span>$var1</span>\"</span>\n  <span>echo</span>\n<span>done</span>\n\n<span>#                ---                   #</span>\n\n<span>#  就像 \"for\" 和 \"while\" 循环一样，</span>\n<span>#+ \"until\" 循环也可以写的像C语言一样。</span>\n\n<span>LIMIT</span><span>=</span><span>10</span>\n<span>var</span><span>=</span><span>0</span>\n\n<span>until</span> <span><span>((</span> var <span>></span> LIMIT <span>))</span></span>\n<span>do</span>  <span># ^^ ^     ^     ^^   没有方括号，没有 $ 前缀。</span>\n  <span>echo</span> -n <span>\"<span>$var</span> \"</span>\n  <span><span>((</span> var<span>++</span> <span>))</span></span>\n<span>done</span>    <span># 0 1 2 3 4 5 6 7 8 9 10</span>\n\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>如何在 <code>for</code>，<code>while</code> 和 <code>until</code> 之间做出选择？我们知道在C语言中，在已知循环次数的情况下更加倾向于使用 <code>for</code> 循环。但是在Bash中情况可能更加复杂一些。Bash中的 <code>for</code> 循环相比起其他语言来说，结构更加松散，使用更加灵活。因此使用你认为最简单的就好。</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>迭代：重复执行一个或一组命令。通常情况下，会使用<code>while</code>或者<code>until</code>进行控制。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/note.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "11.2 嵌套循环",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_2_nested_loops/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_2_nested_loops/",
      "content_html": "<h1 id=\"_11-2-嵌套循环\"> 11.2 嵌套循环</h1>\n<p>嵌套循环，顾名思义就是在循环里面还有循环。外层循环会不断的触发内层循环直到外层循环结束。当然，你仍然可以使用 <code>break</code> 可以终止外层或内层的循环。</p>\n<p>样例 11-20. 嵌套循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># nested-loop.sh: 嵌套 \"for\" 循环。</span>\n\n<span>outer</span><span>=</span><span>1</span>             <span># 设置外层循环计数器。</span>\n\n<span># 外层循环。</span>\n<span>for</span> <span>a</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span> \n<span>do</span>\n  <span>echo</span> <span>\"Pass <span>$outer</span> in outer loop.\"</span>\n  <span>echo</span> <span>\"---------------------\"</span>\n  <span>inner</span><span>=</span><span>1</span>           <span># 重设内层循环计数器。</span>\n  \n  <span># =====================================</span>\n  <span># 内层循环。</span>\n  <span>for</span> <span>b</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span>\n  <span>do</span>\n    <span>echo</span> <span>\"Pass <span>$inner</span> in inner loop.\"</span>\n    <span>let</span> <span>\"inner+=1\"</span>  <span># 增加内层循环计数器。</span>\n  <span>done</span>\n  <span># 内层循环结束。</span>\n  <span># =====================================</span>\n  \n  <span>let</span> <span>\"outer+=1\"</span>    <span># 增加外层循环计数器。</span>\n  <span>echo</span>              <span># 在每次外层循环输出中加入空行。</span>\n<span>done</span>\n<span># 外层循环结束。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>查看 <a href=\"http://tldp.org/LDP/abs/html/arrays.html#BUBBLE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 27-11</a> 详细了解嵌套 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#WHILELOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\">while 循环</a>。查看 <a href=\"http://tldp.org/LDP/abs/html/arrays.html#EX68\" target=\"_blank\" rel=\"noopener noreferrer\">样例 27-13</a> 详细了解嵌套 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#UNTILLOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\">until 循环</a>。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "11.3 循环控制",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_3_loop_control/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_3_loop_control/",
      "content_html": "<h1 id=\"_11-3-循环控制\"> 11.3 循环控制</h1>\n<blockquote>\n<p>Tournez cent tours, tournez mille tours,</p>\n<p>Tournez souvent et tournez toujours . . .</p>\n<p>——保尔·魏尔伦，《木马》</p>\n</blockquote>\n<p>本节介绍两个会影响循环行为的命令。</p>\n<h3 id=\"break-continue\"> break, continue</h3>\n<p><code>break</code> 和 <code>continue</code> 命令<sup></sup>的作用和在其他编程语言中的作用一样。<code>break</code> 用来中止（跳出）循环，而 <code>continue</code> 则是略过未执行的循环部分，直接进行下一次循环。</p>\n<p>样例 11-21. 循环中 <code>break</code> 与 <code>continue</code> 的作用</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>LIMIT</span><span>=</span><span>19</span>  <span># 循环上界</span>\n\n<span>echo</span>\n<span>echo</span> <span>\"Printing Numbers 1 through 20 (but not 3 and 11).\"</span>\n\n<span>a</span><span>=</span><span>0</span>\n\n<span>while</span> <span>[</span> <span>$a</span> -le <span>\"<span>$LIMIT</span>\"</span> <span>]</span>\n<span>do</span>\n <span>a</span><span>=</span><span><span>$((</span>$a<span>+</span><span>1</span><span>))</span></span>\n \n <span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -eq <span>3</span> <span>]</span> <span>||</span> <span>[</span> <span>\"<span>$a</span>\"</span> -eq <span>11</span> <span>]</span>  <span># 除了 3 和 11。</span>\n <span>then</span>\n   <span>continue</span>      <span># 略过本次循环的剩余部分。</span>\n <span>fi</span>\n \n <span>echo</span> -n <span>\"<span>$a</span> \"</span>   <span># 当 a 等于 3 和 11 时，将不会执行这条语句。</span>\n<span>done</span>\n\n<span># 思考：</span>\n<span># 为什么循环不会输出到20？</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>echo</span> Printing Numbers <span>1</span> through <span>20</span>, but something happens after <span>2</span>.\n\n<span>##################################################################</span>\n\n<span># 用 'break' 代替了 'continue'。</span>\n\n<span>a</span><span>=</span><span>0</span>\n\n<span>while</span> <span>[</span> <span>\"<span>$a</span>\"</span> -le <span>\"<span>$LIMIT</span>\"</span> <span>]</span>\n<span>do</span>\n <span>a</span><span>=</span><span><span>$((</span>$a<span>+</span><span>1</span><span>))</span></span>\n \n <span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -gt <span>2</span> <span>]</span>\n <span>then</span>\n   <span>break</span>  <span># 中止循环。</span>\n <span>fi</span>\n \n <span>echo</span> -n <span>\"<span>$a</span>\"</span>\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span><span>;</span> <span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><p><code>break</code> 命令接受一个参数。普通的 <code>break</code> 命令仅仅跳出其所在的那层循环，而 <code>break N</code> 命令则可以跳出其上 N 层的循环。</p>\n<p>样例 11-22. 跳出多层循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># break-levels.sh: 跳出循环.</span>\n\n<span># \"break N\" 跳出 N 层循环。</span>\n\n<span>for</span> <span>outerloop</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"Group <span>$outerloop</span>:   \"</span>\n\n  <span># ------------------------------------------</span>\n  <span>for</span> <span>innerloop</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span>\n  <span>do</span>\n    <span>echo</span> -n <span>\"<span>$innerloop</span> \"</span>\n    \n    <span>if</span> <span>[</span> <span>\"<span>$innerloop</span>\"</span> -eq <span>3</span> <span>]</span>\n    <span>then</span>\n      <span>break</span>  <span># 尝试一下 break 2 看看会发生什么。</span>\n             <span># （它同时中止了内层和外层循环。）</span>\n    <span>fi</span>\n  <span>done</span>\n  <span># ------------------------------------------</span>\n\n  <span>echo</span>\n<span>done</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>与 <code>break</code> 类似，<code>continue</code> 也接受一个参数。普通的 <code>continue</code> 命令仅仅影响其所在的那层循环，而 <code>continue N</code> 命令则可以影响其上 N 层的循环。</p>\n<p>样例 11-23. <code>continue</code> 影响外层循环</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># \"continue N\" 命令可以影响其上 N 层循环。</span>\n\n<span>for</span> <span>outer</span> <span>in</span> I II III IV V           <span># 外层循环</span>\n<span>do</span>\n  <span>echo</span><span>;</span> <span>echo</span> -n <span>\"Group <span>$outer</span>: \"</span>\n  \n  <span># --------------------------------------------------------------------</span>\n  <span>for</span> <span>inner</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span> <span>6</span> <span>7</span> <span>8</span> <span>9</span> <span>10</span>  <span># 内层循环</span>\n  <span>do</span>\n  \n    <span>if</span> <span>[</span><span>[</span> <span>\"<span>$inner</span>\"</span> -eq <span>7</span> <span>&amp;&amp;</span> <span>\"<span>$outer</span>\"</span> <span>=</span> <span>\"III\"</span> <span>]</span><span>]</span>\n    <span>then</span>\n      <span>continue</span> <span>2</span>  <span># 影响两层循环，包括“外层循环”。</span>\n                  <span># 将其替换为普通的 \"continue\"，那么只会影响内层循环。</span>\n    <span>fi</span>\n    \n    <span>echo</span> -n <span>\"<span>$inner</span> \"</span>  <span># 7 8 9 10 将不会出现在 \"Group III.\"中。</span>\n  <span>done</span>\n  <span># --------------------------------------------------------------------</span>\n\n<span>done</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span># 思考：</span>\n<span># 想一个 \"continue N\" 在脚本中的实际应用情况。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>样例 11-24. 真实环境中的 <code>continue N</code></p>\n<div><pre><code><span># Albert Reiner 举出了一个如何使用 \"continue N\" 的例子：</span>\n<span># ---------------------------------------------------</span>\n\n<span>#  如果我有许多任务需要运行，并且运行所需要的数据都以文件的形</span>\n<span>#+ 式存在文件夹中。现在有多台设备可以访问这个文件夹，我想将任</span>\n<span>#+ 务分配给这些不同的设备来完成。</span>\n<span>#  那么我通常会在每台设备上执行下面的代码：</span>\n\n<span>while</span> true:\n<span>do</span>\n  <span>for</span> <span>n</span> <span>in</span> .iso.*\n  <span>do</span>\n    <span>[</span> <span>\"<span>$n</span>\"</span> <span>=</span> <span>\".iso.opts\"</span> <span>]</span> <span>&amp;&amp;</span> <span>continue</span>\n    <span>beta</span><span>=</span><span>${n<span>#</span>.iso.}</span>\n    <span>[</span> -r .Iso.<span>$beta</span> <span>]</span> <span>&amp;&amp;</span> <span>continue</span>\n    <span>[</span> -r .lock.<span>$beta</span> <span>]</span> <span>&amp;&amp;</span> <span>sleep</span> <span>10</span> <span>&amp;&amp;</span> <span>continue</span>\n    lockfile -r0 .lock.<span>$beta</span> <span>||</span> <span>continue</span>\n    <span>echo</span> -n <span>\"<span>$beta</span>: \"</span> <span><span>`</span><span>date</span><span>`</span></span>\n    run-isotherm <span>$beta</span>\n    <span>date</span>\n    <span>ls</span> -alF .Iso.<span>$beta</span>\n    <span>[</span> -r .Iso.<span>$beta</span> <span>]</span> <span>&amp;&amp;</span> <span>rm</span> -rf .lock.<span>$beta</span>\n    <span>continue</span> <span>2</span>\n  <span>done</span>\n  <span>break</span>\n<span>done</span>\n\n<span>exit</span> <span>0</span>\n\n<span># 这个脚本中出现的 sleep N 只针对这个脚本，通常的形式是：</span>\n\n<span>while</span> <span>true</span>\n<span>do</span>\n  <span>for</span> <span>job</span> <span>in</span> <span>{</span>pattern<span>}</span>\n  <span>do</span>\n    <span>{</span>job already <span>done</span> or running<span>}</span> <span>&amp;&amp;</span> <span>continue</span>\n    <span>{</span>mark job as running, <span>do</span> job, mark job as done<span>}</span>\n    <span>continue</span> <span>2</span>\n  <span>done</span>\n  <span>break</span>        <span># 或者使用类似 `sleep 600` 这样的语句来防止脚本结束。</span>\n<span>done</span>\n\n<span>#  这样做可以保证脚本只会在没有任务时（包括在运行过程中添加的任务）</span>\n<span>#+ 才会停止。合理使用文件锁保证多台设备可以无重复的并行执行任务（这</span>\n<span>#+ 在我的设备上通常会消耗好几个小时，所以我想避免重复计算）。并且，</span>\n<span>#+ 因为每次总是从头开始搜索文件，因此可以通过文件名决定执行的先后</span>\n<span>#+ 顺序。当然，你可以不使用 'continue 2' 来完成这些，但是你必须</span>\n<span>#+ 添加代码去检测某项任务是否完成（以此判断是否可以执行下一项任务或</span>\n<span>#+ 终止、休眠一段时间再执行下一项任务）。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> <code>continue N</code> 结构不易理解并且可能在一些情况下有歧义，因此不建议使用。</p>\n</blockquote>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>这两个命令是 <a href=\"http://tldp.org/LDP/abs/html/internal.html#BUILTINREF\" target=\"_blank\" rel=\"noopener noreferrer\">内建命令</a>，而另外的循环命令，如 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#WHILELOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>while</code></a> 和 <a href=\"http://tldp.org/LDP/abs/html/testbranch.html#CASEESAC1\" target=\"_blank\" rel=\"noopener noreferrer\"><code>case</code></a> 则是 <a href=\"http://tldp.org/LDP/abs/html/internal.html#KEYWORDREF\" target=\"_blank\" rel=\"noopener noreferrer\">关键词</a>。 </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "11.4 测试与分支",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_4_testing_and_branching/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_4_testing_and_branching/",
      "content_html": "<h1 id=\"_11-4-测试与分支\"> 11.4 测试与分支</h1>\n<p><code>case</code> 和 <code>select</code> 结构并不属于循环结构，因为它们并没有反复执行代码块。但是和循环结构相似的是，它们会根据代码块顶部或尾部的条件控制程序流。</p>\n<p>下面介绍两种在代码块中控制程序流的方法：</p>\n<h3 id=\"case-in-esac\"> <code>case (in)</code> / <code>esac</code></h3>\n<p>在 shell 脚本中，<code>case</code> 模拟了 C/C++ 语言中的 <code>switch</code>，可以根据条件跳转到其中一个分支。其相当于简写版的 <code>if/then/else</code> 语句。很适合用来创建菜单选项哟！</p>\n<div><pre><code><span>case</span> <span>\"<span>$variable</span>\"</span> <span>in</span>\n  <span>\"<span>$condition1</span>\"</span> <span>)</span>\n    command<span>..</span>.\n  <span>;</span><span>;</span>\n  <span>\"<span>$condition2</span>\"</span> <span>)</span>\n    command<span>..</span>.\n  <span>;</span><span>;</span>\n<span>esac</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"></p>\n<ul>\n<li>\n<p>对变量进行引用不是必须的，因为在这里不会进行字符分割。</p>\n</li>\n<li>\n<p>条件测试语句必须以右括号 ) 结束。<sup></sup></p>\n</li>\n<li>\n<p>每一段代码块都必须以双分号 ;; 结束。</p>\n</li>\n<li>\n<p>如果测试条件为真，其对应的代码块将被执行，而后整个 <code>case</code> 代码段结束执行。</p>\n</li>\n<li>\n<p><code>case</code> 代码段必须以 <code>esac</code> 结束（倒着拼写case）。</p>\n</li>\n</ul>\n</blockquote>\n<p>样例 11-25. 如何使用 <code>case</code></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 测试字符的种类。</span>\n\n<span>echo</span><span>;</span> <span>echo</span> <span>\"Hit a key, then hit return.\"</span>\n<span>read</span> Keypress\n\n<span>case</span> <span>\"<span>$Keypress</span>\"</span> <span>in</span>\n  <span>[</span><span>[</span>:lower:<span>]</span><span>]</span>   <span>)</span> <span>echo</span> <span>\"Lowercase letter\"</span><span>;</span><span>;</span>\n  <span>[</span><span>[</span>:upper:<span>]</span><span>]</span>   <span>)</span> <span>echo</span> <span>\"Uppercase letter\"</span><span>;</span><span>;</span>\n  <span>[</span><span>0</span>-9<span>]</span>         <span>)</span> <span>echo</span> <span>\"Digit\"</span><span>;</span><span>;</span>\n  *             <span>)</span> <span>echo</span> <span>\"Punctuation, whitespace, or other\"</span><span>;</span><span>;</span>\n<span>esac</span>      <span>#  字符范围可以用[方括号]表示，也可以用 POSIX 形式的[[双方括号]]表示。</span>\n\n<span># 在这个例子的第一个版本中，用来测试是小写还是大写字符使用的是 [a-z] 和 [A-Z]。</span>\n<span># 这在一些特定的语言环境和 Linux 发行版中不起效。</span>\n<span># POSIX 形式具有更好的兼容性。</span>\n<span># 感谢 Frank Wang 指出这一点。</span>\n\n<span># 练习：</span>\n<span># -----</span>\n<span># 这个脚本接受一个单字符然后结束。</span>\n<span># 修改脚本，使得其可以循环接受输入，并且检测键入的每一个字符，直到键入 \"X\" 为止。</span>\n<span># 提示：将所有东西包在 \"while\" 中。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>样例 11-26. 使用 <code>case</code> 创建菜单</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span># 简易的通讯录数据库</span>\n\n<span>clear</span> <span># 清屏。</span>\n\n<span>echo</span> <span>\"          Contact List\"</span>\n<span>echo</span> <span>\"          ------- ----\"</span>\n<span>echo</span> <span>\"Choose one of the following persons:\"</span> \n<span>echo</span>\n<span>echo</span> <span>\"[E]vans, Roland\"</span>\n<span>echo</span> <span>\"[J]ones, Mildred\"</span>\n<span>echo</span> <span>\"[S]mith, Julie\"</span>\n<span>echo</span> <span>\"[Z]ane, Morris\"</span>\n<span>echo</span>\n\n<span>read</span> person\n\n<span>case</span> <span>\"<span>$person</span>\"</span> <span>in</span>\n<span># 注意变量是被引用的。</span>\n\n  <span>\"E\"</span> <span>|</span> <span>\"e\"</span> <span>)</span>\n  <span># 同时接受大小写的输入。</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"Roland Evans\"</span>\n  <span>echo</span> <span>\"4321 Flash Dr.\"</span>\n  <span>echo</span> <span>\"Hardscrabble, CO 80753\"</span>\n  <span>echo</span> <span>\"(303) 734-9874\"</span>\n  <span>echo</span> <span>\"(303) 734-9892 fax\"</span>\n  <span>echo</span> <span>\"revans@zzy.net\"</span>\n  <span>echo</span> <span>\"Business partner &amp; old friend\"</span>\n  <span>;</span><span>;</span>\n  <span># 注意用双分号结束这一个选项。</span>\n\n  <span>\"J\"</span> <span>|</span> <span>\"j\"</span> <span>)</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"Mildred Jones\"</span>\n  <span>echo</span> <span>\"249 E. 7th St., Apt. 19\"</span>\n  <span>echo</span> <span>\"New York, NY 10009\"</span>\n  <span>echo</span> <span>\"(212) 533-2814\"</span>\n  <span>echo</span> <span>\"(212) 533-9972 fax\"</span>\n  <span>echo</span> <span>\"milliej@loisaida.com\"</span>\n  <span>echo</span> <span>\"Ex-girlfriend\"</span>\n  <span>echo</span> <span>\"Birthday: Feb. 11\"</span>\n  <span>;</span><span>;</span>\n  \n  <span># Smith 和 Zane 的信息稍后添加。</span>\n\n  *         <span>)</span>\n  <span># 缺省设置。</span>\n  <span># 空输入（直接键入回车）也是执行这一部分。</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"Not yet in database.\"</span>\n  <span>;</span><span>;</span>\n  \n<span>esac</span>\n\n<span>echo</span>\n\n<span># 练习：</span>\n<span># -----</span>\n<span># 修改脚本，使得其可以循环接受多次输入而不是只显示一个地址后终止脚本。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br></div></div><p>你可以用 <code>case</code> 来检测命令行参数。</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>case</span> <span>\"<span>$1</span>\"</span> <span>in</span>\n  <span>\"\"</span><span>)</span> <span>echo</span> <span>\"Usage: <span>${0<span>##</span>*<span>/</span>}</span> &lt;filename>\"</span><span>;</span> <span>exit</span> <span>$E_PARAM</span><span>;</span><span>;</span>\n                      <span># 没有命令行参数，或者第一个参数为空。</span>\n                      <span># 注意 ${0##*/} 是参数替换 ${var##pattern} 的一种形式。</span>\n                      <span># 最后的结果是 $0.</span>\n  \n  -*<span>)</span> <span>FILENAME</span><span>=</span>./<span>$1</span><span>;</span><span>;</span> <span>#  如果传入的参数以短横线开头，那么将其替换为 ./$1</span>\n                      <span>#+ 以避免后续的命令将其解释为一个选项。</span>\n  \n  * <span>)</span> <span>FILENAME</span><span>=</span><span>$1</span><span>;</span><span>;</span>   <span># 否则赋值为 $1。</span>\n<span>esac</span>                  \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>下面是一个更加直观的处理命令行参数的例子：</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>while</span> <span>[</span> <span>$#</span> -gt <span>0</span> <span>]</span><span>;</span> <span>do</span>    <span># 遍历完所有参数</span>\n  <span>case</span> <span>\"<span>$1</span>\"</span> <span>in</span>\n    -d<span>|</span>--debug<span>)</span>\n              <span># 检测是否是 \"-d\" 或者 \"--debug\"。</span>\n              <span>DEBUG</span><span>=</span><span>1</span>\n              <span>;</span><span>;</span>\n    -c<span>|</span>--conf<span>)</span>\n              <span>CONFFILE</span><span>=</span><span>\"<span>$2</span>\"</span>\n              <span>shift</span>\n              <span>if</span> <span>[</span> <span>!</span> -f <span>$CONFFILE</span> <span>]</span><span>;</span> <span>then</span>\n                <span>echo</span> <span>\"Error: Supplied file doesn't exist!\"</span>\n                <span>exit</span> <span>$E_CONFFILE</span>     <span># 找不到文件。</span>\n              <span>fi</span>\n              <span>;</span><span>;</span>\n  <span>esac</span>\n  <span>shift</span>       <span># 检测下一个参数</span>\n<span>done</span>\n\n<span># 摘自 Stefano Falsetto 的 \"Log2Rot\" 脚本中 \"rottlog\" 包的一部分。</span>\n<span># 已授权使用。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>样例 11-27. 使用命令替换生成 <code>case</code> 变量</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># case-cmd.sh: 使用命令替换生成 \"case\" 变量。</span>\n\n<span>case</span> <span><span>$(</span> arch <span>)</span></span> <span>in</span>   <span># $( arch ) 返回设备架构。</span>\n                    <span># 等价于 'uname -m\"。</span>\n  i386 <span>)</span> <span>echo</span> <span>\"80386-based machine\"</span><span>;</span><span>;</span>\n  i486 <span>)</span> <span>echo</span> <span>\"80486-based machine\"</span><span>;</span><span>;</span>\n  i586 <span>)</span> <span>echo</span> <span>\"Pentium-based machine\"</span><span>;</span><span>;</span>\n  i686 <span>)</span> <span>echo</span> <span>\"Pentium2+-based machine\"</span><span>;</span><span>;</span>\n  *    <span>)</span> <span>echo</span> <span>\"Other type of machine\"</span><span>;</span><span>;</span>\n<span>esac</span>\n\n<span>exit</span> <span>0</span>  \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><code>case</code> 还可以用来做字符串模式匹配。</p>\n<p>样例 11-28. 简单的字符串匹配</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># match-string.sh: 使用 'case' 结构进行简单的字符串匹配。</span>\n\n<span>match_string</span> <span>(</span><span>)</span>\n<span>{</span> <span># 字符串精确匹配。</span>\n  <span>MATCH</span><span>=</span><span>0</span>\n  <span>E_NOMATCH</span><span>=</span><span>90</span>\n  <span>PARAMS</span><span>=</span><span>2</span>     <span># 需要2个参数。</span>\n  <span>E_BAD_PARAMS</span><span>=</span><span>91</span>\n  \n  <span>[</span> <span>$#</span> -eq <span>$PARAMS</span> <span>]</span> <span>||</span> <span>return</span> <span>$E_BAD_PARAMS</span>\n  \n  <span>case</span> <span>\"<span>$1</span>\"</span> <span>in</span>\n    <span>\"<span>$2</span>\"</span><span>)</span> <span>return</span> <span>$MATCH</span><span>;</span><span>;</span>\n    *   <span>)</span> <span>return</span> <span>$E_NOMATCH</span><span>;</span><span>;</span>\n  <span>esac</span>\n  \n<span>}</span>\n\n\n<span>a</span><span>=</span>one\n<span>b</span><span>=</span>two\n<span>c</span><span>=</span>three\n<span>d</span><span>=</span>two\n\nmatch_string <span>$a</span>     <span># 参数个数不够</span>\n<span>echo</span> <span>$?</span>             <span># 91</span>\n\nmatch_string <span>$a</span> <span>$b</span>  <span># 匹配不到</span>\n<span>echo</span> <span>$?</span>             <span># 90</span>\n\nmatch_string <span>$a</span> <span>$d</span>  <span># 匹配成功</span>\n<span>echo</span> <span>$?</span>             <span># 0</span>\n\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>样例 11-29. 检查输入</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># isaplpha.sh: 使用 \"case\" 结构检查输入。</span>\n\n<span>SUCCESS</span><span>=</span><span>0</span>\n<span>FAILURE</span><span>=</span><span>1</span>   <span>#  以前是FAILURE=-1,</span>\n            <span>#+ 但现在 Bash 不允许返回负值。</span>\n\nisalpha <span>(</span><span>)</span>  <span># 测试字符串的第一个字符是否是字母。</span>\n<span>{</span>\n<span>if</span> <span>[</span> -z <span>\"<span>$1</span>\"</span> <span>]</span>                <span># 检测是否传入参数。</span>\n<span>then</span>\n  <span>return</span> <span>$FAILURE</span>\n<span>fi</span>\n\n<span>case</span> <span>\"<span>$1</span>\"</span> <span>in</span>\n  <span>[</span>a-zA-Z<span>]</span>*<span>)</span> <span>return</span> <span>$SUCCESS</span><span>;</span><span>;</span>  <span># 是否以字母形式开始？</span>\n  *        <span>)</span> <span>return</span> <span>$FAILURE</span><span>;</span><span>;</span>\n<span>esac</span>\n<span>}</span>             <span># 可以与 C 语言中的函数 \"isalpha ()\" 作比较。</span>\n\n\nisalpha2 <span>(</span><span>)</span>   <span># 测试整个字符串是否都是字母。</span>\n<span>{</span>\n  <span>[</span> <span>$#</span> -eq <span>1</span> <span>]</span> <span>||</span> <span>return</span> <span>$FAILURE</span>\n  \n  <span>case</span> <span>$1</span> <span>in</span>\n  *<span>[</span><span>!</span>a-zA-Z<span>]</span>*<span>|</span><span>\"\"</span><span>)</span> <span>return</span> <span>$FAILURE</span><span>;</span><span>;</span>\n               *<span>)</span> <span>return</span> <span>$SUCCESS</span><span>;</span><span>;</span>\n  <span>esac</span>\n<span>}</span>\n\nisdigit <span>(</span><span>)</span>    <span># 测试整个字符串是否都是数字。</span>\n<span>{</span>             <span># 换句话说，也就是测试是否是一个整型变量。</span>\n  <span>[</span> <span>$#</span> -eq <span>1</span> <span>]</span> <span>||</span> <span>return</span> <span>$FAILURE</span>\n  \n  <span>case</span> <span>$1</span> <span>in</span>\n    *<span>[</span><span>!</span><span>0</span>-9<span>]</span>*<span>|</span><span>\"\"</span><span>)</span> <span>return</span> <span>$FAILURE</span><span>;</span><span>;</span>\n              *<span>)</span> <span>return</span> <span>$SUCCESS</span><span>;</span><span>;</span>\n  <span>esac</span>\n<span>}</span>\n\n\n\ncheck_var <span>(</span><span>)</span>  <span># 包装后的 isalpha ()。</span>\n<span>{</span>\n<span>if</span> isalpha <span>\"<span>$@</span>\"</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span><span>$*</span><span title=\"\\&quot;\">\\\"</span> begins with an alpha character.\"</span>\n  <span>if</span> isalpha2 <span>\"<span>$@</span>\"</span>\n  <span>then</span>        <span># 其实没必要检查第一个字符是不是字母。</span>\n    <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span><span>$*</span><span title=\"\\&quot;\">\\\"</span> contains only alpha characters.\"</span>\n  <span>else</span>\n    <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span><span>$*</span><span title=\"\\&quot;\">\\\"</span> contains at least one non-alpha character.\"</span>\n  <span>fi</span>\n<span>else</span>\n  <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span><span>$*</span><span title=\"\\&quot;\">\\\"</span> begins with a non-alpha character.\"</span>\n              <span># 如果没有传入参数同样同样返回“存在非字母”。</span>\n<span>fi</span>\n  \n<span>echo</span>\n  \n<span>}</span>\n\ndigit_check <span>(</span><span>)</span>  <span># 包装后的 isdigit ()。</span>\n<span>{</span>\n<span>if</span> isdigit <span>\"<span>$@</span>\"</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span><span>$*</span><span title=\"\\&quot;\">\\\"</span> contains only digits [0 - 9].\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"<span title=\"\\&quot;\">\\\"</span><span>$*</span><span title=\"\\&quot;\">\\\"</span> has at least one non-digit character.\"</span>\n<span>fi</span>\n  \n<span>echo</span>\n  \n<span>}</span>\n\n\n<span>a</span><span>=</span>23skidoo\n<span>b</span><span>=</span>H3llo\n<span>c</span><span>=</span>-What?\n<span>d</span><span>=</span>What?\n<span>e</span><span>=</span><span><span>$(</span><span>echo</span> $b<span>)</span></span>   <span># 命令替换。</span>\n<span>f</span><span>=</span>AbcDef\n<span>g</span><span>=</span><span>27234</span>\n<span>h</span><span>=</span>27a34\n<span>i</span><span>=</span><span>27.34</span>\n\ncheck_var <span>$a</span>\ncheck_var <span>$b</span>\ncheck_var <span>$c</span>\ncheck_var <span>$d</span>\ncheck_var <span>$e</span>\ncheck_var <span>$f</span>\ncheck_var     <span># 如果不传入参数会发送什么？</span>\n<span>#</span>\ndigit_check <span>$g</span>\ndigit_check <span>$h</span>\ndigit_check <span>$i</span>\n\n\n<span>exit</span> <span>0</span>        <span># S.C. 改进了本脚本。</span>\n\n<span># 练习：</span>\n<span># -----</span>\n<span># 写一个函数 'isfloat ()' 来检测输入值是否是浮点数。</span>\n<span># 提示：可以参考函数 'isdigit ()'，在其中加入检测合法的小数点即可。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br></div></div><h3 id=\"select\"> <code>select</code></h3>\n<p><code>select</code> 结构是学习自 Korn Shell。其同样可以用来构建菜单。</p>\n<div><pre><code><span>select</span> variable <span>[</span>in list<span>]</span>\n<span>do</span>\n command<span>..</span>.\n <span>break</span>\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>而效果则是终端会提示用户输入列表中的一个选项。注意，<code>select</code> 默认使用提示字串3（Prompt String 3，<code>$PS3</code>, 即#?），但同样可以被修改。</p>\n<p>样例 11-30. 使用 <code>select</code> 创建菜单</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span><span>PS3</span></span><span>=</span><span>'Choose your favorite vegetable: '</span> <span># 设置提示字串。</span>\n                                       <span># 否则默认为 #?。</span>\n\n<span>echo</span>\n\n<span>select</span> <span>vegetable</span> <span>in</span> <span>\"beans\"</span> <span>\"carrots\"</span> <span>\"potatoes\"</span> <span>\"onions\"</span> <span>\"rutabagas\"</span>\n<span>do</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"Your favorite veggie is <span>$vegetable</span>.\"</span>\n  <span>echo</span> <span>\"Yuck!\"</span>\n  <span>echo</span>\n  <span>break</span>  <span># 如果没有 'break' 会发生什么？</span>\n<span>done</span>\n\n<span>exit</span>\n\n<span># 练习:</span>\n<span># -----</span>\n<span># 修改脚本，使得其可以接受其他输入而不是 \"select\" 语句中所指定的。</span>\n<span># 例如，如果用户输入 \"peas,\"，那么脚本会通知用户 \"Sorry. That is not on the menu.\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>如果 <em>in list</em> 被省略，那么 <code>select</code> 将会使用传入脚本的命令行参数（<code>$@</code>）或者传入函数的参数作为 <em>list</em>。</p>\n<p>可以与 <code>for variable [in list]</code> 中 <em>in list</em> 被省略的情况做比较。</p>\n<p>样例 11-31. 在函数中使用 <code>select</code> 创建菜单</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span><span>PS3</span></span><span>=</span><span>'Choose your favorite vegetable: '</span>\n\n<span>echo</span>\n\n<span>choice_of</span><span>(</span><span>)</span>\n<span>{</span>\n<span>select</span> vegetable\n<span># [in list] 被省略，因此 'select' 将会使用传入函数的参数作为 list。</span>\n<span>do</span>\n  <span>echo</span>\n  <span>echo</span> <span>\"Your favorite veggie is <span>$vegetable</span>.\"</span>\n  <span>echo</span> <span>\"Yuck!\"</span>\n  <span>echo</span>\n  <span>break</span>\n<span>done</span>\n<span>}</span>\n\nchoice_of beans rice carrorts radishes rutabaga spinach\n<span>#         $1    $2   $3      $4       $5       $6</span>\n<span>#         传入了函数 choice_of()</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>还可以参照 <a href=\"http://tldp.org/LDP/abs/html/bashver2.html#RESISTOR\" target=\"_blank\" rel=\"noopener noreferrer\">样例37-3</a>。</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>在写匹配行的时候，可以在左边加上左括号 (，使整个结构看起来更加优雅。<pre>case $( arch ) in   # $( arch ) 返回设备架构。<br>  ( i386 ) echo &quot;80386-based machine&quot;;;<br># ^      ^<br>  ( i486 ) echo &quot;80486-based machine&quot;;;<br>  ( i586 ) echo &quot;Pentium-based machine&quot;;;<br>  ( i686 ) echo &quot;Pentium2+-based machine&quot;;;<br>  (    * ) echo &quot;Other type of machine&quot;;;<br>esac</pre> </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/note.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第十一章 循环与分支",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_loops_and_branches/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/11_loops_and_branches/",
      "content_html": "<h1 id=\"第十一章-循环与分支\"> 第十一章 循环与分支</h1>\n<blockquote>\n<p>奥赛罗夫人，您为什么把这句话说了又说呢？</p>\n<p>—— 《奥赛罗》，莎士比亚</p>\n</blockquote>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./11_1_loops.html\">11.1 循环</a></li>\n<li><a href=\"./11_2_nested_loops.html\">11.2 嵌套循环</a></li>\n<li><a href=\"./11_3_loop_control.html\">11.3 循环控制</a></li>\n<li><a href=\"./11_4_testing_and_branching.html\">11.4 测试与分支</a></li>\n</ul>\n<p>对代码块的处理是结构化和构建 shell 脚本的关键。循环与分支结构恰好提供了这样一种对代码块处理的工具。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第十二章 命令替换",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/12_command_substitution/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/12_command_substitution/",
      "content_html": "<h1 id=\"第十二章-命令替换\"> 第十二章 命令替换</h1>\n<p>命令替换重新指定一个<sup></sup>或多个命令的输出。其实就是将命令的输出导到另外一个地方<sup></sup>。</p>\n<p>命令替换的通常形式是（<code>`...`</code>），即用反引号引用命令。</p>\n<div><pre><code><span>script_name</span><span>=</span><span><span>`</span><span>basename</span> $0<span>`</span></span>\n<span>echo</span> <span>\"The name of this script is <span>$scirpt_name</span>.\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>命令的输出可以作为另一个命令的参数，也可以赋值给一个变量。甚至在 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#FORLOOPREF1\" target=\"_blank\" rel=\"noopener noreferrer\"><code>for</code></a> 循环中可以用输出产生参数表。</p>\n<div><pre><code><span>rm</span> <span><span>`</span><span>cat</span> filename<span>`</span></span>   <span># \"filename\" 中包含了一系列需要被删除的文件名。</span>\n<span>#</span>\n<span># S.C. 指出这样写可能会导致出现 \"arg list too long\" 的错误。</span>\n<span># 更好的写法应该是 xargs rm -- &lt; filename</span>\n<span># （ -- 可以在 \"filename\" 文件名以 \"-\" 为开头时仍旧正常执行 ）</span>\n\n<span>textfile_listing</span><span>=</span><span><span>`</span><span>ls</span> *.txt<span>`</span></span>\n<span># 变量中包含了当前工作目录下所有的名为 *.txt 的文件。</span>\n<span>echo</span> <span>$textfile_listing</span>\n\n<span>textfile_listing2</span><span>=</span><span><span>$(</span><span>ls</span> *.txt<span>)</span></span>   <span># 命令替换的另一种形式。</span>\n<span>echo</span> <span>$textfile_listing2</span>\n<span># 结果相同。</span>\n\n<span># 这样将一系列文件名赋值给一个单一字符串可能会出现换行。</span>\n<span>#</span>\n<span># 而更加安全的方式是将这一系列文件存入数组。</span>\n<span>#      shopt -s nullglob    # 设置后，如果没有匹配到文件，那么变量会被赋值为空。</span>\n<span>#      textfile_listing=( *.txt )</span>\n<span>#</span>\n<span># 感谢 S.C.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 命令替换本质上是调用了一个 <a href=\"http://tldp.org/LDP/abs/html/subshells.html#SUBSHELLSREF\" target=\"_blank\" rel=\"noopener noreferrer\">子进程</a> 来执行。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 命令替换有可能会出现 <a href=\"http://tldp.org/LDP/abs/html/quotingvar.html#WSPLITREF\" target=\"_blank\" rel=\"noopener noreferrer\">字符分割</a> 的情况。</p>\n</blockquote>\n<blockquote>\n<div><pre><code>COMMAND <span><span>`</span><span>echo</span> a b<span>`</span></span>     <span># 2个参数：a和b</span>\n\nCOMMAND <span>\"<span><span>`</span><span>echo</span> a b<span>`</span></span>\"</span>   <span># 1个参数：\"a b\"</span>\n\nCOMMAND <span><span>`</span><span>echo</span><span>`</span></span>         <span># 没有参数</span>\n\nCOMMAND <span>\"<span><span>`</span><span>echo</span><span>`</span></span>\"</span>       <span># 一个空参数</span>\n\n\n<span># 感谢 S.C.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></blockquote>\n<blockquote>\n<p>但即使不存在字符分割的情况，使用命令替换也会出现丢失尾部换行符的情况。</p>\n</blockquote>\n<blockquote>\n<div><pre><code><span># cd \"`pwd`\"  # 你是不是认为这条语句在任何情况下都不会出现错误？</span>\n<span># 但事实却不是这样的。</span>\n\n<span>mkdir</span> <span>'dir with trailing newline\n'</span>\n\n<span>cd</span> <span>'dir with trailing newline\n'</span>\n\n<span>cd</span> <span>\"<span><span>`</span><span>pwd</span><span>`</span></span>\"</span>  <span># Bash 会出现如下错误提示：</span>\n<span># bash: cd: /tmp/file with trailing newline: No such file or directory</span>\n\n<span>cd</span> <span>\"<span>$PWD</span>\"</span>   <span># 这样写是对的。</span>\n\n\n\n\n\n<span>old_tty_setting</span><span>=</span><span><span>$(</span>stty -g<span>)</span></span>   <span># 保存旧的设置。</span>\n<span>echo</span> <span>\"Hit a key \"</span>\nstty -icanon -echo           <span># 禁用终端的 canonical 模式。</span>\n                             <span># 同时禁用 echo。</span>\n<span>key</span><span>=</span><span><span>$(</span><span>dd</span> <span>bs</span><span>=</span><span>1</span> <span>count</span><span>=</span><span>1</span> <span><span>2</span>></span> /dev/null<span>)</span></span>   <span># 使用 'dd' 获得键值。</span>\nstty <span>\"<span>$old_tty_setting</span>\"</span>      <span># 恢复旧的设置。</span>\n<span>echo</span> <span>\"You hit <span>${<span>#</span>key}</span> key.\"</span>  <span># ${#variable} 表示 $variable 中的字符个数。</span>\n<span>#</span>\n<span># 除了按下回车键外，其余情况都会输出 \"You hit 1 key.\"</span>\n<span># 按下回车键会输出 \"You hit 0 key.\"</span>\n<span># 因为唯一的换行符在命令替换中被丢失了。</span>\n\n<span># 这段代码摘自 Stéphane Chazelas。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div></blockquote>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 使用 <code>echo</code> 输出未被引用的命令代换的变量时会删掉尾部的换行。这可能会导致非常不好的情况出现。</p>\n</blockquote>\n<blockquote>\n<div><pre><code><span>dir_listing</span><span>=</span><span><span>`</span><span>ls</span> -l<span>`</span></span>\n<span>echo</span> <span>$dir_listing</span>     <span># 未被引用</span>\n\n<span># 你希望会出现按行显示出文件列表。</span>\n\n<span># 但是，你却看到了：</span>\n<span># total 3 -rw-rw-r-- 1 bozo bozo 30 May 13 17:15 1.txt -rw-rw-r-- 1 bozo</span>\n<span># bozo 51 May 15 20:57 t2.sh -rwxr-xr-x 1 bozo bozo 217 Mar 5 21:13 wi.sh</span>\n\n<span># 所有换行都消失了。</span>\n\n\n<span>echo</span> <span>\"<span>$dir_listing</span>\"</span>   <span># 被引用</span>\n<span># -rw-rw-r--    1 bozo       30 May 13 17:15 1.txt</span>\n<span># -rw-rw-r--    1 bozo       51 May 15 20:57 t2.sh</span>\n<span># -rwxr-xr-x    1 bozo      217 Mar  5 21:13 wi.sh</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></blockquote>\n<p>你甚至可以使用 <a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#IOREDIRREF\" target=\"_blank\" rel=\"noopener noreferrer\">重定向</a> 或者 <a href=\"http://tldp.org/LDP/abs/html/basic.html#CATREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>cat</code></a> 命令把一个文件的内容通过命令代换赋值给一个变量。</p>\n<div><pre><code><span>variable1</span><span>=</span><span><span>`</span><span>&lt;</span>file1<span>`</span></span>      <span># 将 \"file1\" 的内容赋值给 variable1。</span>\n<span>variable2</span><span>=</span><span><span>`</span><span>cat</span> file2<span>`</span></span>   <span># 将 \"file2\" 的内容赋值给 variable2。</span>\n                        <span># 使用 cat 命令会开一个新进程，因此执行速度会比重定向慢。</span>\n\n<span># 需要注意的是，这些变量中可能包含一些空格或者控制字符。</span>\n\n<span># 无需显示的赋值给一个变量。</span>\n<span>echo</span> <span>\"<span><span>`</span> <span>&lt;</span>$0<span>`</span></span>\"</span>           <span># 输出脚本自身。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span>#  摘录自系统文件 /etc/rc.d/rc.sysinit</span>\n<span>#+ （Red Hat Linux 发行版）</span>\n\n\n<span>if</span> <span>[</span> -f /fsckoptions <span>]</span><span>;</span> <span>then</span>\n        <span>fsckoptions</span><span>=</span><span><span>`</span><span>cat</span> /fsckoptions<span>`</span></span>\n<span>..</span>.\n<span>fi</span>\n<span>#</span>\n<span>#</span>\n<span>if</span> <span>[</span> -e <span>\"/proc/ide/<span>${disk<span>[</span>$device<span>]</span>}</span>/media\"</span> <span>]</span> <span>;</span> <span>then</span>\n             <span>hdmedia</span><span>=</span><span><span>`</span><span>cat</span> /proc/ide/$<span>{</span>disk<span>[</span>$device<span>]</span><span>}</span>/media<span>`</span></span>\n<span>..</span>.\n<span>fi</span>\n<span>#</span>\n<span>#</span>\n<span>if</span> <span>[</span> <span>!</span> -n <span>\"<span><span>`</span><span>uname</span> -r <span>|</span> <span>grep</span> -- <span>\"-\"</span><span>`</span></span>\"</span> <span>]</span><span>;</span> <span>then</span>\n       <span>ktag</span><span>=</span><span>\"<span><span>`</span><span>cat</span> /proc/version<span>`</span></span>\"</span>\n<span>..</span>.\n<span>fi</span>\n<span>#</span>\n<span>#</span>\n<span>if</span> <span>[</span> <span>$usb</span> <span>=</span> <span>\"1\"</span> <span>]</span><span>;</span> <span>then</span>\n    <span>sleep</span> <span>5</span>\n    <span>mouseoutput</span><span>=</span><span><span>`</span><span>cat</span> /proc/bus/usb/devices <span><span>2</span>></span>/dev/null<span>|</span><span>grep</span> -E <span>\"^I.*Cls=03.*Prot=02\"</span><span>`</span></span>\n    <span>kbdoutput</span><span>=</span><span><span>`</span><span>cat</span> /proc/bus/usb/devices <span><span>2</span>></span>/dev/null<span>|</span><span>grep</span> -E <span>\"^I.*Cls=03.*Prot=01\"</span><span>`</span></span>\n<span>..</span>.\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"caution\"> 尽量不要将一大段文字赋值给一个变量，除非你有足够的理由。也绝不要将一个二进制文件的内容赋值给一个变量。</p>\n</blockquote>\n<blockquote>\n<p>样例 12-1. 蠢蠢的脚本</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># stupid-script-tricks.sh: 不要在自己的电脑上尝试。</span>\n<span># 摘自 \"Stupid Script Tricks\" 卷一。</span>\n\n<span>exit</span> <span>99</span>  <span>### 如果你有胆，就注释掉这行。:)</span>\n\n<span>dangerous_variable</span><span>=</span><span><span>`</span><span>cat</span> /boot/vmlinuz<span>`</span></span>   <span># 压缩的 Linux 内核。</span>\n\n<span>echo</span> <span>\"string-length of \\<span>$dangerous_variable</span> = <span>${<span>#</span>dangerous_variable}</span>\"</span>\n<span># $dangerous_variable 的长度为 794151</span>\n<span># （更新版本的内核可能更大。）</span>\n<span># 与 'wc -c /boot/vmlinuz' 的结果不同。</span>\n\n<span># echo \"$dangerous_variable\"</span>\n<span># 不要作死。否则脚本会挂起。</span>\n\n\n\n<span># 将二进制文件的内容赋值给一个变量没有任何意义。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></blockquote>\n<blockquote>\n<p>尽管脚本会挂起，但并不会出现缓存溢出的情况。而这正是像 Bash 这样的解释型语言相比起编译型语言能够提供更多保护的一个例子。</p>\n</blockquote>\n<p>命令替换允许将 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#FORLOOPREF1\" target=\"_blank\" rel=\"noopener noreferrer\">循环</a> 的输出结果赋值给一个变量。这其中的关键在于循环内部的 <a href=\"http://tldp.org/LDP/abs/html/internal.html#ECHOREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>echo</code></a> 命令。</p>\n<p>样例 12-2. 将循环的输出结果赋值给变量</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># csubloop.sh: 将循环的输出结果赋值给变量。</span>\n\n<span>variable1</span><span>=</span><span><span>`</span><span>for</span> <span>i</span> <span>in</span> <span>1</span> <span>2</span> <span>3</span> <span>4</span> <span>5</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$i</span>\"</span>                 <span>#  在这里，'echo' 命令非常关键。</span>\n<span>done</span><span>`</span></span>\n\n<span>echo</span> <span>\"variable1 = <span>$variable1</span>\"</span>  <span># variable1 = 12345</span>\n\n\n<span>i</span><span>=</span><span>0</span>\n<span>variable2</span><span>=</span><span><span>`</span><span>while</span> <span>[</span> <span>\"<span>$i</span>\"</span> -lt <span>10</span> <span>]</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$i</span>\"</span>                 <span># 很关键的 'echo'。</span>\n  <span>let</span> <span>\"i += 1\"</span>                 <span># i 自增。</span>\n<span>done</span><span>`</span></span>\n\n<span>echo</span> <span>\"variable2 = <span>$variable2</span>\"</span>  <span># variable2 = 0123456789</span>\n\n<span># 这个例子表明可以在变量声明时嵌入循环。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><blockquote>\n<p>命令替换能够让 Bash 做更多的事情。而这仅仅需要在书写程序或者脚本时将结果输出到标准输出 <code>stdout</code> 中，然后将这些输出结果赋值给变量即可。</p>\n<div><pre><code><span><span>#</span><span>include</span> <span>&lt;stdio.h></span></span>\n\n<span>/*  \"Hello, world.\" C program  */</span>\n\n<span>int</span> <span>main</span><span>(</span><span>)</span>\n<span>{</span>\n  <span>printf</span><span>(</span> <span>\"Hello, world.\\n\"</span> <span>)</span><span>;</span>\n  <span>return</span> <span>(</span><span>0</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><pre><code>bash$ gcc -0 hello hello.c\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code><span>#!/bin/bash</span>\n<span># hello.sh</span>\n\n<span>greeting</span><span>=</span><span><span>`</span>./hello<span>`</span></span>\n<span>echo</span> <span>$greeting</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>bash$ sh hello.sh\nHello, world.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></blockquote>\n<blockquote>\n<p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"note\"> 在命令替换中，你可以使用 <code>$(...)</code> 来替代反引号。</p>\n<div><pre><code><span>output</span><span>=</span><span><span>$(</span><span>sed</span> -n /<span>\"<span>$1</span>\"</span>/p $file<span>)</span></span>   <span># 摘自 \"grp.sh\"。</span>\n\n<span># 将文本文件的内容赋值给一个变量。</span>\n<span>File_contents1</span><span>=</span><span><span>$(</span><span>cat</span> $file1<span>)</span></span>\n<span>File_contents2</span><span>=</span><span><span>$(</span><span>&lt;</span>$file2<span>)</span></span>        <span># 这么做也是可以的。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>$(...)</code> 和反引号在处理双反斜杠上有所不同。</p>\n<div><pre><code>bash$ echo `echo \\\\`\n\n\nbash$ echo $(echo \\\\)\n\\\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>$(...)</code> 允许嵌套。<sup></sup></p>\n<div><pre><code><span>word_count</span><span>=</span><span><span>$(</span> <span>wc</span> -w <span>$(</span>echo * <span>|</span> <span>awk</span> <span>'{print <span>$8</span>}'</span><span>)</span> <span>)</span></span>\n</code></pre>\n<div><span>1</span><br></div></div><p>样例 12-3. 寻找变位词（anagram）</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># agram2.sh</span>\n<span># 嵌套命令替换的例子。</span>\n\n<span># 其中使用了作者写的工具包 \"yawl\" 中的 \"anagram\" 工具。</span>\n<span># http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz</span>\n<span># http://bash.deta.in/yawl-0.3.2.tar.gz</span>\n\n<span>E_NOARGS</span><span>=</span><span>86</span>\n<span>E_BADARG</span><span>=</span><span>87</span>\n<span>MINLEN</span><span>=</span><span>7</span>\n\n<span>if</span> <span>[</span> -z <span>\"<span>$1</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Usage <span>$0</span> LETTERSET\"</span>\n  <span>exit</span> <span>$E_NOARGS</span>         <span># 脚本需要命令行参数。</span>\n<span>elif</span> <span>[</span> <span>${<span>#</span>1}</span> -lt <span>$MINLEN</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Argument must have at least <span>$MINLEN</span> letters.\"</span>\n  <span>exit</span> <span>$E_BADARG</span>\n<span>fi</span>\n\n\n\n<span>FILTER</span><span>=</span><span>'.......'</span>         <span># 至少需要7个字符。</span>\n<span>#       1234567</span>\n<span>Anagrams</span><span>=</span><span>(</span> <span><span>$(</span><span>echo</span> <span>$(</span>anagram $1 <span>|</span> <span>grep</span> $FILTER<span>)</span> <span>)</span></span> <span>)</span>\n<span>#          $(     $(        嵌套命令集        ) )</span>\n<span>#        (              赋值给数组                )</span>\n\n<span>echo</span>\n<span>echo</span> <span>\"<span>${<span>#</span>Anagrams<span>[</span>*<span>]</span>}</span>  7+ letter anagrams found\"</span>\n<span>echo</span>\n<span>echo</span> <span>${Anagrams<span>[</span>0<span>]</span>}</span>      <span># 第一个变位词。</span>\n<span>echo</span> <span>${Anagrams<span>[</span>1<span>]</span>}</span>      <span># 第二个变位词。</span>\n                         <span># 以此类推。</span>\n\n<span># echo \"${Anagrams[*]}\"  # 将所有变位词在一行里面输出。</span>\n\n<span># 可以配合后面的数组章节来理解上面的代码。</span>\n\n<span># 建议同时查看另一个寻找变位词的脚本 agram.sh。</span>\n\n<span>exit</span> <span>$?</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div></blockquote>\n<p>以下是包含命令替换的样例：</p>\n<ol>\n<li><a href=\"http://tldp.org/LDP/abs/html/loops1.html#BINGREP\" target=\"_blank\" rel=\"noopener noreferrer\">样例 11-8</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/testbranch.html#CASECMD\" target=\"_blank\" rel=\"noopener noreferrer\">样例 11-27</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/randomvar.html#SEEDINGRANDOM\" target=\"_blank\" rel=\"noopener noreferrer\">样例 9-16</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/moreadv.html#EX57\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-3</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/textproc.html#LOWERCASE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-22</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/textproc.html#GRP\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-17</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/extmisc.html#EX53\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-54</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/loops1.html#EX24\" target=\"_blank\" rel=\"noopener noreferrer\">样例 11-14</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/loops1.html#SYMLINKS\" target=\"_blank\" rel=\"noopener noreferrer\">样例 11-11</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/filearchiv.html#STRIPC\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-32</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/redircb.html#REDIR4\" target=\"_blank\" rel=\"noopener noreferrer\">样例 20-8</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#TREE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-16</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/procref1.html#PIDID\" target=\"_blank\" rel=\"noopener noreferrer\">样例 29-3</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/mathc.html#MONTHLYPMT\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-47</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/mathc.html#BASE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-48</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/mathc.html#ALTBC\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-49</a></li>\n</ol>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>在命令替换中可以使用外部系统命令，<a href=\"http://tldp.org/LDP/abs/html/internal.html#BUILTINREF\" target=\"_blank\" rel=\"noopener noreferrer\">内建命令</a> 甚至是 <a href=\"http://tldp.org/LDP/abs/html/assortedtips.html#RVT\" target=\"_blank\" rel=\"noopener noreferrer\">脚本函数</a>。 </p>\n</li>\n<li id=\"fn2\"><p>从技术的角度来讲，命令替换实际上是获得了命令输出到标准输出的结果，然后通过赋值号将结果赋值给一个变量。 </p>\n</li>\n<li id=\"fn3\"><p>事实上，使用反引号进行嵌套也是可行的。但是 John Default 提醒到需要将内部的反引号进行转义。<pre>word_count=` wc -w \\`echo * | awk '{print $8}'\\` `</pre> </p>\n</li>\n</ol>\n</section>\n",
      "image": "http://tldp.org/LDP/abs/images/note.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第十三章 算术扩展",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/13_arithmetic_expansion/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/13_arithmetic_expansion/",
      "content_html": "<h1 id=\"第十三章-算术扩展\"> 第十三章 算术扩展</h1>\n<p>算术扩展为脚本中的（整数）算术操作提供了强有力的工具。你可以使用反引号、双圆括号或者 <code>let</code> 将字符串转换为数学表达式。</p>\n<h3 id=\"差异比较\"> 差异比较</h3>\n<h4 id=\"使用-反引号-的算术扩展-通常与-expr-一起使用\"> 使用 <a href=\"http://tldp.org/LDP/abs/html/commandsub.html#BACKQUOTESREF\" target=\"_blank\" rel=\"noopener noreferrer\">反引号</a> 的算术扩展（通常与 <a href=\"http://tldp.org/LDP/abs/html/moreadv.html#EXPRREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>expr</code></a> 一起使用）</h4>\n<div><pre><code><span>z</span><span>=</span><span><span>`</span><span>expr</span> $z + <span>3</span><span>`</span></span>         <span># 'expr' 命令执行了算术扩展。</span>\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"使用-双圆括号-或-let-的算术扩展。\"> 使用 <a href=\"http://tldp.org/LDP/abs/html/dblparens.html\" target=\"_blank\" rel=\"noopener noreferrer\">双圆括号</a> 或 <a href=\"http://tldp.org/LDP/abs/html/internal.html#LETREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>let</code></a> 的算术扩展。</h4>\n<p>事实上，在算术扩展中，反引号已经被双圆括号 <code>((...))</code> 和 <code>$((...))</code> 以及 <a href=\"http://tldp.org/LDP/abs/html/internal.html#LETREF\" target=\"_blank\" rel=\"noopener noreferrer\"><code>let</code></a> 所取代。</p>\n<div><pre><code><span>z</span><span>=</span><span><span>$((</span>$z<span>+</span><span>3</span><span>))</span></span>\n<span>z</span><span>=</span><span><span>$((</span>z<span>+</span><span>3</span><span>))</span></span>                     <span># 同样正确。</span>\n                               <span># 在双圆括号内，参数引用形式可用可不用。</span>\n                                            \n<span># $((EXPRESSION)) 是算术扩展。  # 不要与命令替换混淆。</span>\n\n\n\n<span># 双圆括号不是只能用作赋值算术结果。</span>\n\n  <span>n</span><span>=</span><span>0</span>\n  <span>echo</span> <span>\"n = <span>$n</span>\"</span>                <span># n = 0</span>\n\n  <span><span>((</span> n <span>+</span><span>=</span> <span>1</span> <span>))</span></span>                 <span># 自增。</span>\n<span># (( $n += 1 )) 是错误用法！</span>\n  <span>echo</span> <span>\"n = <span>$n</span>\"</span>                <span># n = 1</span>\n\n\n<span>let</span> <span>z</span><span>=</span>z+3\n<span>let</span> <span>\"z += 3\"</span>  <span># 引号允许在赋值表达式中使用空格。</span>\n              <span># 'let' 事实上执行的算术运算而非算术扩展。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>以下是包含算术扩展的样例：</p>\n<ol>\n<li><a href=\"http://tldp.org/LDP/abs/html/moreadv.html#EX45\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-9</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/loops1.html#EX25\" target=\"_blank\" rel=\"noopener noreferrer\">样例 11-15</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/arrays.html#EX66\" target=\"_blank\" rel=\"noopener noreferrer\">样例 27-1</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/arrays.html#BUBBLE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 27-11</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#TREE\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-16</a></li>\n</ol>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第三部分 shell进阶",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part3/",
      "content_html": "<h1 id=\"第三部分-shell进阶\"> 第三部分 shell进阶</h1>\n<h3 id=\"目录\"> 目录</h3>\n<ul>\n<li><a href=\"./09_another_look_at_variables.html\">9. 换个角度看变量</a>\n<ul>\n<li><a href=\"./09_1_internal_variables.html\">9.1 内部变量</a></li>\n<li><a href=\"./09_2_typing_variables_declare_or_typeset.html\">9.2 变量类型标注：<code>declare</code> 与 <code>typeset</code></a>\n<ul>\n<li><a href=\"./09_2_1_another_use_for_declare.html\">9.2.1 <code>declare</code> 的另类用法</a></li>\n</ul>\n</li>\n<li><a href=\"./09_3_random_generate_random_integer.html\">9.3 <code>$RANDOM</code>：生成随机数</a></li>\n</ul>\n</li>\n<li><a href=\"./10_manipulating_variables.html\">10. 变量处理</a>\n<ul>\n<li><a href=\"./10_1_manipulating_strings.html\">10.1 字符串处理</a>\n<ul>\n<li><a href=\"./10_1_1_manipulating_strings_using_awk.html\">10.1.1 使用 <code>awk</code> 处理字符串</a></li>\n<li><a href=\"./10_1_2_further_reference.html\">10.1.2 参考资料</a></li>\n</ul>\n</li>\n<li><a href=\"./10_2_parameter_substitution.html\">10.2 参数替换</a></li>\n</ul>\n</li>\n<li><a href=\"./11_loops_and_branches.html\">11. 循环与分支</a>\n<ul>\n<li><a href=\"./11_1_loops.html\">11.1 循环</a></li>\n<li><a href=\"./11_2_nested_loops.html\">11.2 嵌套循环</a></li>\n<li><a href=\"./11_3_loop_control.html\">11.3 循环控制</a></li>\n<li><a href=\"./11_4_testing_and_branching.html\">11.4 测试与分支</a></li>\n</ul>\n</li>\n<li><a href=\"./12_command_substitution.html\">12. 命令替换</a></li>\n<li><a href=\"./13_arithmetic_expansion.html\">13. 算术扩展</a></li>\n<li><a href=\"./14_recess_time.html\">14. 休息时间</a></li>\n</ul>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第四部分 命令",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part4-command/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part4-command/",
      "content_html": "<h1 id=\"第四部分-命令\"> 第四部分 命令</h1>\n<p>掌握 Linux 命令是编写有效的 shell 脚本必不可少的序曲。</p>\n<p>本章节涉及了下列的命令：</p>\n<ul>\n<li><a href=\"\"><code>.</code></a>（参照 <a href=\"\"><code>source</code></a>）</li>\n<li><a href=\"\"><code>ac</code></a></li>\n<li><a href=\"\"><code>adduser</code></a></li>\n<li><a href=\"\"><code>agetty</code></a></li>\n<li><a href=\"\"><code>agrep</code></a></li>\n<li><a href=\"\"><code>ar</code></a></li>\n<li><a href=\"\"><code>arch</code></a></li>\n<li><a href=\"\"><code>at</code></a></li>\n<li><a href=\"\"><code>autoload</code></a></li>\n<li><a href=\"\"><code>awk</code></a>（参考 <a href=\"\">使用 <code>awk</code> 进行数学运算</a>）</li>\n<li><a href=\"\"><code>badblocks</code></a></li>\n<li><a href=\"\"><code>banner</code></a></li>\n<li><a href=\"\"><code>basename</code></a></li>\n<li><a href=\"\"><code>batch</code></a></li>\n<li><a href=\"\"><code>bc</code></a></li>\n<li><a href=\"\"><code>bg</code></a></li>\n<li><a href=\"\"><code>bind</code></a></li>\n<li><a href=\"\"><code>bison</code></a></li>\n<li><a href=\"\"><code>builtin</code></a></li>\n<li><a href=\"\"><code>bzgrep</code></a></li>\n<li><a href=\"\"><code>bzip2</code></a></li>\n<li><a href=\"\"><code>cal</code></a></li>\n<li><a href=\"\"><code>caller</code></a></li>\n<li><a href=\"\"><code>cat</code></a></li>\n<li><a href=\"\"><code>cd</code></a></li>\n<li><a href=\"\"><code>chattr</code></a></li>\n<li><a href=\"\"><code>chfn</code></a></li>\n<li><a href=\"\"><code>chgrp</code></a></li>\n<li><a href=\"\"><code>chkconfig</code></a></li>\n<li><a href=\"\"><code>chmod</code></a></li>\n<li><a href=\"\"><code>chown</code></a></li>\n<li><a href=\"\"><code>chroot</code></a></li>\n<li><a href=\"\"><code>cksum</code></a></li>\n<li><a href=\"\"><code>clear</code></a></li>\n<li><a href=\"\"><code>clock</code></a></li>\n<li><a href=\"\"><code>cmp</code></a></li>\n<li><a href=\"\"><code>col</code></a></li>\n<li><a href=\"\"><code>colrm</code></a></li>\n<li><a href=\"\"><code>column</code></a></li>\n<li><a href=\"\"><code>comm</code></a></li>\n<li><a href=\"\"><code>command</code></a></li>\n<li><a href=\"\"><code>compgen</code></a></li>\n<li><a href=\"\"><code>complete</code></a></li>\n<li><a href=\"\"><code>compress</code></a></li>\n<li><a href=\"\"><code>coproc</code></a></li>\n<li><a href=\"\"><code>cp</code></a></li>\n<li><a href=\"\"><code>cpio</code></a></li>\n<li><a href=\"\"><code>cron</code></a></li>\n<li><a href=\"\"><code>crypt</code></a></li>\n<li><a href=\"\"><code>csplit</code></a></li>\n<li><a href=\"\"><code>cu</code></a></li>\n<li><a href=\"\"><code>cut</code></a></li>\n<li><a href=\"\"><code>date</code></a></li>\n<li><a href=\"\"><code>dc</code></a></li>\n<li><a href=\"\"><code>dd</code></a></li>\n<li><a href=\"\"><code>debugfs</code></a></li>\n<li><a href=\"\"><code>declare</code></a></li>\n<li><a href=\"\"><code>depmod</code></a></li>\n<li><a href=\"\"><code>df</code></a></li>\n<li><a href=\"\"><code>dialog</code></a></li>\n<li><a href=\"\"><code>diff</code></a></li>\n<li><a href=\"\"><code>diff3</code></a></li>\n<li><a href=\"\"><code>diffstat</code></a></li>\n<li><a href=\"\"><code>dig</code></a></li>\n<li><a href=\"\"><code>dirname</code></a></li>\n<li><a href=\"\"><code>dirs</code></a></li>\n<li><a href=\"\"><code>disown</code></a></li>\n<li><a href=\"\"><code>dmesg</code></a></li>\n<li><a href=\"\"><code>doexec</code></a></li>\n<li><a href=\"\"><code>dos2unix</code></a></li>\n<li><a href=\"\"><code>du</code></a></li>\n<li><a href=\"\"><code>dump</code></a></li>\n<li><a href=\"\"><code>dumpe2fs</code></a></li>\n<li><a href=\"\"><code>e2fsck</code></a></li>\n<li><a href=\"\"><code>echo</code></a></li>\n<li><a href=\"\"><code>egrep</code></a></li>\n<li><a href=\"\"><code>enable</code></a></li>\n<li><a href=\"\"><code>enscript</code></a></li>\n<li><a href=\"\"><code>env</code></a></li>\n<li><a href=\"\"><code>eqn</code></a></li>\n<li><a href=\"\"><code>eval</code></a></li>\n<li><a href=\"\"><code>exec</code></a></li>\n<li><a href=\"\"><code>exit</code></a>（相关话题：<a href=\"\">退出状态</a>）</li>\n<li><a href=\"\"><code>expand</code></a></li>\n<li><a href=\"\"><code>export</code></a></li>\n<li><a href=\"\"><code>expr</code></a></li>\n<li><a href=\"\"><code>factor</code></a></li>\n<li><a href=\"\"><code>false</code></a></li>\n<li><a href=\"\"><code>fdformat</code></a></li>\n<li><a href=\"\"><code>fdisk</code></a></li>\n<li><a href=\"\"><code>fg</code></a></li>\n<li><a href=\"\"><code>fgrep</code></a></li>\n<li><a href=\"\"><code>file</code></a></li>\n<li><a href=\"\"><code>find</code></a></li>\n<li><a href=\"\"><code>finger</code></a></li>\n<li><a href=\"\"><code>flex</code></a></li>\n<li><a href=\"\"><code>flock</code></a></li>\n<li><a href=\"\"><code>fmt</code></a></li>\n<li><a href=\"\"><code>fold</code></a></li>\n<li><a href=\"\"><code>free</code></a></li>\n<li><a href=\"\"><code>fsck</code></a></li>\n<li><a href=\"\"><code>ftp</code></a></li>\n<li><a href=\"\"><code>fuser</code></a></li>\n<li><a href=\"\"><code>getfacl</code></a></li>\n<li><a href=\"\"><code>getopt</code></a></li>\n<li><a href=\"\"><code>getopts</code></a></li>\n<li><a href=\"\"><code>gettext</code></a></li>\n<li><a href=\"\"><code>getty</code></a></li>\n<li><a href=\"\"><code>gnome-mount</code></a></li>\n<li><a href=\"\"><code>grep</code></a></li>\n<li><a href=\"\"><code>groff</code></a></li>\n<li><a href=\"\"><code>groupmod</code></a></li>\n<li><a href=\"\"><code>groups</code></a>（相关话题：变量 <a href=\"\"><code>$GROUPS</code></a>）</li>\n<li><a href=\"\"><code>gs</code></a></li>\n<li><a href=\"\"><code>gzip</code></a></li>\n<li><a href=\"\"><code>halt</code></a></li>\n<li><a href=\"\"><code>hash</code></a></li>\n<li><a href=\"\"><code>hdparm</code></a></li>\n<li><a href=\"\"><code>head</code></a></li>\n<li><a href=\"\"><code>help</code></a></li>\n<li><a href=\"\"><code>hexdump</code></a></li>\n<li><a href=\"\"><code>host</code></a></li>\n<li><a href=\"\"><code>hostid</code></a></li>\n<li><a href=\"\"><code>hostname</code></a>（相关话题：变量 <a href=\"\"><code>$HOSTNAME</code></a>）</li>\n<li><a href=\"\"><code>hwclock</code></a></li>\n<li><a href=\"\"><code>iconv</code></a></li>\n<li><a href=\"\"><code>id</code></a>（相关话题：变量 <a href=\"\"><code>$UID</code></a>）</li>\n<li><a href=\"\"><code>ifconfig</code></a></li>\n<li><a href=\"\"><code>info</code></a></li>\n<li><a href=\"\"><code>infocmp</code></a></li>\n<li><a href=\"\"><code>init</code></a></li>\n<li><a href=\"\"><code>insmod</code></a></li>\n<li><a href=\"\"><code>install</code></a></li>\n<li><a href=\"\"><code>ip</code></a></li>\n<li><a href=\"\"><code>ipcalc</code></a></li>\n<li><a href=\"\"><code>iptables</code></a></li>\n<li><a href=\"\"><code>iwconfig</code></a></li>\n<li><a href=\"\"><code>jobs</code></a></li>\n<li><a href=\"\"><code>join</code></a></li>\n<li><a href=\"\"><code>jot</code></a></li>\n<li><a href=\"\"><code>kill</code></a></li>\n<li><a href=\"\"><code>killall</code></a></li>\n<li><a href=\"\"><code>last</code></a></li>\n<li><a href=\"\"><code>lastcomm</code></a></li>\n<li><a href=\"\"><code>lastlog</code></a></li>\n<li><a href=\"\"><code>ldd</code></a></li>\n<li><a href=\"\"><code>less</code></a></li>\n<li><a href=\"\"><code>let</code></a></li>\n<li><a href=\"\"><code>lex</code></a></li>\n<li><a href=\"\"><code>lid</code></a></li>\n<li><a href=\"\"><code>ln</code></a></li>\n<li><a href=\"\"><code>locate</code></a></li>\n<li><a href=\"\"><code>lockfile</code></a></li>\n<li><a href=\"\"><code>logger</code></a></li>\n<li><a href=\"\"><code>logname</code></a></li>\n<li><a href=\"\"><code>logout</code></a></li>\n<li><a href=\"\"><code>logrotate</code></a></li>\n<li><a href=\"\"><code>look</code></a></li>\n<li><a href=\"\"><code>losetup</code></a></li>\n<li><a href=\"\"><code>lp</code></a></li>\n<li><a href=\"\"><code>ls</code></a></li>\n<li><a href=\"\"><code>lsdev</code></a></li>\n<li><a href=\"\"><code>lsmod</code></a></li>\n<li><a href=\"\"><code>lsof</code></a></li>\n<li><a href=\"\"><code>lspci</code></a></li>\n<li><a href=\"\"><code>lsusb</code></a></li>\n<li><a href=\"\"><code>ltrace</code></a></li>\n<li><a href=\"\"><code>lynx</code></a></li>\n<li><a href=\"\"><code>lzcat</code></a></li>\n<li><a href=\"\"><code>lzma</code></a></li>\n<li><a href=\"\"><code>m4</code></a></li>\n<li><a href=\"\"><code>mail</code></a></li>\n<li><a href=\"\"><code>mailstats</code></a></li>\n<li><a href=\"\"><code>mailto</code></a></li>\n<li><a href=\"\"><code>make</code></a></li>\n<li><a href=\"\"><code>MAKEDEV</code></a></li>\n<li><a href=\"\"><code>man</code></a></li>\n<li><a href=\"\"><code>mapfile</code></a></li>\n<li><a href=\"\"><code>mcookie</code></a></li>\n<li><a href=\"\"><code>md5sum</code></a></li>\n<li><a href=\"\"><code>merge</code></a></li>\n<li><a href=\"\"><code>mesg</code></a></li>\n<li><a href=\"\"><code>mimencode</code></a></li>\n<li><a href=\"\"><code>mkbootdisk</code></a></li>\n<li><a href=\"\"><code>mkdir</code></a></li>\n<li><a href=\"\"><code>mkdosfs</code></a></li>\n<li><a href=\"\"><code>mke2fs</code></a></li>\n<li><a href=\"\"><code>mkfifo</code></a></li>\n<li><a href=\"\"><code>mkisofs</code></a></li>\n<li><a href=\"\"><code>mknod</code></a></li>\n<li><a href=\"\"><code>mkswap</code></a></li>\n<li><a href=\"\"><code>mktemp</code></a></li>\n<li><a href=\"\"><code>mmencode</code></a></li>\n<li><a href=\"\"><code>modinfo</code></a></li>\n<li><a href=\"\"><code>modprobe</code></a></li>\n<li><a href=\"\"><code>more</code></a></li>\n<li><a href=\"\"><code>mount</code></a></li>\n<li><a href=\"\"><code>msgfmt</code></a></li>\n<li><a href=\"\"><code>mv</code></a></li>\n<li><a href=\"\"><code>nc</code></a></li>\n<li><a href=\"\"><code>netconfig</code></a></li>\n<li><a href=\"\"><code>netstat</code></a></li>\n<li><a href=\"\"><code>newgrp</code></a></li>\n<li><a href=\"\"><code>nice</code></a></li>\n<li><a href=\"\"><code>nl</code></a></li>\n<li><a href=\"\"><code>nm</code></a></li>\n<li><a href=\"\"><code>nmap</code></a></li>\n<li><a href=\"\"><code>nohup</code></a></li>\n<li><a href=\"\"><code>nslookup</code></a></li>\n<li><a href=\"\"><code>objdump</code></a></li>\n<li><a href=\"\"><code>od</code></a></li>\n<li><a href=\"\"><code>openssl</code></a></li>\n<li><a href=\"\"><code>passwd</code></a></li>\n<li><a href=\"\"><code>paste</code></a></li>\n<li><a href=\"\"><code>patch</code></a>（相关话题：<a href=\"\"><code>diff</code></a>）</li>\n<li><a href=\"\"><code>pathchk</code></a></li>\n<li><a href=\"\"><code>pax</code></a></li>\n<li><a href=\"\"><code>pgrep</code></a></li>\n<li><a href=\"\"><code>pidof</code></a></li>\n<li><a href=\"\"><code>ping</code></a></li>\n<li><a href=\"\"><code>pkill</code></a></li>\n<li><a href=\"\"><code>popd</code></a></li>\n<li><a href=\"\"><code>pr</code></a></li>\n<li><a href=\"\"><code>printenv</code></a></li>\n<li><a href=\"\"><code>printf</code></a></li>\n<li><a href=\"\"><code>procinfo</code></a></li>\n<li><a href=\"\"><code>ps</code></a></li>\n<li><a href=\"\"><code>pstree</code></a></li>\n<li><a href=\"\"><code>ptx</code></a></li>\n<li><a href=\"\"><code>pushd</code></a></li>\n<li><a href=\"\"><code>pwd</code></a>（相关话题：变量 <a href=\"\"><code>$PWD</code></a>）</li>\n<li><a href=\"\"><code>quota</code></a></li>\n<li><a href=\"\"><code>rcp</code></a></li>\n<li><a href=\"\"><code>rdev</code></a></li>\n<li><a href=\"\"><code>rdist</code></a></li>\n<li><a href=\"\"><code>read</code></a></li>\n<li><a href=\"\"><code>readelf</code></a></li>\n<li><a href=\"\"><code>readlink</code></a></li>\n<li><a href=\"\"><code>readonly</code></a></li>\n<li><a href=\"\"><code>reboot</code></a></li>\n<li><a href=\"\"><code>recode</code></a></li>\n<li><a href=\"\"><code>renice</code></a></li>\n<li><a href=\"\"><code>reset</code></a></li>\n<li><a href=\"\"><code>resize</code></a></li>\n<li><a href=\"\"><code>restore</code></a></li>\n<li><a href=\"\"><code>rev</code></a></li>\n<li><a href=\"\"><code>rlogin</code></a></li>\n<li><a href=\"\"><code>rm</code></a></li>\n<li><a href=\"\"><code>rmdir</code></a></li>\n<li><a href=\"\"><code>rmmod</code></a></li>\n<li><a href=\"\"><code>route</code></a></li>\n<li><a href=\"\"><code>rpm</code></a></li>\n<li><a href=\"\"><code>rpm2cpio</code></a></li>\n<li><a href=\"\"><code>rsh</code></a></li>\n<li><a href=\"\"><code>rsync</code></a></li>\n<li><a href=\"\"><code>runlevel</code></a></li>\n<li><a href=\"\"><code>run-parts</code></a></li>\n<li><a href=\"\"><code>rx</code></a></li>\n<li><a href=\"\"><code>rz</code></a></li>\n<li><a href=\"\"><code>sar</code></a></li>\n<li><a href=\"\"><code>scp</code></a></li>\n<li><a href=\"\"><code>script</code></a></li>\n<li><a href=\"\"><code>sdiff</code></a></li>\n<li><a href=\"\"><code>sed</code></a></li>\n<li><a href=\"\"><code>seq</code></a></li>\n<li><a href=\"\"><code>service</code></a></li>\n<li><a href=\"\"><code>set</code></a></li>\n<li><a href=\"\"><code>setfacl</code></a></li>\n<li><a href=\"\"><code>setquota</code></a></li>\n<li><a href=\"\"><code>setserial</code></a></li>\n<li><a href=\"\"><code>setterm</code></a></li>\n<li><a href=\"\"><code>sha1sum</code></a></li>\n<li><a href=\"\"><code>shar</code></a></li>\n<li><a href=\"\"><code>shopt</code></a></li>\n<li><a href=\"\"><code>shred</code></a></li>\n<li><a href=\"\"><code>shutdown</code></a></li>\n<li><a href=\"\"><code>size</code></a></li>\n<li><a href=\"\"><code>skill</code></a></li>\n<li><a href=\"\"><code>sleep</code></a></li>\n<li><a href=\"\"><code>slocate</code></a></li>\n<li><a href=\"\"><code>snice</code></a></li>\n<li><a href=\"\"><code>sort</code></a></li>\n<li><a href=\"\"><code>source</code></a></li>\n<li><a href=\"\"><code>sox</code></a></li>\n<li><a href=\"\"><code>split</code></a></li>\n<li><a href=\"\"><code>sq</code></a></li>\n<li><a href=\"\"><code>ssh</code></a></li>\n<li><a href=\"\"><code>stat</code></a></li>\n<li><a href=\"\"><code>strace</code></a></li>\n<li><a href=\"\"><code>strings</code></a></li>\n<li><a href=\"\"><code>strip</code></a></li>\n<li><a href=\"\"><code>stty</code></a></li>\n<li><a href=\"\"><code>su</code></a></li>\n<li><a href=\"\"><code>sudo</code></a></li>\n<li><a href=\"\"><code>sum</code></a></li>\n<li><a href=\"\"><code>suspend</code></a></li>\n<li><a href=\"\"><code>swapoff</code></a></li>\n<li><a href=\"\"><code>swapon</code></a></li>\n<li><a href=\"\"><code>sx</code></a></li>\n<li><a href=\"\"><code>sync</code></a></li>\n<li><a href=\"\"><code>sz</code></a></li>\n<li><a href=\"\"><code>tac</code></a></li>\n<li><a href=\"\"><code>tail</code></a></li>\n<li><a href=\"\"><code>tar</code></a></li>\n<li><a href=\"\"><code>tbl</code></a></li>\n<li><a href=\"\"><code>tcpdump</code></a></li>\n<li><a href=\"\"><code>tee</code></a></li>\n<li><a href=\"\"><code>telinit</code></a></li>\n<li><a href=\"\"><code>telnet</code></a></li>\n<li><a href=\"\"><code>Tex</code></a></li>\n<li><a href=\"\"><code>texexec</code></a></li>\n<li><a href=\"\"><code>time</code></a></li>\n<li><a href=\"\"><code>times</code></a></li>\n<li><a href=\"\"><code>tmpwatch</code></a></li>\n<li><a href=\"\"><code>top</code></a></li>\n<li><a href=\"\"><code>touch</code></a></li>\n<li><a href=\"\"><code>tput</code></a></li>\n<li><a href=\"\"><code>tr</code></a></li>\n<li><a href=\"\"><code>traceroute</code></a></li>\n<li><a href=\"\"><code>true</code></a></li>\n<li><a href=\"\"><code>tset</code></a></li>\n<li><a href=\"\"><code>tsort</code></a></li>\n<li><a href=\"\"><code>tty</code></a></li>\n<li><a href=\"\"><code>tune2fs</code></a></li>\n<li><a href=\"\"><code>type</code></a></li>\n<li><a href=\"\"><code>typeset</code></a></li>\n<li><a href=\"\"><code>ulimit</code></a></li>\n<li><a href=\"\"><code>umask</code></a></li>\n<li><a href=\"\"><code>umount</code></a></li>\n<li><a href=\"\"><code>uname</code></a></li>\n<li><a href=\"\"><code>unarc</code></a></li>\n<li><a href=\"\"><code>unarj</code></a></li>\n<li><a href=\"\"><code>uncompress</code></a></li>\n<li><a href=\"\"><code>unexpand</code></a></li>\n<li><a href=\"\"><code>uniq</code></a></li>\n<li><a href=\"\"><code>units</code></a></li>\n<li><a href=\"\"><code>unlzma</code></a></li>\n<li><a href=\"\"><code>unrar</code></a></li>\n<li><a href=\"\"><code>unset</code></a></li>\n<li><a href=\"\"><code>unsq</code></a></li>\n<li><a href=\"\"><code>unzip</code></a></li>\n<li><a href=\"\"><code>uptime</code></a></li>\n<li><a href=\"\"><code>usbmodules</code></a></li>\n<li><a href=\"\"><code>useradd</code></a></li>\n<li><a href=\"\"><code>userdel</code></a></li>\n<li><a href=\"\"><code>usermod</code></a></li>\n<li><a href=\"\"><code>users</code></a></li>\n<li><a href=\"\"><code>usleep</code></a></li>\n<li><a href=\"\"><code>uucp</code></a></li>\n<li><a href=\"\"><code>uudecode</code></a></li>\n<li><a href=\"\"><code>uuencode</code></a></li>\n<li><a href=\"\"><code>uux</code></a></li>\n<li><a href=\"\"><code>vacation</code></a></li>\n<li><a href=\"\"><code>vdir</code></a></li>\n<li><a href=\"\"><code>vmstat</code></a></li>\n<li><a href=\"\"><code>vrfy</code></a></li>\n<li><a href=\"\"><code>w</code></a></li>\n<li><a href=\"\"><code>wait</code></a></li>\n<li><a href=\"\"><code>wall</code></a></li>\n<li><a href=\"\"><code>watch</code></a></li>\n<li><a href=\"\"><code>wc</code></a></li>\n<li><a href=\"\"><code>wget</code></a></li>\n<li><a href=\"\"><code>whatis</code></a></li>\n<li><a href=\"\"><code>whereis</code></a></li>\n<li><a href=\"\"><code>which</code></a></li>\n<li><a href=\"\"><code>who</code></a></li>\n<li><a href=\"\"><code>whoami</code></a></li>\n<li><a href=\"\"><code>whois</code></a></li>\n<li><a href=\"\"><code>write</code></a></li>\n<li><a href=\"\"><code>xargs</code></a></li>\n<li><a href=\"\"><code>xrandr</code></a></li>\n<li><a href=\"\"><code>xz</code></a></li>\n<li><a href=\"\"><code>yacc</code></a></li>\n<li><a href=\"\"><code>yes</code></a></li>\n<li><a href=\"\"><code>zcat</code></a></li>\n<li><a href=\"\"><code>zdiff</code></a></li>\n<li><a href=\"\"><code>zdump</code></a></li>\n<li><a href=\"\"><code>zegrep</code></a></li>\n<li><a href=\"\"><code>zfgrep</code></a></li>\n<li><a href=\"\"><code>zgrep</code></a></li>\n<li><a href=\"\"><code>zip</code></a></li>\n</ul>\n<h3 id=\"目录\"> 目录</h3>\n<ul>\n<li><a href=\"\">15. 内建命令</a>\n<ul>\n<li><a href=\"\">15.1 任务控制命令</a></li>\n</ul>\n</li>\n<li><a href=\"\">16. 外部筛选器，任务及命令</a>\n<ul>\n<li><a href=\"\">16.1 基础命令</a></li>\n<li><a href=\"\">16.2 复杂命令</a></li>\n<li><a href=\"\">16.3 时间/日期命令</a></li>\n<li><a href=\"\">16.4 文本处理命令</a></li>\n<li><a href=\"\">16.5 文件与归档命令</a></li>\n<li><a href=\"\">16.6 通信命令</a></li>\n<li><a href=\"\">16.7 终端控制命令</a></li>\n<li><a href=\"\">16.8 数学命令</a></li>\n<li><a href=\"\">16.9 其他命令</a></li>\n</ul>\n</li>\n<li><a href=\"\">17. 系统与管理命令</a>\n<ul>\n<li><a href=\"\">17.1 分析一个系统脚本</a></li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "18.1 正则表达式简介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/18_1_a_brief_introduction_to_regular_expressions/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/18_1_a_brief_introduction_to_regular_expressions/",
      "content_html": "<h1 id=\"_18-1-正则表达式简介\"> 18.1 正则表达式简介</h1>\n<p>正则表达式是一系列的字符串。这些包含超过其字面含义的字符串被称之为元字符。例如，一个符号前面的引用符代表一个人的言语能力，或者按照上面的说法，代表着meta-meaning<a href=\"http://tldp.org/LDP/abs/html/x17129.html#FTN.AEN17134\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a>。正则表达式是一组字符串和（或者）一组匹配（特定的）模式的元字符。</p>\n<p>一个正则表达式包含下面的一个或多个选项：</p>\n<ul>\n<li>一组字符串。这是仅仅表示字面意思的字符串。最简单形式的正则表达式仅仅包含一组字符串。</li>\n<li>一个锚字符。锚节点指定了正则表达式在一行文本中的匹配位置。例如，^和$就是锚字符。</li>\n<li>修饰符。修饰符扩展或者限定（修改）了正则表达式在文本中的匹配范围。修饰符包括星号、方括号和反斜线。</li>\n</ul>\n<p>正则表达式的主要用在文本搜索和字符串操作。一个正则表达式匹配单个字符或者一组字符 -- 一系列的字符或者字符串的一部分。</p>\n<ul>\n<li>\n<p>星号 * 匹配前面的子表达式任意次，包括0次</p>\n<p>&quot;1133*&quot;匹配&quot;11&quot;加一个或多个&quot;3&quot;：113，1133，1133333，及以后</p>\n</li>\n<li>\n<p>点号 . 匹配任意字符，除了新的一行<a href=\"http://tldp.org/LDP/abs/html/x17129.html#AEN17189\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a></p>\n<p>&quot;13.&quot;匹配&quot;13&quot;加至少一个字符（包括空格）：1133，11333，但不是13（缺少额外的字符）<br>\n参见例子<a href=\"http://tldp.org/LDP/abs/html/textproc.html#CWSOLVER\" target=\"_blank\" rel=\"noopener noreferrer\">16-18</a>，展示单字符匹配</p>\n</li>\n<li>\n<p>脱字符 ^ 匹配行的起始位置，但有时候会根据上下文环境匹配其相反的意义（译者注：例如[^a]匹配任意一个非a的字符）</p>\n</li>\n<li>\n<p>美元符 $ 匹配行的结束位置</p>\n<p>&quot;XXX<span class='katex-error' title='ParseError: KaTeX parse error: Expected group after &#039;^&#039; at position 19: …行尾处的&quot;XXX&quot;  \n  &quot;^̲'>&quot;匹配行尾处的&quot;XXX&quot;  \n  &quot;^</span>&quot;匹配空行</p>\n</li>\n<li>\n<p>方括号 [...] 匹配所包含的任意一个字符</p>\n<p>&quot;[xyz]&quot;匹配x、y或z中的任意一个字符<br>\n&quot;[c-n]&quot;匹配c到n之间的任意一个字符<br>\n&quot;[B-Pk-y]&quot;匹配B到P和k到y之间任意一个字符<br>\n&quot;[a-z0-9]&quot;匹配任意一个小写字符和任意一个数字<br>\n&quot;[<sup>b-d]&quot;匹配任意一个不在b到d之间的字符。这是一个很好的例子，展示了&quot;</sup>&quot;的匹配了正则表达式的反义（类似在其他环境下的&quot;!&quot;符号所起的作用）<br>\n组合一连串的用方括号括起来的字符能匹配非常多的词组模式。&quot;[Yy][Ee][Ss]&quot;匹配yes、Yes、YES、yEs等等。&quot;[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]&quot;匹配任何一个社会保险号</p>\n</li>\n<li>\n<p>反斜线 \\ 转义一个特殊字符，意味着这个字符被解释为字面意义（因此不再包含特殊意思）</p>\n<p>&quot;$&quot;表示回它的字面意义&quot;$&quot;，而不是它原本在正则表达式中代表行尾的意义。同样，&quot;\\&quot;表示字面意义&quot;&quot;</p>\n</li>\n<li>\n<p>转义后的尖括号 &lt;..&gt; 代表词组的边界</p>\n<p>尖括号必须进行转义，否则它们就代表其字面意义<br>\n&quot;&lt;the&gt;&quot;匹配词组&quot;the&quot;，而不是词组&quot;them,&quot; &quot;there,&quot; &quot;other,&quot;等等</p>\n</li>\n</ul>\n<div><pre><code>bash$ <span>cat</span> textfile\nThis is line <span>1</span>, of <span>which</span> there is only one instance.\n This is the only instance of line <span>2</span>.\n This is line <span>3</span>, another line.\n This is line <span>4</span>.\n\n\nbash$ <span>grep</span> <span>'the'</span> textfile\nThis is line <span>1</span>, of <span>which</span> there is only one instance.\n This is the only instance of line <span>2</span>.\n This is line <span>3</span>, another line.\n\n\nbash$ <span>grep</span> <span>'\\&lt;the\\>'</span> textfile\nThis is the only instance of line <span>2</span>.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>唯一判断一个特定的正则表达式是否有效的方法就是测试它。</p>\n<div><pre><code>测试文件: tstfile                          <span># No match.</span>\n                                            <span># No match.</span>\n运行 <span>grep</span> <span>\"1133*\"</span>  tstfile                  <span># Match.</span>\n                                            <span># No match.</span>\n                                            <span># No match.</span>\nThis line contains the number <span>113</span>.          <span># Match.</span>\nThis line contains the number <span>13</span>.           <span># No match.</span>\nThis line contains the number <span>133</span>.          <span># No match.</span>\nThis line contains the number <span>1133</span>.         <span># Match.</span>\nThis line contains the number <span>113312</span>.       <span># Match.</span>\nThis line contains the number <span>1112</span>.         <span># No match.</span>\nThis line contains the number <span>113312312</span>.    <span># Match.</span>\nThis line contains no numbers at all.       <span># No match.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code>bash$ <span>grep</span> <span>\"1133*\"</span> tstfile\nRun   <span>grep</span> <span>\"1133*\"</span>  on this file.           <span># Match.</span>\n This line contains the number <span>113</span>.          <span># Match.</span>\n This line contains the number <span>1133</span>.         <span># Match.</span>\n This line contains the number <span>113312</span>.       <span># Match.</span>\n This line contains the number <span>113312312</span>.    <span># Match.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>注解</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/x17129.html#FTN.AEN17134\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a> 元意义指的是一个词组或者表达式在更高层次的抽象上的意义。例如，正则表达式的字面意思就是所有人接受其用法的普通表达式。元意义则完全不同，正如在本章最终讨论的那样。\n<a href=\"http://tldp.org/LDP/abs/html/x17129.html#AEN17189\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a>\nSince sed, awk, and grep process single lines, there will usually not be a newline to match. In those cases where there is a newline in a multiple line expression, the dot will match the newline.</p>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>sed</span> -e <span>'N;s/.*/[&amp;]/'</span> <span>&lt;&lt;</span> <span>EOF<span>   <span># Here Document</span></span>\nline1\nline2\nEOF</span>\n<span># OUTPUT:</span>\n<span># [line1</span>\n<span># line2]</span>\n\n\n\n<span>echo</span>\n\n<span>awk</span> <span>'{ <span>$0</span>=<span>$1</span> \"<span title=\"\\n\">\\n</span>\" <span>$2</span>; if (/line.1/) {print}}'</span> <span>&lt;&lt;</span> <span>EOF\nline 1\nline 2\nEOF</span>\n<span># OUTPUT:</span>\n<span># line</span>\n<span># 1</span>\n\n\n<span># Thanks, S.C.</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "18.2文件名替换",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/18_2_globbing/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/18_2_globbing/",
      "content_html": "<h1 id=\"_18-2文件名替换\"> 18.2文件名替换</h1>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "18.3 正则表达式对照表",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/18_3_regular_expression_comparison_table/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/18_3_regular_expression_comparison_table/",
      "content_html": "<h1 id=\"_18-3-正则表达式对照表\"> 18.3 正则表达式对照表</h1>\n<p>正则表达式分为三类（man grep可以看到，分别是basic RegExs，extended RegExs，perl RegExs）</p>\n<h2 id=\"正则表达式分类\"> 正则表达式分类：</h2>\n<ul>\n<li>基本的正则表达式（Basic Regular Expression 又叫 Basic RegEx 简称 BREs）</li>\n<li>扩展的正则表达式（Extended Regular Expression 又叫 Extended RegEx 简称 EREs）</li>\n<li>Perl 的正则表达式（Perl Regular Expression 又叫 Perl RegEx 简称 PREs）</li>\n</ul>\n<h2 id=\"linux-中常用文本工具与正则表达式的关系\"> Linux 中常用文本工具与正则表达式的关系</h2>\n<ul>\n<li>\n<p>grep 支持：BREs、EREs、PREs 正则表达式\ngrep 指令后不跟任何参数，则表示要使用 ”BREs“\ngrep 指令后跟 ”-E&quot; 参数，则表示要使用 “EREs“\ngrep 指令后跟 “-P&quot; 参数，则表示要使用 “PREs&quot;</p>\n</li>\n<li>\n<p>egrep 支持：EREs、PREs 正则表达式\negrep 指令后不跟任何参数，则表示要使用 “EREs”\negrep 指令后跟 “-P&quot; 参数，则表示要使用 “PREs&quot;</p>\n</li>\n<li>\n<p>sed 正则表达式特点\nsed 文本工具支持：BREs、EREs\nsed 指令默认是使用&quot;BREs&quot;\nsed 命令参数 “-r ” ，则表示要使用“EREs&quot;</p>\n</li>\n<li>\n<p>Awk（gawk）正则表达式特点\nAwk 文本工具支持：EREs\nawk 指令默认是使用 “EREs&quot;</p>\n</li>\n</ul>\n<h2 id=\"正则表示式对照表\"> 正则表示式对照表</h2>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>说明</th>\n<th>Basic RegEx</th>\n<th>Extended RegEx</th>\n<th>python RegEx</th>\n<th>Perl regEx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>转义</td>\n<td></td>\n<td>\\</td>\n<td>\\</td>\n<td>\\</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配行首，例如'^dog'匹配以字符串dog开头的行（注意：awk 指令中，'^'则是匹配字符串的开始）</td>\n<td>^</td>\n<td>^</td>\n<td>^</td>\n<td>^</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配行尾，例如：'^、dog<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span><span></span><span><span><span><span style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>匹配以字符串</span><span>d</span><span>o</span><span style=\"margin-right:0.03588em;\">g</span><span>为结尾的行（注意：</span><span>a</span><span style=\"margin-right:0.02691em;\">w</span><span style=\"margin-right:0.03148em;\">k</span><span>指令中</span><span><span>，</span><span><span><span><span style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span>'则是匹配字符串的结尾）</td>\n<td>$</td>\n<td>$</td>\n<td>$</td>\n<td>$</td>\n</tr>\n<tr>\n<td>^$</td>\n<td>匹配空行</td>\n<td>^$</td>\n<td>^$</td>\n<td>^$</td>\n<td>^$</td>\n</tr>\n<tr>\n<td>^string$</td>\n<td>匹配行，例如：'^dog$'匹配只含一个字符串 dog 的行</td>\n<td>^string$</td>\n<td>^string$</td>\n<td>^string$</td>\n<td>^string$</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>匹配单词，例如：'&lt;frog' （等价于'\\bfrog'），匹配以 frog 开头的单词</td>\n<td>&lt;</td>\n<td>&lt;</td>\n<td>不支持</td>\n<td>不支持（但可以使用\\b来匹配单词，例如：'\\bfrog'）</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>匹配单词，例如：'frog&gt;'（等价于'frog\\b '），匹配以 frog 结尾的单词</td>\n<td>&gt;</td>\n<td>&gt;</td>\n<td>不支持</td>\n<td>不支持（但可以使用\\b来匹配单词，例如：'frog\\b'）</td>\n</tr>\n<tr>\n<td>&lt;x&gt;</td>\n<td>匹配一个单词或者一个特定字符，例如：'&lt;frog&gt;'（等价于'\\bfrog\\b'）、'&lt;G&gt;'</td>\n<td>&lt;x&gt;</td>\n<td>&lt;x&gt;</td>\n<td>不支持</td>\n<td>不支持（但可以使用\\b来匹配单词，例如：'\\bfrog\\b'</td>\n</tr>\n<tr>\n<td>()</td>\n<td>匹配表达式，例如：不支持'（frog）'</td>\n<td>不支持（但可以使用，如：dog</td>\n<td>()</td>\n<td>()</td>\n<td>()</td>\n</tr>\n<tr>\n<td></td>\n<td>匹配表达式，例如：不支持'（frog）'</td>\n<td></td>\n<td>不支持（同())</td>\n<td>不支持（同())</td>\n<td>不支持（同())</td>\n</tr>\n<tr>\n<td>？</td>\n<td>匹配前面的子表达式 0 次或 1 次（等价于{0,1}），例如：where(is)?能匹配&quot;where&quot; 以及&quot;whereis&quot;</td>\n<td>不支持（同?)</td>\n<td>？</td>\n<td>？</td>\n<td>？</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式 0 次或 1 次（等价于'{0,1}'），例如：'whereis? '能匹配 &quot;where&quot;以及&quot;whereis&quot;</td>\n<td>?</td>\n<td>不支持（同?)</td>\n<td>不支持（同?)</td>\n<td>不支持（同?)</td>\n</tr>\n<tr>\n<td>?</td>\n<td>当该字符紧跟在任何一个其他限制符（*, +, ?, {n},{n,}, {n,m}） 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 &quot;oooo&quot;，'o+?' 将匹配单个&quot;o&quot;，而 'o+' 将匹配所有 'o'</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符（'\\n'）之外的任意单个字符（注意：awk 指令中的句点能匹配换行符）</td>\n<td>.</td>\n<td>.（如果要匹配包括“\\n”在内的任何一个字符，请使用：'(^$)|（.）</td>\n<td>.</td>\n<td>.（如果要匹配包括“\\n”在内的任何一个字符，请使用：' [.\\n] '</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式 0 次或多次（等价于{0, }），例如：zo* 能匹配 &quot;z&quot;以及 &quot;zoo&quot;</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式 1 次或多次（等价于'{1, }'），例如：'whereis+ '能匹配 &quot;whereis&quot;以及&quot;whereisis&quot;</td>\n<td>+</td>\n<td>不支持（同+)</td>\n<td>不支持（同+)</td>\n<td>不支持（同+)</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式 1 次或多次（等价于{1, }），例如：zo+能匹配 &quot;zo&quot;以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;</td>\n<td>不支持（同+)</td>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n 必须是一个 0 或者正整数，匹配子表达式 n 次，例如：zo{2}能匹配</td>\n<td>不支持（同{n})</td>\n<td>{n}</td>\n<td>{n}</td>\n<td>{n}</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>&quot;zooz&quot;，但不能匹配 &quot;Bob&quot;n 必须是一个 0 或者正整数，匹配子表达式大于等于 n次，例如：go{2,}</td>\n<td>不支持（同{n,})</td>\n<td>{n,}</td>\n<td>{n,}</td>\n<td>{n,}</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>能匹配 &quot;good&quot;，但不能匹配 godm 和 n 均为非负整数，其中 n &lt;= m，最少匹配 n 次且最多匹配 m 次 ，例如：o{1,3}将配&quot;fooooood&quot; 中的前三个 o（请注意在逗号和两个数之间不能有空格）</td>\n<td>不支持（同{n,m})</td>\n<td>{n,m}</td>\n<td>{n,m}</td>\n<td>{n,m}</td>\n</tr>\n<tr>\n<td>x|y</td>\n<td>匹配 x 或 y，例如： 不支持'z|（food）' 能匹配 &quot;z&quot; 或&quot;food&quot;；'（z|f）ood' 则匹配&quot;zood&quot; 或 &quot;food&quot;</td>\n<td>不支持（同x|y)</td>\n<td>x|y</td>\n<td>x|y</td>\n<td>x|y</td>\n</tr>\n<tr>\n<td>[0-9]</td>\n<td>匹配从 0 到 9 中的任意一个数字字符（注意：要写成递增）</td>\n<td>[0-9]</td>\n<td>[0-9]</td>\n<td>[0-9]</td>\n<td>[0-9]</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>字符集合，匹配所包含的任意一个字符，例如：'[abc]'可以匹配&quot;lay&quot; 中的 'a'（注意：如果元字符，例如：. *等，它们被放在[ ]中，那么它们将变成一个普通字符）</td>\n<td>[xyz]</td>\n<td>[xyz]</td>\n<td>[xyz]</td>\n<td>[xyz]</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>负值字符集合，匹配未包含的任意一个字符（注意：不包括换行符），例如：'[^abc]' 可以匹配 &quot;Lay&quot; 中的'L'（注意：[^xyz]在awk 指令中则是匹配未包含的任意一个字符+换行符）</td>\n<td>[^xyz]</td>\n<td>[^xyz]</td>\n<td>[^xyz]</td>\n<td>[^xyz]</td>\n</tr>\n<tr>\n<td>[A-Za-z]</td>\n<td>匹配大写字母或者小写字母中的任意一个字符（注意：要写成递增）</td>\n<td>[A-Za-z]</td>\n<td>[A-Za-z]</td>\n<td>[A-Za-z]</td>\n<td>[A-Za-z]</td>\n</tr>\n<tr>\n<td>[^A-Za-z]</td>\n<td>匹配除了大写与小写字母之外的任意一个字符（注意：写成递增）</td>\n<td>[^A-Za-z]</td>\n<td>[^A-Za-z]</td>\n<td>[^A-Za-z]</td>\n<td>[^A-Za-z]</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配从 0 到 9 中的任意一个数字字符（等价于 [0-9]）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\d</td>\n<td>\\d</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配非数字字符（等价于 [^0-9]）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\D</td>\n<td>\\D</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符（等价于[^\\f\\n\\r\\t\\v]）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\S</td>\n<td>\\S</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等（等价于[ \\f\\n\\r\\t\\v]）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\s</td>\n<td>\\s</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符 (等价于[^A-Za-z0-9_])</td>\n<td>\\W</td>\n<td>\\W</td>\n<td>\\W</td>\n<td>\\W</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配包括下划线的任何单词字符（等价于[A-Za-z0-9_]）</td>\n<td>\\w</td>\n<td>\\w</td>\n<td>\\w</td>\n<td>\\w</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界，例如：'er\\B' 能匹配 &quot;verb&quot; 中的'er'，但不能匹配&quot;never&quot; 中的'er'</td>\n<td>\\B</td>\n<td>\\B</td>\n<td>\\B</td>\n<td>\\B</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界，也就是指单词和空格间的位置，例如： 'er\\b' 可以匹配&quot;never&quot; 中的 'er'，但不能匹配 &quot;verb&quot; 中的'er'</td>\n<td>\\b</td>\n<td>\\b</td>\n<td>\\b</td>\n<td>\\b</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个横向制表符（等价于 \\x09和 \\cI）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\t</td>\n<td>\\t</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符（等价于 \\x0b和 \\cK）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\v</td>\n<td>\\v</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符（等价于 \\x0a 和\\cJ）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\n</td>\n<td>\\n</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符（等价于\\x0c 和\\cL）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\f</td>\n<td>\\f</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符（等价于 \\x0d 和\\cM）</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>\\r</td>\n<td>\\r</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>匹配转义字符本身&quot;&quot;</td>\n<td>\\</td>\n<td>\\</td>\n<td>\\</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>\\cx</td>\n<td>匹配由 x 指明的控制字符，例如：\\cM匹配一个Control-M 或回车符，x 的值必须为A-Z 或 a-z 之一，否则，将 c 视为一个原义的 'c' 字符</td>\n<td>不支持</td>\n<td>不支持</td>\n<td></td>\n<td>\\cx</td>\n</tr>\n<tr>\n<td>\\xn</td>\n<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长，例如：'\\x41' 匹配 &quot;A&quot;。'\\x041' 则等价于'\\x04' &amp; &quot;1&quot;。正则表达式中可以使用 ASCII 编码</td>\n<td>不支持</td>\n<td>不支持</td>\n<td></td>\n<td>\\xn</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>匹配 num，其中 num是一个正整数。表示对所获取的匹配的引用</td>\n<td>不支持</td>\n<td>\\num</td>\n<td>\\num</td>\n<td></td>\n</tr>\n<tr>\n<td>[:alnum:]</td>\n<td>匹配任何一个字母或数字（[A-Za-z0-9]），例如：'[[:alnum:]] '</td>\n<td>[:alnum:]</td>\n<td>[:alnum:]</td>\n<td>[:alnum:]</td>\n<td>[:alnum:]</td>\n</tr>\n<tr>\n<td>[:alpha:]</td>\n<td>匹配任何一个字母（[A－Za－z]）， 例如：' [[:alpha:]] '</td>\n<td>[:alpha:]</td>\n<td>[:alpha:]</td>\n<td>[:alpha:]</td>\n<td>[:alpha:]</td>\n</tr>\n<tr>\n<td>[:digit:]</td>\n<td>匹配任何一个数字（[0-9]），例如：'[[:digit:]] '</td>\n<td>[:digit:]</td>\n<td>[:digit:]</td>\n<td>[:digit:]</td>\n<td>[:digit:]</td>\n</tr>\n<tr>\n<td>[:lower:]</td>\n<td>匹配任何一个小写字母（[a-z]）， 例如：' [[:lower:]] '</td>\n<td>[:lower:]</td>\n<td>[:lower:]</td>\n<td>[:lower:]</td>\n<td>[:lower:]</td>\n</tr>\n<tr>\n<td>[:upper:]</td>\n<td>匹配任何一个大写字母（[A-Z]）</td>\n<td>[:upper:]</td>\n<td>[:upper:]</td>\n<td>[:upper:]</td>\n<td>[:upper:]</td>\n</tr>\n<tr>\n<td>[:space:]</td>\n<td>任何一个空白字符： 支持制表符、空格，例如：' [[:space:]] '</td>\n<td>[:space:]</td>\n<td>[:space:]</td>\n<td>[:space:]</td>\n<td>[:space:]</td>\n</tr>\n<tr>\n<td>[:blank:]</td>\n<td>空格和制表符（横向和纵向），例如：'[[:blank:]]'ó'[\\s\\t\\v]'</td>\n<td>[:blank:]</td>\n<td>[:blank:]</td>\n<td>[:blank:]</td>\n<td>[:blank:]</td>\n</tr>\n<tr>\n<td>[:graph:]</td>\n<td>任何一个可以看得见的且可以打印的字符（注意：不包括空格和换行符等），例如：'[[:graph:]] '</td>\n<td>[:graph:]</td>\n<td>[:graph:]</td>\n<td>[:graph:]</td>\n<td>[:graph:]</td>\n</tr>\n<tr>\n<td>[:print:]</td>\n<td>任何一个可以打印的字符（注意：不包括：[:cntrl:]、字符串结束符'\\0'、EOF 文件结束符（-1）， 但包括空格符号），例如：'[[:print:]] '</td>\n<td>[:print:]</td>\n<td>[:print:]</td>\n<td>[:print:]</td>\n<td>[:print:]</td>\n</tr>\n<tr>\n<td>[:cntrl:]</td>\n<td>任何一个控制字符（ASCII 字符集中的前 32 个字符，即：用十进制表示为从 0 到31，例如：换行符、制表符等等），例如：' [[:cntrl:]]'</td>\n<td>[:cntrl:]</td>\n<td>[:cntrl:]</td>\n<td>[:cntrl:]</td>\n<td>[:cntrl:]</td>\n</tr>\n<tr>\n<td>[:punct:]</td>\n<td>任何一个标点符号（不包括：[:alnum:]、[:cntrl:]、[:space:]这些字符集）</td>\n<td>[:punct:]</td>\n<td>[:punct:]</td>\n<td>[:punct:]</td>\n<td>[:punct:]</td>\n</tr>\n<tr>\n<td>[:xdigit:]</td>\n<td>任何一个十六进制数（即：0-9，a-f，A-F）</td>\n<td>[:xdigit:]</td>\n<td>[:xdigit:]</td>\n<td>[:xdigit:]</td>\n<td>[:xdigit:]</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常用正则表达式\"> 常用正则表达式</h2>\n<p>1.验证用户名和密码：（&quot;<sup></sup>\\w{5,15}<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\d at position 60: …；\n2.验证电话号码：（&quot;^(\\̲d̲{3,4}-)\\d{7,8}'>&quot;）正确格式：&quot;[A-Z][a-z]_[0-9]&quot;组成,并且第一个字必须为字母6~16位；\n2.验证电话号码：（&quot;^(\\d{3,4}-)\\d{7,8}</span>&quot;）正确格式：xxx/xxxx-xxxxxxx/xxxxxxxx；\n3.验证手机号码：&quot;^1[3|4|5|7|8][0-9]\\d{8}<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\d at position 25: …证号（15位或18位数字）：&quot;\\̲d̲{14}[[0-9],0-9x…'>&quot;；\n4.验证身份证号（15位或18位数字）：&quot;\\d{14}[[0-9],0-9xX]&quot;；\n5.验证Email地址：(&quot;^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*</span>&quot;)；\n6.只能输入由数字和26个英文字母组成的字符串：(&quot;<sup></sup>+<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1.138em;vertical-align:-0.25em;\"></span><span>&quot;</span><span>)</span><span>；</span><span>7.</span><span>整数或者小数</span><span><span>：</span><span><span><span><span style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>[</span></span></span></span></span></span></span></span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>9</span><span>]</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>([</span><span>.</span><span>]</span><span>[</span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>9</span><span>]</span><span>+</span><span>)</span><span><span>0</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>1</span></span></span></span></span>\n8.只能输入数字：&quot;<sup></sup><em><span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\d at position 18: …\n9.只能输入n位的数字：&quot;^\\̲d̲{n}'>&quot;。\n9.只能输入n位的数字：&quot;^\\d{n}</span>&quot;。\n10.只能输入至少n位的数字：&quot;^\\d{n,}<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\d at position 21: ….只能输入m~n位的数字：&quot;^\\̲d̲{m,n}'>&quot;。\n11.只能输入m~n位的数字：&quot;^\\d{m,n}</span>&quot;。\n12.只能输入零和非零开头的数字：&quot;^(0|[1-9][0-9]</em>)<span class='katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;\\.&#039; in math mode at position 30: …数的正实数：&quot;^[0-9]+(\\̲.̲[0-9]{2})?'>&quot;。\n13.只能输入有两位小数的正实数：&quot;^[0-9]+(\\.[0-9]{2})?</span>&quot;。\n14.只能输入有1~3位小数的正实数：&quot;<sup></sup>+(.[0-9]{1,3})?<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\+ at position 20: …5.只能输入非零的正整数：&quot;^\\̲+̲?[1-9][0-9]*'>&quot;。\n15.只能输入非零的正整数：&quot;^\\+?[1-9][0-9]*</span>&quot;。\n16.只能输入非零的负整数：&quot;^-[1-9][0-9]*<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>&quot;</span><span>。</span><span>17.</span><span>只能输入长度为</span><span>3</span><span>的字符：</span><span><span>&quot;</span><span><span><span><span style=\"height:0.436892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>.</span></span></span></span></span></span></span></span><span><span>3</span></span></span></span></span>&quot;。\n18.只能输入由26个英文字母组成的字符串：&quot;<sup></sup>+<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.9713299999999999em;vertical-align:-0.08333em;\"></span><span>&quot;</span><span>。</span><span>19.</span><span>只能输入由</span><span>26</span><span>个大写英文字母组成的字符串：</span><span><span>&quot;</span><span><span><span><span style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>[</span></span></span></span></span></span></span></span><span>A</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span style=\"margin-right:0.07153em;\">Z</span><span>]</span><span>+</span></span></span></span>&quot;。\n20.只能输入由26个小写英文字母组成的字符串：&quot;<sup></sup>+<span class='katex-error' title='ParseError: KaTeX parse error: Expected group after &#039;^&#039; at position 13: &quot;。\n21.验证是否含有^̲%&amp;&#039;,;=?'>&quot;。\n21.验证是否含有^%&amp;&#039;,;=?</span>&quot;等字符：&quot;[%&amp;',;=?<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.9713299999999999em;vertical-align:-0.08333em;\"></span><span><span></span><span><span><span><span style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>]</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1.138em;vertical-align:-0.25em;\"></span><span>&quot;</span><span>。</span><span>22.</span><span>验证一年的</span><span>12</span><span>个月：</span><span><span>&quot;</span><span><span><span><span style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>(</span></span></span></span></span></span></span></span><span>0</span><span>?</span><span>[</span><span>1</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>9</span><span>]</span><span>∣1</span><span>[</span><span>0</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>2</span><span>])</span></span></span></span>&quot;正确格式为：&quot;01&quot;～&quot;09&quot;和&quot;10&quot;～&quot;12&quot;。\n23.验证一个月的31天：&quot;^((0?[1-9])|((1|2)[0-9])|30|31)<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\- at position 61: …正则表达式：\\\\d{4}[年|\\̲-̲|\\.]\\d{\\1-\\12}[…'>&quot;正确格式为；&quot;01&quot;～&quot;09&quot;、&quot;10&quot;～&quot;29&quot;和“30”~“31”。\n24.获取日期正则表达式：\\\\d{4}[年|\\-|\\.]\\d{\\1-\\12}[月|\\-|\\.]\\d{\\1-\\31}日?评注：可用来匹配大多数年月日信息。\n25.匹配空白行的正则表达式：\\n\\s*\\r评注：可以用来删除空白行\n26匹配HTML标记的正则表达式：&lt;(\\S*?)\\[^&gt;]*&gt;.*?&lt;/&gt;|&lt;.*? /&gt;评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力\n27.匹配首尾空白字符的正则表达式：^\\s*|\\s*</span>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式\n28.匹配网址URL的正则表达式：[a-zA-z]+://[^\\s]*评注：网上流传的版本功能很有限，上面这个基本可以满足需求\n29.匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<sup></sup>[a-zA-Z0-9_]{4,15}$评注：表单验证时很实用\n30.匹配腾讯QQ号：[1-9][0-9]{4,}评注：腾讯QQ号从10 000 开始\n31.匹配中国邮政编码：[1-9]\\d{5}(?!\\d)评注：中国邮政编码为6位数字\n32.匹配ip地址：([0-9]{1,3}.){3}[0-9]。评注：提取ip地址时有用\n33.匹配MAC地址：([A-Fa-f0-9]{2}😃{5}[A-Fa-f0-9]</p>\n<p>一、校验数字的表达式</p>\n<p>• 数字：<sup></sup>*$</p>\n<p>• n位的数字：^d{n}$</p>\n<p>• 至少n位的数字：^d{n,}$</p>\n<p>• m-n位的数字：^d{m,n}$</p>\n<p>• 零和非零开头的数字：^(0|[1-9][0-9]*)$</p>\n<p>• 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</p>\n<p>• 带1-2位小数的正数或负数：^(-)?d+(.d{1,2})?$</p>\n<p>• 正数、负数、和小数：^(-|+)?d+(.d+)?$</p>\n<p>• 有两位小数的正实数：<sup></sup>+(.[0-9]{2})?$</p>\n<p>• 有1~3位小数的正实数：<sup></sup>+(.[0-9]{1,3})?$</p>\n<p>• 非零的正整数：<sup></sup>d*$ 或 ^([1-9][0-9]<em>){1,3}$ 或 ^+?[1-9][0-9]</em>$</p>\n<p>• 非零的负整数：^-[1-9][]0-9″<em>$ 或 ^-[1-9]d</em>$</p>\n<p>• 非负整数：^d+$ 或 <sup></sup>d*|0$</p>\n<p>• 非正整数：^-[1-9]d*|0$ 或 ^((-d+)|(0+))$</p>\n<p>• 非负浮点数：^d+(.d+)?$ 或 <sup></sup>d*.d*|0.d*[1-9]d*|0?.0+|0$</p>\n<p>• 非正浮点数：^((-d+(.d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$</p>\n<p>• 正浮点数：<sup></sup>d*.d*|0.d*[1-9]d*$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</p>\n<p>• 负浮点数：^-([1-9]d*.d*|0.d*[1-9]d*)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$</p>\n<p>• 浮点数：^(-?d+)(.d+)?$ 或 ^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$</p>\n<p>二、校验字符的表达式</p>\n<p>• 汉字：<sup></sup>{0,}$</p>\n<p>• 英文和数字：<sup></sup>+$ 或 <sup></sup>{4,40}$</p>\n<p>• 长度为3-20的所有字符：^.{3,20}$</p>\n<p>• 由26个英文字母组成的字符串：<sup></sup>+$</p>\n<p>• 由26个大写英文字母组成的字符串：<sup></sup>+$</p>\n<p>• 由26个小写英文字母组成的字符串：<sup></sup>+$</p>\n<p>• 由数字和26个英文字母组成的字符串：<sup></sup>+$</p>\n<p>• 由数字、26个英文字母或者下划线组成的字符串：^w+$ 或 ^w{3,20}$</p>\n<p>• 中文、英文、数字包括下划线：<sup></sup>+$</p>\n<p>• 中文、英文、数字但不包括下划线等符号：<sup></sup>+$ 或 <sup></sup>{2,20}$</p>\n<p>• 可以输入含有^%&amp;’,;=?<span class='katex-error' title='ParseError: KaTeX parse error: Expected group after &#039;^&#039; at position 7: ”等字符：[^̲%&amp;&#039;,;=?'>”等字符：[^%&amp;&#039;,;=?</span>&quot;]+</p>\n<p>• 禁止输入含有<sub>的字符：[^</sub>&quot;]+</p>\n<p>三、特殊需求表达式</p>\n<p>• Email地址：^w+([-+.]w+)<em>@w+([-.]w+)</em>.w+([-.]w+)*$</p>\n<p>• 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p>\n<p>• InternetURL：[a-zA-z]+://[^s]* 或 ^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$</p>\n<p>• 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])d{8}$</p>\n<p>• 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^($$d{3,4}-)|d{3.4}-)?d{7,8}$</p>\n<p>• 国内电话号码(0511-4405222、021-87888822)：d{3}-d{8}|d{4}-d{7}</p>\n<p>• 身份证号(15位、18位数字)：^d{15}|d{18}$</p>\n<p>• 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</p>\n<p>• 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<sup></sup>[a-zA-Z0-9_]{4,15}$</p>\n<p>• 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<sup></sup>w{5,17}$</p>\n<p>• 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p>\n<p>• 日期格式：^d{4}-d{1,2}-d{1,2}</p>\n<p>• 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p>\n<p>• 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</p>\n<p>• 钱的输入格式：</p>\n<p>• 有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00″, 和没有 “分” 的 “10000″ 和 “10,000″：<sup></sup>[0-9]*$</p>\n<p>• 这表示任意一个不以0开头的数字，但是，这也意味着一个字符”0″不通过，所以我们采用下面的形式：^(0|[1-9][0-9]*)$</p>\n<p>• 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</p>\n<p>• 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉，因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<sup></sup>+(.[0-9]+)?$</p>\n<p>• 必须说明的是，小数点后面至少应该有1位数，所以”10.”是不通过的，但是 “10″ 和 “10.2″ 是通过的：<sup></sup>+(.[0-9]{2})?$</p>\n<p>• 这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样：<sup></sup>+(.[0-9]{1,2})?$</p>\n<p>• 这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样：<sup></sup>{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</p>\n<p>• 1到3个数字，后面跟着任意个 逗号+3个数字，逗号成为可选，而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</p>\n<p>• 备注：这就是最终结果了，别忘了”+”可以用”*”替代。如果你觉得空字符串也可以接受的话(奇怪，为什么?)最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里</p>\n<p>• xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+.[x|X][m|M][l|L]$</p>\n<p>• 中文字符的正则表达式：[一-龥]</p>\n<p>• 双字节字符：[^-ÿ] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p>\n<p>• 空白行的正则表达式：s* (可以用来删除空白行)</p>\n<p>• HTML标记的正则表达式：&lt;(S*?)[^&gt;]<em>&gt;.</em>?&lt;/&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p>\n<p>• 首尾空白字符的正则表达式：^s*|s*<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span>或</span><span><span>(</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>s</span></span></span></span></span></span></span></span><span>∗</span><span>)</span><span>∣</span><span>(</span><span>s</span><span>∗</span></span></span></span>) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p>\n<p>• 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</p>\n<p>• 中国邮政编码：[1-9]d{5}(?!d) (中国邮政编码为6位数字)</p>\n<p>• IP地址：d+.d+.d+.d+ (提取IP地址时有用)</p>\n<p>• IP地址：((?😦?:25[0-5]|2[0-4]d|[01]?d?d).){3}(?:25[0-5]|2[0-4]d|[01]?d?d))</p>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>a-zA-Z </p>\n</li>\n<li id=\"fn2\"><p>A-Za-z0-9 </p>\n</li>\n<li id=\"fn3\"><p>0-9 </p>\n</li>\n<li id=\"fn4\"><p>0-9 </p>\n</li>\n<li id=\"fn5\"><p>A-Za-z </p>\n</li>\n<li id=\"fn6\"><p>a-z </p>\n</li>\n<li id=\"fn7\"><p>a-zA-Z </p>\n</li>\n<li id=\"fn8\"><p>0-9 </p>\n</li>\n<li id=\"fn9\"><p>0-9 </p>\n</li>\n<li id=\"fn10\"><p>0-9 </p>\n</li>\n<li id=\"fn11\"><p>1-9 </p>\n</li>\n<li id=\"fn12\"><p>1-9 </p>\n</li>\n<li id=\"fn13\"><p>1-9 </p>\n</li>\n<li id=\"fn14\"><p>1-9 </p>\n</li>\n<li id=\"fn15\"><p>一-龥 </p>\n</li>\n<li id=\"fn16\"><p>A-Za-z0-9 </p>\n</li>\n<li id=\"fn17\"><p>A-Za-z0-9 </p>\n</li>\n<li id=\"fn18\"><p>A-Za-z </p>\n</li>\n<li id=\"fn19\"><p>A-Z </p>\n</li>\n<li id=\"fn20\"><p>a-z </p>\n</li>\n<li id=\"fn21\"><p>A-Za-z0-9 </p>\n</li>\n<li id=\"fn22\"><p>一-龥A-Za-z0-9_ </p>\n</li>\n<li id=\"fn23\"><p>一-龥A-Za-z0-9 </p>\n</li>\n<li id=\"fn24\"><p>一-龥A-Za-z0-9 </p>\n</li>\n<li id=\"fn25\"><p>a-zA-Z </p>\n</li>\n<li id=\"fn26\"><p>a-zA-Z </p>\n</li>\n<li id=\"fn27\"><p>1-9 </p>\n</li>\n<li id=\"fn28\"><p>0-9 </p>\n</li>\n<li id=\"fn29\"><p>0-9 </p>\n</li>\n<li id=\"fn30\"><p>0-9 </p>\n</li>\n<li id=\"fn31\"><p>0-9 </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "18 正则表达式",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/18_regular_expressions/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/18_regular_expressions/",
      "content_html": "<h1 id=\"_18-正则表达式\"> 18 正则表达式</h1>\n<blockquote>\n<p><em>...the intellectual activity associated with software development is largely one of gaining insight.</em>\n<em>--Stowe Boyd</em></p>\n</blockquote>\n<p>目录</p>\n<ul>\n<li><a href=\"http://tldp.org/LDP/abs/html/x17129.html\" target=\"_blank\" rel=\"noopener noreferrer\">18.1 正则表达式简介</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/globbingref.html\" target=\"_blank\" rel=\"noopener noreferrer\">18.2 文件名替换</a></li>\n</ul>\n<p>为了充分利用shell脚本，您需要熟练掌握正则表达式。有一些在脚本中常用的特定的命令和工具，例如grep、expr、sed和awk，这些命令会解释和使用正则表达式。版本三的bash实现了它独特的正则匹配符：=~。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "19 嵌入文档",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/19_here_documents/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/19_here_documents/",
      "content_html": "<h1 id=\"_19-嵌入文档\"> 19 嵌入文档</h1>\n<blockquote>Here and now, boys.\n&emsp;&emsp;&emsp;&emsp;--Aldous Huxley, Island</blockquote>\n<p>嵌入文档是一段有特殊作用的代码块，它用 <a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#IOREDIRREF\" target=\"_blank\" rel=\"noopener noreferrer\">I/O 重定向</a> 在交互程序和交互命令中传递和反馈一个命令列表，例如 <a href=\"http://tldp.org/LDP/abs/html/communications.html#FTPREF\" target=\"_blank\" rel=\"noopener noreferrer\">ftp</a>，<a href=\"http://tldp.org/LDP/abs/html/basic.html#CATREF\" target=\"_blank\" rel=\"noopener noreferrer\">cat</a> 或者是 ex 文本编辑器</p>\n<div><pre><code>COMMAND &lt;&lt;InputComesFromHERE\n...\n...\n...\nInputComesFromHERE\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>嵌入文档用限定符作为命令列表的边界，在限定符前需要一个指定的标识符 <code>&lt;&lt;</code>，这会将一个程序或命令的标准输入(stdin)进行重定向，它类似 <code>交互程序 &lt; 命令文件</code> 的方式，其中命令文件内容如下</p>\n<div><pre><code>command #1\ncommand #2\n...\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>嵌入文档的格式大致如下</p>\n<div><pre><code>interactive-program &lt;&lt;LimitString\ncommand #1\ncommand #2\n...\nLimitString\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>限定符的选择必须保证特殊以确保不会和命令列表里的内容发生混淆。</p>\n<p>注意嵌入文档有时候用作非交互的工具和命令有着非常好的效果，例如 <a href=\"http://tldp.org/LDP/abs/html/system.html#WALLREF\" target=\"_blank\" rel=\"noopener noreferrer\">wall</a></p>\n<p>样例 19-1. broadcast: 给每个登陆者发送信息</p>\n<div><pre><code>#!/bin/bash\n\nwall &lt;&lt;zzz23EndOfMessagezzz23\nE-mail your noontime orders for pizza to the system administrator.\n    (Add an extra dollar for anchovy or mushroom topping.)\n# 额外的信息文本.\n# 注意: &#39;wall&#39; 会打印注释行.\nzzz23EndOfMessagezzz23\n\n# 更有效的做法是通过\n#         wall &lt; 信息文本\n#  然而, 在脚本里嵌入信息模板不乏是一种迅速而又随性的解决方式.\n\nexit\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>样例: 19-2. dummyfile：创建一个有两行内容的虚拟文件</p>\n<div><pre><code>#!/bin/bash\n\n# 非交互的使用 `vi` 编辑文件.\n# 仿照 &#39;sed&#39;.\n\nE_BADARGS=85\n\nif [ -z &quot;$1&quot; ]\nthen\n  echo &quot;Usage: `basename $0` filename&quot;\n  exit $E_BADARGS\nfi\n\nTARGETFILE=$1\n\n# 插入两行到文件中保存\n#--------Begin here document-----------#\nvi $TARGETFILE &lt;&lt;x23LimitStringx23\ni\nThis is line 1 of the example file.\nThis is line 2 of the example file.\n^[\nZZ\nx23LimitStringx23\n#----------End here document-----------#\n\n#  注意 &quot;^&quot; 对 &quot;[&quot; 进行了转义 \n#+ 这段起到了和键盘上按下 Control-V &lt;Esc&gt; 相同的效果.\n\n#  Bram Moolenaar 指出这种情况下 &#39;vim&#39; 可能无法正常工作\n#+ 因为在与终端交互的过程中可能会出现问题.\n\nexit\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>上述脚本实现了 <code>ex</code> 的功能, 而不是 <code>vi</code>. 嵌入文档包含了 <code>ex</code> 足够通用的命令列表来形成自有的类别, 所以又称之为 <code>ex</code> 脚本.</p>\n<div><pre><code>#!/bin/bash\n#  替换所有的以 &quot;.txt&quot; 后缀结尾的文件的 &quot;Smith&quot; 为 &quot;Jones&quot;\n\nORIGINAL=Smith\nREPLACEMENT=Jones\n\nfor word in $(fgrep -l $ORIGINAL *.txt)\ndo\n  # -------------------------------------\n  ex $word &lt;&lt;EOF\n  :%s/$ORIGINAL/$REPLACEMENT/g\n  :wq\nEOF\n  # :%s is the &quot;ex&quot; substitution command.\n  # :wq is write-and-quit.\n  # -------------------------------------\ndone\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>类似的 <code>ex 脚本</code> 是 <code>cat 脚本</code>.</p>\n<p>样例 19-3. 使用 <code>cat</code> 的多行信息</p>\n<div><pre><code>#!/bin/bash\n\n#  &#39;echo&#39; 可以输出单行信息,\n#+  但是如果是输出消息块就有点问题了.\n#   &#39;cat&#39; 嵌入文档却能解决这个局限.\n\ncat &lt;&lt;End-of-message\n-------------------------------------\nThis is line 1 of the message.\nThis is line 2 of the message.\nThis is line 3 of the message.\nThis is line 4 of the message.\nThis is the last line of the message.\n-------------------------------------\nEnd-of-message\n\n#  替换上述嵌入文档内的 7 行文本\n#+   cat &gt; $Newfile &lt;&lt;End-of-message\n#+       ^^^^^^^^^^\n#+ 将输出追加到 $Newfile, 而不是标准输出.\n\nexit 0\n\n\n#--------------------------------------------\n# 由于上面的 &quot;exit 0&quot;，下面的代码将不会生效.\n\n# S.C. points out that the following also works.\necho &quot;-------------------------------------\nThis is line 1 of the message.\nThis is line 2 of the message.\nThis is line 3 of the message.\nThis is line 4 of the message.\nThis is the last line of the message.\n-------------------------------------&quot;\n# 然而, 文本可能不包括双引号除非出现了字符串逃逸.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p><code>-</code> 的作用是标记了一个嵌入文档限制符 (&lt;&lt;-LimitString) ，它能抑制输出的行首的 <code>tab</code> (非空格). 这在脚本可读性方面可能非常有用.</p>\n<p>样例 19-4. 抑制 tab 的多行信息</p>\n<div><pre><code>#!/bin/bash\n# 和之前的样例一样, 但...\n\n#  嵌入文档内的 &#39;-&#39; ，也就是 &lt;&lt;-\n#+ 抑制了文档行首的 &#39;tab&#39;,\n#+ 但 *不是* 空格.\n\ncat &lt;&lt;-ENDOFMESSAGE\n\tThis is line 1 of the message.\n\tThis is line 2 of the message.\n\tThis is line 3 of the message.\n\tThis is line 4 of the message.\n\tThis is the last line of the message.\nENDOFMESSAGE\n# 脚本的输出将左对齐.\n# 行首的 tab 将不会输出.\n\n# 上面 5 行的 &quot;信息&quot; 以 tab 开始, 不是空格.\n# 空格不会受影响 &lt;&lt;- .\n\n# 注意这个选项对 *内嵌的* tab 没有影响.\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>嵌入文档支持参数和命令替换. 因此可以向嵌入文档传递不同的参数,变向的改其输出.</p>\n<p>样例 19-5. 可替换参数的嵌入文档</p>\n<div><pre><code>#!/bin/bash\n# 另一个使用参数替换的 &#39;cat&#39; 嵌入文档.\n\n# 试一试没有命令行参数,   ./scriptname\n# 试一试一个命令行参数,   ./scriptname Mortimer\n# 试试用一两个单词引用命令行参数,\n#                           ./scriptname &quot;Mortimer Jones&quot;\n\nCMDLINEPARAM=1     #  Expect at least command-line parameter.\n\nif [ $# -ge $CMDLINEPARAM ]\nthen\n  NAME=$1          #  If more than one command-line param,\n                   #+ then just take the first.\nelse\n  NAME=&quot;John Doe&quot;  #  Default, if no command-line parameter.\nfi  \n\nRESPONDENT=&quot;the author of this fine script&quot;  \n  \n\ncat &lt;&lt;Endofmessage\n\nHello, there, $NAME.\nGreetings to you, $NAME, from $RESPONDENT.\n\n# 这个注释在输出时显示 (为什么?).\n\nEndofmessage\n\n# 注意输出了空行.\n# 所以可以这样注释.\n\nexit\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>这个包含参数替换的嵌入文档是相当有用的</p>\n<p>样例 19-6. 上传文件对到 <code>Sunsite</code> 入口目录</p>\n<div><pre><code>#!/bin/bash\n# upload.sh\n\n#  上传文件对 (Filename.lsm, Filename.tar.gz)\n#+ 到 Sunsite/UNC (ibiblio.org) 的入口目录.\n#  Filename.tar.gz 是个 tarball.\n#  Filename.lsm is 是个描述文件.\n#  Sunsite 需要 &quot;lsm&quot; 文件, 否则将会退回给发送者\n\n\nE_ARGERROR=85\n\nif [ -z &quot;$1&quot; ]\nthen\n  echo &quot;Usage: `basename $0` Filename-to-upload&quot;\n  exit $E_ARGERROR\nfi  \n\n\nFilename=`basename $1`           # Strips pathname out of file name.\n\nServer=&quot;ibiblio.org&quot;\nDirectory=&quot;/incoming/Linux&quot;\n#  脚本里不需要硬编码,\n#+ 但最好可以替换命令行参数.\n\nPassword=&quot;your.e-mail.address&quot;   # Change above to suit.\n\nftp -n $Server &lt;&lt;End-Of-Session\n# -n 禁用自动登录\n\nuser anonymous &quot;$Password&quot;       #  If this doesn&#39;t work, then try:\n                                 #  quote user anonymous &quot;$Password&quot;\nbinary\nbell                             # Ring &#39;bell&#39; after each file transfer.\ncd $Directory\nput &quot;$Filename.lsm&quot;\nput &quot;$Filename.tar.gz&quot;\nbye\nEnd-Of-Session\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><p>在嵌入文档头部引用或转义&quot;限制符&quot;来禁用参数替换.原因是 <code>引用/转义</code> 限定符能有效的<a href=\"http://tldp.org/LDP/abs/html/escapingsection.html#ESCP\" target=\"_blank\" rel=\"noopener noreferrer\">转义</a>  &quot;$&quot;, &quot;`&quot;, 和 &quot;&quot; 这些<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#SCHARLIST\" target=\"_blank\" rel=\"noopener noreferrer\">特殊符号</a>, 使他们维持字面上的意思. (感谢 Allen Halsey 指出这点.)</p>\n<p>样例 19-7. 禁用参数替换</p>\n<div><pre><code>#!/bin/bash\n#  A &#39;cat&#39; here-document, but with parameter substitution disabled.\n\nNAME=&quot;John Doe&quot;\nRESPONDENT=&quot;the author of this fine script&quot;  \n\ncat &lt;&lt;&#39;Endofmessage&#39;\n\nHello, there, $NAME.\nGreetings to you, $NAME, from $RESPONDENT.\n\nEndofmessage\n\n#   当&#39;限制符&#39;引用或转义时不会有参数替换.\n#   下面的嵌入文档也有同样的效果\n#   cat &lt;&lt;&quot;Endofmessage&quot;\n#   cat &lt;&lt;\\Endofmessage\n\n\n\n#   同样的:\n\ncat &lt;&lt;&quot;SpecialCharTest&quot;\n\nDirectory listing would follow\nif limit string were not quoted.\n`ls -l`\n\nArithmetic expansion would take place\nif limit string were not quoted.\n$((5 + 3))\n\nA a single backslash would echo\nif limit string were not quoted.\n\\\\\n\nSpecialCharTest\n\n\nexit\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>生成脚本或者程序代码时可以用禁用参数的方式来输出文本.</p>\n<p>样例 19-8. 生成其他脚本的脚本</p>\n<div><pre><code>#!/bin/bash\n# generate-script.sh\n# Based on an idea by Albert Reiner.\n\nOUTFILE=generated.sh         # Name of the file to generate.\n\n\n# -----------------------------------------------------------\n# &#39;嵌入文档涵盖了生成脚本的主体部分.\n(\ncat &lt;&lt;&#39;EOF&#39;\n#!/bin/bash\n\necho &quot;This is a generated shell script.&quot;\n#  注意我们现在在一个子 shell 内,\n#+ 我们不能访问 &quot;外部&quot; 脚本变量.\n\necho &quot;Generated file will be named: $OUTFILE&quot;\n#  上面这行并不能按照预期的正常工作\n#+ 因为参数扩展已被禁用.\n#  相反的, 结果是文字输出.\n\na=7\nb=3\n\nlet &quot;c = $a * $b&quot;\necho &quot;c = $c&quot;\n\nexit 0\nEOF\n) &gt; $OUTFILE\n# -----------------------------------------------------------\n\n#  在上述的嵌入文档内引用&#39;限制符&#39;防止变量扩展\n\nif [ -f &quot;$OUTFILE&quot; ]\nthen\n  chmod 755 $OUTFILE\n  # 生成可执行文件.\nelse\n  echo &quot;Problem in creating file: \\&quot;$OUTFILE\\&quot;&quot;\nfi\n\n#  这个方法适用于生成 C, Perl, Python, Makefiles 等等\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><p>可以从嵌入文档的输出设置一个变量的值. 这实际上是种灵活的 <a href=\"http://tldp.org/LDP/abs/html/commandsub.html#COMMANDSUBREF\" target=\"_blank\" rel=\"noopener noreferrer\">命令替换</a>.</p>\n<div><pre><code>variable=$(cat &lt;&lt;SETVAR\nThis variable\nruns over multiple lines.\nSETVAR\n)\n\necho &quot;$variable&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>同样的脚本里嵌入文档可以作为函数的输入.</p>\n<p>样例 19-9. 嵌入文档和函数</p>\n<div><pre><code>#!/bin/bash\n# here-function.sh\n\nGetPersonalData ()\n{\n  read firstname\n  read lastname\n  read address\n  read city \n  read state \n  read zipcode\n} # 可以肯定的是这应该是个交互式的函数, 但 . . .\n\n\n# 作为函数的输入.\nGetPersonalData &lt;&lt;RECORD001\nBozo\nBozeman\n2726 Nondescript Dr.\nBozeman\nMT\n21226\nRECORD001\n\n\necho\necho &quot;$firstname $lastname&quot;\necho &quot;$address&quot;\necho &quot;$city, $state $zipcode&quot;\necho\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>可以这样使用: 作为一个虚构的命令接受嵌入文档的输出. 这样实际上就创建了一个 &quot;匿名&quot; 嵌入文档.</p>\n<p>样例 19-10. &quot;匿名&quot; 嵌入文档</p>\n<div><pre><code>#!/bin/bash\n\n: &lt;&lt;TESTVARIABLES\n${HOSTNAME?}${USER?}${MAIL?}  # Print error message if one of the variables not set.\nTESTVARIABLES\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>\n<li>上面技巧的一种变体允许 &quot;可添加注释&quot; 的代码块.</li>\n</ul>\n<p>样例 19-11. 可添加注释的代码块</p>\n<div><pre><code>#!/bin/bash\n# commentblock.sh\n\n: &lt;&lt;COMMENTBLOCK\necho &quot;This line will not echo.&quot;\n这些注释没有 &quot;#&quot; 前缀.\n则是另一种没有 &quot;#&quot; 前缀的注释方法.\n\n&amp;*@!!++=\n上面这行不会产生报错信息,\n因为 bash 解释器会忽略它.\n\nCOMMENTBLOCK\n\necho &quot;Exit value of above \\&quot;COMMENTBLOCK\\&quot; is $?.&quot;   # 0\n# 没有错误输出.\necho\n\n#  上面的技巧经常用于工作代码的注释用作排错目的\n#  这省去了在每一行开头加上 &quot;#&quot; 前缀,\n#+ 然后调试完不得不删除每行的前缀的重复工作.\n#  注意我们用了 &quot;:&quot;, 在这之上，是可选的.\n\necho &quot;Just before commented-out code block.&quot;\n#  下面这个在双破折号之间的代码不会被执行.\n#  ===================================================================\n: &lt;&lt;DEBUGXXX\nfor file in *\ndo\n cat &quot;$file&quot;\ndone\nDEBUGXXX\n#  ===================================================================\necho &quot;Just after commented-out code block.&quot;\n\nexit 0\n\n\n\n######################################################################\n#  注意, 然而, 如果将变量中包含一个注释的代码块将会引发问题\n#  例如:\n\n\n#/!/bin/bash\n\n  : &lt;&lt;COMMENTBLOCK\n  echo &quot;This line will not echo.&quot;\n  &amp;*@!!++=\n  ${foo_bar_bazz?}\n  $(rm -rf /tmp/foobar/)\n  $(touch my_build_directory/cups/Makefile)\nCOMMENTBLOCK\n\n\n$ sh commented-bad.sh\ncommented-bad.sh: line 3: foo_bar_bazz: parameter null or not set\n\n# 有效的补救办法就是在 49 行的位置加上单引号，变为 &#39;COMMENTBLOCK&#39;.\n\n  : &lt;&lt;&#39;COMMENTBLOCK&#39;\n\n# 感谢 Kurt Pfeifle 指出这一点.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br></div></div><ul>\n<li>另一个漂亮的方法使得&quot;自文档化&quot;的脚本成为可能</li>\n</ul>\n<p>样例 19-12. 自文档化的脚本</p>\n<div><pre><code>#!/bin/bash\n# self-document.sh: self-documenting script\n# Modification of &quot;colm.sh&quot;.\n\nDOC_REQUEST=70\n\nif [ &quot;$1&quot; = &quot;-h&quot;  -o &quot;$1&quot; = &quot;--help&quot; ]     # 请求帮助.\nthen\n  echo; echo &quot;Usage: $0 [directory-name]&quot;; echo\n  sed --silent -e &#39;/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p&#39; &quot;$0&quot; |\n  sed -e &#39;/DOCUMENTATIONXX$/d&#39;; exit $DOC_REQUEST; fi\n\n\n: &lt;&lt;DOCUMENTATIONXX\nList the statistics of a specified directory in tabular format.\n---------------------------------------------------------------\nThe command-line parameter gives the directory to be listed.\nIf no directory specified or directory specified cannot be read,\nthen list the current working directory.\n\nDOCUMENTATIONXX\n\nif [ -z &quot;$1&quot; -o ! -r &quot;$1&quot; ]\nthen\n  directory=.\nelse\n  directory=&quot;$1&quot;\nfi  \n\necho &quot;Listing of &quot;$directory&quot;:&quot;; echo\n(printf &quot;PERMISSIONS LINKS OWNER GROUP SIZE MONTH DAY HH:MM PROG-NAME\\n&quot; \\\n; ls -l &quot;$directory&quot; | sed 1d) | column -t\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>使用 <a href=\"http://tldp.org/LDP/abs/html/here-docs.html#CATSCRIPTREF\" target=\"_blank\" rel=\"noopener noreferrer\">cat script</a> 是另一种可行的方法.</p>\n<div><pre><code>DOC_REQUEST=70\n\nif [ &quot;$1&quot; = &quot;-h&quot;  -o &quot;$1&quot; = &quot;--help&quot; ]     # Request help.\nthen                                       # Use a &quot;cat script&quot; . . .\n  cat &lt;&lt;DOCUMENTATIONXX\nList the statistics of a specified directory in tabular format.\n---------------------------------------------------------------\nThe command-line parameter gives the directory to be listed.\nIf no directory specified or directory specified cannot be read,\nthen list the current working directory.\n\nDOCUMENTATIONXX\nexit $DOC_REQUEST\nfi\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><blockquote>\n<p>另请参阅 <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#ISSPAMMER2\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-28</a>, <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#PETALS\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-40</a>, <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#QKY\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-41</a>, and <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#NIM\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-42</a> 更多样例请阅读脚本附带的注释文档.</p>\n</blockquote>\n<ul>\n<li>嵌入文档创建了临时文件, 但这些文件在打开且不可被其他程序访问后删除.</li>\n</ul>\n<div><pre><code>bash$ bash -c &#39;lsof -a -p $$ -d0&#39; &lt;&lt; EOF\n&gt; EOF\nlsof    1213 bozo    0r   REG    3,5    0 30386 /tmp/t1213-0-sh (deleted)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>\n<li>\n<p>某些工具在嵌入文档内部并不能正常运行.</p>\n</li>\n<li>\n<p>在嵌入文档的最后关闭限定符必须在起始的第一个字符的位置开始.行首不能是空格. 限制符后尾随空格同样会导致意想不到的行为.空格可以防止限制符被当做其他用途. <a href=\"http://tldp.org/LDP/abs/html/here-docs.html#FTN.AEN17822\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a></p>\n</li>\n</ul>\n<div><pre><code>#!/bin/bash\n\necho &quot;----------------------------------------------------------------------&quot;\n\ncat &lt;&lt;LimitString\necho &quot;This is line 1 of the message inside the here document.&quot;\necho &quot;This is line 2 of the message inside the here document.&quot;\necho &quot;This is the final line of the message inside the here document.&quot;\n     LimitString\n#^^^^限制符的缩进. 出错! 这个脚本将不会如期运行.\n\necho &quot;----------------------------------------------------------------------&quot;\n\n#  这些评论在嵌入文档范围外并不能输出\n\necho &quot;Outside the here document.&quot;\n\nexit 0\n\necho &quot;This line had better not echo.&quot;  # 紧跟着个 &#39;exit&#39; 命令.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><ul>\n<li>有些人非常聪明的使用了一个单引号(!)做为限制符. 但这并不是个好主意</li>\n</ul>\n<div><pre><code># 这个可以运行.\ncat &lt;&lt;!\nHello!\n! Three more exclamations !!!\n!\n\n\n# 但是 . . .\ncat &lt;&lt;!\nHello!\nSingle exclamation point follows!\n!\n!\n# Crashes with an error message.\n\n\n# 然而, 下面这样也能运行.\ncat &lt;&lt;EOF\nHello!\nSingle exclamation point follows!\n!\nEOF\n# 使用多字符限制符更为安全.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>为嵌入文档设置这些任务有些复杂, 可以考虑使用 <code>expect</code>, 一种专门用来和程序进行交互的脚本语言。</p>\n<p><strong>Notes:</strong>\n  除此之外, Dennis Benzinger 指出,  <a href=\"http://tldp.org/LDP/abs/html/here-docs.html#LIMITSTRDASH\" target=\"_blank\" rel=\"noopener noreferrer\">使用 &lt;&lt;- 抑制 tab.</a></p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "20.1 使用 exec",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/20_1_use_exec/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/20_1_use_exec/",
      "content_html": "<h1 id=\"_20-1-使用-exec\"> 20.1 使用 exec</h1>\n<p>一个 <code>exec &lt; filename</code> 命令重定向了 <code>标准输入</code> 到一个文件。自此所有 <code>标准输入</code> 都来自该文件而不是默认来源(通常是键盘输入)。在使用 <a href=\"http://tldp.org/LDP/abs/html/sedawk.html#SEDREF\" target=\"_blank\" rel=\"noopener noreferrer\">sed</a> 和 <a href=\"http://tldp.org/LDP/abs/html/awk.html#AWKREF\" target=\"_blank\" rel=\"noopener noreferrer\">awk</a> 时候这种方式可以逐行读文件并逐行解析。</p>\n<p>样例 20-1. 使用 <code>exec</code> 重定向 标准输入</p>\n<div><pre><code>#!/bin/bash\n# 使用 &#39;exec&#39; 重定向 标准输入 .\n\n\nexec 6&lt;&amp;0          # 链接文件描述符 #6 到标准输入.\n                   # .\n\nexec &lt; data-file   # 标准输入被文件 &quot;data-file&quot; 替换\n\nread a1            # 读取文件 &quot;data-file&quot; 首行.\nread a2            # 读取文件 &quot;data-file&quot; 第二行\n\necho\necho &quot;Following lines read from file.&quot;\necho &quot;-------------------------------&quot;\necho $a1\necho $a2\n\necho; echo; echo\n\nexec 0&lt;&amp;6 6&lt;&amp;-\n#  现在在之前保存的位置将从文件描述符 #6 将 标准输出 恢复.\n#+ 且关闭文件描述符 #6 ( 6&lt;&amp;- ) 让其他程序正常使用.\n#\n# &lt;&amp;6 6&lt;&amp;-    also works.\n\necho -n &quot;Enter data  &quot;\nread b1  # 现在按预期的，从正常的标准输入 &quot;read&quot;.\necho &quot;Input read from stdin.&quot;\necho &quot;----------------------&quot;\necho &quot;b1 = $b1&quot;\n\necho\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>同理, <code>exec &gt;filename</code> 重定向 标准输出 到指定文件. 他将所有的命令输出通常是 标准输出 重定向到指定的位置.</p>\n<p><code>exec N &gt; filename</code> 影响整个脚本或当前 shell。<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#PROCESSIDREF\" target=\"_blank\" rel=\"noopener noreferrer\">PID</a> 从重定向脚本或 shell 的那时候已经发生了改变. 然而 <code>N &gt; filename</code> 影响的就是新派生的进程，而不是整个脚本或 shell。</p>\n<p>样例 20-2. 使用 exec 重定向标准输出</p>\n<div><pre><code>#!/bin/bash\n# reassign-stdout.sh\n\nLOGFILE=logfile.txt\n\nexec 6&gt;&amp;1           # 链接文件描述符 #6 到标准输出.\n                    # 保存标准输出.\n\nexec &gt; $LOGFILE     # 标准输出被文件 &quot;logfile.txt&quot; 替换.\n\n# ----------------------------------------------------------- #\n# 所有在这个块里的命令的输出都会发送到文件 $LOGFILE.\n\necho -n &quot;Logfile: &quot;\ndate\necho &quot;-------------------------------------&quot;\necho\n\necho &quot;Output of \\&quot;ls -al\\&quot; command&quot;\necho\nls -al\necho; echo\necho &quot;Output of \\&quot;df\\&quot; command&quot;\necho\ndf\n\n# ----------------------------------------------------------- #\n\nexec 1&gt;&amp;6 6&gt;&amp;-      # 关闭文件描述符 #6 恢复 标准输出.\n\necho\necho &quot;== stdout now restored to default == &quot;\necho\nls -al\necho\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p>样例 20-3. 用 exec 在一个脚本里同时重定向 标准输入 和 标准输出</p>\n<div><pre><code>#!/bin/bash\n# upperconv.sh\n# 转化指定的输入文件成大写.\n\nE_FILE_ACCESS=70\nE_WRONG_ARGS=71\n\nif [ ! -r &quot;$1&quot; ]     # 指定的输入文件是否可读?\nthen\n  echo &quot;Can&#39;t read from input file!&quot;\n  echo &quot;Usage: $0 input-file output-file&quot;\n  exit $E_FILE_ACCESS\nfi                   #  同样的错误退出\n                     #+ 等同如果输入文件 ($1) 未指定 (为什么?).\n\nif [ -z &quot;$2&quot; ]\nthen\n  echo &quot;Need to specify output file.&quot;\n  echo &quot;Usage: $0 input-file output-file&quot;\n  exit $E_WRONG_ARGS\nfi\n\n\nexec 4&lt;&amp;0\nexec &lt; $1            # 将从输入文件读取.\n\nexec 7&gt;&amp;1\nexec &gt; $2            # 将写入输出文件.\n                     # 假定输出文件可写 (增加检测?).\n\n# -----------------------------------------------\n    cat - | tr a-z A-Z   # 转化大写.\n#   ^^^^^                # 读取标准输入.\n#           ^^^^^^^^^^   # 写到标准输出.\n# 然而标准输入和标准输出都会被重定向.\n# 注意 &#39;cat&#39; 可能会被遗漏.\n# -----------------------------------------------\n\nexec 1&gt;&amp;7 7&gt;&amp;-       # 恢复标准输出.\nexec 0&lt;&amp;4 4&lt;&amp;-       # 恢复标准输入.\n\n# 恢复后, 下面这行会预期从标准输出打印.\necho &quot;File \\&quot;$1\\&quot; written to \\&quot;$2\\&quot; as uppercase conversion.&quot;\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p>I/O 重定向是种明智的规避 <a href=\"http://tldp.org/LDP/abs/html/subshells.html#PARVIS\" target=\"_blank\" rel=\"noopener noreferrer\">inaccessible variables within a subshell</a> 问题的方法.</p>\n<p>样例 20-4. 规避子 shell</p>\n<div><pre><code>#!/bin/bash\n# avoid-subshell.sh\n# Matthew Walker 的建议.\n\nLines=0\n\necho\n\ncat myfile.txt | while read line;\n                 do {\n                   echo $line\n                   (( Lines++ ));  #  递增变量的值趋近外层循环\n                                   #  使用子 shell 会有问题.\n                 }\n                 done\n\necho &quot;Number of lines read = $Lines&quot;     # 0\n                                         # 报错!\n\necho &quot;------------------------&quot;\n\n\nexec 3&lt;&gt; myfile.txt\nwhile read line &lt;&amp;3\ndo {\n  echo &quot;$line&quot;\n  (( Lines++ ));                   #  递增变量的值趋近外层循环.\n                                   #  没有子 shell，就不会有问题.\n}\ndone\nexec 3&gt;&amp;-\n\necho &quot;Number of lines read = $Lines&quot;     # 8\n\necho\n\nexit 0\n\n# 下面的行并不在脚本里.\n\n$ cat myfile.txt\n\nLine 1.\nLine 2.\nLine 3.\nLine 4.\nLine 5.\nLine 6.\nLine 7.\nLine 8.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "20.2 重定向代码块",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/20_2_redirecting_code_blocks/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/20_2_redirecting_code_blocks/",
      "content_html": "<h1 id=\"_20-2-重定向代码块\"> 20.2 重定向代码块</h1>\n<p>有如 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#WHILELOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\">while</a>, <a href=\"http://tldp.org/LDP/abs/html/loops1.html#FORLOOPREF1\" target=\"_blank\" rel=\"noopener noreferrer\">until</a>, 和 <a href=\"http://tldp.org/LDP/abs/html/loops1.html#UNTILLOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\">for</a> 循环, 甚至 <a href=\"http://tldp.org/LDP/abs/html/tests.html#IFTHEN\" target=\"_blank\" rel=\"noopener noreferrer\">if/then</a> 也可以重定向 标准输入 测试代码块. 甚至连一个函数都可以用这个方法进行重定向 (见 <a href=\"http://tldp.org/LDP/abs/html/complexfunct.html#REALNAME\" target=\"_blank\" rel=\"noopener noreferrer\">样例 24-11</a>).  代码块的末尾部分的 &quot;&lt;&quot; 就是用来完成这个的.</p>\n<p>样例 20-5. while 循环的重定向</p>\n<div><pre><code>#!/bin/bash\n# redir2.sh\n\nif [ -z &quot;$1&quot; ]\nthen\n  Filename=names.data       # 如果不指定文件名的默认值.\nelse\n  Filename=$1\nfi  \n#+ Filename=${1:-names.data}\n#  can replace the above test (parameter substitution).\n\ncount=0\n\necho\n\nwhile [ &quot;$name&quot; != Smith ]  # 为什么变量 &quot;$name&quot; 加引号?\ndo\n  read name                 # 从 $Filename 读取值, 而不是 标准输入.\n  echo $name\n  let &quot;count += 1&quot;\ndone &lt;&quot;$Filename&quot;           # 重定向标准输入到文件 $Filename. \n#    ^^^^^^^^^^^^\n\necho; echo &quot;$count names read&quot;; echo\n\nexit 0\n\n#  注意在一些老的脚本语言中,\n#+ 循环的重定向会跑在子 shell 的环境中.\n#  因此, $count 返回 0, 在循环外已经初始化过值.\n#  Bash 和 ksh *只要可能* 会避免启动子 shell ,\n#+ 所以这个脚本作为样例运行成功.\n#  (感谢 Heiner Steven 指出这点.)\n\n#  然而 . . .\n#  Bash 有时候 *能* 在 &quot;只读的 while&quot; 循环启动子进程 ,\n#+ 不同于 &quot;while&quot; 循环的重定向.\n\nabc=hi\necho -e &quot;1\\n2\\n3&quot; | while read l\n     do abc=&quot;$l&quot;\n        echo $abc\n     done\necho $abc\n\n#  感谢, Bruno de Oliveira Schneider 上面的演示代码.\n#  也感谢 Brian Onn 纠正了注释的错误.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p>样例 20-6. 另一种形式的 while 循环重定向</p>\n<div><pre><code>#!/bin/bash\n\n# 这是之前的另一种形式的脚本.\n\n#  Heiner Steven 提议在重定向循环时候运行在子 shell 可以作为一个变通方案\n#+ 因此直到循环终止时循环内部的变量不需要保证他们的值\n\n\nif [ -z &quot;$1&quot; ]\nthen\n  Filename=names.data     # 如果不指定文件名的默认值.\nelse\n  Filename=$1\nfi  \n\n\nexec 3&lt;&amp;0                 # 保存标准输入到文件描述符 3.\nexec 0&lt;&quot;$Filename&quot;        # 重定向标准输入.\n\ncount=0\necho\n\n\nwhile [ &quot;$name&quot; != Smith ]\ndo\n  read name               # 从重定向的标准输入($Filename)读取值.\n  echo $name\n  let &quot;count += 1&quot;\ndone                      #  从 $Filename 循环读\n                          #+ 因为第 20 行.\n\n#  这个脚本的早期版本在 &quot;while&quot; 循环 done &lt;&quot;$Filename&quot; 终止\n#  练习:\n#  为什么这个没必要?\n\n\nexec 0&lt;&amp;3                 # 恢复早前的标准输入.\nexec 3&lt;&amp;-                 # 关闭临时的文件描述符 3.\n\necho; echo &quot;$count names read&quot;; echo\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><p>样例 20-7. until 循环的重定向</p>\n<div><pre><code>#!/bin/bash\n# 同先前的脚本一样, 不过用的是 &quot;until&quot; 循环.\n\nif [ -z &quot;$1&quot; ]\nthen\n  Filename=names.data         # 如果不指定文件的默认值.\nelse\n  Filename=$1\nfi  \n\n# while [ &quot;$name&quot; != Smith ]\nuntil [ &quot;$name&quot; = Smith ]     # 变  !=  为 =.\ndo\n  read name                   # 从 $Filename 读取值, 而不是标准输入.\n  echo $name\ndone &lt;&quot;$Filename&quot;             # 重定向标准输入到文件 &quot;$Filename&quot;. \n#    ^^^^^^^^^^^^\n\n# 和之前的 &quot;while&quot; 循环样例相同的结果.\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>样例 20-8. for 循环的重定向</p>\n<div><pre><code>\n#!/bin/bash\n\nif [ -z &quot;$1&quot; ]\nthen\n  Filename=names.data          # 如果不指定文件的默认值.\nelse\n  Filename=$1\nfi  \n\nline_count=`wc $Filename | awk &#39;{ print $1 }&#39;`\n#           目标文件的行数.\n#\n#  非常作和不完善, 然而这只是证明 &quot;for&quot; 循环中的重定向标准输入是可行的\n#+ 如果你足够聪明的话.\n#\n# 简介的做法是     line_count=$(wc -l &lt; &quot;$Filename&quot;)\n\n\nfor name in `seq $line_count`  # 回忆下 &quot;seq&quot; 可以输入数组序列.\n# while [ &quot;$name&quot; != Smith ]   --   比 &quot;while&quot; 循环更复杂的循环   --\ndo\n  read name                    # 从 $Filename 读取值, 而不是标准输入.\n  echo $name\n  if [ &quot;$name&quot; = Smith ]       # 这需要所有这些额外的设置.\n  then\n    break\n  fi  \ndone &lt;&quot;$Filename&quot;              # 重定向标准输入到文件 &quot;$Filename&quot;. \n#    ^^^^^^^^^^^^\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>我们可以修改先前的样例也可以重定向循环的输出.</p>\n<p>样例 20-9. for 循环的重定向 (同时重定向标准输入和标准输出)</p>\n<div><pre><code>#!/bin/bash\n\nif [ -z &quot;$1&quot; ]\nthen\n  Filename=names.data          # 如果不指定文件的默认值.\nelse\n  Filename=$1\nfi  \n\nSavefile=$Filename.new         # 报错的结果的文件名.\nFinalName=Jonah                # 停止 &quot;read&quot; 的终止字符.\n\nline_count=`wc $Filename | awk &#39;{ print $1 }&#39;`  # 目标文件行数.\n\n\nfor name in `seq $line_count`\ndo\n  read name\n  echo &quot;$name&quot;\n  if [ &quot;$name&quot; = &quot;$FinalName&quot; ]\n  then\n    break\n  fi  \ndone &lt; &quot;$Filename&quot; &gt; &quot;$Savefile&quot;     # 重定向标准输入到文件 $Filename,\n#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^       并且报错结果到备份文件.\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>样例 20-10. if/then test的重定向</p>\n<div><pre><code>#!/bin/bash\n\nif [ -z &quot;$1&quot; ]\nthen\n  Filename=names.data   # 如果不指定文件的默认值.\nelse\n  Filename=$1\nfi  \n\nTRUE=1\n\nif [ &quot;$TRUE&quot; ]          # if true    和   if :   都可以工作.\nthen\n read name\n echo $name\nfi &lt;&quot;$Filename&quot;\n#  ^^^^^^^^^^^^\n\n# 只读取文件的首行.\n# &quot;if/then&quot; test 除非嵌入在循环内部否则没办法迭代.\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>样例 20-11. 上述样例的数据文件 names.data</p>\n<div><pre><code>\nAristotle\nArrhenius\nBelisarius\nCapablanca\nDickens\nEuler\nGoethe\nHegel\nJonah\nLaplace\nMaroczy\nPurcell\nSchmidt\nSchopenhauer\nSemmelweiss\nSmith\nSteinmetz\nTukhashevsky\nTuring\nVenn\nWarshawski\nZnosko-Borowski\n\n#+ 这是 &quot;redir2.sh&quot;, &quot;redir3.sh&quot;, &quot;redir4.sh&quot;, &quot;redir4a.sh&quot;, &quot;redir5.sh&quot; 的数据文件.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>代码块的标准输出的重定向影响了保存到文件的输出. 见样例 <a href=\"http://tldp.org/LDP/abs/html/special-chars.html#RPMCHECK\" target=\"_blank\" rel=\"noopener noreferrer\">样例 3-2</a>.</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/here-docs.html#HEREDOCREF\" target=\"_blank\" rel=\"noopener noreferrer\">嵌入文档</a> 是种特别的重定向代码块的方法. 既然如此,它使得在 while 循环的标准输入里传入嵌入文档的输出变得可能.</p>\n<div><pre><code># 这个样例来自 Albert Siersema\n# 得到了使用许可 (感谢!).\n\nfunction doesOutput()\n # 当然这也是个外部命令.\n # 这里用函数进行演示会更好一点.\n{\n  ls -al *.jpg | awk &#39;{print $5,$9}&#39;\n}\n\n\nnr=0          #  我们希望在 &#39;while&#39; 循环里可以操作这些\ntotalSize=0   #+ 并且在 &#39;while&#39; 循环结束时看到改变.\n\nwhile read fileSize fileName ; do\n  echo &quot;$fileName is $fileSize bytes&quot;\n  let nr++\n  totalSize=$((totalSize+fileSize))   # Or: &quot;let totalSize+=fileSize&quot;\ndone&lt;&lt;EOF\n$(doesOutput)\nEOF\n\necho &quot;$nr files totaling $totalSize bytes&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "20.3 应用程序",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/20_3_applications/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/20_3_applications/",
      "content_html": "<h1 id=\"_20-3-应用程序\"> 20.3 应用程序</h1>\n<p>使用 I/O 重定向可以同时解析和固定命令输出的片段(see <a href=\"http://tldp.org/LDP/abs/html/internal.html#READREDIR\" target=\"_blank\" rel=\"noopener noreferrer\">样例 15-7</a>). 这也使得可以生成报告和日志文件.</p>\n<p>样例 20-12. 日志记录事件</p>\n<div><pre><code>#!/bin/bash\n# logevents.sh\n# 作者: Stephane Chazelas.\n# 用于 ABS 许可指南.\n\n# 事件记录到文件.\n# 必须 root 身份执行 (可以写入 /var/log).\n\nROOT_UID=0     # 只有 $UID 为 0 的用户具有 root 权限.\nE_NOTROOT=67   # 非 root 会报错.\n\n\nif [ &quot;$UID&quot; -ne &quot;$ROOT_UID&quot; ]\nthen\n  echo &quot;Must be root to run this script.&quot;\n  exit $E_NOTROOT\nfi  \n\n\nFD_DEBUG1=3\nFD_DEBUG2=4\nFD_DEBUG3=5\n\n# === 取消下面两行注释来激活脚本. ===\n# LOG_EVENTS=1\n# LOG_VARS=1\n\n\nlog()  # 时间和日期写入日志文件.\n{\necho &quot;$(date)  $*&quot; &gt;&amp;7     # *追加* 日期到文件.\n#     ^^^^^^^  命令替换\n                           # 见下文.\n}\n\n\n\ncase $LOG_LEVEL in\n 1) exec 3&gt;&amp;2         4&gt; /dev/null 5&gt; /dev/null;;\n 2) exec 3&gt;&amp;2         4&gt;&amp;2         5&gt; /dev/null;;\n 3) exec 3&gt;&amp;2         4&gt;&amp;2         5&gt;&amp;2;;\n *) exec 3&gt; /dev/null 4&gt; /dev/null 5&gt; /dev/null;;\nesac\n\nFD_LOGVARS=6\nif [[ $LOG_VARS ]]\nthen exec 6&gt;&gt; /var/log/vars.log\nelse exec 6&gt; /dev/null                     # 清空输出.\nfi\n\nFD_LOGEVENTS=7\nif [[ $LOG_EVENTS ]]\nthen\n  # exec 7 &gt;(exec gawk &#39;{print strftime(), $0}&#39; &gt;&gt; /var/log/event.log)\n  # 上述行在最近高于 bash 2.04 版本会失败，为什么?\n  exec 7&gt;&gt; /var/log/event.log              # 追加到 &quot;event.log&quot;.\n  log                                      # 写入时间和日期.\nelse exec 7&gt; /dev/null                     # 清空输出.\nfi\n\necho &quot;DEBUG3: beginning&quot; &gt;&amp;${FD_DEBUG3}\n\nls -l &gt;&amp;5 2&gt;&amp;4                             # 命令1 &gt;&amp;5 2&gt;&amp;4\n\necho &quot;Done&quot;                                # 命令2 \n\necho &quot;sending mail&quot; &gt;&amp;${FD_LOGEVENTS}\n# 输出信息 &quot;sending mail&quot; 到文件描述符 #7.\n\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "20 I/O 重定向",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/20_io_redirection/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/20_io_redirection/",
      "content_html": "<h1 id=\"_20-i-o-重定向\"> 20 I/O 重定向</h1>\n<p>目录</p>\n<ul>\n<li><a href=\"http://tldp.org/LDP/abs/html/x17974.html\" target=\"_blank\" rel=\"noopener noreferrer\">20.1 使用 exec</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/redircb.html\" target=\"_blank\" rel=\"noopener noreferrer\">20.2 重定向代码块</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/redirapps.html\" target=\"_blank\" rel=\"noopener noreferrer\">20.3 应用程序</a></li>\n</ul>\n<p>有三个默认打开的文件<a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#FTN.AEN17884\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a>, <code>stdin</code>(标准输入，键盘),<code>stdout</code>(标准输出， 屏幕)和 <code>stderr</code>(标准错误，屏幕上输出的错误信息)。这些和任何其他打开的文件都可以被重定向。重定向仅仅意味着捕获输出文件，命令，脚本，甚至是一个脚本的代码块(<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#EX8\" target=\"_blank\" rel=\"noopener noreferrer\">样例 3-1</a>)和(<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#EX8\" target=\"_blank\" rel=\"noopener noreferrer\">样例 3-2</a>) 作为另一个文件，命令，程序或脚本的输入。</p>\n<p>每个打开的文件都有特定的文件描述符。<a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#FTN.AEN17894\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a>,而 <code>stdin</code>，<code>stdout</code>，<code>stderr</code> 的文件描述符分别为 0,1,2。当然了，还有附件的文件描述符 3 - 9。有时候为<code>stdin</code>，<code>stdout</code>，<code>stderr</code>临时性的复制链接分配这些附加的文件描述符会非常有用.<a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#FTN.AEN17906\" target=\"_blank\" rel=\"noopener noreferrer\">[3]</a>。这简化了复杂重定向和重组后的恢复(见<a href=\"http://tldp.org/LDP/abs/html/x17974.html#REDIR1\" target=\"_blank\" rel=\"noopener noreferrer\">样例 20-1</a>)</p>\n<div><pre><code>   COMMAND_OUTPUT &gt;\n      # 重定向标准输出到一个文件.\n      # 如果文件不存在则创建，否则覆盖.\n\n      ls -lR &gt; dir-tree.list\n      # 创建了一个包含目录树列表的文件.\n\n   : &gt; filename\n      # &quot;&gt;&quot; 清空了文件.\n      # 如果文件不存在，则创建了个空文件 (效果类似 &#39;touch&#39;).\n      # &quot;:&quot; 是个虚拟占位符, 不会有输出.\n\n   &gt; filename    \n      # &quot;&gt;&quot; 清空了文件.\n      # 如果文件不存在，则创建了个空文件 (效果类似 &#39;touch&#39;).\n      # (结果和上述的 &quot;: &gt;&quot; 一样， 但在某些 shell 环境中不能正常运行.)\n\n   COMMAND_OUTPUT &gt;&gt;\n      # 重定向标准输出到一个文件.\n      # 如果文件不存在则创建，否则新内容在文件末尾追加.\n\n\n      # 单行重定向命令 (只作用于本身所在的那行):\n      # --------------------------------------------------------------------\n\n   1&gt;filename\n      # 以覆盖的方式将 标准错误 重定向到文件 &quot;filename.&quot;\n   1&gt;&gt;filename\n      # 以追加的方式将 标准输出 重定向到文件 &quot;filename.&quot;\n   2&gt;filename\n      # 以覆盖的方式将 标准错误 重定向到文件 &quot;filename.&quot;\n   2&gt;&gt;filename\n      # 以追加的方式将 标准错误 重定向到文件 &quot;filename.&quot;\n   &amp;&gt;filename\n      # 以覆盖的方式将 标准错误 和 标准输出 同时重定向到文件 &quot;filename.&quot;\n      # 在 bash 4 中才有这个新功能.\n\n   M&gt;N\n     # &quot;M&quot; 是个文件描述符, 如果不明确指定，默认为 1.\n     # &quot;N&quot; 是个文件名.\n     # 文件描述符 &quot;M&quot; 重定向到文件 &quot;N.&quot;\n   M&gt;&amp;N\n     # &quot;M&quot; 是个文件描述符, 如果不设置默认为 1.\n     # &quot;N&quot; 是另一个文件描述符.\n\n      #==============================================================================\n\n      # 重定向 标准输出，一次一行.\n      LOGFILE=script.log\n\n      echo &quot;This statement is sent to the log file, \\&quot;$LOGFILE\\&quot;.&quot; 1&gt;$LOGFILE\n      echo &quot;This statement is appended to \\&quot;$LOGFILE\\&quot;.&quot; 1&gt;&gt;$LOGFILE\n      echo &quot;This statement is also appended to \\&quot;$LOGFILE\\&quot;.&quot; 1&gt;&gt;$LOGFILE\n      echo &quot;This statement is echoed to stdout, and will not appear in \\&quot;$LOGFILE\\&quot;.&quot;\n      # 这些重定向命令在每行结束后自动&quot;重置&quot;.\n\n\n\n      # 重定向 标准错误，一次一行.\n      ERRORFILE=script.errors\n\n      bad_command1 2&gt;$ERRORFILE       #  Error message sent to $ERRORFILE.\n      bad_command2 2&gt;&gt;$ERRORFILE      #  Error message appended to $ERRORFILE.\n      bad_command3                    #  Error message echoed to stderr,\n                                      #+ and does not appear in $ERRORFILE.\n      # 这些重定向命令每行结束后会自动“重置”.\n\t#=======================================================================\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br></div></div><div><pre><code>   2&gt;&amp;1\n      # 重定向 标准错误 到 标准输出.\n      # 错误信息发送到标准输出相同的位置.\n        &gt;&gt;filename 2&gt;&amp;1\n            bad_command &gt;&gt;filename 2&gt;&amp;1\n            # 同时将 标准输出 和 标准错误 追加到文件 &quot;filename&quot; 中 ...\n        2&gt;&amp;1 | [command(s)]\n            bad_command 2&gt;&amp;1 | awk &#39;{print $5}&#39;   # found\n            # 通过管道传递 标准错误.\n            # bash 4 中可以将 &quot;2&gt;&amp;1 |&quot; 缩写为 &quot;|&amp;&quot;.\n\n   i&gt;&amp;j\n      # 重定向文件描述符 i 到 j.\n      # 文件描述符 i 指向的文件输出将会重定向到文件描述符 j 指向的文件\n\n   &gt;&amp;j\n      # 默认的标准输出 (stdout) 重定向到 j.\n      # 所有的标准输出将会重定向到 j 指向的文件.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><div><pre><code>   0&lt; FILENAME\n    &lt; FILENAME\n      # 从文件接收输入.\n      # 类似功能命令是 &quot;&gt;&quot;, 经常会组合使用.\n      #\n      # grep search-word &lt;filename\n\n\n   [j]&lt;&gt;filename\n      #  打开并读写文件 &quot;filename&quot; ,\n      #+ 并且分配文件描述符 &quot;j&quot;.\n      #  如果 &quot;filename&quot; 不存在则创建.\n      #  如果文件描述符 &quot;j&quot; 未指定, 默认分配文件描述符 0, 标准输入.\n      #\n      #  这是一个写指定文件位置的应用程序. \n      echo 1234567890 &gt; File    # 写字符串到 &quot;File&quot;.\n      exec 3&lt;&gt; File             # 打开并分配文件描述符 3 给 &quot;File&quot; .\n      read -n 4 &lt;&amp;3             # 读取 4 字符.\n      echo -n . &gt;&amp;3             # 写一个小数点.\n      exec 3&gt;&amp;-                 # 关闭文件描述符 3.\n      cat File                  # ==&gt; 1234.67890\n      #  随机访问.\n\n\n\n   |\n      # 管道.\n      # 一般是命令和进程的链接工具.\n      # 类似 &quot;&gt;&quot;, 但更一般.\n      # 在连接命令，脚本，文件和程序方面非常有用.\n      cat *.txt | sort | uniq &gt; result-file\n      # 所有 .txt 文件输出进行排序并且删除复制行,\n      # 最终保存结果到 &quot;result-file&quot;.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>可以用单个命令行表示输入和输出的多个重定向或管道.</p>\n<div><pre><code>command &lt; input-file &gt; output-file\n# 或者等价:\n&lt; input-file command &gt; output-file   # 尽管这不标准.\n\ncommand1 | command2 | command3 &gt; output-file\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>更多详情见<a href=\"http://tldp.org/LDP/abs/html/filearchiv.html#DERPM\" target=\"_blank\" rel=\"noopener noreferrer\">样例 16-31</a> and <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#FIFO\" target=\"_blank\" rel=\"noopener noreferrer\">样例 A-14</a>.</p>\n<p>多个输出流可以重定向到一个文件.</p>\n<div><pre><code>ls -yz &gt;&gt; command.log 2&gt;&amp;1\n#  捕获不合法选项 &quot;yz&quot; 的结果到文件 &quot;command.log.&quot;\n#  因为 标准错误输出 被重定向到了文件,\n#+ 任何错误信息都会在这.\n\n#  注意, 然而, 接下来的这个案例并 &quot;不能&quot; 同样的结果.\nls -yz 2&gt;&amp;1 &gt;&gt; command.log\n#  输出一条错误信息，但是不会写入到文件.\n#  恰恰的, 命令输出(这个例子里为空)写入到文件, 但错误信息只会在 标准输出 输出.\n\n#  如果同时重定向 标准输出 和 标准错误输出,\n#+ 命令的顺序不同会导致不同.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>关闭文件描述符</p>\n<div><pre><code>n&lt;&amp;-\n\t关闭输入文件描述符 n.\n\n0&lt;&amp;-, &lt;&amp;-\n\t关闭标准输入.\n\nn&gt;&amp;-\n\t关闭输出文件描述符 n.\n\n1&gt;&amp;-, &gt;&amp;-\n\t关闭标准输出.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>子进程能继承文件描述符.这就是管道符能工作的原因.通过关闭文件描述符来防止继承 .</p>\n<div><pre><code># 只重定向到 标准错误 到管道.\n\nexec 3&gt;&amp;1                              # 保存当前 标准输出 &quot;值&quot;.\n\nls -l 2&gt;&amp;1 &gt;&amp;3 3&gt;&amp;- | grep bad 3&gt;&amp;-    # 关闭 &#39;grep&#39; 文件描述符 3 (但不是 &#39;ls&#39;).\n#              ^^^^   ^^^^\nexec 3&gt;&amp;-                              # 现在关闭它.\n\n# 感谢, S.C.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>更多关于 I/O 重定向详情见 <a href=\"http://tldp.org/LDP/abs/html/ioredirintro.html\" target=\"_blank\" rel=\"noopener noreferrer\">Appendix F</a>.</p>\n<h4 id=\"注意\"> 注意</h4>\n<p><a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#AEN17884\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a>\t 在 UNIX 和 Linux 中, 数据流和周边外设(<a href=\"http://tldp.org/LDP/abs/html/devref1.html#DEVFILEREF\" target=\"_blank\" rel=\"noopener noreferrer\">device files</a>) 都被看做文件.</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#AEN17894\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a>\t <code>文件描述符</code> 仅仅是操作系统分配的一个可追踪的打开的文件号. 可以认为是一个简化的文件指针. 类似于 C 语言的 <code>文件句柄</code>.</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/io-redirection.html#AEN17906\" target=\"_blank\" rel=\"noopener noreferrer\">[3]</a>\t当 bash 创建一个子进程的时候使用 <code>文件描述符 5</code> 会有问题. 例如 <a href=\"http://tldp.org/LDP/abs/html/internal.html#EXECREF\" target=\"_blank\" rel=\"noopener noreferrer\">exec</a>, 子进程继承了文件描述符 5 (详情见 Chet Ramey's 归档的 e-mail, <a href=\"https://groups.google.com/forum/#!topic/gnu.bash.bug/E5Vdqv3tO1w\" target=\"_blank\" rel=\"noopener noreferrer\">SUBJECT: RE: File descriptor 5 is held open</a>). 最好将这个文件描述符单独规避.</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第二十一章 子shell",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/21_subshells/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/21_subshells/",
      "content_html": "<h1 id=\"第二十一章-子shell\"> 第二十一章 子shell</h1>\n<p>运行一个shell脚本会启动一个新的进程，即<em>子shell</em>。</p>\n<p><strong>定义</strong>： 一个<em>子shell</em>是由一个shell（或<em>shell脚本</em>）触发的<a href=\"http://tldp.org/LDP/abs/html/othertypesv.html#CHILDREF2\" target=\"_blank\" rel=\"noopener noreferrer\">子进程</a>。</p>\n<p>一个子shell是命令处理器（-- 在终端或者<em>xtrem</em>窗口给出提示符的<em>shell</em>）的一个独立的例子。正如你的命令在命令行提示符处被理解执行一样，一个脚本<a href=\"http://tldp.org/LDP/abs/html/timedate.html#BATCHPROCREF\" target=\"_blank\" rel=\"noopener noreferrer\">批处理</a>一组命令。每一个shell脚本运行实际上是<a href=\"http://tldp.org/LDP/abs/html/internal.html#FORKREF\" target=\"_blank\" rel=\"noopener noreferrer\">父</a>shell的一个支线进程（<em>子进程</em>）。</p>\n<p>一个shell脚本可以自己启动多个子进程。这些子进程使得脚本进行并行处理，实际上是多个支线任务同事进行。</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># subshell-test.sh</span>\n\n<span>(</span>\n<span># 在圆括号内，因此是一个子shell . . .</span>\n<span>while</span> <span>[</span> <span>1</span> <span>]</span>   <span># 无限循环.</span>\n<span>do</span>\n  <span>echo</span> <span>\"Subshell running . . .\"</span>\n<span>done</span>\n<span>)</span>\n\n<span>#  脚本会永远运行，或者至少直到由Ctl-C终止。</span>\n\n<span>exit</span> <span>$?</span>  <span># 脚本结束 （但是永远无法到达这里）。</span>\n\n\n\n现在，运行这个脚本：\n<span>sh</span> subshell-test.sh\n\n另外，在脚本运行的同时， 从另一个xterm运行：\n<span>ps</span> -ef <span>|</span> <span>grep</span> subshell-test.sh\n\n<span>UID</span>       PID   <span>PPID</span>  C STIME TTY      TIME     CMD\n<span>500</span>       <span>2698</span>  <span>2502</span>  <span>0</span> <span>14</span>:26 pts/4    00:00:00 <span>sh</span> subshell-test.sh\n<span>500</span>       <span>2699</span>  <span>2698</span> <span>21</span> <span>14</span>:26 pts/4    00:00:24 <span>sh</span> subshell-test.sh\n\n          ^^^^\n\n分析：\nPID <span>2698</span>, 脚本, 启动 PID <span>2699</span>, 子shell.\n\n注释: “<span>UID</span> <span>..</span>.”这一列可以通过“grep”命令筛去，但是由于说明的目的而显示在这里。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>一般来说，脚本的一个<a href=\"http://tldp.org/LDP/abs/html/external.html#EXTERNALREF\" target=\"_blank\" rel=\"noopener noreferrer\">外部命令</a>会使得子进程产生<a href=\"http://tldp.org/LDP/abs/html/internal.html#FORKREF\" target=\"_blank\" rel=\"noopener noreferrer\">分叉</a>，[^1] 但是一个Bash内建命令不会如此。</p>\n<p><strong>在圆括号内的命令列</strong></p>\n<p>(命令1; 命令1; 命令3; ...)</p>\n<div><pre><code>放在圆括号内的一列命令作为子shell运行。\n</code></pre>\n</div><p>子shell的变量<em>不能</em>被这个子shell内代码区块之外的部分看见。这些变量不能被<a href=\"http://tldp.org/LDP/abs/html/internal.html#FORKREF\" target=\"_blank\" rel=\"noopener noreferrer\">父进程</a>中调用，也不能被启动次子shell的shell调用。这些变量实际上是<em>子进程</em>的<a href=\"http://tldp.org/LDP/abs/html/localvar.html#LOCALREF\" target=\"_blank\" rel=\"noopener noreferrer\">局部变量</a>。</p>\n<p><strong>例21-1.子shell的变量范围</strong></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># subshell.sh</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\"We are outside the subshell.\"</span>\n<span>echo</span> <span>\"Subshell level OUTSIDE subshell = <span>$BASH_SUBSHELL</span>\"</span>\n<span># Bash, 版本3，增加新变量                 $BASH_SUBSHELL 。</span>\n<span>echo</span><span>;</span> <span>echo</span>\n\n<span>outer_variable</span><span>=</span>Outer\n<span>global_variable</span><span>=</span>\n<span>#  定义全局变量来”存储“子shell变量值。</span>\n\n<span>(</span>\n<span>echo</span> <span>\"We are inside the subshell.\"</span>\n<span>echo</span> <span>\"Subshell level INSIDE subshell = <span>$BASH_SUBSHELL</span>\"</span>\n<span>inner_variable</span><span>=</span>Inner\n\n<span>echo</span> <span>\"From inside subshell, <span title=\"\\&quot;\">\\\"</span>inner_variable<span title=\"\\&quot;\">\\\"</span> = <span>$inner_variable</span>\"</span>\n<span>echo</span> <span>\"From inside subshell, <span title=\"\\&quot;\">\\\"</span>outer<span title=\"\\&quot;\">\\\"</span> = <span>$outer_variable</span>\"</span>\n\n<span>global_variable</span><span>=</span><span>\"<span>$inner_variable</span>\"</span>   <span>#  这会允许”输出“ 一个子shell变量吗？</span>\n<span>)</span>\n\n<span>echo</span><span>;</span> <span>echo</span>\n<span>echo</span> <span>\"We are outside the subshell.\"</span>\n<span>echo</span> <span>\"Subshell level OUTSIDE subshell = <span>$BASH_SUBSHELL</span>\"</span>\n<span>echo</span>\n\n<span>if</span> <span>[</span> -z <span>\"<span>$inner_variable</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"inner_variable undefined in main body of shell\"</span>\n<span>else</span>\n  <span>echo</span> <span>\"inner_variable defined in main body of shell\"</span>\n<span>fi</span>\n\n<span>echo</span> <span>\"From main body of shell, <span title=\"\\&quot;\">\\\"</span>inner_variable<span title=\"\\&quot;\">\\\"</span> = <span>$inner_variable</span>\"</span>\n<span>#  $inner_variable 会显示为空白 （未初始化） </span>\n<span>#+ 因为定义在子shell的变量是“局部变量”。</span>\n<span>#  有办法改正这一点吗？</span>\n<span>echo</span> <span>\"global_variable = \"</span><span>$global_variable</span><span>\"\"</span>  <span># 为什么这不行？</span>\n\n<span>echo</span>\n\n<span># =======================================================================</span>\n\n<span># 另外 ...</span>\n\n<span>echo</span> <span>\"-----------------\"</span><span>;</span> <span>echo</span>\n\n<span>var</span><span>=</span><span>41</span>                                                 <span># 全局变量。</span>\n\n<span>(</span> <span>let</span> <span>\"var+=1\"</span><span>;</span> <span>echo</span> <span>\"\\<span>$var</span> INSIDE subshell = <span>$var</span>\"</span> <span>)</span>  <span># 42</span>\n\n<span>echo</span> <span>\"\\<span>$var</span> OUTSIDE subshell = <span>$var</span>\"</span>                   <span># 41</span>\n<span># 子shell内的变量操作，即使是对全局变量，不影响变量在子shell外的值！</span>\n\n\n<span>exit</span> <span>0</span>\n\n<span>#  问题：</span>\n<span>#  --------</span>\n<span>#  一旦执行一个子shell，</span>\n<span>#+ 是否有办法再次进入这个子shell以便修改或调用子shell的变量？ </span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br></div></div><p>同样参看 <a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#BASHPIDREF\" target=\"_blank\" rel=\"noopener noreferrer\">$BASHPID</a> 和 <a href=\"http://tldp.org/LDP/abs/html/gotchas.html#SUBPIT\" target=\"_blank\" rel=\"noopener noreferrer\">例34-2</a>。</p>\n<p><strong>定义</strong>： 变量的<em>范围</em>是指其有意义的上下文内容，在此变量<em>值</em>可以被引用。比如说，<a href=\"http://tldp.org/LDP/abs/html/localvar.html#LOCALREF1\" target=\"_blank\" rel=\"noopener noreferrer\">局部变量</a>的范围只在函数、代码区块或子shell内的相应定义范围内，而<em>全局</em>变量的范围则是其出现的整个脚本区域。</p>\n<p>内部变量 <a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#BASHSUBSHELLREF\" target=\"_blank\" rel=\"noopener noreferrer\">$BASH_SUBSHELL</a> 指出一个子shell的嵌套层级时，而变量 <a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#SHLVLREF\" target=\"_blank\" rel=\"noopener noreferrer\">$SHLVL</a> 指示在子shell内<em>不变</em>的层级。</p>\n<div><pre><code><span>echo</span> <span>\" \\<span>$BASH_SUBSHELL</span> outside subshell       = <span>$BASH_SUBSHELL</span>\"</span>           <span># 0</span>\n  <span>(</span> <span>echo</span> <span>\" \\<span>$BASH_SUBSHELL</span> inside subshell        = <span>$BASH_SUBSHELL</span>\"</span> <span>)</span>     <span># 1</span>\n  <span>(</span> <span>(</span> <span>echo</span> <span>\" \\<span>$BASH_SUBSHELL</span> inside nested subshell = <span>$BASH_SUBSHELL</span>\"</span> <span>)</span> <span>)</span> <span># 2</span>\n<span># ^ ^                          ***  嵌套   ***                        ^ ^</span>\n\n<span>echo</span>\n\n<span>echo</span> <span>\" \\<span>$SHLVL</span> outside subshell = <span>$SHLVL</span>\"</span>       <span># 3</span>\n<span>(</span> <span>echo</span> <span>\" \\<span>$SHLVL</span> inside subshell  = <span>$SHLVL</span>\"</span> <span>)</span>   <span># 3 (不变！)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>子shell内的路径改变不会带入到父shell中。</p>\n<p><strong>例21-2. 列出用户信息</strong></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># allprofs.sh: 打印所有用户信息.</span>\n\n<span># 此脚本作者 Heiner Steven，由文件作者修改。</span>\n\n<span>FILE</span><span>=</span>.bashrc  <span>#  包含用户信息的文件是\".profile\"的原始脚本。</span>\n\n<span>for</span> <span>home</span> <span>in</span> <span><span>`</span><span>awk</span> -F: <span>'{print <span>$6</span>}'</span> /etc/passwd<span>`</span></span>\n<span>do</span>\n  <span>[</span> -d <span>\"<span>$home</span>\"</span> <span>]</span> <span>||</span> <span>continue</span>    <span># 如果没有home目录，到下一个。</span>\n  <span>[</span> -r <span>\"<span>$home</span>\"</span> <span>]</span> <span>||</span> <span>continue</span>    <span># 如果没有读取权限，到下一个。</span>\n  <span>(</span>cd <span>$home</span><span>;</span> <span>[</span> -e <span>$FILE</span> <span>]</span> <span>&amp;&amp;</span> <span>less</span> <span>$FILE</span><span>)</span>\n<span>done</span>\n\n<span># 脚本终止时， 不需要使用命令'cd'回到初始目录，因为'cd $home'只在子shell发生。</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>一个子shell可以用来为一个命令组设定一个“特定环境”。</p>\n<div><pre><code>命令1\n命令2\n命令3\n<span>(</span>\n  <span><span>IFS</span></span><span>=</span>:\n  <span><span>PATH</span></span><span>=</span>/bin\n  <span>unset</span> TERMINFO\n  <span>set</span> -C\n  <span>shift</span> <span>5</span>\n  命令4\n  命令5\n  <span>exit</span> <span>3</span> <span># 只退出子shell！</span>\n<span>)</span>\n<span># 父shell不受影响， 且环境保留。</span>\n命令6\n命令7\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>从这里可以看出，命令 <a href=\"http://tldp.org/LDP/abs/html/internal.html#EXITREF\" target=\"_blank\" rel=\"noopener noreferrer\">exit</a> 只终止正在运行的子shell，并不终止父shell或脚本。</p>\n<p>这样的“特定环境”的一个应用是检查一个变量是否被定义。</p>\n<div><pre><code><span>if</span> <span>(</span>set -u<span>;</span> <span>:</span> <span>$variable</span><span>)</span> <span><span>2</span>></span> /dev/null\n<span>then</span>\n  <span>echo</span> <span>\"Variable is set.\"</span>\n<span>fi</span>     <span>#  变量已在当前脚本被设定， </span>\n       <span>#+ 或者变量是一个Bash内部变量，</span>\n       <span>#+ 或者变量在环境变量中（在export命令后）。</span>\n\n<span># 也可以写成  [[ ${variable-x} != x || ${variable-y} != y ]]</span>\n<span># 或者       [[ ${variable-x} != x$variable ]]</span>\n<span># 或者       [[ ${variable+x} = x ]]</span>\n<span># 或者       [[ ${variable-x} != x ]]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>另一个应用是检查一个锁定文件。</p>\n<div><pre><code><span>if</span> <span>(</span>set -C<span>;</span> <span>:</span> <span>></span> lock_file<span>)</span> <span><span>2</span>></span> /dev/null\n<span>then</span>\n  <span>:</span>   <span># lock_file不存在：没有用户运行此脚本</span>\n<span>else</span>\n  <span>echo</span> <span>\"Another user is already running that script.\"</span>\n<span>exit</span> <span>65</span>\n<span>fi</span>\n\n<span>#  代码段作者 Stéphane Chazelas,</span>\n<span>#+ 修改者 Paulo Marcel Coelho Aragao。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>\n<li></li>\n</ul>\n<p>多个进程可以在不同子shell内并行执行。这样就可以将一个复杂的任务分解成多个子部分同时处理。</p>\n<p><strong>例21-3. 在子shell中运行并行进程</strong></p>\n<div><pre><code>\t<span>(</span>cat list1 list2 list3 <span>|</span> <span>sort</span> <span>|</span> <span>uniq</span> <span>></span> list123<span>)</span> <span>&amp;</span>\n\t<span>(</span>cat list4 list5 list6 <span>|</span> <span>sort</span> <span>|</span> <span>uniq</span> <span>></span> list456<span>)</span> <span>&amp;</span>\n\t<span># 同时合并和排列两组列表。</span>\n\t<span># 在后台运行以确保并行执行。</span>\n\t<span>#</span>\n\t<span># 同样效果如下</span>\n\t<span>#   cat list1 list2 list3 | sort | uniq > list123 &amp;</span>\n\t<span>#   cat list4 list5 list6 | sort | uniq > list456 &amp;</span>\n\t\n\t<span>wait</span>   <span># 在子shell结束前不执行之后命令。</span>\n\t\n\t<span>diff</span> list123 list456\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>向子shell的I/O重定向使用管道算符&quot;|&quot;，正如 ls -al | (命令)</p>\n<p>在花括号间的代码块不会启动一个子shell。</p>\n<p>{ 命令1； 命令2； 命令3； ...命令N； }</p>\n<div><pre><code><span>var1</span><span>=</span><span>23</span>\n<span>echo</span> <span>\"<span>$var1</span>\"</span>   <span># 23</span>\n\n<span>{</span> <span>var1</span><span>=</span><span>76</span><span>;</span> <span>}</span>\n<span>echo</span> <span>\"<span>$var1</span>\"</span>   <span># 76</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"notes\"> <strong>Notes</strong></h3>\n<p>[^1] 和 <a href=\"http://tldp.org/LDP/abs/html/internal.html#EXECREF\" target=\"_blank\" rel=\"noopener noreferrer\">exec</a> 命令一起触发的外部命令（通常）不会分叉一个子进程 / 子shell</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第二十二章. 限制模式的Shell",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/22_Restricted_Shells/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/22_Restricted_Shells/",
      "content_html": "<h1 id=\"第二十二章-限制模式的shell\"> 第二十二章. 限制模式的Shell</h1>\n<h4 id=\"限制模式下被禁用的命令\"> 限制模式下被禁用的命令</h4>\n<ul>\n<li>在限制模式下运行一个脚本或部分脚本将禁用一些命令，尽管这些命令在正常模式下是可用的。这是个安全措施，可以限制脚本用户的权限，减少运行脚本可能带来的损害。</li>\n</ul>\n<p>被禁用的命令和功能：</p>\n<ul>\n<li>使用 <em>cd</em> 来改变工作目录。</li>\n<li>修改 <em><span class='katex-error' title='ParseError: KaTeX parse error: Double subscript at position 8: PATH_, _̲'>PATH_, _</span>SHELL</em>, *<span class='katex-error' title='ParseError: KaTeX parse error: Expected group after &#039;_&#039; at position 13: BASH_ENV* 或 _̲'>BASH_ENV* 或 _</span>ENV_ 等<a href=\"http://tldp.org/LDP/abs/html/othertypesv.html#ENVREF\" target=\"_blank\" rel=\"noopener noreferrer\">环境变量</a></li>\n<li>读取或修改 <em>$SHELLOPTS</em>，shell环境选项。</li>\n<li>输出重定向。</li>\n<li>调用包含 / 的命令。</li>\n<li>调用 <a href=\"http://tldp.org/LDP/abs/html/internal.html#EXECREF\" target=\"_blank\" rel=\"noopener noreferrer\">exec</a> 来替代shell进程。</li>\n<li>其他各种会造成混乱或颠覆脚本用途的命令。</li>\n<li>在脚本中跳出限制模式。</li>\n</ul>\n<h4 id=\"例-22-1-在限制模式运行脚本\"> 例 22-1. 在限制模式运行脚本</h4>\n<div><pre><code>#!/bin/bash\n\n#  在脚本开头用&quot;#!/bin/bash -r&quot;\n#+ 可以让整个脚本在限制模式运行。\n\necho\n\necho &quot;改变目录。&quot;\ncd /usr/local\necho &quot;现在是在 `pwd`&quot;\necho &quot;回到家目录。&quot;\ncd\necho &quot;现在是在 `pwd`&quot;\necho\n\n# 到此为止一切都是正常的，非限制模式。\n\nset -r\n# set --restricted 效果相同。\necho &quot;==&gt; 现在是限制模式 &lt;==&quot;\n\necho\necho\n\necho &quot;在限制模式试图改变目录。&quot;\ncd ..\necho &quot;依旧在 `pwd`&quot;\n\necho\necho\n\necho &quot;\\$SHELL = $SHELL&quot;\necho &quot;试图在限制模式改变Shell 。&quot;\nSHELL=&quot;/bin/ash&quot;\necho\necho &quot;\\$SHELL= $SHELL&quot;\n\necho\necho\n\necho &quot;试图在限制模式重定向输出内容。&quot;\nls -l /usr/bin &gt; bin.files\nls -l bin.files    # 尝试列出试图创建的文件。\n\necho\n\nexit 0\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第二十三章. 进程替换",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/23_Process_Substitution/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/23_Process_Substitution/",
      "content_html": "<h1 id=\"第二十三章-进程替换\"> 第二十三章. 进程替换</h1>\n<p>用<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#PIPEREF\" target=\"_blank\" rel=\"noopener noreferrer\">管道</a> 将一个命令的 <code>标准输出</code> 输送到另一个命令的 <code>标准输入</code> 是个强大的技术。但是如果你需要用管道输送_多个_命令的 <code>标准输出</code> 怎么办？这时候 <em>进程替换</em> 就派上用场了。</p>\n<p><em>进程替换</em> 把一个（或多个）<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#PROCESSREF\" target=\"_blank\" rel=\"noopener noreferrer\">进程</a> 的输出送到另一个进程的 <code>标准输入</code>。</p>\n<p><strong>样板</strong>\n命令列表要用括号括起来</p>\n<div><pre><code>&gt;(command_list)\n&lt;(command_list)\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>进程替换使用 <code>/dev/fd/&lt;n&gt;</code> 文件发送括号内进程的结果到另一个进程。[1]</p>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\">&quot;&lt;&quot;或&quot;&gt;&quot;与括号之间没有空格，加上空格或报错。</p>\n<div><pre><code>bash$ echo &gt;(true)\n/dev/fd/63\n\nbash$ echo &lt;(true)\n/dev/fd/63\n\nbash$ echo &gt;(true) &lt;(true)\n/dev/fd/63 /dev/fd/62\n\nbash$ wc &lt;(cat /usr/share/dict/linux.words)\n 483523  483523 4992010 /dev/fd/63\n\nbash$ grep script /usr/share/dict/linux.words | wc\n    262     262    3601\n\nbash$ wc &lt;(grep script /usr/share/dict/linux.words)\n    262     262    3601 /dev/fd/63\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\">Bash用两个文件描述符创建管道，<code>--fIn 和 fOut--</code> 。<a href=\"http://tldp.org/LDP/abs/html/internal.html#TRUEREF\" target=\"_blank\" rel=\"noopener noreferrer\">true</a> 的<code>标准输入</code>连接 fOut(dup2(fOut, 0))，然后Bash 传递一个 <code>/dev/fd/fIn</code> 参数给 <strong>echo</strong> 。在不使用 <code>/dev/fd/&lt;n&gt;</code> 的系统里，Bash可以用临时文件（感谢 S.C. 指出这点）。</p>\n<p>进程替换可以比较两个不同命令的输出，或者同一个命令使用不同选项的输出。</p>\n<div><pre><code>bash$ comm &lt;(ls -l) &lt;(ls -al)\ntotal 12\n-rw-rw-r--    1 bozo bozo       78 Mar 10 12:58 File0\n-rw-rw-r--    1 bozo bozo       42 Mar 10 12:58 File2\n-rw-rw-r--    1 bozo bozo      103 Mar 10 12:58 t2.sh\n        total 20\n        drwxrwxrwx    2 bozo bozo     4096 Mar 10 18:10 .\n        drwx------   72 bozo bozo     4096 Mar 10 17:58 ..\n        -rw-rw-r--    1 bozo bozo       78 Mar 10 12:58 File0\n        -rw-rw-r--    1 bozo bozo       42 Mar 10 12:58 File2\n        -rw-rw-r--    1 bozo bozo      103 Mar 10 12:58 t2.sh\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>进程替换可以比较两个目录的内容——来检查哪些文件在这个目录而不在那个目录。</p>\n<div><pre><code>diff &lt;(ls $first_directory) &lt;(ls $second_directory)\n</code></pre>\n<div><span>1</span><br></div></div><p>进程替换的一些其他用法：</p>\n<div><pre><code>read -a list &lt; &lt;( od -Ad -w24 -t u2 /dev/urandom )\n#  从 /dev/urandom 读取一个随机数列表\n#+ 用 &quot;od&quot; 处理\n#+ 输送到 &quot;read&quot; 的标准输入. . .\n#  来自 &quot;insertion-sort.bash&quot; 示例脚本。\n#  致谢：JuanJo Ciarlante。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code>PORT=6881   # bittorrent（BT端口）\n\n#  扫描端口，确保没有恶意行为\nnetcat -l $PORT | tee&gt;(md5sum -&gt;mydata-orig.md5) |\ngzip | tee&gt;(md5sum - | sed &#39;s/-$/mydata.lz2/&#39;&gt;mydata-gz.md5)&gt;mydata.gz\n\n#  检查解压缩结果：\n  gzip -d&lt;mydata.gz | md5sum -c mydata-orig.md5)\n#  对原件的MD5校验用来检查标准输入，并且探测压缩当中出现的问题。\n\n#  Bill Davidsen 贡献了这个例子\n#+ （ABS指南作者做了轻微修改）。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><pre><code>cat &lt;(ls -l)\n# 等价于\tls -l | cat\n\nsort -k 9 &lt;(ls -l /bin) &lt;(ls -l /usr/bin) &lt;(ls -l /usr/X11R6/bin)\n#  列出 3 个主要 &#39;bin&#39; 目录的文件，按照文件名排序。\n#  注意，有三个（数一下）单独的命令输送给了 &#39;sort&#39;。\n\ndiff &lt;(command1) &lt;(command2)    # 比较命令输出结果的不同之处。\n\ntar cf &gt;(bzip2 -c &gt; file.tar.bz2) $directory_name\n\n#  调用 &quot;tar cf /dev/fd/?? $directory_name&quot;，然后 &quot;bzip2 -c &gt; file.tar.bz2&quot;。\n#\n#  因为 /dev/fd/&lt;n&gt; 系统特性\n#  不需要在两个命令之间使用管道符\n#\n#  这个可以模拟\n#\nbzip2 -c &lt; pipe &gt; file.tar.bz2&amp;\ntar cf pipe $directory_name\nrm pipe\n#\t或者\nexec 3&gt;&amp;1\ntar cf /dev/fd/4 $directory_name 4&gt;&amp;1 &gt;&amp;3 3&gt;&amp;- | bzip2 -c &gt; file.tar.bz2 3&gt;&amp;-\nexec 3&gt;&amp;-\n\n# 致谢：Stéphane Chazelas\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>在子shell中 <a href=\"http://tldp.org/LDP/abs/html/gotchas.html#BADREAD0\" target=\"_blank\" rel=\"noopener noreferrer\">echo 命令用管道输送给 while-read 循环</a>时会出现问题，下面是避免的方法：</p>\n<p><strong>例23-1 不用 fork 的代码块重定向。</strong></p>\n<div><pre><code>#!/bin/bash\n\n#  wr-ps.bash: 使用进程替换的 while-read 循环。\n\n#  示例由 Tomas Pospisek 贡献。\n# （ABS指南作者做了大量改动。）\n\necho\n\necho &quot;random input&quot; | while read i\ndo\n  global=3D&quot;: Not available outside the loop.&quot;\n  # ... 因为在子 shell 中运行。\ndone\n\necho &quot;\\$global (从子进程之外) = $global&quot;\n# $global (从子进程之外) =\n\necho; echo &quot;--&quot;; echo\n\nwhile read i\ndo\n  echo $i\n  global=3D&quot;: Available outside the loop.&quot;\n  # ... 因为没有在子 shell 中运行。\ndone &lt; &lt;( echo &quot;random input&quot; )\n#    ^ ^\n\necho &quot;\\$global (使用进程替换) = $global&quot;\n#  随机输入\n#  $global (使用进程替换)= 3D: Available outside the loop.\n\n\necho; echo &quot;##########&quot;; echo\n\n\n\n# 同样道理 . . .\n\ndeclare -a inloop\nindex=0\ncat $0 | while read line\ndo\n  inloop[$index]=&quot;$line&quot;\n  ((index++))\n  # 在子 shell 中运行，所以 ...\ndone\necho &quot;OUTPUT = &quot;\necho ${inloop[*]}           # ... 什么也没有显示。\n\n\necho; echo &quot;--&quot;; echo\n\n\ndeclare -a outloop\nindex=0\nwhile read line\ndo\n  outloop[$index]=&quot;$line&quot;\n  ((index++))\n  # 没有在子 shell 中运行，所以 ...\ndone &lt; &lt;( cat $0 )\necho &quot;OUTPUT = &quot;\necho ${outloop[*]}          # ... 整个脚本的结果显示出来。\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br></div></div><p>下面是个类似的例子。</p>\n<p><strong>例 23-2. 重定向进程替换的输出到一个循环内</strong></p>\n<div><pre><code>#!/bin/bash\n# psub.bash\n#  受 Diego Molina 启发（感谢！）。\n\ndeclare -a array0\nwhile read\ndo\n  array0[${#array0[@]}]=&quot;$REPLY&quot;\ndone &lt; &lt;( sed -e &#39;s/bash/CRASH-BANG!/&#39; $0 | grep bin | awk &#39;{print $1}&#39; )\n#  由进程替换来设置&#39;read&#39;默认变量（$REPLY）。\n#+ 然后将变量复制到一个数组。\n\necho &quot;${array0[@]}&quot;\n\nexit $?\n\n# ====================================== #\n# 运行结果：\nbash psub.bash\n\n#!/bin/CRASH-BANG! done #!/bin/CRASH-BANG!\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>一个读者发来一个有趣的进程替换例子，如下：</p>\n<div><pre><code># SuSE 发行版中提取的脚本片段：\n\n# --------------------------------------------------------------#\nwhile read  des what mask iface; do\n# 一些命令 ...\ndone &lt; &lt;(route -n)  \n#    ^ ^  第一个 &lt; 是重定向，第二个是进程替换。\n\n#  为了测试，我们让它来做点儿事情。\nwhile read  des what mask iface; do\n  echo $des $what $mask $iface\ndone &lt; &lt;(route -n)  \n\n# 输出内容:\n# Kernel IP routing table\n# Destination Gateway Genmask Flags Metric Ref Use Iface\n# 127.0.0.0 0.0.0.0 255.0.0.0 U 0 0 0 lo\n# --------------------------------------------------------------#\n\n#  正如 Stéphane Chazelas 指出的,\n#+ 一个更容易理解的等价代码如下：\nroute -n |\n  while read des what mask iface; do   # 通过管道输出设置的变量\n    echo $des $what $mask $iface\n  done  #  这段代码的结果更上面的相同。\n        #  但是，Ulrich Gayer 指出 . . .\n        #+ 这段简化版等价代码在 while 循环里用了子 shell，\n        #+ 因此当管道终止时变量都消失了。\n\n# --------------------------------------------------------------#\n\n#  然而，Filip Moritz 说上面的两个例子有一个微妙的区别，\n#+ 见下面的代码\n\n(\nroute -n | while read x; do ((y++)); done\necho $y # $y is still unset\n\nwhile read x; do ((y++)); done &lt; &lt;(route -n)\necho $y # $y has the number of lines of output of route -n\n)\n\n#  更通俗地说（译者注：原文本行少了注释符）\n(\n: | x=x\n# 似乎启动了子 shell ，就像\n: | ( x=x )\n# 而\nx=x &lt; &lt;(:)\n# 并没有。\n)\n#  这个方法在解析 csv 和类似格式时很有用。\n#  也就是在效果上，原始 SuSE 系统的代码片段就是做这个用的。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><p>注解 [1]\n这个与命名管道（使用临时文件）的效果相同，而且事实上，进程替换也曾经用过命名管道。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "24.1 复杂函数和函数复杂性",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/24_1_complex_functions_and_function_complexities/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/24_1_complex_functions_and_function_complexities/",
      "content_html": "<h1 id=\"_24-1-复杂函数和函数复杂性\"> 24.1 复杂函数和函数复杂性</h1>\n<p>函数可以处理传递给它的参数，并且能返回它的<a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态码</a>给脚本，以便后续处理。</p>\n<div><pre><code>function_name $arg1 $arg2\n</code></pre>\n<div><span>1</span><br></div></div><p>函数通过位置来引用传递过来的参数（就好像它们是<a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#POSPARAMREF\" target=\"_blank\" rel=\"noopener noreferrer\">位置参数</a>），例如，$1, $2，等等。</p>\n<p>例子 24-2. 带参数的函数</p>\n<div><pre><code>#!/bin/bash\n# 函数和参数\n\nDEFAULT=default                 # 默认参数值。D\n\nfunc2 () {\n    if [ -z &quot;$1&quot; ]              # 第一个参数长度是否为零？\n    then\n        echo &quot;-Parameter #1 is zero length.-&quot;  # 或者没有参数传递进来。\n    else\n        echo &quot;-Parameter #1 is \\&quot;$1\\&quot;.-&quot;\n    fi\n\n    variable=${1-$DEFAULT}\n    echo &quot;variable = $variable&quot;     #  这里的参数替换\n                                    #+ 表示什么？\n                                    #  ---------------------------\n                                    #  为了区分没有参数的情况\n                                    #+ 和只有一个null参数的情况。\n\n    if [ &quot;$2&quot; ]\n    then\n        echo &quot;-Parameter #2 is \\&quot;$2\\&quot;.-&quot;\n    fi\n\n    return 0\n}\n\necho\n\necho &quot;Nothing passed.&quot;\nfunc2                          # 不带参数调用\necho\n\n\necho &quot;Zero-length parameter passed.&quot;\nfunc2 &quot;&quot;                        # 使用0长度的参数进行调用\necho\n\necho &quot;Null parameter passed.&quot;\nfunc2 &quot;$uninitialized_param&quot;    # 使用未初始化的参数进行调用\necho\n\n\necho &quot;One parameter passed.&quot;\nfunc2 first           # 带一个参数的调用\necho\n\necho &quot;Two parameters passed.&quot;\nfunc2 first second    # 带两个参数的调用\necho\n\necho &quot;\\&quot;\\&quot; \\&quot;second\\&quot; passed.&quot;\nfunc2 &quot;&quot; second       # 第一个调用参数为0长度参数，\necho                  # 第二个是ASCII码的字符串参数。\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 也可以使用<a href=\"http://tldp.org/LDP/abs/html/othertypesv.html#SHIFTREF\" target=\"_blank\" rel=\"noopener noreferrer\">shift</a>命令来处理传递给函数的参数（请参考<a href=\"http://tldp.org/LDP/abs/html/assortedtips.html#MULTIPLICATION\" target=\"_blank\" rel=\"noopener noreferrer\">例子 33-18</a>.\n但是，传递给脚本的命令行参数怎么办？在函数内部，可以看见这些命令行参数么？好，现在让我们弄清楚这个困惑。</p>\n<p>例子 34-3. 函数以及传递给脚本的命令行参数。</p>\n<div><pre><code>#!/bin/bash\n# func-cmdlinearg.sh\n#  带一个命令行参数来执行这个脚本，\n#+ 类似于 $0 arg1.\n\n\nfunc ()\n{\n    echo &quot;$1&quot;   # 显示传递给这个函数的第一个参数。\n}               # 命令行参数可以么？\n\necho &quot;First call to function: no arg passed.&quot;\necho &quot;See if command-line arg is seen.&quot;\nfunc\n# 不! 没有见到命令行参数.\n\necho &quot;============================================================&quot;\necho\necho &quot;Second call to function: command-line arg passed explicitly.&quot;\n\nfunc $1\n# 现在，见到命令行参数了！\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>和其它的编程语言相比，shell脚本一般只会传值给函数。如果把变量名（事实上就是指针）作为参数传递给函数的话，那将被解释为字面含义，也就是被看做字符串。 函数只会以字面含义来解释函数参数。</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/ivr.html#IVRREF\" target=\"_blank\" rel=\"noopener noreferrer\">变量的间接引用</a>（请参考<a href=\"http://tldp.org/LDP/abs/html/bashver2.html#EX78\" target=\"_blank\" rel=\"noopener noreferrer\">例子 37-2</a>）提供了一种笨拙的机制，来将变量指针传递给函数。</p>\n<p>例子 24-4. 将一个间接引用传递给函数</p>\n<div><pre><code>#!/bin/bash\n# ind-func.sh: 将一个间接引用传递给函数。\n\necho_var ()\n{\n    echo &quot;$1&quot;\n}\n\nmessage=Hello\nHello=Goodbye\n\necho_var &quot;$message&quot;         # Hello\n# 现在，让我们传递一个间接引用给函数。\necho_var &quot;${!message}&quot;     # Goodbye\necho &quot;-------------&quot;\n\n# 如果我们改变“hello”的值会发生什么？\nHello=&quot;Hello, again!&quot;\necho_var &quot;$message&quot;        # Hello\necho_var &quot;${!message}&quot;     # Hello, again!\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>接下来的一个逻辑问题就是，将参数传递给函数之后，参数能否被解除引用。</p>\n<p>例子 24-5. 对一个传递给函数的参数进行解除引用的操作</p>\n<div><pre><code>#!/bin/bash\n# dereference.sh\n# 对一个传递给函数的参数进行解除引用的操作。\n# 此脚本由Bruce W. Clare编写.\n\ndereference ()\n{\n    y=\\$&quot;$1&quot;   # 变量名（而不是值）.\n    echo $y    # $Junk\n\n    x=`eval &quot;expr \\&quot;$y\\&quot; &quot;`\n    echo $1=$x\n    eval &quot;$1=\\&quot;Some Different Text \\&quot;&quot;  # 赋新值.\n}\n\nJunk=&quot;Some Text&quot;\necho $Junk &quot;before&quot;         # Some Text before\n\ndereference Junk\necho $Junk &quot;after&quot;          # Some Different Text after\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>例子 24-6. 再来一次，对一个传递给函数的参数进行解除引用的操作</p>\n<div><pre><code>#!/bin/bash\n# ref-params.sh: 解除传递给函数的参数引用。\n#                (复杂的例子C)\n\nITERATIONS=3  # 取得输入的次数。\nicount=1\n\nmy_read () {\n    #  用my_read varname这种形式来调用,\n    #+ 将之前用括号括起的值作为默认值输出,\n    #+ 然后要求输入一个新值.\n\n    local local_var\n\n    echo -n &quot;Enter a value &quot;\n    eval &#39;echo -n &quot;[$&#39;$1&#39;] &quot;&#39;  #  之前的值.\n# eval echo -n &quot;[\\$$1] &quot;     #  更容易理解,\n                             #+ 但会丢失用户在尾部输入的空格。\n    read local_var\n    [ -n &quot;$local_var&quot; ] &amp;&amp; eval $1=\\$local_var\n\n    # &quot;与列表&quot;: 如果 &quot;local_var&quot; 的测试结果为true，则把变量&quot;$1&quot;的值赋给它。\n}\n\necho\n\nwhile [ &quot;$icount&quot; -le &quot;$ITERATIONS&quot; ]\ndo\n    my_read var\n    echo &quot;Entry #$icount = $var&quot;\n    let &quot;icount += 1&quot;\n    echo\ndone\n\n# 感谢Stephane Chazelas 提供这个例子。\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h2 id=\"退出与返回码\"> 退出与返回码</h2>\n<h3 id=\"退出状态码\"> 退出状态码</h3>\n<p>函数返回一个值，被称为退出状态码。这和一条命令返回的<a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态码</a>类似。退出状态码可以由<strong>return</strong> 命令明确指定，也可以由函数中最后一条命令的退出状态码来指定（如果成功，则返回0，否则返回非0值）。可以在脚本中使用<a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#XSTATVARREF\" target=\"_blank\" rel=\"noopener noreferrer\">$?</a>来引用<a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态码</a>。 因为有了这种机制，所以脚本函数也可以像C函数一样有“返回值”。</p>\n<h3 id=\"return\"> return</h3>\n<p>终止一个函数。一个return命令<a href=\"http://tldp.org/LDP/abs/html/complexfunct.html#FTN.AEN18474\" target=\"_blank\" rel=\"noopener noreferrer\">1</a> 可选的允许带一个整形参数，这个整形参数将作为函数的“退出状态码”返回给调用这个函数的脚本，并且这个证书也被赋值给变量<a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#XSTATVARREF\" target=\"_blank\" rel=\"noopener noreferrer\">$?</a>.</p>\n<p>例子 24-7. 取两个数中的最大值</p>\n<div><pre><code>#!/bin/bash\n# max.sh: 取两个Maximum of two integers.\nE_PARAM_ERR=250    # 如果传给函数的参数少于两个时，就返回这个值。\nEQUAL=251          # 如果两个参数相等时，就返回这个值。\n#  任意超出范围的\n#+ 参数值都可能传递到函数中。\n\nmax2 ()             # 返回两个数中的最大值。\n{                   # 注意：参与比较的数必须小于250.\n    if [ -z &quot;$2&quot; ]\n    then\n        return $E_PARAM_ERR\n    fi\n\n    if [ &quot;$1&quot; -eq &quot;$2&quot; ]\n    then\n        return $EQUAL\n    else\n        if [ &quot;$1&quot; -gt &quot;$2&quot; ]\n        then\n            return $1\n        else\n            return $2\n        fi\n    fi\n}\n\nmax2 33 34\nreturn_val=$?\n\nif [ &quot;$return_val&quot; -eq $E_PARAM_ERR ]\nthen\n    echo &quot;Need to pass two parameters to the function.&quot;\nelif [ &quot;$return_val&quot; -eq $EQUAL ]\nthen\n    echo &quot;The two numbers are equal.&quot;\nelse\n    echo &quot;The larger of the two numbers is $return_val.&quot;\nfi\n\nexit 0\n#  练习 (easy):\n￼#  ---------------\n#  把这个脚本转化为交互脚本，\n#+ 也就是，修改这个脚本，让其要求调用者输入2个数。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/tip.gif\" alt=\"info\"> 为了让函数可以返回字符串或者是数组，可以使用一个在函数外可见的专用全局变量。</p>\n<div><pre><code>count_lines_in_etc_passwd()\n{\n    [[ -r /etc/passwd ]] &amp;&amp; REPLY=$(echo $(wc -l &lt; /etc/passwd))\n    #  如果 /etc/passwd 可读，让 REPLY 等于 文件的行数.\n    #  这样就可以同时返回参数值与状态信息。\n    #  &#39;echo&#39; 看上去没什么用，可是...\n    #+ 它的作用是删除输出中的多余空白符。\n}\n\nif count_lines_in_etc_passwd\nthen\n    echo &quot;There are $REPLY lines in /etc/passwd.&quot;\nelse\n    echo &quot;Cannot count lines in /etc/passwd.&quot;\nfi\n\n# 感谢, S.C.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>例子 24-8. 将阿拉伯数字转化为罗马数字</p>\n<div><pre><code>#!/bin/bash\n# 将阿拉伯数字转化为罗马数字。\n# 范围：0 - 200\n# 比较粗糙，但可以正常工作。\n# 扩展范围, 并且完善这个脚本, 作为练习.\n# 用法: roman number-to-convert\n\nLIMIT=200\nE_ARG_ERR=65\nE_OUT_OF_RANGE=66\n\nif [ -z &quot;$1&quot; ]\nthen\n    echo &quot;Usage: `basename $0` number-to-convert&quot;\nexit $E_ARG_ERR\nfi\n\nnum=$1\nif [ &quot;$num&quot; -gt $LIMIT ]\nthen\n    echo &quot;Out of range!&quot;\n    exit $E_OUT_OF_RANGE\nfi\n\nto_roman ()             # 在第一次调用函数前必须先定义它。\n{\n    number=$1\n    factor=$2\n    rchar=$3\n    let &quot;remainder = number - factor&quot;\n    while [ &quot;$remainder&quot; -ge 0 ]\n    do\n        echo -n $rchar\n        let &quot;number -= factor&quot;\n        let &quot;remainder = number - factor&quot;\n    done\n\n    return $number\n        # 练习:\n        # ---------\n        # 1) 解释这个函数如何工作\n        #    提示: 依靠不断的除，来分割数字。\n        # 2) 扩展函数的范围：\n        #    提示: 使用echo和substitution命令.\n}\n\nto_roman $num 100 C\nnum=$?\nto_roman $num 90 LXXXX\nnum=$?\nto_roman $num 50 L\nnum=$?\nto_roman $num 40 XL\nnum=$?\nto_roman $num 10 X\nnum=$?\nto_roman $num 9 IX\nnum=$?\nto_roman $num 5 V\nnum=$?\nto_roman $num 4 IV\nnum=$?\nto_roman $num 1 I\n# 成功调用了转换函数。\n# 这真的是必须的么？ 这个可以简化么？\n\necho\n\nexit \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br></div></div><p>也可以参见<a href=\"http://tldp.org/LDP/abs/html/testbranch.html#ISALPHA\" target=\"_blank\" rel=\"noopener noreferrer\">例子 11-29</a></p>\n<p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 函数所能返回最大的正整数是255. return命令和<a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态码</a>的概念紧密联系在一起，并且退出状态码的值受此限制。 幸运的是，如果想让函数返回大整数的话，有好多种不同的<a href=\"http://tldp.org/LDP/abs/html/assortedtips.html#RVT\" target=\"_blank\" rel=\"noopener noreferrer\">变通方法</a> 能够应对这个情况。</p>\n<p>例子24-9. 测试函数最大的返回值</p>\n<div><pre><code>#!/bin/bash\n# return-test.sh\n# 函数所能返回的最大正整数为255.\n\nreturn_test ()         # 传给函数什么值，就返回什么值。\n{\n    return $1\n}\n\nreturn_test 27          # o.k.\necho $?                 # 返回27.\n\nreturn_test 255         # Still o.k.\necho $?                 # 返回 255.\n\nreturn_test 257         # 错误!\necho $?                 # 返回 1 (对应各种错误的返回码).\n\n# =========================================================\nreturn_test -151896    # 能返回一个大负数么?\necho $?                # 能否返回 -151896?\n                        # 不行! 返回的是 168.\n\n#  Bash 2.05b 之前的版本\n#+ 允许返回大负数。\n#  这可能是个有用的特性。\n#  Bash之后的新版本修正了这个漏洞。\n#  这可能会影响以前所编写的脚本。\n#  一定要小心!\n# =========================================================\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>如果你想获得大整数“返回值”的话，简单的方法就是将“要返回的值”保存到一个全局变量中。</p>\n<div><pre><code>Return_Val=   # 用于保存函数特大返回值的全局变量。\n\nalt_return_test ()\n{\n    fvar=$1\n    Return_Val=$fvar\n    return   # 返回 0 (成功).\n}\n\nalt_return_test 1\necho $?             #0\necho &quot;return value = $Return_Val&quot;            #1\n\nalt_return_test 256\necho &quot;return value = $Return_Val&quot;           # 256\n\nalt_return_test 257\necho &quot;return value = $Return_Val&quot;           # 257\n\nalt_return_test 25701\necho &quot;return value = $Return_Val&quot;           #25701\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>一种更优雅的做法是在函数中使用echo命令将&quot;返回值输出到stdout“，然后用<a href=\"http://tldp.org/LDP/abs/html/commandsub.html#COMMANDSUBREF\" target=\"_blank\" rel=\"noopener noreferrer\">命令替换</a>来捕捉此值。请参考<a href=\"http://tldp.org/LDP/abs/html/assortedtips.html\" target=\"_blank\" rel=\"noopener noreferrer\">36.7小节</a> 中<a href=\"http://tldp.org/LDP/abs/html/assortedtips.html#RVT\" target=\"_blank\" rel=\"noopener noreferrer\">关于这种用法的讨论</a>。</p>\n<p>例子 24-10. 比较两个大整数</p>\n<div><pre><code>#!/bin/bash\n# max2.sh: 取两个大整数中的最大值。\n\n#  这是前一个例子 &quot;max.sh&quot; 的修改版,\n#+ 这个版本可以比较两个大整数。\n\nEQUAL=0             # 如果两个值相等，那就返回这个值。\nE_PARAM_ERR=-99999  # 没有足够多的参数，那就返回这个值。\n#           ^^^^^^    任意超出范围的参数都可以传递进来。\n\nmax2 ()             # &quot;返回&quot; 两个整数中最大的那个。\n{\n    if [ -z &quot;$2&quot; ]\n    then\n        echo $E_PARAM_ERR\n        return\n    fi\n\n    if [ &quot;$1&quot; -eq &quot;$2&quot; ]\n    then\n        echo $EQUAL\n        return\n    else\n        if [ &quot;$1&quot; -gt &quot;$2&quot; ]\n        then\n            retval=$1\n        else\n            retval=$2\n        fi\n    fi\n\n    echo $retval            # 输出 (到 stdout), 而没有用返回值。\n                            # 为什么?\n}\n\n\nreturn_val=$(max2 33001 33997)\n#            ^^^^             函数名\n#                 ^^^^^ ^^^^^ 传递进来的参数\n#  这其实是命令替换的一种形式：\n#+ 可以把函数看作一个命令，\n#+ 然后把函数的stdout赋值给变量“return_val&quot;.\n\n\n# ========================= OUTPUT ========================\nif [ &quot;$return_val&quot; -eq &quot;$E_PARAM_ERR&quot; ]\nthen\n    echo &quot;Error in parameters passed to comparison function!&quot;\nelif [ &quot;$return_val&quot; -eq &quot;$EQUAL&quot; ]\nthen\n    echo &quot;The two numbers are equal.&quot;\nelse\n    echo &quot;The larger of the two numbers is $return_val.&quot;\nfi\n# =========================================================\n\nexit 0\n\n#  练习:\n#  ---------\n#  1) 找到一种更优雅的方法，\n#+    去测试传递给函数的参数。\n#  2) 简化”输出“段的if/then结构。\n#  3) 重写这个脚本，使其能够从命令行参数中获得输入。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br></div></div><p>这是另一个能够捕捉函数”返回值“的例子。要想搞明白这个例子，需要一些<a href=\"http://tldp.org/LDP/abs/html/awk.html#AWKREF\" target=\"_blank\" rel=\"noopener noreferrer\">awk</a>的知识。</p>\n<div><pre><code>month_length ()  # 把月份作为参数。\n{                # 返回该月包含的天数。\n    monthD=&quot;31 28 31 30 31 30 31 31 30 31 30 31&quot;  # 作为局部变量声明？\n    echo &quot;$monthD&quot; | awk &#39;{ print $&#39;&quot;${1}&quot;&#39; }&#39;    # 小技巧.\n#                             ^^^^^^^^^\n# 传递给函数的参数  ($1 -- 月份), 然后传给 awk.\n# Awk 把参数解释为&quot;print $1 . . . print $12&quot; (这依赖于月份号)\n# 这是一个模板，用于将参数传递给内嵌awk的脚本：\n#                                 $&#39;&quot;${script_parameter}&quot;&#39;\n#    这里是一个简单的awk结构：\n#    echo $monthD | awk -v month=$1 &#39;{print $(month)}&#39;\n#    使用awk的-v选项，可以把一个变量值赋给\n#+   awk程序块的执行体。\n#    感谢 Rich.\n#  需要做一些错误检查，来保证月份好正确，在范围（1-12）之间， \n#+ 别忘了检查闰年的二月。\n}\n# ----------------------------------------------\n# 用例：\nmonth=4        # 以四月为例。\ndays_in=$(month_length $month)\necho $days_in  # 30\n# ----------------------------------------------\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>也请参考<a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#DAYSBETWEEN\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-7</a> 和<a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#STDDEV\" target=\"_blank\" rel=\"noopener noreferrer\">例子A-37</a>.</p>\n<p>练习:使用目前我们已经学到的知识，来扩展之前的例子 <a href=\"\">将阿拉伯数字转化为罗马数字</a>，让它能够接受任意大的输入。</p>\n<p>重定向\n重定向函数的stdin\n函数本质上其实就是一个<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#CODEBLOCKREF\" target=\"_blank\" rel=\"noopener noreferrer\">代码块</a>,这就意味着它的stdin可以被重定向（比如<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#EX8\" target=\"_blank\" rel=\"noopener noreferrer\">例子3-1</a>)。</p>\n<p>例子 24-11. 从username中取得用户的真名</p>\n<div><pre><code>#!/bin/bash\n# realname.sh\n#\n# 依靠username，从/etc/passwd 中获得“真名”.\n\n\nARGCOUNT=1       # 需要一个参数.\nE_WRONGARGS=85\n\nfile=/etc/passwd\npattern=$1\n\nif [ $# -ne &quot;$ARGCOUNT&quot; ]\nthen\n    echo &quot;Usage: `basename $0` USERNAME&quot;\n    exit $E_WRONGARGS\nfi\n\nfile_excerpt ()    # 按照要求的模式来扫描文件,\n{                  #+ 然后打印文件的相关部分。\n    while read line  # &quot;while&quot; 并不一定非得有 [ 条件 ] 不可。\n    do\n        echo &quot;$line&quot; | grep $1 | awk -F&quot;:&quot; &#39;{ print $5 }&#39;\n        # awk用&quot;:&quot; 作为界定符。\n    done\n    } &lt;$file  # 重定向到函数的stdin。\n\nfile_excerpt $pattern\n# 是的，整个脚本其实可以被缩减为\n#       grep PATTERN /etc/passwd | awk -F&quot;:&quot; &#39;{ print $5 }&#39;\n# or\n#       awk -F: &#39;/PATTERN/ {print $5}&#39;\n# or\n#       awk -F: &#39;($1 == &quot;username&quot;) { print $5 }&#39; # 从username中获取真名\n# 但是，这些起不到示例的作用。\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p>还有一个办法，或许能够更好的理解重定向函数的stdin。 它在函数内添加了一对大括号，并且将重定向stdin的行为放在这对添加的大括号上。</p>\n<div><pre><code># 用下面的方法来代替它:\nFunction ()\n{\n    ...\n} &lt; file\n\n# 试试这个:\nFunction ()\n{\n    { \n        ...\n    } &lt; file \n}\n\n# 同样的,\n\nFunction ()  # 没问题.\n{\n    {\n        echo $*\n    } | tr a b \n}\n\nFunction ()  # 不行.\n{\n    echo $*\n} | tr a b   # 这儿的内嵌代码块是被强制的。\n# 感谢, S.C.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> Emmanuel Rouat的 <a href=\"http://tldp.org/LDP/abs/html/sample-bashrc.html\" target=\"_blank\" rel=\"noopener noreferrer\">sample bash</a> 文件包含了一些很有指导性意义的函数例子。</p>\n<h3 id=\"echo\"> echo</h3>\n<p>shell中函数返回值，个人觉得可以用<code>echo</code></p>\n",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "24.2 局部变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/24_2_local_variables/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/24_2_local_variables/",
      "content_html": "<h1 id=\"_24-2-局部变量\"> 24.2 局部变量</h1>\n<p>怎样使一个变量变成“局部”变量？</p>\n<p>局部变量\n如果变量用local来声明，那么它就只能够在该变量被声明的<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#CODEBLOCKREF\" target=\"_blank\" rel=\"noopener noreferrer\">代码块</a>中可见。 这个代码块就是局部<a href=\"http://tldp.org/LDP/abs/html/subshells.html#SCOPEREF\" target=\"_blank\" rel=\"noopener noreferrer\">范围</a>。 在一个函数中，一个局部变量只有在函数代码中才有意义.<a href=\"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18568\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a></p>\n<p>例子 24-12. 局部变量的可见范围</p>\n<div><pre><code>#!/bin/bash\n# ex62.sh: 函数内部的局部变量与全局变量。\n\nfunc () {\n    local loc_var=23       # 声明为局部变量。\n    echo                   # 使用&#39;local&#39;内建命令\n    echo &quot;\\&quot;loc_var\\&quot; in function = $loc_var&quot;\n    global_var=999         # 没有声明为局部变量。\n    # 默认为全局变量。\n\n    echo &quot;\\&quot;global_var\\&quot; in function = $global_var&quot;\n}\n\nfunc\n\n# 现在，来看看局部变量“loc_var”在函数外部是否可见。\n\necho\necho &quot;\\&quot;loc_var\\&quot; outside function = $loc_var&quot;\n                                    # $loc_var outside function =\n                                    # 不行, $loc_var 不是全局可见的.\necho &quot;\\&quot;global_var\\&quot; outside function = $global_var&quot;\n                                    # $在函数外部global_var = 999\n                                    # $global_var 是全局可见的.\necho\n\nexit 0\n#  与C语言相比，在函数内声明的Bash变量\n#+ 除非它被明确声明为local时，它才是局部的。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\" alt=\"notice\"> 在函数被调用之前，所有在函数中声明的变量，在函数外部都是不可见的，当然也包括那些被明确声明为local的变量。</p>\n<div><pre><code>#!/bin/bash\n\nfunc ()\n{\n    global_var=37    #  变量只在函数体内可见\n                     #+ 在函数被调用之前。\n}                    #  函数结束\n\necho &quot;global_var = $global_var&quot;  # global_var =\n                                 #  函数 &quot;func&quot; 还没被调用，\n                                 #+ 所以$global_var 在这里还不是可见的.\nfunc\necho &quot;global_var = $global_var&quot;  # global_var = 37\n                                 # 已经在函数调用的时候设置。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 正如Evgeniy Ivanov指出的那样，当在一条命令中定义和给一个局部变量赋值时，显然操作的顺序首先是给变量赋值，之后限定变量的局部范围。这可以通过<a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">返回值</a>来反应。</p>\n<div><pre><code>#!/bin/bash\n\necho &quot;==OUTSIDE Function (global)==&quot;\nt=$(exit 1)\necho $?     # 1\n            # 如预期一样.\n\necho\nfunction0 ()\n{\n    echo &quot;==INSIDE Function==&quot;\n    echo &quot;Global&quot;\n    t0=$(exit 1)\n    echo $?      # 1\n                 # 如预期一样.\n\n    echo\n    echo &quot;Local declared &amp; assigned in same command.&quot;\n    local t1=$(exit 1)\n    echo $?      # 0\n                 # 意料之外!\n#  显然，变量赋值发生在Apparently, \n#+ 局部声明之前。\n#+ 返回值是为了latter.\n\n    echo\n    echo &quot;Local declared, then assigned (separate commands).&quot;\n    local t2\n    t2=$(exit 1)\n    echo $?\n}\n\nfunction0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id=\"_24-2-1-局部变量和递归\"> 24.2.1 局部变量和递归</h2>\n<p>递归是一个有趣并且有时候非常有用的自己调用自己的形式。 <a href=\"http://tldp.org/LDP/abs/html/biblio.html#MAYERREF\" target=\"_blank\" rel=\"noopener noreferrer\">Herbert Mayer</a> 是这样定义递归的，“。。。表示一个算法通过使用一个简单的相同算法版本。。。”</p>\n<p>想象一下，一个定义是从自身考虑的，<a href=\"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18607\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a> 一个表达包含了自身的表达， <a href=\"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18610\" target=\"_blank\" rel=\"noopener noreferrer\">[3]</a> 一条蛇吞下自己的尾巴， <a href=\"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18614\" target=\"_blank\" rel=\"noopener noreferrer\">[4]</a> 或者 。。。 一个函数调用自身。<a href=\"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18617\" target=\"_blank\" rel=\"noopener noreferrer\">[5]</a></p>\n<p>例子 24-13. 一个简单的递归函数表示</p>\n<div><pre><code>#!/bin/bash\n# recursion-demo.sh\n# 递归演示.\n\nRECURSIONS=9   # 递归的次数.\nr_count=0      # 必须是全局变量，为什么？\n\nrecurse ()\n{\n    var=&quot;$1&quot;\n\n    while [ &quot;$var&quot; -ge 0 ]\n    do\n        echo &quot;Recursion count = &quot;$r_count&quot;  +-+  \\$var = &quot;$var&quot;&quot;\n        (( var-- )); (( r_count++ ))\n        recurse &quot;$var&quot;  #  函数调用自身(递归)\n    done              #+ 直到遇到什么样的终止条件？\n}\n\nrecurse $RECURSIONS\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>例子 24-14. 另一个简单的例子</p>\n<div><pre><code>#!/bin/bash\n# recursion-def.sh\n# 另外一个描述递归的比较生动的脚本。\n\nRECURSIONS=10\nr_count=0\nsp=&quot; &quot;\n\ndefine_recursion ()\n{\n    ((r_count++))\n    sp=&quot;$sp&quot;&quot; &quot;\n    echo -n &quot;$sp&quot;\n    echo &quot;\\&quot;The act of recurring ... \\&quot;&quot;        # Per 1913 Webster&#39;s dictionary.\n\n    while [ $r_count -le $RECURSIONS ]\n    do\n        define_recursion\n    done\n}\n\necho\necho &quot;Recursion: &quot;\ndefine_recursion\necho\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>局部变量是一个写递归代码有效的工具，但是这种方法一般会包含大量的计算负载，显然在shell脚本中并不推荐递归.<a href=\"http://tldp.org/LDP/abs/html/localvar.html#FTN.AEN18632\" target=\"_blank\" rel=\"noopener noreferrer\">[6]</a></p>\n<p>例子24-15. 使用局部变量进行递归</p>\n<div><pre><code>#!/bin/bash\n\n# 阶乘\n# ---------\n\n# Bash允许递归么？\n# 恩，允许，但是...\n# 他太慢了，所以恐怕你难以忍受。\n\nMAX_ARG=5\nE_WRONG_ARGS=85\nE_RANGE_ERR=86\n\n\nif [ -z &quot;$1&quot; ]\nthen\n    echo &quot;Usage: `basename $0` number&quot;\n    exit $E_WRONG_ARGS\nfi\n\nif [ &quot;$1&quot; -gt $MAX_ARG ]\nthen\n    echo &quot;Out of range ($MAX_ARG is maximum).&quot;\n    #  现在让我们来了解一些实际情况。\n    #  如果你想计算比这个更大的范围的阶乘，\n    #+ 应该用真正的编程语言来重写它。\n    exit $E_RANGE_ERR\nfi\n\nfact () \n{\n    local number=$1\n    #  变量&quot;number&quot; 必须被定义为局部变量，\n    #+ 否则不能正常工作。\n    if [ &quot;$number&quot; -eq 0 ]\n    then\n        factorial=1    # 0的阶乘为1.\n    else\n        let &quot;decrnum = number - 1&quot;\n        fact $decrnum  # 递归的函数调用 (就是函数调用自己).\n        let &quot;factorial = $number * $?&quot;\n    fi\n    return $factorial\n}\n\nfact $1\necho &quot;Factorial of $1 is $?.&quot;\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><p>也可以参考<a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#PRIMES\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-15</a>，一个包含递归例子的脚本。我们意识到递归同时也意味着巨大的资源消耗和缓慢的运行速度，因此它并不适合在脚本中使用。</p>\n<h2 id=\"注释\"> 注释</h2>\n<p><a href=\"http://tldp.org/LDP/abs/html/localvar.html#AEN18568\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a> 然而，如Thomas Braunberger 指出的那样，一个函数里定义的局部变量对于调用它的父函数也是可见的。</p>\n<div><pre><code>#!/bin/bash\n\nfunction1 ()\n{\n  local func1var=20\n\n  echo &quot;Within function1, \\$func1var = $func1var.&quot;\n\n  function2\n}\n\nfunction2 ()\n{\n  echo &quot;Within function2, \\$func1var = $func1var.&quot;\n}\n\nfunction1\n\nexit 0\n\n\n# 脚本的输出:\n\n# Within function1, $func1var = 20.\n# Within function2, $func1var = 20.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>在Bash手册里是这样描述的：</p>\n<blockquote>\n<p>&quot;局部变量只能在函数内部使用; 它让变量名的可见范围限制在了函数内部以及它的孩子里&quot; [emphasis added]\nThe ABS Guide的作者认为这个行为一个bug.</p>\n</blockquote>\n<p><a href=\"http://tldp.org/LDP/abs/html/localvar.html#AEN18607\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a> 被熟知为冗余。</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/localvar.html#AEN18610\" target=\"_blank\" rel=\"noopener noreferrer\">[3]</a> 被熟知为同义反复。</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/localvar.html#AEN18614\" target=\"_blank\" rel=\"noopener noreferrer\">[4]</a> 被熟知为暗喻。</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/localvar.html#AEN18617\" target=\"_blank\" rel=\"noopener noreferrer\">[5]</a> 被熟知为递归函数。</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/localvar.html#AEN18632\" target=\"_blank\" rel=\"noopener noreferrer\">[6]</a> 太多的递归层次可能会引发一个脚本的段错误。</p>\n<div><pre><code>#!/bin/bash\n\n#  提醒: 运行这个脚本可能会让你的系统卡死。\n#  如果你够好运的话，在耗尽可用内存之前，它会发生一个段错误。\n\nrecursive_function ()\t\t   \n{\necho &quot;$1&quot;     # 让函数做一些事情，加快发生段错误。\n(( $1 &lt; $2 )) &amp;&amp; recursive_function $(( $1 + 1 )) $2;\n#  只要第一个参数小于第二个参数，\n#+ 让第一个参数加1，然后递归。\n}\n\nrecursive_function 1 50000  # 递归 50,000层!\n#  很可能发生段错误(依赖于栈的大小，通过ulimit -m可以设置栈的大小)\n\n#  即使是C语言，递归调用这么多层也会发生段错误，\n#+ 通过分配栈耗尽所有的内存。\n\n\necho &quot;This will probably not print.&quot;\nexit 0  # 这个脚本可能不会正常退出。\n\n#  感谢, Stéphane Chazelas.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div>",
      "image": "http://tldp.org/LDP/abs/images/caution.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "24.3 不使用局部变量的递归",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/24_3_recursion_without_local_variables/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/24_3_recursion_without_local_variables/",
      "content_html": "<h1 id=\"_24-3-不使用局部变量的递归\"> 24.3 不使用局部变量的递归</h1>\n<p>即使不适用局部变量，函数也可以递归的调用自身。</p>\n<p>例子24-16. 斐波那契序列</p>\n<div><pre><code>#!/bin/bash\n# fibo.sh : 斐波那契序列 (递归)\n# 作者: M. Cooper\n# License: GPL3\n\n# ----------算法--------------\n# Fibo(0) = 0\n# Fibo(1) = 1\n# else\n#   Fibo(j) = Fibo(j-1) + Fibo(j-2)\n# ---------------------------------\n\nMAXTERM=15       # 要产生的计算次数。\nMINIDX=2         # 如果下标小于2，那么 Fibo(idx) = idx.\n\nFibonacci ()\n{\n    idx=$1   # 不需要是局部变量，为什么？\n    if [ &quot;$idx&quot; -lt &quot;$MINIDX&quot; ]\n    then\n        echo &quot;$idx&quot;  # 前两个下标是0和1 ... 从上面的算法可以看出来。\n    else\n        (( --idx ))  # j-1\n        term1=$( Fibonacci $idx )   #  Fibo(j-1)\n        (( --idx ))  # j-2\n        term2=$( Fibonacci $idx )   #  Fibo(j-2)\n        echo $(( term1 + term2 ))\n    fi\n    #  一个丑陋的实现\n    #  C语言里，一个更加优雅的斐波那契递归实现\n    #+ 是一个简单的只需要7-10代码的算法翻译。\n}\n\nfor i in $(seq 0 $MAXTERM)\ndo  # 计算 $MAXTERM+1 次.\n    FIBO=$(Fibonacci $i)\n    echo -n &quot;$FIBO &quot;\ndone\n# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610\n# 要花费一段时间，不是么？ 一个递归脚本是有些慢的。\n\necho\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><p>例子 24-17. 汉诺塔</p>\n<div><pre><code>#! /bin/bash\n#\n# 汉诺塔\n# Bash script\n# Copyright (C) 2000 Amit Singh. All Rights Reserved.\n# http://hanoi.kernelthread.com\n#\n# 在 Bash version 2.05b.0(13)-release下通过测试.\n# 同样在Bash3.x版本下工作正常。\n#\n#  在 &quot;Advanced Bash Scripting Guide&quot; 一书中使用\n#+ 经过了脚本作者的许可。\n#  ABS的作者对脚本进行了轻微的修改和注释。\n#=================================================================#\n#  汉诺塔是由Edouard Lucas,提出的数学谜题， \n#+  他是19世纪的法国数学家。\n#\n# 有三个直立的柱子竖在地面上。\n# 第一个柱子上有一组盘子套在上面。\n# 这些盘子是平的，中间有孔，\n#+ 可以套在柱子上面。\n# 这些盘子的直径不同，它们从下而上， \n#+ 按照尺寸递减的顺序摆放。\n# 也就是说，最小的在最上边，最大的在最下面。\n#\n# 现在的任务是要把这组盘子  \n#+ 从一个柱子上全部搬到另一个柱子上 \n# 你每次只能将一个盘子从一个柱子移到另一个柱子上。\n# 你也可以把盘子从其他的柱子上移回到原来的柱子上。\n# 你只能把小的盘子放到大的盘子上。\n#+ 反过来就不行。\n# 切记，绝对不能把大盘子放到小盘子的上面。\n# 如果盘子的数量比较少，那么移不了几次就能完成。\n#+ 但是随着盘子数量的增加，\n#+ 移动次数几乎成倍的增长，\n#+ 而且移动的“策略”也会变得越来越复杂。\n#\n# 想了解更多信息的话，请访问http://hanoi.kernelthread.com\n#+ 或者 pp. 186-92 of _The Armchair Universe_ by A.K. Dewdney.\n#\n#\n#           ...             ...         ...\n#           | |             | |         | |\n#          _|_|_            | |         | |\n#         |_____|           | |         | |\n#        |_______|          | |         | |\n#       |_________|         | |         | |\n#      |___________|        | |         | |\n#     |             |       | |         | |\n# .--------------------------------------------------------------. \n# |**************************************************************| \n#            #1              #2          #3\n# #=================================================================#\n\nE_NOPARAM=66  # 没有参数传给脚本。\nE_BADPARAM=67 # 传给脚本的盘子个数不符合要求。\nMoves=        # 保存移动次数的全局变量。\n              # 这里修改了原来的脚本。\n\ndohanoi() {   # 递归函数\n    case $1 in\n    0)\n        ;;\n    *)\n        dohanoi &quot;$(($1-1))&quot; $2 $4 $3\n        echo move $2 &quot;--&gt;&quot; $3\n        ((Moves++))          # 这里修改了原来的脚本。\n        dohanoi &quot;$(($1-1))&quot; $4 $3 $2\n        ;;\n    esac \n}\n\ncase $# in\n    1) case $(($1&gt;0)) in     # 至少要有一个盘子\n        1)  # Nested case statement.\n            dohanoi $1 1 3 2\n            echo &quot;Total moves = $Moves&quot;     # 2^n - 1, where n = # of disks.\n            exit 0;\n            ;; \n        *)    \n            echo &quot;$0: illegal value for number of disks&quot;;\n            exit $E_BADPARAM;\n            ;;\n        esac ;;\n    *)\n        echo &quot;usage: $0 N&quot;\n        echo &quot;       Where \\&quot;N\\&quot; is the number of disks.&quot;\n        exit $E_NOPARAM;\n        ;;\n    esac\n\n# 练习:\n# ---------\n# 1) 这个位置以下的代码会不会执行？ \n#    为什么不(容易)\n# 2) 解释一下这个 &quot;dohanoi&quot; 函数的运行原理.\n#    (比较难 可以参考上面的Dewdney 的引用)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "24 函数",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/24_functions/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/24_functions/",
      "content_html": "<h1 id=\"_24-函数\"> 24 函数</h1>\n<h3 id=\"本章目录\"> 本章目录</h3>\n<ul>\n<li><a href=\"./24_1_complex_functions_and_function_complexities.html\">24.1 复杂函数和函数复杂性</a></li>\n<li><a href=\"./24_2_local_variables.html\">24.2 局部变量</a></li>\n<li><a href=\"./24_3_recursion_without_local_variables.html\">24.3 不使用局部变量的递归</a></li>\n</ul>\n<p>和其它“真正”的编程语言一样，Bash也有函数，尽管它在实现方面有一些限制。一个函数就是一个子程序，实现一系列操作的<a href=\"http://tldp.org/LDP/abs/html/special-chars.html#CODEBLOCKREF\" target=\"_blank\" rel=\"noopener noreferrer\">代码块</a>，执行一个特定任务的“黑盒子”。有重复代码的地方，当一个过程只需要轻微修改任务就会重复执行的时候，那么你就需要考虑使用函数了。</p>\n<div><pre><code>function function_name {\ncommand...\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>或者</p>\n<div><pre><code>function_name () { \ncommand...\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>第二种形式可能会更受C程序员的喜爱（并且它更具有<a href=\"http://tldp.org/LDP/abs/html/portabilityissues.html\" target=\"_blank\" rel=\"noopener noreferrer\">可移植性</a>）。\n在C语言里面，函数的圆括号可以出现在第二行。</p>\n<div><pre><code>function_name () {\ncommand...\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 一个函数可能被“压缩”到一个单独行里。</p>\n<div><pre><code>￼fun () { echo &quot;This is a function&quot;; echo; } \n#                                 ^     ^\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>然而，在这种情况下，函数里的最后一个命令必须跟有一个分号。</p>\n<div><pre><code>fun () { echo &quot;This is a function&quot;; echo } # Error! \n#                                       ^\nfun2 () { echo &quot;Even a single-command function? Yes!&quot;; } \n#                                                    ^\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>只需要引用函数名字就可以调用或者触发函数。一个函数调用相当于一个命令。</p>\n<p>例子 24-1. 简单的函数</p>\n<div><pre><code>#!/bin/bash\n# ex59.sh: 练习函数(简单的).\n\nJUST_A_SECOND=1\n\nfunky ()\n{ # 这是一个简单的函数\n    echo &quot;This is a funky function.&quot;\n    echo &quot;Now exiting funky function.&quot;\n} # 函数必须在调用前声明.\n\n\nfun ()\n{   # 一个稍微复杂点的函数.\n    i=0\n    REPEATS=30\n\n    echo\n    echo &quot;And now the fun really begins.&quot;\n    echo\n\n    sleep $JUST_A_SECOND    # Hey, 等一秒钟!\n    while [ $i -lt $REPEATS ]\n    do\n        echo &quot;----------FUNCTIONS----------&gt;&quot;\n        echo &quot;&lt;------------ARE-------------&quot;\n        echo &quot;&lt;------------FUN------------&gt;&quot;\n        echo\n        let &quot;i+=1&quot;\n    done\n}\n\n# 现在，调用这些函数.\n\nfunky\nfun\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>函数定义必须在第一次函数调用之前。没有声明函数的方法，比如像C语言中一样。</p>\n<div><pre><code>f1\n# 将会产生一个错误消息，因为“f1”函数还没有定义。\n\ndeclare -f f1      # 这样也不会有帮助。\nf1                 # 仍然会产生一个错误消息。\n\n# 然而...\n\n\nf1 () {\n    echo &quot;Calling function \\&quot;f2\\&quot; from within function \\&quot;f1\\&quot;.&quot;\n    f2 \n}\n\nf2 () {\n    echo &quot;Function \\&quot;f2\\&quot;.&quot;\n}\n\nf1  #  在此之前，事实上函数“f2”是没有被调用的，\n    #+ 尽管在它定义之前被引用了。\n    #  这是可以的。\n    # 感谢, S.C.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\">  函数不能为空！</p>\n<div><pre><code>#!/bin/bash\n# empty-functionn.sh\n\nempty () \n{\n}\n\nexit 0  # 这里将不会退出!\n\n\n# $ sh empty-function.sh\n# empty-function.sh: line 6: syntax error near unexpected token `}&#39;\n# empty-function.sh: line 6: `}&#39;\n\n# $ echo $? \n# 2\n\n# 请注意，只包含注释的函数也是空函数。\n\nfunc () \n{\n    # 注释 1.\n    # 注释 2.\n    # 这仍然是一个空函数。\n    # 感谢, Mark Bova将这一点指出来。\n}\n# 结果会出现和上面一样的错误信息。\n\n# 然而 ...\n\nnot_quite_empty ()\n{\n    illegal_command\n} #  一个包含这个函数的脚本将不会出错\n    #+ 只要这个函数没有被调用。\nnot_empty ()\n{\n    :\n} # 包含一个 : (空命令符），这样是可以的。\n\n# 感谢, Dominick Geyer 和 Thiemo Kellner.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><p>甚至，把一个函数嵌套在另外一个函数里也是可行的，尽管这并没有什么用。</p>\n<div><pre><code>f1 () \n{\n    f2 () # 嵌套函数\n    {\n        echo &quot;Function \\&quot;f2\\&quot;, inside \\&quot;f1\\&quot;.&quot;\n    }\n}\n\nf2  #  将会产生一个错误消息。\n    #  即使有一个前置的 &quot;declare -f f2&quot; 也不会有什么作用。\n\necho\n\nf1  #  不会做任何事情，因为调用“f1”的时候，并不会自动调用“f2”。\n    #  现在，调用“f2”是可以的，\n    #+ 因为通过调用“f1”，它的定义现在已是可见的。\n\n    # 感谢, S.C.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>函数定义可能出现在不太可能出现的地方，甚至出现在本应该是命令出现的地方。</p>\n<div><pre><code>ls -l | foo() { echo &quot;foo&quot;; }  # 可行的，尽管没有什么作用。\n\n\nif [ &quot;$USER&quot; = bozo ]\nthen\n    bozo_greet ()   # 函数定义嵌套在if/then的结构体中。\n    {\n        echo &quot;Hello, Bozo.&quot;\n    }\nfi\n\nbozo_greet        # 只有Bozo用户工作，其它用户会得到一个错误消息。\n\n\n# 在某些场景中，像下面这些东西可能会很有用。\nNO_EXIT=1   # 将会激活下面的函数定义。\n\n[[ $NO_EXIT -eq 1 ]] &amp;&amp; exit() { true; }     # 函数定义出现在“与列表”中。\n# 如果 $NO_EXIT 等于 1, 定义 &quot;exit ()&quot;.\n# 通过把exit函数别名为“true”，这样把内置的exit命令给禁用了。\n\nexit  # 调用 &quot;exit ()&quot; 函数, 而不是内置的 &quot;exit&quot; 命令。\n\n\n# 或者，类似地:\nfilename=file1\n\n[ -f &quot;$filename&quot; ] &amp;&amp;\nfoo () { rm -f &quot;$filename&quot;; echo &quot;File &quot;$filename&quot; deleted.&quot;; } ||\nfoo () { echo &quot;File &quot;$filename&quot; not found.&quot;; touch bar; }\n\nfoo\n\n# 感谢, S.C. 和 Christopher Head\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>函数名字可以呈现各种奇怪的形式。</p>\n<div><pre><code>_(){ for i in {1..10}; do echo -n &quot;$FUNCNAME&quot;; done; echo; }\n# ^^^         函数名字和圆括号之间没有空格。\n#             这并不会总是会正常工作。为什么呢？\n\n# 现在，我们来调用函数。\n_         # __________\n#           ^^^^^^^^^^   10 个下划线（10 倍的函数名字）！\n# 一个“假”的下划线也是一个可以接受的函数名字。\n\n# 事实上，一个分号也是一个可以接受的函数名字。\n\n:(){ echo &quot;:&quot;; }; :\n\n# 这有什么作用呢？\n# 这是一个狡诈的方式去混淆脚本中的代码。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>也可以参见 <a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#GRONSFELD\" target=\"_blank\" rel=\"noopener noreferrer\">Example A-56</a></p>\n<p>小提示：当一个函数的不同版本出现在一个脚本中，会发生什么事情呢？</p>\n<div><pre><code>#  正如Yan Chen 指出的那样,\n#  当一个函数被多次定义的时候，\n#  最后一个函数是被调用的那个。\n#  然而这并不是特别有用。\n\nfunc () \n{\n    echo &quot;First version of func ().&quot;\n}\n\nfunc () \n{\n    echo &quot;Second version of func ().&quot;\n}\n\nfunc   # 调用的是第二个 func () 函数版本。\n\nexit $?\n\n#  甚至，可能用函数去覆盖\n#+ 或者占用系统命令。\n#  当然，这并不是可取的。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div>",
      "image": "http://tldp.org/LDP/abs/images/note.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "25. 别名",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/25_aliases/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/25_aliases/",
      "content_html": "<h1 id=\"_25-别名\"> 25. 别名</h1>\n<p>Bash <code>别名</code> 本质上不外乎是键盘上的快捷键，缩写呢是避免输入很长的命令串的一种手段.举个例子, 在 <a href=\"http://tldp.org/LDP/abs/html/sample-bashrc.html\" target=\"_blank\" rel=\"noopener noreferrer\">~/.bashrc</a> 文件中包含别名 <code>lm=&quot;ls -l | more</code>, 而后每个命令行输入的 lm <a href=\"http://tldp.org/LDP/abs/html/aliases.html#FTN.AEN18669\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a> 将会自动被替换成 <code>ls -l | more</code>. 这可以节省大量的命令行输入和避免记住复杂的命令和选项. 设定别名 <code>rm=&quot;rm -i&quot;</code> (交互的删除模式) 防止无意的删除重要文件，也许可以少些悲痛.</p>\n<p>脚本中别名作用十分有限. 如果别名可以有一些 C 预处理器的功能会更好, 例如宏扩展, 但不幸的是 bash 别名中没有扩展参数. <a href=\"http://tldp.org/LDP/abs/html/aliases.html#FTN.AEN18676\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a> 另外, 脚本在 &quot;复合结构&quot; 中并不能扩展自身的别名，例如 <a href=\"http://tldp.org/LDP/abs/html/tests.html#IFTHEN\" target=\"_blank\" rel=\"noopener noreferrer\">if/then</a>, 循环和函数. 另一个限制是，别名不能递归扩展. 基本上是我们无论怎么喜欢用别名都不如函数 <a href=\"http://tldp.org/LDP/abs/html/functions.html#FUNCTIONREF\" target=\"_blank\" rel=\"noopener noreferrer\">function</a> 来的更有效.</p>\n<p>样例 25-1. 脚本中的别名</p>\n<div><pre><code>#!/bin/bash\n# alias.sh\n\nshopt -s expand_aliases\n# 必须设置此选项, 否则脚本不能别名扩展.\n\n\n# 首先来点好玩的东西.\nalias Jesse_James=&#39;echo &quot;\\&quot;Alias Jesse James\\&quot; was a 1959 comedy starring Bob Hope.&quot;&#39;\nJesse_James\n\necho; echo; echo;\n\nalias ll=&quot;ls -l&quot;\n# 可以任意使用单引号 (&#39;) 或双引号 (&quot;) 把别名括起来.\n\necho &quot;Trying aliased \\&quot;ll\\&quot;:&quot;\nll /usr/X11R6/bin/mk*   #* 别名可以运行.\n\necho\n\ndirectory=/usr/X11R6/bin/\nprefix=mk*  # See if wild card causes problems.\necho &quot;Variables \\&quot;directory\\&quot; + \\&quot;prefix\\&quot; = $directory$prefix&quot;\necho\n\nalias lll=&quot;ls -l $directory$prefix&quot;\n\necho &quot;Trying aliased \\&quot;lll\\&quot;:&quot;\nlll         # 所有 /usr/X11R6/bin 文件清单以 mk 开始.\n# 别名可以处理连续的变量 -- 包含 wild card -- o.k.\n\n\n\n\nTRUE=1\n\necho\n\nif [ TRUE ]\nthen\n  alias rr=&quot;ls -l&quot;\n  echo &quot;Trying aliased \\&quot;rr\\&quot; within if/then statement:&quot;\n  rr /usr/X11R6/bin/mk*   #* 结果报错!\n  # 别名在复合的表达式中并没有生效.\n  echo &quot;However, previously expanded alias still recognized:&quot;\n  ll /usr/X11R6/bin/mk*\nfi  \n\necho\n\ncount=0\nwhile [ $count -lt 3 ]\ndo\n  alias rrr=&quot;ls -l&quot;\n  echo &quot;Trying aliased \\&quot;rrr\\&quot; within \\&quot;while\\&quot; loop:&quot;\n  rrr /usr/X11R6/bin/mk*   #* 这里的别名也没生效.\n                           #  alias.sh: 行 57: rrr: 命令未找到\n  let count+=1\ndone \n\necho; echo\n\nalias xyz=&#39;cat $0&#39;   # 列出了自身.\n                     # 注意强引.\nxyz\n#  这看起来能工作,\n#+ 尽管 bash 文档不介意这么做.\n#\n#  然而, Steve Jacobson 指出,\n#+ &quot;$0&quot; 参数的扩展在上面的别名申明后立刻生效.\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br></div></div><p>取消别名的命令删除之前设置的别名.</p>\n<p>样例 25-2. unalias: 设置和取消一个别名</p>\n<div><pre><code>#!/bin/bash\n# unalias.sh\n\nshopt -s expand_aliases  # 开启别名扩展.\n\nalias llm=&#39;ls -al | more&#39;\nllm\n\necho\n\nunalias llm              # 取消别名.\nllm\n# &#39;llm&#39; 不再被识别后的报错信息.\n\nexit 0\nbash$ ./unalias.sh\ntotal 6\ndrwxrwxr-x    2 bozo     bozo         3072 Feb  6 14:04 .\ndrwxr-xr-x   40 bozo     bozo         2048 Feb  6 14:04 ..\n-rwxr-xr-x    1 bozo     bozo          199 Feb  6 14:04 unalias.sh\n\n./unalias.sh: llm: 命令未找到\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h4 id=\"注意\"> 注意</h4>\n<p><a href=\"http://tldp.org/LDP/abs/html/aliases.html#AEN18669\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a>\t... 作为命令行的第一个词. 显然别名只在命令的开始有意义.\n<a href=\"http://tldp.org/LDP/abs/html/aliases.html#AEN18676\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a>\t然而, 别名可用来扩展位置参数.</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第二十六章. 列表结构",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/26_List_Constructs/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/26_List_Constructs/",
      "content_html": "<h1 id=\"第二十六章-列表结构\"> 第二十六章. 列表结构</h1>\n<p><em>and 列表</em> 和 <em>or 列表</em> 结构提供了连续执行若干命令的方法，可以有效地替换复杂的嵌套 <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#TESTCONSTRUCTS1\" target=\"_blank\" rel=\"noopener noreferrer\">if/then</a> ，甚至 <a href=\"http://tldp.org/LDP/abs/html/testbranch.html#CASEESAC1\" target=\"_blank\" rel=\"noopener noreferrer\">case</a> 语句。</p>\n<h3 id=\"链接多个命令\"> 链接多个命令</h3>\n<p><strong>and 列表</strong></p>\n<p><code>command-1 &amp;&amp; command-2 &amp;&amp; command-3 &amp;&amp; ... command-n</code></p>\n<p>只要前一个命令返回 <em>true</em>（即 0），每一个命令就依次执行。当第一个 <em>false</em>（即 非0）返回时，命令链条即终止（第一个返回 <em>false</em> 的命令是最后一个执行的）。</p>\n<p>在<a href=\"https://github.com/yongye\" target=\"_blank\" rel=\"noopener noreferrer\">YongYe</a>早期版本的<a href=\"http://bash.deta.in/Tetris_Game.sh\" target=\"_blank\" rel=\"noopener noreferrer\">俄罗斯方块游戏</a>脚本里，一个有趣的双条件 <em>and 列表</em> 用法：</p>\n<div><pre><code>equation()\n\n{  # core algorithm used for doubling and halving the coordinates\n   [[ ${cdx} ]] &amp;&amp; ((y=cy+(ccy-cdy)${2}2))\n   eval ${1}+=\\&quot;${x} ${y} \\&quot;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><strong>例 26-1. 使用 <em>and 列表</em> 来测试命令行参数</strong></p>\n<div><pre><code>#!/bin/bash\n# and list\n\nif [ ! -z &quot;$1&quot; ] &amp;&amp; echo &quot;Argument #1 = $1&quot; &amp;&amp; [ ! -z &quot;$2&quot; ] &amp;&amp; \\\n#                ^^                         ^^               ^^\necho &quot;Argument #2 = $2&quot;\nthen\n  echo &quot;At least 2 arguments passed to script.&quot;\n  # 链条内的所有命令都返回 true。\nelse\n  echo &quot;Fewer than 2 arguments passed to script.&quot;\n  # 链条内至少有一个命令返回 false。\nfi  \n# 注意： &quot;if [ ! -z $1 ]&quot; 是好用的，但是宣传与之等同的\n#   &quot;if [ -n $1 ]&quot; 并不好用。\n#  不过，用引号就能解决问题，\n#   &quot;if [ -n &quot;$1&quot; ]&quot; 好用（译者注：原文本行内第一个引号位置错了）。\n#           ^  ^    小心!\n# 被测试的变量放在引号内总是最好的选择。\n\n\n# 下面的代码功能一样，用的是“纯粹”的 if/then 语句。\nif [ ! -z &quot;$1&quot; ]\nthen\n  echo &quot;Argument #1 = $1&quot;\nfi\nif [ ! -z &quot;$2&quot; ]\nthen\n  echo &quot;Argument #2 = $2&quot;\n  echo &quot;At least 2 arguments passed to script.&quot;\nelse\n  echo &quot;Fewer than 2 arguments passed to script.&quot;\nfi\n# 比起用“and 列表”要更长、更笨重。\n\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p><strong>例 26-2. 使用 <em>and 列表</em> 来测试命令行参数2</strong></p>\n<div><pre><code>#!/bin/bash\n\nARGS=1        # 预期的参数数量。\nE_BADARGS=85  # 参数数量错误时返回的值。\n\ntest $# -ne $ARGS &amp;&amp; \\\n#    ^^^^^^^^^^^^ 条件 #1\necho &quot;Usage: `basename $0` $ARGS argument(s)&quot; &amp;&amp; exit $E_BADARGS\n#                                             ^^\n#  如果条件 #1 结果为 true (传递给脚本的参数数量错误),\n#+ 那么执行本行剩余的命令，脚本终止。\n\n# 下面的代码行只有在上面的测试失败时才执行。\necho &quot;Correct number of arguments passed to this script.&quot;\n\nexit 0\n\n#  如果要检查退出值，脚本终止后运行 &quot;echo $?&quot;。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>当然，<em>and 列表</em> 也可以给变量设置默认值。</p>\n<div><pre><code>arg1=$@ &amp;&amp; [ -z &quot;$arg1&quot; ] &amp;&amp; arg1=DEFAULT\n\n              # 如果有命令行参数，则把参数值赋给 $arg1 。\n              # 但是... 如果没有参数，则使用DEFAULT给 $arg1 赋值。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><strong>or 列表</strong></p>\n<div><pre><code>command-1 || command-2 || command-3 || ... command-n\n</code></pre>\n<div><span>1</span><br></div></div><p>只要前一个命令返回_false_，每一个命令就依次执行。当第一个_true_ 返回时，命令链条即终止（第一个返回_true_ 的命令是最后一个执行的）。很明显它与“and 列表”相反。</p>\n<p>例 26-3. <em>or 列表</em> 与 <em>and 列表</em> 结合使用</p>\n<div><pre><code>#!/bin/bash\n\n#  delete.sh, 不那么巧妙的文件删除工具。\n#  用法： delete 文件名\n\nE_BADARGS=85\n\nif [ -z &quot;$1&quot; ]\nthen\n  echo &quot;Usage: `basename $0` filename&quot;\n  exit $E_BADARGS  # No arg? Bail out.\nelse  \n  file=$1          # Set filename.\nfi  \n\n\n[ ! -f &quot;$file&quot; ] &amp;&amp; echo &quot;File \\&quot;$file\\&quot; not found. \\\nCowardly refusing to delete a nonexistent file.&quot;\n# AND 列表，如果文件不存在则显示出错信息。\n# 注意，echo 消息内容分成了两行，中间通过转义符（\\）连接。\n\n[ ! -f &quot;$file&quot; ] || (rm -f $file; echo &quot;File \\&quot;$file\\&quot; deleted.&quot;)\n# OR 列表，删除存在的文件。\n\n# 注意上面的逻辑颠倒。 Note logic inversion above.\n# “AND 列表” 在得到 true 时执行, “OR 列表”在得到 false 时执行。\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/caution.gif\"> 如果 <em>or 列表</em> 第一个命令返回 true，它<strong>会</strong>执行。</p>\n<div><pre><code># ==&gt; 下面的代码段来自 /etc/rc.d/init.d/single\n#+==&gt; 作者 Miquel van Smoorenburg\n#+==&gt; 说明了 &quot;and&quot; 和 &quot;or&quot; 列表。\n# ==&gt; 带箭头的注释是本文作者添加的。\n\n[ -x /usr/bin/clear ] &amp;&amp; /usr/bin/clear\n  # ==&gt; 如果 /usr/bin/clear 存在, 则调用它。\n  # ==&gt; 调用命令之前检查它是否存在，\n  #+==&gt; 可以避免出错消息和其他怪异的结果。\n\n  # ==&gt; . . .\n\n#  If they want to run something in single user mode, might as well run it...\nfor i in /etc/rc1.d/S[0-9][0-9]* ; do\n        # 检查脚本是否存在。\n        [ -x &quot;$i&quot; ] || continue\n  # ==&gt; 如果对应的文件在 $PWD 里*没有*找到，\n  #+==&gt; 则跳回到循环顶端“继续运行”。\n\n        # 丢弃备份文件和 rpm 生成的文件。\n        case &quot;$1&quot; in\n                *.rpmsave|*.rpmorig|*.rpmnew|*~|*.orig)\n                        continue;;\n        esac\n        [ &quot;$i&quot; = &quot;/etc/rc1.d/S00single&quot; ] &amp;&amp; continue\n  # ==&gt; 设置脚本名，但先不要执行\n        $i start\ndone\n\n  # ==&gt; . . .\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><img src=\"http://tldp.org/LDP/abs/images/important.gif\">\n_and 列表_ 或 _or 列表_ 的[退出状态](http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF)就是最后一个执行的命令的退出状态。\n<p>聪明地结合 <em>and 列表</em> 和 <em>or 列表</em> 是可能的，但是程序逻辑会很容易地变得令人费解，需要密切注意<a href=\"http://tldp.org/LDP/abs/html/opprecedence.html#OPPRECEDENCE1\" target=\"_blank\" rel=\"noopener noreferrer\">操作符优先规则</a>，而且，会带来大量的调试工作。</p>\n<div><pre><code>false &amp;&amp; true || echo false         # false\n\n# 下面的代码结果相同\n( false &amp;&amp; true ) || echo false     # false\n# 但这个就不同了\nfalse &amp;&amp; ( true || echo false )     # (什么都不显示)\n\n#  注意语句是从左到右组合和解释的。\n\n#  通常情况下最好避免这种复杂性。\n\n#  感谢, S.C.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#DAYSBETWEEN\" target=\"_blank\" rel=\"noopener noreferrer\">例 A-7</a> 和 <a href=\"http://tldp.org/LDP/abs/html/fto.html#BROKENLINK\" target=\"_blank\" rel=\"noopener noreferrer\">例 7-4</a> 解释了用 <em>and 列表</em> / <em>or 列表</em> 来测试变量。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "27 数组",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/27_arrays/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/27_arrays/",
      "content_html": "<h1 id=\"_27-数组\"> 27 数组</h1>\n<p>新版本的Bash支持一维数组。 数组元素可以使用符号<strong>variable[xx]</strong> 来初始化。另外，脚本可以使用<strong>declare -a variable</strong>语句来制定一个数组。 如果想引用一个数组元素（也就是取值），可以使用大括号，访问形式为 ${element[xx]} 。</p>\n<p>例子 27-1. 简单的数组使用</p>\n<div><pre><code>#!/bin/bash\n\narea[11]=23\narea[13]=37\narea[51]=UFOs\n\n#  数组成员不一定非得是相邻或连续的。\n\n#  数组的部分成员可以不被初始化。\n#  数组中允许空缺元素。\n#  实际上，保存着稀疏数据的数组（“稀疏数组”） \n#+ 在电子表格处理软件中是非常有用的。\n\necho -n &quot;area[11] = &quot;\necho ${area[11]}    #  需要{大括号}。\n\necho -n &quot;area[13] = &quot;\necho ${area[13]}\n\necho &quot;Contents of area[51] are ${area[51]}.&quot;\n\n# 没被初始化的数组成员打印为空值（null变量）。\necho -n &quot;area[43] = &quot;\necho ${area[43]}\necho &quot;(area[43] unassigned)&quot;\n\necho\n\n# 两个数组元素的和被赋值给另一个数组元素。\narea[5]=`expr ${area[11]} + ${area[13]}`\necho &quot;area[5] = area[11] + area[13]&quot;\necho -n &quot;area[5] = &quot;\necho ${area[5]}\n\narea[6]=`expr ${area[11]} + ${area[51]}`\necho &quot;area[6] = area[11] + area[51]&quot;\necho -n &quot;area[6] = &quot;\necho ${area[6]}\n# 这里会失败，是因为不允许整数与字符串相加。\n\necho; echo; echo\n\n# -----------------------------------------------------------------\n# 另一个数组, &quot;area2&quot;.\n\n# 另一种给数组变量赋值的方法...\n# array_name=( XXX YYY ZZZ ... )\n\narea2=( zero one two three four )\n\necho -n &quot;area2[0] = &quot;\necho ${area2[0]}\n# 啊哈，从0开始计算数组下标（也就是，数组的第一个元素为[0],而不是[1]).\n\necho -n &quot;area2[1] = &quot;\necho ${area2[1]}    # [1] 是数组的第二个元素。\n# -----------------------------------------------------------------\n\necho; echo; echo\n\n# -----------------------------------------------\n# 第三个数组， &quot;area3&quot;.\n# 另外一种给数组元素赋值的方法...\n# array_name=([xx]=XXX [yy]=YYY ...)\n\narea3=([17]=seventeen [24]=twenty-four)\n\necho -n &quot;area3[17] = &quot;\necho ${area3[17]}\n\necho -n &quot;area3[24] = &quot;\necho ${area3[24]}\n# -----------------------------------------------\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br></div></div><p>我们可以看出，初始化整数的一个简单的方法是 array=( element1 element2 ... elementN ) 。</p>\n<div><pre><code>base64_charset=( {A..Z} {a..z} {0..9} + / = )\n#  使用扩展的一对范围 Using extended brace expansion\n#+ 去初始化数组的元素。to initialize the elements of the array.\n# 从 vladz&#39;s &quot;base64.sh&quot; 脚本中摘录过来。\n#+ 在&quot;Contributed Scripts&quot; 附录中可以看到.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>Bash允许把变量当成数据来操作，即使这个变量没有明确地被声明为数组。</p>\n<div><pre><code>string=abcABC123ABCabc\necho ${string[@]}   # abcABC123ABCabc\necho ${string[*]}   # abcABC123ABCabc\necho ${string[0]}   # abcABC123ABCabc\necho ${string[1]}   # 没有输出！\n                    # 为什么?\necho ${#string[@]}  # 1\n                    # 数组中只有一个元素。\n                    # 就是这个字符串本身。\n\n# 感谢你, Michael Zick, 指出这一点.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>类似的示范可以参考 <a href=\"./../part2/04_3_bash_variables_are_untyped.html\">Bash变量是无类型的</a> 。</p>\n<p>例子 27-2. 格式化一首诗</p>\n<div><pre><code>#!/bin/bash\n# poem.sh: 将本书作者非常喜欢的一首诗，漂亮的打印出来。\n\n# 诗的行数 (单节).\nLine[1]=&quot;I do not know which to prefer,&quot;\nLine[2]=&quot;The beauty of inflections&quot;\nLine[3]=&quot;Or the beauty of innuendoes,&quot;\nLine[4]=&quot;The blackbird whistling&quot;\nLine[5]=&quot;Or just after.&quot;\n# 注意 引用允许嵌入的空格。\n\n# 出处.\nAttrib[1]=&quot; Wallace Stevens&quot;\nAttrib[2]=&quot;\\&quot;Thirteen Ways of Looking at a Blackbird\\&quot;&quot;\n# 这首诗已经是公共版权了 (版权已经过期了).\n\necho\n\ntput bold   # 粗体打印.\n\nfor index in 1 2 3 4 5    # 5行.\ndo\n    printf &quot;     %s\\n&quot; &quot;${Line[index]}&quot;\ndone\n\nfor index in 1 2          # 出处为2行。\ndo\n    printf &quot;        %s\\n&quot; &quot;${Attrib[index]}&quot;\ndone\n\ntput sgr0       # 重置终端。Reset terminal.\n                # 查看 &#39;tput&#39; 文档.\necho\n\nexit 0\n\n# 练习:\n# --------\n# 修改这个脚本，使其能够从一个文本数据文件中提取出一首诗的内容，然后将其漂亮的打印出来。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><p>数组元素有它们独特的语法，甚至标准Bash命令和操作符，都有特殊的选项用以配合数组操作。</p>\n<p>例子 27-3. 多种数组操作</p>\n<div><pre><code>#!/bin/bash\n# array-ops.sh: 更多有趣的数组用法.\n\narray=( zero one two three four five )\n# 数组元素 0   1   2    3     4    5\n\necho ${array[0]}        #  0\necho ${array:0}         #  0\n                        #  第一个元素的参数扩展,\n                        #+ 从位置0(#0)开始（即第一个字符）.\necho ${array:1}         #  ero\n                        #  第一个元素的参数扩扎，\n                        #+ 从位置1（#1）开始（即第二个字符）。\n\necho &quot;--------------&quot;\n\necho ${#array[0]}       #  4\n                        # 第一个数组元素的长度。\necho ${#array}          #4\n                        # 第一个数组元素的长度。\n                        #  (另一种表示形式)\n\necho ${#array[1]}       # 3\n                        # 第二个数组元素的长度。\n                        #  Bash中的数组是从0开始索引的。\n\necho ${#array[*]}       # 6\n                        # 数组中的元素个数。\necho ${#array[@]}       # 6\n                        # 数组中的元素个数.\necho &quot;--------------&quot;\n\narray2=( [0]=&quot;first element&quot; [1]=&quot;second element&quot; [3]=&quot;fourth element&quot; )\n#            ^     ^       ^     ^      ^       ^     ^      ^       ^\n# 引用允许嵌入的空格,在每个单独的数组元素中。\n\necho ${array2[0]}       # 第一个元素\necho ${array2[1]}       # 第二个元素\necho ${array2[2]}       #\n                        # 因为并没有被初始化，所以此值为null。\necho ${array2[3]}       # 第四个元素.\necho ${#array2[0]}      # 13    (第一个元素的长度)\necho ${#array2[*]}      # 3     (数组中元素的个数)\n\nexit\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p>大部分标准<a href=\"./../part3/10_1_manipulating_strings.html\">字符串操作</a> 都可以用于数组中。</p>\n<p>例子27-4. 用于数组的字符串操作</p>\n<div><pre><code>#!/bin/bash\n# array-strops.sh: 用于数组的字符串操作。\n\n# 本脚本由Michael Zick 所编写.\n# 通过了授权在本书中使用。\n# 修复: 05 May 08, 04 Aug 08.\n\n#  一般来说，任何类似于 ${name ... }(这种形式)的字符串操作\n#+ 都能够应用于数组中的所有字符串元素，\n#+ 比如说${name[@] ... } 或者 ${name[*] ...} 这两种形式。 \n\narrayZ=( one two three four five five )\n\necho\n\n# 提取尾部的子串。\necho ${arrayZ[@]:0}     # one two three four five five\n#                ^       所有元素 \n\necho ${arrayZ[@]:1} \t# two three four five five\n#                ^\t\telement[0]后边的所有元素.\n\necho ${arrayZ[@]:1:2} \t# two three\n#                  ^\t只提取element[0]后边的两个元素.\n\necho &quot;---------&quot;\n\n\n# 子串删除 \n\n# 从字符串的开头删除最短的匹配。\n\necho ${arrayZ[@]#f*r}   # one two three five five\n#               ^       # 匹配将应用于数组的所有元素。 \n                        # 匹配到了&quot;four&quot;,并且将它删除。 \n\n# 从字符串的开头删除最长的匹配\necho ${arrayZ[@]##t*e}  # one two four five five\n#               ^^      # 匹配将应用于数组的所有元素\n                        # 匹配到了 &quot;three&quot; ,并且将它删除。\n\n# 从字符串的结尾删除最短的匹配\necho ${arrayZ[@]%h*e}   # one two t four five five\n#               ^       # 匹配将应用于数组的所有元素\n                        # 匹配到了 &quot;hree&quot; ,并且将它删除。\n\t\t\t\t\t\n# 从字符串的结尾删除最长的匹配\necho ${arrayZ[@]%%t*e}  # one two four five five\n#               ^^      # 匹配将应用于数组的所有元素\n                        # 匹配到了 &quot;three&quot; ,并且将它删除。\n\t\t\t\t\t\t\necho &quot;----------------------&quot;\n\n# 子串替换\n\n# 第一个匹配到的子串将会被替换。\necho ${arrayZ[@]/fiv/XYZ}   # one two three four XYZe XYZe\n#               ^           # 匹配将应用于数组的所有元素\n\n# 所有匹配到的子串将会被替换。\necho ${arrayZ[@]//iv/YY}    # one two three four fYYe fYYe\n                            # 匹配将应用于数组的所有元素\n\n# 删除所有的匹配子串\n# 如果没有指定替换字符串的话，那就意味着&#39;删除&#39;...\necho ${arrayZ[@]//fi/}      # one two three four ve ve\n#               ^^          # 匹配将应用于数组的所有元素\n\n# 替换字符串前端子串\necho ${arrayZ[@]/#fi/XY}    # one two three four XYve XYve\n#                ^          # 匹配将应用于数组的所有元素\n\n# 替换字符串后端子串\necho ${arrayZ[@]/%ve/ZZ}\t# one two three four fiZZ fiZZ\n#                ^\t\t\t# 匹配将应用于数组的所有元素\n\necho ${arrayZ[@]/%o/XX}\t\t# one twXX three four five five\n#                ^\t\t\t# 为什么?\n\necho &quot;-----------------------------&quot;\n\nreplacement() {\n    echo -n &quot;!!!&quot;\n}\n\necho ${arrayZ[@]/%e/$(replacement)}\n#                ^  ^^^^^^^^^^^^^^\n# on!!! two thre!!! four fiv!!! fiv!!!\n# replacement()的标准输出就是那个替代字符串.\n# Q.E.D: 替换动作实际上是一个‘赋值’。\n\necho &quot;------------------------------------&quot;\n\n#  使用&quot;for-each&quot;之前:\necho ${arrayZ[@]//*/$(replacement optional_arguments)}\n#                ^^ ^^^^^^^^^^^^^\n# !!! !!! !!! !!! !!! !!!\n\n#  现在，如果Bash只将匹配到的字符串\n#+ 传递给被调用的函数...\n\necho\n\nexit 0\n\n#  在将处理后的结果发送到大工具之前，比如-- Perl, Python, 或者其它工具\n#  回忆一下:\n#    $( ... ) 是命令替换。\n#    一个函数作为子进程运行。\n#    一个函数将结果输出到stdout。\n#    赋值，结合&quot;echo&quot;和命令替换，\n#+   可以读取函数的stdout.\n#    使用name[@]表示法指定了一个 &quot;for-each&quot;\n#+   操作。\n#  Bash比你想象的更加强力.\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br></div></div><p><a href=\"./../part3/12_command_substitution.html\">命令替换</a> 可以构造数组的独立元素。</p>\n<p>例子 27-5. 将脚本中的内容赋值给数组</p>\n<div><pre><code>#!/bin/bash\n# script-array.sh: 将脚本中的内容赋值给数组。 \n# 这个脚本的灵感来自于 Chris Martii 的邮件 (感谢!).\n\nscript_contents=( $(cat &quot;$0&quot;) )  # 将这个脚本的内容($0） \n                                 #+ 赋值给数组\nfor element in $(seq 0 $((${#script_contents[@]} - 1)))\n  do                #  ${#script_contents[@]}\n                    #+ 表示数组元素的个数\n                    #\n                    #  问题:\n                    #  为什么必须使用seq 0 ?\n                    #  用seq 1来试一下.\n  echo -n &quot;${script_contents[$element]}&quot;\n                    # 在同一行上显示脚本中每个域的内容。\n# echo -n &quot;${script_contents[element]}&quot; also works because of ${ ... }.\n  echo -n &quot; -- &quot;    # 使用 &quot; -- &quot; 作为域分隔符。\ndone\necho\n\nexit 0\n# 练习:\n# --------\n#  修改这个脚本，\n#+ 让这个脚本能够按照它原本的格式输出，\n#+ 连同空格，换行，等等。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>在数组环境中，某些Bash <a href=\"./../part4/15_internal_commands_and_builtins.html\">内建命令</a> 的含义可能会有些轻微的改变。比如，<a href=\"http://tldp.org/LDP/abs/html/internal.html#UNSETREF\" target=\"_blank\" rel=\"noopener noreferrer\">unset</a> 命令可以删除数组元素，甚至能够删除整个数组。</p>\n<p>例子 27-6. 一些数组的专有特性</p>\n<div><pre><code>#!/bin/bash\n\ndeclare -a colors\n#  脚本中所有的后续命令都会把\n#+ &quot;colors&quot; 当做数组 \n\necho &quot;Enter your favorite colors (separated from each other by a space).&quot;\n\nread -a colors    # 至少需要键入3种颜色，以便于后边的演示。\n#  &#39;read&#39;命令的特殊选项 ,\n#+ 允许给数组元素赋值。\n\necho\n\nelement_count=${#colors[@]}\n# 提取数组元素个数的特殊语法\n#     用element_count=${#colors[*]} 也可以。\n#\n#  &quot;@&quot; 变量允许在引用中存在单次分割，\n#+ (依靠空白字符来分割变量).\n#\n#  这就好像&quot;$@&quot; 和 &quot;$*&quot;\n#+ 在位置参数中所表现出来的行为一样。\n\nindex=0\n\nwhile [ &quot;$index&quot; -lt &quot;$element_count&quot; ]\ndo    # 列出数组中的所有元素\n  echo ${colors[$index]}\n  #    ${colors[index]} 也可以工作，因为它${ ... }之中.\n  let &quot;index = $index + 1&quot;\n  # Or:\n  #    ((index++))\ndone\n# 每个数组元素被列为单独的一行\n# 如果没有这种要求的话，可以使用echo -n &quot;${colors[$index]} &quot;\n#\n# 也可以使用“for”循环来做:\n#   for i in &quot;${colors[@]}&quot;\n#   do\n#     echo &quot;$i&quot;\n#   done\n# (Thanks, S.C.)\n\necho\n\n# 再次列出数组中的所有元素，不过这次的做法更为优雅。\n  echo ${colors[@]}          # echo ${colors[*]} 也可以工作.\n\necho\n\n# &quot;unset&quot;命令既可以删除数组数据，也可以删除整个数组。\nunset colors[1]\t\t\t# 删除数组的第2个元素。\n\t\t\t\t\t\t# 作用等同于colors[1]=\necho  ${colors[@]}\t\t# 再次列出数组内容，第2个元素没了。\n\nunset colors\t\t\t# 删除整个数组。\n\t\t\t\t\t\t#  unset colors[*] 以及\n\t\t\t\t\t\t#+ unset colors[@] 都可以.\necho; echo -n &quot;Colors gone.&quot;\necho ${colors[@]}\t\t# 再次列出数组内容，内容为空。\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><p>正如我们在前面的例子中所看到的，<strong><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>a</span><span style=\"margin-right:0.02778em;\">rr</span><span>a</span><span><span style=\"margin-right:0.03588em;\">y</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>am</span><span>e</span><span>[</span><span>@</span><span>]</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∗</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>∗</span><span>或者</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∗</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.46528em;vertical-align:0em;\"></span><span>∗</span></span></span></span>{array_name[*]}</strong>  都与数组中的所有元素相关。同样的，为了计算数组的元素个数，可以使用 <strong><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>a</span><span style=\"margin-right:0.02778em;\">rr</span><span>a</span><span><span style=\"margin-right:0.03588em;\">y</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>am</span><span>e</span><span>[</span><span>@</span><span>]</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∗</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>∗</span><span>或者</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∗</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.46528em;vertical-align:0em;\"></span><span>∗</span></span></span></span>{array_name[*]}</strong>  。 <strong><span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;}&#039;, got &#039;#&#039; at position 2: {#̲array_name}**  …'>{#array_name}**  是数组第一个元素的长度，也就是  **</span>{array_name[0]}</strong>  的长度（字符个数）。</p>\n<p>例子 27-7. 空数组与包含空元素的数组</p>\n<div><pre><code>#!/bin/bash\n# empty-array.sh\n\n#  感谢Stephane Chazelas制作这个例子的原始版本。 \n#+ 同时感谢Michael Zick 和 Omair Eshkenazi 对这个例子所作的扩展。\n#  以及感谢Nathan Coulter 作的声明和感谢。\n\n# 空数组与包含有空元素的数组，这两个概念不同。\n  \narray0=( first second third )\narray1=( &#39;&#39; )\t\t# &quot;array1&quot; 包含一个空元素.\narray2=( )\t\t\t# 没有元素. . . &quot;array2&quot;为空 \narray3=()\t\t\t# 这个数组呢?\n\necho\nListArray()\n{\n\techo\n\techo &quot;Elements in array0:  ${array0[@]}&quot;\n\techo &quot;Elements in array1:  ${array1[@]}&quot;\n\techo &quot;Elements in array2:  ${array2[@]}&quot;\n\techo &quot;Elements in array3:  ${array3[@]}&quot;\n\techo\n\techo &quot;Length of first element in array0 = ${#array0}&quot;\n\techo &quot;Length of first element in array1 = ${#array1}&quot;\n\techo &quot;Length of first element in array2 = ${#array2}&quot;\n\techo &quot;Length of first element in array3 = ${#array3}&quot;\n\techo\n\techo &quot;Number of elements in array0 = ${#array0[*]}&quot;  # 3\n\techo &quot;Number of elements in array1 = ${#array1[*]}&quot;  # 1  (Surprise!)\n\techo &quot;Number of elements in array2 = ${#array2[*]}&quot;  # 0\n\techo &quot;Number of elements in array3 = ${#array3[*]}&quot;  # 0\n}\n\n# ===================================================================\n\nListArray\n\n# 尝试扩展这些数组。\n\n# 添加一个元素到这个数组。\narray0=( &quot;${array0[@]}&quot; &quot;new1&quot; )\narray1=( &quot;${array1[@]}&quot; &quot;new1&quot; )\narray2=( &quot;${array2[@]}&quot; &quot;new1&quot; )\narray3=( &quot;${array3[@]}&quot; &quot;new1&quot; )\n\nListArray\n\n# 或者\narray0[${#array0[*]}]=&quot;new2&quot;\narray1[${#array1[*]}]=&quot;new2&quot;\narray2[${#array2[*]}]=&quot;new2&quot;\narray3[${#array3[*]}]=&quot;new2&quot;\n\nListArray\n\n# 如果你按照上边的方法对数组进行扩展的话，数组比较像‘栈’\n# 上边的操作就是‘压栈’\n# ‘栈’的高度为：\nheight=${#array2[@]}\necho\necho &quot;Stack height for array2 = $height&quot;\n\n# &#39;出栈’就是：\nunset array2[${#array2[@]}-1]   # 数组从0开始索引 \nheight=${#array2[@]}            #+ 这就意味着数组的第一个下标是0\necho\necho &quot;POP&quot;\necho &quot;New stack height for array2 = $height&quot;\n\nListArray\n\n# 只列出数组array0的第二个和第三个元素。\nfrom=1              # 从0开始索引。\nto=2\narray3=( ${array0[@]:1:2} )\necho\necho &quot;Elements in array3:  ${array3[@]}&quot;\n\n# 处理方式就像是字符串（字符数组）。\n# 试试其他的“字符串”形式。\n\n# 替换:\narray4=( ${array0[@]/second/2nd} )\necho\necho &quot;Elements in array4:  ${array4[@]}&quot;\n\n# 替换掉所有匹配通配符的字符串\narray5=( ${array0[@]//new?/old} )\necho\necho &quot;Elements in array5:  ${array5[@]}&quot;\n\n# 当你觉得对此有把握的时候...\narray6=( ${array0[@]#*new} )\necho # This one might surprise you.\necho &quot;Elements in array6:  ${array6[@]}&quot;\n\narray7=( ${array0[@]#new1} )\necho # 数组array6之后就没有惊奇了。\necho &quot;Elements in array7:  ${array7[@]}&quot;\n\n# 看起来非常像...\narray8=( ${array0[@]/new1/} )\necho\necho &quot;Elements in array8:  ${array8[@]}&quot;\n\n# 所以，让我们怎么形容呢？\n\n#  对数组var[@]中的每个元素The string operations are performed on\n#+ 进行连续的字符串操作。each of the elements in var[@] in succession.\n#  因此：Bash支持支持字符串向量操作，\n#  如果结果是长度为0的字符串\n#+ 元素会在结果赋值中消失不见。\n#  然而，如果扩展在引用中，那个空元素会仍然存在。\n\n#  Michael Zick:   问题--这些字符串是强引用还是弱引用？ \n#  Nathan Coulter:  没有像弱引用的东西\n#!    真正发生的事情是\n#!+   匹配的格式发生在\n#!+   [word]的所有其它扩展之后\n#!+   比如像${parameter#word}.\n\nzap=&#39;new*&#39;\narray9=( ${array0[@]/$zap/} )\necho\necho &quot;Number of elements in array9:  ${#array9[@]}&quot;\narray9=( &quot;${array0[@]/$zap/}&quot; )\necho &quot;Elements in array9:  ${array9[@]}&quot;\n# 此时，空元素仍然存在\necho &quot;Number of elements in array9:  ${#array9[@]}&quot;\n\n# 当你还在认为你身在Kansas州时...\narray10=( ${array0[@]#$zap} )\necho\necho &quot;Elements in array10:  ${array10[@]}&quot;\n# 但是，如果被引用的话，*号将不会被解释。\narray10=( ${array0[@]#&quot;$zap&quot;} )\necho\necho &quot;Elements in array10:  ${array10[@]}&quot;\n# 可能，我们仍然在Kansas...\n# (上面的代码块Nathan Coulter所修改.)\n\n#  比较 array7 和array10.\n#  比较array8 和array9.\n\n#  重申: 所有所谓弱引用的东西\n#  Nathan Coulter 这样解释:\n#  word在${parameter#word}中的匹配格式在\n#+ 参数扩展之后和引用移除之前已经完成了。\n#  在通常情况下，格式匹配在引用移除之后完成。\n\nexit\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br></div></div><p><strong><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:1em;vertical-align:-0.25em;\"></span><span><span>a</span><span style=\"margin-right:0.02778em;\">rr</span><span>a</span><span><span style=\"margin-right:0.03588em;\">y</span><span><span><span><span style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style=\"height:0.15em;\"><span></span></span></span></span></span></span><span>am</span><span>e</span><span>[</span><span>@</span><span>]</span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∗</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span>∗</span><span>和</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>∗</span><span style=\"margin-right:0.2222222222222222em;\"></span></span><span><span style=\"height:0.46528em;vertical-align:0em;\"></span><span>∗</span></span></span></span>{array_name[*]}</strong> 的关系非常类似于 <a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#APPREF\" target=\"_blank\" rel=\"noopener noreferrer\"><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>@</span><span>和</span></span></span></span>*</a>。这种数组用法非常广泛。</p>\n<div><pre><code># 复制一个数组\narray2=( &quot;${array1[@]}&quot; )\n# 或者\narray2=&quot;${array1[@]}&quot;\n#\n# 然而，如果在“缺项”数组中使用的话，将会失败 \n#+ 也就是说数组中存在空洞（中间的某个元素没赋值），\n#+ 这个问题由Jochen DeSmet 指出.\n# ------------------------------------------\n  array1[0]=0\n# array1[1] not assigned\n  array1[2]=2\n  array2=( &quot;${array1[@]}&quot; )       # 拷贝它？\necho ${array2[0]}      # 0\necho ${array2[2]}      # (null), 应该是 2\n# ------------------------------------------\n# 添加一个元素到数组。\narray=( &quot;${array[@]}&quot; &quot;new element&quot; )\n# 或者\narray[${#array[*]}]=&quot;new element&quot;\n# 感谢, S.C.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/tip.gif\" alt=\"info\"> <strong>array=( element1 element2 ... elementN )</strong> 初始化操作，如果有<a href=\"./../part3/12_command_substitution.html\">命令替换</a>的帮助，就可以将一个文本文件的内容加载到数组。</p>\n<div><pre><code>#!/bin/bash\nfilename=sample_file\n#            cat sample_file\n#\n# \t\t\t1  a  b  c\n# \t\t\t2  d  e  fg\n\ndeclare -a array1\n\narray1=( `cat &quot;$filename&quot;`)\t\t#  将$filename的内容\n#         把文件内容展示到输出\t#+ 加载到数组array1.\n#\n#  array1=( `cat &quot;$filename&quot; | tr &#39;\\n&#39; &#39; &#39;`)\n#                           把文件中的换行替换为空格 \n# 其实这样做是没必要的，因为Bash在做单词分割的时候， \n#+将会把换行转换为空格。\n\necho ${array1[@]}            # 打印数组\n#                              1 a b c 2 d e fg\n#\n#  文件中每个被空白符分割的“单词”\n#+ 都被保存到数组的一个元素中。\n\nelement_count=${#array1[*]}\necho $element_count          # 8\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>出色的技巧使得数组的操作技术又多了一种。</p>\n<p>例子 27-8. 初始化数组</p>\n<div><pre><code>#! /bin/bash\n# array-assign.bash\n\n# 数组操作是Bash所特有的，\n#+ 所以才使用&quot;.bash&quot; 作为脚本扩展名\n\n# Copyright (c) Michael S. Zick, 2003, All rights reserved.\n# License: Unrestricted reuse in any form, for any purpose.\n# Version: $ID$\n#\n# 说明与注释由 William Park所添加.\n\n#  基于 Stephane Chazelas所提供的例子\n#+ 它是在ABS中的较早版本。\n\n# &#39;times&#39; 命令的输出格式:\n# User CPU &lt;space&gt; System CPU\n# User CPU of dead children &lt;space&gt; System CPU of dead children\n\n#  Bash有两种方法， \n#+ 可以将一个数组的所有元素都赋值给一个新的数组变量。\n#  这两个方法都会丢弃数组中的“空引用“（null值）元素\n#+ 在2.04和以后的Bash版本中。\n#  另一种给数组赋值的方法将会被添加到新版本的Bash中，\n#+ 这种方法采用[subscript]=value 形式，来维护数组下标与元素值之间的关系。 \n\n#  可以使用内部命令来构造一个大数组，\n#+ 当然，构造一个包含上千元素数组的其它方法\n#+ 也能很好的完成任务\n\ndeclare -a bigOne=( /dev/* )  # /dev下的所有文件 . . .\necho\necho &#39;Conditions: Unquoted, default IFS, All-Elements-Of&#39;\necho &quot;Number of elements in array is ${#bigOne[@]}&quot;\n\n# set -vx\n\necho\necho &#39;- - testing: =( ${array[@]} ) - -&#39;\ntimes\ndeclare -a bigTwo=( ${bigOne[@]} )\n# 注意括号:    ^              ^\ntimes\necho\n\necho &#39;- - testing: =${array[@]} - -&#39;\ntimes\ndeclare -a bigThree=${bigOne[@]}\n# 这次没用括号。\ntimes\n#  通过比较，可以发现第二种格式的赋值更快一些，\n#+ 正如 Stephane Chazelas指出的那样\n#\n#  William Park 解释:\n#+ bigTwo数组是作为一个单个字符串被赋值的(因为括号)\n#+ 而BigThree数组，则是一个元素一个元素进行的赋值。\n#  所以，实质上是:\n#                   bigTwo=( [0]=&quot;...&quot; [1]=&quot;...&quot; [2]=&quot;...&quot; ... )\n#                   bigThree=( [0]=&quot;... ... ...&quot; )\n#\n#  通过这样确认:  echo ${bigTwo[0]}\n#                   echo ${bigThree[0]}\n#  在本书的例子中，我还是会继续使用第一种形式， \n#+ 因为，我认为这种形式更有利于将问题阐述清楚。\n\n#  在我所使用的例子中，在其中复用的部分，\n#+ 还是使用了第二种形式，那是因为这种形式更快。\n\n# MSZ: 很抱歉早先的疏忽。\n\n#  注意:\n#  ----\n#  32和44的&quot;declare -a&quot; 语句其实不是必需的， \n#+ 因为Array=(...)形式\n#+ 只能用于数组\n#  然而，如果省略这些声明的话，\n#+ 会导致脚本后边的相关操作变慢。\n#  试试看，会发生什么.\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 在数组声明的时候添加一个额外的<strong>declare -a</strong>语句，能够加速后续的数组操作速度。</p>\n<p>例子 27-9. 拷贝和连接数组</p>\n<div><pre><code>#! /bin/bash\n# CopyArray.sh\n#\n# 这个脚本由Michael Zick所编写.\n# 这里已经通过作者的授权\n\n#  如何“通过名字传值&amp;通过名字返回”\n#+ 或者“建立自己的赋值语句”。\n\nCpArray_Mac() {\n\t# 建立赋值命令\n\techo -n &#39;eval &#39;\n    echo -n &quot;$2&quot;                    # 目的名字\n    echo -n &#39;=( ${&#39;\n    echo -n &quot;$1&quot;                    # 源名字\n    echo -n &#39;[@]} )&#39;\n\n# 上边这些语句会构成一条命令。\n# 这仅仅是形式上的问题。\n}\n\ndeclare -f CopyArray\nCopyArray=CpArray_Mac\n\nHype() {\n# &quot;Pointer&quot;函数\n# 状态产生器\n# 需要连接的数组名为$1.\n# (把这个数组与字符串&quot;Really Rocks&quot;结合起来，形成一个新数组.)\n# 并将结果从数组$2中返回.\n\n    local -a TMP\n    local -a hype=( Really Rocks )\n    $($CopyArray $1 TMP)\n    TMP=( ${TMP[@]} ${hype[@]} )\n    $($CopyArray TMP $2)\n}\n\ndeclare -a before=( Advanced Bash Scripting )\ndeclare -a after\n\necho &quot;Array Before = ${before[@]}&quot;\n\nHype before after\n\necho &quot;Array After = ${after[@]}&quot;\n\n# 连接的太多了?\n\necho &quot;What ${after[@]:3:2}?&quot;\ndeclare -a modest=( ${after[@]:2:1} ${after[@]:3:2} )\n#                    ---- 子串提取 ----\n\necho &quot;Array Modest = ${modest[@]}&quot;\n\n# &#39;before&#39; 发生了什么变化 ?\n\necho &quot;Array Before = ${before[@]}&quot;\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div><p>例子27-10. 关于串联数组的更多信息</p>\n<div><pre><code>#! /bin/bash\n# array-append.bash\n\n# Copyright (c) Michael S. Zick, 2003, All rights reserved.\n# License: Unrestricted reuse in any form, for any purpose.\n# Version: $ID$\n#\n#  在格式上，由M.C做了一些修改.\n\n# 数组操作是Bash特有的属性。\n# 传统的UNIX /bin/sh 缺乏类似的功能。\n\n#  将这个脚本的输出通过管道传递给&#39;more&#39;，\n#+ 这样做的目的是放止输出的内容超过终端能够显示的范围，\n#  或者，重定向输出到文件中。\n\ndeclare -a array1=( zero1 one1 two1 )\n# 依次使用下标\ndeclare -a array2=( [0]=zero2 [2]=two2 [3]=three2 )\n# 数组中存在空缺的元素-- [1] 未定义\n\necho\necho &#39;- Confirm that the array is really subscript sparse. -&#39;\necho &quot;Number of elements: 4&quot;        # 为了演示，这里作了硬编码\nfor (( i = 0 ; i &lt; 4 ; i++ ))\ndo\n    echo &quot;Element [$i]: ${array2[$i]}&quot;\ndone\n# 也可以参考一个更通用的例子， basics-reviewed.bash.\n\n\ndeclare -a dest\n\n# 将两个数组合并到第3个数组中。\necho\necho &#39;Conditions: Unquoted, default IFS, All-Elements-Of operator&#39;\necho &#39;- Undefined elements not present, subscripts not maintained. -&#39;\n# # 那些未定义的元素不会出现；组合时会丢弃这些元素。\n\ndest=( ${array1[@]} ${array2[@]} )\n# dest=${array1[@]}${array2[@]} \t\t# 奇怪的结果，可能是个bug。\n\n# 现在，打印结果。\necho\necho &#39;- - Testing Array Append - -&#39;\ncnt=${#dest[@]}\n\necho &quot;Number of elements: $cnt&quot;\nfor (( i = 0 ; i &lt; cnt ; i++ ))\ndo\n    echo &quot;Element [$i]: ${dest[$i]}&quot;\ndone\n\n# 将数组赋值给一个数组中的元素（两次）\ndest[0]=${array1[@]}\ndest[1]=${array2[@]}\n\n# 打印结果\necho\necho &#39;- - Testing modified array - -&#39;\ncnt=${#dest[@]}\n\necho &quot;Number of elements: $cnt&quot;\nfor (( i = 0 ; i &lt; cnt ; i++ ))\ndo\necho &quot;Element [$i]: ${dest[$i]}&quot;\ndone\n\n# 检查第二个元素的修改状况.\necho\necho &#39;- - Reassign and list second element - -&#39;\n\ndeclare -a subArray=${dest[1]}\ncnt=${#subArray[@]}\n\necho &quot;Number of elements: $cnt&quot;\nfor (( i = 0 ; i &lt; cnt ; i++ ))\ndo\n    echo &quot;Element [$i]: ${subArray[$i]}&quot;\ndone\n\n# 如果你使用&#39;=${ ... }&#39;形式\n#+ 将一个数组赋值到另一个数组的一个元素中,\n#+ 那么这个数组的所有元素都会被转换为一个字符串,\n#+ 这个字符串中的每个数组元素都以空格进行分隔(其实是IFS的第一个字符).\n\n# 如果原来数组中的所有元素都不包含空白符 . . .\n# 如果原来的数组下标都是连续的 . . .\n# 那么我们就可以将原来的数组进行恢复.\n\n# 从修改过的第二个元素中, 将原来的数组恢复出来.\necho\necho &#39;- - Listing restored element - -&#39;\n\ndeclare -a subArray=( ${dest[1]} )\ncnt=${#subArray[@]}\n\necho &quot;Number of elements: $cnt&quot;\nfor (( i = 0 ; i &lt; cnt ; i++ ))\ndo\n    echo &quot;Element [$i]: ${subArray[$i]}&quot;\ndone\n\necho &#39;- - Do not depend on this behavior. - -&#39;\necho &#39;- - This behavior is subject to change - -&#39;\necho &#39;- - in versions of Bash newer than version 2.05b - -&#39;\n\n# MSZ: 抱歉，之前混淆了一些要点。\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br></div></div><hr>\n<p>有了数组, 我们就可以在脚本中实现一些比较熟悉的算法. 这么做, 到底是不是一个好主意, 我们在这里不做讨论, 还是留给读者决定吧.</p>\n<p>例子 27-11. 冒泡排序</p>\n<div><pre><code>#!/bin/bash\n# bubble.sh: 一种排序方式, 冒泡排序.\n\n# 回忆一下冒泡排序的算法. 我们在这里要实现它...\n\n# 依靠连续的比较数组元素进行排序,\n#+ 比较两个相邻元素, 如果顺序不对, 就交换这两个元素的位置.\n# 当第一轮比较结束之后, 最&quot;重&quot;的元素就会被移动到最底部.\n# 当第二轮比较结束之后, 第二&quot;重&quot;的元素就会被移动到次底部的位置.\n# 依此类推.\n# 这意味着每轮比较不需要比较之前已经&quot;沉淀&quot;好的数据.\n# 因此你会注意到后边的数据在打印的时候会快一些.\n\n\nexchange() {\n  # 交换数组中的两个元素.\n  local temp=${Countries[$1]} #  临时保存\n                              #+ 要交换的那个元素 \n  Countries[$1]=${Countries[$2]}\n  Countries[$2]=$temp\n  \n  return \n}\n\ndeclare -a Countries  #  声明数组,\n                      #+ 此处是可选的, 因为数组在下面被初始化\n#  我们是否可以使用转义符(\\)\n#+ 来将数组元素的值放在不同的行上?\n#  可以.\n\nCountries=(Netherlands Ukraine Zaire Turkey Russia Yemen Syria \\\nBrazil Argentina Nicaragua Japan Mexico Venezuela Greece England \\\nIsrael Peru Canada Oman Denmark Wales France Kenya \\\nXanadu Qatar Liechtenstein Hungary)\n\n# &quot;Xanadu&quot; 虚拟出来的世外桃源.\n#+ Kubla Khan做了个愉快的决定\n\n\nclear                      # 开始之前的清屏动作\n\necho &quot;0: ${Countries[*]}&quot;  # 从索引0开始列出整个数组.\n\nnumber_of_elements=${#Countries[@]}\nlet &quot;comparisons = $number_of_elements - 1&quot;\n\ncount=1 # Pass number.\n\nwhile [ &quot;$comparisons&quot; -gt 0 ]          # 开始外部循环\ndo\n\n  index=0  # 在每轮循环开始之前，重置索引。\n\n  while [ &quot;$index&quot; -lt &quot;$comparisons&quot; ] # 开始内部循环。\n  do\n    if [ ${Countries[$index]} \\&gt; ${Countries[`expr $index + 1`]} ]\n\t# 如果原来的排序次序不对...\n\t# 回想一下, 在单括号中,\n\t#+ \\&gt;是ASCII码的比较操作符.\n\n\t# if [[ ${Countries[$index]} &gt; ${Countries[`expr $index + 1`]} ]]\n\t#+ 这样也行.\n    then\n      exchange $index `expr $index + 1`  # 交换\n    fi\n    let &quot;index += 1&quot;  #或者, index+=1 在Bash 3.1之后的版本才能这么用.\n  done # 内部循环结束\n\n  # ----------------------------------------------------------------------\n# Paulo Marcel Coelho Aragao 建议我们可以使用更简单的for循环\n#\n# for (( last = $number_of_elements - 1 ; last &gt; 0 ; last-- ))\n##                     Fix by C.Y. Hunt          ^   (Thanks!)\n# do\n#     for (( i = 0 ; i &lt; last ; i++ ))\n#     do\n#\t\t[[ &quot;${Countries[$i]}&quot; &gt; &quot;${Countries[$((i+1))]}&quot; ]] \\\n#    \t\t&amp;&amp; exchange $i $((i+1))\n#     done\n# done\n# ----------------------------------------------------------------------\n\n\nlet &quot;comparisons -= 1&quot; #  因为最&quot;重&quot;的元素到了底部,\n                       #+ 所以每轮我们可以少做一次比较。\n\necho\necho &quot;$count: ${Countries[@]}&quot;  # 每轮结束后, 都打印一次数组.\necho\nlet &quot;count += 1&quot;                # 增加传递计数.\n\ndone                            # 外部循环结束\n                                # 至此, 全部完成.\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br></div></div><hr>\n<p>我们可以在数组中嵌套数组么？</p>\n<div><pre><code>#!/bin/bash\n# &quot;嵌套&quot; 数组.\n\n#  Michael Zick 提供了这个用例。\n#+ William Park做了一些修正和说明.\n\nAnArray=( $(ls --inode --ignore-backups --almost-all \\\n        --directory --full-time --color=none --time=status \\\n        --sort=time -l ${PWD} ) )  # Commands and options.\n\n# 空格是有意义的 . . . 并且不要在上边用引号引用任何东西.\n\nSubArray=( ${AnArray[@]:11:1}  ${AnArray[@]:6:5} )\n#  这个数组有六个元素:\n#+     SubArray=( [0]=${AnArray[11]} [1]=${AnArray[6]} [2]=${AnArray[7]}\n#      [3]=${AnArray[8]} [4]=${AnArray[9]} [5]=${AnArray[10]} )\n#\n#  Bash数组是字符串(char *)类型\n#+ 的(循环)链表\n#  因此, 这不是真正意义上的嵌套数组,\n#+ 只不过功能很相似而已.\n\necho &quot;Current directory and date of last status change:&quot;\necho &quot;${SubArray[@]}&quot;\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><hr>\n<p>如果将“嵌套数组”与<a href=\"http://tldp.org/LDP/abs/html/bashver2.html#VARREFNEW\" target=\"_blank\" rel=\"noopener noreferrer\">间接引用</a> 组合起来使用的话，将会产生一些非常有趣的用法。</p>\n<p>例子 27-12. 嵌套数组与间接引用</p>\n<div><pre><code>#!/bin/bash\n# embedded-arrays.sh\n# 嵌套数组和间接引用.\n\n# 本脚本由Dennis Leeuw 编写.\n# 经过授权, 在本书中使用.\n# 本书作者做了少许修改.\n\nARRAY1=(\n        VAR1_1=value11\n        VAR1_2=value12\n        VAR1_3=value13\n)\n\nARRAY2=(\n        VARIABLE=&quot;test&quot;\n        STRING=&quot;VAR1=value1 VAR2=value2 VAR3=value3&quot;\n        ARRAY21=${ARRAY1[*]}\n)       # 将ARRAY1嵌套到这个数组中.\n\nfunction print () {\n        OLD_IFS=&quot;$IFS&quot;\n        IFS=$&#39;\\n&#39;       #  这么做是为了每行\n                        #+ 只打印一个数组元素.\n        TEST1=&quot;ARRAY2[*]&quot;\n        local ${!TEST1} # 删除这一行, 看看会发生什么?\n        #  间接引用.\n        #  这使得$TEST1\n        #+ 只能够在函数内被访问.\n\n        #  让我们看看还能干点什么.\n\n        echo\n        echo &quot;\\$TEST1 = $TEST1&quot;       #  仅仅是变量名字.\n        echo; echo\n        echo &quot;{\\$TEST1} = ${!TEST1}&quot;  #  变量内容.\n                                      #  这就是\n                                      #+ 间接引用的作用.\n        echo\n        echo &quot;-------------------------------------------&quot;; echo\n        echo\n\n        # 打印变量\n        echo &quot;Variable VARIABLE: $VARIABLE&quot;\n\n        # 打印一个字符串元素\n        IFS=&quot;$OLD_IFS&quot;\n        TEST2=&quot;STRING[*]&quot;\n        local ${!TEST2}      # 间接引用(同上).\n        echo &quot;String element VAR2: $VAR2 from STRING&quot;\n\n        # Print an array element\n        TEST2=&quot;ARRAY21[*]&quot;\n\t\tlocal ${!TEST2}      # 间接引用(同上).\n\t\techo &quot;Array element VAR1_1: $VAR1_1 from ARRAY21&quot;\n}\n\nprint\necho\n\nexit 0\n\n# 脚本作者注,\n#+ &quot;你可以很容易的将其扩展成一个能创建hash 的Bash 脚本.&quot;\n# (难) 留给读者的练习: 实现它.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br></div></div><hr>\n<p>数组使得埃拉托色尼素数筛子有了shell版本的实现. 当然, 如果你需要的是追求效率的应用, 那么就 应该使用编译行语言来实现, 比如C语言. 因为脚本运行的太慢了.</p>\n<p>例子 27-13. 埃拉托色尼素数筛子</p>\n<div><pre><code>#!/bin/bash\n# sieve.sh (ex68.sh)\n\n# 埃拉托色尼素数筛子\n# 找素数的经典算法.\n\n# 在同等数值的范围内,\n#+ 这个脚本运行的速度比C版本慢的多.\n\nLOWER_LIMIT=1       # 从1开始.\nUPPER_LIMIT=1000    # 到1000.\n# (如果你时间很多的话 . . . 你可以将这个数值调的很高.)\n\nPRIME=1\nNON_PRIME=0\n\nlet SPLIT=UPPER_LIMIT/2\n# 优化:\n# 只需要测试中间到最大的值,为什么?\n\ndeclare -a Primes\n# Primes[] 是个数组.\n\n\ninitialize ()\n{\n\t# 初始化数组.\n\ti=$LOWER_LIMIT\n\tuntil [ &quot;$i&quot; -gt &quot;$UPPER_LIMIT&quot; ]\n\tdo\n\t  Primes[i]=$PRIME\n\t  let &quot;i += 1&quot;\n\tdone\n\t#  假定所有数组成员都是需要检查的(素数)\n\t#+ 直到检查完成.\n}\n\nprint_primes ()\n{\n\t# 打印出所有数组Primes[]中被标记为素数的元素.\n\t\n\ti=$LOWER_LIMIT\n\n\tuntil [ &quot;$i&quot; -gt &quot;$UPPER_LIMIT&quot; ]\n\tdo\n\t  if [ &quot;${Primes[i]}&quot; -eq &quot;$PRIME&quot; ]\n\t  then\n\t\tprintf &quot;%8d&quot; $i\n\t\t# 每个数字打印前先打印8个空格, 在偶数列才打印.\n\t  fi\n\n\t  let &quot;i += 1&quot;\n\n\tdone\n}\n\nsift () # 查出非素数.\n{\n\tlet i=$LOWER_LIMIT+1\n\t# 我们从2开始.\n\n\tuntil [ &quot;$i&quot; -gt &quot;$UPPER_LIMIT&quot; ]\n\tdo\n\n\tif [ &quot;${Primes[i]}&quot; -eq &quot;$PRIME&quot; ]\n\t# 不要处理已经过滤过的数字(被标识为非素数).\n\tthen\n\t  t=$i\n\n\t  while [ &quot;$t&quot; -le &quot;$UPPER_LIMIT&quot; ]\n\t  do\n\t\tlet &quot;t += $i &quot;\n\t\tPrimes[t]=$NON_PRIME\n\t\t# 标识为非素数.\n\t  done \n\tfi\n\t \n\tlet &quot;i += 1&quot;\n\tdone\n}\n\n# ==============================================\n# main ()\n# 继续调用函数.\ninitialize\nsift\nprint_primes\n# 这里就是被称为结构化编程的东西.\n# ==============================================\necho\n\nexit 0\n\n# -------------------------------------------------------- #\n# 因为前面的&#39;exit&#39;语句, 所以后边的代码不会运行\n\n#  下边的代码, 是由Stephane Chazelas 所编写的埃拉托色尼素数筛子的改进版本,\n#+ 这个版本可以运行的快一些.\n\n# 必须在命令行上指定参数(这个参数就是: 寻找素数的限制范围)\n\nUPPER_LIMIT=$1                  # 来自于命令行.\nlet SPLIT=UPPER_LIMIT/2         # 从中间值到最大值.\n\nPrimes=( &#39;&#39; $(seq $UPPER_LIMIT) )\n\ni=1\nuntil (( ( i += 1 ) &gt; SPLIT ))  # 仅需要从中间值检查.\ndo\n  if [[ -n ${Primes[i]} ]]\n  then\n    t=$i\n    until (( ( t += i ) &gt; UPPER_LIMIT ))\n    do\n      Primes[t]=\n    done\n  fi \ndone\necho ${Primes[*]}\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br></div></div><p>例子 27-14. 埃拉托色尼素数筛子，优化版</p>\n<div><pre><code>#!/bin/bash\n# 优化过的埃拉托色尼素数筛子\n# 脚本由Jared Martin编写, ABS Guide 的作者作了少许修改.\n# 在ABS Guide 中经过了许可而使用(感谢!).\n\n# 基于Advanced Bash Scripting Guide中的脚本.\n# http://tldp.org/LDP/abs/html/arrays.html#PRIMES0 (ex68.sh).\n\n# http://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf (引用)\n# Check results against http://primes.utm.edu/lists/small/1000.txt\n\n# Necessary but not sufficient would be, e.g.,\n#     (($(sieve 7919 | wc -w) == 1000)) &amp;&amp; echo &quot;7919 is the 1000th prime&quot;\n\nUPPER_LIMIT=${1:?&quot;Need an upper limit of primes to search.&quot;}\n\nPrimes=( &#39;&#39; $(seq ${UPPER_LIMIT}) )\n\ntypeset -i i t\nPrimes[i=1]=&#39;&#39; # 1不是素数 \nuntil (( ( i += 1 ) &gt; (${UPPER_LIMIT}/i) ))  # 只需要ith-way 检查.\n  do                                         # 为什么?\n    if ((${Primes[t=i*(i-1), i]}))\n    # 很少见， 但是很有指导意义, 在下标中使用算术扩展。\n\tthen\n      until (( ( t += i ) &gt; ${UPPER_LIMIT} ))\n        do Primes[t]=; done\n    fi\n  done\n\n# echo ${Primes[*]}\necho   # 改回原来的脚本，为了漂亮的打印(80-col. 展示).\nprintf &quot;%8d&quot; ${Primes[*]}\necho; echo\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>上边的这个例子是基于数组的素数产生器, 还有不使用数组的素数产生器<a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#PRIMES\" target=\"_blank\" rel=\"noopener noreferrer\">例子A-15</a> 和<a href=\"http://tldp.org/LDP/abs/html/mathc.html#PRIMES2\" target=\"_blank\" rel=\"noopener noreferrer\">例子 16-46</a>，让我们来比较一番.</p>\n<hr>\n<p>数组可以进行一定程度上的扩展, 这样就可以模拟一些Bash原本不支持的数据结构.</p>\n<p>例子 27-15. 模拟一个压入栈</p>\n<div><pre><code>#!/bin/bash\n# stack.sh: 模拟压入栈\n\n# 类似于CPU 栈, 压入栈依次保存数据项, \n#+ 但是取数据时, 却反序进行, 后进先出.\n\nBP=100\t\t#  栈数组的基址指针.\n\t\t\t#  从元素100 开始.\n\nSP=$BP\t\t#  栈指针.\n\t\t\t#  将其初始化为栈&quot;基址&quot;(栈底)\n\nData=\t\t#  当前栈的数据内容.\n\t\t\t#  必须定义为全局变量,\n\t\t\t#+ 因为函数所能够返回的整数存在范围限制.\n\n\t\t\t# 100\t基址\t\t\t\t&lt;-- Base Pointer\n\t\t\t#  99\t第一个数据元素\n\t\t\t#  98\t第二个数据元素\n\t\t\t# ...\t更多数据\n\t\t\t#\t\t最后一个数据元素\t&lt;-- Stack pointer\n\ndeclare -a stack\n\npush()\t\t# 压栈\n{\n\tif [ -z &quot;$1&quot; ]\t\t# 没有可压入的数据项?\n\tthen\n\t\treturn \n\tfi\n\n\tlet &quot;SP -= 1&quot;\t\t# 更新栈指针.\n\tstack[$SP]=$1\n\treturn \n}\n\npop()\t #从栈中弹出数据项. \n{ \n\tData=\t\t\t\t\t\t# 清空保存数据项的中间变量\n\n\tif [ &quot;$SP&quot; -eq &quot;$BP&quot; ]\t\t# 栈空?\n\tthen\n\t\treturn \n\tfi\t\t\t\t\t\t# 这使得SP不会超过100,\n\t\t\t\t\t\t\t#+ 例如, 这可以防止堆栈失控.\n\n\n\tData=${stack[$SP]}\n\tlet &quot;SP += 1&quot;\t\t\t# 更新栈指针\n\treturn\n}\n\nstatus_report()\t\t\t# 打印当前状态\n{\n\techo &quot;-------------------------------------&quot;\n\techo &quot;REPORT&quot;\n\techo &quot;Stack Pointer = $SP&quot;\n\techo &quot;Just popped \\&quot;&quot;$Data&quot;\\&quot; off the stack.&quot;\n\techo &quot;-------------------------------------&quot;\n\techo\n}\n\n\n# =======================================================\n# 现在, 来点乐子.\n\necho\n\n# 看你是否能从空栈里弹出数据项来.\npop\nstatus_report\n\necho\n\npush garbage\npop\nstatus_report\t\t\t# 压入Garbage, 弹出garbage.\n\nvalue1=23;\t\t\tpush $value1\nvalue2=skidoo;\t\tpush $value2\nvalue3=LAST;\t\tpush $value3\n\npop\t\t\t\t\t# LAST\nstatus_report\npop\t\t\t\t\t# skidoo\nstatus_report\npop\t\t\t\t\t# 23\nstatus_report\t\t# 后进，先出!\n\n# 注意: 栈指针在压栈时减,\n#+ 在弹出时加.\n\necho\n\nexit 0\n\n\n# =======================================================\n#\n# 练习：\n#\n# 1) 修改&quot;push()&quot;函数，\n# \t+ 使其调用一次就能够压入多个数据项。\n\n# 2) 修改&quot;pop()&quot;函数,\n#\t+ 使其调用一次就能弹出多个数据项.\n\n# 3) 给那些有临界操作的函数添加出错检查.\n#\t 说明白一些, 就是让这些函数返回错误码, \n#\t+ 返回的错误码依赖于操作是否成功完成, \n#\t+ 如果没有成功完成, 那么就需要启动合适的处理动作.\n\n# 4) 以这个脚本为基础,\n#\t+ 编写一个用栈实现的四则运算计算器.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br></div></div><hr>\n<p>如果想对数组&quot;下标&quot;做一些比较诡异的操作, 可能需要使用中间变量. 对于那些有这种需求的项目来说, 还是应该考虑使用功能更加强大的编程语言, 比如Perl或C。</p>\n<p>例子 27-16. 复杂的数组应用: 探索一个神秘的数学序列</p>\n<div><pre><code>!/bin/bash\n\n# Douglas Hofstadter 的声名狼藉的序列&quot;Q-series&quot;:\n\n# Q(1) = Q(2) = 1\n# Q(n) = Q(n - Q(n-1)) + Q(n - Q(n-2)), 当 n&gt;2时\n\n#  这是一个令人感到陌生的, 没有规律的&quot;乱序&quot;整数序列\n#+ 并且行为不可预测\n#  序列的头20项, 如下所示:\n#  1 1 2 3 3 4 5 5 6 6 6 8 8 8 10 9 10 11 11 12\n\n#  请参考相关书籍, Hofstadter的, &quot;_Goedel, Escher, Bach: An Eternal Golden Braid_&quot;,\n#+ 第137页.\n\n\nLIMIT=100     # 需要计算的数列长度.\nLINEWIDTH=20  # 每行打印的个数.\n\nQ[1]=1        # 数列的头两项都为1.\nQ[2]=1\n\necho\necho &quot;Q-series [$LIMIT terms]:&quot;\necho -n &quot;${Q[1]} &quot;             # 输出数列头两项.\necho -n &quot;${Q[2]} &quot;\n\nfor ((n=3; n &lt;= $LIMIT; n++))  # C风格的循环条件.\ndo   # Q[n] = Q[n - Q[n-1]] + Q[n - Q[n-2]]  for n&gt;2\n#    需要将表达式拆开, 分步计算,\n#+   因为Bash 不能够很好的处理复杂数组的算术运算.\n\n\tlet &quot;n1 = $n - 1&quot;        # n-1\n\tlet &quot;n2 = $n - 2&quot;        # n-2\n\n\tt0=`expr $n - ${Q[n1]}`  # n - Q[n-1]\n\tt1=`expr $n - ${Q[n2]}`  # n - Q[n-2]\n\n\tT0=${Q[t0]}\t\t\t# Q[n - Q[n-1]]\n\tT1=${Q[t1]}\t\t\t# Q[n - Q[n-2]]\n\n\n\tQ[n]=`expr $T0 + $T1`\t# Q[n - Q[n-1]] + Q[n - Q[n-2]]\n\techo -n &quot;${Q[n]} &quot;\n\n\tif [ `expr $n % $LINEWIDTH` -eq 0 ]\t\t# 格式化输出\n\tthen   #      ^ 取模操作\n\t\techo # 把每行都拆为20个数字的小块.\n\tfi\n\ndone\n\necho\n\nexit 0\n\n# 这是Q-series的一个迭代实现.\n# 更直接明了的实现是使用递归, 请读者作为练习完成.\n# 警告: 使用递归的方法来计算这个数列的话, 会花费非常长的时间.\n#+ C/C++ 将会计算的快一些。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div><hr>\n<p>Bash仅仅支持一维数组, 但是我们可以使用一个小手段, 这样就可以模拟多维数组了.</p>\n<p>例子 27-17. 模拟一个二维数组，并使它倾斜</p>\n<div><pre><code>#!/bin/bash\n# twodim.sh: 模拟一个二维数组.\n\n# 一维数组由单行组成.\n# 二维数组由连续的多行组成.\n\nRows=5\nColumns=5\n# 5 X 5 的数组.\n\ndeclare -a alpha\t\t# char alpha [Rows] [Columns];\n\t\t\t\t\t\t# 没必要声明. 为什么?\n\nload_alpha ()\n{\n\tlocal rc=0\n\tlocal index\n\n\tfor i in A B C D E F G H I J K L M N O P Q R S T U V W X Y\n\tdo     # 你可以随你的心意, 使用任意符号.\n\t  local row=`expr $rc / $Columns`\n\t  local column=`expr $rc % $Rows`\n\t  let &quot;index = $row * $Rows + $column&quot;\n\t  alpha[$index]=$i\n\t# alpha[$row][$column]\n\t  let &quot;rc += 1&quot;\n\tdone\n\t# 更简单的方法:\n\t#+   declare -a alpha=( A B C D E F G H I J K L M N O P Q R S T U V W X Y )\n\t#+ 但是如果写的话, 就缺乏二维数组的&quot;风味&quot;了.\n}\n\nprint_alpha ()\n{\n\tlocal row=0\n\tlocal index\n\techo\n\twhile [ &quot;$row&quot; -lt &quot;$Rows&quot; ]   #  以&quot;行序为主&quot;进行打印:\n\tdo                             #+ 行号不变(外层循环),\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t   #+ 列号进行增长.\n\t  local column=0\n\n\t  echo -n &quot;       &quot;            #  按照行方向打印&quot;正方形&quot;数组.\n\n\t  while [ &quot;$column&quot; -lt &quot;$Columns&quot; ]\n\t  do\n\t\tlet &quot;index = $row * $Rows + $column&quot;\n\t\techo -n &quot;${alpha[index]} &quot;  # alpha[$row][$column]\n\t\tlet &quot;column += 1&quot;\n\t  done\n\n\t  let &quot;row += 1&quot;\n\t  echo\n\tdone\n\t# 更简单的等价写法为:\n\t#     echo ${alpha[*]} | xargs -n $Columns\n\techo \n}\n\nfilter ()     # 过滤掉负的数组下标.\n{\n\n\techo -n &quot;  &quot;  # 产生倾斜.\n\t\t\t\t  # 解释一下, 这是怎么做到的.\n\tif [[ &quot;$1&quot; -ge 0 &amp;&amp;  &quot;$1&quot; -lt &quot;$Rows&quot; &amp;&amp; &quot;$2&quot; -ge 0 &amp;&amp; &quot;$2&quot; -lt &quot;$Columns&quot; ]]\n\tthen\n\t\tlet &quot;index = $1 * $Rows + $2&quot;\n\t\t# 现在, 按照旋转方向进行打印.\n\t\techo -n &quot; ${alpha[index]}&quot;\n\t\t#           alpha[$row][$column]\n\tfi \n\n}\n\nrotate ()  #  将数组旋转45度 --\n{          #+ 从左下角进行&quot;平衡&quot;.\n\tlocal row\n\tlocal column\n\n\tfor (( row = Rows; row &gt; -Rows; row-- ))\n\t  do       # 反向步进数组, 为什么?\n\t  \n\t  for (( column = 0; column &lt; Columns; column++ ))\n\t  do\n\n\t\tif [ &quot;$row&quot; -ge 0 ]\n\t\tthen\n\t\t  let &quot;t1 = $column - $row&quot;\n\t\t  let &quot;t2 = $column&quot;\n\t\telse\n\t\t  let &quot;t1 = $column&quot;\n\t\t  let &quot;t2 = $column + $row&quot;\n\t\tfi\n\t\tfilter $t1 $t2\t\t\t# 将负的数组下标过滤出来.\n\t\t\t\t\t\t\t\t# 如果你不做这一步, 将会怎样?\n\t  done\n\t  echo; echo\n\n\tdone\n\n#  数组旋转的灵感来源于Herbert Mayer 所著的\n#+ &quot;Advanced C Programming on the IBM PC&quot;的例子(第143-146页)\n#+ (参见参考书目).\n#  由此可见, C语言能够做到的好多事情,\n#+ 用shell 脚本一样能够做到.\n}\n\n\n#--------------- 现在, 让我们开始吧. ------------#\nload_alpha\t\t\t# 加载数组\nprint_alpha\t\t\t# 打印数组.\nrotate\t\t\t\t# 逆时钟旋转45度打印.\n#-----------------------------------------------------#\n\nexit 0\n\n# 这有点做作, 不是那么优雅.\n\n# 练习:\n# -----\n#  1) 重新实现数组加载和打印函数,\n#     让其更直观, 可读性更强. \n#\n#  2) 详细地描述旋转函数的原理.\n#     提示: 思考一下倒序索引数组的实现.\n#\n#  3) 重写这个脚本, 扩展它, 让不仅仅能够支持非正方形的数组.\n#     比如6 X 4的数组.\n#     尝试一下, 在数组旋转时, 做到最小&quot;失真&quot;.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br></div></div><p>二维数组本质上其实就是一个一维数组, 只不过是添加了行和列的寻址方式, 来引用和操作数组的元素而已.</p>\n<p>这里有一个精心制作的模拟二维数组的例子, 请参考<a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#LIFESLOW\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-10</a>.</p>\n<hr>\n<p>还有更多使用数组的有趣的脚本，请参考：</p>\n<ul>\n<li><a href=\"http://tldp.org/LDP/abs/html/commandsub.html#AGRAM2\" target=\"_blank\" rel=\"noopener noreferrer\">例子 12-3</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/mathc.html#PRIMES2\" target=\"_blank\" rel=\"noopener noreferrer\">例子 16-46</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#HASHEX2\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-22</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#HOMEWORK\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-44</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#QKY\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-41</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#NIM\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-42</a></li>\n</ul>\n",
      "image": "http://tldp.org/LDP/abs/images/tip.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "30 网络编程",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/30_network_programming/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/30_network_programming/",
      "content_html": "<h1 id=\"_30-网络编程\"> 30 网络编程</h1>\n<blockquote>The Net's a cross between an elephant and a white elephant sale: it never forgets, and it's always crap.<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--Nemo</blockquote>\n<p>Linux系统拥有一系列的工具，用于访问、操作和调解网络连接。我们能够把其中的一部分工具整合到脚本中 -- 这些脚本能扩展我们对网络的认知，有用的脚本还能方便网络管理。</p>\n<p>以下是一个简单的CGI脚本，阐述如何连接到远程服务器。</p>\n<p>例子 30-1. 打印服务器环境</p>\n<div><pre><code>#!/bin/bash\n# test-cgi.sh\n# by Michael Zick\n# Used with permission\n\n# 您应该根据您的情况修改相应的Bash路径\n# （在ISP的服务器中，Bash一般不会放在正常的位置）\n# 其他位置： /usr/bin 或者 /usr/local/bin\n# 甚至应该在sha-bang中不用任何路径运行它\n\n# 取消通配符\nset -f\n\n# Http Header（译者注：此头信息是告诉浏览器服务器返回的内容格式）\necho Content-type: text/plain\necho\n\necho CGI/1.0 test script report:\necho\n\necho environment settings:\nset\necho\n\necho whereis bash?\nwhereis bash\necho\n\n\necho who are we?\necho ${BASH_VERSINFO[*]}\necho\n\necho argc is $#. argv is &quot;$*&quot;.\necho\n\n# CGI/1.0 预期的环境变量。\n\necho SERVER_SOFTWARE = $SERVER_SOFTWARE\necho SERVER_NAME = $SERVER_NAME\necho GATEWAY_INTERFACE = $GATEWAY_INTERFACE\necho SERVER_PROTOCOL = $SERVER_PROTOCOL\necho SERVER_PORT = $SERVER_PORT\necho REQUEST_METHOD = $REQUEST_METHOD\necho HTTP_ACCEPT = &quot;$HTTP_ACCEPT&quot;\necho PATH_INFO = &quot;$PATH_INFO&quot;\necho PATH_TRANSLATED = &quot;$PATH_TRANSLATED&quot;\necho SCRIPT_NAME = &quot;$SCRIPT_NAME&quot;\necho QUERY_STRING = &quot;$QUERY_STRING&quot;\necho REMOTE_HOST = $REMOTE_HOST\necho REMOTE_ADDR = $REMOTE_ADDR\necho REMOTE_USER = $REMOTE_USER\necho AUTH_TYPE = $AUTH_TYPE\necho CONTENT_TYPE = $CONTENT_TYPE\necho CONTENT_LENGTH = $CONTENT_LENGTH\n\nexit 0\n\n# 在这里，文档给出一些简短的指令。\n:&lt;&lt;-&#39;_test_CGI_&#39;\n\n1) 将此文档放到http://domain.name/cgi-bin的目录。\n2) 然后，访问http://domain.name/cgi-bin/test-cgi.sh.\n\n_test_CGI_\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br></div></div><p>出于安全的考虑，确认连接计算机的IP地址是有用的。\n例子 30-2. IP地址</p>\n<div><pre><code>#!/bin/bash\n# ip-addresses.sh\n# 列出您的计算机所连接的IP地址。\n\n#  受Greg Bledsoe的ddos.sh脚本所启发，\n#  Linux Journal，2011年3月9号。\n#    URL:\n#  http://www.linuxjournal.com/content/back-dead-simple-bash-complex-ddos\n#  Greg licensed his script under the GPL2,\n#+ and as a derivative, this script is likewise GPL2.\n\nconnection_type=TCP      # 也可以使用UDP\nfield=2           # Which field of the output we&#39;re interested in.\nno_match=LISTEN   # 过滤出包含此字符串的记录，为什么？\nlsof_args=-ni     # -i 列出互联网相关的文件。\n                  # -n 使用数值IP地址。\n\t\t  # 如果不使用-n选项，会发生什么情况？试试看。\nrouter=&quot;[0-9][0-9][0-9][0-9][0-9]-&gt;&quot;\n#       删除路由信息。\n\nlsof &quot;$lsof_args&quot; | grep $connection_type | grep -v &quot;$no_match&quot; |\n      awk &#39;{print $9}&#39; | cut -d : -f $field | sort | uniq |\n      sed s/&quot;^$router&quot;//\n\n#  Bledsoe的脚本将过滤出的IP地址结果赋给一个变量（类似上面的19行到22行）。\n#  他检查连接到一个IP地址的多个连接，\n#  使用：\n#\n#    iptables -I INPUT -s $ip -p tcp -j REJECT --reject-with tcp-reset\n#\n#  ... 在每一次的60秒延迟循环中，拒绝来自DDOS攻击的数据包。\n\n\n#  练习：\n#  --------\n#  使用&#39;iptable&#39;命令扩展这个脚本\n#+ 来拒绝一些来自垃圾邮件发送者的IP域名的连接请求。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><hr>\n<p>更多网络编程的例子：</p>\n<ul>\n<li><a href=\"http://tldp.org/LDP/abs/html/devref1.html#NPREF\" target=\"_blank\" rel=\"noopener noreferrer\">Getting the time from nist.gov</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/devref1.html#NW001\" target=\"_blank\" rel=\"noopener noreferrer\">Downloading a URL</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/system.html#IPSCRIPT0\" target=\"_blank\" rel=\"noopener noreferrer\">A GRE tunnel</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/communications.html#PING0\" target=\"_blank\" rel=\"noopener noreferrer\">Checking if an Internet server is up</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/communications.html#ISSPAMMER\" target=\"_blank\" rel=\"noopener noreferrer\">例子 16-41</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#ISSPAMMER2\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-28</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/contributed-scripts.html#WHX\" target=\"_blank\" rel=\"noopener noreferrer\">例子 A-29</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/devref1.html#DEVTCP\" target=\"_blank\" rel=\"noopener noreferrer\">例子 29-1</a></li>\n</ul>\n<p>更多资料请看<a href=\"http://tldp.org/LDP/abs/html/system.html\" target=\"_blank\" rel=\"noopener noreferrer\">《System and Administrative Commands》</a>的章节<a href=\"http://tldp.org/LDP/abs/html/system.html#NETWORKSYS1\" target=\"_blank\" rel=\"noopener noreferrer\">“网络命令”</a>，以及<a href=\"http://tldp.org/LDP/abs/html/external.html\" target=\"_blank\" rel=\"noopener noreferrer\">《External Filters, Programs and Commands》</a>的章节<a href=\"http://tldp.org/LDP/abs/html/communications.html\" target=\"_blank\" rel=\"noopener noreferrer\">“通信命令”</a>。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "32 调试",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/32_Debugging/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/32_Debugging/",
      "content_html": "<h1 id=\"_32-调试\"> 32 调试</h1>\n<blockquote>\n调试代码要比写代码困难两倍。因此，你写代码时越多的使用奇技淫巧（自做聪明），顾名思义，你越难以调试它。    --Brian Kernighan\n</blockquote>\n<p>Bash shell中不包含内置的debug工具，甚至没有调试专用的命令和结构。当调试非功能脚本，产生语法错误或者有错别字时，往往是无用的错误提示消息。</p>\n<p>例子 32-1. 一个错误脚本</p>\n<div><pre><code>#!/bin/bash\n# ex74.sh\n\n# 这是一个错误脚本，但是它错在哪？\n\na=37\n\nif [$a -gt 27 ]\nthen\n  echo $a\nfi  \n\nexit $?   # 0! 为什么?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>脚本的输出:</p>\n<div><pre><code>./ex74.sh: [37: command not found\n</code></pre>\n<div><span>1</span><br></div></div><p>上边的脚本究竟哪错了(提示: 注意if的后边)</p>\n<p>例子 32-2. 缺少关键字</p>\n<div><pre><code>#!/bin/bash\n# missing-keyword.sh\n# 这个脚本会提示什么错误信息？\n\nfor a in 1 2 3\ndo\n  echo &quot;$a&quot;\n# done     #所需关键字&#39;done&#39;在第8行被注释掉.\n\nexit 0     # 将不会在这退出!\n\n#在命令行执行完此脚本后\n输入：echo $?    \n输出：2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>脚本的输出:</p>\n<div><pre><code>missing-keyword.sh: line 10: syntax error: unexpected end of file\n</code></pre>\n<div><span>1</span><br></div></div><p>注意, 其实不必参考错误信息中指出的错误行号. 这行只不过是Bash解释器最终认定错误的地方.\n出错信息在报告产生语法错误的行号时, 可能会忽略脚本的注释行.\n如果脚本可以执行, 但并不如你所期望的那样工作, 怎么办? 通常情况下, 这都是由常见的逻辑错误所\n产生的.</p>\n<p>例子 32-3.</p>\n<div><pre><code>#!/bin/bash\n\n#  这个脚本应该删除在当前目录下所有文件名中含有空格的文件\n#  它不能正常运行，为什么？\n\nbadname=`ls | grep &#39; &#39;`\n\n# Try this:\n# echo &quot;$badname&quot;\n\nrm &quot;$badname&quot;\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>可以通过把echo &quot;$badname&quot;行的注释符去掉，找出例子 29-3中的错误， 看一下echo出来的信息，是否按你期望的方式运行.</p>\n<p>在这种特殊的情况下，rm &quot;<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span>ba</span><span>d</span><span>nam</span><span>e</span><span>&quot;</span><span>不能得到预期的结果，因为</span></span></span></span>badname不应该加双引号。加上双引号会让rm只有一个参数(这就只能匹配一个文件名).一种不完善的解决办法是去掉<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span>ba</span><span>d</span><span>nam</span><span>e</span><span>外面的引号</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>并且重新设置</span></span></span></span>IFS, 让<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span style=\"margin-right:0.07847em;\">I</span><span style=\"margin-right:0.05764em;\">FS</span><span>只包含一个换行符</span><span>,</span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.07847em;\">I</span><span style=\"margin-right:0.05764em;\">FS</span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span></span></span></span>'\\n'. 但是, 下面这个方法更简单.</p>\n<div><pre><code># 删除包含空格的文件的正确方法.\nrm *\\ *\nrm *&quot; &quot;*\nrm *&#39; &#39;*\n# 感谢. S.C.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>总结一下这个问题脚本的症状:</p>\n<blockquote></blockquote>\n<ol>\n<li>由于&quot;syntax error&quot;(语法错误)使得脚本停止运行,</li>\n<li>或者脚本能够运行, 但是并不是按照我们所期望的那样运行(逻辑错误).</li>\n<li>脚本能够按照我们所期望的那样运行, 但是有烦人的副作用(逻辑炸弹).</li>\n</ol>\n<p>如果想调试脚本, 可以用以下方式:</p>\n<ol>\n<li>\n<p>echo语句可以放在脚本中存在疑问的位置上, 观察变量的值, 来了解脚本运行时的情况.</p>\n<div><pre><code>### debecho (debug-echo), by Stefano Falsetto ###\n### Will echo passed parameters only if DEBUG is set to a value. ###\ndebecho () {\n\tif [ ! -z &quot;$DEBUG&quot; ]; then\n \t\techo &quot;$1&quot; &gt;&amp;2\n \t\t# ^^^ to stderr\n\tfi\n}\n\nDEBUG=on\nWhatever=whatnot\ndebecho $Whatever   # whatnot\n\nDEBUG=\nWhatever=notwhat\ndebecho $Whatever   # (Will not echo.)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>\n<li>\n<p>使用过滤器tee来检查临界点上的进程或数据流.</p>\n</li>\n<li>\n<p>设置选项-n -v -x</p>\n<p>sh -n scriptname不会运行脚本, 只会检查脚本的语法错误. 这等价于把set -n或set -o noexec插入脚本中. 注意, 某些类型的语法错误不会被这种方式检查出来.</p>\n<p>sh -v scriptname将会在运行脚本之前, 打印出每一个命令. 这等价于把set -v或set -o verbose插入到脚本中.</p>\n<p>选项-n和-v可以同时使用. sh -nv scriptname将会给出详细的语法检查.</p>\n<p>sh -x scriptname会打印出每个命令执行的结果, 但只使用缩写形式. 这等价于在脚本中插入set\n-x或set -o xtrace.</p>\n<p>把set -u或set -o nounset插入到脚本中, 并运行它, 就会在每个试图使用未声明变量的地方给出一个unbound variable错误信息.</p>\n<div><pre><code>set -u   # Or   set -o nounset\n\n# Setting a variable to null will not trigger the error/abort.\n# unset_var=\n\necho $unset_var   # Unset (and undeclared) variable.\necho &quot;Should not echo!&quot;\n\n#sh t2.sh\n#t2.sh: line 6: unset_var: unbound variable\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>\n<li>\n<p>使用“断言”功能在脚本的关键点进行测试的变量或条件。 （这是从C借来的一个想法）</p>\n<p>Example 32-4. Testing a condition with an assert</p>\n<div><pre><code>#!/bin/bash\n# assert.sh\n\n#######################################################################\nassert ()                 #  If condition false,\n{                         #+ exit from script\n                          #+ with appropriate error message.\n  E_PARAM_ERR=98\n  E_ASSERT_FAILED=99\n\n\n  if [ -z &quot;$2&quot; ]          #  Not enough parameters passed\n  then                    #+ to assert() function.\n    return $E_PARAM_ERR   #  No damage done.\n  fi\n\n  lineno=$2\n\n  if [ ! $1 ] \n  then\n    echo &quot;Assertion failed:  \\&quot;$1\\&quot;&quot;\n    echo &quot;File \\&quot;$0\\&quot;, line $lineno&quot;    # Give name of file and line number.\n    exit $E_ASSERT_FAILED\n  # else\n  #   return\n  #   and continue executing the script.\n  fi  \n} # Insert a similar assert() function into a script you need to debug.    \n#######################################################################\n\n\na=5\nb=4\ncondition=&quot;$a -lt $b&quot;     #  Error message and exit from script.\n                          #  Try setting &quot;condition&quot; to something else\n                          #+ and see what happens.\n\nassert &quot;$condition&quot; $LINENO\n# The remainder of the script executes only if the &quot;assert&quot; does not fail.\n\n\n# Some commands.\n# Some more commands . . .\necho &quot;This statement echoes only if the \\&quot;assert\\&quot; does not fail.&quot;\n# . . .\n# More commands . . .\n\nexit $?\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div></li>\n<li>\n<p>使用变量$LINENO和内建命令caller.</p>\n</li>\n<li>\n<p>捕获exit返回值.</p>\n<p>The exit command in a script triggers a signal 0, terminating the process, \tthat is, the script itself. [1] It is often useful to trap the exit, forcing \ta &quot;printout&quot; of variables, for example. The trap must be the first command \tin the script.</p>\n</li>\n</ol>\n<p>捕获信号</p>\n<p>trap\nSpecifies an action on receipt of a signal; also useful for debugging.</p>\n<p>A signal is a message sent to a process, either by the kernel or another \tprocess, telling it to take some specified action (usually to terminate). \tFor example, hitting a Control-C sends a user interrupt, an INT signal, to a \trunning program.</p>\n<p>A simple instance:</p>\n<div><pre><code>trap &#39;&#39; 2\n# Ignore interrupt 2 (Control-C), with no action specified. \n\t\ntrap &#39;echo &quot;Control-C disabled.&quot;&#39; 2\n# Message when Control-C pressed.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>Example 32-5. Trapping at exit</p>\n<div><pre><code>#!/bin/bash\n# Hunting variables with a trap.\n\ntrap &#39;echo Variable Listing --- a = $a  b = $b&#39; EXIT\n#  EXIT is the name of the signal generated upon exit from a script.\n#\n#  The command specified by the &quot;trap&quot; doesn&#39;t execute until\n#+ the appropriate signal is sent.\n\necho &quot;This prints before the \\&quot;trap\\&quot; --&quot;\necho &quot;even though the script sees the \\&quot;trap\\&quot; first.&quot;\necho\n\na=39\nb=36\n\nexit 0\n\n\n#  Note that commenting out the &#39;exit&#39; command makes no difference,\n#+ since the script exits in any case after running out of commands.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>Example 32-6. Cleaning up after Control-C</p>\n<div><pre><code>#!/bin/bash\n# logon.sh: A quick &#39;n dirty script to check whether you are on-line yet.\n\numask 177  # Make sure temp files are not world readable.\n\n\nTRUE=1\nLOGFILE=/var/log/messages\n#  Note that $LOGFILE must be readable\n#+ (as root, chmod 644 /var/log/messages).\nTEMPFILE=temp.$$\n#  Create a &quot;unique&quot; temp file name, using process id of the script.\n#     Using &#39;mktemp&#39; is an alternative.\n#     For example:\n#     TEMPFILE=`mktemp temp.XXXXXX`\nKEYWORD=address\n#  At logon, the line &quot;remote IP address xxx.xxx.xxx.xxx&quot;\n#                      appended to /var/log/messages.\nONLINE=22\nUSER_INTERRUPT=13\nCHECK_LINES=100\n#  How many lines in log file to check.\n\ntrap &#39;rm -f $TEMPFILE; exit $USER_INTERRUPT&#39; TERM INT\n#  Cleans up the temp file if script interrupted by control-c.\n\necho\n\nwhile [ $TRUE ]  #Endless loop.\ndo\n  tail -n $CHECK_LINES $LOGFILE&gt; $TEMPFILE\n  #  Saves last 100 lines of system log file as temp file.\n  #  Necessary, since newer kernels generate many log messages at log on.\n  search=`grep $KEYWORD $TEMPFILE`\n  #  Checks for presence of the &quot;IP address&quot; phrase,\n  #+ indicating a successful logon.\n\n  if [ ! -z &quot;$search&quot; ] #  Quotes necessary because of possible spaces.\n  then\n     echo &quot;On-line&quot;\n     rm -f $TEMPFILE    #  Clean up temp file.\n     exit $ONLINE\n  else\n     echo -n &quot;.&quot;        #  The -n option to echo suppresses newline,\n                        #+ so you get continuous rows of dots.\n  fi\n\n  sleep 1  \ndone  \n\n\n#  Note: if you change the KEYWORD variable to &quot;Exit&quot;,\n#+ this script can be used while on-line\n#+ to check for an unexpected logoff.\n\n# Exercise: Change the script, per the above note,\n#           and prettify it.\n\nexit 0\n\n\n# Nick Drage suggests an alternate method:\n\nwhile true\n  do ifconfig ppp0 | grep UP 1&gt; /dev/null &amp;&amp; echo &quot;connected&quot; &amp;&amp; exit 0\n  echo -n &quot;.&quot;   # Prints dots (.....) until connected.\n  sleep 2\ndone\n\n# Problem: Hitting Control-C to terminate this process may be insufficient.\n#+         (Dots may keep on echoing.)\n# Exercise: Fix this.\n\n\n\n# Stephane Chazelas has yet another alternative:\n\nCHECK_INTERVAL=1\n\nwhile ! tail -n 1 &quot;$LOGFILE&quot; | grep -q &quot;$KEYWORD&quot;\ndo echo -n .\n   sleep $CHECK_INTERVAL\ndone\necho &quot;On-line&quot;\n\n# Exercise: Discuss the relative strengths and weaknesses\n#           of each of these various approaches.\nExample 32-7. A Simple Implementation of a Progress Bar\n\n#! /bin/bash\n# progress-bar2.sh\n# Author: Graham Ewart (with reformatting by ABS Guide author).\n# Used in ABS Guide with permission (thanks!).\n\n# Invoke this script with bash. It doesn&#39;t work with sh.\n\ninterval=1\nlong_interval=10\n\n{\n     trap &quot;exit&quot; SIGUSR1\n     sleep $interval; sleep $interval\n     while true\n     do\n       echo -n &#39;.&#39;     # Use dots.\n       sleep $interval\n     done; } &amp;         # Start a progress bar as a background process.\n\npid=$!\ntrap &quot;echo !; kill -USR1 $pid; wait $pid&quot;  EXIT        # To handle ^C.\n\necho -n &#39;Long-running process &#39;\nsleep $long_interval\necho &#39; Finished!&#39;\n\nkill -USR1 $pid\nwait $pid              # Stop the progress bar.\ntrap EXIT\n\nexit $?\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br></div></div><p>Note\t\nThe DEBUG argument to trap causes a specified action to execute after every command in a script. This permits tracing variables, for example.</p>\n<p>Example 32-8. Tracing a variable</p>\n<div><pre><code>\n#!/bin/bash\n\ntrap &#39;echo &quot;VARIABLE-TRACE&gt; \\$variable = \\&quot;$variable\\&quot;&quot;&#39; DEBUG\n# Echoes the value of $variable after every command.\n\nvariable=29; line=$LINENO\n\necho &quot;  Just initialized \\$variable to $variable in line number $line.&quot;\n\nlet &quot;variable *= 3&quot;; line=$LINENO\necho &quot;  Just multiplied \\$variable by 3 in line number $line.&quot;\n\nexit 0\n\n#  The &quot;trap &#39;command1 . . . command2 . . .&#39; DEBUG&quot; construct is\n#+ more appropriate in the context of a complex script,\n#+ where inserting multiple &quot;echo $variable&quot; statements might be\n#+ awkward and time-consuming.\n\n# Thanks, Stephane Chazelas for the pointer.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>Output of script:</p>\n<p>VARIABLE-TRACE&gt; $variable = &quot;&quot;\nVARIABLE-TRACE&gt; $variable = &quot;29&quot;\nJust initialized $variable to 29.\nVARIABLE-TRACE&gt; $variable = &quot;29&quot;\nVARIABLE-TRACE&gt; $variable = &quot;87&quot;\nJust multiplied $variable by 3.\nVARIABLE-TRACE&gt; $variable = &quot;87&quot;\nOf course, the trap command has other uses aside from debugging, such as disabling certain keystrokes within a script (see Example A-43).</p>\n<p>Example 32-9. Running multiple processes (on an SMP box)</p>\n<div><pre><code>\n#!/bin/bash\n# parent.sh\n# Running multiple processes on an SMP box.\n# Author: Tedman Eng\n\n#  This is the first of two scripts,\n#+ both of which must be present in the current working directory.\n\n\n\n\nLIMIT=$1         # Total number of process to start\nNUMPROC=4        # Number of concurrent threads (forks?)\nPROCID=1         # Starting Process ID\necho &quot;My PID is $$&quot;\n\nfunction start_thread() {\n        if [ $PROCID -le $LIMIT ] ; then\n                ./child.sh $PROCID&amp;\n                let &quot;PROCID++&quot;\n        else\n           echo &quot;Limit reached.&quot;\n           wait\n           exit\n        fi\n}\n\nwhile [ &quot;$NUMPROC&quot; -gt 0 ]; do\n        start_thread;\n        let &quot;NUMPROC--&quot;\ndone\n\n\nwhile true\ndo\n\ntrap &quot;start_thread&quot; SIGRTMIN\n\ndone\n\nexit 0\n\n\n\n# ======== Second script follows ========\n\n\n#!/bin/bash\n# child.sh\n# Running multiple processes on an SMP box.\n# This script is called by parent.sh.\n# Author: Tedman Eng\n\ntemp=$RANDOM\nindex=$1\nshift\nlet &quot;temp %= 5&quot;\nlet &quot;temp += 4&quot;\necho &quot;Starting $index  Time:$temp&quot; &quot;$@&quot;\nsleep ${temp}\necho &quot;Ending $index&quot;\nkill -s SIGRTMIN $PPID\n\nexit 0\n\n\n# ======================= SCRIPT AUTHOR&#39;S NOTES ======================= #\n#  It&#39;s not completely bug free.\n#  I ran it with limit = 500 and after the first few hundred iterations,\n#+ one of the concurrent threads disappeared!\n#  Not sure if this is collisions from trap signals or something else.\n#  Once the trap is received, there&#39;s a brief moment while executing the\n#+ trap handler but before the next trap is set.  During this time, it may\n#+ be possible to miss a trap signal, thus miss spawning a child process.\n\n#  No doubt someone may spot the bug and will be writing \n#+ . . . in the future.\n\n\n\n# ===================================================================== #\n\n\n\n# ----------------------------------------------------------------------#\n\n\n\n#################################################################\n# The following is the original script written by Vernia Damiano.\n# Unfortunately, it doesn&#39;t work properly.\n#################################################################\n\n#!/bin/bash\n\n#  Must call script with at least one integer parameter\n#+ (number of concurrent processes).\n#  All other parameters are passed through to the processes started.\n\n\nINDICE=8        # Total number of process to start\nTEMPO=5         # Maximum sleep time per process\nE_BADARGS=65    # No arg(s) passed to script.\n\nif [ $# -eq 0 ] # Check for at least one argument passed to script.\nthen\n  echo &quot;Usage: `basename $0` number_of_processes [passed params]&quot;\n  exit $E_BADARGS\nfi\n\nNUMPROC=$1              # Number of concurrent process\nshift\nPARAMETRI=( &quot;$@&quot; )      # Parameters of each process\n\nfunction avvia() {\n         local temp\n         local index\n         temp=$RANDOM\n         index=$1\n         shift\n         let &quot;temp %= $TEMPO&quot;\n         let &quot;temp += 1&quot;\n         echo &quot;Starting $index Time:$temp&quot; &quot;$@&quot;\n         sleep ${temp}\n         echo &quot;Ending $index&quot;\n         kill -s SIGRTMIN $$\n}\n\nfunction parti() {\n         if [ $INDICE -gt 0 ] ; then\n              avvia $INDICE &quot;${PARAMETRI[@]}&quot; &amp;\n                let &quot;INDICE--&quot;\n         else\n                trap : SIGRTMIN\n         fi\n}\n\ntrap parti SIGRTMIN\n\nwhile [ &quot;$NUMPROC&quot; -gt 0 ]; do\n         parti;\n         let &quot;NUMPROC--&quot;\ndone\n\nwait\ntrap - SIGRTMIN\n\nexit $?\n\n: &lt;&lt;SCRIPT_AUTHOR_COMMENTS\nI had the need to run a program, with specified options, on a number of\ndifferent files, using a SMP machine. So I thought [I&#39;d] keep running\na specified number of processes and start a new one each time . . . one\nof these terminates.\n\nThe &quot;wait&quot; instruction does not help, since it waits for a given process\nor *all* process started in background. So I wrote [this] bash script\nthat can do the job, using the &quot;trap&quot; instruction.\n  --Vernia Damiano\nSCRIPT_AUTHOR_COMMENTS\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br></div></div><p>Note\t\ntrap '' SIGNAL (two adjacent apostrophes) disables SIGNAL for the remainder of the script. trap SIGNAL restores the functioning of SIGNAL once more. This is useful to protect a critical portion of a script from an undesirable interrupt.</p>\n<div><pre><code>trap &#39;&#39; 2  # Signal 2 is Control-C, now disabled.\ncommand\ncommand\ncommand\ntrap 2     # Reenables Control-C\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "33 选项",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/33_options/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/33_options/",
      "content_html": "<h1 id=\"_33-选项\"> 33 选项</h1>\n<p>选项用来更改shell和脚本的行为.</p>\n<p><a href=\"http://tldp.org/LDP/abs/html/internal.html#SETREF\" target=\"_blank\" rel=\"noopener noreferrer\">set</a>命令用来打开脚本中的选项. 你可以在脚本中任何你想让选项生效的地方插入<strong>set -o option-name</strong>, 或者使用更简单的形式, <strong>set -option-abbrev</strong>. 这两种形式是等价的.</p>\n<div><pre><code>#!/bin/bash\n\nset -o verbose\n# # 打印出所有执行前的命令.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code>#!/bin/bash\n\nset -v\n# 与上边的例子具有相同的效果.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><img src=\"http://tldp.org/LDP/abs/images/note.gif\" alt=\"extra\"> 如果你想在脚本中禁用某个选项, 可以使用<strong>set +o option-name</strong>或<strong>set +option-abbrev</strong>.</p>\n<div><pre><code>#!/bin/bash\nset -o verbose\n# 激活命令回显.\ncommand\n...\ncommand\n\nset +o verbose\n# 禁用命令回显.\ncommand\n# 没有命令回显了.\n\nset -v\n# 激活命令回显.\ncommand\n...\ncommand\n\nset +v\n# 禁用命令回显.\ncommand\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>还有另一种可以在脚本中启用选项的方法, 那就是在脚本头部, #!的后边直接指定选项.</p>\n<div><pre><code>#!/bin/bash -x\n#\n# 下边是脚本的主要内容.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>也可以从命令行中打开脚本的选项. 某些不能与<strong>set</strong>命令一起用的选项就可以使用这种方法来打开. - i就是其中之一, 这个选项用来强制脚本以交互的方式运行.</p>\n<p><strong>bash - v script - name</strong></p>\n<p><strong>bash - o verbose script - name</strong></p>\n<p>下表列出了一些有用的选项. 它们都可以使用缩写的形式来指定(开头加一个破折号), 也可以使用完整名字来指定(开头加上双破折号, 或者使用-o选项来指定).</p>\n<p>表格 33-1. Bash选项</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">缩写</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-B</td>\n<td style=\"text-align:left\">brace expansion</td>\n<td style=\"text-align:left\">开启<a href=\"\">大括号展开</a>(默认 setting = on)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+B</td>\n<td style=\"text-align:left\">brace expansion</td>\n<td style=\"text-align:left\">关闭大括号展开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-C</td>\n<td style=\"text-align:left\">noclobber</td>\n<td style=\"text-align:left\">防止重定向时覆盖文件(可能会被&gt;|覆盖)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-D</td>\n<td style=\"text-align:left\">(none)</td>\n<td style=\"text-align:left\">列出用双引号引用起来的, 以$为前缀的字符串, 但是不执行脚本中的命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-a</td>\n<td style=\"text-align:left\">all export</td>\n<td style=\"text-align:left\">export(导出)所有定义过的变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-b</td>\n<td style=\"text-align:left\">notify</td>\n<td style=\"text-align:left\">当后台运行的作业终止时, 给出通知(脚本中并不常见)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-c ...</td>\n<td style=\"text-align:left\">(none)</td>\n<td style=\"text-align:left\">从...中读取命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">checkjobs</td>\n<td style=\"text-align:left\">(none)</td>\n<td style=\"text-align:left\">通知有活跃shell<a href=\"http://tldp.org/LDP/abs/html/x9644.html#JOBSREF\" target=\"_blank\" rel=\"noopener noreferrer\">任务</a>的用户退出。<a href=\"http://tldp.org/LDP/abs/html/bashver4.html#BASH4REF\" target=\"_blank\" rel=\"noopener noreferrer\">Bash 4</a>版本中引入，仍然处于&quot;实验&quot;阶段. 用法:shopt -s checkjobs .(注意：可能会hang！</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-e</td>\n<td style=\"text-align:left\">errexit</td>\n<td style=\"text-align:left\">当脚本发生第一个错误时, 就退出脚本, 换种说法就是, 当一个命令返回非零值时, 就退出脚本(除了<a href=\"http://tldp.org/LDP/abs/html/loops1.html#UNTILLOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\">until</a>或<a href=\"http://tldp.org/LDP/abs/html/loops1.html#WHILELOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\">while loops</a>, <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#TESTCONSTRUCTS1\" target=\"_blank\" rel=\"noopener noreferrer\">if-tests</a>, <a href=\"http://tldp.org/LDP/abs/html/list-cons.html#LCONS1\" target=\"_blank\" rel=\"noopener noreferrer\">list constructs</a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-f</td>\n<td style=\"text-align:left\">noglob</td>\n<td style=\"text-align:left\">禁用文件名扩展(就是禁用globbing)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">globstar</td>\n<td style=\"text-align:left\"><a href=\"http://tldp.org/LDP/abs/html/bashver4.html#GLOBSTARREF\" target=\"_blank\" rel=\"noopener noreferrer\">globbing star-match</a></td>\n<td style=\"text-align:left\">打开<a href=\"http://tldp.org/LDP/abs/html/globbingref.html\" target=\"_blank\" rel=\"noopener noreferrer\">globbling</a>操作符(Bash <a href=\"http://tldp.org/LDP/abs/html/bashver4.html#BASH4REF\" target=\"_blank\" rel=\"noopener noreferrer\">4+</a>). 使用方法：shopt -s globstar</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-i</td>\n<td style=\"text-align:left\">interactive</td>\n<td style=\"text-align:left\">让脚本以交互模式运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-n</td>\n<td style=\"text-align:left\">noexec</td>\n<td style=\"text-align:left\">从脚本中读取命令, 但是不执行它们(做语法检查)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-o Option-Name</td>\n<td style=\"text-align:left\">(none)</td>\n<td style=\"text-align:left\">调用Option-Name选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-o posix</td>\n<td style=\"text-align:left\">POSIX</td>\n<td style=\"text-align:left\">修改Bash或被调用脚本的行为, 使其符合<a href=\"http://tldp.org/LDP/abs/html/sha-bang.html#POSIX2REF\" target=\"_blank\" rel=\"noopener noreferrer\">POSIX</a>标准.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-o pipefail</td>\n<td style=\"text-align:left\">pipe failure</td>\n<td style=\"text-align:left\">创建一个管道去返回最后一条命令的<a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态码</a>，这个返回值是一个非0的返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-p</td>\n<td style=\"text-align:left\">privileged</td>\n<td style=\"text-align:left\">以&quot;suid&quot;身份来运行脚本(小心!)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-r</td>\n<td style=\"text-align:left\">restricted</td>\n<td style=\"text-align:left\">以受限模式来运行脚本(参考 <a href=\"http://tldp.org/LDP/abs/html/restricted-sh.html\" target=\"_blank\" rel=\"noopener noreferrer\">22</a>).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-s</td>\n<td style=\"text-align:left\">stdin</td>\n<td style=\"text-align:left\">从stdin 中读取命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-t</td>\n<td style=\"text-align:left\">(none)</td>\n<td style=\"text-align:left\">执行完第一个命令之后, 就退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-u</td>\n<td style=\"text-align:left\">nounset</td>\n<td style=\"text-align:left\">如果尝试使用了未定义的变量, 就会输出一个错误消息, 然后强制退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-v</td>\n<td style=\"text-align:left\">verbose</td>\n<td style=\"text-align:left\">在执行每个命令之前, 把每个命令打印到stdout上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-x</td>\n<td style=\"text-align:left\">xtrace</td>\n<td style=\"text-align:left\">与-v选项类似, 但是会打印完整命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">(none)</td>\n<td style=\"text-align:left\">选项结束标志. 后面的参数为<a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#POSPARAMREF\" target=\"_blank\" rel=\"noopener noreferrer\">位置参数</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">--</td>\n<td style=\"text-align:left\">(none)</td>\n<td style=\"text-align:left\">unset(释放)位置参数. 如果指定了参数列表(-- arg1 arg2), 那么位置 参数将会依次设置到参数列表中.</td>\n</tr>\n</tbody>\n</table>\n",
      "image": "http://tldp.org/LDP/abs/images/note.gif",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第34章 陷阱",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/34_Gotchas/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/34_Gotchas/",
      "content_html": "<p># 第34章 陷阱</p>\n<blockquote>\n<p>Turandot: Gli enigmi sono tre, la morte una!\nCaleph: No, no! Gli enigmi sono tre, una la vita!</p>\n</blockquote>\n<blockquote>\n<p>——Puccini</p>\n</blockquote>\n<h3 id=\"以下的做法-非推荐-将让你原本平淡无奇的生活激动不已。\"> 以下的做法（非推荐）将让你原本平淡无奇的生活激动不已。</h3>\n<ul>\n<li>将保留字或特殊字符声明为变量名。</li>\n</ul>\n<div><pre><code><span>case</span><span>=</span>value0       <span># 引发错误。</span>\n<span>23skidoo</span><span>=</span>value1   <span># 也会引发错误。</span>\n<span># 以数字开头的变量名是被shell保留使用的。</span>\n<span># 试试_23skidoo=value1。以下划线开头的变量名就没问题.</span>\n\n<span># 然而 . . .   只用一个下划线作为变量名就不行。</span>\n<span>_</span><span>=</span><span>25</span>\n<span>echo</span> <span>$_</span>           <span># $_是一个特殊变量, 代表最后一个命令的最后一个参数。</span>\n<span># 但是，_是一个有效的函数名！</span>\n\nxyz<span>((</span><span>!</span>*<span>=</span>value2    <span># 引起严重的错误。</span>\n<span># Bash3.0之后，标点不能出现在变量名中。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>\n<li>使用连字符或其他保留字符来做变量名（或函数名）。</li>\n</ul>\n<div><pre><code>var-1<span>=</span><span>23</span>\n<span># 用 'var_1 代替。</span>\n\nfunction-whatever <span>(</span><span>)</span>   <span># 错误</span>\n<span># 用 ‘function_whatever ()’ 代替。</span>\n\n \n<span># Bash3.0之后，标点不能出现在函数名中。</span>\nfunction.whatever <span>(</span><span>)</span>   <span># 错误</span>\n<span># 用 ‘functionWhatever ()’ 代替。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>\n<li>让变量名与函数名相同。 这会使得脚本的可读性变得很差。</li>\n</ul>\n<div><pre><code><span>do_something</span> <span>(</span><span>)</span>\n<span>{</span>\n  <span>echo</span> <span>\"This function does something with <span title=\"\\&quot;\">\\\"</span><span>$1</span><span title=\"\\&quot;\">\\\"</span>.\"</span>\n<span>}</span>\n\n<span>do_something</span><span>=</span>do_something\n\ndo_something do_something\n\n<span># 这么做是合法的，但会让人混淆。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>\n<li>不合时宜的使用[空白符][1]。与其他编程语言相比，Bash非常讲究空白符的使用。</li>\n</ul>\n<div><pre><code>var1 <span>=</span> <span>23</span>   <span># ‘var1=23’才是正确的。</span>\n<span># 对于上边这一行来说，Bash会把“var1”当作命令来执行，</span>\n<span># “=”和“23”会被看作“命令”“var1”的参数。</span>\n\t\n<span>let</span> c <span>=</span> <span>$a</span> - <span>$b</span>   <span># ‘let c=$a-$b’或‘let \"c = $a - $b\"’才是正确的。</span>\n\n<span>if</span> <span>[</span> <span>$a</span> -le <span>5</span><span>]</span>    <span># if [ $a -le 5 ]   是正确的。</span>\n<span>#           ^^      if [ \"$a\" -le 5 ]   这么写更好。</span>\n                  <span># [[ $a -le 5 ]] 也行。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>\n<li>在[大括号包含的代码块][2]中，最后一条命令没有以[分号][3]结尾。</li>\n</ul>\n<div><pre><code><span>{</span> <span>ls</span> -l<span>;</span> <span>df</span><span>;</span> <span>echo</span> <span>\"Done.\"</span> <span>}</span>\n<span># bash: syntax error: unexpected end of file</span>\n\n<span>{</span> <span>ls</span> -l<span>;</span> <span>df</span><span>;</span> <span>echo</span> <span>\"Done.\"</span><span>;</span> <span>}</span>\n<span>#                        ^     ### 最后的这条命令必须以分号结尾。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>\n<li>假定未被初始化的变量（赋值前的变量）被“清0”。事实上，未初始化的变量值为“null”，而不是0。</li>\n</ul>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>echo</span> <span>\"uninitialized_var = <span>$uninitialized_var</span>\"</span>\n<span># uninitialized_var =</span>\n\n<span># 但是 . . .</span>\n<span># if $BASH_VERSION ≥ 4.2; then</span>\n\n<span>if</span> <span>[</span><span>[</span> <span>!</span> -v uninitialized_var <span>]</span><span>]</span>\n<span>then</span>\n  <span>uninitialized_var</span><span>=</span><span>0</span>   <span># Initialize it to zero!</span>\n<span>fi</span>\n\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><ul>\n<li>混淆测试符号=和-ep。请记住，=用于比较字符变量，而-ep用来比较整数。</li>\n</ul>\n<div><pre><code><span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> <span>=</span> <span>273</span> <span>]</span>      <span># $a是整数还是字符串？</span>\n<span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -eq <span>273</span> <span>]</span>    <span># $a为整数。</span>\n\n<span># 有些情况下，即使你混用-ep和=，也不会产生错误的结果。</span>\n<span># 然而 . . .</span>\n\n\n<span>a</span><span>=</span><span>273.0</span>   <span># 不是一个整数。</span>\n\t   \n<span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> <span>=</span> <span>273</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"Comparison works.\"</span>\n<span>else</span>  \n  <span>echo</span> <span>\"Comparison does not work.\"</span>\n<span>fi</span>    <span># Comparison does not work.</span>\n\n<span># 与a=\" 273\"和a=\"0273\"相同。</span>\n\n\n<span># 类似的， 如果对非整数值使用“-ep”的话，就会产生问题。</span>\n\t   \n<span>if</span> <span>[</span> <span>\"<span>$a</span>\"</span> -eq <span>273.0</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"a = <span>$a</span>\"</span>\n<span>fi</span>  <span># 产生了错误消息而退出。</span>\n<span># test.sh: [: 273.0: integer expression expected</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><ul>\n<li>误用了[字符串比较][4]操作符。</li>\n</ul>\n<p>样例 34-1. 数字比较与字符串比较并不相同</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># bad-op.sh: 尝试一下对整数使用字符串比较。</span>\n\n<span>echo</span>\n<span>number</span><span>=</span><span>1</span>\n\n<span>#  下面的\"while循环\"有两个过错误:</span>\n<span>#+ 一个比较明显，而另一个比较隐蔽。</span>\n\n<span>while</span> <span>[</span> <span>\"<span>$number</span>\"</span> <span>&lt;</span> <span>5</span> <span>]</span>    <span># 错！应该是:  while [ \"$number\" -lt 5 ]</span>\n<span>do</span>\n  <span>echo</span> -n <span>\"<span>$number</span> \"</span>\n  <span>let</span> <span>\"number += 1\"</span>\n<span>done</span>  \n<span>#  如果试图运行这个错误的脚本，就会得到一个错误信息:</span>\n<span>#+ bad-op.sh: line 10: 5: No such file or directory</span>\n<span>#  在单中括号结构（[ ]）中，\"&lt;\"必须被转义，</span>\n<span>#+ 即便如此，比较两个整数仍是错误的。</span>\n\n<span>echo</span> <span>\"---------------------\"</span>\n\n<span>while</span> <span>[</span> <span>\"<span>$number</span>\"</span> <span>\\</span><span>&lt;</span> <span>5</span> <span>]</span>    <span>#  1 2 3 4</span>\n<span>do</span>                          <span>#</span>\n  <span>echo</span> -n <span>\"<span>$number</span> \"</span>        <span>#  看起来好像可以工作，但是 . . .</span>\n  <span>let</span> <span>\"number += 1\"</span>         <span>#+ 事实上是比较ASCII码，</span>\n  <span>done</span>                      <span>#+ 而不是整数比较。</span>\n\n<span>echo</span><span>;</span> <span>echo</span> <span>\"---------------------\"</span>\n\n<span># 这么做会产生问题。比如:</span>\n\n<span>lesser</span><span>=</span><span>5</span>\n<span>greater</span><span>=</span><span>105</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$greater</span>\"</span> <span>\\</span><span>&lt;</span> <span>\"<span>$lesser</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"<span>$greater</span> is less than <span>$lesser</span>\"</span>\n<span>fi</span>                          <span># 105 is less than 5</span>\n<span>#  事实上，在字符串比较中（按照ASCII码的顺序）</span>\n<span>#+ \"105\"小于\"5\"。</span>\n\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><ul>\n<li>试图用[let][5]来设置字符串变量。</li>\n</ul>\n<div><pre><code><span>let</span> <span>\"a = hello, you\"</span>\n<span>echo</span> <span>\"<span>$a</span>\"</span>   <span># 0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ul>\n<li>\n<p>有时候在“test”中括号（[ ]）结构里的变量需要被引用起来（双引号）。如果不这么做的话，可能会引起不可预料的结果。请参考[例子 7-6][6]，[例子 16-5][7]，[例子 9-6][8]。</p>\n</li>\n<li>\n<p>[为防分隔][9]，用双引号引用一个包含空白符的变量。 有些情况下，这会产生[意想不到的后果][10]。</p>\n</li>\n<li>\n<p>脚本中的命令可能会因为脚本宿主不具备相应的运行权限而导致运行失败。如果用户在命令行中不能调用这个命令的话，那么即使把它放到脚本中来运行，也还是会失败。这时可以通过修改命令的属性来解决这个问题，有时候甚至要给它设置suid位(当然, 要以root身份来设置)。</p>\n</li>\n<li>\n<p>试图使用-作为作为重定向操作符（事实上它不是），通常都会导致令人不快的结果。</p>\n</li>\n</ul>\n<div><pre><code>command1 <span><span>2</span>></span> - <span>|</span> command2\n<span># 试图将command1的错误输出重定向到一个管道中 . . .</span>\n<span># . . . 不会工作。</span>\n\ncommand1 <span><span>2</span>>&amp;</span> - <span>|</span> command2  <span># 也没效果。</span>\n\n感谢，S.C。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>\n<li>使用[Bash 2.0或更高版本][11]的功能，可以在产生错误信息的时候，引发修复动作。但是比较老的Linux机器默认安装的可能是Bash 1.XX。</li>\n</ul>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>minimum_version</span><span>=</span><span>2</span>\n<span># 因为Chet Ramey经常给Bash添加一些新的特征，</span>\n<span># 所以你最好将$minimum_version设置为2.XX，3.XX，或是其他你认为比较合适的值。</span>\n<span>E_BAD_VERSION</span><span>=</span><span>80</span>\n\n<span>if</span> <span>[</span> <span>\"<span>$BASH_VERSION</span>\"</span> <span>\\</span><span>&lt;</span> <span>\"<span>$minimum_version</span>\"</span> <span>]</span>\n<span>then</span>\n  <span>echo</span> <span>\"This script works only with Bash, version <span>$minimum</span> or greater.\"</span>\n  <span>echo</span> <span>\"Upgrade strongly recommended.\"</span>\n  <span>exit</span> <span>$E_BAD_VERSION</span>\n<span>fi</span>\n\n<span>..</span>.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ul>\n<li>\n<p>在非Linux机器上的[Bourne shell][12]脚本( <strong>#!/bin/sh</strong> )中使用Bash特有的功能，[可能会引起不可预料的行为][13]。Linux系统通常都会把<strong>bash</strong>别名化为<strong>sh</strong>，但是在一般的UNIX机器上却不一定会这么做。</p>\n</li>\n<li>\n<p>使用Bash未文档化的特征，将是一种危险的举动。本书之前的几个版本就依赖一个这种“特征”，下面说明一下这个“特征”，虽然[exit][14]或[return][15]所能返回的最大正值为255，但是并没有限制我们使用负整数。不幸的是, Bash 2.05b之后的版本，这个漏洞消失了。请参考[例子 24-9][16]。</p>\n</li>\n<li>\n<p>在某些情况下，会返回一个误导性的[退出状态][17]。[设置一个函数内的局部变量][18]或[分配一个算术值给一个变量][19]时，就有可能发生这种情况。</p>\n</li>\n<li>\n<p>[算术表达式的退出状态][20]不等同于一个错误代码。</p>\n</li>\n</ul>\n<div><pre><code><span>var</span><span>=</span><span>1</span> <span>&amp;&amp;</span> <span><span>((</span><span>--</span>var<span>))</span></span> <span>&amp;&amp;</span> <span>echo</span> <span>$var</span>\n<span>#        ^^^^^^^^^ 在这里，这个与列表返回错误代码1而终止。</span>\n<span>#                     不会打印$var的值！</span>\n<span>echo</span> <span>$?</span>   <span># 1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>\n<li>一个带有DOS风格换行符(\\r\\n)的脚本将会运行失败，因为**#!/bin/bash\\r\\n<strong>是不合法的，与我们所期望的</strong>#!/bin/bash\\n**不同，解决办法就是将这个脚本转换为UNIX风格的换行符。</li>\n</ul>\n<div><pre><code><span>#!/bin/bash</span>\n\n<span>echo</span> <span>\"Here\"</span>\n\nunix2dos <span>$0</span>    <span># 脚本先将自己改为DOS格式。</span>\n<span>chmod</span> <span>755</span> <span>$0</span>   <span># 更改可执行权限。</span>\n               <span># 'unix2dos'会删除可执行权限</span>\n\n./<span>$0</span>           <span># 脚本尝试再次运行自己。</span>\n               <span># 但它作为一个DOS文件，已经不能运行了。</span>\n\n<span>echo</span> <span>\"There\"</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><ul>\n<li>\n<p>以**#!/bin/sh<strong>开头的Bash脚本，不能在完整的Bash兼容模式下运行。某些Bash特定的功能可能会被禁用。如果脚本需要完整的访问所有Bash专有扩展，那么它需要使用</strong>#!/bin/bash**作为开头。</p>\n</li>\n<li>\n<p>如果在[here document][21]中，[结尾的limit string之前加上空白字符][22]的话，将会导致脚本的异常行为。</p>\n</li>\n<li>\n<p>在一个[输出被捕获][23]的函数中放置了不止一个echo语句。</p>\n</li>\n</ul>\n<div><pre><code><span>add2</span> <span>(</span><span>)</span>\n<span>{</span>\n  <span>echo</span> <span>\"Whatever ... \"</span>   <span># 删掉zhehan</span>\n  <span>let</span> <span>\"retval = <span>$1</span> + <span>$2</span>\"</span>\n    <span>echo</span> <span>$retval</span>\n    <span>}</span>\n\n    <span>num1</span><span>=</span><span>12</span>\n    <span>num2</span><span>=</span><span>43</span>\n    <span>echo</span> <span>\"Sum of <span>$num1</span> and <span>$num2</span> = <span><span>$(</span>add2 $num1 $num2<span>)</span></span>\"</span>\n\n<span>#   Sum of 12 and 43 = Whatever ... </span>\n<span>#   55</span>\n\n<span>#        这些echo连在一起了。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>这是[行不通][24]的。</p>\n<ul>\n<li>脚本不能将变量export到它的[父进程]<a href=\"%E5%8D%B3%E8%B0%83%E7%94%A8%E8%BF%99%E4%B8%AA%E8%84%9A%E6%9C%AC%E7%9A%84shell\">25</a>，或父进程的环境中。就好比我们在生物学中所学到的那样，子进程只会继承父进程, 反过来则不行。</li>\n</ul>\n<div><pre><code><span>WHATEVER</span><span>=</span>/home/bozo\n<span>export</span> WHATEVER\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code>bash$ <span>echo</span> <span>$WHATEVER</span>\nbash$\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ul>\n<li>\n<p>可以确定的是，即使回到命令行提示符，变量$WHATEVER仍然没有被设置。</p>\n</li>\n<li>\n<p>在[子shell][26]中设置和操作变量之后，如果尝试在子shell作用域之外使用同名变量的话, 将会产生令人不快的结果。</p>\n</li>\n</ul>\n<p>样例 34-2. 子shell缺陷</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 子shell中的变量缺陷。</span>\n\n<span>outer_variable</span><span>=</span>outer\n<span>echo</span>\n<span>echo</span> <span>\"outer_variable = <span>$outer_variable</span>\"</span>\n<span>echo</span>\n\n<span>(</span>\n<span># 开始子shell</span>\n\n<span>echo</span> <span>\"outer_variable inside subshell = <span>$outer_variable</span>\"</span>\n<span>inner_variable</span><span>=</span>inner  <span># Set</span>\n<span>echo</span> <span>\"inner_variable inside subshell = <span>$inner_variable</span>\"</span>\n<span>outer_variable</span><span>=</span>inner  <span># 会修改全局变量吗？</span>\n<span>echo</span> <span>\"outer_variable inside subshell = <span>$outer_variable</span>\"</span>\n\n<span># 如果将变量‘导出’会产生不同的结果么？</span>\n<span>#    export inner_variable</span>\n<span>#    export outer_variable</span>\n<span># 试试看。</span>\n\n<span># 结束子shell</span>\n<span>)</span>\n\n<span>echo</span>\n<span>echo</span> <span>\"inner_variable outside subshell = <span>$inner_variable</span>\"</span>  <span># Unset.</span>\n<span>echo</span> <span>\"outer_variable outside subshell = <span>$outer_variable</span>\"</span>  <span># Unchanged.</span>\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n\n<span># 如果你去掉第19和第20行的注释会怎样？</span>\n<span># 会产生不同的结果吗？</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><ul>\n<li>将echo的输出通过[管道][27]传递给[read][28]命令可能会产生不可预料的结果。在这种情况下，read命令的行为就好像它在子shell中运行一样。可以使用[set][29]命令来代替(就好像[例子15-18][30]一样)。</li>\n</ul>\n<p>样例 34-3. 将echo的输出通过管道传递给read命令</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span>#  badread.sh:</span>\n<span>#  尝试使用'echo'和'read'命令</span>\n<span>#+ 非交互的给变量赋值。</span>\n\n<span>#   shopt -s lastpipe</span>\n\n<span>a</span><span>=</span>aaa\n<span>b</span><span>=</span>bbb\n<span>c</span><span>=</span>ccc\n\n<span>echo</span> <span>\"one two three\"</span> <span>|</span> <span>read</span> a b c\n<span># 尝试重新给变量a，b，和c赋值。</span>\n\n<span>echo</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>  <span># a = aaa</span>\n<span>echo</span> <span>\"b = <span>$b</span>\"</span>  <span># b = bbb</span>\n<span>echo</span> <span>\"c = <span>$c</span>\"</span>  <span># c = ccc</span>\n<span># 重新赋值失败。</span>\n\n<span>### 但如果 . . .</span>\n<span>##  去掉第6行的注释:</span>\n<span>#   shopt -s lastpipe</span>\n<span>##+ 就能解决这个问题！</span>\n<span>### 这是Bash 4.2版本的新特性。</span>\n\n<span># ------------------------------</span>\n\n<span># 试试下边这种方法。</span>\n\n<span>var</span><span>=</span><span><span>`</span><span>echo</span> <span>\"one two three\"</span><span>`</span></span>\n<span>set</span> -- <span>$var</span>\n<span>a</span><span>=</span><span>$1</span><span>;</span> <span>b</span><span>=</span><span>$2</span><span>;</span> <span>c</span><span>=</span><span>$3</span>\n\n<span>echo</span> <span>\"-------\"</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>  <span># a = one</span>\n<span>echo</span> <span>\"b = <span>$b</span>\"</span>  <span># b = two</span>\n<span>echo</span> <span>\"c = <span>$c</span>\"</span>  <span># c = three </span>\n<span># 重新赋值成功。</span>\n\n<span># ------------------------------</span>\n\n<span>#  也请注意，echo到'read'的值只会在子shell中起作用。</span>\n<span>#  所以，变量的值*只*会在子shell中被修改。</span>\n\n<span>a</span><span>=</span>aaa          <span># 重新开始。</span>\n<span>b</span><span>=</span>bbb\n<span>c</span><span>=</span>ccc\n\n<span>echo</span><span>;</span> <span>echo</span>\n<span>echo</span> <span>\"one two three\"</span> <span>|</span> <span>(</span> <span>read</span> a b c<span>;</span>\n<span>echo</span> <span>\"Inside subshell: \"</span><span>;</span> <span>echo</span> <span>\"a = <span>$a</span>\"</span><span>;</span> <span>echo</span> <span>\"b = <span>$b</span>\"</span><span>;</span> <span>echo</span> <span>\"c = <span>$c</span>\"</span> <span>)</span>\n<span># a = one</span>\n<span># b = two</span>\n<span># c = three</span>\n<span>echo</span> <span>\"-----------------\"</span>\n<span>echo</span> <span>\"Outside subshell: \"</span>\n<span>echo</span> <span>\"a = <span>$a</span>\"</span>  <span># a = aaa</span>\n<span>echo</span> <span>\"b = <span>$b</span>\"</span>  <span># b = bbb</span>\n<span>echo</span> <span>\"c = <span>$c</span>\"</span>  <span># c = ccc</span>\n<span>echo</span>\n\n<span>exit</span> <span>0</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br></div></div><p>事实上，也正如Anthony Richardson指出的那样，通过管道将输出传递到任何循环中, 都会引起类似的问题。</p>\n<div><pre><code><span># 循环的管道问题。</span>\n<span>#  这个例子由Anthony Richardson编写，</span>\n<span>#+ 由Wilbert Berendsen补遗。</span>\n\n\n<span>foundone</span><span>=</span>false\n<span>find</span> <span>$HOME</span> -type f -atime +30 -size 100k <span>|</span>\n<span>while</span> <span>true</span>\n<span>do</span>\n   <span>read</span> f\n   <span>echo</span> <span>\"<span>$f</span> is over 100KB and has not been accessed in over 30 days\"</span>\n   <span>echo</span> <span>\"Consider moving the file to archives.\"</span>\n   <span>foundone</span><span>=</span>true\n   <span># ------------------------------------</span>\n     <span>echo</span> <span>\"Subshell level = <span>$BASH_SUBSHELL</span>\"</span>\n   <span># Subshell level = 1</span>\n   <span># 没错, 现在是在子shell中运行。</span>\n   <span># ------------------------------------</span>\n<span>done</span>\n   \n<span>#  变量foundone在这里肯定是false，</span>\n<span>#+ 因为它是在子shell中被设置为true的。</span>\n<span>if</span> <span>[</span> <span>$foundone</span> <span>=</span> <span>false</span> <span>]</span>\n<span>then</span>\n   <span>echo</span> <span>\"No files need archiving.\"</span>\n<span>fi</span>\n\n<span># =====================现在，下边是正确的方法:=================</span>\n\n<span>foundone</span><span>=</span>false\n<span>for</span> <span>f</span> <span>in</span> <span><span>$(</span><span>find</span> <span>$HOME</span> -type f -atime +30 -size 100k<span>)</span></span>  <span># 这里没使用管道。</span>\n<span>do</span>\n   <span>echo</span> <span>\"<span>$f</span> is over 100KB and has not been accessed in over 30 days\"</span>\n   <span>echo</span> <span>\"Consider moving the file to archives.\"</span>\n   <span>foundone</span><span>=</span>true\n<span>done</span>\n   \n<span>if</span> <span>[</span> <span>$foundone</span> <span>=</span> <span>false</span> <span>]</span>\n<span>then</span>\n   <span>echo</span> <span>\"No files need archiving.\"</span>\n<span>fi</span>\n\n<span># ==================这里是另一种方法==================</span>\n\n<span>#  将脚本中读取变量的部分放到一个代码块中，</span>\n<span>#+ 这样一来，它们就能在相同的子shell中共享了。</span>\n<span>#  感谢，W.B。</span>\n\n<span>find</span> <span>$HOME</span> -type f -atime +30 -size 100k <span>|</span> <span>{</span>\n     <span>foundone</span><span>=</span>false\n     <span>while</span> <span>read</span> f\n     <span>do</span>\n       <span>echo</span> <span>\"<span>$f</span> is over 100KB and has not been accessed in over 30 days\"</span>\n       <span>echo</span> <span>\"Consider moving the file to archives.\"</span>\n       <span>foundone</span><span>=</span>true\n     <span>done</span>\n\n     <span>if</span> <span>!</span> <span>$foundone</span>\n     <span>then</span>\n       <span>echo</span> <span>\"No files need archiving.\"</span>\n     <span>fi</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><ul>\n<li>一个相关的问题：当你尝试将tail -f的stdout通过管道传递给[grep][31]时，会产生问题。</li>\n</ul>\n<div><pre><code><span>tail</span> -f /var/log/messages <span>|</span> <span>grep</span> <span>\"<span>$ERROR_MSG</span>\"</span> <span>>></span> error.log\n<span>#  “error.log”文件将不会写入任何东西。</span>\n<span>#  正如Samuli Kaipiainen指出的那样，</span>\n<span>#+ 这一结果是从grep的缓冲区输出的。</span>\n<span>#  解决的办法就是把“--line-buffered”参数添加到grep中。</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>\n<li>\n<p>在脚本中使用“suid”命令是非常危险的，因为这会危及系统安全。<sup></sup></p>\n</li>\n<li>\n<p>使用shell脚本来编写CGI程序是值得商榷的。因为Shell脚本的变量不是“类型安全”的，当CGI被关联的时候，可能会产生令人不快的行为。此外，它还很难抵挡住“破解的考验”。</p>\n</li>\n<li>\n<p>Bash不能正确地处理[双斜线(//)字符串][32]。</p>\n</li>\n<li>\n<p>在Linux或BSD上编写的Bash脚本，可能需要修改一下，才能使它们运行在商业的UNIX机器上。这些脚本通常都使用GNU命令和过滤工具，GNU工具通常都比一般的UNIX上的同类工具更加强大。这方面的一个非常明显的例子就是，文本处理工具[tr][33]。</p>\n</li>\n<li>\n<p>遗憾的是，更新Bash本身就会破坏[过去工作完全正常][34]的脚本。让我们回顾一下[使用无正式文件的Bash功能有多危险][35]。</p>\n</li>\n</ul>\n<blockquote>\n<p>危险正在接近你 --\n小心，小心，小心，小心。\n许多勇敢的心都在沉睡。\n所以一定要小心 --\n小心。</p>\n</blockquote>\n<blockquote>\n<p>——A.J. Lamb and H.W. Petrie\n[1]: http://tldp.org/LDP/abs/html/special-chars.html#WHITESPACEREF\n[2]: http://tldp.org/LDP/abs/html/special-chars.html#CODEBLOCKREF\n[3]: http://tldp.org/LDP/abs/html/special-chars.html#SEMICOLONREF\n[4]: http://tldp.org/LDP/abs/html/comparison-ops.html#SCOMPARISON1\n[5]: http://tldp.org/LDP/abs/html/internal.html#LETREF\n[6]: http://tldp.org/LDP/abs/html/comparison-ops.html#STRTEST\n[7]: http://tldp.org/LDP/abs/html/redircb.html#REDIR2\n[8]: http://tldp.org/LDP/abs/html/internalvariables.html#ARGLIST\n[9]: http://tldp.org/LDP/abs/html/quotingvar.html#WSQUO\n[10]: http://tldp.org/LDP/abs/html/quotingvar.html#VARSPLITTING\n[11]: http://tldp.org/LDP/abs/html/bashver2.html#BASH2REF\n[12]: http://tldp.org/LDP/abs/html/why-shell.html#BASHDEF\n[13]: http://tldp.org/LDP/abs/html/gotchas.html#BINSH\n[14]: http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\n[15]: http://tldp.org/LDP/abs/html/complexfunct.html#RETURNREF\n[16]: http://tldp.org/LDP/abs/html/complexfunct.html#RETURNTEST\n[17]: http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\n[18]: http://tldp.org/LDP/abs/html/localvar.html#EXITVALANOMALY01\n[19]: http://tldp.org/LDP/abs/html/internal.html#EXITVALANOMALY02\n[20]: http://tldp.org/LDP/abs/html/testconstructs.html#ARXS\n[21]: http://tldp.org/LDP/abs/html/here-docs.html#HEREDOCREF\n[22]: http://tldp.org/LDP/abs/html/here-docs.html#INDENTEDLS\n[23]: http://tldp.org/LDP/abs/html/assortedtips.html#RVT\n[24]: http://tldp.org/LDP/abs/html/assortedtips.html#RVTCAUTION\n[25]: http://tldp.org/LDP/abs/html/internal.html#FORKREF\n[26]: http://tldp.org/LDP/abs/html/subshells.html#SUBSHELLSREF\n[27]: http://tldp.org/LDP/abs/html/special-chars.html#PIPEREF\n[28]: http://tldp.org/LDP/abs/html/internal.html#READREF\n[29]: http://tldp.org/LDP/abs/html/internal.html#SETREF\n[30]: http://tldp.org/LDP/abs/html/internal.html#SETPOS\n[31]: http://tldp.org/LDP/abs/html/textproc.html#GREPREF\n[32]: http://tldp.org/LDP/abs/html/internal.html#DOUBLESLASHREF\n[33]: http://tldp.org/LDP/abs/html/textproc.html#TRREF\n[34]: http://tldp.org/LDP/abs/html/string-manipulation.html#PARAGRAPHSPACE\n[35]: http://tldp.org/LDP/abs/html/gotchas.html#UNDOCF\n[36]: http://tldp.org/LDP/abs/html/fto.html#SUIDREF</p>\n</blockquote>\n<h4 id=\"注意事项\"> 注意事项</h4>\n<hr>\n<section>\n<ol>\n<li id=\"fn1\"><p>在Linux和绝大多数的UNIX机器上，给脚本设置[suid][36]权限是没用的。 </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "36.1 交互和非交互shell以及脚本",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_1_interactive_and_non-interactive_shells_and_scripts/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_1_interactive_and_non-interactive_shells_and_scripts/",
      "content_html": "<h1 id=\"_36-1-交互和非交互shell以及脚本\"> 36.1 交互和非交互shell以及脚本</h1>\n<p>交互shell从tty读取用户输入。shell默认会读取启动文件，显示提示符和打开任务控制等。用户可以和shell交互。</p>\n<p>脚本总是运行在非交互的shell上。同样，脚本可以访问它自己的tty，这使得在脚本中依然可以模拟出交互的shell。</p>\n<div><pre><code>#!/bin/bash\nMY_PROMPT=&#39;$ &#39;\nwhile :\n    do\n        echo -n &quot;$MY_PROMPT&quot;\n        read line\n        eval &quot;$line&quot;\n    done\n\nexit 0\n\n# 这个脚本以及以上解释是由Stéphane Chazelas提供的\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>一个要求用户输入的交互脚本，通常会用到read语句（请看例15-3）。不过实际上要复杂一些，一个被用户通过console或者xterm调用的脚本，意味着这个脚本被绑定到了一个tty上。</p>\n<p>初始化和启动脚本必须是非交互的，因为在运行过程中不能要求人类的介入。许多管理和系统维护脚本也同样是非交互的。要求自动运行的重复性任务也是通过非交互脚本实现的。</p>\n<p>非交互的脚本可以在后台运行，而交互脚本（在后台运行）则会挂起，因为要等待永远不可能出现的“输入”。解决这个难题可以使用带有expect命令的脚本，或者将文档嵌入到后台运行的交互脚本中。最简单的例子就是将一个文件重定向到read语句，来提供“输入”。(read variable &lt; file) 这可以创造出一个在交互和非交互两种模式下通用的脚本。</p>\n<p>如果脚本需要知道它是否运行在交互模式下，简单的方法就是看提示符变量是否存在，就是<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.68333em;vertical-align:0em;\"></span><span style=\"margin-right:0.05764em;\">PS</span><span>1</span><span>变量。（如果用户通过提示符输入，那么脚本就需要显示提示符，所以脚本中</span></span></span></span>PS1变量会被设置）</p>\n<div><pre><code>if [ -z $PS1 ] # 是否有提示符（译注：判断脚本是否运行在交互模式下）\n### if [ -v PS1 ]   # Bash 4.2+ ...\nthen\n    # 非交互模式\n    ...\nelse\n    # 交互模式\n    ...\nfi\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>脚本也可以测试$-变量中是否使用了“i”选项来判读是否运行在交互模式下。</p>\n<div><pre><code>case $- in\n    *i*)    # 交互shell\n    ;;\n    *)      # 非交互shell\n    ;;\n# (参见 &quot;UNIX F.A.Q.,&quot; 1993)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>John Lange描述了另一种替代方法：使用test -t来测试。</p>\n<div><pre><code># 关于终端的测试！\n\nfd=0   # stdin 标准输入\n\n# 使用test -t测试stdin或者stdout是否是一个终端（如果是则证明该脚本运行于交互模式）。\nif [ -t &quot;$fd&quot; ]\nthen\n    echo interactive # 译注：交互模式\nelse\n    echo non-interactive # 译注：非交互模式\nfi\n\n# 但是John指出：\n#     if [ -t 0 ] 仅在你本地登录时有效，\n#     如果通过ssh远程调用就会失效，\n#     所以还要加上对socket的判断。\n\nif [[ -t &quot;$fd&quot; || -p /dev/stdin ]]\nthen\n    echo interactive # 译注：交互模式\nelse\n    echo non-interactive # 译注：非交互模式\nfi\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>笔记</p>\n<p>脚本可以使用-i选项或者#!/bin/bash -i的文件头强制进入交互模式执行。这可能导致古怪的脚本行为或者在没有错误的情况下显示错误信息。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "36.2 shell wrappers",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_2_shell_wrappers/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_2_shell_wrappers/",
      "content_html": "<h1 id=\"_36-2-shell-wrappers\"> 36.2 shell wrappers</h1>\n<p>wrapper是一个包含系统命令和工具的脚本，脚本会把一些参数传递给这些（脚本内的）命令。将一个复杂的命令封装成一个wrapper是为了调用它时比较简单好记，特别在使用sed和awk命令时会这么做。</p>\n<p>sed或awk脚本通常在命令行下调用时是sed -e '命令'或者awk '命令'。在Bash脚本中嵌入这些命令会让它们在调用时很简单，并且能够被重用。使用这种方法可以将sed和awk的优势统一起来，比如将sed命令处理的结果通过管道传递给awk继续处理。将这些保存成为一个可执行文件，你可以重复调用它的原始版本或者修改版本，而不用在命令行里反复敲冗长的命令。</p>\n<h2 id=\"example-36-1-shell-wrapper\"> Example 36-1. shell wrapper</h2>\n<div><pre><code>#!/bin/bash\n\n# 这个脚本功能是去除文件中的空白行\n# 没有做参数检查\n#\n# 也许你想添加下面的内容：\n#\n# E_NOARGS=85\n# if [ -z &quot;$1&quot; ]\n# then\n#  echo &quot;Usage: `basename $0` target-file&quot;\n#  exit $E_NOARGS\n# fi\n\nsed -e /^$/d &quot;$1&quot;\n# 就像这个命令\n#    sed -e &#39;/^$/d&#39; filename\n# 通过命令行调用\n\n# &#39;-e&#39;意思是后面为编辑命令（这个选项可省略）。\n# &#39;^&#39;代表行首，&#39;$&#39;代表行尾。\n# 这个正则表达式表示要匹配出所有行首位没有内容的行，就是空白行。\n# 是删除命令（译注：就是把刚才选出来的空白行删掉）\n\n# 将文件名中的特殊字符和空白进行转译\n\n# 这个脚本并不会真正的修改目标文件，如果想对目标文件真正的修改，请将输出重定向\n\nexit\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h2 id=\"example-36-2-稍微复杂一点的-shell-wrapper\"> Example 36-2. 稍微复杂一点的 shell wrapper</h2>\n<div><pre><code>#!/bin/bash\n\n#  subst.sh: 在文件中进行替换字符串的脚本\n#  例如 &quot;sh subst.sh Smith Jones letter.txt&quot;\n#  letter.txt 中的所有 Jones 都被替换为 Smith。\n\nARGS=3         # 这个脚本需要三个参数\nE_BADARGS=85   # 传给脚本的参数数量不正确\n\nif [ $# -ne &quot;$ARGS&quot; ]\nthen\n    echo &quot;Usage: `basename $0` old-pattern new-pattern filename&quot;\n    exit $E_BADARGS\nfi\n\nold_pattern=$1\nnew_pattern=$2\n\nif [ -f &quot;$3&quot; ]\nthen\n    file_name=$3\nelse\n    echo &quot;File \\&quot;$3\\&quot; does not exist.&quot;\n    exit $E_BADARGS\nfi\n\n# -----------------------------------------------\n# 这里是最核心的部分\nsed -e &quot;s/$old_pattern/$new_pattern/g&quot; $file_name\n# -----------------------------------------------\n\n# &#39;s&#39; 是sed中的替换命令\n# /pattern/调用地址匹配\n# &#39;g&#39; 表示要对文件中的所有匹配项目都进行替换操作，而不是仅对第一个这样干。\n# 如果需要深入了解，请阅读sed命令的相关文档。\n\nexit $?  # 将这个脚本的输出重定向到一个文件即可记录真正的结果\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h2 id=\"example-36-3-一个通用的写日志文件的-shell-wrapper\"> Example 36-3. 一个通用的写日志文件的 shell wrapper</h2>\n<div><pre><code>#!/bin/bash\n#  logging-wrapper.sh\n#  一个通用的shell wrapper，在进行操作的同时对操作进行日志记录\n\nDEFAULT_LOGFILE=logfile.txt\n\n# 设置下面两个变量的值\nOPERATION=\n# 可以是任意操作，比如一个awk脚本或者用管道连接的复杂命令\n\nLOGFILE=\nif [ -z &quot;$LOGFILE&quot; ]\n    then     # 如果没有设置日志文件，则使用默认文件名\n      LOGFILE=&quot;$DEFAULT_LOGFILE&quot;\n      fi\n\n# 对于操作命令的参数（可选）\nOPTIONS=&quot;$@&quot;\n\n\n# 日志记录\necho &quot;`date` + `whoami` + $OPERATION &quot;$@&quot;&quot; &gt;&gt; $LOGFILE\n# 进行操作动作\nexec $OPERATION &quot;$@&quot;\n\n# 要在真正执行操作之前写日志\n# 思考下为什么要先写日志，后操作。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id=\"example-36-4-关于awk脚本的-shell-wrapper\"> Example 36-4. 关于awk脚本的 shell wrapper</h2>\n<div><pre><code>#!/bin/bash\n# pr-ascii.sh: 打印ASCII码表格\n\nSTART=33   # 可打印的ASCII码范围（十进制）\nEND=127    # 不会输出不可打印的ASCII码\n\necho &quot; Decimal   Hex     Character&quot;   # 表头\necho &quot; -------   ---     ---------&quot;\n\nfor ((i=START; i&lt;=END; i++))\ndo\n    echo $i | awk &#39;{printf(&quot;  %3d       %2x         %c\\n&quot;, $1, $1, $1)}&#39;\n# Bash内置的printf命令无法完成下面的操作: （译注：所以这使用awk脚本来实现输出）\n#     printf &quot;%c&quot; &quot;$i&quot;\ndone\n\nexit 0\n\n\n#  Decimal   Hex     Character\n#  -------   ---     ---------\n#    33       21         !\n#    34       22         &quot;\n#    35       23         #\n#    36       24         $\n#\n#    . . .\n#\n#   122       7a         z\n#   123       7b         {\n#   124       7c         |\n#   125       7d         }\n\n\n# 将输出重定向到文件\n# 或者用管道传递给&quot;more&quot;:  sh pr-asc.sh | more\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h2 id=\"example-36-5-另一个关于awk的-shell-wrapper\"> Example 36-5. 另一个关于awk的 shell wrapper</h2>\n<div><pre><code>#!/bin/bash\n\n# 在目标文件中添加一个数字的特殊列\n# 十进制浮点数也可以，因为awk可以处理这样的输出。\n\nARGS=2\nE_WRONGARGS=85\n\nif [ $# -ne &quot;$ARGS&quot; ] # Check for proper number of command-line args.\nthen\n    echo &quot;Usage: `basename $0` filename column-number&quot;\n    exit $E_WRONGARGS\nfi\n\nfilename=$1\ncolumn_number=$2\n\n# 将shell脚本的变量传递给awk有一点难办。\n# 第一种方法是用引号将Bash脚本变量在awk脚本中包起来\n#     $&#39;$BASH_SCRIPT_VAR&#39;\n#      ^                ^\n# 下面的awk脚本就是这么干的。\n# 详细用法可以查阅awk文档。\n\n# 多行的awk脚本可以写成这样\n#   awk &#39;\n#   ...\n#   ...\n#   ...\n#   &#39;\n\n\n# 开始awk脚本\n# -----------------------------\nawk &#39;\n\n{ total += $&#39;&quot;${column_number}&quot;&#39; # 译注：这就是那个bash脚本变量\n}\nEND {\nprint total\n}     \n\n&#39; &quot;$filename&quot;\n# -----------------------------\n# 结束awk脚本\n\n\n#   将shell变量传递给awk脚本也许是不安全的\n#   所以Stephane Chazelas提出了下面的替代方案：\n#   ---------------------------------------\n#   awk -v column_number=&quot;$column_number&quot; &#39; # 译注：将shell的值赋给一个awk变量\n#   { total += $column_number\n#   }\n#   END {\n#       print total\n#   }&#39; &quot;$filename&quot;\n#   ---------------------------------------\n\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div><p>能满足那些需要瑞士军刀般全能工具的脚本语言，就只有Perl了。Perl集合了sed和awk的能力，并且比C更加精简。它是模块化的并且能支持包括厨房洗碗槽在内的所有面向对象编程所能涉及的事物。短小的Perl脚本可以嵌入shell脚本中，甚至Perl可以完全替代shell脚本。（本书作者对此仍然抱有怀疑）</p>\n<h2 id=\"example-36-6-perl嵌入bash脚本\"> Example 36-6. Perl嵌入Bash脚本</h2>\n<div><pre><code>#!/bin/bash\n\n# shell命令先于Perl脚本执行\necho &quot;This precedes the embedded Perl script within \\&quot;$0\\&quot;.&quot;\necho &quot;===============================================================&quot;\n\nperl -e &#39;print &quot;This line prints from an embedded Perl script.\\n&quot;;&#39;\n# 像sed命令一样，Perl使用&#39;-e&#39;选项\n\necho &quot;===============================================================&quot;\necho &quot;However, the script may also contain shell and system commands.&quot;\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>即使能将Bash脚本和Perl脚本合二为一，先执行Bash部分还是Perl部分仍然要取决于调用脚本的方式。</p>\n<h2 id=\"example-36-7-bash和perl脚本合并\"> Example 36-7. Bash和Perl脚本合并</h2>\n<div><pre><code>#!/bin/bash\n# bashandperl.sh\n\necho &quot;Greetings from the Bash part of the script, $0.&quot;\n# 这里可以写更多的Bash命令\n\nexit\n# Bash脚本部分结束\n\n# =======================================================\n\n#!/usr/bin/perl\n# 这部分脚本要像下面这样调用\n#    perl -x bashandperl.sh\n\nprint &quot;Greetings from the Perl part of the script, $0.\\n&quot;;\n# Perl 看起来并不像 “echo” ...\n# 这里可以写更多的Perl命令\n\n# Perl命令部分结束\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><div><pre><code>bash$ bash bashandperl.sh\nGreetings from the Bash part of the script.\n\nbash$ perl -x bashandperl.sh\nGreetings from the Perl part of the script.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>当然还可以用shell wrapper嵌入更多的“外来户”，比如Python或者其他的...</p>\n<h2 id=\"example-36-8-python嵌入bash脚本\"> Example 36-8. Python嵌入Bash脚本</h2>\n<div><pre><code>#!/bin/bash\n# ex56py.sh\n\n# shell脚本先于Python脚本执行\necho &quot;This precedes the embedded Python script within \\&quot;$0.\\&quot;&quot;\necho &quot;===============================================================&quot;\n\npython -c &#39;print &quot;This line prints from an embedded Python script.\\n&quot;;&#39;\n# 并不像sed和Perl，Python使用&#39;-c&#39;选项\npython -c &#39;k = raw_input( &quot;Hit a key to exit to outer script. &quot; )&#39;\n\necho &quot;===============================================================&quot;\necho &quot;However, the script may also contain shell and system commands.&quot;\n\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>使用脚本封装mplayer或者Google翻译服务器的一些功能，你能做出给你反馈一些信息的小东西。</p>\n<h2 id=\"example-36-9-会讲话的脚本\"> Example 36-9. 会讲话的脚本</h2>\n<div><pre><code>#!/bin/bash\n#   参见:\n#   http://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)\n\n# 为了连接Google翻译服务器，这个脚本必须连接到互联网才能工作，\n# 而且你的计算机上必须装有mplayer。\n\nspeak()\n  {\n  local IFS=+\n  # 先调用mplayer，再连接Google翻译服务器。\n  /usr/bin/mplayer -ao alsa -really-quiet -noconsolecontrols \\\n  &quot;http://translate.google.com/translate_tts?tl=en&amp;q=&quot;$*&quot;&quot;\n  # 可以说话的Google翻译\n  }\n\nLINES=4\n\nspk=$(tail -$LINES $0) # 同样的结尾\nspeak &quot;$spk&quot;\nexit\n# BRowns 很高兴与你谈话。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>有个有趣的shell wrapper例子是Martin Matusiak的undvd，为复杂的mencoder工具提供了一个简单易用的命令行接口。另一个例子是Itzchak Rehberg的Ext3Undel，它为在ext3文件系统上恢复删除的文件提供了一整套工具。</p>\n<p>Notes\n[1] Linux工具事实上很多是shell wrapper，比如/usr/bin/pdf2ps，/usr/bin/batch和/usr/bin/xmkmf。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "36.3 测试和比较的其他方法",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_3_tests_and_comparisons_alternatives/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_3_tests_and_comparisons_alternatives/",
      "content_html": "<h1 id=\"_36-3-测试和比较的其他方法\"> 36.3 测试和比较的其他方法</h1>\n<p>对于判断（test命令）来说，[[ ]]比[ ]更加合适。同样的，算数运算符（译注：-eq之类的）比(( ))更有优势。</p>\n<div><pre><code>a=8\n\n# 下面所有这些比较的结果都应该是相等的\ntest &quot;$a&quot; -lt 16 &amp;&amp; echo &quot;yes, $a &lt; 16&quot;         # &quot;and list&quot;\n/bin/test &quot;$a&quot; -lt 16 &amp;&amp; echo &quot;yes, $a &lt; 16&quot; \n[ &quot;$a&quot; -lt 16 ] &amp;&amp; echo &quot;yes, $a &lt; 16&quot; \n[[ $a -lt 16 ]] &amp;&amp; echo &quot;yes, $a &lt; 16&quot;          # 为表达式添加\n(( a &lt; 16 )) &amp;&amp; echo &quot;yes, $a &lt; 16&quot;             # [[ ]]和(( ))并不是必须的\n\ncity=&quot;New York&quot;\n# 下面这些结果也是相等的\ntest &quot;$city&quot; \\&lt; Paris &amp;&amp; echo &quot;Yes, Paris is greater than $city&quot;\n                                  # ASCII字符比较\n/bin/test &quot;$city&quot; \\&lt; Paris &amp;&amp; echo &quot;Yes, Paris is greater than $city&quot; \n[ &quot;$city&quot; \\&lt; Paris ] &amp;&amp; echo &quot;Yes, Paris is greater than $city&quot; \n[[ $city &lt; Paris ]] &amp;&amp; echo &quot;Yes, Paris is greater than $city&quot;\n                                  # 并不需要为$city变量加引号。\n\n# 向S.C.致谢\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "36.4 递归：可以调用自己的脚本",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_4_recursion_a_script_calling_itself/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_4_recursion_a_script_calling_itself/",
      "content_html": "<h1 id=\"_36-4-递归-可以调用自己的脚本\"> 36.4 递归：可以调用自己的脚本</h1>\n<p>脚本可以递归的调用自己吗？答案是肯定的。</p>\n<h2 id=\"example-36-10-可以调用自己的脚本-但没什么实际用途\"> Example 36-10. 可以调用自己的脚本（但没什么实际用途）</h2>\n<div><pre><code>#!/bin/bash\n# recurse.sh\n\n# 脚本可以调用自己吗？\n# 其实是可以的。但这样有什么实际用途吗？\n# （请往下看）\n\nRANGE=10\nMAXVAL=9\n\ni=$RANDOM\nlet &quot;i %= $RANGE&quot;  # 在0到$RANGE - 1的范围内产生一个随机数\n\nif [ &quot;$i&quot; -lt &quot;$MAXVAL&quot; ]\nthen\n    echo &quot;i = $i&quot;\n    ./$0           # 脚本进行递归调用（调用自己）\nfi                 # 每次被调用的脚本做同样的事情，直到$i和$MAXVAL相等。 \n\n# 如果使用“while”循环代替“if/then”语句会出问题。请试着解释为什么。\n\nexit 0\n\n# 笔记:\n# ----\n# 这个脚本文件必须有可执行权限。\n# 即使使用“sh”命令调用，这脚本也可以执行。\n# 请解释原因。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h2 id=\"example-36-11-一个有点用的调用自己的脚本\"> Example 36-11. 一个有点用的调用自己的脚本</h2>\n<div><pre><code>#!/bin/bash\n# pb.sh: phone book\n\n# 用于权限管理的脚本，由Rick Boivie编写。\n# ABS作者稍有修改\n\nMINARGS=1     # 需要至少一个参数\nDATAFILE=./phonebook\n              # 当前目录下必须存在名为“phonebook”的数据文件\nPROGNAME=$0\nE_NOARGS=70   # 没有错误\n\nif [ $# -lt $MINARGS ]; then\n    echo &quot;Usage: &quot;$PROGNAME&quot; data-to-look-up&quot;\n    exit $E_NOARGS\nfi      \n\nif [ $# -eq $MINARGS ]; then\n    grep $1 &quot;$DATAFILE&quot;\n    # 如果$DATAFILE没有匹配则&#39;grep&#39;命令会报错。\nelse\n    ( shift; &quot;$PROGNAME&quot; $* ) | grep $1\n    # 脚本的递归调用\nfi\nexit 0        # 脚本结束 \n\n# 下面是一些文件内容\n\n# ------------------------------------------------------------------------\n一个简单的&quot;phonebook&quot;数据文件:\n\nJohn Doe        1555 Main St., Baltimore, MD 21228          (410) 222-3333\nMary Moe        9899 Jones Blvd., Warren, NH 03787          (603) 898-3232\nRichard Roe     856 E. 7th St., New York, NY 10009          (212) 333-4567\nSam Roe         956 E. 8th St., New York, NY 10009          (212) 444-5678\nZoe Zenobia     4481 N. Baker St., San Francisco, SF 94338  (415) 501-1631\n# ------------------------------------------------------------------------\n\n$bash pb.sh Roe\nRichard Roe     856 E. 7th St., New York, NY 10009          (212) 333-4567\nSam Roe         956 E. 8th St., New York, NY 10009          (212) 444-5678\n\n$bash pb.sh Roe Sam\nSam Roe         956 E. 8th St., New York, NY 10009          (212) 444-5678\n\n# 当对脚本传入多于一个参数时，脚本只显示包含所有参数的行\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><h2 id=\"example-36-12-另一个调用自己的脚本\"> Example 36-12. 另一个调用自己的脚本</h2>\n<div><pre><code>#!/bin/bash\n# usrmnt.sh, 由Anthony Richardson编写\n# 在ABS Guide中用于权限管理\n\n# usage:       usrmnt.sh\n# description: 想使用挂载设备操作的用户，在/etc/sudoers文件中必须属于MNTUSERS组。\n\n# ----------------------------------------------------------\n# 这个脚本会返回加了sudo命令的自身。\n# 如果一个有权限的用户，则只需要输入：\n#   usermount /dev/fd0 /mnt/floppy\n# 而不需要使用下面的方法：\n#   sudo usermount /dev/fd0 /mnt/floppy\n\n# 我对于所有需要sudo的脚本都使用了这个技术，因为我发现这让我感觉非常舒服。\n# ----------------------------------------------------------\n\n# 如果SUDO_COMMAND变量没有被设置，那证明没有使用sudo命令运行。这需要\n# 再重新运行这个脚本，同时传递用户的ID和组ID...\n\nif [ -z &quot;$SUDO_COMMAND&quot; ]\nthen\n    mntusr=$(id -u) grpusr=$(id -g) sudo $0 $* # 译注：脚本调用自己，并且传递参数\n    exit 0\nfi\n\n# 如果使用了sudo运行，就不会卡在这里了。\n/bin/mount $* -o uid=$mntusr,gid=$grpusr\n\nexit 0\n\n# 附加说明：\n# -------------------------------------------------\n\n# 1) Linux系统允许/etc/fstab文件中列出的用户挂在移动存储设备。但在服务器上，我喜欢让更少的人访问移动存储。我发现使用sudo可以帮我做到。\n\n# 2) 我还发现使用sudo比用组权限来实现让人感觉更加舒服。\n\n# 3) 这种方法可以给任何有权限的人使用mount命令，所以要小心处理。\n#    你也可以将这种技术用到比如mntfloppy，mntcdrom和mntsamba等脚本上来实现更优雅的挂载管理。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>过多层次的递归调用会导致脚本的栈空间溢出，引起段错误（segfault）。</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "echo命令",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_5_colorizing_scripts/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_5_colorizing_scripts/",
      "content_html": "<h2 id=\"echo命令\"> echo命令</h2>\n<ul>\n<li>-e 使转义符生效 如:  解释\\t \\n含义</li>\n<li>-n 不换行输出</li>\n</ul>\n<h3 id=\"字颜色-30-37\"> 字颜色：30—–37</h3>\n<p>echo -e “\\033[30m 黑色字 \\033[0m”</p>\n<p>echo -e “\\033[31m 红色字 \\033[0m”</p>\n<p>echo -e “\\033[32m 绿色字 \\033[0m”</p>\n<p>echo -e “\\033[33m 黄色字 \\033[0m”</p>\n<p>echo -e “\\033[34m 蓝色字 \\033[0m”</p>\n<p>echo -e “\\033[35m 紫色字 \\033[0m”</p>\n<p>echo -e “\\033[36m 天蓝字 \\033[0m”</p>\n<p>echo -e “\\033[37m 白色字 \\033[0m”</p>\n<h3 id=\"字背景颜色范围-40-47\"> 字背景颜色范围：40—–47</h3>\n<p>echo -e “\\033[40;37m 黑底白字 \\033[0m”</p>\n<p>echo -e “\\033[41;37m 红底白字 \\033[0m”</p>\n<p>echo -e “\\033[42;37m 绿底白字 \\033[0m”</p>\n<p>echo -e “\\033[43;37m 黄底白字 \\033[0m”</p>\n<p>echo -e “\\033[44;37m 蓝底白字 \\033[0m”</p>\n<p>echo -e “\\033[45;37m 紫底白字 \\033[0m”</p>\n<p>echo -e “\\033[46;37m 天蓝底白字 \\033[0m”</p>\n<p>echo -e “\\033[47;30m 白底黑字 \\033[0m”</p>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第36章 杂项",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_miscellany/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/36_miscellany/",
      "content_html": "<h1 id=\"第36章-杂项\"> 第36章 杂项</h1>\n<blockquote>\n<p>Nobody really knows what the Bourne shell's grammar is. Even examination of the source code is little help.\n——Tom Duff</p>\n</blockquote>\n<p>目录</p>\n<ul>\n<li><a href=\"./36_1_interactive_and_non-interactive_shells_and_scripts.html\">36.1 交互和非交互shell以及脚本</a></li>\n<li><a href=\"./36_2_shell_wrappers.html\">36.2 shell wrappers</a></li>\n<li><a href=\"./36_3_tests_and_comparisons_alternatives.html\">36.3 测试和比较的其他方法</a></li>\n<li><a href=\"./36_4_recursion_a_script_calling_itself.html\">36.4 递归：调用自己的脚本</a></li>\n<li><a href=\"./36_5_colorizing_scripts.html\">36.5 “彩色”的脚本</a></li>\n<li><a href=\"./36_6_optimizations.html\">36.6 优化</a></li>\n<li><a href=\"./36_7_assorted_tips.html\">36.7 其他技巧</a></li>\n<li><a href=\"./36_8_security_issues.html\">36.8 安全问题</a></li>\n<li><a href=\"./36_9_portability_issues.html\">36.9 可移植性问题</a></li>\n<li><a href=\"./36_10_shell_scripting_under_windows.html\">36.10 Windows系统下的脚本</a></li>\n</ul>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第五部分 高级话题",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part5/",
      "content_html": "<h1 id=\"第五部分-高级话题\"> 第五部分 高级话题</h1>\n<h3 id=\"目录\"> 目录</h3>\n<ul>\n<li><a href=\"./18_regular_expressions.html\">18.正则表达式</a>\n<ul>\n<li><a href=\"./18_1_a_brief_introduction_to_regular_expressions.html\">18.1正则表达式简介</a></li>\n<li><a href=\"./18_2_globbing.html\">18.2文件名替换</a></li>\n</ul>\n</li>\n<li><a href=\"./19_here_documents.html\">19. 嵌入文档</a></li>\n<li><a href=\"./20_io_redirection.html\">20. I/O 重定向</a>\n<ul>\n<li><a href=\"./20_1_use_exec.html\">20.1 使用 exec</a></li>\n<li><a href=\"./20_2_redirecting_code_blocks.html\">20.2 重定向代码块</a></li>\n<li><a href=\"./20_3_applications.html\">20.3 应用程序</a></li>\n</ul>\n</li>\n<li><a href=\"./22_Restricted_Shells.html\">22. 限制模式的Shell</a></li>\n<li><a href=\"./23_Process_Substitution.html\">23. 进程替换</a></li>\n<li><a href=\"./24_functions.html\">24. 函数</a>\n<ul>\n<li><a href=\"./24_1_complex_functions_and_function_complexities.html\">24.1 复杂函数和函数复杂性</a></li>\n<li><a href=\"./24_2_local_variables.html\">24.2 局部变量</a></li>\n<li><a href=\"./24_3_recursion_without_local_variables.html\">24.3 不适用局部变量的递归</a></li>\n</ul>\n</li>\n<li><a href=\"./25_aliases.html\">25. 别名</a></li>\n<li><a href=\"./source/part5/26_List_Constructs.html\">26. 列表结构</a></li>\n<li><a href=\"./27_arrays.html\">27. 数组</a></li>\n<li><a href=\"./30_network_programming.html\">30. 网络编程</a></li>\n<li><a href=\"./33_options.html\">33. 选项</a></li>\n<li><a href=\"./34_Gotchsa.html\">34. 陷阱</a></li>\n</ul>\n",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "第六部分 Google Shell 风格指南",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part6/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part6/",
      "content_html": "<h1 id=\"第六部分-google-shell-风格指南\"> 第六部分 Google Shell 风格指南</h1>\n<h2 id=\"_1-背景\"> 1 背景</h2>\n<h3 id=\"_1-1-使用哪一种shell\"> 1.1 使用哪一种Shell</h3>\n<blockquote>\n<p>Bash是唯一被允许执行的shell脚本语言。</p>\n</blockquote>\n<p>可执行文件必须以<code>#!/bin/bash</code>和最小数量的标志开始。请使<code>set</code>来设置shell的选项，使得用<code>bash &lt;script_name&gt;</code>调用你的脚本时不会破坏其功能。</p>\n<p>限制所有的可执行shell脚本为bash使得我们安装在所有计算机中的shell语言保持一致性。</p>\n<h3 id=\"_1-2-什么时候使用shell\"> 1.2 什么时候使用Shell</h3>\n<blockquote>\n<p>Shell应该仅仅被用于小功能或者简单的包装脚本。</p>\n</blockquote>\n<p>尽管Shell脚本不是一种开发语言，但在整个谷歌它被用于编写多种实用工具的脚本。这个风格指南更多的是认同它的使用，而不是一个建议，即它可被用于广泛部署。</p>\n<p>以下是一些准则：</p>\n<ul>\n<li>如果你主要是在调用其他的工具并且做一些相对很小数据量的操作，那么使用shell来完成任务是一种可接受的选择。</li>\n<li>如果你在乎性能，那么请选择其他工具，而不是使用shell。</li>\n<li>如果你发现你需要使用数据而不是变量赋值（如 <code>${PHPESTATUS}</code> ），那么你应该使用Python脚本。</li>\n<li>如果你将要编写的脚本会超过100行，那么你可能应该使用Python来编写，而不是Shell。请记住，当脚本行数增加，尽早使用另外一种语言重写你的脚本，以避免之后花更多的时间来重写。</li>\n</ul>\n<h2 id=\"_2-shell文件和解释器调用\"> 2 Shell文件和解释器调用</h2>\n<h3 id=\"_2-1-文件扩展名\"> 2.1 文件扩展名</h3>\n<blockquote>\n<p>可执行文件应该没有扩展名（强烈建议）或者使用.sh扩展名。库文件必须使用.sh作为扩展名，而且应该是不可执行的。</p>\n</blockquote>\n<p>当执行一个程序时，并不需要知道它是用什么语言编写的。而且shell脚本也不要求有扩展名。所以我们更喜欢可执行文件没有扩展名。</p>\n<p>然而，对于库文件，知道其用什么语言编写的是很重要的，有时候会需要使用不同语言编写的相似的库文件。使用.sh这样特定语言后缀作为扩展名，就使得用不同语言编写的具有相同功能的库文件可以采用一样的名称。</p>\n<h3 id=\"_2-2-suid-sgid\"> 2.2 SUID/SGID</h3>\n<blockquote>\n<p>SUID(Set User ID)和SGID(Set Group ID)在shell脚本中是被禁止的。</p>\n</blockquote>\n<p>shell存在太多的安全问题，以致于如果允许SUID/SGID会使得shell几乎不可能足够安全。虽然bash使得运行SUID非常困难，但在某些平台上仍然有可能运行，这就是为什么我们明确提出要禁止它。</p>\n<p>如果你需要较高权限的访问请使用<code>sudo</code>。</p>\n<h2 id=\"_3-环境\"> 3 环境</h2>\n<h3 id=\"_3-1-stdout-vs-stderr\"> 3.1 STDOUT vs STDERR</h3>\n<blockquote>\n<p>所有的错误信息都应该被导向STDERR。</p>\n</blockquote>\n<p>这使得从实际问题中分离出正常状态变得更容易。</p>\n<p>推荐使用类似如下函数，将错误信息和其他状态信息一起打印出来。</p>\n<div><pre><code><span>err</span><span>(</span><span>)</span> <span>{</span>\n  <span>echo</span> <span>\"[<span><span>$(</span><span>date</span> + <span>'%Y-%m-%dT%H:%M:%S%z'</span><span>)</span></span>]: <span>$@</span>\"</span> <span>></span><span>&amp;2</span>\n<span>}</span>\n\n<span>if</span> <span>!</span> do_something<span>;</span><span>then</span>\n  err <span>\"Unable to do_someting\"</span>\n  <span>exit</span> <span>\"<span>${E_DID_NOTHING}</span>\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"_4-注释\"> 4 注释</h2>\n<h3 id=\"_4-1-文件头\"> 4.1 文件头</h3>\n<blockquote>\n<p>每个文件的开头是其文件内容的描述。</p>\n</blockquote>\n<p>每个文件必须包含一个顶层注释，对其内容进行简要概述。版权声明和作者信息是可选的。</p>\n<p>例如：</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span>#</span>\n<span># Perform hot backups of Oracle databases.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_4-2-功能注释\"> 4.2 功能注释</h3>\n<blockquote>\n<p>任何不是既明显又短的函数都必须被注释。任何库函数无论其长短和复杂性都必须被注释。</p>\n</blockquote>\n<p>其他人通过阅读注释（和帮助信息，如果有的话）就能够学会如何使用你的程序或库函数，而不需要阅读代码。</p>\n<p>所有的函数注释应该包含：</p>\n<ul>\n<li>函数的描述</li>\n<li>全局变量的使用和修改</li>\n<li>使用的参数说明</li>\n<li>返回值，而不是上一条命令运行后默认的退出状态</li>\n</ul>\n<p>例如：</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span>#</span>\n<span># Perform hot backups of Oracle databases.</span>\n\n<span>export</span> <span><span>PATH</span></span><span>=</span><span>'/usr/xpg4/bin:/usr/bin:/opt/csw/bin:/opt/goog/bin'</span>\n\n<span>#######################################</span>\n<span># Cleanup files from the backup dir</span>\n<span># Globals:</span>\n<span>#   BACKUP_DIR</span>\n<span>#   ORACLE_SID</span>\n<span># Arguments:</span>\n<span>#   None</span>\n<span># Returns:</span>\n<span>#   None</span>\n<span>#######################################</span>\n<span>cleanup</span><span>(</span><span>)</span> <span>{</span>\n  <span>..</span>.\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id=\"_4-3-实现部分的注释\"> 4.3 实现部分的注释</h3>\n<blockquote>\n<p>注释你代码中含有技巧、不明显、有趣的或者重要的部分。</p>\n</blockquote>\n<p>这部分遵循谷歌代码注释的通用做法。不要注释所有代码。如果有一个复杂的算法或者你正在做一些与众不同的，放一个简单的注释。</p>\n<h3 id=\"_4-4-todo注释\"> 4.4 TODO注释</h3>\n<blockquote>\n<p>使用TODO注释临时的、短期解决方案的、或者足够好但不够完美的代码。</p>\n</blockquote>\n<p>这与C++指南中的约定相一致。</p>\n<p>TODOs应该包含全部大写的字符串TODO，接着是括号中你的用户名。冒号是可选的。最好在TODO条目之后加上 bug或者ticket 的序号。</p>\n<p>例如：</p>\n<div><pre><code><span># TODO(mrmonkey): Handle the unlikely edge cases (bug ####)</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_5-格式\"> 5 格式</h2>\n<h3 id=\"_5-1-缩进\"> 5.1 缩进</h3>\n<blockquote>\n<p>缩进两个空格，没有制表符。</p>\n</blockquote>\n<p>在代码块之间请使用空行以提升可读性。缩进为两个空格。无论你做什么，请不要使用制表符。对于已有文件，保持已有的缩进格式。</p>\n<h3 id=\"_5-2-行的长度和长字符串\"> 5.2 行的长度和长字符串</h3>\n<blockquote>\n<p>行的最大长度为80个字符。</p>\n</blockquote>\n<p>如果你必须写长度超过80个字符的字符串，如果可能的话，尽量使用here document或者嵌入的换行符。长度超过80个字符的文字串且不能被合理地分割，这是正常的。但强烈建议找到一个方法使其变短。</p>\n<div><pre><code><span># DO use 'here document's</span>\n<span>cat</span> <span>&lt;&lt;</span>END<span>;</span>\nI am an exceptionally long\nstring.\nEND\n\n<span># Embedded newlines are ok too</span>\n<span>long_string</span><span>=</span><span>\"I am an exceptionally\n  long string.\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"_5-3-管道\"> 5.3 管道</h3>\n<blockquote>\n<p>如果一行容不下整个管道操作，那么请将整个管道操作分割成每行一个管段。</p>\n</blockquote>\n<p>如果一行容得下整个管道操作，那么请将整个管道操作写在同一行。</p>\n<p>否则，应该将整个管道操作分割成每行一个管段，管道操作的下一部分应该将管道符放在新行并且缩进2个空格。这适用于使用管道符’|’的合并命令链以及使用’||’和’&amp;&amp;’的逻辑运算链。</p>\n<div><pre><code><span># All fits on one line</span>\ncommand1 <span>|</span> command2\n\n<span># Long commands</span>\ncommand1 <span>\\</span>\n  <span>|</span> command2 <span>\\</span>\n  <span>|</span> command3 <span>\\</span>\n  <span>|</span> command4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"_5-4-循环\"> 5.4 循环</h3>\n<blockquote>\n<p>请将<code>; do</code> ,<code>; then</code>和<code>while</code>,<code>for</code>,<code>if</code>放在同一行。</p>\n</blockquote>\n<p>shell中的循环略有不同，但是我们遵循跟声明函数时的大括号相同的原则。也就是说，<code>; do</code>,<code>; then</code>应该和 if/for/while 放在同一行。<code>else</code>应该单独一行，结束语句应该单独一行并且跟开始语句垂直对齐。</p>\n<p>例如：</p>\n<div><pre><code><span>for</span> <span>dir</span> <span>in</span> <span>${dir_to_cleanup}</span><span>;</span> <span>do</span>\n  <span>if</span> <span>[</span><span>[</span> -d <span>\"<span>${dir}</span>/<span>${ORACLE_SID}</span>\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n    log_date <span>\"Cleaning up old files in <span>${dir}</span>/<span>${ORACLE_SID}</span>\"</span>\n\t<span>rm</span> <span>\"<span>${dir}</span>/<span>${ORACLE_SID}</span>/\"</span>*\n\t<span>if</span> <span>[</span><span>[</span> <span>\"<span>$?</span>\"</span> -ne <span>0</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n\t  error_message\n\t<span>fi</span>\n  <span>else</span>\n    <span>mkdir</span> -p <span>\"<span>${dir}</span>/<span>${ORACLE_SID}</span>\"</span>\n\t<span>if</span> <span>[</span><span>[</span> <span>\"<span>$?</span>\"</span> -ne <span>0</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n\t  error_message\n\t<span>fi</span>\n  <span>fi</span>\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id=\"_5-5-case语句\"> 5.5 case语句</h3>\n<blockquote>\n<ul>\n<li>通过2个空格缩进可选项。</li>\n</ul>\n</blockquote>\n<ul>\n<li>在同一行可选项的模式右圆括号之后和结束符 <code>;;</code> 之前各需要一个空格。</li>\n<li>长可选项或者多命令可选项应该被拆分成多行，模式、操作和结束符 <code>;;</code> 在不同的行。</li>\n</ul>\n<p>匹配表达式比<code>case</code>和<code>esac</code>缩进一级。多行操作要再缩进一级。一般情况下，不需要引用匹配表达式。模式表达式前面不应该出现左括号。避免使用 ;&amp; 和 ;;&amp; 符号。</p>\n<div><pre><code><span>case</span> <span>\"<span>${expression}</span>\"</span> <span>in</span>\n  a<span>)</span>\n    <span>variable</span><span>=</span><span>\"...\"</span>\n\tsome_command <span>\"<span>${variable}</span>\"</span> <span>\"<span>${other_expr}</span>\"</span> <span>..</span>.\n\t<span>;</span><span>;</span>\n  absolute<span>)</span>\n    <span>actions</span><span>=</span><span>\"relative\"</span>\n\tanother_command <span>\"<span>${actions}</span>\"</span> <span>\"<span>${other_expr}</span>\"</span> <span>..</span>.\n\t<span>;</span><span>;</span>\n  *<span>)</span>\n    error <span>\"Unexpected expression '<span>${expression}</span>\"</span>\n\t<span>;</span><span>;</span>\n<span>esac</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>只要整个表达式可读，简单的命令可以跟模式和<code>;;</code>写在同一行。这通常适用于单字母选项的处理。当单行容不下操作时，请将模式单独放一行，然后是操作，最后结束符<code>;;</code>也单独一行。当操作在同一行时，模式的右括号之后和结束符<code>;;</code>之前请使用一个空格分隔。</p>\n<div><pre><code><span>verbose</span><span>=</span><span>'false'</span>\n<span>aflag</span><span>=</span><span>''</span>\n<span>bflag</span><span>=</span><span>''</span>\n<span>files</span><span>=</span><span>''</span>\n<span>while</span> <span>getopts</span> <span>'abf:v'</span> flag<span>;</span> <span>do</span>\n  <span>case</span> <span>\"<span>${flag}</span>\"</span> <span>in</span>\n    a<span>)</span> <span>aflag</span><span>=</span><span>'true'</span> <span>;</span><span>;</span>\n\tb<span>)</span> <span>bflag</span><span>=</span><span>'true'</span> <span>;</span><span>;</span>\n\tf<span>)</span> <span>files</span><span>=</span><span>\"<span>${OPTARG}</span>\"</span> <span>;</span><span>;</span>\n\t<span>v</span><span>)</span> <span>verbose</span><span>=</span><span>'true'</span> <span>;</span><span>;</span>\n\t*<span>)</span> error <span>\"Unexpected option <span>${flag}</span>\"</span> <span>;</span><span>;</span>\n   <span>esac</span>\n <span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id=\"_5-6-变量扩展\"> 5.6 变量扩展</h3>\n<blockquote>\n<p>按优先级顺序：保持跟你所发现的一致；引用你的变量；推荐用<code>${var}</code>而不是<code>$var</code>，详细解释如下。</p>\n</blockquote>\n<p>这些仅仅是指南，因为作为强制规定似乎饱受争议。</p>\n<p>以下按照优先顺序列出。</p>\n<ol>\n<li>与现存代码中你所发现的保持一致。</li>\n<li>引用变量参阅下面一节，引用。</li>\n<li>除非绝对必要或者为了避免深深的困惑，否则不要用大括号将单个字符的shell特殊变量或定位变量括起来。推荐将其他所有变量用大括号括起来。</li>\n</ol>\n<div><pre><code><span># Section of recommended cases.</span>\n\n<span># Preferred style for 'special' variables:</span>\n<span>echo</span> <span>\"Positional: <span>$1</span>\"</span> <span>\"<span>$5</span>\"</span> <span>\"<span>$3</span>\"</span>\n<span>echo</span> <span>\"Specials: !=<span>$!</span>, -=$-, _=<span>$_</span>. ?=<span>$?</span>, #=<span>$#</span> *=<span>$*</span> @=<span>$@</span> \\$=<span>$$</span> ...\"</span>\n\n<span># Braces necessary:</span>\n<span>echo</span> <span>\"many parameters: <span>${10}</span>\"</span>\n\n<span># Braces avoiding confusion:</span>\n<span># Output is \"a0b0c0\"</span>\n<span>set</span> -- a b c\n<span>echo</span> <span>\"<span>${1}</span>0<span>${2}</span>0<span>${3}</span>0\"</span>\n\n<span># Preferred style for other variables:</span>\n<span>echo</span> <span>\"PATH=<span>${<span>PATH</span>}</span>, PWD=<span>${<span>PWD</span>}</span>, mine=<span>${some_var}</span>\"</span>\n<span>while</span> <span>read</span> f<span>;</span> <span>do</span>\n  <span>echo</span> <span>\"file=<span>${f}</span>\"</span>\n<span>done</span> <span>&lt;</span> <span>&lt;</span><span>(</span><span>ls</span> -l /tmp<span>)</span>\n\n<span># Section of discouraged cases</span>\n\n<span># Unquoted vars, unbraced vars, brace-quoted single letter</span>\n<span># shell specials.</span>\n<span>echo</span> <span>a</span><span>=</span><span>$avar</span> <span>\"b=<span>$bvar</span>\"</span> <span>\"PID=<span>${$}</span>\"</span> <span>\"<span>${1}</span>\"</span>\n\n<span># Confusing use: this is expanded as \"${1}0${2}0${3}0\",</span>\n<span># not \"${10}${20}${30}</span>\n<span>set</span> -- a b c\n<span>echo</span> <span>\"<span>$10</span><span>$20</span><span>$30</span>\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h3 id=\"_5-7-引用\"> 5.7 引用</h3>\n<blockquote>\n<ul>\n<li>除非需要小心不带引用的扩展，否则总是引用包含变量、命令替换符、空格或shell元字符的字符串。</li>\n</ul>\n</blockquote>\n<ul>\n<li>推荐引用是单词的字符串（而不是命令选项或者路径名）。</li>\n<li>千万不要引用整数。</li>\n<li>注意 [[ 中模式匹配的引用规则。</li>\n<li>请使用 $@ 除非你有特殊原因需要使用 $* 。</li>\n</ul>\n<div><pre><code><span># 'Single' quotes indicate that no substitution is desired.</span>\n<span># \"Double\" quotes indicate that substitution is required/tolerated.</span>\n\n<span># Simple examples</span>\n<span># \"quote command substitutions\"</span>\n<span>flag</span><span>=</span><span>\"<span><span>$(</span>some_command and its args <span>\"<span>$@</span>\"</span> <span>'quoted separately'</span><span>)</span></span>\"</span>\n\n<span># \"quote variables\"</span>\n<span>echo</span> <span>\"<span>${flag}</span>\"</span>\n\n<span># \"never quote literal integers\"</span>\n<span>value</span><span>=</span><span>32</span>\n<span># \"quote command substitutions\", even when you expect integers</span>\n<span>number</span><span>=</span><span>\"<span><span>$(</span>generate_number<span>)</span></span>\"</span>\n\n<span># \"prefer quoting words\", not compulsory</span>\n<span>readonly</span> <span>USE_INTEGER</span><span>=</span><span>'true'</span>\n\n<span># \"quote shell meta characters\"</span>\n<span>echo</span> <span>'Hello stranger, and well met. Earn lots of <span>$$</span>$'</span>\n<span>echo</span> <span>\"Process <span>$$</span>: Done making \\$\\$\\$.\"</span>\n\n<span># \"command options or path names\"</span>\n<span># ($1 is assumed to contain a value here)</span>\n<span>grep</span> -li Hugo /dev/null <span>\"<span>$1</span>\"</span>\n\n<span># Less simple examples</span>\n<span># \"quote variables, unless proven false\": ccs might be empty</span>\n<span>git</span> send-email --to <span>\"<span>${reviewers}</span>\"</span> <span>${ccs<span>:+</span>\"--cc\" \"${ccs}</span>\"<span>}</span>\n\n<span># Positional parameter precautions: $1 might be unset</span>\n<span># Single quotes leave regex as-is.</span>\n<span>grep</span> -cP <span>'([Ss]pecial|\\|?characters*)$'</span> <span>${1<span>:+</span>\"$1\"}</span>\n\n<span># For passing on arguments,</span>\n<span># \"$@\" is right almost everytime, and</span>\n<span># $* is wrong almost everytime:</span>\n<span>#</span>\n<span># * $* and $@ will split on spaces, clobbering up arguments</span>\n<span>#   that contain spaces and dropping empty strings;</span>\n<span># * \"$@\" will retain arguments as-is, so no args</span>\n<span>#   provided will result in no args being passed on;</span>\n<span>#   This is in most cases what you want to use for passing</span>\n<span>#   on arguments.</span>\n<span># * \"$*\" expands to one argument, with all args joined</span>\n<span>#   by (usually) spaces,</span>\n<span>#   so no args provided will result in one empty string</span>\n<span>#   being passed on.</span>\n<span># (Consult 'man bash' for the nit-grits ;-)</span>\n\n<span>set</span> -- <span>1</span> <span>\"2 two\"</span> <span>\"3 three tres\"</span><span>;</span> <span>echo</span> <span>$#</span> <span>;</span> <span>set</span> -- <span>\"<span>$*</span>\"</span><span>;</span> <span>echo</span> <span>\"<span>$#</span>, <span>$@</span>\"</span><span>)</span>\n<span>set</span> -- <span>1</span> <span>\"2 two\"</span> <span>\"3 three tres\"</span><span>;</span> <span>echo</span> <span>$#</span> <span>;</span> <span>set</span> -- <span>\"<span>$@</span>\"</span><span>;</span> <span>echo</span> <span>\"<span>$#</span>, <span>$@</span>\"</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><h2 id=\"_6-特性及错误\"> 6 特性及错误</h2>\n<h3 id=\"_6-1-命令替换\"> 6.1 命令替换</h3>\n<blockquote>\n<p>使用 <code>$(command)</code> 而不是反引号。</p>\n</blockquote>\n<p>嵌套的反引号要求用反斜杠转义内部的反引号。而 <code>$(command)</code> 形式嵌套时不需要改变，而且更易于阅读。</p>\n<p>例如：</p>\n<div><pre><code><span># This is preferred:</span>\n<span>var</span><span>=</span><span>\"$(command \"<span><span>$(</span>command1<span>)</span></span>\"</span><span>)</span><span>\"\n\n# This is not:\nvar=\"</span><span><span>`</span><span>command</span> <span>\\</span><span>`</span></span>command1<span>\\</span>``\"\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_6-2-test-和\"> 6.2 test, [和[[</h3>\n<blockquote>\n<p>推荐使用 <code>[[ ... ]]</code> ，而不是 <code>[</code> , <code>test</code> , 和 <code>/usr/bin/ [</code> 。</p>\n</blockquote>\n<p>因为在<code>[[</code>和<code>]]</code>之间不会有路径名称扩展或单词分割发生，所以使用<code>[[ ... ]]</code>能够减少错误。而且<code>[[ ... ]]</code>允许正则表达式匹配，而<code>[ ... ]</code>不允许。</p>\n<div><pre><code><span># This ensures the string on the left is made up of characters in the</span>\n<span># alnum character class followed by the string name.</span>\n<span># Note that the RHS should not be quoted here.</span>\n<span># For the gory details, see</span>\n<span># E14 at http://tiswww.case.edu/php/chet/bash/FAQ</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"filename\"</span> <span>=</span>~ ^<span>[</span><span>[</span>:alnum:<span>]</span><span>]</span>+name <span>]</span><span>]</span><span>;</span> <span>then</span>\n  <span>echo</span> <span>\"Match\"</span>\n<span>fi</span>\n\n<span># This matches the exact pattern \"f*\" (Does not match in this case)</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"filename\"</span> <span>==</span> <span>\"f*\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  <span>echo</span> <span>\"Match\"</span>\n<span>fi</span>\n\n<span># This gives a \"too many arguments\" error as f* is expanded to the</span>\n<span># contents of the current directory</span>\n<span>if</span> <span>[</span> <span>\"filename\"</span> <span>==</span> f* <span>]</span><span>;</span> <span>then</span>\n  <span>echo</span> <span>\"Match\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id=\"_6-3-测试字符串\"> 6.3 测试字符串</h3>\n<blockquote>\n<p>尽可能使用引用，而不是过滤字符串。</p>\n</blockquote>\n<p>Bash足以在测试中处理空字符串。所以，请使用空（非空）字符串测试，而不是过滤字符，使得代码更易于阅读。</p>\n<div><pre><code><span># Do this:</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>${my_var}</span>\"</span> <span>=</span> <span>\"some_string\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  do_something\n<span>fi</span>\n\n<span># -z (string length is zero) and -n (string length is not zero) are</span>\n<span># preferred over testing for an empty string</span>\n<span>if</span> <span>[</span><span>[</span> -z <span>\"<span>${my_var}</span>\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  do_something\n<span>fi</span>\n\n<span># This is OK (ensure quotes on the empty side), but not preferred:</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>${my_var}</span>\"</span> <span>=</span> <span>\"\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  do_something\n<span>fi</span>\n\n<span># Not this:</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>${my_var}</span>X\"</span> <span>=</span> <span>\"some_stringX\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  do_something\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>为了避免对你测试的目的产生困惑，请明确使用<code>-z</code>或者<code>-n</code></p>\n<div><pre><code><span># Use this</span>\n<span>if</span> <span>[</span><span>[</span> -n <span>\"<span>${my_var}</span>\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  do_something\n<span>fi</span>\n\n<span># Instead of this as errors can occur if ${my_var} expands to a test</span>\n<span># flag</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>${my_var}</span>\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  do_something\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"_6-4-文件名的通配符扩展\"> 6.4 文件名的通配符扩展</h3>\n<blockquote>\n<p>当进行文件名的通配符扩展时，请使用明确的路径。</p>\n</blockquote>\n<p>为文件名可能以 <code>-</code> 开头，所以使用扩展通配符 <code>./*</code> 比<code>*</code> 来得安全得多。</p>\n<div><pre><code><span># Here's the contents of the directory:</span>\n<span># -f  -r  somedir  somefile</span>\n\n<span># This deletes almost everything in the directory by force</span>\npsa@bilby$ <span>rm</span> -v *\nremoved directory: <span><span>`</span>somedir'\nremoved <span>`</span></span>somefile<span>'\n\n# As opposed to:\npsa@bilby$ rm -v ./*\nremoved <span><span>`</span>./-f'\nremoved <span>`</span></span>./-r'</span>\nrm: cannot remove <span><span>`</span>./somedir': Is a directory\nremoved <span>`</span></span>./somefile'\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id=\"_6-5-eval\"> 6.5 Eval</h3>\n<blockquote>\n<p>应该避免使用eval。</p>\n</blockquote>\n<p>当用于给变量赋值时，Eval解析输入，并且能够设置变量，但无法检查这些变量是什么。</p>\n<div><pre><code><span># What does this set?</span>\n<span># Did it succeed? In part or whole?</span>\n<span>eval</span> <span><span>$(</span>set_my_variables<span>)</span></span>\n\n<span># What happens if one of the returned values has a space in it?</span>\n<span>variable</span><span>=</span><span>\"<span><span>$(</span><span>eval</span> some_function<span>)</span></span>\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_6-6-管道导向while循环\"> 6.6 管道导向while循环</h3>\n<blockquote>\n<p>请使用过程替换或者for循环，而不是管道导向while循环。在while循环中被修改的变量是不能传递给父shell的，因为循环命令是在一个子shell中运行的。</p>\n</blockquote>\n<p>管道导向while循环中的隐式子shell使得追踪bug变得很困难。</p>\n<div><pre><code><span>last_line</span><span>=</span><span>'NULL'</span>\nyour_command <span>|</span> <span>while</span> <span>read</span> line<span>;</span> <span>do</span>\n  <span>last_line</span><span>=</span><span>\"<span>${line}</span>\"</span>\n<span>done</span>\n\n<span># This will output 'NULL'</span>\n<span>echo</span> <span>\"<span>${last_line}</span>\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>如果你确定输入中不包含空格或者特殊符号（通常意味着不是用户输入的），那么可以使用一个for循环。</p>\n<div><pre><code><span>total</span><span>=</span><span>0</span>\n<span># Only do this if there are no spaces in return values.</span>\n<span>for</span> <span>value</span> <span>in</span> <span><span>$(</span><span>command</span><span>)</span></span><span>;</span> <span>do</span>\n  <span>total</span><span>+=</span><span>\"<span>${value}</span>\"</span>\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>使用过程替换允许重定向输出，但是请将命令放入一个显式的子shell中，而不是bash为while循环创建的隐式子shell。</p>\n<div><pre><code><span>total</span><span>=</span><span>0</span>\n<span>last_file</span><span>=</span>\n<span>while</span> <span>read</span> count filename<span>;</span> <span>do</span>\n  <span>total</span><span>+=</span><span>\"<span>${count}</span>\"</span>\n  <span>last_file</span><span>=</span><span>\"<span>${filename}</span>\"</span>\n<span>done</span> <span>&lt;</span> <span>&lt;</span><span>(</span>your_command <span>|</span> <span>uniq</span> -c<span>)</span>\n\n<span># This will output the second field of the last line of output from</span>\n<span># the command.</span>\n<span>echo</span> <span>\"Total = <span>${total}</span>\"</span>\n<span>echo</span> <span>\"Last one = <span>${last_file}</span>\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>当不需要传递复杂的结果给父shell时可以使用while循环。这通常需要一些更复杂的“解析”。请注意简单的例子使用如awk这类工具可能更容易完成。当你特别不希望改变父shell的范围变量时这可能也是有用的。</p>\n<div><pre><code><span># Trivial implementation of awk expression:</span>\n<span>#   awk '$3 == \"nfs\" { print $2 \" maps to \" $1 }' /proc/mounts</span>\n<span>cat</span> /proc/mounts <span>|</span> <span>while</span> <span>read</span> src dest <span>type</span> opts rest<span>;</span> <span>do</span>\n  <span>if</span> <span>[</span><span>[</span> <span>${type}</span> <span>==</span> <span>\"nfs\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n    <span>echo</span> <span>\"NFS <span>${dest}</span> maps to <span>${src}</span>\"</span>\n  <span>fi</span>\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_7-命名约定\"> 7 命名约定</h2>\n<h3 id=\"_7-1-函数名\"> 7.1 函数名</h3>\n<blockquote>\n<p>使用小写字母，并用下划线分隔单词。使用双冒号<code>::</code>分隔库。函数名之后必须有圆括号。关键词<code>function</code>是可选的，但必须在一个项目中保持一致。</p>\n</blockquote>\n<p>如果你正在写单个函数，请用小写字母来命名，并用下划线分隔单词。如果你正在写一个包，使用双冒号<code>::</code>来分隔包名。大括号必须和函数名位于同一行（就像在Google的其他语言一样），并且函数名和圆括号之间没有空格。</p>\n<div><pre><code><span># Single function</span>\n<span>my_func</span><span>(</span><span>)</span> <span>{</span>\n  <span>..</span>.\n<span>}</span>\n\n<span># Part of a package</span>\nmypackage::<span>my_func</span><span>(</span><span>)</span> <span>{</span>\n  <span>..</span>.\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>当函数名后存在 () 时，关键词 function 是多余的。但是其促进了函数的快速辨识。</p>\n<h3 id=\"_7-2-变量名\"> 7.2 变量名</h3>\n<blockquote>\n<p>如函数名</p>\n</blockquote>\n<p>循环的变量名应该和循环的任何变量同样命名。</p>\n<div><pre><code><span>for</span> <span>zone</span> <span>in</span> <span>${zones}</span><span>;</span> <span>do</span>\n  something_with <span>\"<span>${zone}</span>\"</span>\n<span>done</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_7-3-常量和环境变量名\"> 7.3 常量和环境变量名</h3>\n<blockquote>\n<p>全部大写，用下划线分隔，声明在文件的顶部。</p>\n</blockquote>\n<p>常量和任何导出到环境中的都应该大写。</p>\n<div><pre><code><span># Constant</span>\n<span>readonly</span> <span>PATH_TO_FILES</span><span>=</span><span>'/some/path'</span>\n\n<span># Both constant and environment</span>\n<span>declare</span> -xr <span>ORACLE_SID</span><span>=</span><span>'PROD'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>第一次设置时有一些就变成了常量（例如，通过getopts）。因此，可以在getopts中或基于条件来设定常量，但之后应该立即设置其为只读。值得注意的是，在函数中<code>declare</code>不会对全局变量进行操作。所以推荐使用<code>readonly</code>和<code>export</code>来代替。</p>\n<div><pre><code><span>VERBOSE</span><span>=</span><span>'false'</span>\n<span>while</span> <span>getopts</span> <span>'v'</span> flag<span>;</span> <span>do</span>\n  <span>case</span> <span>\"<span>${flag}</span>\"</span> <span>in</span>\n    <span>v</span><span>)</span> <span>VERBOSE</span><span>=</span><span>'true'</span> <span>;</span><span>;</span>\n  <span>esac</span>\n<span>done</span>\n<span>readonly</span> VERBOSE\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_7-4-源文件名\"> 7.4 源文件名</h3>\n<blockquote>\n<p>小写，如果需要的话使用下划线分隔单词。</p>\n</blockquote>\n<p>这是为了和在Google中的其他代码风格保持一致：<code>maketemplate</code>或者<code>make_template</code>，而不是<code>make-template</code>。</p>\n<h3 id=\"_7-5-只读变量\"> 7.5 只读变量</h3>\n<blockquote>\n<p>使用 readonly 或者 declare -r 来确保变量只读。</p>\n</blockquote>\n<p>因为全局变量在shell中广泛使用，所以在使用它们的过程中捕获错误是很重要的。当你声明了一个变量，希望其只读，那么请明确指出。</p>\n<div><pre><code><span>zip_version</span><span>=</span><span>\"<span><span>$(</span>dpkg --status <span>zip</span> <span>|</span> <span>grep</span> Version: <span>|</span> <span>cut</span> -d <span>' '</span> -f <span>2</span><span>)</span></span>\"</span>\n<span>if</span> <span>[</span><span>[</span> -z <span>\"<span>${zip_version}</span>\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  error_message\n<span>else</span>\n  <span>readonly</span> zip_version\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_7-6-使用本地变量\"> 7.6 使用本地变量</h3>\n<blockquote>\n<p>使用<code>local</code>声明特定功能的变量。声明和赋值应该在不同行。</p>\n</blockquote>\n<p>使用<code>local</code>来声明局部变量以确保其只在函数内部和子函数中可见。这避免了污染全局命名空间和不经意间设置可能具有函数之外重要性的变量。</p>\n<p>当赋值的值由命令替换提供时，声明和赋值必须分开。因为内建的<code>local</code>不会从命令替换中传递退出码。</p>\n<div><pre><code><span>my_func2</span><span>(</span><span>)</span> <span>{</span>\n  <span>local</span> <span>name</span><span>=</span><span>\"<span>$1</span>\"</span>\n\n  <span># Separate lines for declaration and assignment:</span>\n  <span>local</span> my_var\n  <span>my_var</span><span>=</span><span>\"<span><span>$(</span>my_func<span>)</span></span>\"</span> <span>||</span> <span>return</span>\n\n  <span># DO NOT do this: $? contains the exit code of 'local', not my_func</span>\n  <span>local</span> <span>my_var</span><span>=</span><span>\"<span><span>$(</span>my_func<span>)</span></span>\"</span>\n  <span>[</span><span>[</span> <span>$?</span> -eq <span>0</span> <span>]</span><span>]</span> <span>||</span> <span>return</span>\n\n  <span>..</span>.\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id=\"_7-7-函数位置\"> 7.7 函数位置</h3>\n<blockquote>\n<p>将文件中所有的函数一起放在常量下面。不要在函数之间隐藏可执行代码。</p>\n</blockquote>\n<p>如果你有函数，请将他们一起放在文件头部。只有includes，<code>set</code>声明和常量设置可能在函数声明之前完成。不要在函数之间隐藏可执行代码。如果那样做，会使得代码在调试时难以跟踪并出现意想不到的讨厌结果。</p>\n<h3 id=\"_7-8-主函数main\"> 7.8 主函数main</h3>\n<blockquote>\n<p>对于包含至少一个其他函数的足够长的脚本，需要称为<code>main</code>的函数。</p>\n</blockquote>\n<p>为了方便查找程序的开始，将主程序放入一个称为<code>main</code>的函数，作为最下面的函数。这使其和代码库的其余部分保持一致性，同时允许你定义更多变量为局部变量（如果主代码不是一个函数就不能这么做）。文件中最后的非注释行应该是对<code>main</code>函数的调用。</p>\n<div><pre><code>main <span>\"<span>$@</span>\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>显然，对于仅仅是线性流的短脚本， <code>main</code> 是矫枉过正，因此是不需要的。</p>\n<h2 id=\"_8-调用命令\"> 8 调用命令</h2>\n<h3 id=\"_8-1-检查返回值\"> 8.1 检查返回值</h3>\n<blockquote>\n<p>总是检查返回值，并给出信息返回值。</p>\n</blockquote>\n<p>对于非管道命令，使用 <code>$?</code> 或直接通过一个 <code>if</code> 语句来检查以保持其简洁。</p>\n<p>例如：</p>\n<div><pre><code><span>if</span> <span>!</span> <span>mv</span> <span>\"<span>${file_list}</span>\"</span> <span>\"<span>${dest_dir}</span>/\"</span> <span>;</span> <span>then</span>\n  <span>echo</span> <span>\"Unable to move <span>${file_list}</span> to <span>${dest_dir}</span>\"</span> <span>></span><span>&amp;2</span>\n  <span>exit</span> <span>\"<span>${E_BAD_MOVE}</span>\"</span>\n<span>fi</span>\n\n<span># Or</span>\n<span>mv</span> <span>\"<span>${file_list}</span>\"</span> <span>\"<span>${dest_dir}</span>/\"</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>$?</span>\"</span> -ne <span>0</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  <span>echo</span> <span>\"Unable to move <span>${file_list}</span> to <span>${dest_dir}</span>\"</span> <span>></span><span>&amp;2</span>\n  <span>exit</span> <span>\"<span>${E_BAD_MOVE}</span>\"</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>Bash也有<code>PIPESTATUS</code>变量，允许检查从管道所有部分返回的代码。如果仅仅需要检查整个管道是成功还是失败，以下的方法是可以接受的：</p>\n<div><pre><code><span>tar</span> -cf - ./* <span>|</span> <span>(</span> <span>cd</span> <span>\"<span>${dir}</span>\"</span> <span>&amp;&amp;</span> <span>tar</span> -xf - <span>)</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>${<span>PIPESTATUS</span><span>[</span>0<span>]</span>}</span>\"</span> -ne <span>0</span> <span>||</span> <span>\"<span>${<span>PIPESTATUS</span><span>[</span>1<span>]</span>}</span>\"</span> -ne <span>0</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  <span>echo</span> <span>\"Unable to tar files to <span>${dir}</span>\"</span> <span>></span><span>&amp;2</span>\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>可是，只要你运行任何其他命令，<code>PIPESTATUS</code>将会被覆盖。如果你需要基于管道中发生的错误执行不同的操作，那么你需要在运行命令后立即将<code>PIPESTATUS</code>赋值给另一个变量（别忘了 <code>[</code> 是一个会将<code>PIPESTATUS</code>擦除的命令）。</p>\n<div><pre><code><span>tar</span> -cf - ./* <span>|</span> <span>(</span> <span>cd</span> <span>\"<span>${DIR}</span>\"</span> <span>&amp;&amp;</span> <span>tar</span> -xf - <span>)</span>\n<span>return_codes</span><span>=</span><span>(</span><span>${<span>PIPESTATUS</span><span>[</span>*<span>]</span>}</span><span>)</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>${return_codes<span>[</span>0<span>]</span>}</span>\"</span> -ne <span>0</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  do_something\n<span>fi</span>\n<span>if</span> <span>[</span><span>[</span> <span>\"<span>${return_codes<span>[</span>1<span>]</span>}</span>\"</span> -ne <span>0</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n  do_something_else\n<span>fi</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"_8-2-内建命令和外部命令\"> 8.2 内建命令和外部命令</h3>\n<blockquote>\n<p>可以在调用shell内建命令和调用另外的程序之间选择，请选择内建命令。</p>\n</blockquote>\n<p>我们更喜欢使用内建命令，如在 <code>bash(1)</code> 中参数扩展函数。因为它更强健和便携（尤其是跟像 <code>sed</code> 这样的命令比较）</p>\n<p>例如：</p>\n<div><pre><code><span># Prefer this:</span>\n<span>addition</span><span>=</span><span><span>$((</span>${X} <span>+</span> ${Y}<span>))</span></span>\n<span>substitution</span><span>=</span><span>\"<span>${string<span>/</span><span>#</span>foo<span>/</span>bar}</span>\"</span>\n\n<span># Instead of this:</span>\n<span>addition</span><span>=</span><span>\"<span><span>$(</span><span>expr</span> $<span>{</span>X<span>}</span> + $<span>{</span>Y<span>}</span><span>)</span></span>\"</span>\n<span>substitution</span><span>=</span><span>\"<span><span>$(</span><span>echo</span> <span>\"<span>${string}</span>\"</span> <span>|</span> <span>sed</span> -e <span>'s/^foo/bar/'</span><span>)</span></span>\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "Google"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "开机集成zabbix和jumpserver脚本",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part7/shili/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/part7/shili/",
      "content_html": "<h2 id=\"开机集成zabbix和jumpserver脚本\"> 开机集成zabbix和jumpserver脚本</h2>\n<div><pre><code><span>#!/bin/bash</span>\n<span>LOCAL_PASS</span><span>=</span><span>\"****\"</span>\n<span>ANS_PASS</span><span>=</span><span>\"****\"</span>\n<span>INVENTORY_FILE</span><span>=</span><span>\"/etc/ansible/playbook/zabbix/inventory/zabbix.yml\"</span>\n<span>ZABBIX_PALYBOOK_FILE</span><span>=</span><span>\"/etc/ansible/playbook/zabbix/new-zabbix-agent.yml\"</span>\n<span>IP</span><span>=</span><span><span>$(</span><span>ifconfig</span> <span>|</span> <span>grep</span> broadcast <span>|</span> <span>awk</span> <span>'{ print <span>$2</span> }'</span><span>)</span></span>\n<span>LAST_TWO_IP</span><span>=</span><span><span>$(</span><span>echo</span> $IP <span>|</span> <span>cut</span> -d. -f3-4<span>)</span></span>\n\n<span>node</span><span>=</span><span>\"f6d2228f-c474-4b1e-ac8b-5c7d10e63b53\"</span>\n\n<span>update_ssh</span><span>(</span><span>)</span> <span>{</span>\n  <span>sed</span> -i <span>'s/PasswordAuthentication no/PasswordAuthentication yes/g'</span> /etc/ssh/sshd_config\n  systemctl restart sshd <span>></span> /dev/null <span><span>2</span>></span><span>&amp;1</span>\n  <span>echo</span> <span>\"<span>${LOCAL_PASS}</span>\"</span> <span>|</span> <span>passwd</span> root --stdin  <span>></span> /dev/null <span><span>2</span>></span><span>&amp;1</span>\n<span>}</span>\n\n<span>integrate_jms</span><span>(</span><span>)</span> <span>{</span>\n  <span>if</span> <span>[</span><span>[</span> <span>\"<span>${1}</span>\"</span> <span>==</span> <span>\"csp\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n    <span>node</span><span>=</span><span>\"b256f30b-896e-44cd-90f0-0fc28984afe9\"</span>\n  <span>elif</span> <span>[</span><span>[</span> <span>\"<span>${1}</span>\"</span> <span>==</span> <span>\"bes\"</span> <span>]</span><span>]</span><span>;</span> <span>then</span>\n    <span>node</span><span>=</span><span>\"b594957e-d6e8-4c85-92e6-b89757792e1a\"</span>\n  <span>fi</span> \n  <span>curl</span> -XPOST -H <span>'Authorization: Token d54c30e98f49de8e4e75bd3c28f214d0dea761ca'</span> <span>\\</span>\n    -H <span>\"Content-Type:application/json\"</span> http://192.168.162.10/api/v1/assets/assets/ <span>\\</span>\n    -d <span>\"{ <span title=\"\\&quot;\">\\\"</span>ip<span title=\"\\&quot;\">\\\"</span>: <span title=\"\\&quot;\">\\\"</span><span>${IP}</span><span title=\"\\&quot;\">\\\"</span>, <span title=\"\\&quot;\">\\\"</span>hostname<span title=\"\\&quot;\">\\\"</span>: <span title=\"\\&quot;\">\\\"</span><span>${LAST_TWO_IP}</span>-<span>${2}</span><span title=\"\\&quot;\">\\\"</span>, \n        <span title=\"\\&quot;\">\\\"</span>protocol<span title=\"\\&quot;\">\\\"</span>: <span title=\"\\&quot;\">\\\"</span>ssh<span title=\"\\&quot;\">\\\"</span>, <span title=\"\\&quot;\">\\\"</span>port<span title=\"\\&quot;\">\\\"</span>: 22, <span title=\"\\&quot;\">\\\"</span>protocols<span title=\"\\&quot;\">\\\"</span>: [ <span title=\"\\&quot;\">\\\"</span>ssh/22<span title=\"\\&quot;\">\\\"</span> ], \n        <span title=\"\\&quot;\">\\\"</span>platform<span title=\"\\&quot;\">\\\"</span>: <span title=\"\\&quot;\">\\\"</span>Linux<span title=\"\\&quot;\">\\\"</span>, <span title=\"\\&quot;\">\\\"</span>is_active<span title=\"\\&quot;\">\\\"</span>: true, \n        <span title=\"\\&quot;\">\\\"</span>admin_user<span title=\"\\&quot;\">\\\"</span>: <span title=\"\\&quot;\">\\\"</span>59bb8ee8-98ad-4aac-a1a7-3e1b2b83f38f<span title=\"\\&quot;\">\\\"</span>, \n        <span title=\"\\&quot;\">\\\"</span>nodes<span title=\"\\&quot;\">\\\"</span>: [ <span title=\"\\&quot;\">\\\"</span><span>${node}</span><span title=\"\\&quot;\">\\\"</span> ]}\"</span>\n<span>}</span>\n\n<span>integrate_ans_zbx</span><span>(</span><span>)</span> <span>{</span>\n  /usr/bin/expect <span>&lt;&lt;</span><span>EOF\n  set timeout 180\n  spawn ssh root@192.168.162.1\n  expect {\n    \"(yes/no)?\" {\n      send \"yes<span title=\"\\r\">\\r</span>\";\n      expect \"password:\";\n      send \"<span>${ANS_PASS}</span><span title=\"\\r\">\\r</span>\";\n      exp_continue;\n    }\n    \"password:\" {\n      send \"<span>${ANS_PASS}</span><span title=\"\\r\">\\r</span>\";\n      exp_continue;\n    }\n    \"*#\" {\n      send \"sed -i '/# <span>${1}</span> insert/i\\  <span>${IP}</span>:' <span>${INVENTORY_FILE}</span><span title=\"\\r\">\\r</span>\";\n      send \"sed -i 's/<span>${IP}</span>/        <span>${IP}</span>/g' <span>${INVENTORY_FILE}</span><span title=\"\\r\">\\r</span>\";\n      send \" ansible-playbook -i <span>${INVENTORY_FILE}</span> <span>${ZABBIX_PALYBOOK_FILE}</span> \\\n             -l <span>${IP}</span> --skip-tags 'sangoma,debian,suse,windows,docker'<span title=\"\\r\">\\r</span>\";\n    }\n  }\n  expect eof\nEOF</span>\n<span>}</span>\n\n<span>main</span><span>(</span><span>)</span> <span>{</span>\n  update_ssh\n  integrate_jms <span>\"<span>$@</span>\"</span>\n  integrate_ans_zbx <span>\"<span>$@</span>\"</span> \n<span>}</span>\n\nmain <span>\"<span>$@</span>\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br></div></div>",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "基本权限 UGO",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/%E5%9F%BA%E6%9C%AC%E6%9D%83%E9%99%90UGO/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/%E5%9F%BA%E6%9C%AC%E6%9D%83%E9%99%90UGO/",
      "content_html": "<h2 id=\"基本权限-ugo\"> 基本权限 UGO</h2>\n<p>文件权限设置： 可以赋于某个用户或组  能够以何种方式  访问某个文件</p>\n<p>文件权限管理之： UGO设置基本权限(r、w、x)</p>\n<div><pre><code>    rw-r--r--  alice hr  install.log\n</code></pre>\n<div><span>1</span><br></div></div><p>权限对象：</p>\n<ul>\n<li>属主： u</li>\n<li>属组：g</li>\n<li>其他人： o</li>\n</ul>\n<p>权限类型：</p>\n<ul>\n<li>\n<p>读：r  4</p>\n</li>\n<li>\n<p>写：w 2</p>\n</li>\n<li>\n<p>执行： x 1</p>\n</li>\n</ul>\n<h3 id=\"设置权限\"> 设置权限</h3>\n<ol>\n<li>更改文件的属主、属组</li>\n</ol>\n<ul>\n<li>chown：</li>\n</ul>\n<div><pre><code>chown ops.sre file1 //改属主、属组\nchown ops file1     //只改属主\nchown .ser file1\t//只改属组\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>\n<li>chgrp：</li>\n</ul>\n<div><pre><code>chgrp it file1\t    //改文件属组\nchgrp -R it dir1\t//改变目录dir1的属组及其目录下已有文件的属组\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ol start=\"2\">\n<li>更改权限</li>\n</ol>\n<ul>\n<li>使用符号</li>\n</ul>\n<div><pre><code>chmod u+x file1\t\t //属主增加执行\nchmod a=rwx file1\t //所有人等于读写执行\nchmod a=- file1\t     //所有人没有权限\nchmod ug=rw,o=r file1 //属主属组等于读写，其他人只读\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>\n<li>使用数字</li>\n</ul>\n<div><pre><code>chmod 644 file1  //给file1 属主读写，属组和其他读的权限\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"r、w、x权限对文件和目录的意义\"> r、w、x权限对文件和目录的意义</h3>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>对文件的影响</th>\n<th>对目录的影响</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r（读取）</td>\n<td>可以读取文件的内容</td>\n<td>可以列出目录的内容（文件名）</td>\n</tr>\n<tr>\n<td>w（写入）</td>\n<td>可以更改文件的内容</td>\n<td>可以创建或删除目录中的任一文件</td>\n</tr>\n<tr>\n<td>x（可执行）</td>\n<td>可以作为命令执行文件</td>\n<td>可以访问目录的内容（取决于目录中文件的权限）</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-09-09T08:57:53.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "创建、复制、移动、删除",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/zsgc/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/zsgc/",
      "content_html": "<h2 id=\"创建、复制、移动、删除\"> 创建、复制、移动、删除</h2>\n<h3 id=\"touch命令-创建文件\"> touch命令（创建文件）</h3>\n<p>linux的touch命令不常用，一般在使用make的时候可能会用到，用来修改文件时间戳，或者新建一个不存在的文件。</p>\n<h4 id=\"语法\"> 语法</h4>\n<p><code>touch(选项)(参数)</code></p>\n<p>选项</p>\n<div><pre><code>-a：或--time=atime或--time=access或--time=use  只更改存取时间；\n-c：或--no-create  不建立任何文件；\n-d：&lt;时间日期&gt; 使用指定的日期时间，而非现在的时间；\n-f：此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题；\n-m：或--time=mtime或--time=modify  只更该变动时间；\n-r：&lt;参考文件或目录&gt;  把指定文件或目录的日期时间，统统设成和参考文件或目录的日期时间相同；\n-t：&lt;日期时间&gt;  使用指定的日期时间，而非现在的时间；\n--help：在线帮助；\n--version：显示版本信息。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id=\"功能\"> 功能</h4>\n<p>touch命令参数可更改文档或目录的日期时间，包括存取时间和更改时间。</p>\n<h4 id=\"常用范例\"> 常用范例</h4>\n<p>1）创建不存在的文件</p>\n<div><pre><code># touch log2012.log log2013.log\n# ll\n-rw-r--r-- 1 root root    0 10-28 16:01 log2012.log\n-rw-r--r-- 1 root root    0 10-28 16:01 log2013.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>如果log2014.log不存在，则不创建文件</p>\n<div><pre><code># touch -c log2014.log\n# ll\n-rw-r--r-- 1 root root    0 10-28 16:01 log2012.log\n-rw-r--r-- 1 root root    0 10-28 16:01 log2013.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>2）更新log.log的时间和log2012.log时间戳相同</p>\n<div><pre><code># ll\n-rw-r--r-- 1 root root    0 10-28 16:01 log2012.log\n-rw-r--r-- 1 root root    0 10-28 16:01 log2013.log\n-rw-r--r-- 1 root root    0 10-28 14:48 log.log\n# touch -r log.log log2012.log \n# ll\n-rw-r--r-- 1 root root    0 10-28 14:48 log2012.log\n-rw-r--r-- 1 root root    0 10-28 16:01 log2013.log\n-rw-r--r-- 1 root root    0 10-28 14:48 log.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>3）设定文件的时间戳</p>\n<div><pre><code># ll\n-rw-r--r-- 1 root root    0 10-28 14:48 log2012.log\n-rw-r--r-- 1 root root    0 10-28 16:01 log2013.log\n-rw-r--r-- 1 root root    0 10-28 14:48 log.log\n# touch -t 201211142234.50 log.log\n# ll\n-rw-r--r-- 1 root root    0 10-28 14:48 log2012.log\n-rw-r--r-- 1 root root    0 10-28 16:01 log2013.log\n-rw-r--r-- 1 root root    0 2012-11-14 log.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>说明：</p>\n<p>-t  time 使用指定的时间值 time 作为指定文件相应时间戳记的新值．此处的 time规定为如下形式的十进制数:</p>\n<p>[[CC]YY]MMDDhhmm[.SS]</p>\n<p>这里，CC为年数中的前两位，即”世纪数”；YY为年数的后两位，即某世纪中的年数．如果不给出CC的值，则touch   将把年数CCYY限定在1969--2068之内．MM为月数，DD为天将把年数CCYY限定在1969--2068之内．MM为月数，DD为天数，hh 为小时数(几点)，mm为分钟数，SS为秒数．此处秒的设定范围是0--61，这样可以处理闰秒．这些数字组成的时间是环境变量TZ指定的时区中的一个时 间．由于系统的限制，早于1970年1月1日的时间是错误的。</p>\n<p>4）同时创建多个文件</p>\n<div><pre><code><span>touch</span> file<span>{</span><span>1</span><span>..</span><span>20</span><span>}</span>\n<span>touch</span> /home/<span>{</span>aa,bb<span>}</span>\n//<span>{</span><span>}</span>里面为集合\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"mkdir命令-创建目录\"> mkdir命令（创建目录）</h3>\n<p>mkdir命令用来创建目录。该命令创建由<a href=\"http://man.linuxde.net/dirname\" target=\"_blank\" rel=\"noopener noreferrer\">dirname</a>命名的目录。如果在目录名的前面没有加任何路径名，则在当前目录下创建由dirname指定的目录；如果给出了一个已经存在的路径，将会在该目录下创建一个指定的目录。在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。</p>\n<h4 id=\"语法-2\"> 语法</h4>\n<p><code>cd (选项) (参数)</code></p>\n<h4 id=\"选项\"> 选项</h4>\n<div><pre><code>-Z：设置安全上下文，当使用SELinux时有效；\n-m&lt;目标属性&gt;或--mode&lt;目标属性&gt;建立目录的同时设置目录的权限；\n-p或--parents 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；\n-v, --verbose  每次创建新目录都显示信息\n--version 显示版本信息。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"常用范例-2\"> 常用范例</h4>\n<p>1）创建一个空目录</p>\n<div><pre><code>mkdir test1\n</code></pre>\n<div><span>1</span><br></div></div><p>2）递归创建多个目录</p>\n<div><pre><code>mkdir -p test2/test22\n</code></pre>\n<div><span>1</span><br></div></div><p>3）创建权限为777的目录</p>\n<div><pre><code>mkdir -m 777 test3\n</code></pre>\n<div><span>1</span><br></div></div><p>4）一个命令创建项目的目录结构</p>\n<div><pre><code>#mkdir -vp scf/{lib/,bin/,doc/{info,product},logs/{info,product},service/deploy/{info,product}}\nmkdir: 已创建目录 “scf”\n\nmkdir: 已创建目录 “scf/lib”\n\nmkdir: 已创建目录 “scf/bin”\n\nmkdir: 已创建目录 “scf/doc”\n\nmkdir: 已创建目录 “scf/doc/info”\n\nmkdir: 已创建目录 “scf/doc/product”\n\nmkdir: 已创建目录 “scf/logs”\n\nmkdir: 已创建目录 “scf/logs/info”\n\nmkdir: 已创建目录 “scf/logs/product”\n\nmkdir: 已创建目录 “scf/service”\n\nmkdir: 已创建目录 “scf/service/deploy”\n\nmkdir: 已创建目录 “scf/service/deploy/info”\n\nmkdir: 已创建目录 “scf/service/deploy/product”\n\n# tree scf/\n\nscf/\n\n|-- bin\n\n|-- doc\n\n|   |-- info\n\n|   `-- product\n\n|-- lib\n\n|-- logs\n\n|   |-- info\n\n|   `-- product\n\n`-- service\n\n   \t \t`-- deploy\n\n  \t    \t|-- info\n\n        \t`-- product\n\n\n12 directories, 0 files\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div><h3 id=\"cp命令-复制\"> cp命令（复制）</h3>\n<p>cp命令用来复制文件或者目录，是Linux系统中最常用的命令之一。一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。</p>\n<h4 id=\"语法-3\"> 语法</h4>\n<p><code>cp(选项)(参数)</code></p>\n<h4 id=\"选项-2\"> 选项</h4>\n<div><pre><code>-a：此参数的效果和同时指定&quot;-dpR&quot;参数相同；\n-d：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；\n-f：强行复制文件或目录，不论目标文件或目录是否已存在；\n-i：覆盖既有文件之前先询问用户；\n-l：对源文件建立硬连接，而非复制文件；\n-p：保留源文件或目录的属性；\n-R/r：递归处理，将指定目录下的所有文件与子目录一并处理；\n-s：对源文件建立符号连接，而非复制文件；\n-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；\n-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；\n-b：覆盖已存在的文件目标前将目标文件备份；\n-v：详细显示命令执行的操作。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id=\"参数\"> 参数</h4>\n<ul>\n<li>源文件：制定源文件列表。默认情况下，cp命令不能复制目录，如果要复制目录，则必须使用<code>-R</code>选项；</li>\n<li>目标文件：指定目标文件。当“源文件”为多个文件时，要求“目标文件”为指定的目录。</li>\n</ul>\n<h4 id=\"常用范例-3\"> 常用范例</h4>\n<p>1）复制单个文件到目标目录，文件在目标文件中不存在</p>\n<div><pre><code># cp log.log test5\n# ll\n-rw-r--r-- 1 root root    0 10-28 14:48 log.log\ndrwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test3\ndrwxr-xr-x 2 root root 4096 10-28 14:53 test5\n# cd test5\n# ll\n-rw-r--r-- 1 root root 0 10-28 14:46 log5-1.log\n-rw-r--r-- 1 root root 0 10-28 14:46 log5-2.log\n-rw-r--r-- 1 root root 0 10-28 14:46 log5-3.log\n-rw-r--r-- 1 root root 0 10-28 14:53 log.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>说明：</p>\n<p>在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。</p>\n<p>2）目标文件存在时，会询问是否覆盖</p>\n<div><pre><code># cp log.log test5\ncp：是否覆盖“test5/log.log”? n\n# cp -a log.log test5\ncp：是否覆盖“test5/log.log”? y\n# cd test5/\n# ll\n-rw-r--r-- 1 root root 0 10-28 14:46 log5-1.log\n-rw-r--r-- 1 root root 0 10-28 14:46 log5-2.log\n-rw-r--r-- 1 root root 0 10-28 14:46 log5-3.log\n-rw-r--r-- 1 root root 0 10-28 14:48 log.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>说明：</p>\n<p>目标文件存在时，会询问是否覆盖。这是因为cp是cp -i的别名。目标文件存在时，即使加了-f标志，也还会询问是否覆盖。</p>\n<p>3）复制整个目录</p>\n<p>目标目录存在时：</p>\n<div><pre><code>#cp -a test3 test5 \n# ll\n-rw-r--r-- 1 root root    0 10-28 14:48 log.log\ndrwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test3\ndrwxr-xr-x 3 root root 4096 10-28 15:11 test5\n# cd test5/\n# ll\n-rw-r--r-- 1 root root    0 10-28 14:46 log5-1.log\n-rw-r--r-- 1 root root    0 10-28 14:46 log5-2.log\n-rw-r--r-- 1 root root    0 10-28 14:46 log5-3.log\n-rw-r--r-- 1 root root    0 10-28 14:48 log.log\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test3\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>目标目录不存在时：</p>\n<div><pre><code># cp -a test3 test4\n# ll\n-rw-r--r-- 1 root root    0 10-28 14:48 log.log\ndrwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test3\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test4\ndrwxr-xr-x 3 root root 4096 10-28 15:11 test5\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>说明：</p>\n<p>注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。</p>\n<p>4）复制的 log.log 建立一个链接到 log_link.log</p>\n<div><pre><code># cp -s log.log log_link.log\n# ll\nlrwxrwxrwx 1 root root    7 10-28 15:18 log_link.log -&gt; log.log\n-rw-r--r-- 1 root root    0 10-28 14:48 log.log\ndrwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test3\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test4\ndrwxr-xr-x 3 root root 4096 10-28 15:11 test5\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>说明：</p>\n<p>那个 log_link.log 是由 -s 的参数造成的，建立的是一个『快捷方式』，所以您会看到在文件的最右边，会显示这个文件是『连结』到哪里去的！</p>\n<p>5）将文件file复制到目录<code>/usr/men/tmp</code>下，并改名为file1</p>\n<div><pre><code>cp file /usr/men/tmp/file1\n</code></pre>\n<div><span>1</span><br></div></div><p>6）将目录<code>/usr/men</code>下的所有文件及其子目录复制到目录<code>/usr/zh</code>中</p>\n<div><pre><code>cp -i /usr/men m*.c /usr/zh\n</code></pre>\n<div><span>1</span><br></div></div><p>我们在Linux下使用cp命令复制文件时候，有时候会需要覆盖一些同名文件，覆盖文件的时候都会有提示：需要不停的按Y来确定执行覆盖。文件数量不多还好，但是要是几百个估计按Y都要吐血了，于是折腾来半天总结了一个方法：</p>\n<div><pre><code>cp aaa/* /bbb\n复制目录aaa下所有到/bbb目录下，这时如果/bbb目录下有和aaa同名的文件，需要按Y来确认并且会略过aaa目录下的子目录。\n\ncp -r aaa/* /bbb\n这次依然需要按Y来确认操作，但是没有忽略子目录。\n\ncp -r -a aaa/* /bbb\n依然需要按Y来确认操作，并且把aaa目录以及子目录和文件属性也传递到了/bbb。\n\n\\cp -r -a aaa/* /bbb\n成功，没有提示按Y、传递了目录属性、没有略过目录。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"mv命令-移动\"> mv命令（移动）</h3>\n<p><strong>mv命令</strong>用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。source表示源文件或目录，target表示目标文件或目录。如果将一个文件移到一个已经存在的目标文件中，则目标文件的内容将被覆盖。</p>\n<p>mv命令可以用来将源文件移至一个目标文件中，或将一组文件移至一个目标目录中。源文件被移至目标文件有两种不同的结果：</p>\n<ol>\n<li>如果目标文件是到某一目录文件的路径，源文件会被移到此目录下，且文件名不变。</li>\n<li>如果目标文件不是目录文件，则源文件名（只能有一个）会变为此目标文件名，并覆盖己存在的同名文件。如果源文件和目标文件在同一个目录下，mv的作用就是改文件名。当目标文件是目录文件时，源文件或目录参数可以有多个，则所有的源文件都会被移至目标文件中。所有移到该目录下的文件都将保留以前的文件名。</li>\n</ol>\n<p>注意事项：mv与cp的结果不同，mv好像文件“搬家”，文件个数并未增加。而cp对文件进行复制，文件个数增加了。</p>\n<h4 id=\"语法-4\"> 语法</h4>\n<p><code>mv(选项)(参数)</code></p>\n<h4 id=\"选项-3\"> 选项</h4>\n<div><pre><code>--backup=&lt;备份模式&gt;：若需覆盖文件，则覆盖前先行备份；\n-b：当文件存在时，覆盖前，为其创建一个备份；\n-f：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录；\n-i：交互式操作，覆盖前先行询问用户，如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入”y”，表示将覆盖目标文件；输入”n”，表示取消对源文件的移动。这样可以避免误将文件覆盖。\n--strip-trailing-slashes：删除源文件中的斜杠“/”；\n-S&lt;后缀&gt;：为备份文件指定后缀，而不使用默认的后缀；\n-t:--target-directory=&lt;目录&gt;,指定源文件要移动到目标目录；\n-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id=\"参数-2\"> 参数</h4>\n<ul>\n<li>源文件：源文件列表。</li>\n<li>目标文件：如果“目标文件”是文件名则在移动文件的同时，将其改名为“目标文件”；如果“目标文件”是目录名则将源文件移动到“目标文件”下。</li>\n</ul>\n<h4 id=\"常用范例-4\"> 常用范例</h4>\n<p>1）文件改名</p>\n<div><pre><code># ll\n总计 20drwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root 4096 10-25 17:46 test3\ndrwxr-xr-x 2 root root 4096 10-25 17:56 test4\ndrwxr-xr-x 3 root root 4096 10-25 17:56 test5\n-rw-r--r-- 1 root root   16 10-28 06:04 test.log\n# mv test.log test1.txt\n# ll\n总计 20drwxr-xr-x 6 root root 4096 10-27 01:58 scf\n-rw-r--r-- 1 root root   16 10-28 06:04 test1.txt\ndrwxrwxrwx 2 root root 4096 10-25 17:46 test3\ndrwxr-xr-x 2 root root 4096 10-25 17:56 test4\ndrwxr-xr-x 3 root root 4096 10-25 17:56 test5\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>2）移动文件</p>\n<div><pre><code># ll\n总计 20drwxr-xr-x 6 root root 4096 10-27 01:58 scf\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\ndrwxrwxrwx 2 root root 4096 10-25 17:46 test3\ndrwxr-xr-x 2 root root 4096 10-25 17:56 test4\ndrwxr-xr-x 3 root root 4096 10-25 17:56 test5\n# mv test1.txt test3\n# ll\n总计 16drwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root 4096 10-28 06:09 test3\ndrwxr-xr-x 2 root root 4096 10-25 17:56 test4\ndrwxr-xr-x 3 root root 4096 10-25 17:56 test5\n# cd test3\n# ll\n总计 4\n-rw-r--r-- 1 root root 29 10-28 06:05 test1.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>3）将文件log1.txt,log2.txt,log3.txt移动到目录test3中</p>\n<div><pre><code># ll\n总计 28\n-rw-r--r-- 1 root root    8 10-28 06:15 log1.txt\n-rw-r--r-- 1 root root   12 10-28 06:15 log2.txt\n-rw-r--r-- 1 root root   13 10-28 06:16 log3.txt\ndrwxrwxrwx 2 root root 4096 10-28 06:09 test3\n# mv log1.txt log2.txt log3.txt test3\n# ll\n总计 16drwxrwxrwx 2 root root 4096 10-28 06:18 test3\n# cd test3/\n# ll\n总计 16\n-rw-r--r-- 1 root root  8 10-28 06:15 log1.txt\n-rw-r--r-- 1 root root 12 10-28 06:15 log2.txt\n-rw-r--r-- 1 root root 13 10-28 06:16 log3.txt\n-rw-r--r-- 1 root root 29 10-28 06:05 test1.txt\n# ll\n总计 20\n-rw-r--r-- 1 root root    8 10-28 06:15 log1.txt\n-rw-r--r-- 1 root root   12 10-28 06:15 log2.txt\n-rw-r--r-- 1 root root   13 10-28 06:16 log3.txt\ndrwxr-xr-x 2 root root 4096 10-28 06:21 logs\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\n# mv -t /opt/soft/test/test4/ log1.txt log2.txt \tlog3.txt \n]# cd ..\n# cd test4/\n# ll\n总计 12\n-rw-r--r-- 1 root root  8 10-28 06:15 log1.txt\n-rw-r--r-- 1 root root 12 10-28 06:15 log2.txt\n-rw-r--r-- 1 root root 13 10-28 06:16 log3.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><p>4）将文件file1改名为file2，如果file2已经存在，则询问是否覆盖</p>\n<div><pre><code># ll\n总计 12\n-rw-r--r-- 1 root root  8 10-28 06:15 log1.txt\n-rw-r--r-- 1 root root 12 10-28 06:15 log2.txt\n-rw-r--r-- 1 root root 13 10-28 06:16 log3.txt\n# cat log1.txt \nodfdfs\n# cat log2.txt \nererwerwer\n# mv -i log1.txt log2.txt \nmv：是否覆盖“log2.txt”? y\n# cat log2.txt \nodfdfs\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>5）将文件file1改名为file2，即使file2存在，也是直接覆盖掉</p>\n<div><pre><code># ll\n总计 8\n-rw-r--r-- 1 root root  8 10-28 06:15 log2.txt\n-rw-r--r-- 1 root root 13 10-28 06:16 log3.txt\n# cat log2.txt \nodfdfs\n# cat log3\ncat: log3: 没有那个文件或目录\n# ll\n总计 8\n-rw-r--r-- 1 root root  8 10-28 06:15 log2.txt\n-rw-r--r-- 1 root root 13 10-28 06:16 log3.txt\n# cat log2.txt \nodfdfs\n# cat log3.txt \ndfosdfsdfdss\n# mv -f log3.txt log2.txt \n# cat log2.txt \ndfosdfsdfdss\n# ll\n总计 4\n-rw-r--r-- 1 root root 13 10-28 06:16 log2.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>说明：</p>\n<p>log3.txt的内容直接覆盖了log2.txt内容，-f 这是个危险的选项，使用的时候一定要保持头脑清晰，一般情况下最好不用加上它。</p>\n<p>6）目录的移动</p>\n<div><pre><code>ll\n-rw-r--r-- 1 root root 13 10-28 06:16 log2.txt\n# ll\n-rw-r--r-- 1 root root 13 10-28 06:16 log2.txt\n# cd ..\n# ll\ndrwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 3 root root 4096 10-28 06:24 test3\ndrwxr-xr-x 2 root root 4096 10-28 06:48 test4\ndrwxr-xr-x 3 root root 4096 10-25 17:56 test5\n# cd test3\n# ll\ndrwxr-xr-x 2 root root 4096 10-28 06:21 logs\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\n# cd ..\n# mv test4 test3\n# ll\ndrwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 4 root root 4096 10-28 06:54 test3\ndrwxr-xr-x 3 root root 4096 10-25 17:56 test5\n# cd test3/\n# ll\ndrwxr-xr-x 2 root root 4096 10-28 06:21 log\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\ndrwxr-xr-x 2 root root 4096 10-28 06:48 test4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>说明：</p>\n<p>如果目录dir2不存在，将目录dir1改名为dir2；否则，将dir1移动到dir2中。</p>\n<p>7）移动当前文件夹下的所有文件到上一级目录</p>\n<div><pre><code># ll\n-rw-r--r-- 1 root root 25 10-28 07:02 log1.txt\n-rw-r--r-- 1 root root 13 10-28 06:16 log2.txt\n# mv * ../\n# ll\n# cd ..\n# ll\n-rw-r--r-- 1 root root   25 10-28 07:02 log1.txt\n-rw-r--r-- 1 root root   13 10-28 06:16 log2.txt\ndrwxr-xr-x 2 root root 4096 10-28 06:21 logs\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\ndrwxr-xr-x 2 root root 4096 10-28 07:02 test4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>8）把当前目录的一个子目录里的文件移动到另一个子目录里</p>\n<div><pre><code># ll\ndrwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 4 root root 4096 10-28 07:02 test3\ndrwxr-xr-x 3 root root 4096 10-25 17:56 test5\n# cd test3\n# ll\n-rw-r--r-- 1 root root   25 10-28 07:02 log1.txt\n-rw-r--r-- 1 root root   13 10-28 06:16 log2.txt\ndrwxr-xr-x 2 root root 4096 10-28 06:21 logs\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\ndrwxr-xr-x 2 root root 4096 10-28 07:02 test4\n# cd ..\n# mv test3/*.txt test5\n# cd test5\n# ll\n-rw-r--r-- 1 root root   25 10-28 07:02 log1.txt\n-rw-r--r-- 1 root root   13 10-28 06:16 log2.txt\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\ndrwxr-xr-x 2 root root 4096 10-25 17:56 test5-1\n# \tcd ..\n# cd test3/\n# ll\ndrwxr-xr-x 2 root root 4096 10-28 06:21 logs\ndrwxr-xr-x 2 root root 4096 10-28 07:02 test4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>9）文件被覆盖前做简单备份，前面加参数-b</p>\n<div><pre><code># ll\n-rw-r--r-- 1 root root   25 10-28 07:02 log1.txt\n-rw-r--r-- 1 root root   13 10-28 06:16 log2.txt\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\ndrwxr-xr-x 2 root root 4096 10-25 17:56 test5-1\n# mv log1.txt -b log2.txt\nmv：是否覆盖“log2.txt”? y\n# ll\n-rw-r--r-- 1 root root   25 10-28 07:02 log2.txt\n-rw-r--r-- 1 root root   13 10-28 06:16 log2.txt~\n-rw-r--r-- 1 root root   29 10-28 06:05 test1.txt\ndrwxr-xr-x 2 root root 4096 10-25 17:56 test5-1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>说明：</p>\n<p>-b 不接受参数，mv会去读取环境变量VERSION_CONTROL来作为备份策略。</p>\n<p>--backup该选项指定如果目标文件存在时的动作，共有四种备份策略：</p>\n<p>1.CONTROL=none或off : 不备份。</p>\n<p>2.CONTROL=numbered或t：数字编号的备份</p>\n<p>3.CONTROL=existing或nil：如果存在以数字编号的备份，则继续编号备份m+1...n：</p>\n<p>执行mv操作前已存在以数字编号的文件log2.txt.<sub>1</sub>，那么再次执行将产生log2.txt<sub>2</sub>，以次类推。如果之前没有以数字编号的文件，则使用下面讲到的简单备份。</p>\n<p>4.CONTROL=simple或never：使用简单备份：在被覆盖前进行了简单备份，简单备份只能有一份，再次被覆盖时，简单备份也会被覆盖。</p>\n<h3 id=\"rm命令-删除\"> rm命令（删除）</h3>\n<p>rm命令可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。</p>\n<p>rm是一个危险的命令，使用的时候要特别当心，尤其对于新手，否则整个系统就会毁在这个命令（比如在/（根目录）下执行rm * -rf）。所以，我们在执行rm之前最好先确认一下在哪个目录，到底要删除什么东西，操作时保持高度清醒的头脑。</p>\n<h4 id=\"语法-5\"> 语法</h4>\n<p><code>rm (选项)(参数)</code></p>\n<h4 id=\"选项-4\"> 选项</h4>\n<div><pre><code>-d：直接把欲删除的目录的硬连接数据删除成0，删除该目录；\n-f：强制删除文件或目录；\n-i：删除已有文件或目录之前先询问用户；\n-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；\n--preserve-root：不对根目录进行递归操作；\n-v：显示指令的详细执行过程。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id=\"参数-3\"> 参数</h4>\n<p>文件：指定被删除的文件列表，如果参数中含有目录，则必须加上<code>-r</code>或者<code>-R</code>选项。</p>\n<h4 id=\"常用范例-5\"> 常用范例</h4>\n<p>1）删除文件file，系统会先询问是否删除。</p>\n<div><pre><code># rm log.log \nrm：是否删除 一般文件 “log.log”? y\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输入rm log.log命令后，系统会询问是否删除，输入y后就会删除文件，不想删除则数据n。</p>\n<p>2）强行删除file，系统不再提示</p>\n<div><pre><code>rm -f log1.log\n</code></pre>\n<div><span>1</span><br></div></div><p>3）删除任何.log文件；删除前逐一询问确认</p>\n<div><pre><code>rm -i *.log\n</code></pre>\n<div><span>1</span><br></div></div><p>4）将 test1子目录及子目录中所有档案删除</p>\n<div><pre><code>rm -r test1\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"rmdir命令-删除空目录\"> rmdir命令（删除空目录）</h3>\n<p>rmdir命令。rmdir是常用的命令，该命令的功能是删除空目录，一个目录被删除之前必须是空的。（注意，rm - r dir命令可代替rmdir，但是有很大危险性。）删除某目录时也必须具有对父目录的写权限。</p>\n<h4 id=\"语法-6\"> 语法</h4>\n<p><code>rmdir(选项)(参数)</code></p>\n<h4 id=\"选项-5\"> 选项</h4>\n<div><pre><code>-p或--parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；\n--ignore-fail-on-non-empty：此选项使rmdir命令忽略由于删除非空目录时导致的错误信息；\n-v或-verboes：显示命令的详细执行过程；\n--help：显示命令的帮助信息；\n--version：显示命令的版本信息。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"参数-4\"> 参数</h4>\n<p>目录列表：要删除的空目录列表。当删除多个空目录时，目录名之间使用空格隔开。</p>\n<h4 id=\"常用范例-6\"> 常用范例</h4>\n<p>1）rmdir 不能删除非空目录</p>\n<div><pre><code># tree\n.\n|-- bin\n|-- doc\n|   |-- info\n|   `-- product\n|-- lib\n|-- logs\n|   |-- info\n|   `-- product\n`-- service\n    `-- deploy\n        |-- info\n        `-- product\n12 directories, 0 files\n# rmdir doc\nrmdir: doc: 目录非空\n# rmdir doc/info\n# rmdir doc/product\n# tree\n.\n|-- bin\n|-- doc\n|-- lib\n|-- logs\n|   |-- info\n|   `-- product\n`-- service\n    `-- deploy\n        |-- info\n        `-- product\n10 directories, 0 files\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>2）rmdir -p 当子目录被删除后使它也成为空目录的话，则顺便一并删除</p>\n<div><pre><code># tree\n.\n|-- bin\n|-- doc\n|-- lib\n|-- logs\n|   `-- product\n`-- service\n    `-- deploy\n        |-- info\n        `-- product\n10 directories, 0 files\n# rmdir -p logs\nrmdir: logs: 目录非空\n# tree\n.\n|-- bin\n|-- doc\n|-- lib\n|-- logs\n|   `-- product\n`-- service\n    `-- deploy\n        |-- info\n        `-- product\n9 directories, 0 files\n# rmdir -p logs/product\n# tree\n.\n|-- bin\n|-- doc\n|-- lib\n`-- service\n`-- deploy\n        |-- info\n        `-- product\n7 directories, 0 files\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "打包、压缩",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9/",
      "content_html": "<h2 id=\"打包、压缩\"> 打包、压缩</h2>\n<h3 id=\"tar命令\"> tar命令</h3>\n<p>tar命令可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p>\n<p>首先要弄清两个概念：打包和压缩。打包时指将一大堆文件或目录变成为一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p>\n<p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（<a href=\"http://man.linuxde.net/gzip\" target=\"_blank\" rel=\"noopener noreferrer\">gzip</a> <a href=\"http://man.linuxde.net/bzip2\" target=\"_blank\" rel=\"noopener noreferrer\">bzip2</a>命令）。</p>\n<h4 id=\"语法\"> 语法</h4>\n<p><code>tar(选项)(参数)</code></p>\n<h4 id=\"选项\"> 选项</h4>\n<div><pre><code>-A或--catenate：新增文件到以存在的备份文件；\n-B：设置区块大小；\n-c或--create：建立新的备份文件；\n-C &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。\n-d：记录文件的差别；\n-x或--extract或--get：从备份文件中还原文件；\n-t或--list：列出备份文件的内容；\n-z或--gzip或--ungzip：通过gzip指令处理备份文件；\n-Z或--compress或--uncompress：通过compress指令处理备份文件；\n-f&lt;备份文件&gt;或--file=&lt;备份文件&gt;：指定备份文件；\n-v或--verbose：显示指令执行过程；\n-r：添加文件到已经压缩的文件；\n-u：添加改变了和现有的文件到已经存在的压缩文件；\n-j：支持bzip2解压文件；\n-v：显示操作过程；\n-l：文件系统边界设置；\n-k：保留原有文件不覆盖；\n-m：保留文件不被覆盖；\n-w：确认压缩文件的正确性；\n-p或--same-permissions：用原来的文件权限还原文件；\n-P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；\n-N &lt;日期格式&gt; 或 --newer=&lt;日期时间&gt;：只将较指定日期更新的文件保存到备份文件里；\n--exclude=&lt;范本样式&gt;：排除符合范本样式的文件。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h4 id=\"参数\"> 参数</h4>\n<p>文件或目录：指定要打包的文件或目录列表。</p>\n<h4 id=\"常用实例\"> 常用实例</h4>\n<p>1）<strong>将文件全部打包成tar包</strong>：</p>\n<div><pre><code>tar -cvf log.tar log2012.log    仅打包，不压缩！ \ntar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \ntar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在选项<code>f</code>之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。 如果加<code>z</code>选项，则以.tar.gz或.tgz来代表gzip压缩过的tar包；如果加<code>j</code>选项，则以.tar.bz2来作为tar包名。</p>\n<p>2）<strong>查阅上述tar包内有哪些文件</strong>：</p>\n<div><pre><code>tar -ztvf log.tar.gz\n</code></pre>\n<div><span>1</span><br></div></div><p>由于我们使用 gzip 压缩的log.tar.gz，所以要查阅log.tar.gz包内的文件时，就得要加上<code>z</code>这个选项了。</p>\n<p>3）<strong>将tar包解压缩</strong>：</p>\n<div><pre><code>tar -zxvf /opt/soft/test/log.tar.gz\n</code></pre>\n<div><span>1</span><br></div></div><p>在预设的情况下，我们可以将压缩档在任何地方解开的</p>\n<p>4）<strong>只将tar内的部分文件解压出来</strong>：</p>\n<div><pre><code>tar -zxvf /opt/soft/test/log30.tar.gz log2013.log\n</code></pre>\n<div><span>1</span><br></div></div><p>5）<strong>文件备份下来，并且保存其权限</strong>：</p>\n<div><pre><code>tar -zcvpf log31.tar.gz log2014.log log2015.log log2016.log\n</code></pre>\n<div><span>1</span><br></div></div><p>这个<code>-p</code>的属性是很重要的，尤其是当您要保留原本文件的属性时。</p>\n<p>6）<strong>在文件夹当中，比某个日期新的文件才备份</strong>：</p>\n<div><pre><code>tar -N &quot;2012/11/13&quot; -zcvf log17.tar.gz test\n</code></pre>\n<div><span>1</span><br></div></div><p>7）<strong>备份文件夹内容是排除部分文件：</strong></p>\n<div><pre><code>tar --exclude scf/service -zcvf scf.tar.gz scf/*\n</code></pre>\n<div><span>1</span><br></div></div><p>8）<strong>其实最简单的使用 tar 就只要记忆底下的方式即可：</strong></p>\n<div><pre><code>压　缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称\n查　询：tar -jtv -f filename.tar.bz2\n解压缩：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"gzip命令\"> gzip命令</h3>\n<p><strong>gzip命令</strong>用来压缩文件。gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多处“.gz”扩展名。</p>\n<p>gzip是在Linux系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。gzip不仅可以用来压缩大的、较少使用的文件以节省磁盘空间，还可以和<a href=\"http://man.linuxde.net/tar\" target=\"_blank\" rel=\"noopener noreferrer\">tar</a>命令一起构成Linux操作系统中比较流行的压缩文件格式。据统计，gzip命令对文本文件有60%～70%的压缩率。减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。</p>\n<h4 id=\"语法-2\"> 语法</h4>\n<p><code>gzip(选项)(参数)</code></p>\n<h4 id=\"选项-2\"> 选项</h4>\n<div><pre><code>-a或——ascii：使用ASCII文字模式；\n-d或--decompress或----uncompress：解开压缩文件；\n-f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n-h或——help：在线帮助；\n-l或——list：列出压缩文件的相关信息；\n-L或——license：显示版本与版权信息；\n-n或--no-name：压缩文件时，不保存原来的文件名称及时间戳记；\n-N或——name：压缩文件时，保存原来的文件名称及时间戳记；\n-q或——quiet：不显示警告信息；\n-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n-S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；\n-t或——test：测试压缩文件是否正确无误；\n-v或——verbose：显示指令执行过程；\n-V或——version：显示版本信息；\n-&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值，预设值为“6”，指定愈大的数值，压缩效率就会愈高；\n--best：此参数的效果和指定“-9”参数相同；\n--fast：此参数的效果和指定“-1”参数相同。\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h4 id=\"参数-2\"> 参数</h4>\n<p>文件列表：指定要压缩的文件列表。</p>\n<h4 id=\"常用范例\"> 常用范例</h4>\n<p>1）把test6目录下的每个文件压缩成.gz文件</p>\n<div><pre><code># ll\n总计 604\n---xr--r-- 1 root mail  302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail users 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 mail users     61 11-30 08:39 log2013.log\n# gzip *\n# ll\n总计 28\n---xr--r-- 1 root mail  1341 11-30 08:39 linklog.log.gz\n---xr--r-- 1 mail users 1341 11-30 08:39 log2012.log.gz\n-rw-r--r-- 1 mail users   70 11-30 08:39 log2013.log.gz\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>2）把例1中每个压缩的文件解压，并列出详细的信息</p>\n<div><pre><code># ll\n总计 28\n---xr--r-- 1 root mail  1341 11-30 08:39 linklog.log.gz\n---xr--r-- 1 mail users 1341 11-30 08:39 log2012.log.gz\n-rw-r--r-- 1 mail users   70 11-30 08:39 log2013.log.gz\n# gzip -dv *\nlinklog.log.gz:  99.6% -- replaced with linklog.log\nlog2012.log.gz:  99.6% -- replaced with log2012.log\nlog2013.log.gz:  47.5% -- replaced with log2013.log\n# ll\n总计 604\n---xr--r-- 1 root mail  302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail users 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 mail users     61 11-30 08:39 log2013.log\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>3）详细显示例1中每个压缩的文件的信息，并不解压</p>\n<div><pre><code># gzip -l *\n         compressed        uncompressed  ratio uncompressed_name\n               1341              302108  99.6% linklog.log\n               1341              302108  99.6% log2012.log\n                 70                  61  47.5% log2013.log\n\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>4）压缩一个tar备份文件，此时压缩文件的扩展名为.tar.gz</p>\n<div><pre><code>#ls -al log.tar\n-rw-r--r-- 1 root root 307200 11-29 17:54 log.tar\n# gzip -r log.tar\n# ls -al log.tar.gz \n-rw-r--r-- 1 root root 1421 11-29 17:54 log.tar.gz\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>5）递归的压缩目录</p>\n<div><pre><code># ll\n总计 604\n---xr--r-- 1 root mail  302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail users 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 mail users     61 11-30 08:39 log2013.log\n# cd ..\n# gzip -rv test6\ntest6/linklog.log:       99.6% -- replaced with test6/linklog.log.gz\ntest6/log2013.log:       47.5% -- replaced with test6/log2013.log.gz\ntest6/log2012.log:       99.6% -- replaced with test6/log2012.log.gz\n# cd test6\n# ll\n总计 28\n---xr--r-- 1 root mail  1341 11-30 08:39 linklog.log.gz\n---xr--r-- 1 mail users 1341 11-30 08:39 log2012.log.gz\n-rw-r--r-- 1 mail users   70 11-30 08:39 log2013.log.gz\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>说明：</p>\n<p>这样，所有test下面的文件都变成了*.gz，目录依然存在只是目录里面的文件相应变成了*.gz.这就是压缩，和打包不同。因为是对目录操作，所以需要加上-r选项，这样也可以对子目录进行递归了。</p>\n<p>6）递归地解压目录</p>\n<div><pre><code># ll\n总计 28\n---xr--r-- 1 root mail  1341 11-30 08:39 linklog.log.gz\n---xr--r-- 1 mail users 1341 11-30 08:39 log2012.log.gz\n-rw-r--r-- 1 mail users   70 11-30 08:39 log2013.log.gz\n# cd ..\n# gzip -dr test6\n# cd test6\n# ll\n总计 604\n---xr--r-- 1 root mail  302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail users 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 mail users     61 11-30 08:39 log2013.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "查看文件内容",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/",
      "content_html": "<h2 id=\"查看文件内容\"> 查看文件内容</h2>\n<h3 id=\"cat命令\"> cat命令</h3>\n<p>cat命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</p>\n<h4 id=\"语法\"> 语法</h4>\n<p><code>cat(选项)(参数)</code></p>\n<h4 id=\"选项\"> 选项</h4>\n<div><pre><code>-A, --show-all           等价于 -vET\n-b, --number-nonblank    对非空输出行编号\n-e                       等价于 -vE\n-E, --show-ends          在每行结束处显示 $\n-n, --number     对输出的所有行编号,由1开始对所有输出的行数编号\n-s, --squeeze-blank  有连续两行以上的空白行，就代换为一行的空白行 \n-t                       与 -vT 等价\n-T, --show-tabs          将跳格字符显示为 ^I\n-u                       (被忽略)\n-v, --show-nonprinting   使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h4 id=\"功能\"> 功能</h4>\n<p>1.一次显示整个文件:cat filename</p>\n<p>2.从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件.</p>\n<p>3.将几个文件合并为一个文件:cat file1 file2 &gt; file</p>\n<h4 id=\"常用范例\"> 常用范例</h4>\n<p>1）把 log2012.log 的文件内容加上行号后输入 log.log 这个文件里</p>\n<div><pre><code># cat log.log \n[root@localhost test]# cat -n log2012.log &gt; log.log\n# cat -n log.log \n     1  2012-01\n     2  2012-02\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>2）使用here doc来生成文件</p>\n<div><pre><code># cat &gt;log.txt &lt;&lt;EOF\n&gt; Hello\n&gt; World\n&gt; Linux\n&gt; PWD=$(pwd)\n&gt; EOF\n# ls -l log.txt \n-rw-r--r-- 1 root root 37 10-28 17:07 log.txt\n# cat log.txt \nHello\nWorld\nLinux\nPWD=/opt/soft/test\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>说明：</p>\n<p>注意粗体部分，here doc可以进行字符串替换。</p>\n<p>备注：</p>\n<p>tac (反向列示)</p>\n<div><pre><code># tac log.txt \nPWD=/opt/soft/test\nLinux\nWorld\nHello\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>说明：</p>\n<p>tac 是将 cat 反写过来，所以他的功能就跟 cat 相反， cat 是由第一行到最后一行连续显示在萤幕上，而 tac 则是由最后一行到第一行反向在萤幕上显示出来！</p>\n<h3 id=\"less命令\"> less命令</h3>\n<p>less 工具也是对文件或其它输出进行分页显示的工具，应该说是linux正统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹性。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 [pageup][pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p>\n<h4 id=\"语法-2\"> 语法</h4>\n<p><code>less(选项)(参数)</code></p>\n<h4 id=\"选项-2\"> 选项</h4>\n<div><pre><code>-b  &lt;缓冲区大小&gt; 设置缓冲区的大小\n-e  当文件显示结束后，自动离开\n-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件\n-g  只标志最后搜索的关键词\n-i  忽略搜索时的大小写\n-m  显示类似more命令的百分比\n-N  显示每行的行号\n-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来\n-Q  不使用警告音\n-s  显示连续空行为一行\n-S  行过长时间将超出部分舍弃\n-x &lt;数字&gt; 将“tab”键显示为规定的数字空格\n/字符串：向下搜索“字符串”的功能\n?字符串：向上搜索“字符串”的功能\nn：重复前一个搜索（与 / 或 ? 有关）\nN：反向重复前一个搜索（与 / 或 ? 有关）\nb  向后翻一页\nd  向后翻半页\nh  显示帮助界面\nQ  退出less 命令\nu  向前滚动半页\ny  向前滚动一行\n空格键 滚动一行\n回车键 滚动一页\n[pagedown]： 向下翻动一页\n[pageup]：   向上翻动一页\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h4 id=\"功能-2\"> 功能</h4>\n<p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p>\n<h4 id=\"常用实例\"> 常用实例</h4>\n<p>1）ps查看进程信息并通过less分页显示</p>\n<div><pre><code>ps -ef | less\n</code></pre>\n<div><span>1</span><br></div></div><p>2 ) 查看命令历史使用记录并通过less分页显示</p>\n<div><pre><code>history | less\n</code></pre>\n<div><span>1</span><br></div></div><p>3）浏览多个文件</p>\n<div><pre><code>less log2013.log log2014.log\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>输入 ：n后，切换到 log2014.log</p>\n<p>输入 ：p 后，切换到log2013.log</p>\n<h4 id=\"附加备注\"> 附加备注</h4>\n<p>1.全屏导航</p>\n<p>ctrl + F - 向前移动一屏</p>\n<p>ctrl + B - 向后移动一屏</p>\n<p>ctrl + D - 向前移动半屏</p>\n<p>ctrl + U - 向后移动半屏</p>\n<p>2.单行导航</p>\n<p>j - 向前移动一行</p>\n<p>k - 向后移动一行</p>\n<p>3.其它导航</p>\n<p>G - 移动到最后一行</p>\n<p>g - 移动到第一行</p>\n<p>q / ZZ - 退出 less 命令</p>\n<p>4.其它有用的命令</p>\n<p>v - 使用配置的编辑器编辑当前文件</p>\n<p>h - 显示 less 的帮助文档</p>\n<p>&amp;pattern - 仅显示匹配模式的行，而不是整个文件</p>\n<p>5.标记导航</p>\n<p>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置：</p>\n<p>ma - 使用 a 标记文本的当前位置</p>\n<p>'a - 导航到标记 a 处</p>\n<h3 id=\"more命令\"> more命令</h3>\n<p>more命令，功能类似 cat ，cat命令是整个文件的内容从上到下显示在屏幕上。 more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能 。more命令从前向后读取文件，因此在启动时就加载整个文件。</p>\n<h4 id=\"语法-3\"> 语法</h4>\n<p><code>more(语法)(参数)</code></p>\n<h4 id=\"选项-3\"> 选项</h4>\n<div><pre><code>+n      从笫n行开始显示\n-n       定义屏幕大小为n行\n+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示  \n-c       从顶部清屏，然后显示\n-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能\n-l        忽略Ctrl+l（换页）字符\n-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似\n-s       把连续的多个空行显示为一行\n-u       把文件内容中的下画线去掉\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id=\"功能-3\"> 功能</h4>\n<p>more命令和cat的功能一样都是查看文件里的内容，但有所不同的是more可以按页来查看文件的内容，还支持直接跳转行等功能。</p>\n<h4 id=\"常用操作命令\"> 常用操作命令</h4>\n<div><pre><code>Enter    向下n行，需要定义。默认为1行\nCtrl+F   向下滚动一屏\n空格键  向下滚动一屏\nCtrl+B  返回上一屏\n=       输出当前行的行号\n：f    输出文件名和当前行的行号\nV      调用vi编辑器\n!命令   调用Shell，并执行命令 \nq       退出more\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id=\"常用范例-2\"> 常用范例</h4>\n<p>1）显示文件中从第3行起的内容</p>\n<div><pre><code># cat log2012.log \n2012-01\n2012-02\n2012-03\n2012-04-day1\n2012-04-day2\n2012-04-day3\n# more +3 log2012.log \n2012-03\n2012-04-day1\n2012-04-day2\n2012-04-day3\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>2）从文件中查找第一个出现&quot;day3&quot;字符串的行，并从该处前两行开始显示输出</p>\n<div><pre><code># more +/day3 log2012.log \n...skipping\n2012-04-day1\n2012-04-day2\n2012-04-day3\n2012-05\n2012-05-day1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>3）设定每屏显示行数</p>\n<div><pre><code># more -5 log2012.log \n2012-01\n2012-02\n2012-03\n2012-04-day1\n2012-04-day2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>4）列一个目录下的文件，由于内容太多，我们应该学会用more来分页显示。这得和管道 | 结合起来</p>\n<div><pre><code>#  ls -l  | more -5\n总计 36\n-rw-r--r-- 1 root root  308 11-01 16:49 log2012.log\n-rw-r--r-- 1 root root   33 10-28 16:54 log2013.log\n-rw-r--r-- 1 root root  127 10-28 16:51 log2014.log\nlrwxrwxrwx 1 root root    7 10-28 15:18 log_link.log -&gt; log.log\n-rw-r--r-- 1 root root   25 10-28 17:02 log.log\n-rw-r--r-- 1 root root   37 10-28 17:07 log.txt\ndrwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test3\ndrwxrwxrwx 2 root root 4096 10-28 14:47 test4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>说明：</p>\n<p>每页显示5个文件信息，按 Ctrl+F 或者 空格键 将会显示下5条文件信息。</p>\n<h3 id=\"head命令\"> head命令</h3>\n<p>head 与 tail 就像它的名字一样的浅显易懂，它是用来显示开头或结尾某个数量的文字区块，head 用来显示档案的开头至标准输出中，而 tail 想当然尔就是看档案的结尾。</p>\n<h4 id=\"语法-4\"> 语法</h4>\n<p><code>head(选项)(参数)</code></p>\n<h4 id=\"选项-4\"> 选项</h4>\n<div><pre><code>-n&lt;数字&gt;：指定显示头部内容的行数；\n-c&lt;字符数&gt;：指定显示头部内容的字符数；\n-v：总是显示文件名的头信息；\n-q：不显示文件名的头信息。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id=\"功能-4\"> 功能</h4>\n<p>head 用来显示档案的开头至标准输出中，默认head命令打印其相应文件的开头10行。</p>\n<h4 id=\"常用范例-3\"> 常用范例</h4>\n<p>1）显示文件的前n行</p>\n<div><pre><code># cat log2014.log \n2014-01\n2014-02\n2014-03\n2014-04\n2014-05\n2014-06\n2014-07\n2014-08\n2014-09\n2014-10\n2014-11\n2014-12\n# head -n 5 log2014.log \n2014-01\n2014-02\n2014-03\n2014-04\n2014-05\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>2）显示文件前n个字节</p>\n<div><pre><code># head -c 20 log2014.log\n2014-01\n2014-02\n2014\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>3）文件的除了最后n个字节以外的内容</p>\n<div><pre><code># head -c -32 log2014.log\n2014-01\n2014-02\n2014-03\n2014-04\n2014-05\n2014-06\n2014-07\n2014-08\n2014-09\n2014-10\n2014-11\n2014-12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>4）输出文件除了最后n行的全部内容</p>\n<div><pre><code># head -n -6 log2014.log\n2014-01\n2014-02\n2014-03\n2014-04\n2014-05\n2014-06\n2014-07\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"tail命令\"> tail命令</h3>\n<p>tail 命令从指定点开始将文件写到标准输出.使用tail命令的-f选项可以方便的查阅正在改变的日志文件,tail -f filename会把filename里最尾部的内容显示在屏幕上,并且不断刷新,使你看到最新的文件内容.</p>\n<h4 id=\"语法-5\"> 语法</h4>\n<p><code>tail(选项)(参数)</code></p>\n<h4 id=\"选项-5\"> 选项</h4>\n<div><pre><code>-f 循环读取\n-q 不显示处理信息\n-v 显示详细的处理信息\n-c&lt;数目&gt; 显示的字节数\n-n&lt;行数&gt; 显示行数\n--pid=PID 与-f合用,表示在进程ID,PID死掉之后结束. \n-q, --quiet, --silent 从不输出给出文件名的首部 \n-s, --sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id=\"功能-5\"> 功能</h4>\n<p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p>\n<h4 id=\"常用范例-4\"> 常用范例</h4>\n<p>1）显示文件末尾内容</p>\n<div><pre><code># tail -n 5 log2014.log \n2014-09\n2014-10\n2014-11\n2014-12\n===========================\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>说明：</p>\n<p>显示文件最后5行内容</p>\n<p>2）循环查看文件内容</p>\n<div><pre><code># ping 192.168.120.204 &gt; test.log &amp;\n# tail -f test.log \nPING 192.168.120.204 (192.168.120.204) 56(84) bytes of data.\n64 bytes from 192.168.120.204: icmp_seq=1 ttl=64 time=0.038 ms\n64 bytes from 192.168.120.204: icmp_seq=2 ttl=64 time=0.036 ms\n64 bytes from 192.168.120.204: icmp_seq=3 ttl=64 time=0.033 ms\n64 bytes from 192.168.120.204: icmp_seq=4 ttl=64 time=0.027 ms\n64 bytes from 192.168.120.204: icmp_seq=5 ttl=64 time=0.032 ms\n64 bytes from 192.168.120.204: icmp_seq=6 ttl=64 time=0.026 ms\n64 bytes from 192.168.120.204: icmp_seq=7 ttl=64 time=0.030 ms\n64 bytes from 192.168.120.204: icmp_seq=8 ttl=64 time=0.029 ms\n64 bytes from 192.168.120.204: icmp_seq=9 ttl=64 time=0.044 ms\n64 bytes from 192.168.120.204: icmp_seq=10 ttl=64 time=0.033 ms\n64 bytes from 192.168.120.204: icmp_seq=11 ttl=64 time=0.027 ms\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>3）从第5行开始显示文件</p>\n<div><pre><code># cat log2014.log \n2014-01\n2014-02\n2014-03\n2014-04\n2014-05\n2014-06\n2014-07\n2014-08\n2014-09\n2014-10\n2014-11\n2014-12\n# tail -n +5 log2014.log\n2014-05\n2014-06\n2014-07\n2014-08\n2014-09\n2014-10\n2014-11\n2014-12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id=\"grep命令\"> grep命令</h3>\n<p><strong>grep</strong>（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>\n<p>grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p>\n<h4 id=\"选项-6\"> 选项</h4>\n<div><pre><code>-a 不要忽略二进制数据。\n-A&lt;显示列数&gt; 除了显示符合范本样式的那一行之外，并显示该行之后的内容。\n-b 在显示符合范本样式的那一行之外，并显示该行之前的内容。\n-c 计算符合范本样式的列数。\n-C&lt;显示列数&gt;或-&lt;显示列数&gt;  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。\n-d&lt;进行动作&gt; 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。\n-e&lt;范本样式&gt; 指定字符串作为查找文件内容的范本样式。\n-E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。\n-f&lt;范本文件&gt; 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。\n-F 将范本样式视为固定字符串的列表。\n-G 将范本样式视为普通的表示法来使用。\n-h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。\n-H 在显示符合范本样式的那一列之前，标示该列的文件名称。\n-i 忽略字符大小写的差别。\n-l 列出文件内容符合指定的范本样式的文件名称。\n-L 列出文件内容不符合指定的范本样式的文件名称。\n-n 在显示符合范本样式的那一列之前，标示出该列的编号。\n-q 不显示任何信息。\n-R/-r 此参数的效果和指定“-d recurse”参数相同。\n-s 不显示错误信息。\n-v 反转查找。\n-w 只显示全字符合的列。\n-x 只显示全列符合的列。\n-y 此参数效果跟“-i”相同。\n-o 只输出文件中匹配到的部分。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h4 id=\"规则表达式\"> 规则表达式</h4>\n<p>grep的规则表达式:</p>\n<p>^  #锚定行的开始 如：'^grep'匹配所有以grep开头的行。</p>\n<p>$  #锚定行的结束 如：'grep$'匹配所有以grep结尾的行。</p>\n<p>.  #匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。</p>\n<ul>\n<li>#匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。</li>\n</ul>\n<p>.*   #一起用代表任意字符。</p>\n<p>[]   #匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。</p>\n<p>[^]  #匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行。</p>\n<p>(..)  #标记匹配字符，如'(love)'，love被标记为1。</p>\n<p>\\&lt;      #锚定单词的开始，如:'&lt;grep'匹配包含以grep开头的单词的行。</p>\n<p>\\&gt;      #锚定单词的结束，如'grep&gt;'匹配包含以grep结尾的单词的行。</p>\n<p>x{m}  #重复字符x，m次，如：'0{5}'匹配包含5个o的行。</p>\n<p>x{m,}  #重复字符x,至少m次，如：'o{5,}'匹配至少有5个o的行。</p>\n<p>x{m,n}  #重复字符x，至少m次，不多于n次，如：'o{5,10}'匹配5--10个o的行。</p>\n<p>\\w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。</p>\n<p>\\W    #\\w的反置形式，匹配一个或多个非单词字符，如点号句号等。</p>\n<p>\\b    #单词锁定符，如: '\\bgrep\\b'只匹配grep。</p>\n<p>POSIX字符:</p>\n<p>为了在不同国家的字符编码中保持一至，POSIX(The Portable Operating System Interface)增加了特殊的字符类，如[:alnum:]是[A-Za-z0-9]的另一个写法。要把它们放到[]号内才能成为正则表达式，如[A- Za-z0-9]或[[:alnum:]]。在linux下的grep除fgrep外，都支持POSIX的字符类。</p>\n<p>[:alnum:]    #文字数字字符</p>\n<p>[:alpha:]    #文字字符</p>\n<p>[:digit:]    #数字字符</p>\n<p>[:graph:]    #非空字符（非空格、控制字符）</p>\n<p>[:lower:]    #小写字符</p>\n<p>[:cntrl:]    #控制字符</p>\n<p>[:print:]    #非空字符（包括空格）</p>\n<p>[:punct:]    #标点符号</p>\n<p>[:space:]    #所有空白字符（新行，空格，制表符）</p>\n<p>[:upper:]    #大写字符</p>\n<p>[:xdigit:]   #十六进制数字（0-9，a-f，A-F）</p>\n<h4 id=\"常用实例-2\"> 常用实例</h4>\n<p>1）查找指定进程</p>\n<div><pre><code> ps -ef|grep svn\nroot 4943   1      0  Dec05 ?   00:00:00 svnserve -d -r /opt/svndata/grape/\nroot 16867 16838  0 19:53 pts/0    00:00:00 grep svn\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>2）查找指定进程个数</p>\n<div><pre><code># ps -ef|grep -c svn \n2\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>3）从文件中读取关键词进行搜索</p>\n<div><pre><code># cat test.txt \nhnlinux\npeida.cnblogs.com\nubuntu\nubuntu linux\nredhat\nRedhat\nlinuxmint\n# cat test2.txt \nlinux\nRedhat\n# cat test.txt | grep -f test2.txt\nhnlinux\nubuntu linux\nRedhat\nlinuxmint\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>说明：</p>\n<p>输出test.txt文件中含有从test2.txt文件中读取出的关键词的内容行</p>\n<p>4）从文件中读取关键词进行搜索且显示行号</p>\n<div><pre><code># cat test.txt \nhnlinux\npeida.cnblogs.com\nubuntu\nubuntu linux\nredhat\nRedhat\nlinuxmint\n# cat test2.txt \nlinux\nRedhat\n# cat test.txt | grep -nf test2.txt\n1:hnlinux\n4:ubuntu linux\n6:Redhat\n7:linuxmint\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>说明：</p>\n<p>输出test.txt文件中含有从test2.txt文件中读取出的关键词的内容行，并显示每一行的行号</p>\n<p>5）从文件中查找关键词</p>\n<div><pre><code># grep &#39;linux&#39; test.txt \nhnlinux\nubuntu linux\nlinuxmint\n# grep -n &#39;linux&#39; test.txt \n1:hnlinux\n4:ubuntu linux\n7:linuxmint\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>6）从多个文件中查找关键词</p>\n<div><pre><code># grep -n &#39;linux&#39; test.txt test2.txt \ntest.txt:1:hnlinux\ntest.txt:4:ubuntu linux\ntest.txt:7:linuxmint\ntest2.txt:1:linux\n# grep &#39;linux&#39; test.txt test2.txt \ntest.txt:hnlinux\ntest.txt:ubuntu linux\ntest.txt:linuxmint\ntest2.txt:linux\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>说明：</p>\n<p>多文件时，输出查询到的信息内容行时，会把文件的命名在行最前面输出并且加上&quot;:&quot;作为标示符</p>\n<p>7）grep不显示本身进程</p>\n<div><pre><code># ps aux|grep ssh\nroot   2720  0.0  0.0  62656  1212 ?      Ss   Nov02   0:00 /usr/sbin/sshd\nroot  16834  0.0  0.0  88088  3288 ?      Ss   19:53   0:00 sshd: root@pts/0 \nroot  16901  0.0  0.0  61180   764 pts/0  S+   20:31   0:00 grep ssh\n# ps aux|grep [s]sh\nroot   2720  0.0  0.0  62656  1212 ?      Ss   Nov02   0:00 /usr/sbin/sshd\nroot  16834  0.0  0.0  88088  3288 ?      Ss   19:53   0:00 sshd: root@pts/0 \n# ps aux | grep ssh | grep -v &quot;grep&quot;\nroot   2720  0.0  0.0  62656  1212 ?      Ss   Nov02   0:00 /usr/sbin/sshd\nroot  16834  0.0  0.0  88088  3288 ?      Ss   19:53   0:00 sshd: root@pts/0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>8）找出已u开头的行内容</p>\n<div><pre><code># cat test.txt |grep ^u\nubuntu\nubuntu linux\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>9）输出非u开头的行内容</p>\n<div><pre><code># cat test.txt |grep ^[^u]\nhnlinux\npeida.cnblogs.com\nredhat\nRedhat\nlinuxmint\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>10）输出以hat结尾的行内容</p>\n<div><pre><code># cat test.txt |grep hat$\nredhat\nRedhat\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>11）查服务器ip地址所在行</p>\n<div><pre><code># ifconfig eth0|grep &quot;[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}&quot;\n          inet addr:192.168.120.204  Bcast:192.168.120.255  Mask:255.255.255.0\n# ifconfig eth0|grep -E &quot;([0-9]{1,3}\\.){3}[0-9]&quot;\n          inet addr:192.168.120.204  Bcast:192.168.120.255  Mask:255.255.255.0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>12）显示包含ed或者at字符的内容行</p>\n<div><pre><code># cat test.txt |grep -E &quot;peida|com&quot;\npeida.cnblogs.com\n# cat test.txt |grep -E &quot;ed|at&quot;\nredhat\nRedhat\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>13）显示当前目录下面以.txt 结尾的文件中的所有包含每个字符串至少有7个连续小写字符的字符串的行</p>\n<div><pre><code># grep &#39;[a-z]\\{7\\}&#39; *.txt\ntest.txt:hnlinux\ntest.txt:peida.cnblogs.com\ntest.txt:linuxmint\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>14）在多级目录中对文本进行递归搜索</p>\n<div><pre><code>#grep &quot;text&quot; . -r -n   # .表示当前目录。\n</code></pre>\n<div><span>1</span><br></div></div><p>15）显示过滤注释( # ; 开头) 和空行后的配置信息</p>\n<div><pre><code>#  grep -Ev &quot;^$|^[#;]&quot; server.conf\n</code></pre>\n<div><span>1</span><br></div></div><p>16）过滤/etc/passwd文件下，包含root的行，并过滤后两行</p>\n<div><pre><code>grep -A 2 root /etc/passwd\n</code></pre>\n<div><span>1</span><br></div></div><p>17）过滤/etc/passwd文件下，包含root的行，并过滤前两行</p>\n<div><pre><code>grep -B 2 root /etc/passwd\n</code></pre>\n<div><span>1</span><br></div></div><p>18）过滤/etc/passwd文件下，包含root的行，并过滤前后两行</p>\n<div><pre><code>grep -C 2 root /etc/passwd\n</code></pre>\n<div><span>1</span><br></div></div><p>18）过滤/etc/passwd文件下，包含root的行数</p>\n<div><pre><code>grep -c root /etc/passwd\n</code></pre>\n<div><span>1</span><br></div></div><p>19)过滤/etc/passwd文件下，包含root的行，并打印行号</p>\n<div><pre><code>grep -n root /etc/passwd\n</code></pre>\n<div><span>1</span><br></div></div><p>20）过滤/etc/下所有文件，包含root的行</p>\n<div><pre><code>grep -r root /etc/\n</code></pre>\n<div><span>1</span><br></div></div><p>21)过滤/etc/下所有文件，包含root的行的文件名</p>\n<div><pre><code>grep -rl root /etc/\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "查看文件类型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/",
      "content_html": "<h2 id=\"查看文件类型\"> 查看文件类型</h2>\n<h3 id=\"ls命令\"> ls命令</h3>\n<p>ls命令时linux下最常用的命令。ls命令就是list的缩写，缺省下ls用来打印出当前目录的清单，如果ls指定其他目录，那么就会显示指定目录里的文件及文件夹清单。</p>\n<p>通过ls命令不仅可以查看linux文件夹包含的文件，而且可以查看文件权限（包括目录、文件夹、文件权限），查看目录信息等等。</p>\n<h4 id=\"常用选项\"> 常用选项</h4>\n<div><pre><code>-a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）；\n-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；\n-h:–human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G);\n-s：显示文件和目录的大小，以区块为单位；\n-t：用文件和目录的更改时间排序；\n-r：以文件名反序排列并输出目录内容列表；\n-d：仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表；\n-R：递归处理，将指定目录下的所有文件及子目录一并处理；\n--color[=WHEN]：使用不同的颜色高亮显示不同类型的。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id=\"常用范例\"> 常用范例</h4>\n<ol>\n<li>列出/opt文件夹下的所有文件和目录的详细资料</li>\n</ol>\n<div><pre><code>ls -lR /opt/\n</code></pre>\n<div><span>1</span><br></div></div><p>输出结果为：</p>\n<div><pre><code>/opt/:\ntotal 124188\n-rw-r--r-- 1 root root 127163815 Aug 25 06:10 go1.11.linux-amd64.tar.gz\n-rw-r--r-- 1 root root      1003 Sep 11 14:16 setup.sh\ndrwxr-xr-x 1 root root       512 Jan 28 22:17 test\n\n/opt/test:\ntotal 0\n-rw-r--r-- 1 root root 0 Jan 28 22:17 test.txt\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ol start=\"2\">\n<li>列出当前目录中所有以“t”开头的目录的详细内容，可以使用如下命令：</li>\n</ol>\n<div><pre><code>ls -l t*\n</code></pre>\n<div><span>1</span><br></div></div><p>输出结果为：</p>\n<div><pre><code>total 0\n-rw-r--r-- 1 root root 0 Jan 28 22:17 test.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ol start=\"3\">\n<li>列出目前工作目录下所有名称是s 开头的档案，越新的排越后面，可以使用如下命令：</li>\n</ol>\n<div><pre><code>ls -ltr s*\n</code></pre>\n<div><span>1</span><br></div></div><p>输出结果为：</p>\n<div><pre><code>-rw-r--r-- 1 root root 1003 Sep 11 14:16 setup.sh\n-rw-r--r-- 1 root root    0 Jan 28 22:21 s.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"颜色\"> 颜色</h4>\n<p>蓝色—–目录</p>\n<p>绿色—–可执行文件</p>\n<p>白色—–一般性文件，如文本文件，配置文件等</p>\n<p>红色—–压缩文件或归档文件</p>\n<p>浅蓝色—-链接文件</p>\n<p>红色闪烁—-链接文件存在问题</p>\n<p>黄色—–设备文件</p>\n<p>青黄色—-管道文件</p>\n<h3 id=\"file命令\"> file命令</h3>\n<p>用来探测给定文件的类型。</p>\n<h4 id=\"补充说明\"> 补充说明</h4>\n<p><strong>file命令</strong> 用来探测给定文件的类型。file命令对文件的检查分为文件系统、魔法幻数检查和语言检查3个过程。</p>\n<h4 id=\"语法\"> 语法</h4>\n<div><pre><code>file(选项)(参数)\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"选项\"> 选项</h4>\n<div><pre><code>-b：列出辨识结果时，不显示文件名称；\n-c：详细显示指令执行过程，便于排错或分析程序执行的情形；\n-f&lt;名称文件&gt;：指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称；\n-L：直接显示符号连接所指向的文件类别；\n-m&lt;魔法数字文件&gt;：指定魔法数字文件；\n-v：显示版本信息；\n-z：尝试去解读压缩文件的内容。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h4 id=\"参数\"> 参数</h4>\n<p>文件：要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。</p>\n<h4 id=\"实例\"> 实例</h4>\n<p>显示文件类型</p>\n<div><pre><code>[root@localhost ~]# file install.log\ninstall.log: UTF-8 Unicode text\n\n[root@localhost ~]# file -b install.log      &lt;== 不显示文件名称\nUTF-8 Unicode text\n\n[root@localhost ~]# file -i install.log      &lt;== 显示MIME类别。\ninstall.log: text/plain; charset=utf-8\n\n[root@localhost ~]# file -b -i install.log\ntext/plain; charset=utf-8\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>显示符号链接的文件类型</p>\n<div><pre><code>[root@localhost ~]# ls -l /var/mail\nlrwxrwxrwx 1 root root 10 08-13 00:11 /var/mail -&gt; spool/mail\n\n[root@localhost ~]# file /var/mail\n/var/mail: symbolic link to `spool/mail&#39;\n\n[root@localhost ~]# file -L /var/mail\n/var/mail: directory\n\n[root@localhost ~]# file /var/spool/mail\n/var/spool/mail: directory\n\n[root@localhost ~]# file -L /var/spool/mail\n/var/spool/mail: directory\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "查看文件详细属性",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E8%AF%A6%E7%BB%86%E5%B1%9E%E6%80%A7/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E8%AF%A6%E7%BB%86%E5%B1%9E%E6%80%A7/",
      "content_html": "<h2 id=\"查看文件详细属性\"> 查看文件详细属性</h2>\n<h3 id=\"stat命令\"> stat命令</h3>\n<div><pre><code># stat a.go \n  File: a.go\n  Size: 63        \tBlocks: 0          IO Block: 512    regular file\nDevice: 2h/2d\tInode: 19140298416386648  Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2018-10-09 12:42:07.978765400 +0800\nModify: 2018-10-09 12:42:07.980763600 +0800\nChange: 2018-10-09 12:42:07.982774800 +0800\n Birth: -\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>访问时间：atime，查看内容<br>\n修改时间：mtime，修改内容\n改变时间：ctime，文件属性，比如权限\n删除时间：dtime，文件被删除的时间</p>\n",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "logrotate简介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%97%A5%E5%BF%97logrotate/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E6%97%A5%E5%BF%97logrotate/",
      "content_html": "<h2 id=\"logrotate简介\"> logrotate简介</h2>\n<p>日志是Linux系统中最重要的部分之一，通过日志可以知道系统中正在发生什么或者发生过什么，极大的方便了系统管理，常见的linux发行版中都自带了logrotate程序来管理系统日志，当然logrotate也可以用来管理软件日志。使用logrotate有以下几点好处：</p>\n<p>1.大多数系统自带，不用安装\n2.配置简单，功能很强大\n3.可靠性高</p>\n<h2 id=\"配置文件\"> 配置文件</h2>\n<p>默认的配置文件为：</p>\n<div><pre><code>/etc/logrotate.conf\n/etc/logratate.d/\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>logrotate.conf</code>：为主配置文件</p>\n<p><code>logrotate.d</code>：为配置相关子系统，用于隔离每个应用配置（Nginx、PHP、Tomcat...）</p>\n<p>Logrotate是基于CRON来运行的，其脚本是/etc/cron.daily/logrotate，日志轮转是系统自动完成的。\n实际运行时，Logrotate会调用配置文件/etc/logrotate.conf。</p>\n<p>Logrotate可以由自动或者手动触发日志轮转：</p>\n<div><pre><code>logrotate -f /etc/logrotate.d/nginx\nlogrotate -f /etc/logrotate.d/php\n不过正式执行前最好通过Debug选项来验证一下（-d参数）\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>查看各log文件的具体执行情况</p>\n<div><pre><code>cat /var/lib/logrotate/logrotate.status\n</code></pre>\n<div><span>1</span><br></div></div><p>具体logrotate命令格式如下：</p>\n<blockquote>\n<p>logrotate [OPTION...] <configfile>\n-d, --debug ：debug模式，测试配置文件是否有错误。\n-f, --force ：强制转储文件。\n-m, --mail=command ：压缩日志后，发送日志到指定邮箱。\n-s, --state=statefile ：使用指定的状态文件。\n-v, --verbose ：显示转储过程。</p>\n</blockquote>\n<h2 id=\"切割介绍\"> 切割介绍</h2>\n<p>比如以系统日志/var/log/message做切割来简单说明下：\n第一次执行完rotate(轮转)之后，原本的messages会变成messages.1，而且会制造一个空的messages给系统来储存日志；\n第二次执行之后，messages.1会变成messages.2，而messages会变成messages.1，又造成一个空的messages来储存日志！\n如果仅设定保留三个日志（即轮转3次）的话，那么执行第三次时，则 messages.3这个档案就会被删除，并由后面的较新的保存日志所取代！也就是会保存最新的几个日志。\n日志究竟轮换几次，这个是根据配置文件中的rotate参数来判定的。</p>\n<p>看下logrotate.conf配置：</p>\n<div><pre><code># cat /etc/logrotate.conf\n# 底下的设定是 &quot;logrotate 的默认值&quot; ，如果別的文件设定了其他的值，\n# 就会以其它文件的设定为主\nweekly          //默认每一周执行一次rotate轮转工作\nrotate 4       //保留多少个日志文件(轮转几次).默认保留四个.就是指定日志文件删除之前轮转的次数，0 指没有备份\ncreate         //自动创建新的日志文件，新的日志文件具有和原来的文件相同的权限；因为日志被改名,因此要创建一个新的来继续存储之前的日志\ndateext       //这个参数很重要！就是切割后的日志文件以当前日期为格式结尾，如xxx.log-20131216这样,如果注释掉,切割出来是按数字递增,即前面说的 xxx.log-1这种格式\ncompress      //是否通过gzip压缩转储以后的日志文件，如xxx.log-20131216.gz ；如果不需要压缩，注释掉就行\n\ninclude /etc/logrotate.d\n# 将 /etc/logrotate.d/ 目录中的所有文件都加载进来\n\n/var/log/wtmp {                 //仅针对 /var/log/wtmp 所设定的参数\nmonthly                    //每月一次切割,取代默认的一周\nminsize 1M              //文件大小超过 1M 后才会切割\ncreate 0664 root utmp            //指定新建的日志文件权限以及所属用户和组\nrotate 1                    //只保留一个日志.\n}\n# 这个 wtmp 可记录用户登录系统及系统重启的时间\n# 因为有 minsize 的参数，因此不见得每个月一定会执行一次喔.要看文件大小。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id=\"其他重要参数说明\"> 其他重要参数说明</h3>\n<div><pre><code>compress                                   通过gzip 压缩转储以后的日志\nnocompress                                不做gzip压缩处理\ncopytruncate                              用于还在打开中的日志文件，把当前日志备份并截断；是先拷贝再清空的方式，拷贝和清空之间有一个时间差，可能会丢失部分日志数据。\nnocopytruncate                           备份日志文件不过不截断\ncreate mode owner group             轮转时指定创建新文件的属性，如create 0777 nobody nobody\nnocreate                                    不建立新的日志文件\ndelaycompress                           和compress 一起使用时，转储的日志文件到下一次转储时才压缩\nnodelaycompress                        覆盖 delaycompress 选项，转储同时压缩。\nmissingok                                 如果日志丢失，不报错继续滚动下一个日志\nerrors address                           专储时的错误信息发送到指定的Email 地址\nifempty                                    即使日志文件为空文件也做轮转，这个是logrotate的缺省选项。\nnotifempty                               当日志文件为空时，不进行轮转\nmail address                             把转储的日志文件发送到指定的E-mail 地址\nnomail                                     转储时不发送日志文件\nolddir directory                         转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统\nnoolddir                                   转储后的日志文件和当前日志文件放在同一个目录下\nsharedscripts                           运行postrotate脚本，作用是在所有日志都轮转后统一执行一次脚本。如果没有配置这个，那么每个日志轮转后都会执行一次脚本\nprerotate                                 在logrotate转储之前需要执行的指令，例如修改文件的属性等动作；必须独立成行\npostrotate                               在logrotate转储之后需要执行的指令，例如重新启动 (kill -HUP) 某个服务！必须独立成行\ndaily                                       指定转储周期为每天\nweekly                                    指定转储周期为每周\nmonthly                                  指定转储周期为每月\nrotate count                            指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份\ndateext                                  使用当期日期作为命名格式\ndateformat .%s                       配合dateext使用，紧跟在下一行出现，定义文件切割后的文件名，必须配合dateext使用，只支持 %Y %m %d %s 这四个参数\nsize(或minsize) log-size            当日志文件到达指定的大小时才转储，log-size能指定bytes(缺省)及KB (sizek)或MB(sizem).\n当日志文件 &gt;= log-size 的时候就转储。 以下为合法格式：（其他格式的单位大小写没有试过）\nsize = 5 或 size 5 （&gt;= 5 个字节就转储）\nsize = 100k 或 size 100k\nsize = 100M 或 size 100M\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id=\"logrotate日志切割轮询\"> logrotate日志切割轮询</h2>\n<p>由于Logrotate是基于CRON运行的，所以这个日志轮转的时间是由CRON控制的，具体可以查询CRON的配置文件/etc/anacrontab，过往的老版本的文件为（/etc/crontab）</p>\n<p>查看轮转文件：<code>/etc/anacrontab</code></p>\n<div><pre><code># egrep -v &quot;^$|^#&quot; /etc/anacrontab\nSHELL=/bin/sh\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\nRANDOM_DELAY=45\nSTART_HOURS_RANGE=3-22\n1\t5\tcron.daily\t\tnice run-parts /etc/cron.daily\n7\t25\tcron.weekly\t\tnice run-parts /etc/cron.weekly\n@monthly 45\tcron.monthly\t\tnice run-parts /etc/cron.monthly\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>使用anacrontab轮转的配置文件，日志切割的生效时间是在凌晨3点到22点之间，而且随机延迟时间是45分钟，但是这样配置无法满足我们在现实中的应用</p>\n<p>现在的需求是将切割时间调整到每天的晚上12点，即每天切割的日志是前一天的0-24点之间的内容，操作如下：</p>\n<p>取消日志自动轮转的设置</p>\n<div><pre><code>mv /etc/anacrontab /etc/anacrontab.bak \n</code></pre>\n<div><span>1</span><br></div></div><p>使用crontab来作为日志轮转的触发容器来修改Logrotate默认执行时间</p>\n<div><pre><code> egrep -v &quot;^$|^#&quot; /etc/crontab \nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\n# run-parts\n01 * * * * root run-parts /etc/cron.hourly\n59 23 * * * root run-parts /etc/cron.daily\n22 4 * * 0 root run-parts /etc/cron.weekly\n42 4 1 * * root run-parts /etc/cron.monthly\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"nginx日志配置\"> nginx日志配置</h2>\n<div><pre><code><span># vim /etc/logrotate.d/nginx</span>\n/var/log/nginx/*.log <span>{</span>\n\t\tdaily\n\t\tmissingok\n\t\trotate <span>90</span>\n\t\tcompress\n\t\tdelaycompress\n\t\tnotifempty\n\t\tcreate <span>640</span> nginx adm\n\t\tdateext\n\t\tsharedscripts\n\t\tpostrotate\n              <span>[</span> <span>!</span> -f /var/run/nginx.pid <span>]</span> <span>||</span> <span>kill</span> -USR1 <span><span>`</span><span>cat</span> /var/run/nginx.pid<span>`</span></span>\n         endscript\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"tomcat日志配置\"> tomcat日志配置</h2>\n<div><pre><code>/home/tomcat/tomcat/logs/catalina.out {\n\tsu tomcat tomcat\n        daily\n        rotate 90\n        missingok\n        notifempty\n        dateext\n        compress\n        delaycompress\n        sharedscripts\n\tcopytruncate\n        create 644 tomcat tomcat\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id=\"解决logrotate无法自动轮询日志的办法\"> 解决logrotate无法自动轮询日志的办法</h2>\n<p>现象说明：\n使用logrotate轮询nginx日志，配置好之后，发现nginx日志连续两天没被切割，检查后确定配置文件一切正常，这是为什么呢？？</p>\n<p>强行启动记录文件维护操作，纵使logrotate指令认为没有需要，应该有可能是logroate认为nginx日志太小，不进行轮询。\n故需要强制轮询，即在/etc/cron.daily/logrotate脚本中将 -t 参数替换成 -f 参数</p>\n<div><pre><code># vim /etc/cron.daily/logrotate \n#!/bin/sh\n/usr/sbin/logrotate /etc/logrotate.conf\nEXITVALUE=$?\nif [ $EXITVALUE != 0 ]; then\n    /usr/bin/logger -f logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;\nfi\nexit 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>最后最后重启下cron服务：</p>\n<div><pre><code>/etc/init.d/crond restart\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "用户管理",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/",
      "content_html": "<h1 id=\"用户管理\"> 用户管理</h1>\n<p>查看当前登录的用户信息：</p>\n<div><pre><code>id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>系统约定： RHEL6\nuid: 0     \t    特权用户\nuid: 1~499 \t    系统用户\nuid: 500+  \t    普通用户</p>\n<h2 id=\"给普通用户提权\"> 给普通用户提权</h2>\n<p>1.su</p>\n<div><pre><code>su -\n</code></pre>\n<div><span>1</span><br></div></div><p>2.添加用户至sudoers</p>\n<div><pre><code>vim /etc/sudoers\n%wheel  ALL=(ALL)       NOPASSWD: ALL\nuseradd aa -G wheel\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code>usermod aa -G wheel\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "标准输入、标准输出、标准错误",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E7%AE%A1%E9%81%93%E5%8F%8AI-O%E9%87%8D%E5%AE%9A%E5%90%91/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E7%AE%A1%E9%81%93%E5%8F%8AI-O%E9%87%8D%E5%AE%9A%E5%90%91/",
      "content_html": "<h2 id=\"标准输入、标准输出、标准错误\"> 标准输入、标准输出、标准错误</h2>\n<h3 id=\"输出重定向\"> 输出重定向</h3>\n<p><img src=\"images/biaozhun.png\" alt=\"\">\n输出重定向（覆盖）</p>\n<div><pre><code>date &gt; a.txt\n</code></pre>\n<div><span>1</span><br></div></div><p>输出重定向（追加）</p>\n<div><pre><code>date 1&gt;&gt; a.txt\n</code></pre>\n<div><span>1</span><br></div></div><p>错误输出重定向</p>\n<div><pre><code>ls /home/ /aa &gt;&gt; a.txt 2&gt;b.txt\n</code></pre>\n<div><span>1</span><br></div></div><p>正确和错误都输入到相同位置</p>\n<div><pre><code>ls /home/ /aa &amp;&gt; a.txt \nls /home/ /aa &gt; a.txt 2&gt;&amp;1 \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>重定向到空设备/dev/null</p>\n<div><pre><code>ls /home/ /aa &amp;&gt; /dev/null\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"输入重定向\"> 输入重定向</h3>\n<div><pre><code>grep &#39;root&#39; &lt; /etc/passwd\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code>mysql -uroot -p123 &lt; aa.sql\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"总和应用\"> 总和应用</h3>\n<div><pre><code>cat &gt; a.txt &lt;&lt;EOF\n&gt; 11\n&gt; 22\n&gt; EOF\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "网络基础",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/",
      "content_html": "<h1 id=\"网络基础\"> 网络基础</h1>\n<h2 id=\"常见的网络接口\"> 常见的网络接口</h2>\n<p>eth0\t\t\t以太网接口\nlo\t\t\t\t本地环回接口<br>\nbr0\t\t\t桥接接口 （虚拟交换机）\nvnet0\t\t    KVM虚拟机网卡接口</p>\n<h2 id=\"查看网络信息\"> 查看网络信息</h2>\n<div><pre><code>ip addr //查看IP、掩码、MAC...\nip addr show eth0 //只显示eth0的信息\nip route //查看本机路由表\ncat /etc/resolv.conf //查看DNS\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "yum管理RPM包",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/",
      "content_html": "<h2 id=\"yum管理rpm包\"> yum管理RPM包</h2>\n<p>清空缓存及其它文件</p>\n<div><pre><code>yum clean all\n</code></pre>\n<div><span>1</span><br></div></div><p>建立缓存数据库</p>\n<div><pre><code>yum makecache\n</code></pre>\n<div><span>1</span><br></div></div><p>查询可用的仓库</p>\n<div><pre><code>yum repolist\n</code></pre>\n<div><span>1</span><br></div></div><p>查询</p>\n<div><pre><code>yum list mysql-server\n</code></pre>\n<div><span>1</span><br></div></div><p>升级</p>\n<div><pre><code>yum -y update\n</code></pre>\n<div><span>1</span><br></div></div><p>查询指定的文件属于哪个包</p>\n<div><pre><code>yum provides */httpd\n</code></pre>\n<div><span>1</span><br></div></div><p>卸载</p>\n<div><pre><code>yum -y remove mysql-server\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"使用rpm工具管理rpm包\"> 使用RPM工具管理RPM包</h2>\n<p>安装</p>\n<div><pre><code>rpm -ivh xxx.rpm\n</code></pre>\n<div><span>1</span><br></div></div><p>升级</p>\n<div><pre><code>rpm -Uvh xxx.rpm\n</code></pre>\n<div><span>1</span><br></div></div><p>查询</p>\n<div><pre><code>rpm -q xxx //查询指定包是否安装\nrpm -ql xxx //查询xxx安装的文件\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>卸载</p>\n<div><pre><code>rpm -e xxx\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "静态查看进程 ps",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/",
      "content_html": "<h2 id=\"静态查看进程-ps\"> 静态查看进程 ps</h2>\n<p><strong>ps命令</strong>用于报告当前系统的进程状态。可以搭配<a href=\"http://man.linuxde.net/kill\" target=\"_blank\" rel=\"noopener noreferrer\">kill</a>指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。</p>\n<ol>\n<li>\n<p>运行(正在运行或在运行队列中等待)</p>\n</li>\n<li>\n<p>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</p>\n</li>\n<li>\n<p>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</p>\n</li>\n<li>\n<p>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</p>\n</li>\n<li>\n<p>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</p>\n</li>\n</ol>\n<p>ps工具标识进程的5种状态码:</p>\n<p>D 不可中断 uninterruptible sleep （usually IO）</p>\n<p>R 运行 runnable （on run queue）</p>\n<p>S 中断 sleeping</p>\n<p>T 停止 traced or stopped</p>\n<p>Z 僵死 a defunct （“zombie”） process</p>\n<h3 id=\"语法\"> 语法</h3>\n<div><pre><code>ps(选项)\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"选项\"> 选项</h3>\n<p>复制</p>\n<div><pre><code>-a：显示所有终端机下执行的程序，除了阶段作业领导者之外。\na：显示现行终端机下的所有程序，包括其他用户的程序。\n-A：显示所有程序。\n-c：显示CLS和PRI栏位。\nc：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。\n-C&lt;指令名称&gt;：指定执行指令的名称，并列出该指令的程序的状况。\n-d：显示所有程序，但不包括阶段作业领导者的程序。\n-e：此选项的效果和指定&quot;A&quot;选项相同。\ne：列出程序时，显示每个程序所使用的环境变量。\n-f：显示UID,PPIP,C与STIME栏位。\nf：用ASCII字符显示树状结构，表达程序间的相互关系。\n-g&lt;群组名称&gt;：此选项的效果和指定&quot;-G&quot;选项相同，当亦能使用阶段作业领导者的名称来指定。\ng：显示现行终端机下的所有程序，包括群组领导者的程序。\n-G&lt;群组识别码&gt;：列出属于该群组的程序的状况，也可使用群组名称来指定。\nh：不显示标题列。\n-H：显示树状结构，表示程序间的相互关系。\n-j或j：采用工作控制的格式显示程序状况。\n-l或l：采用详细的格式来显示程序状况。\nL：列出栏位的相关信息。\n-m或m：显示所有的执行绪。\nn：以数字来表示USER和WCHAN栏位。\n-N：显示所有的程序，除了执行ps指令终端机下的程序之外。\n-p&lt;程序识别码&gt;：指定程序识别码，并列出该程序的状况。\np&lt;程序识别码&gt;：此选项的效果和指定&quot;-p&quot;选项相同，只在列表格式方面稍有差异。\nr：只列出现行终端机正在执行中的程序。\n-s&lt;阶段作业&gt;：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。\ns：采用程序信号的格式显示程序状况。\nS：列出程序时，包括已中断的子程序资料。\n-t&lt;终端机编号&gt;：指定终端机编号，并列出属于该终端机的程序的状况。\nt&lt;终端机编号&gt;：此选项的效果和指定&quot;-t&quot;选项相同，只在列表格式方面稍有差异。\n-T：显示现行终端机下的所有程序。\n-u&lt;用户识别码&gt;：此选项的效果和指定&quot;-U&quot;选项相同。\nu：以用户为主的格式来显示程序状况。\n-U&lt;用户识别码&gt;：列出属于该用户的程序的状况，也可使用用户名称来指定。\nU&lt;用户名称&gt;：列出属于该用户的程序的状况。\nv：采用虚拟内存的格式显示程序状况。\n-V或V：显示版本信息。\n-w或w：采用宽阔的格式来显示程序状况。　\nx：显示所有程序，不以终端机来区分。\nX：采用旧式的Linux i386登陆格式显示程序状况。\n-y：配合选项&quot;-l&quot;使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。\n-&lt;程序识别码&gt;：此选项的效果和指定&quot;p&quot;选项相同。\n--cols&lt;每列字符数&gt;：设置每列的最大字符数。\n--columns&lt;每列字符数&gt;：此选项的效果和指定&quot;--cols&quot;选项相同。\n--cumulative：此选项的效果和指定&quot;S&quot;选项相同。\n--deselect：此选项的效果和指定&quot;-N&quot;选项相同。\n--forest：此选项的效果和指定&quot;f&quot;选项相同。\n--headers：重复显示标题列。\n--help：在线帮助。\n--info：显示排错信息。\n--lines&lt;显示列数&gt;：设置显示画面的列数。\n--no-headers：此选项的效果和指定&quot;h&quot;选项相同，只在列表格式方面稍有差异。\n--group&lt;群组名称&gt;：此选项的效果和指定&quot;-G&quot;选项相同。\n--Group&lt;群组识别码&gt;：此选项的效果和指定&quot;-G&quot;选项相同。\n--pid&lt;程序识别码&gt;：此选项的效果和指定&quot;-p&quot;选项相同。\n--rows&lt;显示列数&gt;：此选项的效果和指定&quot;--lines&quot;选项相同。\n--sid&lt;阶段作业&gt;：此选项的效果和指定&quot;-s&quot;选项相同。\n--tty&lt;终端机编号&gt;：此选项的效果和指定&quot;-t&quot;选项相同。\n--user&lt;用户名称&gt;：此选项的效果和指定&quot;-U&quot;选项相同。\n--User&lt;用户识别码&gt;：此选项的效果和指定&quot;-U&quot;选项相同。\n--version：此选项的效果和指定&quot;-V&quot;选项相同。\n--widty&lt;每列字符数&gt;：此选项的效果和指定&quot;-cols&quot;选项相同。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><h3 id=\"常用范例\"> 常用范例</h3>\n<p>1）显示所有进程信息</p>\n<p>复制</p>\n<div><pre><code># ps -A  PID TTY          TIME CMD    1 ?        00:00:00 init    2 ?        00:00:01 migration/0    3 ?        00:00:00 ksoftirqd/0    4 ?        00:00:01 migration/1\n</code></pre>\n<div><span>1</span><br></div></div><p>2）显示指定用户信息</p>\n<p>复制</p>\n<div><pre><code># ps -u root  PID TTY          TIME CMD    1 ?        00:00:00 init    2 ?        00:00:01 migration/0    3 ?        00:00:00 ksoftirqd/0    4 ?        00:00:01 migration/1\n</code></pre>\n<div><span>1</span><br></div></div><p>3）显示所有进程信息，连同命令行</p>\n<p>复制</p>\n<div><pre><code>ps -efUID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 Nov02 ?        00:00:00 init [3]                  root         2     1  0 Nov02 ?        00:00:01 [migration/0]root         3     1  0 Nov02 ?        00:00:00 [ksoftirqd/0]root         4     1  0 Nov02 ?        00:00:01 [migration/1]root         5     1  0 Nov02 ?        00:00:00 [ksoftirqd/1]\n</code></pre>\n<div><span>1</span><br></div></div><p>4） ps 与grep 常用组合用法，查找特定进程</p>\n<p>复制</p>\n<div><pre><code># ps -ef|grep sshroot      2720     1  0 Nov02 ?        00:00:00 /usr/sbin/sshdroot     17394  2720  0 14:58 ?        00:00:00 sshd: root@pts/0 root     17465 17398  0 15:57 pts/0    00:00:00 grep ssh\n</code></pre>\n<div><span>1</span><br></div></div><p>5）将目前属于您自己这次登入的 PID 与相关信息列示出来</p>\n<p>复制</p>\n<div><pre><code># ps -lF S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD4 S     0 17398 17394  0  75   0 - 16543 wait   pts/0    00:00:00 bash4 R     0 17469 17398  0  77   0 - 15877 -      pts/0    00:00:00 ps\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>各相关信息的意义：</p>\n<p>F 代表这个程序的旗标 (flag)， 4 代表使用者为 super user</p>\n<p>S 代表这个程序的状态 (STAT)，关于各 STAT 的意义将在内文介绍</p>\n<p>UID 程序被该 UID 所拥有</p>\n<p>PID 就是这个程序的 ID ！</p>\n<p>PPID 则是其上级父程序的ID</p>\n<p>C CPU 使用的资源百分比</p>\n<p>PRI 这个是 Priority (优先执行序) 的缩写，详细后面介绍</p>\n<p>NI 这个是 Nice 值，在下一小节我们会持续介绍</p>\n<p>ADDR 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 “-“</p>\n<p>SZ 使用掉的内存大小</p>\n<p>WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作</p>\n<p>TTY 登入者的终端机位置</p>\n<p>TIME 使用掉的 CPU 时间。</p>\n<p>CMD 所下达的指令为何</p>\n<p>在预设的情况下， ps 仅会列出与目前所在的 bash shell 有关的 PID 而已，所以， 当我使用 ps -l 的时候，只有三个 PID。</p>\n<p>6）列出目前所有的正在内存当中的程序</p>\n<p>复制</p>\n<div><pre><code># ps auxUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot         1  0.0  0.0  10368   676 ?        Ss   Nov02   0:00 init [3]                  root         2  0.0  0.0      0     0 ?        S&lt;   Nov02   0:01 [migration/0]root         3  0.0  0.0      0     0 ?        SN   Nov02   0:00 [ksoftirqd/0]root         4  0.0  0.0      0     0 ?        S&lt;   Nov02   0:01 [migration/1]root         5  0.0  0.0      0     0 ?        SN   Nov02   0:00 [ksoftirqd/1]\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>USER：该 process 属于那个使用者账号的</p>\n<p>PID ：该 process 的号码</p>\n<p>%CPU：该 process 使用掉的 CPU 资源百分比</p>\n<p>%MEM：该 process 所占用的物理内存百分比</p>\n<p>VSZ ：该 process 使用掉的虚拟内存量 (Kbytes)</p>\n<p>RSS ：该 process 占用的固定的内存量 (Kbytes)</p>\n<p>TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</p>\n<p>STAT：该程序目前的状态，主要的状态有</p>\n<p>R ：该程序目前正在运作，或者是可被运作</p>\n<p>S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。</p>\n<p>T ：该程序目前正在侦测或者是停止了</p>\n<p>Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态</p>\n<p>START：该 process 被触发启动的时间</p>\n<p>TIME ：该 process 实际使用 CPU 运作的时间</p>\n<p>COMMAND：该程序的实际指令</p>\n<p>7）列出类似程序树的程序显示</p>\n<p>复制</p>\n<div><pre><code> ps -axjfWarning: bad syntax, perhaps a bogus &#39;-&#39;? See /usr/share/doc/procps-3.2.7/FAQ PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND    0     1     1     1 ?           -1 Ss       0   0:00 init [3]                      1     2     1     1 ?           -1 S&lt;       0   0:01 [migration/0]    1     3     1     1 ?           -1 SN       0   0:00 [ksoftirqd/0]    1     4     1     1 ?           -1 S&lt;       0   0:01 [migration/1]    1     5     1     1 ?           -1 SN       0   0:00 [ksoftirqd/1]\n</code></pre>\n<div><span>1</span><br></div></div><p>8）找出与 cron 与 syslog 这两个服务有关的 PID 号码</p>\n<p>复制</p>\n<div><pre><code># ps aux | egrep &#39;(cron|syslog)&#39;root      2682  0.0  0.0  83384  2000 ?        Sl   Nov02   0:00 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5root      2735  0.0  0.0  74812  1140 ?        Ss   Nov02   0:00 crondroot     17475  0.0  0.0  61180   832 pts/0    S+   16:27   0:00 egrep (cron|syslog)\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>其他实例：</p>\n<ol>\n<li>可以用 | 管道和 more 连接起来分页查看</li>\n</ol>\n<p>复制</p>\n<div><pre><code>ps -aux |more\n</code></pre>\n<div><span>1</span><br></div></div><ol>\n<li>把所有进程显示出来，并输出到ps001.txt文件</li>\n</ol>\n<p>复制</p>\n<div><pre><code>ps -aux &gt; ps001.txt\n</code></pre>\n<div><span>1</span><br></div></div><ol>\n<li>输出指定的字段</li>\n</ol>\n<p>复制</p>\n<div><pre><code># ps -o pid,ppid,pgrp,session,tpgid,comm  PID  PPID  PGRP  SESS TPGID COMMAND17398 17394 17398 17398 17478 bash17478 17398 17478 17398 17478 ps\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"查看指定进程的pid-pgrep、pidof\"> 查看指定进程的PID(pgrep、pidof)</h2>\n<div><pre><code>pgrep sshd -l\n47 sshd\n51 sshd\n128 sshd\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code>pidof sshd\n128 51 47\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"动态查看进程top\"> 动态查看进程top</h2>\n<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。下面详细介绍它的使用方法。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定.</p>\n<div><pre><code>top(选项)\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"选项-2\"> 选项</h3>\n<p>复制</p>\n<div><pre><code>-b：以批处理模式操作；-c：显示完整的治命令；-d：屏幕刷新间隔时间；-I：忽略失效过程；-s：保密模式；-S：累积模式；-i&lt;时间&gt;：设置间隔时间；-u&lt;用户名&gt;：指定用户名；-p&lt;进程号&gt;：指定进程；-n&lt;次数&gt;：循环显示的次数。\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"功能\"> 功能</h3>\n<p>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p>\n<h3 id=\"常用实例\"> 常用实例</h3>\n<p>1）显示进程信息</p>\n<p>复制</p>\n<div><pre><code># toptop - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35Tasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombieCpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%stMem:  32949016k total, 14411180k used, 18537836k free,   169884k buffersSwap: 32764556k total,        0k used, 32764556k free,  3612636k cached  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java                                                                   18249 root      18   0 3201m 1.9g  11m S 35.9  6.0 569:39.41 java                                                                    2808 root      25   0 3333m 1.0g  11m S 24.3  3.1 526:51.85 java                                                        25668 root      23   0 3180m 704m  11m S 14.0  2.2 360:44.53 java\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>统计信息区：</p>\n<p>前五行是当前系统情况整体的统计信息区。下面我们看每一行信息的具体意义。</p>\n<p>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</p>\n<p>14:06:23 — 当前系统时间</p>\n<p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）</p>\n<p>2 users — 当前有2个用户登录系统</p>\n<p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p>\n<p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p>\n<p>第二行，Tasks — 任务（进程），具体信息说明如下：</p>\n<p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p>\n<p>第三行，cpu状态信息，具体属性说明如下：</p>\n<p>5.9%us — 用户空间占用CPU的百分比。</p>\n<p>3.4% sy — 内核空间占用CPU的百分比。</p>\n<p>0.0% ni — 改变过优先级的进程占用CPU的百分比</p>\n<p>90.4% id — 空闲CPU百分比</p>\n<p>0.0% wa — IO等待占用CPU的百分比</p>\n<p>0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比</p>\n<p>0.2% si — 软中断（Software Interrupts）占用CPU的百分比</p>\n<p>第五行，swap交换分区信息，具体信息说明如下：</p>\n<p>32764556k total — 交换区总量（32GB）</p>\n<p>0k used — 使用的交换区总量（0K）</p>\n<p>32764556k free — 空闲交换区总量（32GB）</p>\n<p>3612636k cached — 缓冲的交换区总量（3.6GB）</p>\n<p>备注：</p>\n<p>第四行中使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。</p>\n<p>如果出于习惯去计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached，按这个公式此台服务器的可用内存：18537836k +169884k +3612636k = 22GB左右。</p>\n<p>对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。</p>\n<p>第六行，空行。</p>\n<p>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</p>\n<p>PID — 进程id</p>\n<p>USER — 进程所有者</p>\n<p>PR — 进程优先级</p>\n<p>NI — nice值。负值表示高优先级，正值表示低优先级</p>\n<p>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</p>\n<p>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</p>\n<p>SHR — 共享内存大小，单位kb</p>\n<p>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</p>\n<p>%CPU — 上次更新到现在的CPU时间占用百分比</p>\n<p>%MEM — 进程使用的物理内存百分比</p>\n<p>TIME+ — 进程使用的CPU时间总计，单位1/100秒</p>\n<p>COMMAND — 进程名称（命令名/命令行）</p>\n<p>其他使用技巧：</p>\n<p>1.多U多核CPU监控</p>\n<p>在top基本视图中，按键盘数字“1”，可监控每个逻辑CPU的状况：</p>\n<p>观察上图，服务器有16个逻辑CPU，实际上是4个物理CPU。再按数字键1，就会返回到top基本视图界面。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/top1.png\" alt=\"img\"></p>\n<p>2.高亮显示当前运行进程</p>\n<p>敲击键盘“b”（打开/关闭加亮效果），top的视图变化如下：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/top2.png\" alt=\"img\"></p>\n<p>我们发现进程id为2570的“top”进程被加亮了，top进程就是视图第二行显示的唯一的运行态（runing）的那个进程，可以通过敲击“y”键关闭或打开运行态进程的加亮效果。</p>\n<p>3.进程字段排序</p>\n<p>默认进入top时，各进程是按照CPU的占用量来排序的，在下图中进程ID为28894的java进程排在第一（cpu占用142%），进程ID为574的java进程排在第二（cpu占用16%）。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/top3.png\" alt=\"img\"></p>\n<p>敲击键盘“x”（打开/关闭排序列的加亮效果），top的视图变化如下：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/top4.png\" alt=\"img\"></p>\n<p>可以看到，top默认的排序列是“%CPU”。</p>\n<ol>\n<li>\n<p>通过”shift + &gt;”或”shift + &lt;”可以向右或左改变排序列</p>\n<div><pre><code>下图是按一次”shift + &gt;”的效果图,视图现在已经按照%MEM来排序。\n</code></pre>\n<div><span>1</span><br></div></div></li>\n</ol>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/top5.png\" alt=\"img\"></p>\n<p>2）显示完整命令</p>\n<p>复制</p>\n<div><pre><code>top -c\n</code></pre>\n<div><span>1</span><br></div></div><p>3）以批处理模式显示程序信息</p>\n<p>复制</p>\n<div><pre><code>top -b\n</code></pre>\n<div><span>1</span><br></div></div><p>4）以累积模式显示程序信息</p>\n<p>复制</p>\n<div><pre><code>top -S\n</code></pre>\n<div><span>1</span><br></div></div><p>5）设置信息更新次数</p>\n<p>复制</p>\n<div><pre><code>top -n 2\n</code></pre>\n<div><span>1</span><br></div></div><p>6）设置信息更新时间</p>\n<p>复制</p>\n<div><pre><code>top -d 3\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>表示更新周期为3秒</p>\n<p>7）显示指定的进程信息</p>\n<p>复制</p>\n<div><pre><code>top -p 574\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"top交互命令\"> top交互命令</h3>\n<p>在top 命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了s 选项， 其中一些命令可能会被屏蔽。</p>\n<p>h 显示帮助画面，给出一些简短的命令总结说明</p>\n<p>k 终止一个进程。</p>\n<p>i 忽略闲置和僵死进程。这是一个开关式命令。</p>\n<p>q 退出程序</p>\n<p>r 重新安排一个进程的优先级别</p>\n<p>S 切换到累计模式</p>\n<p>s 改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s</p>\n<p>f或者F 从当前显示中添加或者删除项目</p>\n<p>o或者O 改变显示项目的顺序</p>\n<p>l 切换显示平均负载和启动时间信息</p>\n<p>m 切换显示内存信息</p>\n<p>t 切换显示进程和CPU状态信息</p>\n<p>c 切换显示命令名称和完整命令行</p>\n<p>M 根据驻留内存大小进行排序</p>\n<p>P 根据CPU使用百分比大小进行排序</p>\n<p>T 根据时间/累计时间进行排序</p>\n<p>W 将当前设置写入~/.toprc文件中</p>\n<h2 id=\"信号控制进程kill\"> 信号控制进程kill</h2>\n<p>Linux中的kill命令用来终止指定的进程（terminate a process）的运行，是Linux下进程管理的常用命令。通常，终止一个前台进程可以使用Ctrl+C键，但是，对于一个后台进程就须用kill命令来终止，我们就需要先使用ps/pidof/pstree/top等工具获取进程PID，然后使用kill命令来杀掉该进程。kill命令是通过向进程发送指定的信号来结束相应进程的。在默认情况下，采用编号为15的TERM信号。TERM信号将终止所有不能捕获该信号的进程。对于那些可以捕获该信号的进程就要用编号为9的kill信号，强行“杀掉”该进程。</p>\n<div><pre><code>kill(选项)(参数)\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"选项-3\"> 选项</h3>\n<p>复制</p>\n<div><pre><code>-a：当处理当前进程时，不限制命令名和进程号的对应关系；-l &lt;信息编号&gt;：若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称；-p：指定kill 命令只打印相关进程的进程号，而不发送任何信号；-s &lt;信息名称或编号&gt;：指定要送出的信息；-u：指定用户。\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"参数\"> 参数</h3>\n<p>进程或作业识别号：指定要删除的进程或作业。</p>\n<h3 id=\"功能-2\"> 功能</h3>\n<p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果无法终止该程序可用“-KILL”参数，其发送的信号为SIGKILL（9），将强制结束进程，使用ps命令或者jobs命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p>\n<h3 id=\"常用实例-2\"> 常用实例</h3>\n<p>复制</p>\n<div><pre><code># kill -l 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL 5) SIGTRAP      6) SIGABRT      7) SIGBUS       8) SIGFPE 9) SIGKILL     10) SIGUSR1     11) SIGSEGV     12) SIGUSR213) SIGPIPE     14) SIGALRM     15) SIGTERM     16) SIGSTKFLT17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU25) SIGXFSZ     26) SIGVTALRM   27) SIGPROF     28) SIGWINCH29) SIGIO       30) SIGPWR      31) SIGSYS      34) SIGRTMIN35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3  38) SIGRTMIN+439) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+843) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+1247) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-1451) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-1055) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7  58) SIGRTMAX-659) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-263) SIGRTMAX-1  64) SIGRTMAX\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。 下面是常用的信号：</p>\n<p>HUP 1 终端断线</p>\n<p>INT 2 中断（同 Ctrl + C）</p>\n<p>QUIT 3 退出（同 Ctrl + \\）</p>\n<p>TERM 15 终止</p>\n<p>KILL 9 强制终止</p>\n<p>CONT 18 继续（与STOP相反， fg/bg命令）</p>\n<p>STOP 19 暂停（同 Ctrl + Z）</p>\n<p>2）得到指定信号的数值</p>\n<p>复制</p>\n<div><pre><code># kill -l KILL9# kill -l SIGKILL9# kill -l TERM15# kill -l SIGTERM15\n</code></pre>\n<div><span>1</span><br></div></div><p>3）先用ps查找进程，然后用kill杀掉</p>\n<p>复制</p>\n<div><pre><code>#ps -ef|grep vim root      3268  2884  0 16:21 pts/1    00:00:00 vim install.logroot      3370  2822  0 16:21 pts/0    00:00:00 grep vim# kill 3268 # kill 3268 -bash: kill: (3268) - 没有那个进程\n</code></pre>\n<div><span>1</span><br></div></div><p>4）彻底杀死进程</p>\n<p>复制</p>\n<div><pre><code># ps -ef|grep vim root      3268  2884  0 16:21 pts/1    00:00:00 vim install.logroot      3370  2822  0 16:21 pts/0    00:00:00 grep vim# kill –9 3268 # kill 3268 -bash: kill: (3268) - 没有那个进程\n</code></pre>\n<div><span>1</span><br></div></div><p>5）杀死指定用户所有进程</p>\n<p>复制</p>\n<div><pre><code># kill -9 $(ps -ef | grep peidalinux) # kill -u peidalinux\n</code></pre>\n<div><span>1</span><br></div></div><p>6）init进程是不可杀的</p>\n<p>复制</p>\n<div><pre><code># ps -ef|grep initroot         1     0  0 Nov02 ?        00:00:00 init [3]                  root     17563 17534  0 17:37 pts/1    00:00:00 grep init# kill -9 1# kill -HUP 1# ps -ef|grep initroot         1     0  0 Nov02 ?        00:00:00 init [3]                  root     17565 17534  0 17:38 pts/1    00:00:00 grep init# kill -KILL 1# ps -ef|grep initroot         1     0  0 Nov02 ?        00:00:00 init [3]                  root     17567 17534  0 17:38 pts/1    00:00:00 grep init\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>init是Linux系统操作中不可缺少的程序之一。所谓的init进程，它是一个由内核启动的用户级进程。内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。 其它所有进程都是init进程的子孙。init进程是不可杀的！</p>\n<p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/20/2825837.html</p>\n<p>http://man.linuxde.net/kill</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/24/2831353.html</p>\n<p>http://man.linuxde.net/top</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html</p>\n<p>http://man.linuxde.net/ps</p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/top1.png",
      "date_published": "2020-08-29T14:11:40.000Z",
      "date_modified": "2020-08-29T14:11:40.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "博客主页",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/",
      "content_html": "<p>相关配置文档请见 <a href=\"https://vuepress-theme-hope.github.io/zh/guide/layout/blog/\" target=\"_blank\" rel=\"noopener noreferrer\">博客主页</a></p>\n",
      "date_published": "2019-05-18T07:27:15.000Z",
      "date_modified": "2021-04-03T15:20:21.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "核心知识点概览",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/READMEBAK/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/READMEBAK/",
      "content_html": "<h2 id=\"核心知识点概览\"> 核心知识点概览</h2>\n<h3 id=\"ansible\"> Ansible</h3>\n<h3 id=\"目前生产中ansible-的使用场景\"> 目前生产中ansible 的使用场景</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/clay-wangzhi/ansible-role-sysinit\" target=\"_blank\" rel=\"noopener noreferrer\">系统初始化</a></p>\n</li>\n<li>\n<p><a href=\"https://wiki.clay-wangzhi.com/10-zabbix/10.2-zabbix-jie-zhu-ansible-an-zhuang\" target=\"_blank\" rel=\"noopener noreferrer\">安装配置zabbix</a></p>\n</li>\n<li>\n<p><a href=\"\">安装配置elk</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/clay-wangzhi/ansible-role-tomcat\" target=\"_blank\" rel=\"noopener noreferrer\">安装配置tomcat</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/clay-wangzhi/ansible-role-mysql\" target=\"_blank\" rel=\"noopener noreferrer\">安装配置mysql</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/clay-wangzhi/ansible-role-jenkins\" target=\"_blank\" rel=\"noopener noreferrer\">安装配置jenkins</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/clay-wangzhi/ansible-role-zookeeper\" target=\"_blank\" rel=\"noopener noreferrer\">安装配置zookeeper集群</a></p>\n</li>\n<li>\n<p><a href=\"\">项目升级发布</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/easzlab/kubeasz\" target=\"_blank\" rel=\"noopener noreferrer\">安装配置二进制的kubernetes集群</a></p>\n</li>\n</ul>\n<h4 id=\"ansible-有哪些特性\"> Ansible 有哪些特性</h4>\n<ul>\n<li>Agentless，无客户端</li>\n<li>Serverless，在服务端无需启动任何服务，只需执行命令即可</li>\n<li>默认使用ssh控制各节点</li>\n<li>基于模块工作，可以使用任何语言编写模块</li>\n<li>使用yaml语言定制playbook</li>\n<li>幂等性，多次操作或多次执行不影响结果</li>\n</ul>\n<h4 id=\"ansible-配置文件解析优先级-由高到低依次为\"> Ansible 配置文件解析优先级，由高到低依次为</h4>\n<ol>\n<li>ANSIBLE_CONFIG 环境变量指定的配置文件</li>\n<li>当前目录下的的ansible.cfg</li>\n<li>家目录下的ansible.cfg</li>\n<li>/etc/ansible/ansible.cfg</li>\n</ol>\n<h4 id=\"ansible-inventory-知识点\"> Ansible inventory 知识点</h4>\n<ul>\n<li>inventory 主机清单，包含静态inventory和动态inventory</li>\n<li>要使用多个inventory的功能，需将inventory指定为文件目录（默认为/etc/ansible/hosts文件）</li>\n<li>inventory指定目录时，目录下文件最好不要带有后缀名</li>\n<li>Ansible 默认预定义了两个主机组：<code>all</code>分组（所有主机）和<code>ungrouped</code>分组（不在分组内的主机）</li>\n<li>inventory可以配置单独的变量文件（host_vars和group_vars）</li>\n<li>hosts指令，匹配主机，匹配多个用''单引号括起来，用逗号分隔，通配符（*，&amp;, !）,正则匹配，以'~'开头</li>\n<li>ansible-inventory命令\n<ul>\n<li>树状形式展开主机列表<code>ansible-inventory all --graph</code></li>\n<li>同时带上变量<code>ansible-inventory all --graph --vars</code></li>\n</ul>\n</li>\n<li>通过<code>--limit</code>或<code>-l</code>明确指定主机或组</li>\n<li>临时添加节点<code>add_host</code>，临时设置主机组<code>group_by</code></li>\n</ul>\n<h4 id=\"ansible-hoc-点对点模式-知识点\"> Ansible-hoc（点对点模式）知识点</h4>\n<ul>\n<li>\n<p><code>ansible-doc -l</code>查看有哪些模块，<code>ansible-doc -s moudle</code>查看某个模块的参数，<code>ansible-doc module</code>查看该模块更详细的信息</p>\n</li>\n<li>\n<p>命令格式<code>ansible 主机或组 -m 模块名 -a '模块参数' ansible参数</code></p>\n</li>\n<li>\n<p>4个命令执行模块的区别：</p>\n<ul>\n<li>command模块：该模块通过-a跟上要执行的命令可以直接执行，不过命令里如果有带有如下字符部分则执行不成功 “ &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;|&quot;, &quot;&amp;&quot;</li>\n<li>shell 模块：用法基本和command一样，不和command相同，但是支持解析特殊shell符号</li>\n<li>raw模块：执行底层shell命令。command和shell模块都是通过目标主机上的python代码启动/bin/sh来执行命令的，raw模块在远程主机上直接启动/bin/sh来执行命令</li>\n<li>script模块：在远程主机上执行脚本文件，其原理是先将shell 复制到远程主机，再在远程主机上执行</li>\n</ul>\n</li>\n<li>\n<p>常用模块</p>\n<ul>\n<li>command</li>\n<li>shell</li>\n<li>script</li>\n<li>ping</li>\n<li>file</li>\n<li>copy</li>\n<li>service</li>\n<li>lineinfile</li>\n<li>cron</li>\n<li>debug</li>\n<li>template</li>\n</ul>\n</li>\n<li>\n<p>debug 模块</p>\n<p>用于输出调试一些数据，模块包含如下选项：</p>\n<ul>\n<li>msg：可以输出字符串，可以输出变量的值，变量调用需加&quot;{{}}&quot;</li>\n<li>var：只能输出变量的值，变量调用无需加任何东西，只需数据变量名称</li>\n</ul>\n<blockquote>\n<p>注意格式，=号左右没有空格</p>\n</blockquote>\n</li>\n<li>\n<p>lineinfile 模块</p>\n<p>lineinfile模块用于在源文件中插入、删除、替换行，和sed命令的功能类似，也支持正则表达式匹配和替换。</p>\n<ul>\n<li>path 指定文件</li>\n<li>line  行内容</li>\n<li>regexp 正则匹配</li>\n<li>insertbefore，insertafter 匹配的行前后插入</li>\n<li>state 状态</li>\n<li>validate 校验文件格式是否正确</li>\n<li>regexp和insertXXX结合，regexp参数则充当幂等性判断参数：只有regepx匹配失败时，insertXXX才会插入行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ansible-playbook-知识点\"> Ansible playbook 知识点</h4>\n<ul>\n<li>\n<p>playbook、play和task的关系</p>\n<ul>\n<li>playbook中可以定义一个或多个play</li>\n<li>每个play中可以定义一个或多个task</li>\n</ul>\n</li>\n<li>\n<p>可以定义两类特殊的task：pre_tasks和post_tasks</p>\n<ul>\n<li>pre_tasks表示执行执行普通任务之前执行的任务列表</li>\n<li>post_tasks表示普通任务执行完之后执行的任务列表</li>\n</ul>\n</li>\n<li>\n<p>playbook主要有以下四部分构成</p>\n<ul>\n<li>Target：用于定义将要执行playbook的远程主机组及远程主机组上的用户，还包括定义通过什么样的方式连接远程主机</li>\n<li>Variable：定义playbook运行时需要使用的变量</li>\n<li>Task：定义将要在远程主机上执行的任务列表</li>\n<li>Handler：定义task执行完成以后需要调用的任务</li>\n</ul>\n</li>\n<li>\n<p>常用命令</p>\n<ul>\n<li>校验playbook语法 <code>ansible-playbook --syntax-check xxx.yml</code></li>\n<li>测试运行playbook <code>ansible-playbook -C xxx.yml</code></li>\n</ul>\n</li>\n<li>\n<p>循环语句</p>\n<ul>\n<li>loop关键字，等价于<code>with_list</code>循环列表</li>\n</ul>\n</li>\n<li>\n<p>条件语句</p>\n<ul>\n<li>when关键字，block关键字，rescue关键字，always关键字</li>\n<li>fail模块，filed_when，ignore_errors，change_when，assert断言模块</li>\n<li>any_errors_fatal，max_fail_percentage</li>\n</ul>\n</li>\n<li>\n<p>高级用法</p>\n<ul>\n<li>本地执行 <code>connection: local</code></li>\n<li>任务委托 <code>delegate_to</code></li>\n<li>任务暂停 <code>wait_for</code></li>\n<li>滚动执行 <code>serial</code></li>\n<li>执行一次 <code>run_once</code></li>\n<li>设置环境变量 <code>environment</code></li>\n<li>交互式提示 <code>vars_prompt</code></li>\n</ul>\n</li>\n<li>\n<p>tag</p>\n<ul>\n<li>打tag <code>tags:</code></li>\n<li>指定tag执行 <code>--tags &quot;xxx,xxx&quot;</code></li>\n<li>排除指定的tag执行 <code>--skip-tags &quot;xxx,xxx&quot;</code></li>\n<li>查看所有tag <code>--list-tags</code></li>\n</ul>\n</li>\n<li>\n<p>roles目录结构</p>\n<div><pre><code>$ ansible-galaxy init first_role\n$ tree first_role/\nfirst_role/            \\\\ 角色名称\n├── defaults           \\\\ 为当前角色设定默认变量时使用此目录，应当包含一个main.yml文件；\n│   └── main.yml        \n├── files              \\\\ 存放有copy或script等模块调用的文件\n├── handlers           \\\\ 此目录应当包含一个main.yml文件，用于定义各角色用到的各handler\n│   └── main.yml\n├── meta               \\\\ 应当包含一个main.yml，用于定义角色的特殊设定及其依赖关系；1.3及以后版本支持\n│   └── main.yml\n├── README.md\n├── tasks              \\\\ 至少包含一个名为main.yml的文件，定义了此角色的任务列表\n│   └── main.yml\n├── templates          \\\\ template模块会自动在此目录中寻找Jinja2模板文件\n├── tests\n│   ├── inventory\n│   └── test.yml\n└── vars              \\\\ 应当包含一个main.yml，用于定义此角色用到的变量\n    └── main.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>\n<li>\n<p>playbook 调用格式 <code>ansible-playbook -i /etc/ansible/xxx.yml /etc/ansbile/playbooks/xx.yml --limit &quot;xxx&quot; -e &quot;key=xxx&quot;</code></p>\n</li>\n<li>\n<p>roles 的任务执行顺序</p>\n<ol>\n<li>首先执行meta下的main.yml文件内容     可以设置该role和其它role之前的关联关系。 dependencies</li>\n<li>gather_facts任务</li>\n<li>pre_tasks指令中的任务</li>\n<li>pre_tasks中触发的所有handler</li>\n<li>roles指令加载的Role,执行tasks下的main.yml文件内容</li>\n<li>tasks指令中的任务</li>\n<li>roles和tasks中触发的所有handler, 使用了notify后，会调用 handlers 目录下的main.yml文件</li>\n<li>post_tasks指令中的任务</li>\n<li>post_tasks中触发的所有handler</li>\n</ol>\n</li>\n<li>\n<p>playbook 静态加载和动态加载</p>\n<ul>\n<li>roles、include、import_xxx同属一类，它们都是静态加载，都在playbook解析阶段加载文件</li>\n<li>include_xxx属于另一类，是动态加载，遇到指令的时候临时去加载文件</li>\n<li>要对包含的任务列表进行循环操作，则只能使用<code>include_tasks</code>关键字，不能使用<code>import_tasks</code>关键字，<code>import_tasks</code>并不支持循环操作</li>\n<li>使用include_tasks时，这个指令自身占用一个任务，使用import_tasks的时候，这个指令自身没有任务，它所在的任务会在解析playbook的时候被其加载的子任务覆盖</li>\n<li>无法使用--list-tags列出include_xxx中的tags，无法使用--list-tasks列出include_xxx中的任务，因为它们都是临时动态加载的</li>\n</ul>\n</li>\n<li>\n<p>jinja2</p>\n</li>\n</ul>\n<h4 id=\"ansible-变量-知识点\"> Ansible 变量 知识点</h4>\n<ul>\n<li>\n<p>变量作用域</p>\n<ul>\n<li>全局作用域：Ansible配置文件、环境变量、命令行选项-e,--extra-vars设置的变量都是全局变量</li>\n<li>Play作用域：整个Play中都有效的变量，vars_files、vars_prompt、play级别的vars以及Role的变量，它们都是play级别的变量</li>\n<li>主机变量：绑定在各主机上的变量，各种方式定义的inventory变量、Facts信息变量(这个就划分在这吧)、set_fact、register、include_vars都是主机变量</li>\n<li>任务变量：只在当前任务中生效的变量，task级别的vars定义的变量属于任务变量</li>\n<li>block变量：只在当前block内生效，block级别的vars定义的变量属于block变量</li>\n<li>预定义特殊变：这些变量由Ansible自身内部维护，有些是全局变量，有些是play变量，有些是主机变量，所以不方便对它们分类</li>\n</ul>\n</li>\n<li>\n<p>主机变量</p>\n<ul>\n<li>\n<p>内置主机变量<code>ansible_host</code>、<code>ansible_port</code>、<code>ansible_user</code>、<code>ansible_password</code>、<code>ansible_connection</code>等</p>\n</li>\n<li>\n<p>自定义主机变量，在主机清单中</p>\n<ul>\n<li>\n<p>in INI <code>hosts1 http_port=80</code>，</p>\n</li>\n<li>\n<p>in YAML</p>\n<div><pre><code>host1:\n  http_port: 80\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n</ul>\n</li>\n<li>\n<p>自定义组变量，在主机清单中</p>\n<ul>\n<li>\n<p>in INI</p>\n<div><pre><code>[atlanta]\nhost1\nhost2\n\n[atlanta:vars]\nntp_server=ntp.aliyun.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>\n<li>\n<p>in YAML</p>\n<div><pre><code>atlanta:\n  hosts:\n    host1:\n    host2:\n  vars:\n    ntp_server: ntp.aliyun.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>\n</ul>\n</li>\n<li>\n<p>通过<code>host_vars</code>和<code>group_vars</code>目录定义变量，需要说明的是，如果主机组定义的变量与主机冲突，主机变量优先级最高</p>\n</li>\n</ul>\n</li>\n<li>\n<p>play 变量</p>\n<ul>\n<li>通过vars关键字定义</li>\n<li>通过vars_files关键字引入变量文件</li>\n</ul>\n</li>\n<li>\n<p>注册变量 <code>register</code></p>\n</li>\n<li>\n<p>Facts 变量</p>\n</li>\n<li>\n<p>内置变量/魔法变量</p>\n<ul>\n<li>hostvars 所有和主机相关的变量</li>\n<li>inventory_hostname 当前正在运行task的主机的主机名</li>\n<li>group_names 组名</li>\n<li>groups 主机组列表</li>\n<li>ansible_play_batch（play_hosts/ansible_play_hosts）当前play所涉及的所有主机列表，但连接失败或执行任务失败的节点不会留在此变量中</li>\n<li>inventory_dir 主机清单所在目录</li>\n<li>inventory_file 主机清单文件</li>\n</ul>\n</li>\n<li>\n<p>lookup 生产变量</p>\n<ul>\n<li>语法 <code>lookup('&lt;plugin_name&gt;', 'plugin_argument')</code></li>\n<li>从命令执行结果读取(pipe插件)</li>\n<li>从磁盘文件读取(file/fileglob插件)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ansible-使用优化\"> Ansible 使用优化</h4>\n<ul>\n<li>\n<p>加大forks的值</p>\n</li>\n<li>\n<p>开启ssh长连接为5天 ，要求ssh为5.6版本，查看版本ssh -v</p>\n<div><pre><code># cat /etc/ansible/ansible.cfg\nssh_args = -C -o ControlMaster=auto -o ControlPersist=5d \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n<li>\n<p>Shell层次上的优化：将任务分开执行</p>\n</li>\n</ul>\n<p>以下优化，根据实际情况进行修改</p>\n<ul>\n<li>\n<p>修改执行策略，改为free</p>\n</li>\n<li>\n<p>开启pipeling，在不使用sudo的情况下开启pipeling，减少ansible没有传输时的连接数</p>\n<div><pre><code>修改ansible.cfg中pipelining=False改为True\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>修改facts收集行为，<code>gather_facts: no</code> ，或者添加缓存，注意添加缓存后有坑，比如创建带有时间的文件夹</p>\n</li>\n<li>\n<p>使Ansible异步执行任务，async和poll指令</p>\n</li>\n<li>\n<p>第三方策略插件：Mitogen for Ansible</p>\n</li>\n</ul>\n<h4 id=\"ansible-常见问题\"> Ansible 常见问题</h4>\n<ul>\n<li>server端未安装 sshpass</li>\n<li>将host_key_checking设为False，关闭密码检查</li>\n</ul>\n<h4 id=\"yaml-文件知识点\"> YAML 文件知识点</h4>\n<ul>\n<li>\n<p>YAML的基本语法规则如下：</p>\n<p>(1).使用缩进表示层级关系</p>\n<p>(2).缩进时不允许使用Tab键，只允许使用空格</p>\n<p>(3).缩进的空格数目不重要，只要相同层级的元素左对齐即可</p>\n<p>(4).yaml文件以&quot;---&quot;作为文档的开始，以表明这是一个yaml文件</p>\n<p>(5).# 表示注释，从这个字符一直到行尾，都会被解析器忽略</p>\n<p>(6).字符串不用加引号，但在可能产生歧义时，需加引号(单双引号皆可)，比如引用变量时</p>\n<p>(7).布尔值非常灵活，不分区大小写的true/false、yes/no、on/off、y/n、0和1都允许</p>\n</li>\n<li>\n<p>YAML支持三种数据结构：</p>\n<p>(1).对象：key/value格式，也称为哈希结构、字典结构或关联数组</p>\n<p>(2).数组：也称为列表</p>\n<p>(3).标量(scalars)：单个值</p>\n</li>\n<li>\n<p>[ ] elk</p>\n<ul>\n<li>[ ] elk ansbile 部署</li>\n<li>[ ] elk docker 部署</li>\n<li>[ ] filebeat 用到了哪些模板</li>\n<li>[ ] logstash 用到了哪些模板</li>\n</ul>\n</li>\n<li>\n<p>[ ] jenkins</p>\n<ul>\n<li>[ ] jenkins ansible 部署</li>\n<li>[ ] jenkins 工具集成，用到了哪些工具</li>\n<li>[ ] jenkins pipeline编写</li>\n</ul>\n</li>\n<li>\n<p>[ ] nginx</p>\n<ul>\n<li>[ ] nginx 热升级</li>\n<li>[ ] nginx 部署</li>\n<li>[ ] nginx 常用模块</li>\n<li>[ ] nginx 生产中用到了哪些功能</li>\n</ul>\n</li>\n<li>\n<p>[ ] system 服务配置</p>\n</li>\n<li>\n<p>[ ] tomcat 生产配置</p>\n</li>\n<li>\n<p>[ ] shell</p>\n<ul>\n<li>[ ] 编写了哪些shell，shell脚本归档</li>\n<li>[ ] <code>$?</code>等一众的意思</li>\n</ul>\n</li>\n<li>\n<p>[ ] python jumpserver二次开发为自动化运维平台</p>\n</li>\n<li>\n<p>[ ] golang 的基础知识，使用golang二开开发Prometheus exporter</p>\n</li>\n<li>\n<p>[ ] zabbix</p>\n<ul>\n<li>[ ] ansible 部署zabbix</li>\n<li>[ ] zabbix 4.x 的新特性 5.x 1</li>\n<li>[ ] zabbix webhook(js)钉钉报警</li>\n<li>[ ] zabbix housekeeping 数据库分区</li>\n<li>[ ] zabbix 生产级 监控上千的主机的优化，指标拉去策略，分区，代理等</li>\n</ul>\n</li>\n<li>\n<p>[ ] openldap</p>\n<ul>\n<li>[ ] openldap的搭建</li>\n<li>[ ] phpldapadmin的使用</li>\n<li>[ ] 自助修改密码</li>\n</ul>\n</li>\n<li>\n<p>[ ] 常用集群，中间件，数据库的搭建</p>\n<ul>\n<li>[ ] activemq ，zookeeper架构，存储架构 ，单节点与集群</li>\n<li>[ ] rabbitmq，集群搭建，docker-compose方式搭建</li>\n<li>[ ] fastdfs，单节点及集群搭建，单节点，dockerfile</li>\n<li>[ ] redis 集群的搭建，redis迁移</li>\n<li>[ ] mysql ansible 搭建，各个版本，单机和主从</li>\n</ul>\n</li>\n<li>\n<p>[ ] kubernetes</p>\n<ul>\n<li>[ ] 各种组件间的关系</li>\n<li>[ ] etcd 了解，及备份恢复</li>\n<li>[ ] k8s的事件通知告警， 也就是 events</li>\n<li>[ ] 日常的一些 kubectl 运维命令等基础</li>\n<li>[ ] pod调度以及资源限制</li>\n<li>[ ] Prometheus-operator，如何修改配置文件</li>\n<li>[ ] kubernetes中的CI/CD，日志集成</li>\n<li>[ ] 权限管理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"wiki-目录\"> wiki 目录</h2>\n<ul>\n<li>\n<p>[x] 1 Linux</p>\n<ul>\n<li>[x] 1.1 Linux简介</li>\n<li>[x] 1.2 文件管理\n<ul>\n<li>[x] 1.2.1 查看文件类型</li>\n<li>[x] 1.2.2 查看文件详细属性</li>\n<li>[x] 1.2.3 创建、复制、移动、删除</li>\n<li>[x] 1.2.4 查看文件内容</li>\n<li>[x] 1.2.5 打包、压缩</li>\n</ul>\n</li>\n<li>[x] 1.3 计划任务</li>\n<li>[x] 1.4 用户管理</li>\n<li>[x] 1.5 进程管理</li>\n<li>[x] 1.6 管道及I/O重定向</li>\n<li>[x] 1.7 软件包管理</li>\n<li>[x] 1.8 网络管理</li>\n<li>[x] 1.9 日志logrotate</li>\n<li>[x] 1.10 /etc/security/limits.conf 详解与配置</li>\n</ul>\n</li>\n<li>\n<p>[x] Shell</p>\n<ul>\n<li>[x] 第一部分 初见shell\n<ul>\n<li>[x] 1.为什么使用shell编程</li>\n<li>[x] 2.和Sha-Bang(#!)一起出发\n<ul>\n<li>[x] 2.1 调用一个脚本</li>\n<li>[x] 2.2 牛刀小试</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>[x] 第二部分 shell基础\n<ul>\n<li>[x] 3.特殊字符</li>\n<li>[x] 4.变量与参数\n<ul>\n<li>[x] 4.1 变量替换</li>\n<li>[x] 4.2 变量赋值</li>\n<li>[x] 4.3 Bash弱类型变量</li>\n<li>[x] 4.4 特殊变量类型</li>\n</ul>\n</li>\n<li>[x] 5.引用\n<ul>\n<li>[x] 5.1 引用变量</li>\n<li>[x] 5.2 转义</li>\n</ul>\n</li>\n<li>[x] 6.退出与退出状态</li>\n<li>[x] 7.测试\n<ul>\n<li>[x] 7.1 测试结构</li>\n<li>[x] 7.2 文件测试操作</li>\n<li>[x] 7.3 其他比较操作</li>\n<li>[x] 7.4 嵌套if/then条件测试</li>\n<li>[x] 7.5 牛刀小试</li>\n</ul>\n</li>\n<li>[x] 8.运算符相关话题\n<ul>\n<li>[x] 8.1 运算符</li>\n<li>[x] 8.2 数字常量</li>\n<li>[x] 8.3 双圆括号结构</li>\n<li>[x] 8.4 运算符优先级</li>\n</ul>\n</li>\n<li>[x] 9.换个角度看变量\n<ul>\n<li>[x] 9.1内部变量</li>\n<li>[x] 9.2  变量类型标注: declare与typeset\n<ul>\n<li>[x] 9.2.1 declare的另类用法</li>\n</ul>\n</li>\n<li>[x] 9.3 $RANDOM：生产随机数</li>\n</ul>\n</li>\n<li>[x] 10.变量处理\n<ul>\n<li>[x] 10.1 字符串处理\n<ul>\n<li>[x] 10.1.1 使用awk处理字符串</li>\n<li>[x] 10.1.2 参考资料</li>\n</ul>\n</li>\n<li>[x] 10.2 参数替换</li>\n</ul>\n</li>\n<li>[x] 11.循环与分支\n<ul>\n<li>[x] 11.1 循环</li>\n<li>[x] 11.2 嵌套循环</li>\n<li>[x] 11.3 循环控制</li>\n<li>[x] 11.4 测试与分支</li>\n</ul>\n</li>\n<li>[x] 12.命令替换</li>\n<li>[x] 13.算数扩展</li>\n</ul>\n</li>\n<li>[ ] 第四部分 命令</li>\n<li>[x] 第五部分 高级话题\n<ul>\n<li>[x] 18.正则表达式\n<ul>\n<li>[x] 18.1 正则表示式简介</li>\n<li>[ ] 18.2 文件名替换</li>\n<li>[x] 18.3 正则表达式对照表</li>\n</ul>\n</li>\n<li>[x] 19.嵌入文档</li>\n<li>[x] 20.I/O重定向\n<ul>\n<li>[x] 20.1 使用exec</li>\n<li>[x] 20.2 重定向代码块</li>\n<li>[x] 20.3 应用程序</li>\n</ul>\n</li>\n<li>[x] 21.子shell</li>\n<li>[x] 22.限制模式的Shell</li>\n<li>[x] 23.进程替换</li>\n<li>[x] 24.函数\n<ul>\n<li>[x] 24.1 复杂函数和函数复杂性</li>\n<li>[x] 24.2 局部变量</li>\n<li>[x] 24.3 不适用局部变量的递归</li>\n</ul>\n</li>\n<li>[x] 25.别名</li>\n<li>[x] 26.列表结构</li>\n<li>[x] 27.数组</li>\n<li>[x] 30.网络编程</li>\n<li>[x] 33.选项</li>\n<li>[x] 34.陷阱</li>\n<li>[ ] 36.其他\n<ul>\n<li>[ ] 36.5 有颜色的脚本</li>\n<li>[x] 36.11 ssh远程操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>[x] 第六部分 Google Shell 风格指南</li>\n<li>[x] 第七部分 实例</li>\n</ul>\n</li>\n<li>\n<p>[x] 3 Python</p>\n<ul>\n<li>[x] 3.1 简介</li>\n<li>[x] 3.2 数据类型</li>\n<li>[x] python subprocess模块的使用</li>\n<li>[x] python解析nginx配置文件</li>\n<li>[x] python调用jenkinsAPI批量拷贝视图job</li>\n<li>[x] python调用zabbixAPI批量添加web监控</li>\n<li>[x] python监控activemq集群</li>\n</ul>\n</li>\n<li>\n<p>[x] 4 Golang</p>\n<ul>\n<li>[x] 4.1 程序结构</li>\n<li>[ ] 4.2 数据类型\n<ul>\n<li>[ ] 4.2.1 基础数据类型</li>\n<li>[ ] 4.2.2 复合数据类型</li>\n</ul>\n</li>\n<li>[ ] 4.3 函数</li>\n</ul>\n</li>\n<li>\n<p>[x] Docker</p>\n<ul>\n<li>[x] Docker简介</li>\n<li>[x] CentOS安装Docker CE</li>\n<li>[x] Docker 基本概念</li>\n<li>[x] Docker 使用镜像</li>\n<li>[x] Dockerfile</li>\n<li>[x] Docker 操作容器</li>\n<li>[x] Docker 数据管理</li>\n<li>[x] Docker 使用网络</li>\n<li>[x] Docker 命令</li>\n<li>[x] Docker 底层实现</li>\n<li>[x] Docker Compose</li>\n<li>[x] Docker Harbor</li>\n<li>[x] Docker Harbor HA</li>\n</ul>\n</li>\n<li>\n<p>[x] 6 Kubernetes</p>\n<ul>\n<li>[x] 6.1 集群的安装\n<ul>\n<li>[x] 6.1.1 kubeadm安装集群</li>\n<li>[x] 6.1.2 二进制安装集群</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>[x] 7 Nginx</p>\n<ul>\n<li>[x] 1.初识Nginx</li>\n<li>[x] 2.nginx架构基础</li>\n<li>[x] 3.nginx配置文件详解\n<ul>\n<li>[x] 3.1 nginx全局块和events块配置</li>\n<li>[x] 3.2 nginxHTTP块配置</li>\n<li>[x] 3.3 nginxSERVER块配置</li>\n<li>[x] 3.4 nginxLOCATION块配置</li>\n<li>[ ] 3.5 nginx常用模块</li>\n</ul>\n</li>\n<li>[x] 4.内核参数优化</li>\n<li>[x] 5.状态码</li>\n<li>[x] 6.nginx的常见问题</li>\n</ul>\n</li>\n<li>\n<p>[x] 8 Tomcat</p>\n<ul>\n<li>[x] 8.1 tomcat简介</li>\n<li>[x] 生产环境中的tomcat配置</li>\n<li>[x] tomcat假死现象</li>\n<li>[x] Tomcat 错误代号及状态码</li>\n<li>[x] tomcat注意事项</li>\n</ul>\n</li>\n<li>\n<p>[x] 9 Elasticsearch</p>\n<ul>\n<li>[x] 9.1 概述\n<ul>\n<li>[x] 9.1.1 Elasticsearch 简介及其发展历史</li>\n<li>[x] 9.1.2 Elastic Stack 家族成员及其应用场景</li>\n</ul>\n</li>\n<li>[x] 9.2 安装上手\n<ul>\n<li>[x] 9.2.1 Elasticsearch的安装和简单配置</li>\n<li>[x] 9.2.2 Kibana的安装和界面快速浏览</li>\n<li>[x] 9.2.3 在Docker容器中运行Elasticsearch，Kibana和Cerebro</li>\n</ul>\n</li>\n<li>[x] 9.3 Elasticsearch入门\n<ul>\n<li>[x] 9.3.1 基本概念</li>\n<li>[x] 9.3.2 文档的基本操作CRUP与批量操作</li>\n<li>[x] 9.3.3 倒排索引入门</li>\n<li>[x] 9.3.4 通过分析器进行分词</li>\n<li>[x] 9.3.5 Search API概览</li>\n<li>[x] 9.3.6 URI Search详解</li>\n<li>[x] 9.3.7 Request Body和Query DSL简介</li>\n<li>[ ] 9.3.8 QueryString &amp; Simple Query String查询</li>\n<li>[ ] 9.3.9 Dynamic Mapping和常见参数介绍</li>\n<li>[ ] 9.3.10 显示Mapping设置与常见参数介绍</li>\n<li>[ ] 9.3.11 多字段特性及Mapping中配置自定义Analyzer</li>\n<li>[ ] 9.3.12 Index Template和Dynamic Template</li>\n<li>[ ] 9.3.13 Elasticsearch聚合分析简介</li>\n<li>[ ] 9.3.14 小练习（一）</li>\n</ul>\n</li>\n<li>[ ] 9.4 深入搜索\n<ul>\n<li>[ ] 9.4.1 基于词项和基于全文的搜索</li>\n<li>[ ] 9.4.2 结构化搜索</li>\n<li>[ ] 9.4.3 搜索的相关性算分</li>\n<li>[ ] 9.4.4 Query &amp; Filtering与多字符串多字段查询</li>\n<li>[ ] 9.4.5 单字符串多字段查询</li>\n<li>[ ] 9.4.6 多语言及中文分词与检索</li>\n<li>[ ] 9.4.7 Space Jam，一次全文搜索的实例</li>\n<li>[ ] 9.4.8 使用Search Template和Index Alias查询</li>\n<li>[ ] 9.4.9 综合排序： Function Score Query优化算分</li>\n<li>[ ] 9.4.10 Term &amp; Phrase Suggester</li>\n<li>[ ] 9.4.11 自动补全与基于上下文的提示</li>\n<li>[ ] 9.4.12 配置跨集群搜索</li>\n</ul>\n</li>\n<li>[ ] 9.5 分布式特性及分布式搜索的机制\n<ul>\n<li>[ ] 9.5.1 集群分布式模型及选主与脑裂问题</li>\n<li>[ ] 9.5.2 分片与集群的故障转移</li>\n<li>[ ] 9.5.3 文档分布式存储</li>\n<li>[ ] 9.5.4 分片及其生命周期</li>\n<li>[ ] 9.5.5 剖析分布式查询及相关性算分</li>\n<li>[ ] 9.5.6 排序及Doc Values &amp; Fielddata</li>\n<li>[ ] 9.5.7 分页及遍历： From，Size，Search After &amp; Scroll API</li>\n<li>[ ] 9.5.8 处理并发读写操作</li>\n</ul>\n</li>\n<li>[ ] 9.6 深入聚合分析\n<ul>\n<li>[ ] 9.6.1 Bucket &amp; Metric 聚合分析及嵌套聚合</li>\n<li>[ ] 9.6.2 Pipeline集合分析</li>\n<li>[ ] 9.6.3 作用范围与排序</li>\n<li>[ ] 9.6.4 聚合分析的原理及精准度问题</li>\n</ul>\n</li>\n<li>[ ] 9.7 数据建模\n<ul>\n<li>[ ] 9.7.1 对象及Nested对象</li>\n<li>[ ] 9.7.2 文档的父子关系</li>\n<li>[ ] 9.7.3 Update By Query &amp; Reindex API</li>\n<li>[ ] 9.7.4 Ingest Pipeline &amp; Painless Script</li>\n<li>[ ] 9.7.5 Elasticsearch 数据建模实例</li>\n<li>[ ] 9.7.6 Elasticsearch 数据建模最佳实践</li>\n<li>[ ] 9.7.7 小练习（二）</li>\n</ul>\n</li>\n<li>[ ] 9.8 保护你的数据\n<ul>\n<li>[ ] 9.8.1 集群身份认证与用户鉴权</li>\n<li>[ ] 9.8.2 集群内部安全通信</li>\n<li>[ ] 9.8.3 集群与外部间的安全通信</li>\n</ul>\n</li>\n<li>[ ] 9.9 水平扩展Elasticsearch集群\n<ul>\n<li>[ ] 9.1 常见的集群部署方式</li>\n<li>[ ] 9.2 Hot &amp; Warm架构与Shard FIltering</li>\n<li>[ ] 9.3 如何对集群进行容量规划</li>\n<li>[ ] 9.4 分片设计及管理</li>\n<li>[ ] 9.5 在私有云上管理Elas集群的一些方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>[x] 10 Zabbix</p>\n<ul>\n<li>[x] 10.1 zabbix4.4新功能</li>\n<li>[x] 10.2 zabbix借助ansible安装</li>\n<li>[x] 10.3 zabbix添加报警媒介</li>\n<li>[x] 10.4 mysql监控模块</li>\n<li>[x] 10.5 redis监控模块</li>\n<li>[x] 10.6 常见问题</li>\n<li>[x] 10.7 用zabbix api批量添加web监控</li>\n<li>[x] 10.8 activemq监控</li>\n<li>[x] 10.9 zookeeper集群监控</li>\n<li>[x] 10.10 Todolist</li>\n</ul>\n</li>\n<li>\n<p>[x] 11 消息中间件</p>\n<ul>\n<li>[x] 11.1 activemq集群的搭建</li>\n<li>[x] 11.2 rabbitmq的搭建</li>\n</ul>\n</li>\n<li>\n<p>[x] 12 常见集群的搭建</p>\n<ul>\n<li>[x] 12.1 keepalived和heartbeat对比</li>\n<li>[x] 12.2 zookeeper集群</li>\n<li>[x] 12.3 fastdfs</li>\n<li>[x] 12.4 rocketmq集群的搭建</li>\n</ul>\n</li>\n<li>\n<p>[x] 13 常见集群的搭建</p>\n<ul>\n<li>[x] 13.1 shadowsocks</li>\n<li>[x] 13.2 jdk</li>\n<li>[x] 13.3 python3.6</li>\n<li>[x] 13.4 新建博客方法</li>\n<li>[x] 13.5 confluence</li>\n</ul>\n</li>\n<li>\n<p>[x] 14 Markdown</p>\n<ul>\n<li>[x] 14.1 让Markdown写作更简单Typora完全使用指南</li>\n</ul>\n</li>\n<li>\n<p>[x] 15 Ansible</p>\n<ul>\n<li>[x] 1 初识Ansible</li>\n<li>[x] 2 Ansible Inventory配置详解</li>\n<li>[x] 3 Ansible Ad-hoc命令集\n<ul>\n<li>[x] 3.1 Ansible lineinfile模块详解</li>\n</ul>\n</li>\n<li>[x] 4 Ansible Playbook\n<ul>\n<li>[x] 4.1 Playbook的结构及handler用法</li>\n<li>[x] 4.2 Playbook循环语句</li>\n<li>[x] 4.3 Playbook条件语句</li>\n<li>[x] 4.4 Playbook高级用法</li>\n<li>[x] 4.5 Playbook之tags</li>\n<li>[x] 4.6 巧用Roles</li>\n<li>[x] 4.7 文件管理模块及Jinja2过滤器</li>\n</ul>\n</li>\n<li>[x] 5 Ansible变量\n<ul>\n<li>[x] 5.1 自定义变量</li>\n<li>[x] 5.2 Fact变量</li>\n<li>[x] 5.3 魔法变量</li>\n<li>[x] 5.4 使用lookup生成变量</li>\n<li>[x] 5.5 使用vault配置加密</li>\n</ul>\n</li>\n<li>[x] 6 Ansible使用优化</li>\n</ul>\n</li>\n<li>\n<p>[x] 16 MySQL</p>\n<ul>\n<li>[x] 16.1 MySQL基本操作</li>\n<li>[x] 16.2 列表类型和数据完整性</li>\n<li>[x] 16.3 数据库设计与查询语句</li>\n<li>[x] 16.4 视图、事务、索引、函数</li>\n<li>[x] 16.5 MySQL存储引擎</li>\n<li>[x] 16.6 用户权限和访问控制</li>\n<li>[x] 16.7 备份恢复</li>\n<li>[x] 16.8 AB复制</li>\n<li>[x] 16.9 主主和keepalived</li>\n<li>[ ] 16.10 读写分离和Ameoba</li>\n<li>[x] 16.11 MySQL逻辑架构</li>\n<li>[x] 16.12 MySQL锁等待</li>\n<li>[x] 16.13 MySQL常见问题</li>\n<li>[x] 16.14 MySQL bin-log日志清理</li>\n</ul>\n</li>\n<li>\n<p>[x] 17 Redis</p>\n<ul>\n<li>[ ] 17.1 安装</li>\n<li>[ ] 17.2 配置</li>\n<li>[ ] 17.3 服务器端和客户端命令</li>\n<li>[ ] 17.4 数据库操作\n<ul>\n<li>[ ] 17.4.1 string类型</li>\n<li>[ ] 17.4.2 键命令</li>\n<li>[ ] 17.4.3 hash类型</li>\n<li>[ ] 17.4.4 list类型</li>\n<li>[ ] 17.4.5 set类型</li>\n<li>[ ] 17.4.6 zset类型</li>\n</ul>\n</li>\n<li>[x] 17.5 centos7安装redis-5.0.0主从</li>\n<li>[x] 17.6 redis5.0.4集群搭建步骤</li>\n<li>[x] 17.7 centos7安装升级ruby</li>\n<li>[x] 17.8 redis-dump方式导入导出数据</li>\n<li>[x] redis面试题</li>\n</ul>\n</li>\n<li>\n<p>[x] 18 HTML</p>\n<ul>\n<li>[x] 18.1 html入门</li>\n</ul>\n</li>\n<li>\n<p>[x] 19 CSS</p>\n<ul>\n<li>[x] 19.1 列表、div、span</li>\n<li>[x] 19.2 整体感知、常见属性、选择器</li>\n<li>[x] 19.3 css性质、盒模型、标准文档流、浮动</li>\n<li>[x] 19.4 行高和字号、超链接美化、background</li>\n<li>[x] 19.5 相对定位、绝对定位、固定定位、z-index</li>\n</ul>\n</li>\n<li>\n<p>[x] 20 jenkins</p>\n<ul>\n<li>[x] 20.1 jenkins的安装配置</li>\n<li>[x] 20.2 Jenkins Job迁移</li>\n<li>[x] Jenkins常见错误</li>\n<li>[x] Jenkins关闭和重启的实现方式</li>\n<li>[x] 使用Jenkins Pipeline自动化构建发布</li>\n</ul>\n</li>\n<li>\n<p>[x] 21 vim</p>\n<ul>\n<li>[x] vim设置参数以方便YAML语句录入</li>\n<li>[x] vim常用命令</li>\n</ul>\n</li>\n<li>\n<p>[x] 22 网络</p>\n<ul>\n<li>[x] TCP协议三次握手四次挥手</li>\n</ul>\n</li>\n<li>\n<p>[x] 23 未分类</p>\n<ul>\n<li>[x] DEV SIT UAT PET SIM PRD PROD常见环境英文缩写含义</li>\n<li>[x] 调优</li>\n</ul>\n</li>\n<li>\n<p>[x] 24 常见问题</p>\n<ul>\n<li>[x] centos时区</li>\n<li>[x] curl https报错</li>\n<li>[x] du-df磁盘使用不一致</li>\n<li>[x] linux下增加交换分区</li>\n<li>[x] mysql最大连接数</li>\n</ul>\n</li>\n<li>\n<p>[x] 25 openldap</p>\n<ul>\n<li>[x] Centos7 搭建openldap</li>\n<li>[x] phpldapadmin操作指导</li>\n</ul>\n</li>\n<li>\n<p>[x] 26 gitlab</p>\n<ul>\n<li>[x] gitlab备份迁移升级&amp;集成openldap</li>\n</ul>\n</li>\n<li>\n<p>[x] 27 监控体系</p>\n<ul>\n<li>[x] 聊头监控体系</li>\n<li>[x] grafana问题</li>\n<li>[ ] Prometheus</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-04-01T05:56:42.000Z",
      "date_modified": "2021-04-01T05:56:42.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Summary",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/SUMMARY/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/SUMMARY/",
      "content_html": "<h1 id=\"summary\"> Summary</h1>\n<ul>\n<li><a href=\"./\">Introduction</a></li>\n</ul>\n<h2 id=\"ansible\"> Ansible</h2>\n<ul>\n<li>[1 初识Ansible](Ansible/1 初识Ansible.md)</li>\n<li>[2 Ansible Inventory 配置详解](Ansible/2 Ansible Inventory配置详解.md)</li>\n<li>[3 Ansible Ad-hoc 命令集](Ansible/3 Ansible Ad-hoc命令集.md)</li>\n<li>[3 Ansible lineinfile 模块详解](Ansible/3_1_Ansible lineinfile模块详解.md)</li>\n<li>[4 Ansible Playbook](Ansible/4 Ansible Playbook.md)\n<ul>\n<li>[4.1 Playbook的结构及handler用法](Ansible/4_1_ Playbook的结构及handler用法.md)</li>\n<li><a href=\"./Ansible/4_2_Playbook循环语句.html\">4.2 Playbook循环语句</a></li>\n<li><a href=\"./Ansible/4_3_Playbook条件语句.html\">4.3 Playbook条件语句</a></li>\n<li><a href=\"./Ansible/4_4_Playbook高级用法.html\">4.4 Playbook高级用法</a></li>\n<li><a href=\"./Ansible/4_5_Playbook之tags.html\">4.5 Playbook之tags</a></li>\n<li><a href=\"./Ansible/4_6_巧用Roles.html\">4.6 巧用Roles</a></li>\n<li><a href=\"./Ansible/4_7_文件管理模块及Jinja2过滤器.html\">4.7 文件管理模块及Jinja2过滤器</a></li>\n<li><a href=\"./Ansible/4_8_yaml语法.html\">4.8 yaml 语法</a></li>\n</ul>\n</li>\n<li>[5 Ansible变量](Ansible/5 Ansible变量.md)\n<ul>\n<li><a href=\"./Ansible/5_1_自定义变量.html\">5.1 自定义变量</a></li>\n<li><a href=\"./Ansible/5_2_Fact变量.html\">5.2 Fact变量</a></li>\n<li><a href=\"./Ansible/5_3_魔法变量.html\">5.3 魔法变量</a></li>\n<li><a href=\"./Ansible/5_4_使用lookup生成变量.html\">5.4 使用lookup生成变量</a></li>\n<li><a href=\"./Ansible/5_5_使用vault配置加密.html\">5.5 使用vault配置加密</a></li>\n</ul>\n</li>\n<li>[6 Ansible使用优化](Ansible/6 Ansible使用优化.md)</li>\n</ul>\n<h2 id=\"linux\"> Linux</h2>\n<ul>\n<li><a href=\"./Linux/linux简介.html\">linux简介</a></li>\n<li>文件管理\n<ul>\n<li><a href=\"./Linux/文件管理/查看文件类型.html\">查看文件类型</a></li>\n<li><a href=\"./Linux/文件管理/查看文件详细属性.html\">查看文件详细属性</a></li>\n<li><a href=\"./Linux/文件管理/zsgc.html\">创建、复制、移动、删除</a></li>\n<li><a href=\"./Linux/文件管理/查看文件内容.html\">查看文件内容</a></li>\n<li><a href=\"./Linux/文件管理/打包压缩.html\">打包、压缩</a></li>\n</ul>\n</li>\n<li>文件权限\n<ul>\n<li><a href=\"./Linux/文件权限/基本权限UGO.html\">基本权限UGO</a></li>\n</ul>\n</li>\n<li><a href=\"./Linux/计划任务.html\">计划任务</a></li>\n<li><a href=\"./Linux/用户管理.html\">用户管理</a></li>\n<li><a href=\"./Linux/进程管理.html\">进程管理</a></li>\n<li><a href=\"./Linux/管道及I-O重定向.html\">管道及I/O重定向</a></li>\n<li><a href=\"./Linux/软件包管理.html\">软件包管理</a></li>\n<li><a href=\"./Linux/网络管理.html\">网络管理</a></li>\n<li><a href=\"./Linux/日志logrotate.html\">日志logrotate</a></li>\n<li><a href=\"./Linux/limit.conf文件配置.html\"> /etc/security/limits.conf 详解与配置</a></li>\n<li><a href=\"./Linux/常用知识.html\">常用知识</a></li>\n</ul>\n<h2 id=\"shell\"> Shell</h2>\n<ul>\n<li><a href=\"./shell/part1/part1.html\">第一部分 初见shell</a>\n<ul>\n<li><a href=\"./shell/part1/01_shell_programming.html\">1. 为什么使用shell编程</a></li>\n<li><a href=\"./shell/part1/02_starting_off_with_a_sha_bang.html\">2. 和Sha-Bang(#!)一起出发</a>\n<ul>\n<li><a href=\"./shell/part1/02_1_invoking_the_script.html\">2.1 调用一个脚本</a></li>\n<li><a href=\"./shell/part1/02_2_preliminary_exercises.html\">2.2 牛刀小试</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"./shell/part2/part2.html\">第二部分 shell基础</a>\n<ul>\n<li><a href=\"./shell/part2/03_special_characters.html\">3. 特殊字符</a></li>\n<li><a href=\"./shell/part2/04_introduction_to_variables_and_parameters.html\">4. 变量与参数</a>\n<ul>\n<li><a href=\"./shell/part2/04_1_variable_substitution.html\">4.1 变量替换</a></li>\n<li><a href=\"./shell/part2/04_2_variable_assignment.html\">4.2 变量赋值</a></li>\n<li><a href=\"./shell/part2/04_3_bash_variables_are_untyped.html\">4.3 Bash弱类型变量</a></li>\n<li><a href=\"./shell/part2/04_4_special_variable_types.html\">4.4 特殊变量类型</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part2/05_quoting.html\">5. 引用</a>\n<ul>\n<li><a href=\"./shell/part2/05_1_quoting_variables.html\">5.1 引用变量</a></li>\n<li><a href=\"./shell/part2/05_2_escaping.html\">5.2 转义</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part2/06_exit_and_exit_status.html\">6. 退出与退出状态</a></li>\n<li><a href=\"./shell/part2/07_tests.html\">7. 测试</a>\n<ul>\n<li><a href=\"./shell/part2/07_1_test_constructs.html\">7.1 测试结构</a></li>\n<li><a href=\"./shell/part2/07_2_file_test_operators.html\">7.2 文件测试操作</a></li>\n<li><a href=\"./shell/part2/07_3_other_comparison_operators.html\">7.3 其他比较操作</a></li>\n<li><a href=\"./shell/part2/07_4_nested_if_then_condition_tests.html\">7.4 嵌套 if/then 条件测试</a></li>\n<li><a href=\"./shell/part2/07_5_testing_your_knowledge_of_tests.html\">7.5 牛刀小试</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part2/08_operations_and_related_topics.html\">8. 运算符相关话题</a>\n<ul>\n<li><a href=\"./shell/part2/08_1_operators.html\">8.1 运算符</a></li>\n<li><a href=\"./shell/part2/08_2_numerical_constants.html\">8.2 数字常量</a></li>\n<li><a href=\"./shell/part2/08_3_the_double_parentheses_construct.html\">8.3 双圆括号结构</a></li>\n<li><a href=\"./shell/part2/08_4_operator_precedence.html\">8.4 运算符优先级</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"./shell/part3/part3.html\">第三部分 shell进阶</a>\n<ul>\n<li><a href=\"./shell/part3/09_another_look_at_variables.html\">9. 换个角度看变量</a>\n<ul>\n<li><a href=\"./shell/part3/09_1_internal_variables.html\">9.1 内部变量</a></li>\n<li><a href=\"./shell/part3/09_2_typing_variables_declare_or_typeset.html\">9.2 变量类型标注：declare 与 typeset</a>\n<ul>\n<li><a href=\"./shell/part3/09_2_1_another_use_for_declare.html\">9.2.1 declare 的另类用法</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part3/09_3_random_generate_random_integer.html\">9.3 $RANDOM：生成随机数</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part3/10_manipulating_variables.html\">10. 变量处理</a>\n<ul>\n<li><a href=\"./shell/part3/10_1_manipulating_strings.html\">10.1 字符串处理</a>\n<ul>\n<li><a href=\"./shell/part3/10_1_1_manipulating_strings_using_awk.html\">10.1.1 使用 awk 处理字符串</a></li>\n<li><a href=\"./shell/part3/10_1_2_further_reference.html\">10.1.2 参考资料</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part3/10_2_parameter_substitution.html\">10.2 参数替换</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part3/11_loops_and_branches.html\">11. 循环与分支</a>\n<ul>\n<li><a href=\"./shell/part3/11_1_loops.html\">11.1 循环</a></li>\n<li><a href=\"./shell/part3/11_2_nested_loops.html\">11.2 嵌套循环</a></li>\n<li><a href=\"./shell/part3/11_3_loop_control.html\">11.3 循环控制</a></li>\n<li><a href=\"./shell/part3/11_4_testing_and_branching.html\">11.4 测试与分支</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part3/12_command_substitution.html\">12. 命令替换</a></li>\n<li><a href=\"./shell/part3/13_arithmetic_expansion.html\">13. 算术扩展</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part4/part4.html\">第四部分 命令</a></li>\n<li><a href=\"./shell/part5/part5.html\">第五部分 高级话题</a>\n<ul>\n<li><a href=\"./shell/part5/18_regular_expressions.html\">18.正则表达式</a>\n<ul>\n<li><a href=\"./shell/part5/18_1_a_brief_introduction_to_regular_expressions.html\">18.1正则表达式简介</a></li>\n<li><a href=\"./shell/part5/18_2_globbing.html\">18.2文件名替换</a></li>\n<li><a href=\"./shell/part5/18_3_regular_expression_comparison_table.html\">18.3 正则表达式对照表</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part5/19_here_documents.html\">19. 嵌入文档</a></li>\n<li><a href=\"./shell/part5/20_io_redirection.html\">20. I/O 重定向</a>\n<ul>\n<li><a href=\"./shell/part5/20_1_use_exec.html\">20.1 使用 exec</a></li>\n<li><a href=\"./shell/part5/20_2_redirecting_code_blocks.html\">20.2 重定向代码块</a></li>\n<li><a href=\"./shell/part5/20_3_applications.html\">20.3 应用程序</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part5/21_subshells.html\">21. 子shell</a></li>\n<li><a href=\"./shell/part5/22_Restricted_Shells.html\">22. 限制模式的Shell</a></li>\n<li><a href=\"./shell/part5/23_Process_Substitution.html\">23. 进程替换</a></li>\n<li><a href=\"./shell/part5/24_functions.html\">24. 函数</a>\n<ul>\n<li><a href=\"./shell/part5/24_1_complex_functions_and_function_complexities.html\">24.1 复杂函数和函数复杂性</a></li>\n<li><a href=\"./shell/part5/24_2_local_variables.html\">24.2 局部变量</a></li>\n<li><a href=\"./shell/part5/24_3_recursion_without_local_variables.html\">24.3 不适用局部变量的递归</a></li>\n</ul>\n</li>\n<li><a href=\"./shell/part5/25_aliases.html\">25. 别名</a></li>\n<li><a href=\"./shell/part5/26_List_Constructs.html\">26. 列表结构</a></li>\n<li><a href=\"./shell/part5/27_arrays.html\">27. 数组</a></li>\n<li><a href=\"./shell/part5/30_network_programming.html\">30. 网络编程</a></li>\n<li><a href=\"./shell/part5/33_options.html\">33. 选项</a></li>\n<li><a href=\"./shell/part5/34_Gotchas.html\">34. 陷阱</a></li>\n<li><a href=\"./shell/part5/36_miscellany.html\">36. 其他</a>\n<ul>\n<li><a href=\"./shell/part5/36_5_colorizing_scripts.html\">36.5 有颜色的脚本</a></li>\n<li><a href=\"./shell/part5/36_11_ssh_remote_operate.html\">36.11 ssh远程操作</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"./shell/part6/part6.html\">第六部分 Google Shell 风格指南</a></li>\n<li><a href=\"./shell/part7/shili.html\">第七部分 实例</a></li>\n</ul>\n<h2 id=\"_3-python\"> 3 Python</h2>\n<ul>\n<li>[3.1 简介](3 python/3.1 简介.md)</li>\n<li>[3.2 数据类型](3 python/3.2 数据类型.md)</li>\n<li>[python subprocess模块的使用](3 python/python subprocess模块的使用.md)</li>\n<li>[python解析nginx配置文件](3 python/python解析nginx配置文件.md)</li>\n<li>[python调用jenkinsAPI批量拷贝视图job](3 python/python调用jenkinsAPI批量拷贝视图job.md)</li>\n<li>[python调用zabbixAPI批量添加web监控](3 python/python调用zabbixAPI批量添加web监控.md)</li>\n<li>[python监控activemq集群](3 python/python监控activemq集群.md)</li>\n</ul>\n<h2 id=\"_4-golang\"> 4 Golang</h2>\n<ul>\n<li>[4.1 程序结构](4 golang/4.1 程序结构.md)</li>\n<li>4.2 数据类型\n<ul>\n<li>4.2.1 基础数据类型</li>\n<li>4.2.2 复合数据类型</li>\n</ul>\n</li>\n<li>4.3 函数</li>\n</ul>\n<h2 id=\"docker\"> Docker</h2>\n<ul>\n<li><a href=\"./Docker/docker_recommend.html\">Docker文章推荐</a></li>\n<li><a href=\"./Docker/docker_harbor.html\">Docker Harbor</a></li>\n<li><a href=\"./Docker/docker_harbor_ha.html\">Docker Harbor HA</a></li>\n<li><a href=\"./Docker/docker_rabbitmq.html\">快速搭建rabbitmq高可用集群</a></li>\n</ul>\n<h2 id=\"nginx\"> Nginx</h2>\n<ul>\n<li><a href=\"./Nginx/1.初识Nginx.html\">1.初识Nginx</a></li>\n<li><a href=\"./Nginx/2.nginx架构基础.html\">2.nginx架构基础</a></li>\n<li><a href=\"./Nginx/3.nginx配置文件详解.html\">3.nginx配置文件详解</a>\n<ul>\n<li><a href=\"./Nginx/3_1_nginx全局块和events块配置.html\">3.1 nginx全局块和events块配置</a></li>\n<li><a href=\"./Nginx/3_2_nginxHTTP块配置.html\">3.2 nginxHTTP块配置</a></li>\n<li><a href=\"./Nginx/3_3_nginxSERVER块配置.html\">3.3 nginxSERVER块配置</a></li>\n<li><a href=\"./Nginx/3_4_nginxLOCATION块配置.html\">3.4 nginxLOCATION块配置</a></li>\n<li><a href=\"./Nginx/3_5_nginx常用模块.html\">3.5 nginx常用模块</a></li>\n</ul>\n</li>\n<li><a href=\"./Nginx/4.内核参数优化.html\">4.内核参数优化</a></li>\n<li><a href=\"./Nginx/5.状态码.html\">5.状态码</a></li>\n<li><a href=\"./Nginx/6.nginx的常见问题.html\">6.nginx的常见问题</a>\n<ul>\n<li>[Nginx出现403 forbidden的三种原因](Nginx/Nginx_FAQ/Nginx出现403 forbidden的三种原因.md)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_8-tomcat\"> 8 Tomcat</h2>\n<ul>\n<li>[8.1 tomcat简介](8 tomcat/8.1 tomcat简介.md)</li>\n<li>[生产环境中的tomcat配置](8 tomcat/生产环境中的tomcat配置.md)</li>\n<li>[tomcat假死现象](8 tomcat/tomcat假死现象.md)</li>\n<li>[Tomcat 错误代号及状态码](8 tomcat/Tomcat 错误代号及状态码.md)</li>\n<li>[tomcat注意事项](8 tomcat/tomcat注意事项.md)</li>\n</ul>\n<h2 id=\"_9-elasticsearch\"> 9 Elasticsearch</h2>\n<ul>\n<li>9.1 概述\n<ul>\n<li>[9.1.1 Elasticsearch 简介及其发展历史](9 elasticsearch/9.1 概述/9.1.1 Elasticsearch 简介及其发展历史.md)</li>\n<li>[9.1.2 Elastic Stack 家族成员及其应用场景](9 elasticsearch/9.1 概述/9.1.2 Elastic Stack 家族成员及其应用场景.md)</li>\n</ul>\n</li>\n<li>9.2 安装上手\n<ul>\n<li>[9.2.1 Elasticsearch的安装和简单配置](9 elasticsearch/9.2 安装上手/9.2.1 Elasticsearch的安装和简单配置.md)</li>\n<li>[9.2.2 Kibana的安装和界面快速浏览](9 elasticsearch/9.2 安装上手/9.2.2 Kibana的安装和界面快速浏览.md)</li>\n<li>[9.2.3 在Docker容器中运行Elasticsearch，Kibana和Cerebro](9 elasticsearch/9.2 安装上手/9.2.3 在Docker容器中运行Elasticsearch，Kibana和Cerebro.md)</li>\n</ul>\n</li>\n<li>9.3 Elasticsearch入门\n<ul>\n<li>[9.3.1 基本概念](9 elasticsearch/9.3 Elasticsearch入门/9.3.1 基本概念.md)</li>\n<li>[9.3.2 文档的基本操作CRUP与批量操作](9 elasticsearch/9.3 Elasticsearch入门/9.3.2 文档的基本操作CRUP与批量操作.md)</li>\n<li>[9.3.3 倒排索引入门](9 elasticsearch/9.3 Elasticsearch入门/9.3.3 倒排索引入门.md)</li>\n<li>[9.3.4 通过分析器进行分词](9 elasticsearch/9.3 Elasticsearch入门/9.3.4 通过分析器进行分词.md)</li>\n<li>[9.3.5 Search API概览](9 elasticsearch/9.3 Elasticsearch入门/9.3.5 Search API概览.md)</li>\n<li>[9.3.6 URI Search详解](9 elasticsearch/9.3 Elasticsearch入门/9.3.6 URI Search详解.md)</li>\n<li>[9.3.7 Request Body和Query DSL简介](9 elasticsearch/9.3 Elasticsearch入门/9.3.7 Request Body和Query DSL简介.md)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_10-zabbix\"> 10 Zabbix</h2>\n<ul>\n<li>[10.1 zabbix4.4新功能](10 zabbix/10.1 zabbix4.4新功能.md)</li>\n<li>[10.2 zabbix借助ansible安装](10 zabbix/10.2 zabbix借助ansible安装.md)</li>\n<li>[10.3 zabbix添加报警媒介](10 zabbix/10.3 zabbix添加报警媒介.md)</li>\n<li>[10.4 MySQL监控模块](10 zabbix/10.4 MySQL监控模块.md)</li>\n<li>[10.5 Redis监控模块](10 zabbix/10.5 Redis监控模块.md)</li>\n<li>[10.6 常见问题](10 zabbix/10.6 常见问题.md)</li>\n<li>[10.7 用zabbix api批量添加web监控](10 zabbix/10.7 用zabbix api批量添加web监控.md)</li>\n<li>[10.8 activemq监控](10 zabbix/10.8 activemq监控.md)</li>\n<li>[10.9 zookeeper集群监控](10 zabbix/10.9 zookeeper集群监控.md)</li>\n<li>[10.10 Todolist](10 zabbix/10.10 Todolist.md)</li>\n</ul>\n<h2 id=\"_11-消息中间件\"> 11 消息中间件</h2>\n<ul>\n<li>[11.1 activemq集群](11 消息中间件/11.1 activemq5.15.9集群搭建步骤.md)</li>\n<li>[11.2 rabbitmq](11 消息中间件/11.2 centos7安装rabbitmq-3.7.9.md)</li>\n</ul>\n<h2 id=\"_12-常见集群的搭建\"> 12 常见集群的搭建</h2>\n<ul>\n<li>[12.1 keepalived和heartbeat对比](12 常见集群的搭建/12.1 keepalived和heartbeat对比.md)</li>\n<li>[12.2 zookeeper集群](12 常见集群的搭建/12.2 zookeeper3.4.14集群搭建步骤.md)</li>\n<li>[12.3 fastdfs](12 常见集群的搭建/12.3 分布式FastDfs+nginx缓存高可用集群构建.md)</li>\n<li>[12.4 rocketmq集群的搭建](12 常见集群的搭建/12.4 rocketmq集群的搭建.md)</li>\n</ul>\n<h2 id=\"_13-常见服务的搭建\"> 13 常见服务的搭建</h2>\n<ul>\n<li>[13.1 shadowsocks](13 常见服务的搭建/13.1 centos7下搭建shadowsocks.md)</li>\n<li>[13.2 jdk](13 常见服务的搭建/13.2 centos下配置jdk的环境变量.md)</li>\n<li>[13.3 python3.6](13 常见服务的搭建/13.3 安装python3-6.md)</li>\n<li>[13.4 新建博客方法](13 常见服务的搭建/13.4 新建博客方法.md)</li>\n<li>[13.5 confluence](13 常见服务的搭建/13.5 基于docker搭建confluence.md)</li>\n</ul>\n<h2 id=\"_14-markdown\"> 14 Markdown</h2>\n<ul>\n<li>[14.1 让Markdown写作更简单Typora完全使用指南](14 markdown/14.1 让Markdown写作更简单Typora完全使用指南.md)</li>\n</ul>\n<h2 id=\"_16-mysql\"> 16 Mysql</h2>\n<ul>\n<li>[16.1 MySQL基本操作](16 MySQL/16.1 MySQL基本操作.md)</li>\n<li>[16.2 列表类型和数据完整性](16 MySQL/16.2 列表类型和数据完整性.md)</li>\n<li>[16.3 数据库设计与查询语句](16 MySQL/16.3 数据库设计与查询语句.md)</li>\n<li>[16.4 视图、事务、索引、函数](16 MySQL/16.4 视图、事务、索引、函数.md)</li>\n<li>[16.5 MySQL存储引擎](16 MySQL/16.5 MySQL存储引擎.md)</li>\n<li>[16.6 用户权限和访问控制](16 MySQL/16.6 用户权限和访问控制.md)</li>\n<li>[16.7 备份恢复](16 MySQL/16.7 备份恢复.md)</li>\n<li>[16.8 AB复制](16 MySQL/16.8 MySQLAB复制.md)</li>\n<li>[16.9 主主和keepalived](16 MySQL/16.9 MySQL的主主和keepalived.md)</li>\n<li>[16.10 读写分离和Amoeba](16 MySQL/16.10 Mysql读写分离和Amoeba.md)</li>\n<li>[16.11 MySQL逻辑架构](16 MySQL/16.11 MySQL逻辑架构.md)</li>\n<li>[16.12 MySQL锁等待](16 MySQL/16.12 MySQL锁等待.md)</li>\n<li>[16.13 MySQL常见问题](16 MySQL/16.13 MySQL常见问题.md)</li>\n<li>[16.14 MySQL bin-log日志清理 ](16 MySQL/16.14 MySQL bin-log日志清理 .md)</li>\n</ul>\n<h2 id=\"_17-redis\"> 17 Redis</h2>\n<ul>\n<li>[17.1 安装](17 Redis/17.1 安装.md)</li>\n<li>[17.2 配置](17 Redis/17.2 配置.md)</li>\n<li>[17.3 服务器端和客户端命令](17 Redis/17.3 服务器端和客户端命令.md)</li>\n<li>17.4 数据库操作\n<ul>\n<li>[17.4.1 string类型](17 Redis/17.4 数据库操作/17.4.1 string类型.md)</li>\n<li>[17.4.2 键命令](17 Redis/17.4 数据库操作/17.4.2 键命令.md)</li>\n<li>[17.4.3 hash类型](17 Redis/17.4 数据库操作/17.4.3 hash类型.md)</li>\n<li>[17.4.4 list类型](17 Redis/17.4 数据库操作/17.4.4 list类型.md)</li>\n<li>[17.4.5 set类型](17 Redis/17.4 数据库操作/17.4.5 set类型.md)</li>\n<li>[17.4.6 zset类型](17 Redis/17.4 数据库操作/17.4.6 zset类型.md)</li>\n</ul>\n</li>\n<li>[17.5 centos7安装redis-5.0.0主从](17 Redis/17.5 centos7安装redis-5.0.0主从.md)</li>\n<li>[17.6 redis5.0.4集群搭建步骤](17 Redis/17.6 redis5.0.4集群搭建步骤.md)</li>\n<li>[17.7 centos7安装升级ruby](17 Redis/17.7 centos7安装升级ruby.md)</li>\n<li>[17.8 redis-dump方式导入导出数据](17 Redis/17.8 redis-dump方式导入导出数据.md)</li>\n<li>[redis面试题](17 Redis/redis面试题.md)</li>\n</ul>\n<h2 id=\"_18-html\"> 18 HTML</h2>\n<ul>\n<li>[18.1 html入门](18 HTML/18.1 html入门.md)</li>\n</ul>\n<h2 id=\"_19-css\"> 19 CSS</h2>\n<ul>\n<li>[19.1 列表、div、span](19 CSS/19.1 列表、div、span.md)</li>\n<li>[19.2 整体感知、常见属性、选择器](19 CSS/19.2 整体感知、常见属性、选择器.md)</li>\n<li>[19.3 css性质、盒模型、标准文档流、浮动](19 CSS/19.3 css性质、盒模型、标准文档流、浮动.md)</li>\n<li>[19.4 行高和字号、超链接美化、background](19 CSS/19.4 行高和字号、超链接美化、background.md)</li>\n<li>[19.5 相对定位、绝对定位、固定定位、z-index](19 CSS/19.5 相对定位、绝对定位、固定定位、z-index.md)</li>\n</ul>\n<h2 id=\"_20-jenkins\"> 20 jenkins</h2>\n<ul>\n<li>[20.1 jenkins的安装配置](20 jenkins/20.1 jenkins的安装配置.md)</li>\n<li>[20.2 Jenkins Job迁移](20 jenkins/20.2 Jenkins Job迁移.md)</li>\n<li>[Jenkins常见问题](20 jenkins/jenkins常见问题.md)</li>\n<li>[Jenkins关闭和重启的实现方式](20 jenkins/Jenkins关闭和重启的实现方式.md)</li>\n<li>[使用Jenkins Pipeline自动化构建发布](20 jenkins/使用Jenkins Pipeline自动化构建发布.md)</li>\n</ul>\n<h2 id=\"_21-vim\"> 21 vim</h2>\n<ul>\n<li>[vim设置参数以方便YAML语句录入](21 vim/vim设置参数以方便YAML语句录入.md)</li>\n<li>[vim常用命令](21 vim/vim常用命令.md)</li>\n</ul>\n<h2 id=\"_22-网络\"> 22 网络</h2>\n<ul>\n<li>[TCP协议三次握手四次挥手](22 网络/TCP协议三次握手四次挥手.md)</li>\n<li>[ip地址](22 网络/ip地址.md)</li>\n</ul>\n<h2 id=\"_23-未分类\"> 23 未分类</h2>\n<ul>\n<li>[DEV SIT UAT PET SIM PRD PROD常见环境英文缩写含义](23 未分类/DEV SIT UAT PET SIM PRD PROD常见环境英文缩写含义.md)</li>\n<li>[调优](23 未分类/调优.md)</li>\n<li>[编程语言的分类](23 未分类/编程语言的分类.md)</li>\n<li>[curl方式执行shell脚本时如何传参](23 未分类/curl方式执行shell脚本时如何传参.md)</li>\n<li>[中文技术文档写作规范](23 未分类/document-style-guide.md)</li>\n<li>[PrometheusAlert](23 未分类/promethues-alerts.md)</li>\n</ul>\n<h2 id=\"_24-常见问题\"> 24 常见问题</h2>\n<ul>\n<li>[centos时区](24 常见问题/centos时区.md)</li>\n<li>[curl https报错](24 常见问题/curl https报错.md)</li>\n<li>[du-df磁盘使用不一致](24 常见问题/du-df磁盘使用不一致.md)</li>\n<li>[linux下增加交换分区](24 常见问题/linux下增加交换分区.md)</li>\n<li>[mysql最大连接数](24 常见问题/mysql最大连接数.md)</li>\n</ul>\n<h2 id=\"_25-openldap\"> 25 openldap</h2>\n<ul>\n<li>[Centos7 搭建openldap](25 openldap/Centos7 搭建openldap.md)</li>\n<li>[phpldapadmin操作指导](25 openldap/phpldapadmin操作指导.md)</li>\n</ul>\n<h2 id=\"_26-gitlab\"> 26 gitlab</h2>\n<ul>\n<li>[gitlab备份迁移升级&amp;集成openldap](26 gitlab/gitlab备份迁移升级&amp;集成openldap.md)</li>\n</ul>\n<h2 id=\"_27-监控体系\"> 27 监控体系</h2>\n<ul>\n<li>[聊头监控体系](27 监控体系/聊头监控体系.md)</li>\n<li>[grafana问题](27 监控体系/grafana问题.md)</li>\n</ul>\n<h2 id=\"git\"> git</h2>\n<ul>\n<li><a href=\"./git/git-basic.html\">git的基本使用</a></li>\n<li><a href=\"./git/git-commit-message.html\">Commit message 和 Change log 编写指南</a></li>\n</ul>\n",
      "date_published": "2019-06-02T01:49:10.000Z",
      "date_modified": "2021-03-15T08:50:19.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "3 Ansible Ad-hoc命令集",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/ad-hoc/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/ad-hoc/",
      "content_html": "<h1 id=\"_3-ansible-ad-hoc命令集\"> 3 Ansible Ad-hoc命令集</h1>\n<h2 id=\"_1-ad-hoc简介\"> 1 Ad-hoc简介</h2>\n<p>Ad-Hoc（点对点模式）是指ansible下临时执行的一条命令，并且不需要保存的命令，对于复杂的命令会使用playbook。Ad-hoc的执行依赖于模块，ansible官方提供了大量的模块。 如：command、raw、shell、file、cron等，具体可以通过ansible-doc -l 进行查看 。可以使用ansible-doc -s module来查看某个模块的参数，也可以使用ansible-doc module来查看该模块更详细的信息。</p>\n<h3 id=\"_1-1-命令说明\"> 1.1 命令说明</h3>\n<p>一个ad-hoc命令的执行，需要按以下格式进行执行：</p>\n<div><pre><code>ansible 主机或组 -m 模块名 -a <span>'模块参数'</span>  ansible参数\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>主机和组，是在/etc/ansible/hosts 里进行指定的部分，当然动态Inventory 使用的是脚本从外部应用里获取的主机；</li>\n<li>模块名，可以通过ansible-doc -l 查看目前安装的模块，默认不指定时，使用的是command模块，具体可以查看/etc/ansible/ansible.cfg 的“#module_name = command ” 部分，默认模块可以在该配置文件中进行修改；</li>\n<li>模块参数，可以通过 “ansible-doc -s 模块名” 查看具体的用法及后面的参数；</li>\n<li>ansible参数，可以通过ansible命令的帮助信息里查看到，这里有很多参数可以供选择，如是否需要输入密码、是否sudo等。</li>\n</ul>\n<h3 id=\"_1-2-用户说明\"> 1.2  用户说明</h3>\n<p>ansible在执行ad-hoc的时候，需要使用远程管理机上的一个用户身份，默认这个用户是root，而在实际生产环境中，不建议直接使用root，而推荐使用一个普通用户，需要配置该普通用户可通过sudo提权。</p>\n<p>下面是一个配置示例：</p>\n<ol>\n<li>在被管理机上创建一个普通用户ansible，并配置sudo提权：</li>\n</ol>\n<div><pre><code># 创建ansible用户\nuseradd ansible\n\n# 设置ansible用户可免密提权\nvim /etc/sudoers.d/ansible\nansible    ALL=(ALL)       NOPASSWD:ALL\n\nchmod 400 /etc/sudoers.d/ansible\n\nmkdir /home/ansible/.ssh\nchown ansible.ansible /home/ansible/.ssh\nchmod 700 /home/ansible/.ssh\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ol>\n<li>在管理端修改ansible.cfg配置文件如下：</li>\n</ol>\n<div><pre><code>[default]\nremote_user = ansible\nask_pass = False\n\n[privilege_escalation]\nbecome=True\nbecome_method=sudo\nbecome_user=root\nbecome_ask_pass=False\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ol>\n<li>将管理端用户的<code>id_rsa.pub</code>复制到被管理端的<code>/home/ansible/.ssh//home/ansible/.ssh/authorized_keys</code>文件中，并设置该文件的权限为400</li>\n</ol>\n<div><pre><code># 管理端执行：\nssh-copy-id -i .ssh/id_rsa.pub ansible@db1.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>需要说明的是，通过上面的操作，需要为ansible用户先创建密码，在实际生产当中，不建议为该用户设置密码。可在安装系统时，提前将管理端公钥直接写入到被管理节点的ansible用户下</p>\n</blockquote>\n<h3 id=\"_1-3-命令执行模块\"> 1.3 命令执行模块</h3>\n<p>命令执行模块包含如下 四个模块：</p>\n<ul>\n<li>command模块：该模块通过-a跟上要执行的命令可以直接执行，不过命令里如果有带有如下字符部分则执行不成功 “ &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;|&quot;, &quot;&amp;&quot;</li>\n<li>shell 模块：用法基本和command一样，不和command相同，但是支持解析特殊shell符号</li>\n<li>raw模块：执行底层shell命令。command和shell模块都是通过目标主机上的python代码启动/bin/sh来执行命令的，但目标主机上可能没有安装python，这时只能使用raw模块在远程主机上直接启动/bin/sh来执行命令，通常只有在目标主机上安装python时才使用raw模块，其它时候都不使用该模块</li>\n<li>script模块：在远程主机上执行脚本文件，其原理是先将shell 复制到远程主机，再在远程主机上执行</li>\n</ul>\n<blockquote>\n<p>raw模块和comand、shell 模块不同的是其没有chdir、creates、removes参数，chdir参数的作用就是先切到chdir指定的目录后，再执行后面的命令，这在后面很多模块里都会有该参数 。</p>\n</blockquote>\n<h2 id=\"_2-常用模块\"> 2 常用模块</h2>\n<p>根据官方的分类，将模块按功能分类为：云模块、命令模块、数据库模块、文件模块、资产模块、消息模块、监控模块、网络模块、通知模块、包管理模块、源码控制模块、系统模块、单元模块、web设施模块、windows模块 ，具体可以参看官方页面。</p>\n<p>这里从官方分类的模块里选择最常用的一些模块进行介绍。</p>\n<h3 id=\"_2-1-command模块\"> 2.1 command模块</h3>\n<p>command模块包含如下选项：</p>\n<ul>\n<li>creates：一个文件名，当该文件存在，则该命令不执行</li>\n<li>free_form：要执行的linux指令</li>\n<li>chdir：在执行指令之前，先切换到该指定的目录</li>\n<li>removes：一个文件名，当该文件不存在，则该选项不执行</li>\n<li>executable：切换shell来执行指令，该执行路径必须是一个绝对路径</li>\n</ul>\n<p>chdir示例：</p>\n<div><pre><code><span># 三个命令都会返回执行成功的状态。不过实际上只有前两个文件会被创建成功。使用raw模块的执行的结果文件事实上也被正常创建了，不过不是在chdir指定的目录，而是在当前执行用户的家目录</span>\nansible <span>192.168</span>.1.1 -m <span>command</span> -a <span>'chdir=/tmp/test.txt touch test.file'</span>\nansible <span>192.168</span>.1.1 -m shell -a <span>'chdir=/tmp/test.txt touch test2.file'</span>\nansible <span>192.168</span>.1.1 -m raw -a <span>'chdir=/tmp/text.txt touch test3.file'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>creates与removes示例：</p>\n<div><pre><code>ansible <span>192.168</span>.1.1 -a <span>'creates=/tmp/server.txt uptime'</span> <span>#当/tmp/server.txt文件存在时，则不执行uptime指令</span>\nansible <span>192.168</span>.1.1 -a <span>'removes=/tmp/server.txt uptime'</span> <span>#当/tmp/server.txt文件不存在时，则不执行uptime指令</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_2-2-script模块\"> 2.2 script模块</h3>\n<p>示例：</p>\n<div><pre><code><span>#要执行的脚本文件script.sh内容如下： </span>\n\n<span>#/bin/bash</span>\n<span>ifconfig</span>\n<span>df</span> -hT\n\n<span># 执行ansible指令：</span>\nansible <span>10.212</span>.52.252 -m script -a <span>'script.sh'</span> \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"_2-3-ping模块\"> 2.3 ping模块</h3>\n<p>测试主机是否是通的，用法很简单，不涉及参数：</p>\n<div><pre><code> ansible <span>test</span> -m <span>ping</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-4-file模块\"> 2.4 file模块</h3>\n<p>file模块主要用于远程主机上的文件操作，file模块包含如下选项：</p>\n<ul>\n<li>force：需要在两种情况下强制创建软链接，一种是源文件不存在但之后会建立的情况下；另一种是目标软链接已存在,需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no</li>\n<li>group：定义文件/目录的属组</li>\n<li>mode：定义文件/目录的权限</li>\n<li>owner：定义文件/目录的属主</li>\n<li>path：必选项，定义文件/目录的路径</li>\n<li>src：要被链接的源文件的路径，只应用于state=link的情况</li>\n<li>dest：被链接到的路径，只应用于state=link的情况</li>\n<li>state：\n<ul>\n<li>directory：如果目录不存在，创建目录</li>\n<li>file：即使文件不存在，也不会被创建</li>\n<li>link：创建软链接</li>\n<li>hard：创建硬链接</li>\n<li>touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</li>\n<li>absent：删除目录、文件或者取消链接文件</li>\n</ul>\n</li>\n</ul>\n<p>使用示例：</p>\n<div><pre><code>ansible <span>192.168</span>.8.120 -m <span>file</span> -a <span>'path=/tmp/test.txt state=touch owner=root group=root mode=644'</span>\n\nansible <span>192.168</span>.8.120 -m <span>file</span> -a <span>'src=/tmp/test.txt dest=/root/test.txt state=link'</span>\n\nansible <span>192.168</span>.8.120 -m <span>file</span> -a <span>'path=/tmp/test.txt state=file'</span>\n\nansible <span>192.168</span>.8.120 -m <span>file</span> -a <span>'path=/tmp/test state=directory owner=root group=root mode=755'</span>\n\nansible <span>192.168</span>.8.120 -m <span>file</span> -a <span>'path=/tmp/test2/test3/aaa/bbb state=directory owner=root group=root mode=755'</span>\n\nansible <span>192.168</span>.8.120 -m <span>file</span> -a <span>'path=/tmp/test2 state=absent'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"_2-5-copy模块\"> 2.5 copy模块</h3>\n<p>复制文件到远程主机，copy模块包含如下选项：</p>\n<ul>\n<li>backup：在覆盖之前将原文件备份，备份文件包含时间信息。有两个选项：yes|no</li>\n<li>content：用于替代&quot;src&quot;,可以直接设定指定文件的值</li>\n<li>dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录</li>\n<li>force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes</li>\n<li>others：所有的file模块里的相关文件属性选项都可以在这里使用</li>\n<li>src：要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用&quot;/&quot;来结尾，则只复制目录里的内容，如果没有使用&quot;/&quot;来结尾，则包含目录在内的整个内容全部复制，类似于rsync。</li>\n</ul>\n<p>示例如下：</p>\n<div><pre><code>ansible 192.168.8.120 -m copy -a &#39;src=/etc/ansible/ansible.cfg dest=/usr/local/src/ owner=root group=root mode=644&#39;\n\nansible 192.168.8.120 -m copy -a &#39;backup=yes src=/etc/fstab dest=/usr/local/src/ansible.cfg owner=root group=root mode=644&#39;\n\nansible 192.168.8.120 -m copy -a &#39;content=&quot;just a test!&quot; dest=/usr/local/src/test.txt&#39;\n\nansible 192.168.8.120 -m copy -a &#39;src=/data dest=/usr/local/src/&#39;\n\nansible 192.168.8.120 -m copy -a &#39;src=/data/ dest=/usr/local/src/&#39;\n\nansible 192.168.8.120 -m copy -a &quot;src=/mine/sudoers dest=/etc/sudoers validate=&#39;visudo -cf %s&#39;&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"_2-6-yum模块\"> 2.6 yum模块</h3>\n<p>使用yum包管理器来管理软件包，其选项有：</p>\n<ul>\n<li><code>name</code>：要进行操作的软件包的名字，也可以传递一个url或者一个本地的rpm包的路径</li>\n<li><code>state</code>：状态（present，absent，latest）</li>\n</ul>\n<p>示例如下：</p>\n<div><pre><code>ansible test -m yum -a &#39;name=httpd state=latest&#39;\nansible test -m yum -a &#39;name=&quot;@Development tools&quot; state=present&#39;\nansible test -m yum -a &#39;name=http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm state=present&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-7-service模块\"> 2.7 service模块</h3>\n<p>用于管理服务\n该模块包含如下选项：</p>\n<ul>\n<li>arguments：给命令行提供一些选项</li>\n<li>enabled：是否开机启动 yes|no</li>\n<li>name：必选项，服务名称</li>\n<li>pattern：定义一个模式，如果通过status指令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务依然在运行</li>\n<li>runlevel：运行级别</li>\n<li>sleep：如果执行了restarted，在则stop和start之间沉睡几秒钟</li>\n<li>state：对当前服务执行启动，停止、重启、重新加载等操作（started,stopped,restarted,reloaded）</li>\n<li>daemon_reload：针对使用systemd的系统，重新加载systemd配置，yes/no</li>\n</ul>\n<p>使用示例：</p>\n<div><pre><code>ansible test -m service -a &quot;name=httpd state=started enabled=yes&quot;\nasnible test -m service -a &quot;name=foo pattern=/usr/bin/foo state=started&quot;\nansible test -m service -a &quot;name=network state=restarted args=eth0&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-8-cron模块\"> 2.8 cron模块</h3>\n<p>用于管理计划任务</p>\n<p>包含如下选项：</p>\n<ul>\n<li>backup：对远程主机上的原任务计划内容修改之前做备份</li>\n<li>cron_file：如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户的任务计划</li>\n<li>day：日（1-31，<em>，</em>/2,……）</li>\n<li>hour：小时（0-23，<em>，</em>/2，……）</li>\n<li>minute：分钟（0-59，<em>，</em>/2，……）</li>\n<li>month：月（1-12，<em>，</em>/2，……）</li>\n<li>weekday：周（0-7，*，……）</li>\n<li>job：要执行的任务，依赖于state=present</li>\n<li>name：该任务的描述</li>\n<li>special_time：指定什么时候执行，参数：reboot,yearly,annually,monthly,weekly,daily,hourly</li>\n<li>state：确认该任务计划是创建还是删除</li>\n<li>user：以哪个用户的身份执行</li>\n</ul>\n<p>示例：</p>\n<div><pre><code>ansible <span>test</span> -m <span>cron</span> -a <span>'name=\"a job for reboot\" special_time=reboot job=\"/some/job.sh\"'</span>\nansible <span>test</span> -m <span>cron</span> -a <span>'name=\"yum autoupdate\" weekday=\"2\" minute=0 hour=12 user=\"root\"'</span>\nansible <span>test</span> -m <span>cron</span>  -a <span>'backup=\"True\" name=\"test\" minute=\"0\" hour=\"5,2\" job=\"ls -alh > /dev/null\"'</span>\nansilbe <span>test</span> -m <span>cron</span> -a <span>'cron_file=ansible_yum-autoupdate state=absent'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-9-user模块与group模块\"> 2.9 user模块与group模块</h3>\n<p>user模块是请求的是useradd, userdel, usermod三个指令，goup模块请求的是groupadd, groupdel, groupmod 三个指令。</p>\n<h4 id=\"_2-9-1-user模块\"> 2.9.1 user模块</h4>\n<ul>\n<li>home：指定用户的家目录，需要与createhome配合使用</li>\n<li>groups：指定用户的属组</li>\n<li>uid：指定用的uid</li>\n<li>password：指定用户的密码</li>\n<li>name：指定用户名</li>\n<li>createhome：是否创建家目录 yes|no</li>\n<li>system：是否为系统用户</li>\n<li>remove：当state=absent时，remove=yes则表示连同家目录一起删除，等价于userdel -r</li>\n<li>state：是创建还是删除</li>\n<li>shell：指定用户的shell环境</li>\n</ul>\n<p>使用示例：</p>\n<div><pre><code>user: <span>name</span><span>=</span>johnd <span>comment</span><span>=</span><span>\"John Doe\"</span> <span>uid</span><span>=</span><span>1040</span> <span>group</span><span>=</span>admin\nuser: <span>name</span><span>=</span>james <span>shell</span><span>=</span>/bin/bash <span>groups</span><span>=</span>admins,developers <span>append</span><span>=</span>yes user: <span>name</span><span>=</span>johnd <span>state</span><span>=</span>absent <span>remove</span><span>=</span>yes\nuser: <span>name</span><span>=</span>james18 <span>shell</span><span>=</span>/bin/zsh <span>groups</span><span>=</span>developers <span>expires</span><span>=</span><span>1422403387</span>\n<span>#生成密钥时，只会生成公钥文件和私钥文件，和直接使用ssh-keygen指令效果相同，不会生成authorized_keys文件</span>\nuser: <span>name</span><span>=</span>test <span>generate_ssh_key</span><span>=</span>yes <span>ssh_key_bits</span><span>=</span><span>2048</span> <span>ssh_key_file</span><span>=</span>.ssh/id_rsa  \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>需要说明的是，在指定password参数时，不能使用明文密码，因为后面这一串密码会被直接传送到被管理主机的/etc/shadow文件中，所以需要先将密码字符串进行加密处理。然后将得到的字符串放到password中即可。</p>\n<div><pre><code>echo &quot;123456&quot; | openssl passwd -1 -salt $(&lt; /dev/urandom tr -dc &#39;[:alnum:]&#39; | head -c 32) -stdin\n$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0\n\n#使用上面的密码创建用户\nansible all -m user -a &#39;name=foo password=&quot;$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0&quot;&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>\n<p>不同的发行版默认使用的加密方式可能会有区别，具体可以查看/etc/login.defs文件确认，centos 6.5版本使用的是SHA512加密算法。</p>\n</blockquote>\n<h4 id=\"_2-9-2-group示例\"> 2.9.2 group示例</h4>\n<div><pre><code>group: name=somegroup state=present\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-10-synchronize模块\"> 2.10 synchronize模块</h3>\n<p>使用rsync同步文件，其参数如下：</p>\n<ul>\n<li>archive: 归档，相当于同时开启recursive(递归)、links、perms、times、owner、group、-D选项都为yes ，默认该项为开启</li>\n<li>checksum: 跳过检测sum值，默认关闭</li>\n<li>compress:是否开启压缩</li>\n<li>copy_links：复制链接文件，默认为no ，注意后面还有一个links参数</li>\n<li>delete: 删除不存在的文件，默认no</li>\n<li>dest：目录路径</li>\n<li>dest_port：默认目录主机上的端口 ，默认是22，走的ssh协议</li>\n<li>dirs：传输目录不进行递归，默认为no，即进行目录递归</li>\n<li>rsync_opts：rsync参数部分</li>\n<li>set_remote_user：主要用于/etc/ansible/hosts中定义或默认使用的用户与rsync使用的用户不同的情况</li>\n<li>mode: push或pull 模块，push模的话，一般用于从本机向远程主机上传文件，pull 模式用于从远程主机上取文件</li>\n</ul>\n<p>使用示例：</p>\n<div><pre><code>src=some/relative/path dest=/some/absolute/path rsync_path=&quot;sudo rsync&quot;\nsrc=some/relative/path dest=/some/absolute/path archive=no links=yes\nsrc=some/relative/path dest=/some/absolute/path checksum=yes times=no\nsrc=/tmp/helloworld dest=/var/www/helloword rsync_opts=--no-motd,--exclude=.git mode=pull\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-11-filesystem模块\"> 2.11 filesystem模块</h3>\n<p>在块设备上创建文件系统\n常用选项：</p>\n<ul>\n<li>dev：目标块设备</li>\n<li>force：在一个已有文件系统 的设备上强制创建</li>\n<li>fstype：文件系统的类型</li>\n<li>opts：传递给mkfs命令的选项</li>\n</ul>\n<p>示例：</p>\n<div><pre><code>ansible <span>test</span> -m filesystem -a <span>'fstype=ext2 dev=/dev/sdb1 force=yes'</span>\nansible <span>test</span> -m filesystem -a <span>'fstype=ext4 dev=/dev/sdb1 opts=\"-cc\"'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_2-12-mount模块\"> 2.12 mount模块</h3>\n<p>配置挂载点\n选项：</p>\n<ul>\n<li>dump</li>\n<li>fstype：必选项，挂载文件的类型</li>\n<li>name：必选项，挂载点</li>\n<li>opts：传递给mount命令的参数</li>\n<li>src：必选项，要挂载的文件</li>\n<li>state：必选项\n<ul>\n<li>present：只处理fstab中的配置</li>\n<li>absent：删除挂载点</li>\n<li>mounted：自动创建挂载点并挂载之</li>\n<li>umounted：卸载</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<div><pre><code>name=/mnt/dvd src=/dev/sr0 fstype=iso9660 opts=ro state=present\nname=/srv/disk src=&#39;LABEL=SOME_LABEL&#39; state=present\nname=/home src=&#39;UUID=b3e48f45-f933-4c8e-a700-22a159ec9077&#39; opts=noatime state=present\n\nansible test -a &#39;dd if=/dev/zero of=/disk.img bs=4k count=1024&#39;\nansible test -a &#39;losetup /dev/loop0 /disk.img&#39;\nansible test -m filesystem &#39;fstype=ext4 force=yes opts=-F dev=/dev/loop0&#39;\nansible test -m mount &#39;name=/mnt src=/dev/loop0 fstype=ext4 state=mounted opts=rw&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"_2-13-get-url-模块\"> 2.13 get_url 模块</h3>\n<p>该模块主要用于从http、ftp、https服务器上下载文件（类似于wget），主要有如下选项：</p>\n<ul>\n<li>sha256sum：下载完成后进行sha256 check；</li>\n<li>timeout：下载超时时间，默认10s</li>\n<li>url：下载的URL</li>\n<li>url_password、url_username：主要用于需要用户名密码进行验证的情况</li>\n<li>use_proxy：是事使用代理，代理需事先在环境变更中定义</li>\n</ul>\n<p>示例：</p>\n<div><pre><code>get_url: url=http://example.com/path/file.conf dest=/etc/foo.conf mode=0440\nget_url: url=http://example.com/path/file.conf dest=/etc/foo.conf sha256sum=b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_2-14-unarchive模块\"> 2.14 unarchive模块</h3>\n<p>用于解压文件，模块包含如下选项：</p>\n<ul>\n<li>copy：在解压文件之前，是否先将文件复制到远程主机，默认为yes。若为no，则要求目标主机上压缩包必须存在。</li>\n<li>creates：指定一个文件名，当该文件存在时，则解压指令不执行</li>\n<li>dest：远程主机上的一个路径，即文件解压的路径</li>\n<li>group：解压后的目录或文件的属组</li>\n<li>list_files：如果为yes，则会列出压缩包里的文件，默认为no，2.0版本新增的选项</li>\n<li>mode：解决后文件的权限</li>\n<li>src：如果copy为yes，则需要指定压缩文件的源路径</li>\n<li>owner：解压后文件或目录的属主</li>\n</ul>\n<p>示例如下：</p>\n<div><pre><code>- unarchive: src=foo.tgz dest=/var/lib/foo\n- unarchive: src=/tmp/foo.zip dest=/usr/local/bin copy=no\n- unarchive: src=https://example.com/example.zip dest=/usr/local/bin copy=no\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-15-debug\"> 2.15 debug</h3>\n<p>用于输出调试一些数据，模块包含如下选项：</p>\n<ul>\n<li>msg：可以输出字符串，可以输出变量的值，变量调用需加&quot;{{}}&quot;</li>\n<li>var：只能输出变量的值，变量调用无需加任何东西，只需数据变量名称</li>\n</ul>\n<p>示例如下：</p>\n<div><pre><code>$ ansible localhost -e <span>'str=world'</span> -m debug -a <span>'msg=\"hello {{str}}\"'</span>\nlocalhost <span>|</span> SUCCESS <span>=</span><span>></span> <span>{</span>\n    <span>\"msg\"</span><span>:</span> <span>\"hello world\"</span>\n<span>}</span>\n\n$ ansible localhost -e <span>'str=\"hello world\"'</span> -m debug -a <span>'var=str'</span>\nlocalhost <span>|</span> SUCCESS <span>=</span><span>></span> <span>{</span>\n    <span>\"str\"</span><span>:</span> <span>\"hello world\"</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>\n<p>参考链接：</p>\n<p>https://www.cnblogs.com/breezey/p/8810414.html</p>\n<p>https://www.cnblogs.com/breezey/p/8811187.html</p>\n<p>https://blog.51cto.com/cloumn/blog/1544</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "4.4 Playbook高级用法",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/advanced-playbook/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/advanced-playbook/",
      "content_html": "<h1 id=\"_4-4-playbook高级用法\"> 4.4 Playbook高级用法</h1>\n<h2 id=\"_1-本地执行\"> 1 本地执行</h2>\n<p>默认情况下，Ansible使用ssh去连接远程主机，但实际上它提供了多种插件来丰富连接方式：smart、ssh、paramiko、local、docker、winrm，默认为smart。</p>\n<p>smart表示智能选择ssh和paramiko(paramiko是Python的一个ssh协议模块)，当Ansible端安装的ssh支持ControlPersist(即持久连接)时自动使用ssh，否则使用paramiko。local和docker是非基于ssh连接的方式，winrm是连接Windows的插件。</p>\n<p>可以在命令行选项中使用-c或--connection选项来指定连接方式：</p>\n<p>如果希望在控制主机本地运行一个特定的任务，可以使用local_action语句。</p>\n<p>假设我们需要配置的远程主机刚刚启动，如果我们直接运行playbook，可能会因为sshd服务尚未开始监听而导致失败，我们可以在控制主机上使用如下示例来等待被控端sshd端口监听：</p>\n<div><pre><code>- name: wait for ssh server to be running\n  wait_for\n      port: 22 \n      host: &quot;{{ inventory_hostname }}&quot; \n      search_regex: OpenSSH\n  connection: local\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>此外，inventory中也可以通过连接的行为变量ansible_connection指定连接类型：</p>\n<div><pre><code>192.168.100.101 ansible_connection=&quot;smart&quot;\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_2-任务委托\"> 2 任务委托</h2>\n<p>在有些时候，我们希望运行与选定的主机或主机组相关联的task，但是这个task又不需要在选定的主机或主机组上执行，而需要在另一台服务器上执行。</p>\n<p>这种特性适用于以下场景：</p>\n<ul>\n<li>在告警系统中启用基于主机的告警</li>\n<li>向负载均衡器中添加或移除一台主机</li>\n<li>在dns上添加或修改针对某个主机的解析</li>\n<li>在存储节点上创建一个存储以用于主机挂载</li>\n<li>使用一个外部程序来检测主机上的服务是否正常</li>\n</ul>\n<p>可以使用delegate_to语句来在另一台主机上运行task：</p>\n<div><pre><code>- name: enable alerts for web servers\n  hosts: webservers\n  tasks:\n    - name: enable alerts\n      nagios: action=enable_alerts service=web host=&quot;{{ inventory_hostname }}&quot;\n      delegate_to: nagios.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><blockquote>\n<p>如果delegate_to: 127.0.0.1的时候，等价于connection: local</p>\n<p>显然connection: local和delegate_to: localhost在功能上是等价的。当然，connection可以定义在play级别或task级别上，而delegate_to只能定义在task级别上。</p>\n</blockquote>\n<h2 id=\"_3-任务暂停\"> 3 任务暂停</h2>\n<p>有些情况下，一些任务的运行需要等待一些状态的恢复，比如某一台主机或者应用刚刚重启，我们需要需要等待它上面的某个端口开启，此时就需要将正在运行的任务暂停，直到其状态满足要求。</p>\n<p>Ansible提供了wait_for模块以实现任务暂停的需求</p>\n<p>wait_for模块常用参数：</p>\n<ul>\n<li>connect_timeout：在下一个任务执行之前等待连接的超时时间</li>\n<li>delay：等待一个端口或者文件或者连接到指定的状态时，默认超时时间为300秒，在这等待的300s的时间里，wait_for模块会一直轮询指定的对象是否到达指定的状态，delay即为多长时间轮询一次状态。</li>\n<li>host：wait_for模块等待的主机的地址，默认为127.0.0.1</li>\n<li>port：wait_for模块待待的主机的端口</li>\n<li>path：文件路径，只有当这个文件存在时，下一任务才开始执行，即等待该文件创建完成</li>\n<li>state：等待的状态，即等待的文件或端口或者连接状态达到指定的状态时，下一个任务开始执行。当等的对象为端口时，状态有started，stoped，即端口已经监听或者端口已经关闭；当等待的对象为文件时，状态有present或者started，absent，即文件已创建或者删除；当等待的对象为一个连接时，状态有drained，即连接已建立。默认为started</li>\n<li>timeout：wait_for的等待的超时时间,默认为300秒</li>\n</ul>\n<p>示例：</p>\n<div><pre><code>#等待8080端口已正常监听，才开始下一个任务，直到超时\n- wait_for: \n    port: 8080 \n    state: started  \n    \n#等待8000端口正常监听，每隔10s检查一次，直至等待超时\n- wait_for: \n    port: 8000 \n    delay: 10 \n    \n#等待8000端口直至有连接建立\n- wait_for: \n    host: 0.0.0.0 \n    port: 8000 \n    delay: 10 \n    state: drained\n    \n#等待8000端口有连接建立，如果连接来自10.2.1.2或者10.2.1.3，则忽略。\n- wait_for: \n    host: 0.0.0.0 \n    port: 8000 \n    state: drained \n    exclude_hosts: 10.2.1.2,10.2.1.3 \n    \n#等待/tmp/foo文件已创建    \n- wait_for: \n    path: /tmp/foo \n\n#等待/tmp/foo文件已创建，而且该文件中需要包含completed字符串    \n- wait_for: \n    path: /tmp/foo \n    search_regex: completed \n\n#等待/var/lock/file.lock被删除    \n- wait_for: \n    path: /var/lock/file.lock \n    state: absent \n    \n#等待指定的进程被销毁\n- wait_for: \n    path: /proc/3466/status \n    state: absent \n    \n#等待openssh启动，10s检查一次\n- wait_for: \n    port: 22 \n    host: &quot;{{ ansible_ssh_host | default(inventory_hostname) }}&quot; search_regex: OpenSSH \n    delay: 10 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><h2 id=\"_4-滚动执行\"> 4 滚动执行</h2>\n<p>默认情况下，ansible会并行的在所有选定的主机或主机组上执行每一个task，但有的时候，我们会希望能够逐台运行。最典型的例子就是对负载均衡器后面的应用服务器进行更新时。通常来讲，我们会将应用服务器逐台从负载均衡器上摘除，更新，然后再添加回去。我们可以在play中使用serial语句来告诉ansible限制并行执行play的主机数量。</p>\n<p>下面是一个在amazon EC2的负载均衡器中移除主机，更新软件包，再添加回负载均衡的配置示例：</p>\n<div><pre><code>- name: upgrade pkgs on servers behind load balancer\n  hosts: myhosts\n  serial: 1\n  tasks:\n    - name: get the ec2 instance id and elastic load balancer id\n      ec2_facts:\n\n    - name: take the host out of the elastic load balancer id\n      local_action: ec2_elb\n      args:\n        instance_id: &quot;{{ ansible_ec2_instance_id }}&quot;\n        state: absent\n\n    - name: upgrade pkgs\n      apt: \n          update_cache: yes \n          upgrade: yes\n\n    - name: put the host back n the elastic load balancer\n      local_action: ec2_elb\n      args:\n        instance_id: &quot;{{ ansible_ec2_instance_id }}&quot;\n        state: present\n        ec2_elbs: &quot;{{ items }}&quot;\n      with_items: ec2_elbs\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>在上述示例中，serial的值为1，即表示在某一个时间段内，play只在一台主机上执行。如果为2，则同时有2台主机运行play。</p>\n<p>一般来讲，当task失败时，ansible会停止执行失败的那台主机上的任务，但是继续对其他 主机执行。在负载均衡的场景中，我们会更希望ansible在所有主机执行失败之前就让play停止，否则很可能会面临所有主机都从负载均衡器上摘除并且都执行失败导致服务不可用的场景。这个时候，我们可以使用serial语句配合max_fail_percentage语句使用。<code>max_fail_percentage</code>表示当最大失败主机的比例达到多少时，ansible就让整个play失败。示例如下：</p>\n<div><pre><code>- name: upgrade pkgs on fservers behind load balancer\n  hosts: myhosts\n  serial: 1\n  max_fail_percentage: 25\n  tasks:\n    ......\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>假如负载均衡后面有4台主机，并且有一台主机执行失败，这时ansible还会继续运行，要让Play停止运行，则必须超过25%，所以如果想一台失败就停止执行，我们可以将max_fail_percentage的值设为24。如果我们希望只要有执行失败，就放弃执行，我们可以将max_fail_percentage的值设为0。</p>\n<h2 id=\"_5-只执行一次\"> 5 只执行一次</h2>\n<p>某些时候，我们希望某个task只执行一次，即使它被绑定到了多个主机上。例如在一个负载均衡器后面有多台应用服务器，我们希望执行一个数据库迁移，只需要在一个应用服务器上执行操作即可。</p>\n<p>可以使用run_once语句来处理：</p>\n<div><pre><code>- name: run the database migrateions\n  command: /opt/run_migrateions\n  run_once: true\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>还可以与local_action配合使用，如下：</p>\n<div><pre><code>- name: run the task locally, only once\n  command: /opt/my-custom-command\n  connection: local\n  run_once: true\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>还可以与delegate_to配合使用，让这个只执行一次的任务在指定的机器上运行：</p>\n<div><pre><code>- name: run the task locally, only once\n  command: /opt/my-custom-command\n  run_once: true\n  delegate_to: app.a1-61-105.dev.unp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_6-设置环境变量\"> 6 设置环境变量</h2>\n<p>我们在命令行下执行某些命令的时候，这些命令可能会需要依赖环境变量。比如在安装某些包的时候，可能需要通过代理才能完成完装。或者某个脚本可能需要调用某个环境变量才能完成运行。</p>\n<p>ansible 支持通过<code>environment</code>关键字来定义一些环境变量。</p>\n<p>在如下场景中可能需要用到环境变量：</p>\n<ul>\n<li>运行shell的时候，需要设置path变量</li>\n<li>需要加载一些库，这些库不在系统的标准库路径当中</li>\n</ul>\n<p>下面是一个简单示例：</p>\n<div><pre><code>---\n- name: upload a remote file to aws s3\n  hosts: test\n  tasks:\n    - name: install pip\n      yum:\n        name: python-pip\n        state: installed\n    \n    - name: install the aws tools\n      pip:\n        name: awscli\n        state: present\n    \n    - name upload file to s3\n      shell aws s3 put-object --bucket=my-test-bucket --key={{ ansible_hostname }}/fstab --body=/etc/fstab --region=eu-west-1\n      environment:\n        AWS_ACCESS_KEY_ID: xxxxxx\n        AWS_SECRET_ACCESS_KEY: xxxxxx\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>事实上，environment也可以存储在变量当中：</p>\n<div><pre><code>- hosts: all\n  remote_user: root\n  vars:\n    proxy_env:\n      http_proxy: http://proxy.example.com:8080\n      https_proxy: http://proxy.bos.example.com:8080\n  tasks:\n    - apt: name=cobbler state=installed\n      environment: proxy_env\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"_7-交互式提示\"> 7 交互式提示</h2>\n<p>在少数情况下，ansible任务运行的过程中需要用户输入一些数据，这些数据要么比较秘密不方便，或者数据是动态的，不同的用户有不同的需求，比如输入用户自己的账户和密码或者输入不同的版本号会触发不同的后续操作等。ansible的vars_prompt关键字就是用来处理上述这种与用户交互的情况的。</p>\n<div><pre><code> - hosts: all\n   remote_user: root\n   vars_prompt:\n      - name: share_user\n        prompt: &quot;what is your network username?&quot;\n        private: yes\n \n      - name: share_pass\n        prompt: &quot;what is your network password&quot;\n        private: yes\n        \n    tasks:\n      - debug:\n          var: share_user\n      - debug:\n          var: share_pass\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>vars_prompt常用选项说明：</p>\n<ul>\n<li>private: 默认为yes，表示用户输入的值在命令行不可见</li>\n<li>default：定义默认值，当用户未输入时则使用默认值</li>\n<li>confirm：如果设置为yes，则会要求用户输入两次，适合输入密码的情况</li>\n</ul>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "5.1 自定义变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/custom/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/custom/",
      "content_html": "<h1 id=\"_5-1-自定义变量\"> 5.1 自定义变量</h1>\n<p><strong>简单说明</strong></p>\n<p>ansible支持变量，用于存储会在整个项目中重复使用到的一些值。以简化项目的创建与维护，降低出错的机率。</p>\n<p>变量的定义：</p>\n<ul>\n<li>变量名应该由字母、数字下划数组成</li>\n<li>变量名必须以字母开头</li>\n<li>ansible内置关键字不能作为变量名</li>\n</ul>\n<h1 id=\"_1-在inventory中定义变量\"> 1. 在Inventory中定义变量</h1>\n<h2 id=\"_1-1-定义主机变量\"> 1.1. 定义主机变量</h2>\n<h3 id=\"_1-1-1-内置主机变量\"> 1.1.1. 内置主机变量</h3>\n<p>所谓内置变量其实就是ansible.cfg配置文件中的选项，在其前加上<code>ansible_</code>即成为内置变量。当然内置变拥有比ansible.cfg中选项更高的优先级，而且针对不同的主机，可以定义不同的值。</p>\n<p>官方链接：https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210309153531453.png\" alt=\"image-20210309153531453\"></p>\n<p>下面是一个简单的示例：</p>\n<div><pre><code><span># 指定了三台主机，三台主机的用密码分别是P@ssw0rd、123456、45789，指定的ssh连接的用户名分别为root、breeze、bernie，ssh 端口分别为22、22、3055 ，这样在ansible命令执行的时候就不用再指令用户和密码等了</span>\n\n<span>[</span>test<span>]</span>\n<span>192.168</span>.1.1 <span>ansible_user</span><span>=</span>root <span>ansible_password</span><span>=</span><span>'P@ssw0rd'</span>\n<span>192.168</span>.1.2 <span>ansible_user</span><span>=</span>breeze <span>ansible_password</span><span>=</span><span>'123456'</span>\n<span>192.168</span>.1.3 <span>ansible_user</span><span>=</span>bernie <span>ansible_port</span><span>=</span><span>3055</span> <span>ansible_password</span><span>=</span><span>'456789'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"_1-2-定义主机组变量\"> 1.2. 定义主机组变量</h2>\n<p>变量也可以通过组名，应用到组内的所有成员：</p>\n<div><pre><code><span># test组中包含两台主机，通过对test组指定vars变更，相应的host1和host2相当于相应的指定了ntp_server和proxy变量参数值</span>\n\n<span>[</span>test<span>]</span>\nhost1\nhost2\n<span>[</span>test:vars<span>]</span>\n<span>ntp_server</span><span>=</span><span>192.168</span>.1.10\n<span>proxy</span><span>=</span><span>192.168</span>.1.20\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>主机组变量示例：</p>\n<div><pre><code># 下面是一个示例，指定了一个武汉组有web1、web2；随州组有web3、web4主机；又指定了一个湖北组，同时包含武汉和随州；同时为该组内的所有主机指定了2个vars变量。设定了一个组中国组，包含湖北、湖南。\n\n[wuhan]\nweb1\nweb2\n\n[suizhou]\nweb4\nweb3\n\n[hubei:children]\nwuhan\nsuizhou\n\n[hubei:vars]\nntp_server=192.168.1.10\nzabbix_server=192.168.1.10\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h1 id=\"_2-在playbook中定义变量\"> 2. 在Playbook中定义变量</h1>\n<h2 id=\"_2-1-变量的定义方式\"> 2.1. 变量的定义方式</h2>\n<h3 id=\"_2-1-1-通过vars关键字定义\"> 2.1.1. 通过vars关键字定义</h3>\n<p>下面是一个简单示例：</p>\n<div><pre><code><span>-</span> name： use vars define invrionmemnt\n  <span>hosts</span><span>:</span> test\n  <span>user</span><span>:</span> ansible\n  <span>vars</span><span>:</span> \n    <span>http_port</span><span>:</span> <span>80</span>\n    <span>server_name</span><span>:</span> localhost\n    <span>conf_file</span><span>:</span> /etc/nginx/conf/default.conf\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_2-1-2-通过vars-files关键字引入变量文件\"> 2.1.2. 通过vars_files关键字引入变量文件</h3>\n<p>下面是一个简单示例：</p>\n<div><pre><code><span>-</span> <span>hosts</span><span>:</span> all\n  <span>remote_user</span><span>:</span> root\n  <span>vars</span><span>:</span>\n    <span>favcolor</span><span>:</span> blue\n  <span>vars_files</span><span>:</span>\n    <span>-</span> vars/external_vars.yml\n    <span>-</span> vars/user_vars.yml\n\n<span># vars/user_vars.yml示例：</span>\n\n<span>users</span><span>:</span>\n  <span>bjones</span><span>:</span>\n    <span>first_name</span><span>:</span> Bob\n    <span>last_name</span><span>:</span> Jones\n    <span>home_dirs</span><span>:</span> /users/bjones\n  <span>acook</span><span>:</span>\n    <span>first_name</span><span>:</span> Anne\n    <span>last_name</span><span>:</span> Cook\n    <span>home_dirs</span><span>:</span> /users/acook\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><blockquote>\n<p>变量的定义格式是成键值对出现的，键值对之间可以嵌套，最终形成一个大字典</p>\n</blockquote>\n<p>和vars一样，只不过它是将变量以字典格式定义在独立的文件中，且<code>vars_files</code>不能定义在task层次，只能定义在play层次。</p>\n<div><pre><code>---\n    - hosts: localhost\n      vars_files: \n        - /tmp/var_file1.yml\n        - var_file2.yml\n      tasks: \n         - debug: msg=&quot;{{var1}} {{var2}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>上面var_file2.yml使用的是相对路径，基于playbook所在的路径。例如该playbook为/tmp/x.yml，则var_file2.yml也应该在/tmp下。当然，完全可以使用绝对路径。</p>\n<h3 id=\"_2-1-3-在playbook中通过host-vars和group-vars目录定义变量\"> 2.1.3. 在playbook中通过host_vars和group_vars目录定义变量</h3>\n<p>下面这是一个项目的playbook目录结构。这个项目中，包含一个ansible.cfg文件，一个inventory文件，一个playbook.yml文件，一个<code>group_vars</code>目录和一个<code>host_vars</code>目录:</p>\n<div><pre><code># tree /etc/ansible/playbooks/project\n/etc/ansible/playbooks/project\n├── ansible.cfg\n├── group_vars\n│   ├── datacenter1\n│   ├── datacenter2\n│   └── datacenters\n├── host_vars\n│   ├── demo1.example.com\n│   ├── demo2.example.com\n│   ├── demo3.example.com\n│   └── demo4.example.com\n├── inventory\n└── playbook.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>其中inventory文件的示例如下：</p>\n<div><pre><code>[datacenter1]\ndemo1.example.com\ndemo2.example.com\n\n[datacenter2]\ndemo3.example.com\ndemo4.example.com\n\n[datacenters:children]\ndatacenter1\ndatacenter2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>可以看到group_vars目录中，定义了三个文件，分别以inventory文件中的三个主机组命名，所以这三个文件中定义的就分别是这三个组可以使用的变量。</p>\n<div><pre><code># cat datacenter1\npackage: httpd\n\n# cat datacenter2 \npackage: apache\n\n# cat datacenters \npackage: httpd\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>在host_vars目录中，定义了三个文件，分别以inventory文件中的四个主机命名，所以这四个文件中定义的就分别是这四个主机可以使用的变量。</p>\n<div><pre><code># cat demo1.example.com \npackage: httpd\n\n# cat demo2.example.com \npackage: apache\n\n# cat demo3.example.com \npackage: mariadb-server\n\n# cat demo4.example.com \npackage: mysql-server\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><blockquote>\n<p>需要说明的是，如果主机组定义的变量与主机冲突，主机变量优先级最高</p>\n</blockquote>\n<h3 id=\"_2-1-4-注册变量\"> 2.1.4. 注册变量</h3>\n<p>在有些时候，可能需要将某一条任务执行的结果保存下来，以便在接下的任务中调用或者做些判断。可以通过register关键字来实现将某一任务结果保存为一个变量。</p>\n<p>下面是个简单的例子，将whoami命令执行的结果注册到变量login：</p>\n<div><pre><code>- name: register variables\n  hosts: test\n  tasks:\n    - name: capture output of whoami command\n      command: whoami\n      register: login\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>注册变量的应用场景：</p>\n<ul>\n<li>在一台远端的服务器获取一个目录下的一列表的文件,然后下载这些文件</li>\n<li>在handler执行之前,发现前面一个task发生了changed,然后执行一个指定的task</li>\n<li>获取远端服务器的ssh key的内容,构建出known_hosts文件</li>\n</ul>\n<h3 id=\"_2-1-5-通过命令行设置变量\"> 2.1.5. 通过命令行设置变量</h3>\n<p>示例如下：</p>\n<div><pre><code>---\n- hosts: &#39;{{ hosts }}&#39;\n  remote_user: &#39;{{ user }}&#39;\n  tasks:\n     - ...\n     \nansible-playbook release.yml --extra-vars &quot;hosts=vipers user=starbuck&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>也可以写成类似如下方式：</p>\n<div><pre><code>--extra-vars &#39;{&quot;hosts&quot;:&quot;vipers&quot;,&quot;user&quot;:&quot;starbuck&quot;}&#39;\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_2-2-使用与调试变量\"> 2.2 使用与调试变量</h2>\n<p>我们通过以上5种方式在playbook中定义了各种变量。说到底，最终的目的，还是为了方便使用。下面我们就看一看具体如何使用这些变量。</p>\n<h3 id=\"_2-2-1-变量的引用\"> 2.2.1. 变量的引用</h3>\n<p>下面是一个变量的基本使用示例，前面的变量定义部分，直接使用的2.1.1中的变量示例：</p>\n<div><pre><code><span>-</span> <span>name</span><span>:</span> use vars define variables\n  <span>hosts</span><span>:</span> test\n  <span>vars</span><span>:</span> \n    <span>http_port</span><span>:</span> <span>80</span>\n    <span>server_name</span><span>:</span> localhost\n    <span>conf_file</span><span>:</span> /etc/nginx/conf/default.conf\n    \n  <span>tasks</span><span>:</span>\n    <span>-</span> <span>name</span><span>:</span> print variables\n      <span>shell</span><span>:</span> echo \"<span>{</span><span>{</span> http_port <span>}</span><span>}</span> <span>{</span><span>{</span> server_name <span>}</span><span>}</span> <span>{</span><span>{</span> conf_file <span>}</span><span>}</span>\"  <span>></span> /tmp/text.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在2.1.2中，我们通过<code>vars_files</code>引用了一个文件<code>user_vars.yml</code>，在该文件中定义了一个稍微复杂的字典变量，现在我想要获取<code>users</code>中<code>bjones</code>用户的<code>first_name</code>和<code>acook</code>用户的<code>home_dirs</code>，可以使用如下方法：</p>\n<div><pre><code>{{ users.bjones.first_name }}\n{{ users.acook.home_dirs }}\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>或者如下写法：</p>\n<div><pre><code>{{ users[&#39;bjones&#39;][&#39;first_name&#39;] }}\n{{ users[&#39;acook&#39;][&#39;home_dirs&#39;] }}\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_2-2-2-变量的调试输出\"> 2.2.2. 变量的调试输出</h3>\n<p>有些时候，我们在引用变量的时候，可能需要知道变量中包含哪些信息，以方便在执行过程中，对变量做些处理。ansible提供一个debug模块用于调试变量输出：</p>\n<div><pre><code>- name: register variables\n  hosts: test\n  tasks:\n    - name: capture output of whoami command\n      command: whoami\n      register: login\n    - debug: var=login\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>执行后输出如下：</p>\n<div><pre><code># ansible-playbook register.yml \n\nPLAY [register variables] ***************************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [capture output of whoami command] *************************************************************************************************************************************\nchanged: [10.1.61.187]\n\nTASK [debug] ****************************************************************************************************************************************************************\nok: [10.1.61.187] =&gt; {\n    &quot;login&quot;: {\n        &quot;changed&quot;: true,\n        &quot;cmd&quot;: [\n            &quot;whoami&quot;\n        ],\n        &quot;delta&quot;: &quot;0:00:00.004279&quot;,\n        &quot;end&quot;: &quot;2019-05-24 00:41:43.710398&quot;,\n        &quot;failed&quot;: false,\n        &quot;rc&quot;: 0,\n        &quot;start&quot;: &quot;2019-05-24 00:41:43.706119&quot;,\n        &quot;stderr&quot;: &quot;&quot;,\n        &quot;stderr_lines&quot;: [],\n        &quot;stdout&quot;: &quot;root&quot;,\n        &quot;stdout_lines&quot;: [\n            &quot;root&quot;\n        ]\n    }\n}\n\nPLAY RECAP ******************************************************************************************************************************************************************\n10.1.61.187                : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>关于输出的debug部分重点说明如下：</p>\n<ul>\n<li>login： 变量名，其值为一个字典</li>\n<li>changed：ansible基于此来判断是否发生了状态改变</li>\n<li>cmd：被调用的命令</li>\n<li>failed：是否运行失败</li>\n<li>rc：返回值，0代表正常，非0代表异常</li>\n<li>stderr：如果出现异常，会在这里显示错误输出</li>\n<li>stderr_lines：按行分割的错误输出</li>\n<li>stdout：如果指令正常运行，则在这里输出返回结果</li>\n<li>stdout：按行分割的返回结果</li>\n</ul>\n<blockquote>\n<p>需要说明的是，通过register注册的变量的结果并不是一成不变的，在不确定返回值的情况下，尽量调试看看输出结果。</p>\n</blockquote>\n<p>关于debug的更多用法说明：</p>\n<p>调试模块，用于在调试中输出信息\n常用参数：</p>\n<ul>\n<li>msg：调试输出的消息</li>\n<li>var：将某个变量传递给debug模块，debug会直接将其打印输出</li>\n<li>verbosity：debug的级别</li>\n</ul>\n<p>示例：</p>\n<div><pre><code><span># Example that prints the loopback address and gateway for each host</span>\n<span>-</span> <span>debug</span><span>:</span> msg=\"System <span>{</span><span>{</span> inventory_hostname <span>}</span><span>}</span> has uuid <span>{</span><span>{</span> ansible_product_uuid <span>}</span><span>}</span>\"\n\n<span>-</span> <span>debug</span><span>:</span> msg=\"System <span>{</span><span>{</span> inventory_hostname <span>}</span><span>}</span> has gateway <span>{</span><span>{</span> ansible_default_ipv4.gateway <span>}</span><span>}</span>\"\n  <span>when</span><span>:</span> ansible_default_ipv4.gateway is defined\n\n<span>-</span> <span>shell</span><span>:</span> /usr/bin/uptime\n  <span>register</span><span>:</span> result\n\n<span>-</span> <span>debug</span><span>:</span> var=result verbosity=2    <span>#直接将上一条指令的结果作为变量传递给var，由debug打印出result的值</span>\n\n<span>-</span> <span>name</span><span>:</span> Display all variables/facts known for a host\n  <span>debug</span><span>:</span> var=hostvars<span>[</span>inventory_hostname<span>]</span> verbosity=4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><blockquote>\n<p>注意格式，=号左右没有空格</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210309153531453.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "4.1 Playbook的结构及handler用法",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/dir-handler/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/dir-handler/",
      "content_html": "<h1 id=\"_4-1-playbook的结构及handler用法\"> 4.1 Playbook的结构及handler用法</h1>\n<h2 id=\"_1-playbook的结构说明\"> 1 playbook的结构说明</h2>\n<p>playbook是由一个或多个&quot;play&quot;组成的列表。play的主要功能就是对一组主机应用play中定义好的task。从根本上来讲一个task就是对ansible一个module的调用。而将多个play按照一定的顺序组织到一个playbook中，我们称之为编排。</p>\n<p>playbook主要有以下四部分构成:</p>\n<ul>\n<li>Target section： 用于定义将要执行playbook的远程主机组及远程主机组上的用户，还包括定义通过什么样的方式连接远程主机（默认ssh）</li>\n<li>Variable section： 定义playbook运行时需要使用的变量</li>\n<li>Task section： 定义将要在远程主机上执行的任务列表</li>\n<li>Handler section： 定义task执行完成以后需要调用的任务</li>\n</ul>\n<h2 id=\"_2-target-section\"> 2 Target section</h2>\n<p>playbook中的每一个play的目的都是为了让某个或某些主机以某个指定的用户身份执行任务。</p>\n<h3 id=\"_2-1-playbook中的远程用户\"> 2.1 Playbook中的远程用户</h3>\n<p>playbook中的远程用户和ad-hoc中的使用没有区别，默认不定义，则直接使用ansible.cfg配置中的用户相关的配置。也可在playbook中定义如下：</p>\n<div><pre><code>- name: /etc/hosts is up to date\n  hosts: datacenter\n  remote_user: automation\n  become: yes\n  become_mothod: sudo\n  become_user: root\n  \n  tasks:\n    - name: server.example.com in /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: &#39;192.168.0.200 server.exmaple.com server&#39;\n        state: present\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id=\"_2-2-playbook中的hosts\"> 2.2 Playbook中的hosts</h3>\n<p>playbook中的hosts即inentory中的定义主机与主机组，在《Ansible Inventory》中我们讲到了如何选择主机与主机组，在这里也完全适用。</p>\n<div><pre><code>- name: start mariadb\n  hosts: db,&amp;london\n  tasks:\n    - name: start mariadb\n      service:\n        name: mariadb\n        state: started\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"_3-variable-section\"> 3 Variable section</h2>\n<p>vars设置变量vars指令可用于设置变量，可以设置一个或多个变量。下面的设置方式都是合理的</p>\n<div><pre><code># 设置单个变量\nvars:\n  var1: value1\n\nvars:\n  - var1: value1\n\n# 设置多个变量：\nvars:\n  var1: value1\n  var2: value2\n\nvars:\n  - var1: value1\n  - var2: value2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>vars可以设置在play级别，也可以设置在task级别：</p>\n<p>(1).设置在play级别，该play范围内的task能访问这些变量，其它play范围内则无法访问；</p>\n<p>(2).设置在task级别，只有该task能访问这些变量，其它task和其它play则无法访问。</p>\n<h2 id=\"_4-task-section\"> 4 Task section</h2>\n<p>play的主体部分是任务列表。</p>\n<p>任务列表中的各任务按次序逐个在hosts中指定的所有主机上执行，在所有主机上完成第一个任务后再开始第二个。在自上而下运行某playbook时，如果中途发生错误，则整个playbook会停止执行，由于playbook的幂等性，playbook可以被反复执行，所以即使发生了错误，在修复错误后，再执行一次即可。</p>\n<p>定义task可以使用<code>action: module options</code>或<code>module: options</code>的格式，推荐使用后者以实现向后兼容。</p>\n<div><pre><code><span>tasks</span><span>:</span>\n  <span>-</span> <span>name</span><span>:</span> make sure apache is running\n    <span>service</span><span>:</span> \n      <span>name</span><span>:</span> httpd\n      <span>state</span><span>:</span> started\n      \n  <span>-</span> <span>name</span><span>:</span> disable selinux\n    <span>command</span><span>:</span> /sbin/setenforce 0  \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>如果命令或脚本的退出码不为零可以使用如下方式替代：</p>\n<div><pre><code><span>tasks</span><span>:</span>\n  <span>-</span> <span>name</span><span>:</span> run this command and ignore the result\n    <span>shell</span><span>:</span> /usr/bin/somecommand <span>|</span><span>|</span> /bin/true\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>可以使用ignore_errors来忽略错误信息：</p>\n<div><pre><code><span>tasks</span><span>:</span>\n  <span>-</span> <span>name</span><span>:</span> run this command and ignore the result\n    <span>shell</span><span>:</span> /usr/bin/somecommand\n    <span>ignore_errors</span><span>:</span> <span>True</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_5-handler-section\"> 5 Handler section</h2>\n<ul>\n<li>在Ansible Playbook中，handler事实上也是个task，只不过这个task默认并不执行，只有在被触发时才执行。</li>\n<li>handler通过notify来监视某个或者某几个task，一旦task执行结果发生变化，则触发handler，执行相应操作。</li>\n<li>handler会在所有的play都执行完毕之后才会执行，这样可以避免当handler监视的多个task执行结果都发生了变化之后而导致handler的重复执行（handler只需要在最后执行一次即可）。</li>\n</ul>\n<div><pre><code><span>tasks</span><span>:</span>\n  <span>-</span> <span>name</span><span>:</span> template configuration file\n    <span>template</span><span>:</span> \n      <span>src</span><span>:</span> template.j2 \n      <span>dest</span><span>:</span> /etc/foo.conf\n    <span>notify</span><span>:</span>\n      <span>-</span> restart memcached\n      <span>-</span> restart apache\n  <span>-</span> <span>name</span><span>:</span> start memcached\n    <span>service</span><span>:</span>\n      <span>name</span><span>:</span> memcached\n      <span>state</span><span>:</span> started\n  <span>-</span> <span>name</span><span>:</span> start apache\n    service\n      <span>name</span><span>:</span> httpd\n      <span>state</span><span>:</span> started\n<span>handlers</span><span>:</span>\n  <span>-</span> <span>name</span><span>:</span> restart memcached\n    <span>service</span><span>:</span>\n      <span>name</span><span>:</span> memcached\n      <span>state</span><span>:</span> restarted\n  <span>-</span> <span>name</span><span>:</span> restart apache\n    <span>service</span><span>:</span>\n      <span>name</span><span>:</span> httpd\n      <span>state</span><span>:</span> restarted\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><blockquote>\n<p>在notify中定义内容一定要和tasks中定义的 - name 内容一样，这样才能达到触发的效果，否则会不生效。</p>\n</blockquote>\n<p>默认情况下，在一个play中，只要有task执行失败，则play终止，即使是与handler关联的task在失败的task之前运行成功了，handler也不会被执行。如果希望在这种情况下handler仍然能够执行，则需要使用如下配置：</p>\n<div><pre><code>- hosts: all\n  force_handlers: yes\n  tasks:\n    - name: a task which always notifies its handler\n      command: /bin/true\n      notify: restart the database\n    - name: a task which fails because the package doesn&#39;t exist\n      yum:\n        name: notapkg\n        state: latest\n      \n  handlers:\n    - name: restart the database\n      service:\n        name: mariadb\n        state: restarted\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><blockquote>\n<p>如果与handler关联的task还未执行，在其前的task已经失败，整个play终止，则handler未被触发，也不会执行。</p>\n</blockquote>\n<blockquote>\n<p>参考链接：</p>\n<p>https://www.cnblogs.com/breezey/p/8811473.html</p>\n<p>https://blog.51cto.com/cloumn/blog/1544</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "5.2 Fact变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/fact/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/fact/",
      "content_html": "<h1 id=\"_5-2-fact变量\"> 5.2 Fact变量</h1>\n<h2 id=\"_1-fact简介\"> 1 fact简介</h2>\n<p>为了让Ansible更了解目标节点，可以让它去收集目标节点的信息，比如获取对方的主机名、系统版本、IP地址或其它网卡信息、分区挂载信息等等。在Ansible中，收集到的这些节点信息称为Facts。</p>\n<p>有了这些信息，用户可以更好的控制管理节点，比如当IP地址为xxx时就怎样怎样，当系统是CentOS 6时怎样怎样，是CentOS 7时怎样怎样，等等。</p>\n<p>有这些信息当然好，但是收集这些信息是有代价的，而且代价很大：因为要收集的信息量很大，所以收集的过程非常慢。所以，如果在playbook中用不上这些信息时，应当禁用收集行为，这也是一个非常有效的效率优化手段。</p>\n<p>ansible两个模块叫setup、gather_facts，用于获取远程主机的相关信息，并可以将这些信息作为变量在playbook里进行调用。而setup模块获取这些信息的方法就是依赖于fact。</p>\n<div><pre><code>$ ansible localhost -m setup\n$ ansible localhost -m gather_facts\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>简单说明一下setup模块和gather_facts模块的区别。setup模块是早就存在的模块，而gather_facts模块是Ansible 2.8才提供的，它是一个二次封装的模块，内部很可能就是调用setup模块，但为何还要提供gather_facts模块呢？也许原因就在于gather_facts模块相比setup模块多的一个功能：并行收集多个节点的信息，而且在探测到要收集多个节点信息时会自动并行。</p>\n<p>既然setup和gather_facts是模块，那么它们也可以在playbook中当作任务来执行。但是playbook专门为此提供了一个play级别的指令：gather_facts。</p>\n<div><pre><code># ansible test -m setup\n10.1.61.187 | SUCCESS =&gt; {\n    &quot;ansible_facts&quot;: {\n        &quot;ansible_all_ipv4_addresses&quot;: [\n            &quot;10.1.61.187&quot;\n        ],\n        &quot;ansible_all_ipv6_addresses&quot;: [\n            &quot;fe80::f816:3eff:fe4f:6611&quot;\n        ],\n        &quot;ansible_apparmor&quot;: {\n            &quot;status&quot;: &quot;disabled&quot;\n        },\n        &quot;ansible_architecture&quot;: &quot;x86_64&quot;,\n        &quot;ansible_bios_date&quot;: &quot;04/01/2014&quot;,\n        &quot;ansible_bios_version&quot;: &quot;Ubuntu-1.8.2-1ubuntu1~cloud0&quot;,\n        \n        ...output omitted...\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>setup获取的这些信息，都是可用于该主机的变量。</p>\n<h2 id=\"_2-自定义fact-local-facts\"> 2 自定义fact(Local Facts)</h2>\n<h3 id=\"_2-1-手动设置fact\"> 2.1 手动设置fact</h3>\n<p>ansible除了能获取到预定义的fact的内容,还支持手动为某个主机定制fact。称之为本地fact。本地fact默认存放于被控端的<code>/etc/ansible/facts.d</code>目录下，如果文件为<code>ini</code>格式或者<code>json</code>格式，ansible会自动识别。以这种形式加载的fact是key为<code>ansible_local</code>的特殊变量。</p>\n<p>下面是一个简单的示例，在ansibler主控端定义一个<code>ini</code>格式的custom.fact文件内容如下：</p>\n<div><pre><code>[general]\npackage = httpd\nservice = httpd\nstate = started\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后我们编写一个playbook文件名为setup_facts.yml内容如下：</p>\n<div><pre><code>---\n- name: Install remote facts\n  hosts: test\n  vars: \n    remote_dir: /etc/ansible/facts.d\n    facts_file: custom.fact\n  tasks:\n    - name: Create the remote directory\n      file:\n        state: directory\n        recurse: yes\n        path: &quot;{{ remote_dir }}&quot;\n    - name: Install the new facts\n      copy:\n        src: &quot;{{ facts_file }}&quot;\n        dest: &quot;{{ remote_dir }}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>执行该playbook，完成facts的推送：</p>\n<div><pre><code>ansible-playbook setup_facts.yml\n</code></pre>\n<div><span>1</span><br></div></div><p>此时，我们可以在被控端看到新的facts已经生成：</p>\n<div><pre><code># ansible test -m setup        \n10.1.61.187 | SUCCESS =&gt; {\n    &quot;ansible_facts&quot;: {\n    \n        ...output omitted...\n        \n        &quot;ansible_local&quot;: {\n            &quot;custom&quot;: {\n                &quot;general&quot;: {\n                    &quot;package&quot;: &quot;httpd&quot;,\n                    &quot;service&quot;: &quot;httpd&quot;,\n                    &quot;state&quot;: &quot;started&quot;\n                }\n            }\n        },\n\n        ...output omitted...\n  \n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>我们可以写一个简单的playbook来使用这些facts：</p>\n<div><pre><code>- name: Install Apache and starts the service\n  hosts: test\n  tasks:\n    - name: Install the required package\n      yum: \n        name: &quot;{{ ansible_facts.ansible_local.custom.general.package }}&quot;\n        state: latest\n    - name: Start the service\n      service: \n        name: &quot;{{ ansible_facts.ansible_local.custom.general.service }}&quot;\n        state: &quot;{{ ansible_facts.ansible_local.custom.general.state }}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"_2-2-使用set-fact模块定义新的变量\"> 2.2 使用set_fact模块定义新的变量</h3>\n<p><code>set_fact</code>模块可以自定义facts，这些自定义的facts可以通过template或者变量的方式在playbook中使用。如果你想要获取一个进程使用的内存的百分比，则必须通过set_fact来进行计算之后得出其值，并将其值在playbook中引用。</p>\n<p>下面是一个set_fact模块的应用示例：</p>\n<div><pre><code>- name: set_fact example\n  hosts: test\n  tasks:\n    - name: Calculate InnoDB buffer pool size\n      set_fact: innodb_buffer_pool_size_mb=&quot;{{ ansible_memtotal_mb / 2 |int }}&quot;\n      \n    - debug: var=innodb_buffer_pool_size_mb\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>执行playbook如下：</p>\n<div><pre><code># ansible-playbook set_fact_ex.yaml \n\nPLAY [set_fact example] *****************************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [Calculate InnoDB buffer pool size] ************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [debug] ****************************************************************************************************************************************************************\nok: [10.1.61.187] =&gt; {\n    &quot;innodb_buffer_pool_size_mb&quot;: &quot;3911.0&quot;\n}\n\nPLAY RECAP ******************************************************************************************************************************************************************\n10.1.61.187                : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><blockquote>\n<p>这种设置方式只在当前playbook当中有效</p>\n</blockquote>\n<h2 id=\"_3-手动采集fact\"> 3 手动采集fact</h2>\n<p>收集到目标节点信息之后，各信息都保存在一个名为ansible_facts的变量中，所以可以直接debug去查看这个变量里保存了什么东西，也即收集了目标节点的哪些信息。</p>\n<div><pre><code>- name: info in ansible_facts\n  debug:\n    var: ansible_facts\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>此外也可以直接使用下面的方式来查看Facts中收集了哪些信息：</p>\n<div><pre><code>$ ansible localhost -m &#39;setup&#39;\n</code></pre>\n<div><span>1</span><br></div></div><p>下面是收集到的部分Facts信息：</p>\n<div><pre><code>localhost | SUCCESS =&gt; {\n    &quot;ansible_facts&quot;: {\n        &quot;ansible_all_ipv4_addresses&quot;: [\n            &quot;192.168.135.234&quot;\n        ],\n        &quot;ansible_all_ipv6_addresses&quot;: [\n            &quot;fe80::c38:ea5:1598:8169&quot;\n        ],\n        &quot;ansible_apparmor&quot;: {\n            &quot;status&quot;: &quot;disabled&quot;\n        },\n        &quot;ansible_architecture&quot;: &quot;x86_64&quot;,\n        &quot;ansible_bios_date&quot;: &quot;04/01/2014&quot;,\n        &quot;ansible_bios_version&quot;: &quot;1.11.0-2.el7&quot;,\n        &quot;ansible_cmdline&quot;: {\n            &quot;BOOT_IMAGE&quot;: &quot;/vmlinuz-3.10.0-957.el7.x86_64&quot;,\n            &quot;biosdevname&quot;: &quot;0&quot;,\n            &quot;crashkernel&quot;: &quot;auto&quot;,\n            &quot;net.ifnames&quot;: &quot;0&quot;,\n            &quot;quiet&quot;: true,\n            &quot;rhgb&quot;: true,\n            &quot;ro&quot;: true,\n            &quot;root&quot;: &quot;UUID=120cca73-ddab-4aac-b751-7421263b55ad&quot;\n        },\n        &quot;ansible_date_time&quot;: {\n            &quot;date&quot;: &quot;2021-03-16&quot;,\n            &quot;day&quot;: &quot;16&quot;,\n            &quot;epoch&quot;: &quot;1615886206&quot;,\n            &quot;hour&quot;: &quot;17&quot;,\n            &quot;iso8601&quot;: &quot;2021-03-16T09:16:46Z&quot;,\n            &quot;iso8601_basic&quot;: &quot;20210316T171646952201&quot;,\n            &quot;iso8601_basic_short&quot;: &quot;20210316T171646&quot;,\n            &quot;iso8601_micro&quot;: &quot;2021-03-16T09:16:46.952201Z&quot;,\n            &quot;minute&quot;: &quot;16&quot;,\n            &quot;month&quot;: &quot;03&quot;,\n            &quot;second&quot;: &quot;46&quot;,\n            &quot;time&quot;: &quot;17:16:46&quot;,\n            &quot;tz&quot;: &quot;CST&quot;,\n            &quot;tz_offset&quot;: &quot;+0800&quot;,\n            &quot;weekday&quot;: &quot;Tuesday&quot;,\n            &quot;weekday_number&quot;: &quot;2&quot;,\n            &quot;weeknumber&quot;: &quot;11&quot;,\n            &quot;year&quot;: &quot;2021&quot;\n        },\n        &quot;ansible_default_ipv4&quot;: {\n            &quot;address&quot;: &quot;192.168.135.234&quot;,\n            &quot;alias&quot;: &quot;eth0&quot;,\n            &quot;broadcast&quot;: &quot;192.168.135.255&quot;,\n            &quot;gateway&quot;: &quot;192.168.135.254&quot;,\n            &quot;interface&quot;: &quot;eth0&quot;,\n            &quot;macaddress&quot;: &quot;fa:16:3e:7e:9b:47&quot;,\n            &quot;mtu&quot;: 1500,\n            &quot;netmask&quot;: &quot;255.255.255.0&quot;,\n            &quot;network&quot;: &quot;192.168.135.0&quot;,\n            &quot;type&quot;: &quot;ether&quot;\n        },\n        &quot;ansible_default_ipv6&quot;: {},\n        &quot;ansible_device_links&quot;: {\n            &quot;ids&quot;: {\n                &quot;sr0&quot;: [\n                    &quot;ata-QEMU_DVD-ROM_QM00002&quot;\n                ],\n                &quot;sr1&quot;: [\n                    &quot;ata-QEMU_DVD-ROM_QM00004&quot;\n                ],\n                &quot;vda&quot;: [\n                    &quot;virtio-c1672133-7ae6-4318-8&quot;\n                ],\n                &quot;vda1&quot;: [\n                    &quot;virtio-c1672133-7ae6-4318-8-part1&quot;\n                ],\n                &quot;vda2&quot;: [\n                    &quot;virtio-c1672133-7ae6-4318-8-part2&quot;\n                ]\n            },\n            &quot;labels&quot;: {\n                &quot;sr1&quot;: [\n                    &quot;config-2&quot;\n                ]\n            },\n            &quot;masters&quot;: {},\n            &quot;uuids&quot;: {\n                &quot;sr1&quot;: [\n                    &quot;2021-03-08-14-55-38-00&quot;\n                ],\n                &quot;vda1&quot;: [\n                    &quot;fef1f8c8-02fb-440c-b8aa-8fec6bfb4a88&quot;\n                ],\n                &quot;vda2&quot;: [\n                    &quot;120cca73-ddab-4aac-b751-7421263b55ad&quot;\n                ]\n            }\n        },\n        &quot;ansible_devices&quot;: {\n            &quot;sr0&quot;: {\n                &quot;holders&quot;: [],\n                &quot;host&quot;: &quot;&quot;,\n                &quot;links&quot;: {\n                    &quot;ids&quot;: [\n                        &quot;ata-QEMU_DVD-ROM_QM00002&quot;\n                    ],\n                    &quot;labels&quot;: [],\n                    &quot;masters&quot;: [],\n                    &quot;uuids&quot;: []\n                },\n                &quot;model&quot;: &quot;QEMU DVD-ROM&quot;,\n                &quot;partitions&quot;: {},\n                &quot;removable&quot;: &quot;1&quot;,\n                &quot;rotational&quot;: &quot;1&quot;,\n                &quot;sas_address&quot;: null,\n                &quot;sas_device_handle&quot;: null,\n                &quot;scheduler_mode&quot;: &quot;deadline&quot;,\n                &quot;sectors&quot;: &quot;2097151&quot;,\n                &quot;sectorsize&quot;: &quot;512&quot;,\n                &quot;size&quot;: &quot;1024.00 MB&quot;,\n                &quot;support_discard&quot;: &quot;0&quot;,\n                &quot;vendor&quot;: &quot;QEMU&quot;,\n                &quot;virtual&quot;: 1\n            },\n            &quot;sr1&quot;: {\n                &quot;holders&quot;: [],\n                &quot;host&quot;: &quot;&quot;,\n                &quot;links&quot;: {\n                    &quot;ids&quot;: [\n                        &quot;ata-QEMU_DVD-ROM_QM00004&quot;\n                    ],\n                    &quot;labels&quot;: [\n                        &quot;config-2&quot;\n                    ],\n                    &quot;masters&quot;: [],\n                    &quot;uuids&quot;: [\n                        &quot;2021-03-08-14-55-38-00&quot;\n                    ]\n                },\n                &quot;model&quot;: &quot;QEMU DVD-ROM&quot;,\n                &quot;partitions&quot;: {},\n                &quot;removable&quot;: &quot;1&quot;,\n                &quot;rotational&quot;: &quot;1&quot;,\n                &quot;sas_address&quot;: null,\n                &quot;sas_device_handle&quot;: null,\n                &quot;scheduler_mode&quot;: &quot;deadline&quot;,\n                &quot;sectors&quot;: &quot;964&quot;,\n                &quot;sectorsize&quot;: &quot;2048&quot;,\n                &quot;size&quot;: &quot;482.00 KB&quot;,\n                &quot;support_discard&quot;: &quot;0&quot;,\n                &quot;vendor&quot;: &quot;QEMU&quot;,\n                &quot;virtual&quot;: 1\n            },\n            &quot;vda&quot;: {\n                &quot;holders&quot;: [],\n                &quot;host&quot;: &quot;&quot;,\n                &quot;links&quot;: {\n                    &quot;ids&quot;: [\n                        &quot;virtio-c1672133-7ae6-4318-8&quot;\n                    ],\n                    &quot;labels&quot;: [],\n                    &quot;masters&quot;: [],\n                    &quot;uuids&quot;: []\n                },\n                &quot;model&quot;: null,\n                &quot;partitions&quot;: {\n                    &quot;vda1&quot;: {\n                        &quot;holders&quot;: [],\n                        &quot;links&quot;: {\n                            &quot;ids&quot;: [\n                                &quot;virtio-c1672133-7ae6-4318-8-part1&quot;\n                            ],\n                            &quot;labels&quot;: [],\n                            &quot;masters&quot;: [],\n                            &quot;uuids&quot;: [\n                                &quot;fef1f8c8-02fb-440c-b8aa-8fec6bfb4a88&quot;\n                            ]\n                        },\n                        &quot;sectors&quot;: &quot;1024000&quot;,\n                        &quot;sectorsize&quot;: 512,\n                        &quot;size&quot;: &quot;500.00 MB&quot;,\n                        &quot;start&quot;: &quot;2048&quot;,\n                        &quot;uuid&quot;: &quot;fef1f8c8-02fb-440c-b8aa-8fec6bfb4a88&quot;\n                    },\n                    &quot;vda2&quot;: {\n                        &quot;holders&quot;: [],\n                        &quot;links&quot;: {\n                            &quot;ids&quot;: [\n                                &quot;virtio-c1672133-7ae6-4318-8-part2&quot;\n                            ],\n                            &quot;labels&quot;: [],\n                            &quot;masters&quot;: [],\n                            &quot;uuids&quot;: [\n                                &quot;120cca73-ddab-4aac-b751-7421263b55ad&quot;\n                            ]\n                        },\n                        &quot;sectors&quot;: &quot;208689152&quot;,\n                        &quot;sectorsize&quot;: 512,\n                        &quot;size&quot;: &quot;99.51 GB&quot;,\n                        &quot;start&quot;: &quot;1026048&quot;,\n                        &quot;uuid&quot;: &quot;120cca73-ddab-4aac-b751-7421263b55ad&quot;\n                    }\n                },\n                &quot;removable&quot;: &quot;0&quot;,\n                &quot;rotational&quot;: &quot;1&quot;,\n                &quot;sas_address&quot;: null,\n                &quot;sas_device_handle&quot;: null,\n                &quot;scheduler_mode&quot;: &quot;mq-deadline&quot;,\n                &quot;sectors&quot;: &quot;209715200&quot;,\n                &quot;sectorsize&quot;: &quot;512&quot;,\n                &quot;size&quot;: &quot;100.00 GB&quot;,\n                &quot;support_discard&quot;: &quot;0&quot;,\n                &quot;vendor&quot;: &quot;0x1af4&quot;,\n                &quot;virtual&quot;: 1\n            }\n        },\n        &quot;ansible_distribution&quot;: &quot;CentOS&quot;,\n        &quot;ansible_distribution_file_parsed&quot;: true,\n        &quot;ansible_distribution_file_path&quot;: &quot;/etc/redhat-release&quot;,\n        &quot;ansible_distribution_file_variety&quot;: &quot;RedHat&quot;,\n        &quot;ansible_distribution_major_version&quot;: &quot;7&quot;,\n        &quot;ansible_distribution_release&quot;: &quot;Core&quot;,\n        &quot;ansible_distribution_version&quot;: &quot;7.6&quot;,\n        &quot;ansible_dns&quot;: {\n            &quot;nameservers&quot;: [\n                &quot;202.96.209.5&quot;,\n                &quot;114.114.114.114&quot;\n            ],\n            &quot;search&quot;: [\n                &quot;openstacklocal&quot;\n            ]\n        },\n        &quot;ansible_domain&quot;: &quot;&quot;,\n        &quot;ansible_effective_group_id&quot;: 0,\n        &quot;ansible_effective_user_id&quot;: 0,\n        &quot;ansible_env&quot;: {\n            &quot;CLASSPATH&quot;: &quot;.::/opt/jdk1.8.0_144/lib:/opt/jdk1.8.0_144/jre/lib&quot;,\n            &quot;HISTCONTROL&quot;: &quot;ignoredups&quot;,\n            &quot;HISTSIZE&quot;: &quot;1000&quot;,\n            &quot;HOME&quot;: &quot;/root&quot;,\n            &quot;HOSTNAME&quot;: &quot;host-192-168-135-234&quot;,\n            &quot;JAVA_HOME&quot;: &quot;/opt/jdk1.8.0_144&quot;,\n            &quot;JRE_HOME&quot;: &quot;/opt/jdk1.8.0_144/jre&quot;,\n            &quot;LANG&quot;: &quot;en_US.UTF-8&quot;,\n            &quot;LESSOPEN&quot;: &quot;||/usr/bin/lesspipe.sh %s&quot;,\n            &quot;LOGNAME&quot;: &quot;root&quot;,\n            &quot;LS_COLORS&quot;: &quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:&quot;,\n            &quot;MAIL&quot;: &quot;/var/spool/mail/root&quot;,\n            &quot;PATH&quot;: &quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/jdk1.8.0_144/bin:/opt/jdk1.8.0_144/jre/bin:/root/bin&quot;,\n            &quot;PWD&quot;: &quot;/etc/ansible/playbooks&quot;,\n            &quot;SHELL&quot;: &quot;/bin/bash&quot;,\n            &quot;SHLVL&quot;: &quot;3&quot;,\n            &quot;SSH_CLIENT&quot;: &quot;192.168.135.72 6220 22&quot;,\n            &quot;SSH_CONNECTION&quot;: &quot;192.168.135.72 6220 192.168.135.234 22&quot;,\n            &quot;SSH_TTY&quot;: &quot;/dev/pts/0&quot;,\n            &quot;TERM&quot;: &quot;xterm&quot;,\n            &quot;USER&quot;: &quot;root&quot;,\n            &quot;XDG_RUNTIME_DIR&quot;: &quot;/run/user/0&quot;,\n            &quot;XDG_SESSION_ID&quot;: &quot;5879&quot;,\n            &quot;_&quot;: &quot;/usr/bin/python3&quot;\n        },\n        &quot;ansible_eth0&quot;: {\n            &quot;active&quot;: true,\n            &quot;device&quot;: &quot;eth0&quot;,\n            &quot;features&quot;: {\n                &quot;busy_poll&quot;: &quot;off [fixed]&quot;,\n                &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;,\n                &quot;generic_receive_offload&quot;: &quot;on&quot;,\n                &quot;generic_segmentation_offload&quot;: &quot;on&quot;,\n                &quot;highdma&quot;: &quot;on [fixed]&quot;,\n                &quot;hw_tc_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;l2_fwd_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;loopback&quot;: &quot;off [fixed]&quot;,\n                &quot;netns_local&quot;: &quot;off [fixed]&quot;,\n                &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;,\n                &quot;receive_hashing&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_all&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_checksumming&quot;: &quot;on [fixed]&quot;,\n                &quot;rx_fcs&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_gro_hw&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_udp_tunnel_port_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_vlan_filter&quot;: &quot;on [fixed]&quot;,\n                &quot;rx_vlan_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_vlan_stag_filter&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_vlan_stag_hw_parse&quot;: &quot;off [fixed]&quot;,\n                &quot;scatter_gather&quot;: &quot;on&quot;,\n                &quot;tcp_segmentation_offload&quot;: &quot;on&quot;,\n                &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_checksum_ip_generic&quot;: &quot;on&quot;,\n                &quot;tx_checksum_ipv4&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_checksum_ipv6&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_checksum_sctp&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_checksumming&quot;: &quot;on&quot;,\n                &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_gre_csum_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_gso_partial&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_ipip_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_lockless&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_nocache_copy&quot;: &quot;off&quot;,\n                &quot;tx_scatter_gather&quot;: &quot;on&quot;,\n                &quot;tx_scatter_gather_fraglist&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_sctp_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_sit_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_tcp6_segmentation&quot;: &quot;on&quot;,\n                &quot;tx_tcp_ecn_segmentation&quot;: &quot;on&quot;,\n                &quot;tx_tcp_mangleid_segmentation&quot;: &quot;off&quot;,\n                &quot;tx_tcp_segmentation&quot;: &quot;on&quot;,\n                &quot;tx_udp_tnl_csum_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_vlan_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_vlan_stag_hw_insert&quot;: &quot;off [fixed]&quot;,\n                &quot;udp_fragmentation_offload&quot;: &quot;on&quot;,\n                &quot;vlan_challenged&quot;: &quot;off [fixed]&quot;\n            },\n            &quot;hw_timestamp_filters&quot;: [],\n            &quot;ipv4&quot;: {\n                &quot;address&quot;: &quot;192.168.135.234&quot;,\n                &quot;broadcast&quot;: &quot;192.168.135.255&quot;,\n                &quot;netmask&quot;: &quot;255.255.255.0&quot;,\n                &quot;network&quot;: &quot;192.168.135.0&quot;\n            },\n            &quot;ipv6&quot;: [\n                {\n                    &quot;address&quot;: &quot;fe80::c38:ea5:1598:8169&quot;,\n                    &quot;prefix&quot;: &quot;64&quot;,\n                    &quot;scope&quot;: &quot;link&quot;\n                }\n            ],\n            &quot;macaddress&quot;: &quot;fa:16:3e:7e:9b:47&quot;,\n            &quot;module&quot;: &quot;virtio_net&quot;,\n            &quot;mtu&quot;: 1500,\n            &quot;pciid&quot;: &quot;virtio0&quot;,\n            &quot;promisc&quot;: false,\n            &quot;timestamping&quot;: [\n                &quot;rx_software&quot;,\n                &quot;software&quot;\n            ],\n            &quot;type&quot;: &quot;ether&quot;\n        },\n        &quot;ansible_fibre_channel_wwn&quot;: [],\n        &quot;ansible_fips&quot;: false,\n        &quot;ansible_form_factor&quot;: &quot;Other&quot;,\n        &quot;ansible_fqdn&quot;: &quot;host-192-168-135-234&quot;,\n        &quot;ansible_hostname&quot;: &quot;host-192-168-135-234&quot;,\n        &quot;ansible_hostnqn&quot;: &quot;&quot;,\n        &quot;ansible_interfaces&quot;: [\n            &quot;lo&quot;,\n            &quot;eth0&quot;\n        ],\n        &quot;ansible_is_chroot&quot;: false,\n        &quot;ansible_iscsi_iqn&quot;: &quot;&quot;,\n        &quot;ansible_kernel&quot;: &quot;3.10.0-957.el7.x86_64&quot;,\n        &quot;ansible_kernel_version&quot;: &quot;#1 SMP Thu Nov 8 23:39:32 UTC 2018&quot;,\n        &quot;ansible_lo&quot;: {\n            &quot;active&quot;: true,\n            &quot;device&quot;: &quot;lo&quot;,\n            &quot;features&quot;: {\n                &quot;busy_poll&quot;: &quot;off [fixed]&quot;,\n                &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;,\n                &quot;generic_receive_offload&quot;: &quot;on&quot;,\n                &quot;generic_segmentation_offload&quot;: &quot;on&quot;,\n                &quot;highdma&quot;: &quot;on [fixed]&quot;,\n                &quot;hw_tc_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;l2_fwd_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;loopback&quot;: &quot;on [fixed]&quot;,\n                &quot;netns_local&quot;: &quot;on [fixed]&quot;,\n                &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;,\n                &quot;receive_hashing&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_all&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_checksumming&quot;: &quot;on [fixed]&quot;,\n                &quot;rx_fcs&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_gro_hw&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_udp_tunnel_port_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_vlan_filter&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_vlan_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_vlan_stag_filter&quot;: &quot;off [fixed]&quot;,\n                &quot;rx_vlan_stag_hw_parse&quot;: &quot;off [fixed]&quot;,\n                &quot;scatter_gather&quot;: &quot;on&quot;,\n                &quot;tcp_segmentation_offload&quot;: &quot;on&quot;,\n                &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_checksum_ip_generic&quot;: &quot;on [fixed]&quot;,\n                &quot;tx_checksum_ipv4&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_checksum_ipv6&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_checksum_sctp&quot;: &quot;on [fixed]&quot;,\n                &quot;tx_checksumming&quot;: &quot;on&quot;,\n                &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_gre_csum_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_gso_partial&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_ipip_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_lockless&quot;: &quot;on [fixed]&quot;,\n                &quot;tx_nocache_copy&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_scatter_gather&quot;: &quot;on [fixed]&quot;,\n                &quot;tx_scatter_gather_fraglist&quot;: &quot;on [fixed]&quot;,\n                &quot;tx_sctp_segmentation&quot;: &quot;on&quot;,\n                &quot;tx_sit_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_tcp6_segmentation&quot;: &quot;on&quot;,\n                &quot;tx_tcp_ecn_segmentation&quot;: &quot;on&quot;,\n                &quot;tx_tcp_mangleid_segmentation&quot;: &quot;on&quot;,\n                &quot;tx_tcp_segmentation&quot;: &quot;on&quot;,\n                &quot;tx_udp_tnl_csum_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_vlan_offload&quot;: &quot;off [fixed]&quot;,\n                &quot;tx_vlan_stag_hw_insert&quot;: &quot;off [fixed]&quot;,\n                &quot;udp_fragmentation_offload&quot;: &quot;on&quot;,\n                &quot;vlan_challenged&quot;: &quot;on [fixed]&quot;\n            },\n            &quot;hw_timestamp_filters&quot;: [],\n            &quot;ipv4&quot;: {\n                &quot;address&quot;: &quot;127.0.0.1&quot;,\n                &quot;broadcast&quot;: &quot;&quot;,\n                &quot;netmask&quot;: &quot;255.0.0.0&quot;,\n                &quot;network&quot;: &quot;127.0.0.0&quot;\n            },\n            &quot;ipv6&quot;: [\n                {\n                    &quot;address&quot;: &quot;::1&quot;,\n                    &quot;prefix&quot;: &quot;128&quot;,\n                    &quot;scope&quot;: &quot;host&quot;\n                }\n            ],\n            &quot;mtu&quot;: 65536,\n            &quot;promisc&quot;: false,\n            &quot;timestamping&quot;: [\n                &quot;rx_software&quot;,\n                &quot;software&quot;\n            ],\n            &quot;type&quot;: &quot;loopback&quot;\n        },\n        &quot;ansible_local&quot;: {},\n        &quot;ansible_lsb&quot;: {},\n        &quot;ansible_machine&quot;: &quot;x86_64&quot;,\n        &quot;ansible_machine_id&quot;: &quot;5da37d186bbc4fab946458f383820cc2&quot;,\n        &quot;ansible_memfree_mb&quot;: 5793,\n        &quot;ansible_memory_mb&quot;: {\n            &quot;nocache&quot;: {\n                &quot;free&quot;: 6652,\n                &quot;used&quot;: 1150\n            },\n            &quot;real&quot;: {\n                &quot;free&quot;: 5793,\n                &quot;total&quot;: 7802,\n                &quot;used&quot;: 2009\n            },\n            &quot;swap&quot;: {\n                &quot;cached&quot;: 0,\n                &quot;free&quot;: 0,\n                &quot;total&quot;: 0,\n                &quot;used&quot;: 0\n            }\n        },\n        &quot;ansible_memtotal_mb&quot;: 7802,\n        &quot;ansible_mounts&quot;: [\n            {\n                &quot;block_available&quot;: 25154087,\n                &quot;block_size&quot;: 4096,\n                &quot;block_total&quot;: 26073407,\n                &quot;block_used&quot;: 919320,\n                &quot;device&quot;: &quot;/dev/vda2&quot;,\n                &quot;fstype&quot;: &quot;xfs&quot;,\n                &quot;inode_available&quot;: 52034972,\n                &quot;inode_total&quot;: 52172288,\n                &quot;inode_used&quot;: 137316,\n                &quot;mount&quot;: &quot;/&quot;,\n                &quot;options&quot;: &quot;rw,relatime,attr2,inode64,noquota&quot;,\n                &quot;size_available&quot;: 103031140352,\n                &quot;size_total&quot;: 106796675072,\n                &quot;uuid&quot;: &quot;120cca73-ddab-4aac-b751-7421263b55ad&quot;\n            },\n            {\n                &quot;block_available&quot;: 93950,\n                &quot;block_size&quot;: 4096,\n                &quot;block_total&quot;: 127145,\n                &quot;block_used&quot;: 33195,\n                &quot;device&quot;: &quot;/dev/vda1&quot;,\n                &quot;fstype&quot;: &quot;xfs&quot;,\n                &quot;inode_available&quot;: 255673,\n                &quot;inode_total&quot;: 256000,\n                &quot;inode_used&quot;: 327,\n                &quot;mount&quot;: &quot;/boot&quot;,\n                &quot;options&quot;: &quot;rw,relatime,attr2,inode64,noquota&quot;,\n                &quot;size_available&quot;: 384819200,\n                &quot;size_total&quot;: 520785920,\n                &quot;uuid&quot;: &quot;fef1f8c8-02fb-440c-b8aa-8fec6bfb4a88&quot;\n            }\n        ],\n        &quot;ansible_nodename&quot;: &quot;host-192-168-135-234&quot;,\n        &quot;ansible_os_family&quot;: &quot;RedHat&quot;,\n        &quot;ansible_pkg_mgr&quot;: &quot;yum&quot;,\n        &quot;ansible_proc_cmdline&quot;: {\n            &quot;BOOT_IMAGE&quot;: &quot;/vmlinuz-3.10.0-957.el7.x86_64&quot;,\n            &quot;biosdevname&quot;: [\n                &quot;0&quot;,\n                &quot;0&quot;,\n                &quot;0&quot;\n            ],\n            &quot;crashkernel&quot;: &quot;auto&quot;,\n            &quot;net.ifnames&quot;: [\n                &quot;0&quot;,\n                &quot;0&quot;,\n                &quot;0&quot;\n            ],\n            &quot;quiet&quot;: true,\n            &quot;rhgb&quot;: true,\n            &quot;ro&quot;: true,\n            &quot;root&quot;: &quot;UUID=120cca73-ddab-4aac-b751-7421263b55ad&quot;\n        },\n        &quot;ansible_processor&quot;: [\n            &quot;0&quot;,\n            &quot;GenuineIntel&quot;,\n            &quot;QEMU Virtual CPU version (cpu64-rhel6)&quot;,\n            &quot;1&quot;,\n            &quot;GenuineIntel&quot;,\n            &quot;QEMU Virtual CPU version (cpu64-rhel6)&quot;,\n            &quot;2&quot;,\n            &quot;GenuineIntel&quot;,\n            &quot;QEMU Virtual CPU version (cpu64-rhel6)&quot;,\n            &quot;3&quot;,\n            &quot;GenuineIntel&quot;,\n            &quot;QEMU Virtual CPU version (cpu64-rhel6)&quot;\n        ],\n        &quot;ansible_processor_cores&quot;: 1,\n        &quot;ansible_processor_count&quot;: 4,\n        &quot;ansible_processor_threads_per_core&quot;: 1,\n        &quot;ansible_processor_vcpus&quot;: 4,\n        &quot;ansible_product_name&quot;: &quot;ArStack&quot;,\n        &quot;ansible_product_serial&quot;: &quot;ed734a0c-5e92-45e4-8491-1f2882a28b98&quot;,\n        &quot;ansible_product_uuid&quot;: &quot;E9D04AFD-381C-4EF2-8523-A5F2177334A9&quot;,\n        &quot;ansible_product_version&quot;: &quot;2020.5.15-1.el7.centos&quot;,\n        &quot;ansible_python&quot;: {\n            &quot;executable&quot;: &quot;/usr/bin/python3&quot;,\n            &quot;has_sslcontext&quot;: true,\n            &quot;type&quot;: &quot;cpython&quot;,\n            &quot;version&quot;: {\n                &quot;major&quot;: 3,\n                &quot;micro&quot;: 8,\n                &quot;minor&quot;: 6,\n                &quot;releaselevel&quot;: &quot;final&quot;,\n                &quot;serial&quot;: 0\n            },\n            &quot;version_info&quot;: [\n                3,\n                6,\n                8,\n                &quot;final&quot;,\n                0\n            ]\n        },\n        &quot;ansible_python_version&quot;: &quot;3.6.8&quot;,\n        &quot;ansible_real_group_id&quot;: 0,\n        &quot;ansible_real_user_id&quot;: 0,\n        &quot;ansible_selinux&quot;: {\n            &quot;status&quot;: &quot;Missing selinux Python library&quot;\n        },\n        &quot;ansible_selinux_python_present&quot;: false,\n        &quot;ansible_service_mgr&quot;: &quot;systemd&quot;,\n        &quot;ansible_ssh_host_key_ecdsa_public&quot;: &quot;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNxkCyohIHmaY5FLaLU4NRenQ6QE9qcjzbs87lvJhhH7TpWKHw3/NOVLks1amivsFJ1CQsgzk+XkU/YLfDFGNRo=&quot;,\n        &quot;ansible_ssh_host_key_ed25519_public&quot;: &quot;AAAAC3NzaC1lZDI1NTE5AAAAILGRRrB9EPLkKsnOkyTzCpIyfWuIPEh7Qy9l2H0O+k4U&quot;,\n        &quot;ansible_ssh_host_key_rsa_public&quot;: &quot;AAAAB3NzaC1yc2EAAAADAQABAAABAQDXqv9l/aw5jmEeKMRIVCUSUCpAPSUYyiVzfe7MNGDJ/Wd/ZHBMScAKgPq31z5OXJBpzDzIULZ5Di3WwmIdRHU6f4+PQ7E2LHQN4SDQvk7Flz7ivUv/aGtwUft929llVyT7/jrVFzWeR3ABtc6Roux2UMwWZANDwGWLkv+R6qluFNZ4yGTmYr7i/WTa0IXqI0AgZbAjGcSxqwGpgC7+NW8UVn975sz2pBRgCz9PG0mTWLKjcpESPpeypX0D0liq3rkwCjmU3OutwrTOYX1Di5n9miufUvZeSauWfska++t8xSYcOvbkzWidCOWOYtmx6VqrbKSSQiEDAbWJipIGcX+T&quot;,\n        &quot;ansible_swapfree_mb&quot;: 0,\n        &quot;ansible_swaptotal_mb&quot;: 0,\n        &quot;ansible_system&quot;: &quot;Linux&quot;,\n        &quot;ansible_system_capabilities&quot;: [\n            &quot;cap_chown&quot;,\n            &quot;cap_dac_override&quot;,\n            &quot;cap_dac_read_search&quot;,\n            &quot;cap_fowner&quot;,\n            &quot;cap_fsetid&quot;,\n            &quot;cap_kill&quot;,\n            &quot;cap_setgid&quot;,\n            &quot;cap_setuid&quot;,\n            &quot;cap_setpcap&quot;,\n            &quot;cap_linux_immutable&quot;,\n            &quot;cap_net_bind_service&quot;,\n            &quot;cap_net_broadcast&quot;,\n            &quot;cap_net_admin&quot;,\n            &quot;cap_net_raw&quot;,\n            &quot;cap_ipc_lock&quot;,\n            &quot;cap_ipc_owner&quot;,\n            &quot;cap_sys_module&quot;,\n            &quot;cap_sys_rawio&quot;,\n            &quot;cap_sys_chroot&quot;,\n            &quot;cap_sys_ptrace&quot;,\n            &quot;cap_sys_pacct&quot;,\n            &quot;cap_sys_admin&quot;,\n            &quot;cap_sys_boot&quot;,\n            &quot;cap_sys_nice&quot;,\n            &quot;cap_sys_resource&quot;,\n            &quot;cap_sys_time&quot;,\n            &quot;cap_sys_tty_config&quot;,\n            &quot;cap_mknod&quot;,\n            &quot;cap_lease&quot;,\n            &quot;cap_audit_write&quot;,\n            &quot;cap_audit_control&quot;,\n            &quot;cap_setfcap&quot;,\n            &quot;cap_mac_override&quot;,\n            &quot;cap_mac_admin&quot;,\n            &quot;cap_syslog&quot;,\n            &quot;35&quot;,\n            &quot;36+ep&quot;\n        ],\n        &quot;ansible_system_capabilities_enforced&quot;: &quot;True&quot;,\n        &quot;ansible_system_vendor&quot;: &quot;Huayun&quot;,\n        &quot;ansible_uptime_seconds&quot;: 571792,\n        &quot;ansible_user_dir&quot;: &quot;/root&quot;,\n        &quot;ansible_user_gecos&quot;: &quot;root&quot;,\n        &quot;ansible_user_gid&quot;: 0,\n        &quot;ansible_user_id&quot;: &quot;root&quot;,\n        &quot;ansible_user_shell&quot;: &quot;/bin/bash&quot;,\n        &quot;ansible_user_uid&quot;: 0,\n        &quot;ansible_userspace_architecture&quot;: &quot;x86_64&quot;,\n        &quot;ansible_userspace_bits&quot;: &quot;64&quot;,\n        &quot;ansible_virtualization_role&quot;: &quot;guest&quot;,\n        &quot;ansible_virtualization_type&quot;: &quot;kvm&quot;,\n        &quot;gather_subset&quot;: [\n            &quot;all&quot;\n        ],\n        &quot;module_setup&quot;: true\n    },\n    &quot;changed&quot;: false\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br><span>203</span><br><span>204</span><br><span>205</span><br><span>206</span><br><span>207</span><br><span>208</span><br><span>209</span><br><span>210</span><br><span>211</span><br><span>212</span><br><span>213</span><br><span>214</span><br><span>215</span><br><span>216</span><br><span>217</span><br><span>218</span><br><span>219</span><br><span>220</span><br><span>221</span><br><span>222</span><br><span>223</span><br><span>224</span><br><span>225</span><br><span>226</span><br><span>227</span><br><span>228</span><br><span>229</span><br><span>230</span><br><span>231</span><br><span>232</span><br><span>233</span><br><span>234</span><br><span>235</span><br><span>236</span><br><span>237</span><br><span>238</span><br><span>239</span><br><span>240</span><br><span>241</span><br><span>242</span><br><span>243</span><br><span>244</span><br><span>245</span><br><span>246</span><br><span>247</span><br><span>248</span><br><span>249</span><br><span>250</span><br><span>251</span><br><span>252</span><br><span>253</span><br><span>254</span><br><span>255</span><br><span>256</span><br><span>257</span><br><span>258</span><br><span>259</span><br><span>260</span><br><span>261</span><br><span>262</span><br><span>263</span><br><span>264</span><br><span>265</span><br><span>266</span><br><span>267</span><br><span>268</span><br><span>269</span><br><span>270</span><br><span>271</span><br><span>272</span><br><span>273</span><br><span>274</span><br><span>275</span><br><span>276</span><br><span>277</span><br><span>278</span><br><span>279</span><br><span>280</span><br><span>281</span><br><span>282</span><br><span>283</span><br><span>284</span><br><span>285</span><br><span>286</span><br><span>287</span><br><span>288</span><br><span>289</span><br><span>290</span><br><span>291</span><br><span>292</span><br><span>293</span><br><span>294</span><br><span>295</span><br><span>296</span><br><span>297</span><br><span>298</span><br><span>299</span><br><span>300</span><br><span>301</span><br><span>302</span><br><span>303</span><br><span>304</span><br><span>305</span><br><span>306</span><br><span>307</span><br><span>308</span><br><span>309</span><br><span>310</span><br><span>311</span><br><span>312</span><br><span>313</span><br><span>314</span><br><span>315</span><br><span>316</span><br><span>317</span><br><span>318</span><br><span>319</span><br><span>320</span><br><span>321</span><br><span>322</span><br><span>323</span><br><span>324</span><br><span>325</span><br><span>326</span><br><span>327</span><br><span>328</span><br><span>329</span><br><span>330</span><br><span>331</span><br><span>332</span><br><span>333</span><br><span>334</span><br><span>335</span><br><span>336</span><br><span>337</span><br><span>338</span><br><span>339</span><br><span>340</span><br><span>341</span><br><span>342</span><br><span>343</span><br><span>344</span><br><span>345</span><br><span>346</span><br><span>347</span><br><span>348</span><br><span>349</span><br><span>350</span><br><span>351</span><br><span>352</span><br><span>353</span><br><span>354</span><br><span>355</span><br><span>356</span><br><span>357</span><br><span>358</span><br><span>359</span><br><span>360</span><br><span>361</span><br><span>362</span><br><span>363</span><br><span>364</span><br><span>365</span><br><span>366</span><br><span>367</span><br><span>368</span><br><span>369</span><br><span>370</span><br><span>371</span><br><span>372</span><br><span>373</span><br><span>374</span><br><span>375</span><br><span>376</span><br><span>377</span><br><span>378</span><br><span>379</span><br><span>380</span><br><span>381</span><br><span>382</span><br><span>383</span><br><span>384</span><br><span>385</span><br><span>386</span><br><span>387</span><br><span>388</span><br><span>389</span><br><span>390</span><br><span>391</span><br><span>392</span><br><span>393</span><br><span>394</span><br><span>395</span><br><span>396</span><br><span>397</span><br><span>398</span><br><span>399</span><br><span>400</span><br><span>401</span><br><span>402</span><br><span>403</span><br><span>404</span><br><span>405</span><br><span>406</span><br><span>407</span><br><span>408</span><br><span>409</span><br><span>410</span><br><span>411</span><br><span>412</span><br><span>413</span><br><span>414</span><br><span>415</span><br><span>416</span><br><span>417</span><br><span>418</span><br><span>419</span><br><span>420</span><br><span>421</span><br><span>422</span><br><span>423</span><br><span>424</span><br><span>425</span><br><span>426</span><br><span>427</span><br><span>428</span><br><span>429</span><br><span>430</span><br><span>431</span><br><span>432</span><br><span>433</span><br><span>434</span><br><span>435</span><br><span>436</span><br><span>437</span><br><span>438</span><br><span>439</span><br><span>440</span><br><span>441</span><br><span>442</span><br><span>443</span><br><span>444</span><br><span>445</span><br><span>446</span><br><span>447</span><br><span>448</span><br><span>449</span><br><span>450</span><br><span>451</span><br><span>452</span><br><span>453</span><br><span>454</span><br><span>455</span><br><span>456</span><br><span>457</span><br><span>458</span><br><span>459</span><br><span>460</span><br><span>461</span><br><span>462</span><br><span>463</span><br><span>464</span><br><span>465</span><br><span>466</span><br><span>467</span><br><span>468</span><br><span>469</span><br><span>470</span><br><span>471</span><br><span>472</span><br><span>473</span><br><span>474</span><br><span>475</span><br><span>476</span><br><span>477</span><br><span>478</span><br><span>479</span><br><span>480</span><br><span>481</span><br><span>482</span><br><span>483</span><br><span>484</span><br><span>485</span><br><span>486</span><br><span>487</span><br><span>488</span><br><span>489</span><br><span>490</span><br><span>491</span><br><span>492</span><br><span>493</span><br><span>494</span><br><span>495</span><br><span>496</span><br><span>497</span><br><span>498</span><br><span>499</span><br><span>500</span><br><span>501</span><br><span>502</span><br><span>503</span><br><span>504</span><br><span>505</span><br><span>506</span><br><span>507</span><br><span>508</span><br><span>509</span><br><span>510</span><br><span>511</span><br><span>512</span><br><span>513</span><br><span>514</span><br><span>515</span><br><span>516</span><br><span>517</span><br><span>518</span><br><span>519</span><br><span>520</span><br><span>521</span><br><span>522</span><br><span>523</span><br><span>524</span><br><span>525</span><br><span>526</span><br><span>527</span><br><span>528</span><br><span>529</span><br><span>530</span><br><span>531</span><br><span>532</span><br><span>533</span><br><span>534</span><br><span>535</span><br><span>536</span><br><span>537</span><br><span>538</span><br><span>539</span><br><span>540</span><br><span>541</span><br><span>542</span><br><span>543</span><br><span>544</span><br><span>545</span><br><span>546</span><br><span>547</span><br><span>548</span><br><span>549</span><br><span>550</span><br><span>551</span><br><span>552</span><br><span>553</span><br><span>554</span><br><span>555</span><br><span>556</span><br><span>557</span><br><span>558</span><br><span>559</span><br><span>560</span><br><span>561</span><br><span>562</span><br><span>563</span><br><span>564</span><br><span>565</span><br><span>566</span><br><span>567</span><br><span>568</span><br><span>569</span><br><span>570</span><br><span>571</span><br><span>572</span><br><span>573</span><br><span>574</span><br><span>575</span><br><span>576</span><br><span>577</span><br><span>578</span><br><span>579</span><br><span>580</span><br><span>581</span><br><span>582</span><br><span>583</span><br><span>584</span><br><span>585</span><br><span>586</span><br><span>587</span><br><span>588</span><br><span>589</span><br><span>590</span><br><span>591</span><br><span>592</span><br><span>593</span><br><span>594</span><br><span>595</span><br><span>596</span><br><span>597</span><br><span>598</span><br><span>599</span><br><span>600</span><br><span>601</span><br><span>602</span><br><span>603</span><br><span>604</span><br><span>605</span><br><span>606</span><br><span>607</span><br><span>608</span><br><span>609</span><br><span>610</span><br><span>611</span><br><span>612</span><br><span>613</span><br><span>614</span><br><span>615</span><br><span>616</span><br><span>617</span><br><span>618</span><br><span>619</span><br><span>620</span><br><span>621</span><br></div></div><p>收集到的信息量非常大，但很幸运，只需关注其中常见的几项即可，比如系统版本号、主机名、IP地址、分区信息、挂载信息。</p>\n<p>有了这些信息，就可以去访问这些信息。由于它们都存放在ansible_facts变量中，所以通过这个变量去访问即可。但需要注意的是，对于收集到的绝大多数Facts信息，都有两种访问方式：</p>\n<p>(1).一种是debug查看ansible_facts变量得到的结果，这也是真正存储这些信息的方式</p>\n<p>(2).一种是命令行执行setup模块输出的方式</p>\n<p>直接使用debug模块去输出ansible_facts变量，即可知如何访问这些信息。例如：</p>\n<p>要获取eth0的ipv4地址：</p>\n<div><pre><code>debug:\n  var: ansible_facts.eth0.ipv4.address\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>再看在ansible命令行中执行setup模块的输出信息，会发现原本ansible_facts内几乎所有顶级的key现在都以ansible_开头，例如：</p>\n<div><pre><code>debug:\n  var: ansible_all_ipv4_addresses\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>之所以可以这样直接访问，是因为Ansible将Facts中绝大多数的顶级key都注入到了Ansible自身维护的变量表(即hostvars)中，这样访问它们就方便的多。</p>\n<p>至于采用何种方式访问，这无所谓，但是要知道的是，虽然绝大多数Facts信息都单独定义了变量，但并非所有(主要是那些可能产生歧义或冲突的变量)。</p>\n<p>另外再多提醒一句，ansible_facts自身也是变量，它也保存在各自节点的hostvars变量中，所以也可以通过hostvars去访问Facts信息。例如：</p>\n<div><pre><code>debug:\n  var: hostvars[&#39;logstash2&#39;][&#39;ansible_facts&#39;].eth0.ipv4.address\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>通常情况下，我们在运行play的时候，ansible会先尝试ssh到被控端采集fact，如果此时，被控制端的ssh还没有完全启动，就会导致整个play执行失败。这个时候，我们可以先显示的关闭fact采集，然后在task中通过wait_for等待被控端ssh端口被正常监听，再在task中使用setup模块来手动采集fact：</p>\n<div><pre><code>- name: Deploy apps\n  hosts: webservers\n  gather_facts: false\n  tasks：\n    - name: wait for ssh to be running\n      local_action: wait_for port=22 host=&quot;{{ inventory_hostname }}&quot; search_regex=OpenSSH\n    - name: gather facts\n      setup:\n    ......\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"_4-启用fact缓存\"> 4 启用fact缓存</h2>\n<p>如果在play中需要引入fact，则可以开启fact缓存。fact缓存目前支持三种存储方式，分别为JSON、memcached、redis。</p>\n<p>redis：缓存在redis服务中，直到目前(Ansible 2.9)为止，Ansible还不支持指定连接redis的端口、密码等</p>\n<p>1.gathering：控制Ansible是否自动收集Facts，它有三种值：</p>\n<p>(1).implicit：这是默认值，表示执行play时会自动收集Facts，除非显式指定gather_facts: false禁止收集</p>\n<p>(2).explicit：不自动收集Facts，除非显式指定gather_facts: true开启收集</p>\n<p>(3).smart：自动收集Facts，但如果已存在(缓存)则不重复收集</p>\n<h3 id=\"_4-1-json文件fact缓存后端\"> 4.1 Json文件fact缓存后端</h3>\n<p>使用JSON文件作为fact缓存后端的时候，ansible将会把采集的fact写入到控制主机的文件中。</p>\n<p>ansible.cfg配置如下：</p>\n<div><pre><code>[defaults]\ngathering = smart\n#缓存时间，单位为秒\nfact_caching_timeout = 86400    \nfact_caching = jsonfile\n#指定ansible包含fact的json文件位置，如果目录不存在，会自动创建\nfact_caching_connection = /tmp/ansible_fact_cache    \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_4-2-redis-fact缓存后端\"> 4.2  Redis fact缓存后端</h3>\n<p>使用redis作为fact缓存后端，需要在控制主机上安装redis服务并保持运行。需要安装python操作redis的软件包。</p>\n<p>ansible.cfg配置如下：</p>\n<div><pre><code>[defaults]\ngathering = smart\nfact_caching_timeout = 86400 \nfact_caching = redis\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_4-3-memcached-fact缓存后端\"> 4.3 Memcached fact缓存后端</h3>\n<p>使用memcached作为fact缓存后端，需要在控制主机上安装Memcached服务并保持运行，需要安装python操作memcached的软件包。</p>\n<p>ansible.cfg配置如下：</p>\n<div><pre><code>[defaults]\ngathering = smart\nfact_caching_timeout = 86400 \nfact_caching = memcached\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_5-关闭fact\"> 5 关闭fact</h2>\n<p>如果不想从fact中获取变量，或者说整个playbook当中都没有使用到fact变量，可以通过如下方法关闭fact以提升执行效率：</p>\n<div><pre><code>- hosts: test\n  gather_facts: false\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>也可以在ansible.cfg中添加如下配置：</p>\n<div><pre><code>[defaults]\ngathering = explicit\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_6-委托facts\"> 6 委托Facts</h2>\n<p>略：我暂时还没有用到</p>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "2 Ansible Inventory配置详解",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/inventory/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/inventory/",
      "content_html": "<h1 id=\"_2-ansible-inventory配置详解\"> 2 Ansible Inventory配置详解</h1>\n<p>在使用Ansible来批量管理主机的时候，通常我们需要先定义要管理哪些主机或者主机组，而这个用于管理主机与主机组的文件就叫做Inventory，也叫主机清单。</p>\n<p>Ansible Inventory 是包含<code>静态 Inventory</code> 和<code>动态 Inventory</code> 两部分的，静态 Inventory 指的是在文件中指定的主机和组，动态 Inventory 指通过外部脚本获取主机列表，并按照 ansible 所要求的格式返回给 ansilbe 命令的。</p>\n<h2 id=\"_1-inventory文件路径\"> 1 inventory文件路径</h2>\n<p>默认的inventory文件是<code>/etc/ansible/hosts</code>，可以通过Ansible配置文件的inventory配置指令去修改路径。</p>\n<div><pre><code>$ grep &#39;/etc/ansible/hosts&#39; /etc/ansible/ansible.cfg\n#inventory = /etc/ansible/hosts\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>但通常我们不会去修改这个配置项，如果在其它地方定义了inventory文件，可以直接在ansible的命令行中使用-i选项去指定我们自定义的inventory文件。</p>\n<p><strong>多个inventory文件</strong></p>\n<p>当Ansible要管理的节点非常多时，仅靠分组的逻辑可能也不足够方便管理，这个时候可以定义多个inventory文件并放在一个目录下， 并按一定的命名规则为每 个inventory命名，以便见名知意。</p>\n<p>现在要使用多个inventory的功能，需要将inventory指定为目录路径。</p>\n<p>例如，Ansible配置文件将inventory指令设置为对应的目录:</p>\n<div><pre><code>inventory <span>=</span> /etc/ansible/inventorys \n</code></pre>\n<div><span>1</span><br></div></div><p>inventory指定为目:录时，inventory文件最好不要带有后缀， 就像示例中的a和b文件。因为Ansible当使用目录作为inventory时，默认将忽略一些后缀的文件不去解析。 需要修改配置:文件中的inventory_ ignore_ extensions 项来禁止忽略指定后缀(如ini后缀)的文件。</p>\n<div><pre><code><span>#inventory_ ignore_ extensions=~, .orig, .bak, .in, .cfg, .retry, .pyc, .pyo</span>\ninventory_ ignore_ extensions <span>=</span> ~, .orig, .bak, .cfg, .retry, .pyC, .pyo\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_2-静态inventory\"> 2 静态Inventory</h2>\n<h3 id=\"_2-1-定义主机和组\"> 2.1 定义主机和组</h3>\n<blockquote>\n<p>定义主机清单，有多种格式，常用的有<code>ini</code>格式和<code>YAML</code>（Ansible 2.4开始支持）格式，我倾向于使用<code>YAML</code>格式，下面的举例中，两种格式都会提到。</p>\n<p><strong>Ansible 默认预定义了两个主机组：<code>all</code>分组（所有主机）和<code>ungrouped</code>分组（不在分组内的主机），两个组都不包括localhost这个特殊的节点</strong></p>\n</blockquote>\n<p>对于/etc/ansible/hosts最简单的定义格式像下面：</p>\n<h4 id=\"_2-1-1-简单的主机和组\"> 2.1.1 简单的主机和组</h4>\n<p>In INI:</p>\n<div><pre><code><span># 中括号中的名字代表组名，可以根据自己的需求将庞大的主机分成具有标识的组，如上面分了两个组webservers和dbservers组；  </span>\n<span># 主机(hosts)部分可以使用域名、主机名、IP地址表示；当然使用前两者时，也需要主机能反解析到相应的IP地址，一般此类配置中多使用IP地址；</span>\nmail.example.com\n\n<span>[</span>webservers<span>]</span>\nfoo.example.com\nbar.example.com\n\n<span>[</span>dbservers<span>]</span>\none.example.com\ntwo.example.com\nthree.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>In YAML:</p>\n<div><pre><code>all:\n  hosts:\n    mail.example.com:\n  children:\n    webservers:\n      hosts:\n        foo.example.com:\n        bar.example.com:\n    dbservers:\n      hosts:\n        one.example.com:\n        two.example.com:\n        three.example.com:\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h4 id=\"_2-1-2-指定主机范围\"> 2.1.2  指定主机范围</h4>\n<p>In INI:</p>\n<div><pre><code><span># 下面指定了从web01到web50，webservers组共计50台主机；databases组有db-a到db-f共6台主机</span>\n<span>[</span>webservers<span>]</span>\nwww<span>[</span>01:50<span>]</span>.example.com\n<span>[</span>databases<span>]</span>\ndb-<span>[</span>a:f<span>]</span>.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>In YAML:</p>\n<div><pre><code>all:\n  children:\n  \twebservers:\n      hosts:\n        www[01:50].example.com:\n    databases:\n      hosts:\n        db-[a:f].example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h4 id=\"_2-1-3-定义主机组嵌套\"> 2.1.3 定义主机组嵌套</h4>\n<p>一个主机组可以包含若干个子主机组：</p>\n<p>In INI:</p>\n<div><pre><code><span># 如下示例中，production组包含两个子组，分别为webservers和dbservers，webservers和dbservers组分别包含若干主机</span>\n<span>[</span>webservers<span>]</span>\nfoo.example.com\nbar.example.com\n\n<span>[</span>dbservers<span>]</span>\none.example.com\ntwo.example.com\nthree.example.com\n\n<span>[</span>production:children<span>]</span>\nwebservers\ndbservers\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>In YAML:</p>\n<div><pre><code>all:\n  children:\n    webservers:\n      hosts:\n        foo.example.com:\n        bar.example.com:\n    dbservers:\n      hosts:\n        one.example.com:\n        two.example.com:\n        three.example.com:\n    production:\n      children:\n        webservers:\n        dbservers:\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h4 id=\"_2-1-4-添加主机变量\"> 2.1.4 添加主机变量</h4>\n<p>不同ansible版本，行为控制变量名称可能不同，比如以前版本中端口号的行为变量是<code>ansible_ssh_port</code></p>\n<p>下面是常见的行为变量：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210309153531453.png\" alt=\"image-20210309153531453\"></p>\n<p>In INI:</p>\n<div><pre><code>[atlanta]\nhost1 http_port=80 maxRequestsPerChild=808 ansible_port=5555 ansible_host=192.0.2.50\nhost2 http_port=303 maxRequestsPerChild=909\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>In YAML:</p>\n<div><pre><code>atlanta:\n  host1:\n    http_port: 80\n    maxRequestsPerChild: 808\n    ansible_port: 5555\n    ansible_host: 192.0.2.50\n  host2:\n    http_port: 303\n    maxRequestsPerChild: 909\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id=\"_2-1-5-添加组变量\"> 2.1.5 添加组变量</h4>\n<p>In INI:</p>\n<div><pre><code>[atlanta]\nhost1\nhost2\n\n[atlanta:vars]\nntp_server=ntp.atlanta.example.com\nproxy=proxy.atlanta.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>In YAML:</p>\n<div><pre><code>atlanta:\n  hosts:\n    host1:\n    host2:\n  vars:\n    ntp_server: ntp.atlanta.example.com\n    proxy: proxy.atlanta.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><strong>集成变量值</strong></p>\n<p>In INI:</p>\n<div><pre><code>[atlanta]\nhost1\nhost2\n\n[raleigh]\nhost2\nhost3\n\n[southeast:children]\natlanta\nraleigh\n\n[southeast:vars]\nsome_server=foo.southeast.example.com\nhalon_system_timeout=30\nself_destruct_countdown=60\nescape_pods=2\n\n[usa:children]\nsoutheast\nnortheast\nsouthwest\nnorthwest\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>In YAML:</p>\n<div><pre><code>all:\n  children:\n    usa:\n      children:\n        southeast:\n          children:\n            atlanta:\n              hosts:\n                host1:\n                host2:\n            raleigh:\n              hosts:\n                host2:\n                host3:\n          vars:\n            some_server: foo.southeast.example.com\n            halon_system_timeout: 30\n            self_destruct_countdown: 60\n            escape_pods: 2\n        northeast:\n        northwest:\n        southwest:\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h4 id=\"_2-1-6-组织主机和组变量-配置单独变量文件host-vars和group-vars\"> 2.1.6 组织主机和组变量(配置单独变量文件host_vars和group_vars)</h4>\n<p>尽管可以将变量存储在主清单文件中，但是存储单独的主机变量和组变量文件可以帮助您更轻松地组织变量值。 主机和组变量文件必须使用YAML语法。 有效的文件扩展名包括“ .yml”，“。yaml”，“。json”或没有文件扩展名。</p>\n<p>Ansible通过搜索相对于清单文件或剧本文件的路径来加载主机和组变量文件。 如果<code>/etc/ansible/hosts</code>上的清单文件包含名为“ foosball”的主机，该主机属于“ raleigh”和“ webservers”两个组，则该主机将在以下位置的YAML文件中使用变量：</p>\n<div><pre><code>/etc/ansible/group_vars/raleigh # can optionally end in &#39;.yml&#39;, &#39;.yaml&#39;, or &#39;.json&#39;\n/etc/ansible/group_vars/webservers\n/etc/ansible/host_vars/foosball\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>例如，如果按数据中心将清单中的主机分组，并且每个数据中心使用其自己的NTP服务器和数据库服务器，则可以创建一个名为<code>/etc/ansible/group_vars/raleigh</code>的文件来存储raleigh组的变量：</p>\n<div><pre><code>---\nntp_server: acme.example.org\ndatabase_server: storage.example.org\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>再来总结一下group_vars/, host_vars/的存放位置：</p>\n<p>(1).inventory文件的同目录</p>\n<p>(2).playbook文件的同目录</p>\n<h3 id=\"_2-2-选择主机与组-hosts指令\"> 2.2 选择主机与组(hosts指令)</h3>\n<p>在前面定义Inventory的时候，我们会把所有被管理主机通过主机组的方式定义到Inventory当中，但是当我们实际使用的时候，可能只需要对某一主机或主机组进行操作，这个时候就需要通过匹配的方式指定某一特定主机或主机组。</p>\n<p>在此之间，我们先定义一个主机清单示例：</p>\n<div><pre><code>srv1.example.com\nsrv2.example.com\ns1.lab.example.com\ns2.lab.example.com\n\n<span>[</span>web<span>]</span>\njupiter.lab.example.com\nsaturn.example.com\n\n<span>[</span>db<span>]</span>\ndb1.example.com\ndb2.example.com\ndb3.example.com\n\n<span>[</span>lb<span>]</span>\nlb1.lab.example.com\nlb2.lab.example.com\n\n<span>[</span>boston<span>]</span>\ndb1.example.com\njupiter.lab.example.com\nlb2.lab.example.com\n\n<span>[</span>london<span>]</span>\ndb2.example.com\ndb3.example.com\nfile1.lab.example.com\nlb1.lab.example.com\n\n<span>[</span>dev<span>]</span>\nweb1.lab.example.com\ndb3.example.com\n\n<span>[</span>stage<span>]</span>\nfile2.example.com\ndb2.example.com\n\n<span>[</span>prod<span>]</span>\nlb2.lab.example.com\ndb1.example.com\njupiter.lab.example.com\n\n<span>[</span>function:children<span>]</span>\nweb\ndb\nlb\ncity\n\n<span>[</span>city:children<span>]</span>\nboston\nlondon\nenvironments\n\n<span>[</span>environments:children<span>]</span>\ndev\nstage\nprod\nnew\n\n<span>[</span>new<span>]</span>\n<span>172.25</span>.252.23\n<span>172.25</span>.252.44\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><p>使用更为专业的<code>ansible-inventory</code>命令来查看主机组信息</p>\n<div><pre><code> <span># 树状形式展开主机列表</span>\n ansible-inventory all --graph\n <span># 同时带上变量</span>\n ansible-inventory all --graph --vars\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id=\"_2-2-1-匹配所有主机\"> 2.2.1 匹配所有主机</h4>\n<p>可以通过<code>all</code>或者<code>*</code>来指定匹配所有主机，通过如下指令查看<code>all</code>匹配到的主机：</p>\n<div><pre><code><span># ansible all --list-hosts</span>\n  hosts <span>(</span><span>16</span><span>)</span>:\n    srv1.example.com\n    srv2.example.com\n    s1.lab.example.com\n    s2.lab.example.com\n    jupiter.lab.example.com\n    saturn.example.com\n    db1.example.com\n    db2.example.com\n    db3.example.com\n    lb1.lab.example.com\n    lb2.lab.example.com\n    file1.lab.example.com\n    web1.lab.example.com\n    file2.example.com\n    <span>172.25</span>.252.23\n    <span>172.25</span>.252.44\n    <span>172.25</span>.252.32\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h4 id=\"_2-2-2-匹配指定的主机或主机组\"> 2.2.2 匹配指定的主机或主机组</h4>\n<ol>\n<li>匹配单个组</li>\n</ol>\n<div><pre><code><span># ansible prod --list-hosts</span>\n  hosts <span>(</span><span>3</span><span>)</span>:\n    lb2.lab.example.com\n    db1.example.com\n    jupiter.lab.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"2\">\n<li>匹配单个主机</li>\n</ol>\n<div><pre><code><span># ansible db2.example.com --list-hosts</span>\n  hosts <span>(</span><span>1</span><span>)</span>:\n    db2.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ol start=\"3\">\n<li>匹配多个主机</li>\n</ol>\n<div><pre><code># ansible &#39;lb1.lab.example.com,s1.lab.example.com,db1.example.com&#39; --list-hosts  \n  hosts (3):\n    lb1.lab.example.com\n    s1.lab.example.com\n    db1.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"4\">\n<li>匹配多个组</li>\n</ol>\n<div><pre><code><span># ansible 'london,boston' --list-hosts</span>\n  hosts <span>(</span><span>7</span><span>)</span>:\n    db2.example.com\n    db3.example.com\n    file1.lab.example.com\n    lb1.lab.example.com\n    db1.example.com\n    jupiter.lab.example.com\n    lb2.lab.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ol start=\"5\">\n<li>匹配不属于任何组的主机</li>\n</ol>\n<div><pre><code><span># ansible ungrouped --list-hosts</span>\n  hosts <span>(</span><span>4</span><span>)</span>:\n    srv1.example.com\n    srv2.example.com\n    s1.lab.example.com\n    s2.lab.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id=\"_2-2-4-通配符匹配\"> 2.2.4 通配符匹配</h4>\n<ol>\n<li>匹配'*.example.com'：</li>\n</ol>\n<div><pre><code><span># ansible '*.example.com' --list-hosts</span>\n  hosts <span>(</span><span>14</span><span>)</span>:\n    srv1.example.com\n    srv2.example.com\n    s1.lab.example.com\n    s2.lab.example.com\n    jupiter.lab.example.com\n    saturn.example.com\n    db1.example.com\n    db2.example.com\n    db3.example.com\n    lb1.lab.example.com\n    lb2.lab.example.com\n    file1.lab.example.com\n    web1.lab.example.com\n    file2.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ol start=\"2\">\n<li>匹配<code>172.25.*</code>的主机：</li>\n</ol>\n<div><pre><code># ansible &#39;172.25.*&#39; --list-hosts                         \n  hosts (3):\n    172.25.252.23\n    172.25.252.44\n    172.25.252.32\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"3\">\n<li>匹配以<code>s</code>开头的主机及主机组：</li>\n</ol>\n<div><pre><code># ansible &#39;s*&#39; --list-hosts\n  hosts (7):\n    file2.example.com\n    db2.example.com\n    srv1.example.com\n    srv2.example.com\n    s1.lab.example.com\n    s2.lab.example.com\n    saturn.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id=\"_2-2-5-通配符组合匹配\"> 2.2.5  通配符组合匹配</h4>\n<ol>\n<li>匹配包含<code>*.example.com</code>但不包含<code>*.lab.example.com</code>的主机：</li>\n</ol>\n<div><pre><code># ansible &#39;*.example.com,!*.lab.example.com&#39; --list-hosts  \n  hosts (7):\n    srv1.example.com\n    srv2.example.com\n    saturn.example.com\n    db1.example.com\n    db2.example.com\n    db3.example.com\n    file2.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ol start=\"2\">\n<li>匹配包含prod以及172开头、包含lab关键字的主机或组</li>\n</ol>\n<div><pre><code># ansible &#39;prod,172*,*lab*&#39; --list-hosts\n  hosts (11):\n    lb2.lab.example.com\n    db1.example.com\n    jupiter.lab.example.com\n    172.25.252.23\n    172.25.252.44\n    172.25.252.32\n    s1.lab.example.com\n    s2.lab.example.com\n    lb1.lab.example.com\n    file1.lab.example.com\n    web1.lab.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><ol start=\"3\">\n<li>匹配属于db组同时还属于london组的主机：</li>\n</ol>\n<div><pre><code># ansible &#39;db,&amp;london&#39; --list-hosts\n  hosts (2):\n    db2.example.com\n    db3.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ol start=\"4\">\n<li>匹配在london组或者boston组，还必须在prod组中且必须不在lb组中的主机：</li>\n</ol>\n<div><pre><code><span># ansible 'boston,london,&amp;prod,!lb' --list-hosts</span>\n  hosts <span>(</span><span>2</span><span>)</span>:\n    db1.example.com\n    jupiter.lab.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>主机列表一定要用 单引号 ''</p>\n</blockquote>\n<h4 id=\"_2-2-6-正则表达式匹配\"> 2.2.6 正则表达式匹配</h4>\n<p>在开头的地方使用”~”，用来表示这是一个正则表达式:</p>\n<div><pre><code><span># ansible '~(s|db).*example\\.com' --list-hosts</span>\n  hosts <span>(</span><span>8</span><span>)</span>:\n    srv1.example.com\n    srv2.example.com\n    s1.lab.example.com\n    s2.lab.example.com\n    saturn.example.com\n    db1.example.com\n    db2.example.com\n    db3.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h4 id=\"_2-2-7-通过-limit或-l明确指定主机或组\"> 2.2.7 通过<code>--limit</code>或<code>-l</code>明确指定主机或组</h4>\n<p>默认情况下，所有被ansible或ansible-playbook选中的主机都会执行任务，但是可以使用命令行的--limit pattern选项来筛选哪些主机执行任务哪些主机不执行任务。</p>\n<p>这里需注意一点：即使使用了--limit选项，ansible或ansible-playbook命令也总是会解析Inventory中的所有主机，只不过这两个命令可以从解析的inventory结果中选择部分要执行任务的节点(比如通过hosts指令)。</p>\n<p>所以，总结下这里涉及到的解析和筛选节点的过程：</p>\n<div><pre><code>解析inventory --&gt; play的hosts指令 --&gt; limit选项\n</code></pre>\n<div><span>1</span><br></div></div><ol>\n<li>通过<code>--limit</code>在选定的组中明确指定主机：</li>\n</ol>\n<div><pre><code># ansible ungrouped  --limit srv1.example.com --list-hosts\n  hosts (1):\n    srv1.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ol start=\"2\">\n<li>通过<code>--limit</code>参数，还可以指定一个文件，该文件中定义明确指定的主机的列表，定义一个retry_hosts.txt如下：</li>\n</ol>\n<div><pre><code>srv1.example.com\n</code></pre>\n<div><span>1</span><br></div></div><p>再次执行ansible指令如下：</p>\n<div><pre><code><span># ansible ungrouped  --limit @retry_hosts.txt --list-hosts</span>\n  hosts <span>(</span><span>1</span><span>)</span>:\n    srv1.example.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-动态inventory\"> 3 动态Inventory</h2>\n<p>这部分一般会结合 CMDB 资管系统、云计算平台等获取主机信息。由于主机资源一般会动态的进行增减，而这些系统一般会智能更新。我们可以通过这些工具提供的 API 或者接入库查询等方式返回主机列表。</p>\n<p>比如为了结合资产管理系统（CMDB），所以要使用到动态获取 inventory 的方法，这样可以省去配置 ansible 服务端的 hosts，所有的客户端 IP、帐号、密码、端口都可以从 CMDB 中获取到。</p>\n<p>只要你的脚本输出格式是满足要求的 JSON，这样就可以成为一个动态的资产生成器。</p>\n<h3 id=\"_3-1-脚本规约\"> 3.1 脚本规约</h3>\n<p>用于生成 JSON 的脚本对实现语言没有要求，它可以是一个可执行脚本、二进制文件，或者其他任何可以运行文件，但是必须输出为 JSON 格式，同时必须支持两个参数：<code>--list</code> 和 <code>--host</code>。</p>\n<ul>\n<li>\n<p><code>--list</code>：用于返回所有的主机组信息，每个组所包含的主机列表 <code>hosts</code>、所含子组列表 <code>children</code>、主机组变量列表 <code>vars</code> 都应该是字典形式的，<code>_meta</code> 用来存放主机变量。</p>\n</li>\n<li>\n<p><code>--host</code>：返回指定主机的变量列表，或者返回一个空的字典脚本实现</p>\n</li>\n</ul>\n<h3 id=\"_3-2-脚本实现\"> 3.2 脚本实现</h3>\n<p>一个参考实现框架如下：</p>\n<div><pre><code><span>#!/usr/bin/env python3</span>\n<span>#coding:utf8</span>\n<span>import</span> json\n<span>import</span> sys\n \n<span>def</span> <span>all</span><span>(</span><span>)</span><span>:</span>\n    info_dict <span>=</span> <span>{</span>\n    <span>\"all\"</span><span>:</span><span>[</span>\n        <span>\"10.10.0.109\"</span><span>,</span>\n        <span>\"10.10.0.112\"</span><span>]</span>\n    <span>}</span>\n    <span>print</span><span>(</span>json<span>.</span>dumps<span>(</span>info_dict<span>,</span>indent<span>=</span><span>4</span><span>)</span><span>)</span>\n \n<span>def</span> <span>group</span><span>(</span><span>)</span><span>:</span>\n    host1 <span>=</span> <span>[</span><span>'10.10.0.112'</span><span>]</span>\n    host2 <span>=</span> <span>[</span><span>'10.10.0.112'</span><span>,</span><span>'10.10.0.109'</span><span>]</span>\n    group1 <span>=</span> <span>'test1'</span>\n    group2 <span>=</span> <span>'test2'</span>\n    hostdata <span>=</span> <span>{</span>\n        group1<span>:</span><span>{</span><span>\"hosts\"</span><span>:</span>host1<span>}</span><span>,</span>\n        group2<span>:</span><span>{</span><span>\"hosts\"</span><span>:</span>host2<span>}</span>\n    <span>}</span>\n    <span>print</span><span>(</span>json<span>.</span>dumps<span>(</span>hostdata<span>,</span>indent<span>=</span><span>4</span><span>)</span><span>)</span>\n \n<span>def</span> <span>host</span><span>(</span>ip<span>)</span><span>:</span>\n    info_dict <span>=</span> <span>{</span>\n        <span>\"10.10.0.112\"</span><span>:</span> <span>{</span>\n            <span>\"ansible_ssh_host\"</span><span>:</span><span>\"10.10.0.112\"</span><span>,</span>\n            <span>\"ansible_ssh_port\"</span><span>:</span><span>22</span><span>,</span>\n            <span>\"ansible_ssh_user\"</span><span>:</span><span>\"root\"</span><span>,</span>\n            <span>\"ansible_ssh_pass\"</span><span>:</span><span>\"123457\"</span>\n        <span>}</span><span>,</span>\n        <span>\"10.10.0.109\"</span><span>:</span> <span>{</span>\n            <span>\"ansible_ssh_host\"</span><span>:</span><span>\"10.10.0.109\"</span><span>,</span>\n            <span>\"ansible_ssh_port\"</span><span>:</span><span>22</span><span>,</span>\n            <span>\"ansible_ssh_user\"</span><span>:</span><span>\"root\"</span><span>,</span>\n            <span>\"ansible_ssh_pass\"</span><span>:</span><span>\"xxxx\"</span>\n        <span>}</span>\n    <span>}</span>\n    <span>print</span><span>(</span>json<span>.</span>dumps<span>(</span>info_dict<span>,</span>indent<span>=</span><span>4</span><span>)</span><span>)</span>\n \n<span>if</span> <span>len</span><span>(</span>sys<span>.</span>argv<span>)</span> <span>==</span> <span>2</span> <span>and</span> <span>(</span>sys<span>.</span>argv<span>[</span><span>1</span><span>]</span> <span>==</span> <span>'--list'</span><span>)</span><span>:</span>\n    group<span>(</span><span>)</span>\n<span>elif</span> <span>len</span><span>(</span>sys<span>.</span>argv<span>)</span> <span>==</span> <span>3</span> <span>and</span> <span>(</span>sys<span>.</span>argv<span>[</span><span>1</span><span>]</span> <span>==</span> <span>'--host'</span><span>)</span><span>:</span>\n    host<span>(</span>sys<span>.</span>argv<span>[</span><span>2</span><span>]</span><span>)</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>\"Usage: %s --list or --host &lt;hostname>\"</span> <span>%</span> sys<span>.</span>argv<span>[</span><span>0</span><span>]</span><span>)</span>\n    sys<span>.</span>exit<span>(</span><span>1</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><h3 id=\"_3-3-结合cmdb动态获取\"> 3.3 结合CMDB动态获取</h3>\n<p>这个脚本主要是结合底层为<code>openstack</code>的私有云中的mysql实现的</p>\n<div><pre><code><span>#!/usr/bin/env python3</span>\n<span># coding:utf-8</span>\n\n<span>import</span> pymysql\n<span>import</span> json\n<span>import</span> sys\n\nconn <span>=</span> pymysql<span>.</span>connect<span>(</span>\n    host<span>=</span><span>\"192.168.*.*\"</span><span>,</span>\n    user<span>=</span><span>\"root\"</span><span>,</span>\n    password<span>=</span><span>\"****\"</span><span>,</span>\n    database<span>=</span><span>\"***\"</span><span>,</span>\n    charset<span>=</span><span>\"utf8\"</span><span>)</span>\n\n\n<span>def</span> <span>get_result</span><span>(</span>sql<span>)</span><span>:</span>\n    <span>try</span><span>:</span>\n        <span>with</span> conn<span>.</span>cursor<span>(</span><span>)</span> <span>as</span> cursor<span>:</span>\n            cursor<span>.</span>execute<span>(</span>sql<span>)</span>\n            result <span>=</span> cursor<span>.</span>fetchall<span>(</span><span>)</span>\n            <span>return</span> result\n    <span>except</span> Exception <span>as</span> e<span>:</span>\n        <span>raise</span> e\n\n\n<span>def</span> <span>get_all_group</span><span>(</span><span>)</span><span>:</span>\n    sql <span>=</span> <span>\"SELECT instances.user_id FROM nova.instances GROUP BY instances.user_id\"</span>\n    group_list <span>=</span> get_result<span>(</span>sql<span>)</span>\n    <span>return</span> group_list\n\n\n<span>def</span> <span>group_sql</span><span>(</span>group<span>)</span><span>:</span>\n    <span>if</span> group <span>==</span> <span>\"all\"</span><span>:</span>\n        sql <span>=</span> <span>\"\"\"SELECT ipallocations.`ip_address`\n        FROM nova.instances JOIN  nova.`instance_system_metadata`  JOIN neutron.`ports` JOIN neutron.`ipallocations` \n        ON instances.uuid=instance_system_metadata.`instance_uuid` AND  instances.uuid=ports.device_id AND ports.id=ipallocations.port_id \n        WHERE  instances.vm_state = 'active' \n        GROUP BY ipallocations.`ip_address` \n        ORDER BY ipallocations.`ip_address`\"\"\"</span>\n    <span>else</span><span>:</span>\n        sql <span>=</span> <span>\"\"\"SELECT ipallocations.`ip_address`\n        FROM nova.instances JOIN  nova.`instance_system_metadata`  JOIN neutron.`ports` JOIN neutron.`ipallocations` \n        ON instances.uuid=instance_system_metadata.`instance_uuid` AND  instances.uuid=ports.device_id AND ports.id=ipallocations.port_id \n        WHERE instances.user_id = \"{}\"\n        AND instances.vm_state = 'active' \n        GROUP BY ipallocations.`ip_address` \n        ORDER BY ipallocations.`ip_address`\n        \"\"\"</span><span>.</span><span>format</span><span>(</span>group<span>)</span>\n    <span>return</span> sql\n\n\n<span>def</span> <span>group_list</span><span>(</span><span>)</span><span>:</span>\n    big_dict <span>=</span> <span>{</span><span>}</span>\n    groups <span>=</span> get_all_group<span>(</span><span>)</span>\n    <span>for</span> group <span>in</span> groups<span>:</span>\n        group_name <span>=</span> group<span>[</span><span>0</span><span>]</span>\n        sql <span>=</span> group_sql<span>(</span>group_name<span>)</span>\n        result <span>=</span> get_result<span>(</span>sql<span>)</span>\n        host_list <span>=</span> <span>[</span><span>]</span>\n        <span>for</span> host <span>in</span> result<span>:</span>\n            host_list<span>.</span>append<span>(</span>host<span>[</span><span>0</span><span>]</span><span>)</span>\n        <span>if</span> group_name <span>==</span> <span>\"99de4a68d74748eeb17708ae0d17e386\"</span><span>:</span>\n            big_dict<span>[</span><span>\"bes\"</span><span>]</span> <span>=</span> <span>{</span><span>\"hosts\"</span><span>:</span> host_list<span>}</span>\n        <span>elif</span> group_name <span>==</span> <span>\"103e9393fc1d4b22abf7d15651409396\"</span><span>:</span>\n            big_dict<span>[</span><span>\"csp\"</span><span>]</span> <span>=</span> <span>{</span><span>\"hosts\"</span><span>:</span> host_list<span>}</span>\n        <span>elif</span> group_name <span>==</span> <span>\"364e0a4530f64b7b890856abd93426b6\"</span><span>:</span>\n            big_dict<span>[</span><span>\"h5\"</span><span>]</span> <span>=</span> <span>{</span><span>\"hosts\"</span><span>:</span> host_list<span>}</span>\n        <span>else</span><span>:</span>\n            big_dict<span>[</span><span>\"unknown\"</span><span>]</span> <span>=</span> <span>{</span><span>\"hosts\"</span><span>:</span> host_list<span>}</span>\n\n    <span>print</span><span>(</span>json<span>.</span>dumps<span>(</span>big_dict<span>,</span> indent<span>=</span><span>4</span><span>)</span><span>)</span>\n\n\n<span>def</span> <span>host_list</span><span>(</span>hostip<span>)</span><span>:</span>\n    host_dict <span>=</span> <span>{</span><span>}</span>\n    <span># sql = \"\"\"SELECT ip,port,username from nova.instances where ip=\"{}\";\"\"\".format(hostip)</span>\n    <span># result = get_result(sql)</span>\n    <span># for host in result:</span>\n    <span>#     host_ip = host[0]</span>\n    <span>#     ssh_port = host[1]</span>\n    <span>#     ssh_user = host[2]</span>\n    <span>#     host_dict[hostip] = {\"ansible_ssh_host\": host_ip,</span>\n    <span>#                      \"ansible_ssh_port\": ssh_port, \"ansible_ssh_user\": ssh_user}</span>\n    host_dict<span>[</span>hostip<span>]</span> <span>=</span> <span>{</span><span>\"ansible_ssh_host\"</span><span>:</span> hostip<span>,</span>\n                         <span>\"ansible_ssh_port\"</span><span>:</span> <span>22</span><span>,</span> <span>\"ansible_ssh_user\"</span><span>:</span> <span>\"root\"</span><span>}</span>\n    <span>print</span><span>(</span>json<span>.</span>dumps<span>(</span>host_dict<span>,</span> indent<span>=</span><span>4</span><span>)</span><span>)</span>\n\n\n<span>def</span> <span>main</span><span>(</span><span>)</span><span>:</span>\n    <span>if</span> <span>len</span><span>(</span>sys<span>.</span>argv<span>)</span> <span>==</span> <span>2</span> <span>and</span> sys<span>.</span>argv<span>[</span><span>1</span><span>]</span> <span>==</span> <span>\"--list\"</span><span>:</span>\n        group_list<span>(</span><span>)</span>\n    <span>elif</span> <span>len</span><span>(</span>sys<span>.</span>argv<span>)</span> <span>==</span> <span>3</span> <span>and</span> sys<span>.</span>argv<span>[</span><span>1</span><span>]</span> <span>==</span> <span>\"--host\"</span><span>:</span>\n        host_list<span>(</span>sys<span>.</span>argv<span>[</span><span>2</span><span>]</span><span>)</span>\n    <span>else</span><span>:</span>\n        <span>print</span><span>(</span><span>\"Usage: %s --list or --host &lt;hostname>\"</span> <span>%</span> sys<span>.</span>argv<span>[</span><span>0</span><span>]</span><span>)</span>\n        sys<span>.</span>exit<span>(</span><span>1</span><span>)</span>\n\n\n<span>if</span> __name__ <span>==</span> <span>\"__main__\"</span><span>:</span>\n    main<span>(</span><span>)</span>\n    conn<span>.</span>close<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br></div></div><h3 id=\"_3-4-使用\"> 3.4 使用</h3>\n<p>使用方法和静态 inventory 类似：</p>\n<div><pre><code><span># 可以指定组</span>\n$ ansible -i dynamic_investory.py all --list-hosts\n  hosts <span>(</span><span>3</span><span>)</span>:\n    <span>127.0</span>.0.1\n    <span>10.10</span>.0.112\n    <span>10.10</span>.0.109\n\n<span># 可以指定主机</span>\n$ ansible -i dynamic_investory.py <span>127.0</span>.0.1 --list-hosts\n  hosts <span>(</span><span>1</span><span>)</span>:\n    <span>127.0</span>.0.1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"_4-临时添加节点-add-host模块\"> 4 临时添加节点：add_host模块</h2>\n<p>除了静态和动态inventory可以指定远程被控节点的信息，还有个比较特殊的模块add_host，它可以在任务执行时临时添加主机节点。</p>\n<p>add_host用法非常简单，只有两个参数：name和groups，分别定义主机名和所在主机组，其中groups参数可以是一个列表，表示主机可以添加到多个组中。如果还有其它参数，则均被当作变量赋值。</p>\n<div><pre><code>- name: add new host to nginx and apache\n  add_host:\n    name: 192.168.200.34\n    groups:\n      - nginx\n      - apache\n    ansible_port: 22\n    my_var: &quot;hello world&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>add_host模块是一个比较特殊的模块，它在playbook运行时添加主机，有以下几个注意事项：</p>\n<p>(1).新添加的主机在当前play中无效，只在之后的play中有效</p>\n<p>(2).它添加的主机只存在于内存中，Ansible退出之后就消失</p>\n<h2 id=\"_5-group-by运行时临时设置主机组\"> 5 group_by运行时临时设置主机组</h2>\n<p>group_by和add_host功能是类似的，group_by用于临时设置主机组。</p>\n<p>group_by有两个参数：</p>\n<p>(1).key：新设置的分组名</p>\n<p>(2).parents：(可选参数)新增分组的父组</p>\n<p>例如，当前的inventory如下：</p>\n<div><pre><code>[nginx]\n192.168.200.42\n\n[php]\n192.168.200.43\n\n[mysql]\n192.168.200.44\n\n[dev:children]\nnginx\nphp\nmysql\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>其中并没有&quot;CentOS 7&quot;和&quot;CentOS 6&quot;这两个主机组。现在想要在playbook运行的时候去设置这两个主机组。</p>\n<div><pre><code>---\n- name: set a new group\n  hosts: all\n  gather_facts: true\n  tasks:\n    - name: set new group\n      group_by:\n        key: &quot;{{ansible_distribution}}_{{ansible_distribution_major_version}}&quot;\n        parents: &quot;CentOS&quot;\n\n- name: use new group\n  hosts: CentOS\n  gather_facts: false\n  tasks:\n    - name: ping CentOS\n      ping:\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>上面示例中gather_facts设置为true，因为group_by任务中使用了两个需要它收集来的变量：ansible_distribution和ansible_distribution_major_version。</p>\n<p>ansible_distribution变量保存的是系统的发型名称，比如CentOS、RedHat等。ansible_distribution_major_version变量保存的是系统的主版本号，比如CentOS 7.2时返回主版本号7。关于gather_facts，会在稍后的进阶内容中详细介绍。</p>\n<p>所以key参数渲染后的值(也即新增组的组名)应当类似于CentOS_6、CentOS_7，而且它们都是CentOS的子组。</p>\n<blockquote>\n<p>参考链接：</p>\n<p>https://www.jianshu.com/p/71d6700fbe79</p>\n<p>https://blog.csdn.net/qq_23191379/article/details/90416992</p>\n<p>https://blog.51cto.com/cloumn/blog/1542</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210309153531453.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "3.1 Ansible lineinfile模块详解",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/lineinfile/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/lineinfile/",
      "content_html": "<h1 id=\"_3-1-ansible-lineinfile模块详解\"> 3.1 Ansible lineinfile模块详解</h1>\n<h2 id=\"_1-简介\"> 1 简介</h2>\n<p>之所以专门说一说这个模块，是因为lineinfile在实际使用中非常有用。</p>\n<p>lineinfile模块用于在源文件中插入、删除、替换行，和sed命令的功能类似，也支持正则表达式匹配和替换。</p>\n<p>实际上，在大多数时候，我们在linux上的操作，就是针对文件的操作，通过配置管理工具对配置文件作统一的配置修改是一个非常酷的功能。</p>\n<p>下面是官方针对该模块的说明：</p>\n<div><pre><code>lineinfile - Ensure a particular line is in a file, or replace an existing line using a back-referenced regular expression\n</code></pre>\n<div><span>1</span><br></div></div><p>简单讲，这个模块就是针对一个文件中行内容的操作。</p>\n<p>下面我们详细说一说其具体可以做的事情。</p>\n<h2 id=\"_2-修改匹配行\"> 2 修改匹配行</h2>\n<p>下面是一个简单的task示例：</p>\n<div><pre><code><span># 将/etc/selinux/config中匹配到以'SELINUX='开头的行，将其替换为'SELINUX=disabled'</span>\n<span>-</span> <span>name</span><span>:</span> modify selinux to disabled\n  <span>lineinfile</span><span>:</span>\n    <span>path</span><span>:</span> /etc/selinux/config\n    <span>regex</span><span>:</span> <span>'^SELINUX='</span>\n    <span>line</span><span>:</span> <span>'SELINUX=disabled'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"_3-在匹配行前或后添加内容\"> 3 在匹配行前或后添加内容</h2>\n<blockquote>\n<p>insertbefore和insertafter指定的正则表达式如果匹配了多行，则默认选中最后一个匹配行，然后在被选中的行前、行后插入。如果明确要指定选中第一次匹配的行，则指定参数firstmatch=yes：</p>\n</blockquote>\n<p>示例文件如下：</p>\n<div><pre><code># cat /etc/http.conf\n\nListen 127.0.0.1:80\nListen 80\nPort\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_3-1-在匹配行前添加\"> 3.1 在匹配行前添加</h3>\n<p>在http.conf文件的<code>Listen 80</code>前面添加一行<code>Listen 8080</code>，task示例如下：</p>\n<div><pre><code>- name: add line before Listen 80\n  lineinfile:\n    dest: /etc/http.conf\n    insertbefore: &#39;^Listen 80&#39;\n    line: &#39;Listen 8080&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_3-2-在匹配行后添加\"> 3.2 在匹配行后添加</h3>\n<p>在http.conf文件的<code>Port</code>后面添加一行<code>just a test</code>，task示例如下：</p>\n<div><pre><code>- name: add line before Listen 80\n  lineinfile:\n    dest: /etc/http.conf\n    insertafter: &#39;^Port&#39;\n    line: &#39;just a test&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_4-修改文件内容及权限\"> 4 修改文件内容及权限</h2>\n<p>示例文件：</p>\n<div><pre><code><span>#cat /etc/hosts</span>\n\n<span>127.0</span>.0.1       localhost.localdomain localhost ::1       localhost6.localdomain6 localhost6\n<span>10.1</span>.61.130     hub.dz11.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>修改/etc/hosts，将以<code>127.0.0.1</code>开头的行替换为<code>127.0.0.1 localhost</code>，并将/etc/hosts的属主和属组都修改为root，权限改为644，如下：</p>\n<div><pre><code>- name: modify hosts\n  lineinfile:\n    dest: /etc/hosts\n    regex: &#39;^127\\.0\\.0\\.1&#39;\n    line: &#39;127.0.0.1 localhost&#39;\n    owner: root\n    group: root\n    mode: 0644\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"_5-删除行内容\"> 5 删除行内容</h2>\n<p>regexp结合state=absent时，表示删除所有匹配的行。</p>\n<p>示例原文件：</p>\n<div><pre><code><span>#cat /etc/hosts</span>\n\n<span>127.0</span>.0.1       localhost.localdomain localhost ::1       localhost6.localdomain6 localhost6\n<span>10.1</span>.61.130     hub.dz11.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>删除以<code>10.1.61.130</code>开头的行：</p>\n<div><pre><code>- name: delete a line\n  lineinfile:\n    dest: /etc/hosts\n    regex: &#39;^10\\.1\\.61&#39;\n    state: absent\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_6-文件存在则添加一行内容\"> 6 文件存在则添加一行内容</h2>\n<p>往/etc/hosts里添加一行<code>10.1.61.131 test.dz11.com</code>（多次执行，不会重复添加），示例如下：</p>\n<p>如果再次执行，则不会再次追加此行。因为lineinfile模块的state参数默认值为present，它能保证幂等性，当要插入的行已经存在时则不会再插入。</p>\n<div><pre><code><span>-</span> <span>name</span><span>:</span> add a line\n  <span>lineinfile</span><span>:</span>\n    <span>dest</span><span>:</span> /etc/hosts\n    <span>line</span><span>:</span> <span>'10.1.61.131 test.dz11.com'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_7-如果有匹配的行则修改该行-如果不匹配则添加\"> 7 如果有匹配的行则修改该行，如果不匹配则添加</h2>\n<p>示例原文件/tmp/test.txt内容如下：</p>\n<div><pre><code><span># %wheel   ALL=(ALL)   ALL</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>下面的示例task中，匹配以<code>%wheel</code>开头的行，匹配到，则执行替换，未匹配，则添加。因为原文件中，没有以<code>%wheel</code>开头的行，所以会添加一行：</p>\n<div><pre><code><span>-</span> <span>name</span><span>:</span> add or modify a line\n  <span>lineinfile</span><span>:</span> \n    <span>dest</span><span>:</span> /tmp/test.txt\n    <span>regex</span><span>:</span> <span>'^%wheel'</span>\n    <span>line</span><span>:</span> <span>'%wheel  ALL=(ALL)       NOPASSWD: ALL'</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>修改后的文件如下：</p>\n<div><pre><code><span>#cat /tmp/text.txt</span>\n\n<span># %wheel   ALL=(ALL)   ALL</span>\n%wheel  <span>ALL</span><span>=</span><span>(</span>ALL<span>)</span>       NOPASSWD: ALL\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"_8-参数backrefs-backup说明\"> 8 参数backrefs，backup说明</h2>\n<ul>\n<li>backup： 是否备份原文件，默认为no</li>\n<li>backrefs：\n<ul>\n<li>当backrefs为no时，如果regex没有匹配到行，则添加一行，如果Regx匹配到行，则修改该行</li>\n<li>当backrefs为yes时，如果regex没有匹配到行，则保持原文件不变，如果regex匹配到行，则修改该行</li>\n<li>backrefs默认为no，所以上面那个示例中，我们没有配置backrefs，而默认没有匹配，则修改。</li>\n</ul>\n</li>\n</ul>\n<p>下面我们看一看backrefs为yes时匹配到行的示例：</p>\n<p>示例原文件：</p>\n<div><pre><code><span># cat /tmp/testfile</span>\n\n<span># %wheel   ALL=(ALL)   ALL</span>\n%wheel  <span>ALL</span><span>=</span><span>(</span>ALL<span>)</span>       NOPASSWD: ALL\n<span>#?bar</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>task示例：</p>\n<div><pre><code> - name: test backrefs\n  lineinfile:\n      backup: yes\n      state: present\n      dest: /tmp/testfile\n      regexp: &#39;^#\\?bar&#39;\n      backrefs: yes\n      line: &#39;bar&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>修改后的文件：</p>\n<div><pre><code><span># cat /tmp/testfile</span>\n\n<span># %wheel   ALL=(ALL)   ALL</span>\n%wheel  <span>ALL</span><span>=</span><span>(</span>ALL<span>)</span>       NOPASSWD: ALL\nbar\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"_9-使用validate验证文件是否正确修改\"> 9 使用validate验证文件是否正确修改</h2>\n<p>在一些场景下，我们修改完文件后，需要对文件做一下测试，用以检查文件修改之后，是否能正常运行。如http.conf、nginx.conf等，一旦改错，而不加以测试，可能会直接导致http服务挂掉。</p>\n<p>可以使用validate关键字，在修改完成以后，对文件执行检测：</p>\n<div><pre><code>- name: test validate\n  lineinfile:\n      dest: /etc/sudoers\n      state: present\n      regexp: &#39;^%ADMIN ALL=&#39;\n      line: &#39;%ADMIN ALL=(ALL)&#39;\n      validate: &#39;visudo -cf %s&#39;\n  tags:\n    - testsudo\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"_10-regexp和insertxxx结合\"> 10 regexp和insertXXX结合</h2>\n<p>lineinfile最后一个比较常用的功能是regepx结合insertbefore或结合insertafter。这时候的行将根据insertXXX的位置来插入，而regexp参数则充当幂等性判断参数：只有regepx匹配失败时，insertXXX才会插入行。</p>\n<p>例如：</p>\n<div><pre><code>- lineinfile:\npath: &quot;a.txt&quot;\nline: &quot;hello line&quot;\nregexp: &#39;^hello&#39;\ninsertbefore: &#39;^para.* 2&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>这表示将&quot;hello line&quot;插入在paragraph 2行的前面，但如果再次执行，则不会再次插入，因为regexp参数指定的正则表达式已经能够已经存在的&quot;hello line&quot;行。所以，当regepx结合insertXXX使用时，regexp的参数通常都会设置为能够匹配插入之后的行的正则表达式，以便实现幂等性。</p>\n<blockquote>\n<p>参考链接：</p>\n<p>https://www.cnblogs.com/breezey/p/9297252.html</p>\n<p>https://blog.51cto.com/cloumn/blog/1544</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "5.4 使用lookup生成变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/lookup/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/lookup/",
      "content_html": "<h1 id=\"_5-4-使用lookup生成变量\"> 5.4 使用lookup生成变量</h1>\n<h1 id=\"简单说明\"> 简单说明</h1>\n<p>在通常情况下，所有的配置信息都会被作为ansible的变量保存了，而且可以保存在ansible允许定义变量的各种地方，诸如vars区段，<code>vars_files</code>加载的文件中，以及host_vars和group_vars目录中。</p>\n<p>但在有些时候，我们希望从诸如文本文件或者.csv文件中收集数据作为ansible的变量，或者直接获取某些命令的输出作为ansible的变量，甚至从redis或者etcd这样的键值存储中取得相应的值作为ansible的变量。这个时候，我们就需要通过ansible的lookup插件来从这些数据源中读取配置数据，传递给ansbile变量，并在playbook或者模板中使用这些数据。</p>\n<p>lookup()是Ansible的一个插件，可用于从外部读取数据，这里的&quot;外部&quot;含义非常广泛，比如：</p>\n<p>(1).从磁盘文件读取(file插件)</p>\n<p>(2).从redis中读取(redis插件)</p>\n<p>(3).从etcd中读取(etcd插件)</p>\n<p>(4).从命令执行结果读取(pipe插件)</p>\n<p>(5).从Ansible变量中读取(vars插件)</p>\n<p>(6).从Ansible列表中读取(list插件)</p>\n<p>(7).从Ansible字典中读取(dict插件)</p>\n<p>(8)....</p>\n<p>具体可以从哪些&quot;外部&quot;读取以及如何读取，取决于Ansible是否提供了相关的读取插件。官方手册：https://docs.ansible.com/ansible/latest/plugins/lookup.html#plugin-list 中列出了所有支持的插件</p>\n<p><strong>lookup()语法</strong></p>\n<div><pre><code>lookup(&#39;&lt;plugin_name&gt;&#39;, &#39;plugin_argument&#39;)\n</code></pre>\n<div><span>1</span><br></div></div><h1 id=\"_1-file-fileglob\"> 1. file/fileglob</h1>\n<p>使用file lookup可以从文本文件中获取数据，并在这些数据传递给ansible变量，在task或者jinja2模板中进行引用。下面是一个从文本文件中获取ssh公钥并复制到远程主机的示例：</p>\n<div><pre><code>- name: copy authorized_host file\n  template: \n    src: authorized_keys.j2 \n    dest: /home/deploy/.ssh/authrized_keys \n    owner: deploy\n    group: deploy\n    mode: 0600\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>authorized_keys.j2模板文件示例如下：</p>\n<div><pre><code><span>{</span><span>{</span> lookup('file'<span>,</span> '/users/breeze/.ssh/id_rsa.pub')<span>}</span><span>}</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>和file类似，支持通配符的fileglob插件，它使用通配符来通配Ansible本地端的文件名</p>\n<div><pre><code>---\n- name: play1\n  hosts: new\n  gather_facts: false\n  tasks:\n    - name: task1\n  debug:\n    msg: &quot;filenames: {{lookup(&#39;fileglob&#39;,&#39;/etc/*.conf&#39;)}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>需注意的是，fileglob查询的是Ansible端文件，且只能通配文件而不能通配目录，且不会递归通配。如果想要查询目标主机上的文件，可以使用find模块。</p>\n<blockquote>\n<p>如果lookup()查询出来的结果包含多项，则默认以逗号分隔各项的字符串方式返回，如果想要以列表方式返回，则传递一个lookup的参数wantlist=True。例如，fileglob通配出来的文件如果有多个，加上wantlist=True：</p>\n</blockquote>\n<p>在Ansible 2.5中添加了一个新的功能query()或q()，后者是前者的等价缩写形式。query()在写法和功能上和lookup一致，其实它会自动调用lookup插件，并且总是以列表方式返回，而不需要手动加上wantlist=True参数。例如：</p>\n<div><pre><code>- name: task1\n  debug:\n  msg: &quot;{{q(&#39;fileglob&#39;,&#39;/etc/*.conf&#39;)}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h1 id=\"_2-pipe\"> 2. pipe</h1>\n<p>使用pipe lookup可以直接调用外部命令，并将命令执行的结果打印到标准输出，作为ansible变量。下面的例子通过pipe调用date指令拿到一个以时间数字组成的字串</p>\n<div><pre><code>- name: Flamingo | Get release version\n  set_fact:\n    flamingo_release_version: &quot;{{ lookup(&#39;pipe&#39;, &#39;date +%Y%m%d%H%M%SZ&#39;) }}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h1 id=\"_3-env\"> 3. env</h1>\n<p>env lookup实际就是获取在控制主机上的某个环境变量的值。下面是一个读取控制机上<code>$JAVA_HOME</code>变量值的示例：</p>\n<div><pre><code>- name: get JAVA_HOME\n  debug: msg=&quot;{{ lookup(&#39;env&#39;, &#39;JAVA_HOME&#39;)}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h1 id=\"_4-template\"> 4. template</h1>\n<p>template lookup可以指定一个jinja2模板，然后返回这个模板中的变量被替换以后的结果。</p>\n<p>假设我们有一个message.j2模板，内容如下：</p>\n<div><pre><code>This host runs {{ ansible_distribution }}\n</code></pre>\n<div><span>1</span><br></div></div><p>定义一个如下的task：</p>\n<div><pre><code>- name: print message from template\n  debug: msg=&quot;{{ lookup(&#39;template&#39;, &#39;message.j2&#39;)}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出的msg的结果如下：</p>\n<div><pre><code>This host runs CentOS\n</code></pre>\n<div><span>1</span><br></div></div><h1 id=\"_5-csvfile\"> 5. csvfile</h1>\n<p>csvfile可以从.csv文件中读取一个条目。假设我们有如下示例的名为users.csv的文件：</p>\n<div><pre><code>username,email\nlorin,lorin@test.com\njohn,john@example.com\nsue,sue@exmaple.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>下面是一个使用csvfile lookkup提取sue的电子邮件地址的task示例：</p>\n<div><pre><code><span>-</span> <span>name</span><span>:</span> get sue's email\n  <span>debug</span><span>:</span> msg=\"<span>{</span><span>{</span> lookup('csvfile'<span>,</span>'sue file=users.csv delimiter=<span>,</span> col=1')<span>}</span><span>}</span>\"\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>可以看到，一共向插件传递了四个参数：sue, file=users.csv, delimiter=,以及col=1。说明如下：</p>\n<ul>\n<li>第一个参数指定一个名字，该名字必须出现在其所在行的第0列，需要说明的是，如果指定的第一个参数名字在文件中出现多次，则匹配第一次出现的结果</li>\n<li>第二个参数指定csv文件的文件名</li>\n<li>第三个参数指定csv文件的中条目的分隔符，</li>\n<li>第四个参数指定要取得哪一列的值，这一列正是第一个参数所在行的那一列的值</li>\n</ul>\n<p>如果我们想要查找的用户存储在名为username的变量中，则可以使用&quot;+&quot;符号来连接username字串和其他的参数字串，来构建完整的参数字符串：</p>\n<div><pre><code>lookup(&#39;csvfile&#39;, username+&#39;file=users.csv&#39; delimiter=, col=1)\n</code></pre>\n<div><span>1</span><br></div></div><h1 id=\"_6-redis-kv\"> 6. redis_kv</h1>\n<p><code>redis_kv lookup</code>可以直接从redis存储中来获取一个key的value，key必须是一个字符串，如同Redis GET指令一样。需要注意的是，要使用<code>redis_kv lookup</code>，需要在主控端安装python的redis客户端，在centos上，软件包为python-redis。</p>\n<p>下面是一个在playbook中调用redis lookup的task，从本地的redis中取中一个key为weather的值：</p>\n<div><pre><code>- name: lookup value in redis\n  debug: msg=&quot;{{ lookup(&#39;redis_kv&#39;, &#39;redis://localhost:6379,weather&#39;)}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>其中URL部分如果不指定，该模块会默认连接到<code>redis://localhost:6379</code>，所以实际上在上面的实例中，调用可以直接写成如下：</p>\n<div><pre><code>{{ lookup(&#39;redis_kv&#39;, &#39;weather&#39;)}}\n</code></pre>\n<div><span>1</span><br></div></div><h1 id=\"_7-etcd\"> 7. etcd</h1>\n<p>etcd是一个分布式的key-value存储，通常被用于保存配置信息或者被用于实现服务发现。可以使用etcd lookup来从etcd中获取指定key的value。</p>\n<p>我们通过如下方法往一个etcd中写入一个key：</p>\n<div><pre><code>curl -L http://127.0.0.1:4001/v2/keys/weather -XPUT -d value=sunny\n</code></pre>\n<div><span>1</span><br></div></div><p>定义一个调用etcd插件的task：</p>\n<div><pre><code>- name: look up value in etcd\n  debug: msg=&quot;{{ lookup(&#39;etcd&#39;,&#39;weather&#39;)}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>默认情况下，etcd lookup会在http://127.0.0.1:4001上查找etcd服务器。但我们在执行playbook之前可以通过设置<code>ANSIBLE_ETCD_URL</code>环境变量来修改这个设置。</p>\n<h1 id=\"_8-password\"> 8. password</h1>\n<p>password lookup会随机生成一个密码，并将这个密码写入到参数指定的文件中。如下示例，创建一个名为bob的mysql用户，并随机生成该用户的密码，并将密码写入到主控端的bob-password.txt中：</p>\n<div><pre><code>- name: create deploy mysql user\n  mysql_user: name=bob password={{ lookup(&#39;password&#39;, &#39;bob-password,txt&#39;)}} priv=*.*:ALL state=present\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h1 id=\"_9-dnstxt\"> 9. dnstxt</h1>\n<p>dnstxt lookup用于获取指定域名的TXT记录。需要在主控端安装python-dns。</p>\n<p>使用方法如下：</p>\n<div><pre><code>- name: lookup TXT record\n  debug: msg=&quot;{{ lookup(&#39;dnstxt&#39;, &quot;aliyun.com&quot;) }}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>如果某一个主机有多个相关联的TXT记录，那么模块会把他们连在一起，并且每次调用时的连接顺序可能不同</p>\n<blockquote>\n<p>参考链接：</p>\n<p>https://www.cnblogs.com/breezey/p/9275799.html</p>\n<p>https://blog.51cto.com/cloumn/blog/1544</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "5.3 魔法变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/magic/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/magic/",
      "content_html": "<h1 id=\"_5-3-魔法变量\"> 5.3 魔法变量</h1>\n<p><strong>魔法变量</strong></p>\n<p>Ansible默认会提供一些内置的变量以实现一些特定的功能，我们称之为魔法变量。下面列举一些常用的魔法变量。</p>\n<p>https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html#magic</p>\n<h2 id=\"_1-hostvars\"> 1. hostvars</h2>\n<p>hostvars变量用于保存所有和主机相关的变量，通常包括inventory中定义的主机变量和gather_facts收集到的主机信息变量。hostvars是一个key/value格式的字典(即hash结构、对象)，key是每个节点的主机名，value是该主机对应的变量数据。</p>\n<p>获取某台指定的主机的相关变量。如果有一台web服务器的配置文件中需要指定db服务器的ip地址，我们假定这台db服务器的hostname为db.exmaple.com,ip地址绑定在eth0网卡上，我们可以通过如下方法在web服务器上调用db服务器的ip地址：</p>\n<div><pre><code>{{ hostvars[&#39;db.example.com&#39;].ansible_eth0.ipv4.address }}\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>需要注意的是db.example.com不能使用ip地址来取代，只能使用主机名或别名。</p>\n</blockquote>\n<h2 id=\"_2-inventory-hostname\"> 2. inventory_hostname</h2>\n<p>inventory_hostname是Ansible所识别的当前正在运行task的主机的主机名。如果在inventory里定义过别名，那么这里就是那个别名，如果inventory包含如下一行：</p>\n<div><pre><code>server1 ansible_ssh_host=192.168.1.1\n</code></pre>\n<div><span>1</span><br></div></div><p>则<code>inventory_hostname</code>即为<code>server1</code>\n利用<code>hostvars</code>和<code>inventory_hostname</code>变量，可以输出与当前主机相关联的所有变量：</p>\n<div><pre><code>- debug: var=hostvars[inventory_hostname]\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>与inventory_hostname相近的还有一个inventory_hostname_short，如果一台主机的inventory_hostname为server1.exmaple.com，则inventory_hostname_short的值为server1</p>\n</blockquote>\n<h2 id=\"_3-group-names\"> 3. group_names</h2>\n<p>用于标识当前正在执行task的目标主机位于的主机组。假如我们有三台主机，用来配置成一主二从的mysql服务器。inventory配置如下：</p>\n<div><pre><code>[mdb]\ndb1\n[sdb]\ndb2\ndb3\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>mysql配置文件my.conf.j2示例如下：</p>\n<div><pre><code><span>#我们知道db1在mdb组，当db1与当前正在执行任务的主机位于同一组时，我们认为当前主机即在mdb组，所以对当前主机应用mysql master的配置</span>\n<span>{</span>% if 'db1' in group_names %<span>}</span>\n<span>[</span>mysqld<span>]</span>\nserver<span>-</span>id=1\nlog<span>-</span>bin=mysql<span>-</span>bin\nlog<span>-</span>bin<span>-</span>index=mysql<span>-</span>bin.index\nsync<span>-</span>binlog=1\ninnodb_flush_log_at_trx_commit=1\n<span>#当db1与当前主机不在同一组时，则认为当前主机不在mdb组，即应用my slave的配置</span>\n<span>{</span>% else %<span>}</span>\n<span>[</span>mysqld<span>]</span>\nserver<span>-</span>id=2\nrelay<span>-</span>log=relay<span>-</span>log\nrelay<span>-</span>log<span>-</span>index=relay<span>-</span>log.index\nread<span>-</span>only = yes\nsync_master_info = 1\nsync_relay_log = 1\nsync_relay_log_info = 1\nrelay_log_recovery = 1\nskip_slave_start    \n<span>{</span>% endif %<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>我们执行如下task:</p>\n<div><pre><code>- name: copy config file to mysql master\n  template: src=my.conf.j2 dest=/etc/my.cnf\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_4-groups\"> 4. groups</h2>\n<p>groups是inventory中所有主机组的列表，可用于枚举主机组中的所有主机。</p>\n<p>假如我们有一个inventory文件定义如下：</p>\n<div><pre><code>[web]\nserver1\nserver2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在配置一台HAproxy的负载均衡器时，我们的配置文件肯定需要web主机组的所有服务器的IP，配置文件包含如下片段：</p>\n<div><pre><code>backend web-backend\n{% for host in groups.web%}\n    server {{host.inventory_hostname}} {{ host.ansible_default_ipv4.address }}:80\n{% endfor %}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>最终生成的文件如下：</p>\n<div><pre><code>backend web-backend\n    server server1 192.168.1.1:80\n    server server2 192.168.1.2:80\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>再给一个例子，在所有的dbservers组的服务器上创建一个数据库用户kate：</p>\n<div><pre><code>- name: Create a user for all db servers\n  mysql_user: name=kate password=test host={{ hostvars.[item].ansible_eth0.ipv4.address }} state=present\n  with_items: groups[&#39;dbservers&#39;] \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_5-ansible-play-batch\"> 5. ansible_play_batch</h2>\n<p>play_hosts 已废弃，等价于ansible_play_batch</p>\n<p>ansible_play_hosts等价于ansible_play_batch</p>\n<p>它存储当前play所涉及的所有主机列表，但连接失败或执行任务失败的节点不会留在此变量中。</p>\n<h2 id=\"_6-inventory-dir\"> 6. inventory_dir</h2>\n<p>主机清单所在目录</p>\n<h2 id=\"_7-inventory-file\"> 7. inventory_file</h2>\n<p>主机清单文件</p>\n<blockquote>\n<p>参考链接：</p>\n<p>https://www.cnblogs.com/breezey/p/9275763.html</p>\n<p>https://blog.51cto.com/cloumn/blog/1544</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "6 Ansible使用优化",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/optimize/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/optimize/",
      "content_html": "<h1 id=\"_6-ansible使用优化\"> 6 Ansible使用优化</h1>\n<h2 id=\"_1-加大forks的值\"> 1 加大forks的值</h2>\n<p>默认forks=5，即最多5个Ansible工作进程。即便是只有6个目标节点，对于&quot;效率&quot;常挂嘴边的21世纪IT人来说，这么一点数量的工作进程，也显然是杯水车薪。</p>\n<p>对于Ansible来说，它的的大多数任务都是分派给目标节点去执行的，所以控制端通常比较闲暇。换句话说，控制端在浪费宝贵的资源。因此，如果没有其它资源的瓶颈(比如网络带宽瓶颈、磁盘IO瓶颈)，Ansible控制端可以尽可能开大马力，让足够多的节点同时开始运行。</p>\n<p>加大forks的值，甚至尽情地加大forks的值，可以很大幅度地提升整个任务的执行效率。不用担心太多Ansible工作进程数量会影响Ansible控制端的性能，Ansible工作进程那缓慢的工作量对OS来说实在太轻松了(除非是一些会占用大量资源的特殊任务)。我想，对于一般任务来说，唯一需要考虑的是网络带宽是否足够支撑足够数量目标节点，偶尔可能还需要考虑磁盘瓶颈。</p>\n<h2 id=\"_2-修改执行策略\"> 2 修改执行策略</h2>\n<p>默认情况下Ansible会让所有节点(或者serial指定的数量)执行完同一个任务后才让它们进入下一个任务，这体现了各节点的公平性和实时性：每个节点都能尽早执行到任务。这其实和操作系统的进程调度是类似的概念，只不过相对于操作系统的调度系统来说，Ansible的调度策略实在是太简陋了。</p>\n<p>假设forks设置的比较大，可以一次性让足够多的节点并发执行任务，那么同时设置任务的执行策略为strategy=free便能让这些执行任务的节点彻底放飞自我。只是剩余的一部分节点可能会比较悲剧，它们处于调度不公平的一方。但是从整体来说，先让大部分节点快速完成任务是值得的。</p>\n<p>但是要注意，有些场景下要小心使用free策略，特别是节点依赖时。比如，某些节点运行服务A，另一些节点运行服务B，而服务B是依赖于服务A的，那么必须不能让运行B服务的节点先执行，对于有节点依赖关系的任务，为了健壮性，一般会定义好等待条件，但是出现等待有可能就意味着浪费。</p>\n<h2 id=\"_3-使ansible异步执行任务\"> 3 使Ansible异步执行任务</h2>\n<p>默认情况下，Ansible按照同步执行的方式执行每个任务。即对每个任务来说，都需要等待目标节点执行完该任务后回馈给Ansible端的报告，然后Ansible才认为该节点上的该任务已经执行完成，才会考虑下一步骤，比如free策略下该节点继续执行下一个任务，或者等待其它节点完成该任务，等等。</p>\n<h3 id=\"_3-1-async和poll指令\"> 3.1 async和poll指令</h3>\n<p>Ansible允许在task级别(且只支持task级别)指定该task是否以异步模式(即放入后台)执行，即将该异步任务放入后台。例如：</p>\n<div><pre><code>- name: it is an async task\n  copy:\n    src:\n    dest:\n  async: 200\n  poll: 2\n- name: a sync task\n  copy:\n    src:\n    dest:\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>其中async指令表示该任务将以异步的模式执行。async指令的值200表示，如果该后台任务200秒还未完成，则认为该任务失败。poll指令表示该任务丢入后台后，Ansible每隔多久去检查一次异步任务是否已成功、是否报错等，只有检查到已完成后才认为该异步任务执行完成，才会进入下一个任务。</p>\n<p>如此看来，似乎这个异步执行模式并非想象中那样真正的异步：将一个任务放入后台执行，立即进入下一个任务。而且这里的异步似乎会减慢任务的执行流程。比如后台任务在第3秒完成，也必须等到第4秒检查的时候才认为执行完成。</p>\n<p>如果poll指令的值大于0，这确实不是真正的异步，每个工作进程必须等待放入后台的任务执行完成才会进入下一个任务，换句话说，尽管使用了async异步指令，也仍然会阻塞在该异步任务上。这会减慢任务的执行速度，但此时执行该异步任务的Ansible工作进程会放弃CPU，使得CPU可以执行其它进程(对于Ansible控制节点来说，这算哪门子优点？)。</p>\n<p>但如果poll指令的值为0，将会以真正的异步模式执行任务，表示Ansible工作进程不检查后台任务的执行状况，而是直接执行下一个任务。</p>\n<p>不管poll指令的值是否大于0，只要使用了异步，那么强烈建议将forks指令的值设置的足够大。比如能够一次性让所有节点都开始异步执行某任务，这样的话，无论poll的值是否大于0，都能提升效率。</p>\n<p>此外，也可以在ansible命令中使用-B N选项指定async功能，N为超时时长，-P N选项指定poll功能，N为检查后台任务状况的时间间隔。</p>\n<p>例如：</p>\n<div><pre><code>ansible inventory_file -B200 -P 0 -m yum -a &#39;name=dos2unix&#39; -o -f 20\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_3-2-等待异步任务\"> 3.2 等待异步任务</h3>\n<p>略，后续补充</p>\n<h3 id=\"_3-3-何时使用异步任务\"> 3.3 何时使用异步任务</h3>\n<p>有时候合理应用异步任务能大幅提升Ansible的执行效率，但也并非所有场景都能够使用异步任务。</p>\n<p>总结来说，以下一些场景可能使用到Ansible的异步特性：</p>\n<ul>\n<li>某个task需要运行很长的时间，这个task很可能会达到ssh连接的timeout</li>\n<li>没有任务是需要等待它才能完成的，即没有任务依赖此任务是否完成的状态</li>\n<li>需要尽快返回当前shell执行其它命令，此时应将所有异步任务的poll设置为0，否则仍然会阻塞在异步任务上</li>\n</ul>\n<p>不适合使用异步特性的场景：</p>\n<ul>\n<li>需要执行完该任务后才能继续另外某个任务</li>\n<li>申请排它锁的任务</li>\n<li>从上到下几乎全是非常短的任务，异步与否影响不大，甚至可能会因为poll非0而降低效率</li>\n</ul>\n<h2 id=\"_4-controlpresist-持久化socket\"> 4 controlpresist 持久化socket</h2>\n<p><strong>controlpresist 持久化socket，一次验证，多次通信,被控主机的ssh版本需要时5.6以上</strong></p>\n<p>安装在ansible被管理主机上</p>\n<div><pre><code># cat ~/.ssh/config\nHost * \n  Compression yes \n  ServerAliveInterval 60 \n  ServerAliveCountMax 5\n  ControlMaster auto\n  ControlPath ~/.ssh/sockets/%r@%h-%p\n  ControlPersist 4h\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>\n<p>个人感觉效果不明显，不如下面ansible设置开启ssh长连接</p>\n</blockquote>\n<h2 id=\"_5-开启ssh长连接\"> 5 开启SSH长连接</h2>\n<p>开启ssh长连接为5天 ，要求ssh为5.6版本，查看版本ssh -v</p>\n<div><pre><code># cat /etc/ansible/ansible.cfg\nssh_args = -C -o ControlMaster=auto -o ControlPersist=5d \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>设置之后，连接信息会被保留在~.ansible/cp下, netstat -nltpa | grep ESTABLISH | grep ssh 会看到长连接存在</p>\n<h2 id=\"_6-关闭gather-facts\"> 6 关闭gather_facts</h2>\n<p>关闭获取被控主机信息：在playbook中关闭即可，在大量的主机下，其效果明显</p>\n<div><pre><code>hosts: all\ngather_facts: no\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"_7-开启pipeling\"> 7 开启pipeling</h2>\n<p>在不使用sudo的情况下开启pipeling，减少ansible没有传输时的连接数</p>\n<div><pre><code>修改ansible.cfg中pipelining=False改为True\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_8-shell层次上的优化-将任务分开执行\"> 8 Shell层次上的优化：将任务分开执行</h2>\n<p>在LNMP的示例中，分别为nginx和php和MySQL都单独定义了自己的Role，它们分别在三批节点上执行。为了统筹这些Role，一般会定义一个汇聚了所有的Role的playbook文件，称为入口playbook，比如称为main.yml或site.yml。</p>\n<p>但是，把这些Role聚集到单个playbook文件中后就必然会产生前后顺序关系。比如执行nginx Role的时候，PHP Role和MySQL Role对应的节点都在空闲。这是一种很低效的执行方式。</p>\n<p>因此，可以为每个Role单独定义一个入口playbook文件，比如分别称之为nginx.yml、php.yml和mysql.yml，然后在Shell中使用多个ansible-playbook命令去分别执行这些入口文件。</p>\n<p>这样一来，分别执行这三个Role的三批节点就可以同时开始执行任务了。</p>\n<h2 id=\"_9-第三方策略插件-mitogen-for-ansible\"> 9 第三方策略插件：Mitogen for Ansible</h2>\n<p>略，后续补充</p>\n<h2 id=\"_10-优化常规配置\"> 10 优化常规配置</h2>\n<div><pre><code>inventory      = /etc/ansible/hosts.yml   # 指定主机列表文件\nroles_path    = /etc/ansible/roles # 指定roles下载位置\nhost_key_checking = False #关闭密码检查\nremote_user = ane #指定连接到的ssh用户\ndeprecation_warnings = False #关闭一些告警\nretry_files_enabled = False #关闭book产生的retry文件\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"_11-其他优化项\"> 11 其他优化项</h2>\n<ol>\n<li>\n<p>目录结构</p>\n<p>如果只是一个简单的独立任务，使用playbook文件即可,方便我们在其他地方引用. 复杂建议采用role形式管理.</p>\n</li>\n<li>\n<p>定义多环境</p>\n<p>通过Inventory 方式去区分多环境下的主机或者主机组信息. 生成多个主机文件.\n不同环境需要调用不同的playbook 或者task ，可以通过when 方式去判断当前的主机信息存在哪个环境中，然后进行引用.</p>\n</li>\n<li>\n<p>检测\nansible-playbook 命令的–syntax-check 参数即可</p>\n</li>\n<li>\n<p>灰度发布</p>\n<p>挑选一台机器进行测试，只有进行测试之后我们才知道整个配置流程是否达到我们想要结果.\n进行预运行时，我们只需要把一个或者多个task 使用delegate_to参数指定到一台设备上进行测试. 如果测试通过后，再进行接下来的工作.</p>\n</li>\n<li>\n<p>统一管理</p>\n<p>纳入git仓库管理</p>\n</li>\n<li>\n<p><strong>Facts缓存优化</strong>，可以加入redis缓存（但会有一些问题，比如创建带有时间的文件夹）</p>\n</li>\n</ol>\n<p>参考链接：</p>\n<blockquote>\n<p>https://blog.51cto.com/cloumn/blog/1544</p>\n<p>https://blog.csdn.net/Jack_Yangyj/article/details/86503591</p>\n<p>https://blog.csdn.net/goodlife111/article/details/94440672</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "4.2 Playbook循环语句",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/playbook-for/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/playbook-for/",
      "content_html": "<h1 id=\"_4-2-playbook循环语句\"> 4.2 Playbook循环语句</h1>\n<h2 id=\"_1-简介\"> 1 简介</h2>\n<p>我们在编写playbook的时候，不可避免的要执行一些重复性操作，比如指安装软件包，批量创建用户，操作某个目录下的所有文件等。正如我们所说，ansible一门简单的自动化语言，所以流程控制、循环语句这些编程语言的基本元素它同样都具备。</p>\n<p>loop循环，它是在Ansible 2.5版本中新添加的循环结构，等价于with_list。大多数时候，with_xxx的循环都可以通过一定的手段转换成loop循环，所以从Ansible 2.5版本之后，原来经常使用的with_items循环都可以尝试转换成loop。</p>\n<p>下面我们简单的说一说Playbook中循环语句。</p>\n<h2 id=\"_2-loop关键字说明\"> 2 loop关键字说明</h2>\n<p>在playbook中使用循环，直接使用loop关键字即可。</p>\n<p>如下示例，启动httpd和postfilx服务：</p>\n<div><pre><code>tasks:\n  - name: postfix and httpd are running\n    service:\n      name: &quot;{{ item }}&quot;\n      state: started\n    loop:\n      - postfix\n      - httpd\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>也可以将loop循环的列表提前赋值给一个变量，然后在循环语句中调用：</p>\n<div><pre><code>#cat test_services.yml\ntest_services:\n  - postfix\n  - httpd\n\n# cat install_pkgs.yml \n- name: start services\n  hosts: test\n  vars_files:\n    - test_services.yml\n  tasks:\n    - name: postfix and httpd are running\n      service:\n        name: &quot;{{ item }}&quot;\n        state: started\n      loop: &quot;{{ test_services }}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>下面是一个循环更复杂类型数据的示例：</p>\n<div><pre><code># cat test_loop.yml \n- name: test loop\n  hosts: test\n  tasks:\n  - name: add www group\n    group: \n      name: www\n  - name: add several users\n    user: \n      name: &quot;{{ item.name }}&quot;\n      state: present \n      groups: &quot;{{ item.groups }}&quot;\n    loop:\n      - { name: &#39;testuser1&#39;, groups: &#39;wheel&#39; }\n      - { name: &#39;testuser2&#39;, groups: &#39;www&#39; }\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"_3-循环的控制-loop-control\"> 3 循环的控制：loop_control</h2>\n<p>后续补充</p>\n<h2 id=\"_3-在循环语句中注册变量\"> 3 在循环语句中注册变量</h2>\n<p>下面是一个register的变量在循环中使用的例子：</p>\n<div><pre><code># cat register_loop.yml \n- name: registered variable usage as a loop list\n  hosts: test\n  tasks:\n      - name: ensure /mnt/bkspool exists\n        file:\n          path: /mnt/bkspool\n          state: directory\n      - name: retrieve the list of home directories\n        command: ls /home\n        register: home_dirs\n      - name: Show home_dirs results\n        debug:\n          var: home_dirs.stdout_lines\n      - name: add home dirs to the backup spooler\n        file: \n          path: /mnt/bkspool/{{ item }}\n          src: /home/{{ item }}\n          state: link\n          force: yes\n        loop: &quot;{{ home_dirs.stdout_lines }}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>在循环语句中注册变量：</p>\n<div><pre><code>- name: Loop Register test\n  gather_facts: no\n  hosts: test\n  tasks:\n    - name: Looping Echo Task\n      shell: &quot;echo this is my item: {{ item }}&quot;\n      loop:\n        - one\n        - two\n      register: echo_results\n    - name: Show echo_results variable\n      debug:\n        var: echo_results\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>执行语句，可以看到变量的返回结果为一个字典列表：</p>\n<div><pre><code>ok: [10.1.61.187] =&gt; {\n    &quot;echo_results&quot;: {\n        &quot;changed&quot;: true,\n        &quot;msg&quot;: &quot;All items completed&quot;,\n        &quot;results&quot;: [\n            {\n                &quot;ansible_loop_var&quot;: &quot;item&quot;,\n                &quot;changed&quot;: true,\n                &quot;cmd&quot;: &quot;echo this is my item: one&quot;,\n                &quot;delta&quot;: &quot;0:00:00.004905&quot;,\n                &quot;end&quot;: &quot;2019-06-10 00:23:51.814151&quot;,\n                &quot;failed&quot;: false,\n                &quot;invocation&quot;: {\n                    &quot;module_args&quot;: {\n                        &quot;_raw_params&quot;: &quot;echo this is my item: one&quot;,\n                        &quot;_uses_shell&quot;: true,\n                        &quot;argv&quot;: null,\n                        &quot;chdir&quot;: null,\n                        &quot;creates&quot;: null,\n                        &quot;executable&quot;: null,\n                        &quot;removes&quot;: null,\n                        &quot;stdin&quot;: null,\n                        &quot;stdin_add_newline&quot;: true,\n                        &quot;strip_empty_ends&quot;: true,\n                        &quot;warn&quot;: true\n                    }\n                },\n                &quot;item&quot;: &quot;one&quot;,\n                &quot;rc&quot;: 0,\n                &quot;start&quot;: &quot;2019-06-10 00:23:51.809246&quot;,\n                &quot;stderr&quot;: &quot;&quot;,\n                &quot;stderr_lines&quot;: [],\n                &quot;stdout&quot;: &quot;this is my item: one&quot;,\n                &quot;stdout_lines&quot;: [\n                    &quot;this is my item: one&quot;\n                ]\n            },\n            {\n                &quot;ansible_loop_var&quot;: &quot;item&quot;,\n                &quot;changed&quot;: true,\n                &quot;cmd&quot;: &quot;echo this is my item: two&quot;,\n                &quot;delta&quot;: &quot;0:00:00.004736&quot;,\n                &quot;end&quot;: &quot;2019-06-10 00:23:52.008981&quot;,\n                &quot;failed&quot;: false,\n                &quot;invocation&quot;: {\n                    &quot;module_args&quot;: {\n                        &quot;_raw_params&quot;: &quot;echo this is my item: two&quot;,\n                        &quot;_uses_shell&quot;: true,\n                        &quot;argv&quot;: null,\n                        &quot;chdir&quot;: null,\n                        &quot;creates&quot;: null,\n                        &quot;executable&quot;: null,\n                        &quot;removes&quot;: null,\n                        &quot;stdin&quot;: null,\n                        &quot;stdin_add_newline&quot;: true,\n                        &quot;strip_empty_ends&quot;: true,\n                        &quot;warn&quot;: true\n                    }\n                },\n                &quot;item&quot;: &quot;two&quot;,\n                &quot;rc&quot;: 0,\n                &quot;start&quot;: &quot;2019-06-10 00:23:52.004245&quot;,\n                &quot;stderr&quot;: &quot;&quot;,\n                &quot;stderr_lines&quot;: [],\n                &quot;stdout&quot;: &quot;this is my item: two&quot;,\n                &quot;stdout_lines&quot;: [\n                    &quot;this is my item: two&quot;\n                ]\n            }\n        ]\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h2 id=\"_4-旧循环语句\"> 4 旧循环语句</h2>\n<p>在Ansible 2.5以前，playbook通过不同的循环语句以实现不同的循环，这些语句使用<code>with_</code>作为前缀。这些语法目前仍然兼容，但在未来的某个时间点，会逐步废弃。</p>\n<table>\n<thead>\n<tr>\n<th>循环语句关键字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>with_items</td>\n<td>简单的列表循环</td>\n</tr>\n<tr>\n<td>with_nested</td>\n<td>嵌套循环</td>\n</tr>\n<tr>\n<td>with_dict</td>\n<td>循环字典</td>\n</tr>\n<tr>\n<td>with_fileglob</td>\n<td>循环指定目录中的所有文件</td>\n</tr>\n<tr>\n<td>with_lines</td>\n<td>循环一个文件中的所有行</td>\n</tr>\n<tr>\n<td>with_sequence</td>\n<td>生成一个自增的整数序列，可以指定起始值和结束值以及步长。参数以key=value的形式指定，format指定输出的格式。数字可以是十进制、十六进制、八进制</td>\n</tr>\n<tr>\n<td>with_subelement</td>\n<td>遍历子元素</td>\n</tr>\n<tr>\n<td>with_together</td>\n<td>遍历数据并行集合</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_4-1-with-items\"> 4.1 with_items</h3>\n<div><pre><code>- hosts: test\n  vars:\n    data:\n      - user0\n      - user1\n      - user2\n  tasks:\n    - name: &quot;with_items&quot;\n      debug:\n        msg: &quot;{{ item }}&quot;\n      with_items: &quot;{{ data }}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"_4-2-with-nested\"> 4.2 with_nested</h3>\n<div><pre><code>tasks: \n  - name: debug loops\n    debug: msg=&quot;name is {{ item[0] }}  vaule is {{ item[1] }} num is {{ item[2] }}&quot;\n    with_nested:\n      - [&#39;alice&#39;,&#39;bob&#39;]\n      - [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]\n      - [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>item[0]是循环的第一个列表的值['alice','bob']。item[1]是第二个列表的值；item[2]则是第三个列表的值，以上的执行输出如下：</p>\n<div><pre><code># ansible-playbook with_nested_ex.yml \n\nPLAY [with_nested test] ******************************************************************************************\n\nTASK [Gathering Facts] *******************************************************************************************\nok: [10.1.61.187]\n\nTASK [debug loops] ***********************************************************************************************\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;a&#39;, &#39;1&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is a num is 1&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;a&#39;, &#39;2&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is a num is 2&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;a&#39;, &#39;3&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is a num is 3&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;b&#39;, &#39;1&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is b num is 1&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;b&#39;, &#39;2&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is b num is 2&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;b&#39;, &#39;3&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is b num is 3&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;c&#39;, &#39;1&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is c num is 1&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;c&#39;, &#39;2&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is c num is 2&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;alice&#39;, &#39;c&#39;, &#39;3&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is alice  vaule is c num is 3&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;a&#39;, &#39;1&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is a num is 1&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;a&#39;, &#39;2&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is a num is 2&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;a&#39;, &#39;3&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is a num is 3&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;b&#39;, &#39;1&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is b num is 1&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;b&#39;, &#39;2&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is b num is 2&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;b&#39;, &#39;3&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is b num is 3&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;c&#39;, &#39;1&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is c num is 1&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;c&#39;, &#39;2&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is c num is 2&quot;\n}\nok: [10.1.61.187] =&gt; (item=[&#39;bob&#39;, &#39;c&#39;, &#39;3&#39;]) =&gt; {\n    &quot;msg&quot;: &quot;name is bob  vaule is c num is 3&quot;\n}\n\nPLAY RECAP *******************************************************************************************************\n10.1.61.187 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br></div></div><h3 id=\"_4-3-with-dict\"> 4.3 with_dict</h3>\n<div><pre><code><span># 假如有如下变量内容：</span>\n<span>users</span><span>:</span>\n  <span>alice</span><span>:</span>\n    <span>name</span><span>:</span> Alice Appleworth\n    <span>telephone</span><span>:</span> 123<span>-</span>456<span>-</span><span>7890</span>\n  <span>bob</span><span>:</span>\n    <span>name</span><span>:</span> Bob Bananarama\n    <span>telephone</span><span>:</span> 987<span>-</span>654<span>-</span><span>3210</span>\n\n<span># 现在需要输出每个用户的用户名和手机号：</span>\n<span>tasks</span><span>:</span>\n  <span>-</span> <span>name</span><span>:</span> Print phone records\n    <span>debug</span><span>:</span> msg=\"User <span>{</span><span>{</span> item.key <span>}</span><span>}</span> is <span>{</span><span>{</span> item.value.name <span>}</span><span>}</span> (<span>{</span><span>{</span> item.value.telephone <span>}</span><span>}</span>)\"\n    <span>with_dict</span><span>:</span> <span>\"{{ users }}\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id=\"_4-4-with-fileglob\"> 4.4 with_fileglob</h3>\n<div><pre><code>- hosts: test\n  tasks:\n    - name: Make key directory     \n      file: \n        path: /root/.sshkeys \n        state: directory \n        mode: 0700 \n        owner: root \n        group: root \n        \n    - name: Upload public keys     \n      copy: \n        src: &quot;{{ item }}&quot;\n        dest: /root/.sshkeys\n        mode: 0600 \n        owner: root \n        group: root  \n      with_fileglob:\n        - /root/.ssh/*.pub \n        \n    - name: Assemble keys into authorized_keys file     \n      assemble: \n        src: /root/.sshkeys \n        dest: /root/.ssh/authorized_keys\n        mode: 0600 \n        owner: root \n        group: root\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h3 id=\"_4-5-with-lines\"> 4.5 with_lines</h3>\n<p>with_lines循环结构会让你在控制主机上执行任意命令，并对命令的输出进行逐行迭代。假设我们有一个 文件test.txt包含如下行：</p>\n<div><pre><code>Breeze Yan\nBernie Yang\njerry Qing\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>我们可以通过如下方法进行逐行输出：</p>\n<div><pre><code>- name: print all names\n  debug: msg=&quot;{{ item }}&quot;\n  with_lines:\n    - cat test.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_4-6-with-subelement\"> 4.6 with_subelement</h3>\n<p>假如现在需要遍历一个用户列表，并创建每个用户，而且还需要为每个用户配置以特定的SSH key登录。变量文件内容如下：</p>\n<div><pre><code>users:\n  - name: alice\n    authorized:\n      - /tmp/alice/onekey.pub\n      - /tmp/alice/twokey.pub\n    mysql:\n        password: mysql-password\n        hosts:\n          - &quot;%&quot;\n          - &quot;127.0.0.1&quot;\n          - &quot;::1&quot;\n          - &quot;localhost&quot;\n        privs:\n          - &quot;*.*:SELECT&quot;\n          - &quot;DB1.*:ALL&quot;\n  - name: bob\n    authorized:\n      - /tmp/bob/id_rsa.pub\n    mysql:\n        password: other-mysql-password\n        hosts:\n          - &quot;db1&quot;\n        privs:\n          - &quot;*.*:SELECT&quot;\n          - &quot;DB2.*:ALL&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>playbook中定义如下：</p>\n<div><pre><code>tasks:\n  - user: name={{ item.name }} state=present generate_ssh_key=yes\n    with_items: &quot;{{users}}&quot;\n  - authorized_key: &quot;user={{ item.0.name }} key=&#39;{{ lookup(&#39;file&#39;, item.1) }}&#39;&quot;\n    with_subelements:\n     - users\n     - authorized\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>也可以遍历嵌套的子列表：</p>\n<div><pre><code>- name: Setup MySQL users\n  mysql_user: name={{ item.0.name }} password={{ item.0.mysql.password }} host={{ item.1 }} priv={{ item.0.mysql.privs | join(&#39;/&#39;) }}\n  with_subelements:\n    - users\n    - mysql.hosts\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_4-7-with-sequence\"> 4.7 with_sequence</h3>\n<div><pre><code>- hosts: all\n  tasks:\n    # create groups\n    - group: name=evens state=present\n    - group: name=odds state=present\n    # create some test users\n    - user: name={{ item }} state=present groups=evens\n      with_sequence: start=0 end=32 format=testuser%02d\n    # create a series of directories with even numbers for some reason\n    - file: dest=/var/stuff/{{ item }} state=directory\n      with_sequence: start=4 end=16 stride=2    # stride用于指定步长\n    # a simpler way to use the sequence plugin\n    # create 4 groups\n    - group: name=group{{ item }} state=present\n      with_sequence: count=4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id=\"_4-8-with-random-choice\"> 4.8 with_random_choice</h3>\n<p>从列表中随机取一个值：</p>\n<div><pre><code>- debug: msg={{ item }}\n  with_random_choice:\n     - &quot;go through the door&quot;\n     - &quot;drink from the goblet&quot;\n     - &quot;press the red button&quot;\n     - &quot;do nothing&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_4-9-do-util循环\"> 4.9 do-Util循环</h3>\n<div><pre><code>- action: shell /usr/bin/foo\n  register: result\n  until: result.stdout.find(&quot;all systems go&quot;) != -1\n  retries: 5\n  delay: 10\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>重复执行shell模块，当shell模块执行的命令输出内容包含&quot;all systems go&quot;的时候停止。重试5次，延迟时间10秒。retries默认值为3，delay默认值为5。任务的返回值为最后一次循环的返回结果。</p>\n<h3 id=\"_4-10-with-together\"> 4.10 with_together</h3>\n<p>示例：</p>\n<div><pre><code>- hosts: webservers\n  remote_user: root\n  vars:\n    alpha: [ &#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]\n    numbers: [ 1,2,3,4 ]\n  tasks:\n    - debug: msg=&quot;{{ item.0 }} and {{ item.1 }}&quot;\n      with_together:\n         - &quot;{{ alpha }}&quot;\n         - &quot;{{ numbers }}&quot;\n# 输出的结果为：\nok: [192.168.1.65] =&gt; (item=[&#39;a&#39;, 1]) =&gt; {\n    &quot;item&quot;: [\n        &quot;a&quot;,\n        1\n    ],\n    &quot;msg&quot;: &quot;a and 1&quot;\n}\nok: [192.168.1.65] =&gt; (item=[&#39;b&#39;, 2]) =&gt; {\n    &quot;item&quot;: [\n        &quot;b&quot;,\n        2\n    ],\n    &quot;msg&quot;: &quot;b and 2&quot;\n}\nok: [192.168.1.65] =&gt; (item=[&#39;c&#39;, 3]) =&gt; {\n    &quot;item&quot;: [\n        &quot;c&quot;,\n        3\n    ],\n    &quot;msg&quot;: &quot;c and 3&quot;\n}\nok: [192.168.1.65] =&gt; (item=[&#39;d&#39;, 4]) =&gt; {\n    &quot;item&quot;: [\n        &quot;d&quot;,\n        4\n    ],\n    &quot;msg&quot;: &quot;d and 4&quot;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><blockquote>\n<p>参考链接：</p>\n<p>https://www.cnblogs.com/breezey/p/10996629.html</p>\n<p>https://blog.51cto.com/cloumn/blog/1544</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "4.3 Playbook条件语句",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/playbook-if/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/playbook-if/",
      "content_html": "<h1 id=\"_4-3-playbook条件语句\"> 4.3 Playbook条件语句</h1>\n<h2 id=\"_1-简介\"> 1 简介</h2>\n<p>在有的时候play的结果依赖于变量、fact或者是前一个任务的执行结果，或者有的时候，我们会基于上一个task执行返回的结果而决定如何执行后续的task。这个时候就需要用到条件判断。</p>\n<p>条件语句在Ansible中的使用场景：</p>\n<ul>\n<li>在目标主机上定义了一个硬限制，比如目标主机的最小内存必须达到多少，才能执行该task</li>\n<li>捕获一个命令的输出，根据命令输出结果的不同以触发不同的task</li>\n<li>根据不同目标主机的facts，以定义不同的task</li>\n<li>根据目标机的cpu的大小，以调优相关应用性能</li>\n<li>用于判断某个服务的配置文件是否发生变更，以确定是否需要重启服务</li>\n</ul>\n<h2 id=\"_2-when关键字\"> 2 when关键字</h2>\n<h3 id=\"_2-1-when基本使用\"> 2.1 when基本使用</h3>\n<p>在ansible中，使用条件判断的关键字就是when。</p>\n<p>如在安装包的时候，需要指定主机的操作系统类型，或者是当操作系统的硬盘满了之后，需要清空文件等,可以使用when语句来做判断 。when关键字后面跟着的是python的表达式,在表达式中你能够使用任何的变量或者fact,当表达式的结果返回的是false,便会跳过本次的任务</p>\n<p>下面是一个基本的用法示例：</p>\n<div><pre><code>---\n- name: Install vim\n  hosts: all\n  tasks:\n    - name:Install VIM via yum\n      yum: \n        name: vim-enhanced \n        state: installed\n      when: ansible_os_family ==&quot;RedHat&quot;\n      \n    - name:Install VIM via apt\n      apt: \n        name: vim \n        state: installed\n      when: ansible_os_family ==&quot;Debian&quot;\n      \n    - name: Unexpected OS family\n      debug: msg=&quot;OS Family {{ ansible_os_family }} is not supported&quot; fail=yes\n      when: not ansible_os_family ==&quot;RedHat&quot; or ansible_os_family ==&quot;Debian&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id=\"_2-2-比较运算符\"> 2.2  比较运算符</h3>\n<p>在上面的示例当中，我们使用了&quot;==&quot;的比较运算符，在ansible中，还支持如下比较运算符：</p>\n<ul>\n<li><code>==</code>：比较两个对象是否相等，相等则返回真。可用于比较字符串和数字</li>\n<li><code>!=</code>：比较两个对象是否不等，不等则为真。</li>\n<li><code>&gt;</code>：比较两个对象的大小，左边的值大于右边的值，则为真</li>\n<li><code>&lt;</code>：比较两个对象的大小，左边的值小于右边的值，则为真</li>\n<li><code>&gt;=</code>：比较两个对象的大小，左边的值大于等于右边的值，则为真</li>\n<li><code>&lt;=</code>：比较两个对象的大小，左边的值小于等于右边的值，则为真</li>\n</ul>\n<p>下面是一些简单的示例：</p>\n<div><pre><code>when: ansible_machine == &quot;x86_64&quot; \n\nwhen: max_memory &lt;= 512\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-3-逻辑运算符\"> 2.3 逻辑运算符</h3>\n<p>在Ansible中，除了比较运算符，还支持逻辑运算符：</p>\n<ul>\n<li>and：逻辑与，当左边和右边两个表达式同时为真，则返回真</li>\n<li>or：逻辑或，当左右和右边两个表达式任意一个为真，则返回真</li>\n<li>not：逻辑否，对表达式取反</li>\n<li>()：当一组表达式组合在一起，形成一个更大的表达式，组合内的所有表达式都是逻辑与的关系</li>\n</ul>\n<p>示例：</p>\n<div><pre><code># 逻辑或\nwhen: ansible_distribution == &quot;RedHat&quot; or ansible_distribution == &quot;Fedora&quot;\n\n# 逻辑与\nwhen: ansible_distribution_version == &quot;7.5&quot; and ansible_kernel == &quot;3.10.0-327.el7.x86_64&quot;\n\nwhen:\n  - ansible_distribution_version == &quot;7.5&quot;\n  - ansible_kernel == &quot;3.10.0-327.el7.x86_64&quot;\n  \n# 组合\n\nwhen: =&gt; \n  ( ansible_distribution == &quot;RedHat&quot; and ansible_distribution_major_version == &quot;7&quot; )\n  or\n  ( ansible_distribution == &quot;Fedora&quot; and ansible_distribution_major_version == &quot;28&quot;)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>一个完整的例子：</p>\n<div><pre><code># 判断register注册变量的返回结果\n- name: restart httpd if postfix is running\n  hosts: test\n  tasks:\n    - name: get postfix server status\n      command: /usr/bin/systemctl is-active postfix\n      ignore_errors: yes\n      register: result\n      \n    - name: restart apache httpd based on postfix status\n      service:\n        name: httpd\n        state: restarted\n      when: result.rc == 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id=\"_3-条件判断与tests\"> 3 条件判断与tests</h2>\n<p>在shell当中，我们可使用test命令来进行一些常用的判断操作，如下：</p>\n<div><pre><code># 判断/test文件是否存在\ntest -e /test\n\n# 判断/testdir是否存在且为一个目录\ntest -d /testdir\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>事实上，在ansible中也有类似的用法，只不过ansible没有使用linux的test命令，而是jinja2模板的tests。</p>\n<p>下面是一个简单示例：</p>\n<div><pre><code># 通过条件语句判断testpath的路径是否存在\n- hosts: test\n  vars:\n    testpath: /testdir\n  tasks:\n    - debug:\n        msg: &quot;file exist&quot;\n      when: testpath is exists\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>上面的示例中，我们使用了<code>is exists</code>用于路径存在时返回真，也可以使用<code>is not exists</code>用于路径不存在时返回真。也可以在整个条件表达式的前面使用not以取反：</p>\n<div><pre><code>- hosts: test\n  vars:\n    testpath: /testdir1\n  tasks:\n    - debug:\n        msg: &quot;file not exist&quot;\n      when: not testpath is exists\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在ansible中，除了能够使用exists这种tests之外，还有一些别的tests。接下来我们详细说一说。</p>\n<h3 id=\"_3-1-判断变量\"> 3.1 判断变量</h3>\n<ul>\n<li>defined：判断变量是否已定义，已定义则返回真</li>\n<li>undefined：判断变量是否未定义，未定义则返回真</li>\n<li>none：判断变量的值是否为空，如果变量已定义且值为空，则返回真</li>\n</ul>\n<p>示例：</p>\n<div><pre><code>- hosts: test\n  gather_facts: no\n  vars:\n    testvar: &quot;test&quot;\n    testvar1:\n  tasks:\n    - debug:\n        msg: &quot;testvar is defined&quot;\n      when: testvar is defined\n    - debug:\n        msg: &quot;testvar2 is undefined&quot;\n      when: testvar2 is undefined\n    - debug:\n        msg: &quot;testvar1 is none&quot;\n      when: testvar1 is none\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id=\"_3-2-判断执行结果\"> 3.2 判断执行结果</h3>\n<ul>\n<li>sucess或succeeded：通过任务执行结果返回的信息判断任务的执行状态，任务执行成功则返回true</li>\n<li>failure或failed：任务执行失败则返回true</li>\n<li>change或changed：任务执行状态为changed则返回true</li>\n<li>skip或skipped：任务被跳过则返回true</li>\n</ul>\n<p>示例：</p>\n<div><pre><code>- hosts: test\n  gather_facts: no\n  vars:\n    doshell: true\n  tasks:\n    - shell: &#39;cat /testdir/aaa&#39;\n      when: doshell\n      register: result\n      ignore_errors: true\n    - debug:\n        msg: &quot;success&quot;\n      when: result is success\n      \n    - debug:\n        msg: &quot;failed&quot;\n      when: result is failure\n      \n    - debug:\n        msg: &quot;changed&quot;\n      when: result is change\n      \n    - debug:\n        msg: &quot;skip&quot;\n      when: result is skip\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id=\"_3-3-判断路径\"> 3.3 判断路径</h3>\n<ul>\n<li>file：判断指定路径是否为一个文件，是则为真</li>\n<li>directory：判断指定路径是否为一个目录，是则为真</li>\n<li>link：判断指定路径是否为一个软链接，是则为真</li>\n<li>mount：判断指定路径是否为一个挂载点，是则为真</li>\n<li>exists：判断指定路径是否存在，存在则为真</li>\n</ul>\n<blockquote>\n<p>特别注意：关于路径的所有判断均是判断主控端上的路径，而非被控端上的路径</p>\n</blockquote>\n<p>示例：</p>\n<div><pre><code>- hosts: test\n  gather_facts: no\n  vars:\n    testpath1: &quot;/testdir/test&quot;\n    testpath2: &quot;/testdir&quot;\n  tasks:\n    - debug:\n        msg: &quot;file&quot;\n      when: testpath1 is file\n    - debug:\n        msg: &quot;directory&quot;\n      when: testpath2 is directory\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id=\"_3-4-判断字符串\"> 3.4 判断字符串</h3>\n<ul>\n<li>lower：判断字符串中的所有字母是否都是小写，是则为真</li>\n<li>upper：判断字符串中的所有字母是否都是大写，是则为真</li>\n</ul>\n<div><pre><code>- hosts: test\n  gather_facts: no\n  vars: \n    str1: &quot;abc&quot;\n    str2: &quot;ABC&quot;\n  tasks:\n    - debug:\n        msg: &quot;str1 is all lowercase&quot;\n      when: str1 is lower\n    - debug:\n        msg: &quot;str2 is all uppercase&quot;\n      when: str2 is upper\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id=\"_3-5-判断整除\"> 3.5 判断整除</h3>\n<ul>\n<li>even：判断数值是否为偶数，是则为真</li>\n<li>odd：判断数值是否为奇数，是则为真</li>\n<li>divisibleby(num)：判断是否可以整除指定的数值，是则为真</li>\n</ul>\n<p>示例：</p>\n<div><pre><code>- hosts: test\n  gather_facts: no\n  vars: \n    num1: 6\n    num2: 8 \n    num3: 15\n  tasks:\n    - debug: \n        msg: &quot;num1 is an even number&quot;\n      when: num1 is even\n    - debug:\n        msg: &quot;num2 is an odd number&quot;\n      when: num2 is odd\n    - debug:\n        msg: &quot;num3 can be divided exactly by&quot;\n      when: num3 is divisibleby(3)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id=\"_3-6-其他tests\"> 3.6 其他tests</h3>\n<ol>\n<li>\n<p>version</p>\n<p>可用于对比两个版本号的大小，或者与指定的版本号进行对比，使用语法为version(&quot;版本号&quot;,&quot;比较操作符&quot;)</p>\n<div><pre><code>- hosts: test\n  vars:\n    ver1: 1.2\n    ver2: 1.3\n  tasks:\n    - debug:\n        msg: &quot;ver1 is greater than ver2&quot;\n      when: ver1 is version(ver2,&quot;&gt;&quot;)\n    - debug:\n        msg: &quot;system version {{ ansible_distribution_version }} greater than 7.3&quot;\n      when: ansible_distribution_version is version(&quot;7.3&quot;,&quot;gt&quot;)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>version中使用的比较运算符说明：</p>\n<ul>\n<li>大于： &gt;, gt</li>\n<li>大于等于： &gt;=, ge</li>\n<li>小于： &lt;, lt</li>\n<li>小于等于： &lt;=, le</li>\n<li>等于： =, ==, eq</li>\n<li>不等于： !=, &lt;&gt;, ne</li>\n</ul>\n</li>\n<li>\n<p>subset\n判断一个list是不是另一个list的子集</p>\n</li>\n<li>\n<p>superset\n判断一个list是不是另一个list的父集&quot;</p>\n<div><pre><code>- hosts: test\n  gather_facts: no\n  vars:\n    a:\n      - 2\n      - 5\n    b: [1,2,3,4,5]\n  tasks:\n    - debug:\n        msg: &quot;A is a subset of B&quot;\n      when: a is subset(b)\n    - debug:\n        msg: &quot;B is the parent set of A&quot;\n      when: b is superset(a)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>\n<li>\n<p>in\n判断一个字符串是否存在于另一个字符串中，也可用于判断某个特定的值是否存在于列表中</p>\n<div><pre><code>- hosts: test\n  vars:\n    supported_distros:\n      - RedHat\n      - CentOS\n  tasks:\n    - debug:\n        msg: &quot;{{ ansible_distribution }} in supported_distros&quot;\n      when: ansible_distribution in supported_distros\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>\n<li>\n<p>string\n判断对象是否为一个字符串，是则为真</p>\n</li>\n<li>\n<p>number\n判断对象是否为一个数字，是则为真</p>\n</li>\n</ol>\n<div><pre><code>- hosts: test\n  gather_facts: no\n  vars:\n    var1: 1\n    var2: &quot;1&quot;\n    var3: a\n  tasks:\n    - debug:\n        msg: &quot;var1 is a number&quot;\n      when: var1 is number\n    - debug:\n        msg: &quot;var2 is a string&quot;\n      when: var2 is string\n    - debug:\n        msg: &quot;var3 is a string&quot;\n      when: var3 is string\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id=\"_4-条件判断与block\"> 4 条件判断与block</h2>\n<h3 id=\"_4-1-block\"> 4.1 block</h3>\n<p>我们在前面使用when做条件判断时，如果条件成立则执行对应的任务。但这就面临一个问题，当我们要使用同一个条件判断执行多个任务的时候，就意味着我们要在某一个任务下面都写一下when语句，而且判断条件完全一样。这种方式不仅麻烦而且显得low。Ansible提供了一种更好的方式来解决这个问题，即block。</p>\n<p>在ansible中，使用block将多个任务进行组合，当作一个整体。我们可以对这一个整体做条件判断，当条件成立时，则执行块中的所有任务：</p>\n<div><pre><code>- hosts: test\n  tasks:\n    - debug:\n        msg: &quot;task1 not in block&quot;\n    - block:\n        - debug:\n            msg: &quot;task2 in block1&quot;\n        - debug:\n            msg: &quot;task3 in block1&quot;\n      when: 2 &gt; 1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>下面是一个稍微有用点儿的例子：</p>\n<div><pre><code>- hosts: test\n  tasks:\n    - name: set /etc/resolv.conf\n      template: \n        src: resolv.conf.j2 \n        dest: /etc/resolv.conf \n        owner: root \n        group: root \n        mode: 0644\n    - block:\n        - name: ensure /etc/resolvconf/resolv.conf.d/base file for ubuntu 16.04\n          template: \n            src: resolv.conf.j2\n            dest: /etc/resolvconf/resolv.conf.d/base\n       \n        - name: config dns for ubuntu 16.04\n          template: \n            src: resolv.conf.j2\n            dest: /etc/resolv.conf\n      when: ansible_distribution == &quot;Ubuntu&quot; and ansible_distribution_major_version == &quot;16&quot; \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>使用block注意事项：</p>\n<ol>\n<li>可以为block定义name（ansible 2.3增加的特性）</li>\n<li>可以直接对block使用when，但不能直接对block使用loop</li>\n</ol>\n<h3 id=\"_4-2-rescue\"> 4.2 rescue</h3>\n<p>block除了能和when一起使用之外，还能作错误处理。这个时候就需要用到rescue关键字：</p>\n<div><pre><code>- hosts: test\n  tasks:\n    - block:\n        - shell: &#39;ls /testdir&#39;\n      rescue:\n        - debug:\n            msg: &#39;/testdir is not exists&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在上面的例子中，当block中的任务执行失败时，则运行rescue中的任务。如果block中的任务正常执行，则rescue的任务就不会被执行。如果block中有多个任务，则任何一个任务执行失败，都会执行rescue。block中可以定义多个任务，同样rescue当中也可以定义多个任务。</p>\n<h3 id=\"_4-3-always\"> 4.3 always</h3>\n<p>当block执行失败时，rescue中的任务才会被执行；而无论block执行成功还是失败，always中的任务都会被执行：</p>\n<div><pre><code>- hosts: test\n  tasks:\n    - block:\n        - shell: &#39;ls /testdir&#39;\n      rescue:\n        - debug:\n            msg: &#39;/testdir is not exists&#39;\n      always:\n        - debug:\n            msg: &#39;This task always executes&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"_5-条件判断与错误处理\"> 5 条件判断与错误处理</h2>\n<p>在上面讲block的使用方法的时候，我们说block除了可以将多个任务组合到一起，还有错误处理的功能。接下来我们继续说一说错误处理。</p>\n<h3 id=\"_5-1-fail模块\"> 5.1 fail模块</h3>\n<p>在shell中，可能会有这样的需求：当脚本执行至某个阶段时，需要对某个条件进行判断，如果条件成立，则立即终止脚本的运行。在shell中，可以直接调用&quot;exit&quot;即可执行退出。事实上，在playbook中也有类似的模块可以做这件事。即fail模块。</p>\n<p>fail模块用于终止当前playbook的执行，通常与条件语句组合使用，当满足条件时，终止当前play的运行。</p>\n<p>选项只有一个：</p>\n<ul>\n<li>msg：终止前打印出信息</li>\n</ul>\n<p>示例：</p>\n<div><pre><code><span># 使用fail模块中断playbook输出</span>\n<span>-</span> <span>hosts</span><span>:</span> test\n  <span>tasks</span><span>:</span>\n    <span>-</span> <span>shell</span><span>:</span> echo \"Just a test<span>-</span><span>-</span>error\" \n      <span>register</span><span>:</span> result\n    <span>-</span> <span>fail</span><span>:</span>\n        <span>msg</span><span>:</span> <span>\"Conditions established,Interrupt running playbook\"</span>\n      <span>when</span><span>:</span> <span>\"'error' in result.stdout\"</span>\n    <span>-</span> <span>debug</span><span>:</span>\n        <span>msg</span><span>:</span> <span>\"Inever execute,Because the playbook has stopped\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"_5-2-failed-when\"> 5.2 failed_when</h3>\n<p>事实上，当fail和when组合使用的时候，还有一个更简单的写法，即<code>failed_when</code>，当满足某个条件时，ansible主动触发失败。</p>\n<div><pre><code># 如果在command_result存在错误输出，且错误输出中，包含了`FAILED`字串，即返回失败状态：\n- name: this command prints FAILED when it fails\n  command: /usr/bin/example-command -x -y -z\n  register: command_result\n  failed_when: &quot;&#39;FAILED&#39; in command_result.stderr&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>也可以直接通过<code>fail</code>模块和<code>when</code>条件语句，写成如下：</p>\n<div><pre><code>- name: this command prints FAILED when it fails\n  command: /usr/bin/example-command -x -y -z\n  register: command_result\n  ignore_errors: True\n\n- name: fail the play if the previous command did not succeed\n  fail: msg=&quot;the command failed&quot;\n  when: &quot; command_result.stderr and &#39;FAILED&#39; in command_result.stderr&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>\n<p>ansible一旦执行返回失败，后续操作就会中止，所以failed_when通常可以用于满足某种条件时主动中止playbook运行的一种方式。</p>\n</blockquote>\n<blockquote>\n<p>ansible默认处理错误的机制是遇到错误就停止执行。但有些时候，有些错误是计划之中的。我们希望忽略这些错误，以让playbook继续往下执行。这个时候就可以使用<code>ignore_errors</code>忽略错误，从而让playbook继续往下执行。</p>\n</blockquote>\n<h3 id=\"_5-3-changed-when\"> 5.3 changed_when</h3>\n<p>当我们控制一些远程主机执行某些任务时，当任务在远程主机上成功执行，状态发生更改时，会返回changed状态响应，状态未发生更改时，会返回OK状态响应，当任务被跳过时，会返回skipped状态响应。我们可以通过<code>changed_when</code>来手动更改<code>changed</code>响应状态。示例如下：</p>\n<div><pre><code>- shell: /usr/bin/billybass --mode=&quot;take me to the river&quot;\nregister: bass_result\nchanged_when: &quot;bass_result.rc != 2&quot;    #只有该条task执行以后，bass_result.rc的值不为2时，才会返回changed状态\n\n# this will never report &#39;changed&#39; status\n- shell: wall &#39;beep&#39;\n  changed_when: False    #当changed_when为false时，该条task在执行以后，永远不会返回changed状态\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_5-4-断言-assert模块\"> 5.4 断言：assert模块</h3>\n<p>对于当满足某某条件时就失败的逻辑，可以使用fail模块加when指令来实现，也可使用更为直接的assert模块进行断言。</p>\n<p>例如：</p>\n<div><pre><code>---\n- hosts: localhost\n  gather_facts: no\n  tasks:\n    - assert:\n        that:\n          - 100 &gt; 20\n          - 200 &gt; 200\n      fail_msg: &quot;oh, not me&quot;\n      success_msg: &quot;oh, it&#39;s me&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>其中that参数接收一个列表，用于定义一个或多个条件，如果条件全为true，则任务成功，只要有一个条件为false，则任务失败。fail_msg(或其别名参数msg)定义任务失败时的信息，success_msg定义任务成功时的信息。</p>\n<h3 id=\"_5-5-any-errors-fatal\"> 5.5 any_errors_fatal</h3>\n<p>如果想让某个失败的任务直接导致整个play的失败，可在play级别使用any_errors_fatal指令。</p>\n<div><pre><code>---\n- hosts: nginx\n  gather_facts: no\n  any_errors_fatal: true\n  tasks:\n    - fail:\n        msg: &quot;oh, not me&quot;\n      when: inventory_hostname == groups[&#39;nginx&#39;][0]\n    - debug:\n        msg: &quot;hello&quot;\n\n- hosts: localhost\n  gather_facts: no\n  tasks:\n    - debug:\n        msg: &quot;HELLO WORLD&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>将any_errors_fatal设置为true后，nginx组第一个节点只要一开始执行fail任务，整个playbook中所有后续任务都将不再执行，就连其它play也一样不执行。</p>\n<p>注意观察playbook的执行结果，它将提示&quot;NO MORE HOSTS LEFT&quot;：</p>\n<div><pre><code>........\nTASK [fail] *********************\nfatal: [192.168.200.42]: FAILED! =&gt; {&quot;changed&quot;: false, &quot;msg&quot;: &quot;oh, not me&quot;}\nskipping: [192.168.200.43]\nskipping: [192.168.200.44]\n\nNO MORE HOSTS LEFT **************\n\nPLAY RECAP *************\n.........\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"_5-6-max-fail-percentage\"> 5.6 max_fail_percentage</h3>\n<p>略</p>\n<h2 id=\"_6-在循环语句中使用条件语句\"> 6 在循环语句中使用条件语句</h2>\n<div><pre><code># 只打印大于5的值\ntasks:\n    - command: echo {{ item }}\n      loop: [ 0, 2, 4, 6, 8, 10 ]\n      when: item &gt; 5\n# 确保将mariadb-server安装到根分区且根分区的可用空间要大于300M\n- name: install mariadb-server if enough space on root\n  yum: \n    name: mariadb-server\n    state；拉特st\n  loop: &quot;{{ ansible_mounts }}&quot;\n  when: item.mount == &quot;/&quot; and item.size_available &gt; 300000000\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><blockquote>\n<p>转载链接：https://www.cnblogs.com/breezey/p/10996632.html</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "4.5 Playbook之tags",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/playbook-tags/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/playbook-tags/",
      "content_html": "<h1 id=\"_4-5-playbook之tags\"> 4.5 Playbook之tags</h1>\n<h2 id=\"_1-简介\"> 1 简介</h2>\n<p>在大型项目当中，通常一个playbook会有非常多的task。而我们每次执行这个playbook时，都会将所有task运行一遍。而事实上，在实际使用过程中，我们可能只是想要执行其中的一部分任务而已，并不想把整个playbook完整跑一遍。这个时候就需要用到tags。</p>\n<p>通过tags，我们可以给playbook中的某一些任务打上“标签”，而在执行playbook的时候，我们可以通过选定标签的方式指定只执行哪一些任务或者不执行哪一些任务。</p>\n<h2 id=\"_2-为task打tag\"> 2 为task打tag</h2>\n<p>下面是一个安装httpd的简单示例：</p>\n<div><pre><code><span># cat /etc/ansible/playbook/install_web.yml</span>\n<span>-</span> <span>name</span><span>:</span> configure webservers \n  <span>hosts</span><span>:</span> all\n  <span>remote_user</span><span>:</span> ansible\n  \n  <span>tasks</span><span>:</span>\n    <span>-</span> <span>name</span><span>:</span> Install httpd\n      <span>yum</span><span>:</span> \n        <span>name</span><span>:</span> httpd\n        <span>state</span><span>:</span> present\n      <span>tags</span><span>:</span> install_httpd\n        \n    <span>-</span> <span>name</span><span>:</span> Cofiguration httpd\n      <span>copy</span><span>:</span> \n        <span>src</span><span>:</span> /root/httpd.conf \n        <span>dest</span><span>:</span> /etc/httpd/conf/httpd.conf\n      <span>tags</span><span>:</span> conf_httpd   \n      <span>notify</span><span>:</span>\n        <span>-</span> restart httpd\n        \n    <span>-</span> <span>name</span><span>:</span> Start httpd\n      <span>service</span><span>:</span> \n        <span>name</span><span>:</span> httpd \n        <span>state</span><span>:</span> started \n        <span>enabled</span><span>:</span> no\n      <span>tags</span><span>:</span> start_httpd\n\n  <span>handlers</span><span>:</span>\n    <span>-</span> <span>name</span><span>:</span> restart httpd\n      <span>service</span><span>:</span> name=httpd state=restart\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>在上面的示例中，我们为两个task定义了三个tags：<code>install_httpd</code>、<code>conf_httpd</code>以及<code>start_httpd</code>。</p>\n<h2 id=\"_3-使用tag\"> 3 使用tag</h2>\n<h3 id=\"_3-1-执行指定tag的task\"> 3.1 执行指定tag的task</h3>\n<p>有了tags之后，我们就可以只运行playbook中指定标签的task了：</p>\n<div><pre><code># ansible-playbook  install_web.yml --tags &quot;start_httpd&quot;\n\nPLAY [configure webservers] *************************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [Start httpd] **********************************************************************************************************************************************************\nchanged: [10.1.61.187]\n\nPLAY RECAP ******************************************************************************************************************************************************************\n10.1.61.187                : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>也可以一次指定多个tag执行：</p>\n<div><pre><code># ansible-playbook install_web.yml     --tags &quot;conf_httpd,start_httpd&quot;\n\nPLAY [configure webservers] *************************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [Cofiguration httpd] ***************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [Start httpd] **********************************************************************************************************************************************************\nok: [10.1.61.187]\n\nPLAY RECAP ******************************************************************************************************************************************************************\n10.1.61.187                : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id=\"_3-2-排除指定tag的task\"> 3.2 排除指定tag的task</h3>\n<p>通过下面的方式可以排除指定了tag的task，即除了指定tag的task不执行，其他task都执行：</p>\n<div><pre><code># ansible-playbook --skip-tags=&quot;install_httpd&quot; install_web.yml                           \n\nPLAY [configure webservers] *************************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [Cofiguration httpd] ***************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [Start httpd] **********************************************************************************************************************************************************\nok: [10.1.61.187]\n\nPLAY RECAP ******************************************************************************************************************************************************************\n10.1.61.187                : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>执行效果跟上面一样。</p>\n<h3 id=\"_3-3-查看playbook中的所有tag\"> 3.3 查看playbook中的所有tag</h3>\n<p>可以通过<code>--list-tags</code>参数列出指定的playbook中所有的tag</p>\n<div><pre><code># ansible-playbook --list-tags install_web.yml                          \n\nplaybook: install_web.yml\n\n  play #1 (all): configure webservers   TAGS: []\n      TASK TAGS: [conf_httpd, install_httpd, start_httpd]\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"_4-打tag的几种方式\"> 4 打tag的几种方式</h2>\n<ol>\n<li>为一个任务指定一个标签</li>\n</ol>\n<p>这种方式就是上面示例中的方法：</p>\n<div><pre><code><span>tags</span><span>:</span> conf_httpd\n</code></pre>\n<div><span>1</span><br></div></div><ol>\n<li>为一个任务指定多个标签</li>\n</ol>\n<p>可以通过列表的方式为一个任务指定多个标签：</p>\n<div><pre><code><span>tags</span><span>:</span>\n  <span>-</span> install_httpd\n  <span>-</span> install_web\n  \n<span>tags</span><span>:</span> <span>[</span><span>'install_httpd'</span><span>,</span><span>'install_web'</span><span>]</span>\n\n<span>tags</span><span>:</span> install_httpd<span>,</span>install_web\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ol>\n<li>为一个play指定一组标签</li>\n</ol>\n<p>当为一个play指定一组标签后，该play下的所有task都会自动继承该标签，各task也可以自定义自己的标签。</p>\n<div><pre><code>- name: configure webservers \n  hosts: all\n  remote_user: ansible\n  tags: \n    - httpd\n  tasks:\n    ...\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在静态加载文件的指令上打标签，等价于为所加载文件中所有子任务打标签。</p>\n<p>在动态加载文件的指令上打标签，不会为子任务打标签，而是为父任务自身打标签。</p>\n<p>现在说结论：</p>\n<p>(1).静态加载的指令有：roles、include、import_tasks、import_role</p>\n<p>(2).动态加载的指令只有include_xxx，包括include_tasks、include_role</p>\n<p>import_playbook和include_playbook因为本身就是play级别或高于play级别，所以不能为这两个指令打标签。</p>\n<h2 id=\"_5-ansible内置tag\"> 5 ansible内置tag</h2>\n<p>除了用户自定义tag，ansible也内置了几个tag，这些tag都包含特殊含义：</p>\n<ul>\n<li>\n<p>always：一旦某个task被打上了always的tag，则无论是playbook的完整执行，还是指定tag执行，不管你指定的tag是啥，该任务总是会被执行。除非明确指定&quot;--skip-tags=always&quot;选项，才不会执行该task。</p>\n</li>\n<li>\n<p>never：该标签与always正好相反，总是不会执行，除非明确指定&quot;--tags=never&quot;选项。</p>\n</li>\n<li>\n<p>tagged：在调用时使用</p>\n<div><pre><code><span># 所有打了tag的任务都会被执行，包含never tag的除外，没有标签的不会被执行</span>\nansible-playbook --tags tagged install_web.yaml \n\n<span># 所有打了tag的任务都不会被执行，包括always tag也不会被执行</span>\nansible-playbook --skip-tags tagged install_web.yaml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>\n<li>\n<p>untagged：在调用时使用</p>\n<div><pre><code><span># 所有未打tag的任务都会被执行，打了always tag的也会被执行</span>\nansibl-playbook --tags untagged install_web.yaml\n\n<span># 所有未打tag的任务都不会被执行</span>\nansibl-playbook --skip-tags untagged install_web.yaml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>\n<li>\n<p>all：表示所有任务都会被执行，在默认情况下，不指定任何标签，则使用的就是该标签</p>\n</li>\n</ul>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "4 Ansible Playbook",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/playbook/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/playbook/",
      "content_html": "<h1 id=\"_4-ansible-playbook\"> 4 Ansible Playbook</h1>\n<h2 id=\"_1-ansible-playbook简介\"> 1 Ansible Playbook简介</h2>\n<p>Ansible 靠ansible命令是撑不起自动化管理这把大伞的，Ansible真正强大的是playbook，它才是Ansible撬动自动化管理的结实杠杆。</p>\n<p>ansbile-playbook是一系列ansible命令的集合，利用yaml 语言编写。playbook命令根据自上而下的顺序依次执行。同时，playbook开创了很多特性,它可以允许你传输某个命令的状态到后面的指令,如你可以从一台机器的文件中抓取内容并附为变量,然后在另一台机器中使用,这使得你可以实现一些复杂的部署机制,这是ansible命令无法实现的。</p>\n<p>playbook通过ansible-playbook命令使用,它的参数和ansible命令类似,如参数-k(–ask-pass) 和 -K (–ask-sudo) 来询问ssh密码和sudo密码,-u指定用户,这些指令也可以通过规定的单元写在playbook 。</p>\n<p>ansible-playbook的简单使用方法: ansible-playbook example-play.yml 。</p>\n<h3 id=\"playbook、play和task的关系\"> playbook、play和task的关系</h3>\n<ul>\n<li>playbook中可以定义一个或多个play</li>\n<li>每个play中可以定义一个或多个task</li>\n<li>每个play都需要通过hosts指令指定要执行改play的目标主机</li>\n<li>每个play都可以设置一些该play的环境控制行为，比如定义play级别的变量</li>\n</ul>\n<blockquote>\n<p>其中还可以定义两类特殊的task：pre_tasks和post_tasks</p>\n<ul>\n<li>pre_tasks表示执行执行普通任务之前执行的任务列表</li>\n<li>post_tasks表示普通任务执行完之后执行的任务列表</li>\n</ul>\n</blockquote>\n<h2 id=\"_2-playbook基本语法\"> 2 Playbook基本语法</h2>\n<p>下面是一个简单的ansible-playbook示例，可以了解其构成:</p>\n<div><pre><code><span># cat user.yml</span>\n<span>-</span> <span>name</span><span>:</span> create user\n  <span>hosts</span><span>:</span> all\n  <span>remote_user</span><span>:</span> root\n  <span>gather_facts</span><span>:</span> <span>false</span>\n  <span>vars</span><span>:</span>\n    user<span>:</span><span>\"test\"</span>\n  <span>tasks</span><span>:</span>\n    <span>-</span> <span>name</span><span>:</span> create  user\n      <span>user</span><span>:</span> name=\"<span>{</span><span>{</span> user <span>}</span><span>}</span>\"\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>配置项说明：</p>\n<ul>\n<li>\n<p><code>name</code>：对该playbook实现的功能做一个概述，后面执行过程中，会打印 name变量的值</p>\n</li>\n<li>\n<p><code>hosts</code>：指定对哪些被管理机进行操作；</p>\n</li>\n<li>\n<p><code>remote_user</code>：指定在远程被管理机上执行操作时使用什么用户，如不指定，则使用ansible.cfg中配置的remote_user</p>\n</li>\n<li>\n<p><code>gather_facts</code>：指定在执行任务之前，是否先执行setup模块获取主机相关信息，如未用到，可不指定</p>\n</li>\n<li>\n<p><code>vars</code>：定义后续任务中会使用到的变量，如未用到，可不指定</p>\n</li>\n<li>\n<div><pre><code>tasks\n</code></pre>\n<div><span>1</span><br></div></div><p>：定义具体需要执行的任务</p>\n<ul>\n<li>name：对任务的描述，在执行过程中会打印出来。</li>\n<li>user：指定调用user模块；\n<ul>\n<li>name：user模块里的一个参数，用于指定创建的用户名称</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>同样，如果想实现把这个新增的用户删除，只需将该playbook文件的最后一行替换为如下行再执行相应的playbook即可：</p>\n<div><pre><code>user: name=&quot;{{ user }}&quot; state=absent remove=yes\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-playbook简单示例\"> 3 Playbook简单示例</h2>\n<p>下面通过playbook管理一个httpd服务器来简单了解下playbook的应用：</p>\n<ol>\n<li>创建playbook</li>\n</ol>\n<div><pre><code><span># cat manage_apache.yml</span>\n<span>-</span> <span>name</span><span>:</span> play to setup web server\n  <span>hosts</span><span>:</span> all\n  <span>tasks</span><span>:</span>\n    <span>-</span> <span>name</span><span>:</span> latest httpd version installed\n      <span>yum</span><span>:</span>\n        <span>name</span><span>:</span> httpd\n        <span>state</span><span>:</span> latest\n        \n    <span>-</span> <span>name</span><span>:</span> correct index.html is present\n      <span>copy</span><span>:</span> \n        <span>src</span><span>:</span> files/index.html\n        <span>dest</span><span>:</span> /var/www/html/index.html\n        \n    <span>-</span> <span>name</span><span>:</span> start httpd service\n      <span>service</span><span>:</span>\n        <span>name</span><span>:</span> httpd\n        <span>state</span><span>:</span> started\n        <span>enabled</span><span>:</span> <span>true</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ol>\n<li>执行playbook</li>\n</ol>\n<div><pre><code># ansible-playbook  manage_apache.yml \n\nPLAY [play to setup web server] *********************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [latest httpd version installed] ***************************************************************************************************************************************\nchanged: [10.1.61.187]\n\nTASK [correct index.html is present] ****************************************************************************************************************************************\nchanged: [10.1.61.187]\n\nTASK [start httpd service] **************************************************************************************************************************************************\nchanged: [10.1.61.187]\n\nPLAY RECAP ******************************************************************************************************************************************************************\n10.1.61.187                : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id=\"_4-ansible-playbook常用选项\"> 4 ansible-playbook常用选项</h2>\n<h3 id=\"_4-1-打印详细信息\"> 4.1 打印详细信息</h3>\n<ul>\n<li>-v：打印任务运行结果</li>\n<li>-vv：打印任务运行结果以及任务的配置信息</li>\n<li>-vvv：包含了远程连接的一些信息</li>\n<li>-vvvv：Adds extra verbosity options to the connection plug-ins,including the users being used in the managed hosts to execute scripts, and what scripts have been executed</li>\n</ul>\n<div><pre><code># ansible-playbook  manage_apache.yml  -vv\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_4-2-校验playbook语法\"> 4.2  校验playbook语法</h3>\n<div><pre><code># ansible-playbook --syntax-check  manage_apache.yml   \n\nplaybook: manage_apache.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_4-3-测试运行playbook\"> 4.3 测试运行playbook</h3>\n<p>通过-C选项可以测试playbook的执行情况，但不会真的执行：</p>\n<div><pre><code># ansible-playbook -C  manage_apache.yml  \n\nPLAY [play to setup web server] *********************************************************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [latest httpd version installed] ***************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [correct index.html is present] ****************************************************************************************************************************************\nok: [10.1.61.187]\n\nTASK [start httpd service] **************************************************************************************************************************************************\nok: [10.1.61.187]\n\nPLAY RECAP ******************************************************************************************************************************************************************\n10.1.61.187                : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"_4-4-playbook模块参数的传递方式\"> 4.4 playbook模块参数的传递方式</h3>\n<p>copy模块的参数传递方式如下</p>\n<div><pre><code>tasks:\n  - name: copy /etc/passwd to /tmp\n    copy: src=/etc/passwd dest=/tmp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这是标准的yaml语法，参数部分src=/etc/passwd dest=/tmp是一个字符串，当作copy对应的值。根据4_8 yaml介绍的yaml语法，还可以换行书写。有以下几种方式：</p>\n<div><pre><code>---\n- name: first play\n  hosts: nginx\n  gather_facts: false\n  tasks:\n  - copy:\n    src=/etc/passwd dest=/tmp\n\n  - copy:\n    src=/etc/passwd\n    dest=/tmp\n\n  - copy: &gt;\n    src=/etc/passwd\n    dest=/tmp\n\n  - copy: |\n    src=/etc/passwd\n    dest=/tmp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>除此之外，Ansible还提供了另外两种传递参数的方式：</p>\n<p>(1).将参数和参数值写成key: value的方式</p>\n<p>(2).使用args参数声明接下来的是参数</p>\n<p>通过示例便可对其用法一目了然：</p>\n<div><pre><code>---\n- name: first play\n  hosts: nginx\n  gather_facts: false\n  tasks:\n  - name: copy1\n    copy:\n      src: /etc/passwd\n      dest: /tmp\n\n  - name: copy2\n    copy:\n    args:\n      src: /etc/passwd\n      dest: /tmp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>大多数时候，使用何种方式传递参数并无关紧要，只要个人觉得可读性高、方便、美观即可。</p>\n<h2 id=\"_5-multiple-plays\"> 5 Multiple Plays</h2>\n<div><pre><code># This is a simple playbook with two plays\n\n- name: first play\n  hosts: web.example.com\n  tasks:\n    - name: first task\n      yum:\n        name: httpd\n        status: present\n    - name: second task\n      service:\n        name: httpd\n        state: started\n    \n- name: second play\n  hosts: db.example.com\n  tasks:\n    - name: first task\n      yum:\n        name: mariadb-server\n        status: present\n    - name: second task\n      service:\n        name: mariadb\n        state: started\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><blockquote>\n<p>参考链接：</p>\n<p>https://www.cnblogs.com/breezey/p/8811250.html</p>\n<p>https://blog.51cto.com/cloumn/blog/1544</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "7 常见问题",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/qa/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/qa/",
      "content_html": "<h1 id=\"_7-常见问题\"> 7 常见问题</h1>\n<h3 id=\"_4-3-关于ssh连接一些常见的错误说明\"> 4.3 关于ssh连接一些常见的错误说明</h3>\n<ol>\n<li><code>ERROR! to use the 'ssh' connection type with passwords, you must install the sshpass program</code></li>\n</ol>\n<p>完整错误示例如下：</p>\n<div><pre><code>root@ctnr:/etc/ansible# ansible &#39;*.a32-168-1.*&#39; -m ping\nctnr.a32-168-1.prod.yiz | FAILED! =&gt; {\n    &quot;failed&quot;: true, \n    &quot;msg&quot;: &quot;ERROR! to use the &#39;ssh&#39; connection type with passwords, you must install the sshpass program&quot;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>一般出现这种错误，是在通过密码验证远程被管理机的时候，需要在server端安装sshpass：</p>\n<div><pre><code>yum install sshpass -y \n</code></pre>\n<div><span>1</span><br></div></div><ol>\n<li><code>Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this. Please add this host's fingerprint to your known_hosts file to manage this host</code></li>\n</ol>\n<p>完整错误如下：</p>\n<div><pre><code>ansible test -a &#39;uptime&#39;\n\n192.168.1.1| FAILED =&gt;Using a SSH password instead of a key is not possible because HostKey checking is enabled and sshpass does not support this.Please add this host&#39;s fingerprint to your known_hosts file to manage this host.\n192.168.1.2 | FAILED =&gt; Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host&#39;s fingerprint to your known_hosts file to manage this host.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这种错误通常就出现在server端第一次连接被管理机的时候，就是上面说到的需要通过输入yes/no进行确认将key字符串加入到<code>~/.ssh/known_hosts</code>文件中。</p>\n<p>解决办法有两个：</p>\n<ul>\n<li>通过修改上面提到的host_key_checking，将其设置为false</li>\n<li>通过修改ssh_args参数，修改如下：</li>\n</ul>\n<div><pre><code>ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no \n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "1 初识Ansible",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/",
      "content_html": "<h1 id=\"_1-初识ansible\"> 1 初识Ansible</h1>\n<h2 id=\"_1-ansible简介\"> 1 Ansible简介</h2>\n<p>Ansible官方文档： https://docs.ansible.com/</p>\n<p>Ansible 是一个 IT 自动化工具。它能配置系统、部署软件、编排更复杂的 IT 任务，如连续部署或零停机时间滚动更新。</p>\n<p>Ansible 用 python 编写，尽管市面上已经有很多可供选择的配置管理解决方案（例如 Salt，Puppet，Chef等），但它们各有优劣，而Ansible的特点在于它的简洁。让 Ansible 在主流的配置管理系统中与众不同的一点便是，它并不需要你在想要配置的每个节点上安装自己的组件。同时提供的一个优点在于，如果需要的话，你可以在不止一个地方控制你的整个基础架构。</p>\n<h3 id=\"_1-1-ansible特性\"> 1.1 Ansible特性</h3>\n<ul>\n<li>Agentless：不需要再被管理节点上安装客户端，只要有sshd即可</li>\n<li>幂等性：多次操作或多次执行不影响结果。</li>\n<li>Serverless：在服务端不需要启动任何服务，只需要执行命令就行</li>\n<li>Modules in any language：基于模块工作，可以使用任意语言开发ansible模块</li>\n<li>YAML, not code：使用yaml语言定制playbook</li>\n<li>SSH by default：默认使用ssh控制各节点</li>\n<li>Strong multi-tier solution：可实现多级控制</li>\n</ul>\n<blockquote>\n<p>幂等性详细解释：比如算术运算时数值加0是幂等的，无论加多少次结果都不会改变，而数值加1是非幂等的，每次加1结果都会改变。再比如执行systemctl stop xxx命令来停止服务,当发现要停止的目标服务已经处于停止状态，它什么也不会做，所以多次停止的结果仍然是停止，不会改变结果，它是幂等的，而systemctl restart xxx是非幂等的。Ansible的很多 模块在执行时都会先判断目标节点是否要执行任务,所以，可以放心大胆地让Ansible去执行任务,重复执行某个任务绝大多数时候不会产生任何副作用。</p>\n</blockquote>\n<h3 id=\"_1-2-ansible的基本组件\"> 1.2 Ansible的基本组件</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/ansible1-1585014469983.png\" alt=\"ansible1\"></p>\n<ul>\n<li>核心：ansible</li>\n<li>核心模块（Core Modules）：这些都是ansible自带的模块</li>\n<li>扩展模块（Custom Modules）：如果核心模块不足以完成某种功能，可以添加扩展模块</li>\n<li>插件（Plugins）：完成模块功能的补充</li>\n<li>剧本（Playbooks）：把需要完成的多个任务定义在剧本中</li>\n<li>连接插件（Connectior Plugins）：ansible基于连接插件连接到各个主机上，虽然ansible是使用ssh连接到各个主机的，但是它还支持其他的连接方法，所以需要有连接插件</li>\n<li>主机群（Host Inventory）：ansible在管理多台主机时，可以选择只对其中的一部分执行某些操作</li>\n</ul>\n<h3 id=\"_1-3-ansible工作机制\"> 1.3 Ansible工作机制</h3>\n<p>Ansible 在管理节点将 Ansible 模块通过 SSH 协议（或者 Kerberos、LDAP）推送到被管理端执行，执行完之后自动删除，可以使用版本控制系统（git/svn）来管理自定义模块及playbooks。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/ansible2-1585014469997.png\" alt=\"ansible2\"></p>\n<h2 id=\"_2-ansible安装\"> 2 Ansible安装</h2>\n<h3 id=\"_2-1-yum-安装-推荐\"> 2.1 yum 安装（推荐）</h3>\n<div><pre><code><span># 配置epel源</span>\n<span>cat</span> <span>></span> /etc/yum.repos.d/epel.repo <span>&lt;&lt;</span><span>'EOF'\n[epel]\nname=epel repo\nbaseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch\nenabled=1\ngpgcheck=0\nEOF</span>\n<span># 安装</span>\nyum -y <span>install</span> ansible\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><blockquote>\n<p>'EOF'，EOF用单引号括起来，可使配置文件中变量<code>$basearch</code>不被转义</p>\n</blockquote>\n<h3 id=\"_2-2-源码安装-推荐\"> 2.2 源码安装（推荐）</h3>\n<div><pre><code><span># 解决依赖关系：</span>\nyum <span>install</span> -y python36 python36-devel python36-setuptools gcc libffi-devel openssl-devel\n\n<span># 配置pip 下载源</span>\n<span>mkdir</span> ~/.pip\n<span>cat</span> <span>></span> ~/.pip/pip.conf <span>&lt;&lt;</span> <span>'EOF'\n[global] \nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host = https://pypi.tuna.tsinghua.edu.cn\nEOF</span>\n\n \n<span># 下载ansible：</span>\n<span>wget</span> https://github.com/ansible/ansible/archive/v2.9.17.tar.gz\n\n<span>#解压安装</span>\n\n<span>tar</span> xf v2.9.17.tar.gz\n<span>cd</span> ansible-2.9.17/\npython3 setup.py build\npython3 setup.py <span>install</span> <span># install 过程安装module失败时，使用pip3手动安装</span>\n<span>mkdir</span> /etc/ansible\n<span>cp</span> -r examples/* /etc/ansible\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h3 id=\"_2-3-pip-安装\"> 2.3  pip 安装</h3>\n<p>Ansible每个版本释放出来之后，都首先提交到Pypi,所以任何操作系统，都可以使用pip工具来安装最新版的Ansible。</p>\n<div><pre><code>pip3 <span>install</span> ansible\n</code></pre>\n<div><span>1</span><br></div></div><p>但要注意，使用各系统的包管理I具(如yum)安装Ansible时自动会提供-些配置文件，如/etc/ansible/ansible. cfg。而使用pip安装的Ansible默认不提供配置文件。</p>\n<h2 id=\"_3-ansible-参数补全功能\"> 3 Ansible 参数补全功能</h2>\n<p>从Ansible 2.9版本开始，它支持命令的选项补全功能，它依赖于python的argcomplete插件</p>\n<p>安装argcomplete:</p>\n<div><pre><code>yum -y install python-argcomplete\npip3 install argcomplete\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>安装完成后，激活插件</p>\n<div><pre><code>activate-global-python-argcomplete \n</code></pre>\n<div><span>1</span><br></div></div><p>重新进去终端，即可使用tab参数补全功能</p>\n<h2 id=\"_4-ansible配置文件管理\"> 4 Ansible配置文件管理</h2>\n<h3 id=\"_4-1-配置文件优先级\"> 4.1 配置文件优先级</h3>\n<p>ansible的配置文件名为ansible.cfg，它一般会存在于四个地方：</p>\n<ul>\n<li>ANSIBLE_CONFIG：首先，Ansible命令会检查该环境变量，及这个环境变量将指向的配置文件</li>\n<li>./ansible.cfg：当前工作目录，即当前执行ansible指令的目录，如果ANSIBEL_CONFIG环境变量未定义，则优先使用该配置文件</li>\n<li>~/.ansible.cfg：当前用户家目录下的一个隐藏文件，如果当前工作目录下不存在ansible.cfg配置文件，则会查找用户家目录下的该隐藏文件</li>\n<li>/etc/ansible/ansible.cfg：默认配置文件，如果上面两个路径下的ansible.cfg都不存在，则使用该文件</li>\n</ul>\n<blockquote>\n<p>需要说明的是，配置文件中所有的配置项都可以通过环境变量的方式来定义，而环境变量定义的配置项具有最高优先级，会覆盖掉所有配置文件中的配置项</p>\n</blockquote>\n<h3 id=\"_4-2-配置文件详解\"> 4.2 配置文件详解</h3>\n<p>Ansible 配置文件采用ini风格进行配置，每一项配置都使用<code>key=value</code>的方式进行配置</p>\n<h4 id=\"_4-2-1-配置文件分段说明\"> 4.2.1 配置文件分段说明</h4>\n<p>ansible.cfg的配置默认分为十段：</p>\n<ul>\n<li>[defaults]：通用配置项</li>\n<li>[inventory]：与主机清单相关的配置项</li>\n<li>[privilege_escalation]：特权升级相关的配置项</li>\n<li>[paramiko_connection]：使用paramiko连接的相关配置项，Paramiko在RHEL6以及更早的版本中默认使用的ssh连接方式</li>\n<li>[ssh_connection]：使用OpenSSH连接的相关配置项，OpenSSH是Ansible在RHEL6之后默认使用的ssh连接方式</li>\n<li>[persistent_connection]：持久连接的配置项</li>\n<li>[accelerate]：加速模式配置项</li>\n<li>[selinux]：selinux相关的配置项</li>\n<li>[colors]：ansible命令输出的颜色相关的配置项</li>\n<li>[diff]：定义是否在运行时打印diff（变更前与变更后的差异）</li>\n</ul>\n<h4 id=\"_4-2-2-配置参数说明\"> 4.2.2 配置参数说明</h4>\n<div><pre><code>[default]\ninventory      = /etc/ansible/hosts\nremote_user    = root\nask_pass       = false\nlog_path       = /var/log/ansible.log\n\n[privilege_escalation]\nbecome=True\nbecome_method=sudo\nbecome_user=root\nbecome_ask_pass=False\n\n[ssh_connection]\nssh_args = -C -o ControlMaster=auto -o ControlPersist=60s \nhost_key_checking = False \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>配置项说明：</p>\n<ul>\n<li>inventory：定义默认使用的主机清单</li>\n<li>remote_user： ansible在操作远程主机时，使用远程主机上的哪个用户身份，默认是root</li>\n<li>ask_pass：ansible在操作远程主机时，获取远程主机上的用户身份，是否交互提示密码验证，默认为true。如果使用密钥认证的话，建议将其设置为false</li>\n<li>log_path：默认ansible 执行的时候，并不会输出日志到文件，打开该配置项，所有的命令执行后，都会将日志输出到<code>/var/log/ansible.log</code>文件。</li>\n<li>become：如果ansible在操作远程主机时，使用的是远程主机上的普通用户，该普通用户是否允许提权</li>\n<li>become_method：如果允许提权，使用何种提权方式，默认是sudo</li>\n<li>become_user：提权到哪个用户身份，默认是root</li>\n<li>become_ask_pass：提权时，是否交互提示密码验证，默认为False</li>\n<li>ssh_args：ansible通过ssh连接远程被管理机，这里用于定义一些ssh连接时的参数，如-C启用压缩传输，ControlPersist用于提升性能。</li>\n<li>host_key_checking：通过ssh首次连接远程主机时，由于在本机的<code>~/.ssh/known_hosts</code>文件中并有<code>fingerprint key</code>串，ssh第一次连接的时候一般会提示输入yes/no进行确认将key字符串加入到<code>~/.ssh/known_hosts</code>文件中。将此项设置为False将跳过该确认过程。</li>\n</ul>\n<blockquote>\n<p>参考链接：</p>\n<p>https://www.cnblogs.com/breezey/p/8810263.html</p>\n<p>https://blog.51cto.com/cloumn/blog/1540</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/ansible1-1585014469983.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "4.6 巧用Roles",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/roles/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/roles/",
      "content_html": "<h1 id=\"_4-6-巧用roles\"> 4.6 巧用Roles</h1>\n<h2 id=\"_1-如何重用playbook\"> 1 如何重用Playbook</h2>\n<p>不能站在巨人肩膀上的编程语言不是好语言，支持重用机制会节省重复的调研工作上浪费大量的时间，当然也会提高可维护性。</p>\n<p>Playbook支持两种重用机制，一种是重用静态Playbook脚本，另外一种是类似于编程语言中函数的机制。</p>\n<ul>\n<li>include语句 - 重用静态的Playbook脚本，使用起来简单、直接。</li>\n<li>role语言 - Playbook的“函数机制”，使用方法稍复杂、功能强大。是Playbook脚本的共享平台ansible galaxy主要的分享方式</li>\n</ul>\n<p>组织文件的方式均使用include指令，但随着版本的更迭，Ansible对这方面做了更为细致的区分。虽然目前仍然支持include，但早已纳入废弃的计划，所以现在不要再使用include指令。</p>\n<ul>\n<li>\n<p>对于playbook(或play)或task，可以使用include_xxx或import_xxx指令：</p>\n<p>(1).include_tasks和import_tasks用于引入外部任务文件；</p>\n<p>(2).import_playbook用于引入playbook文件；</p>\n<p>(3).include可用于引入几乎所有内容文件，但建议不要使用它；</p>\n</li>\n<li>\n<p>对于handler，因为它本身也是task，所以它也能使用include_tasks、import_tasks来引入，但是这并不是想象中那么简单，后文再细说。</p>\n</li>\n<li>\n<p>对于variable，使用include_vars(这是核心模块提供的功能)或其它组织方式(如vars_files)，没有对应的import_vars。</p>\n</li>\n</ul>\n<p>后文要介绍的Role，使用include_role或import_role或roles指令。</p>\n<p>既然某类内容文件既可以使用include_xxx引入，也可以使用import_xxx引入，对于我们来说，就有必要去搞清楚它们有什么区别。</p>\n<p>本文最后我会详细解释它们，现在我先把结论写在这：</p>\n<p>(1).include_xxx指令是在遇到它的时候才加载文件并解析执行，所以它是动态解析的；</p>\n<p>(2).import_xxx是在解析playbook的时候解析的，也就是说在执行playbook之前就已经解析好了，所以它也称为静态加载。</p>\n<h2 id=\"_2-roles目录结构\"> 2 roles目录结构</h2>\n<p>Role可以组织任务、变量、handler以及其它一些内容，所以一个完整的Role里包含的目录和文件可能较多，手动去创建所有这些目录和文件是一件比较烦人的事，好在可以使用ansible-galaxy init ROLE_NAME命令来快速创建一个符合Role文件组织规范的框架。</p>\n<p>例如，下面创建了一个名为first_role的Role：</p>\n<div><pre><code>$ ansible-galaxy init first_role\n$ tree first_role/\nfirst_role/            \\\\ 角色名称\n├── defaults           \\\\ 为当前角色设定默认变量时使用此目录，应当包含一个main.yml文件；\n│   └── main.yml        \n├── files              \\\\ 存放有copy或script等模块调用的文件\n├── handlers           \\\\ 此目录应当包含一个main.yml文件，用于定义各角色用到的各handler\n│   └── main.yml\n├── meta               \\\\ 应当包含一个main.yml，用于定义角色的特殊设定及其依赖关系；1.3及以后版本支持\n│   └── main.yml\n├── README.md\n├── tasks              \\\\ 至少包含一个名为main.yml的文件，定义了此角色的任务列表\n│   └── main.yml\n├── templates          \\\\ template模块会自动在此目录中寻找Jinja2模板文件\n├── tests\n│   ├── inventory\n│   └── test.yml\n└── vars              \\\\ 应当包含一个main.yml，用于定义此角色用到的变量\n    └── main.yml\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>Role中有两个地方可以定义变量：</p>\n<p>(1).roles/xxx/vars/main.yml</p>\n<p>(2).roles/xxx/defaults/main.yml</p>\n<p>从目录名称中可以看出，defaults/main.yml中用于定义Role的默认变量，那么显然，vars/main.yml用于定义其它变量。这两个文件之间的区别在于，defaults/main.yml中定义的变量优先级低于vars/main.yml中定义的变量。事实上，defaults/main.yml中的变量优先级几乎是最低的，基本上其它任何地方定义的变量都可以覆盖它。</p>\n<blockquote>\n<p>通常会将每个Role放在一个称为roles的目录下。</p>\n</blockquote>\n<p>可以使用ansible-galaxy init --help查看更多选项。比如，使用--init-path选项指定创建的Role路径：</p>\n<div><pre><code>ansible-galaxy init --init-path /etc/ansible/roles first_role\n</code></pre>\n<div><span>1</span><br></div></div><p>不难发现文件大多命名为main.yml，这是Role在使用到它们的时候默认加载的文件名，如果换成其它名称，则需要手动使用include_xxx或import_xxx去加载。另一方面，这些目录下可能还包含其它yml文件，比如tasks目录下有多个任务文件，那么需要在这些main.yml文件中使用include_xxx或import_xxx去加载其它外部文件。</p>\n<p>有了Role之后，就可以将Role当作一个不可分割的任务整体来对待，一个Role相当于是一个完整的功能。但在此需要明确一个层次上的概念，Role只是用于组织一个或多个任务，原来在play级别中使用tasks指令来定义任务，现在使用roles指令来引入Role中定义的任务。当然，roles指令和tasks指令并不冲突，它们可以共存。通过下面的图，应能帮助理解Role的角色。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210316113538941.png\" alt=\"image-20210316113538941\"></p>\n<p>既然Role是一个完整的任务体系，拥有Role之后就可以去使用它，或者也可以分发给别人使用，但是一个Role仅仅只是目录而已，如何去使用这个Role呢？</p>\n<h2 id=\"_3-组织-task\"> 3 组织 task</h2>\n<p>在此前的所有示例中，一直都是将所有任务编写在单个playbook文件中。但Ansible允许我们将任务分离到不同的文件中，然后去引入外部任务文件。</p>\n<p>用示例来解释会非常简单。</p>\n<p>假设，两个playbook文件pb1.yml和pb2.yml。pb1.yml文件内容如下：</p>\n<div><pre><code>---\n- name: play1\n  hosts: localhost\n  gather_facts: false\n  tasks:\n    - name: task1 in play1\n      debug:\n        msg: &quot;task1 in play1&quot;\n\n  # - include_tasks: pb2.yml\n    - import_tasks: pb2.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>pb2.yml文件内容如下：</p>\n<div><pre><code>- name: task2 in play1\n  debug:\n    msg: &quot;task2 in play1&quot;\n\n- name: task3 in play1\n  debug:\n    msg: &quot;task3 in play1&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>上面是在pb1.yml文件中通过import_tasks引入了额外的任务文件pb2.yml，对于此处来说，将import_tasks替换成include_tasks也能正确工作，不会有任何影响。</p>\n<blockquote>\n<p>执行结果有差别：import_tasks，相当于有三个task，include_tasks，相当于有四个task，多了一个included的任务</p>\n</blockquote>\n<p>但如果是在循环中(比如loop)，则只能使用include_tasks而不能再使用import_tasks。</p>\n<p><strong>在循环中include文件</strong></p>\n<p>修改pb1.yml和pb2.yml文件内容：</p>\n<p>pb1.yml内容如下，注意该文件中的include_tasks指令：</p>\n<div><pre><code>---\n- name: play1\n  hosts: localhost\n  gather_facts: false\n  tasks:\n    - name: task1 in play1\n      debug:\n        msg: &quot;task1 in play1&quot;\n\n    - name: include two times\n      include_tasks: pb2.yml\n      loop:\n        - ONE\n        - TWO\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>pb2.yml内容如下，注意该文件中的{{item}}变量引用：</p>\n<div><pre><code>- name: task2 in play1\n  debug:\n    msg: &quot;task2 in {{item}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>执行pb1.yml文件，观察执行结果：</p>\n<div><pre><code>PLAY [play1] *****************************************************************************************************************************************************************************************************************************\n\nTASK [task1 in play1] ********************************************************************************************************************************************************************************************************************\nok: [localhost] =&gt; {\n    &quot;msg&quot;: &quot;task1 in play1&quot;\n}\n\nTASK [include two times] *****************************************************************************************************************************************************************************************************************\nincluded: /etc/ansible/playbooks/pb2.yml for localhost\nincluded: /etc/ansible/playbooks/pb2.yml for localhost\n\nTASK [task2 in play1] ********************************************************************************************************************************************************************************************************************\nok: [localhost] =&gt; {\n    &quot;msg&quot;: &quot;task2 in ONE&quot;\n}\n\nTASK [task2 in play1] ********************************************************************************************************************************************************************************************************************\nok: [localhost] =&gt; {\n    &quot;msg&quot;: &quot;task2 in TWO&quot;\n}\n\nPLAY RECAP *******************************************************************************************************************************************************************************************************************************\nlocalhost                  : ok=5    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>上面是在loop循环中加载两次pb2.yml文件，该文件中的任务被执行了两次，并且在pb2.yml中能够引用外部文件(pb1.yml)中定义的变量{{item}}。</p>\n<p>分析一下上面的执行流程：</p>\n<p>(1).解析playbook文件pb1.yml</p>\n<p>(2).执行第一个play</p>\n<p>(3).当执行到pb1.yml中的第二个任务时，该任务在循环中，且其作用是加载外部任务文件pb2.yml</p>\n<p>(4).开始循环，每轮循环都加载、解析并执行pb2.yml文件中的所有任务</p>\n<p>(5).退出正是因为include_tasks指令是在遇到它的时候才进行加载解析以及执行，所以在pb2.yml中才能使用变量{{item}}。</p>\n<p>如果将上面loop循环中的include_tasks换成import_tasks呢？语法会报错，后面我会详细解释。</p>\n<h2 id=\"_4-组织handler\"> 4 组织handler</h2>\n<p>handler其本质也是task，所以也可以使用include_tasks或import_tasks来加载外部任务文件。但是它们引入handler任务文件的方式有很大的差别。</p>\n<p>先看include_tasks引入handler任务文件的示例：</p>\n<p>pb1.yml的内容：</p>\n<div><pre><code>---\n- name: play1\n  hosts: localhost\n  gather_facts: false\n  handlers:\n    - name: h1\n      include_tasks: handler1.yml\n\n  tasks:\n    - name: task1 in play1\n      debug:\n        msg: &quot;task1 in play1&quot;\n      changed_when: true\n      notify:\n        - h1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>注意在tasks的任务中加了一个指令changed_when: true，它用来强制指定它所在任务的changed状态，如果条件为真，则changed=1，否则changed=0。使用这个指令是因为debug模块默认不会引起changed=1行为，所以只能使用该指令来强制其状态为changed=1。</p>\n<p>当Ansible监控到了changed=1，notify指令会生效，它会去触发对应的handler，它触发的handler的名称是handler1，其作用是使用include_tasks指令引入handler1.yml文件。</p>\n<p>下面是handler1.yml文件的内容：</p>\n<div><pre><code>---\n- name: h11\n  debug:\n    msg: &quot;task h11&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>注意两个名称，一个是notify触发handler的任务名称(&quot;h1&quot;)，一个是引入文件中任务的名称(&quot;h11&quot;)，它们是两个任务。再来看import_tasks引入handler文件的示例，注意观察名称的不同点。</p>\n<div><pre><code>---\n- name: play1\n  hosts: localhost\n  gather_facts: false\n  handlers:\n    - name: h2\n      import_tasks: handler2.yml\n\n  tasks:\n    - name: task1 in play1\n      debug:\n        msg: &quot;task1 in play1&quot;\n      changed_when: true\n      notify:\n        - h22\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>下面是使用import_tasks引入的handler2.yml文件的内容：</p>\n<div><pre><code>---\n- name: h22\n  debug:\n    msg: &quot;task h22&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在引入handler任务文件的时候，include_tasks和import_tasks的区别表现在：</p>\n<p>(1).使用include_tasks时，notify指令触发的handler名称是include_tasks任务本身的名称</p>\n<p>(2).使用import_tasks时，notify指令触发的handler名称是import_tasks所引入文件内的任务名称</p>\n<p>其实分析一下就很容易理解为什么notify触发的名称要不同：</p>\n<p>(1).include_tasks是在遇到这个指令的时候才引入文件的，所以notify不可能去触发外部handler文件里的名称(h11)，外部handler文件中的名称在其引入之前根本就不存在</p>\n<p>(2).import_tasks是在解析playbook的时候引入的，换句话说，在执行play之前就已经把外部handler文件的内容引入并替换在handler的位置处，而原来的名称(h2)则被覆盖了</p>\n<p>最后，不要忘了import_tasks或include_tasks自身也是任务，既然是任务，就能使用task层次的指令。</p>\n<p>但这两个指令对task层次指令的处理方式不同，相关细节仍然保留到后文统一解释。</p>\n<h2 id=\"_5-组织变量\"> 5 组织变量</h2>\n<p>在Ansible中有很多种定义变量的方式，想要搞清楚所有这些散布各个角落的知识，是一个很大的难点。好在，我们没必要去过多关注，只需要掌握几个常用的变量定义和应用的方式即可。此处我要介绍的是将变量定义在外部文件中，然后去引入这些外部文件中的变量。</p>\n<p>引入保存了变量的文件有两种方式：include_vars和vars_files。此外，还可以在命令行中使用-e或--extra-vars选项来引入。</p>\n<h3 id=\"_5-1-vars-files\"> 5.1 vars_files</h3>\n<p>先介绍vars_files，它是一个play级别的指令，可用于在解析playbook的阶段引入一个或多个保存了变量的外部文件。</p>\n<p>例如，pb.yml文件如下：</p>\n<div><pre><code>---\n- name: play1\n  hosts: localhost\n  gather_facts: false\n  vars_files:\n    - varfile1.yml\n    - varfile2.yml\n  tasks:\n    - debug:\n        msg: &quot;var in varfile1: {{var1}}&quot;\n    - debug:\n        msg: &quot;var in varfile2: {{var2}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>pb.yml文件通过vars_files引入了两个变量文件，变量文件的写法要求遵守YAML或JSON格式。下面是这两个文件的内容：</p>\n<div><pre><code># 下面是varfile1.yml文件的内容\n---\nvar1: &quot;value1&quot;\nvar11: &quot;value11&quot;\n\n# 下面是varfile2.yml文件的内容\n---\nvar2: &quot;value2&quot;\nvar22: &quot;value22&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>需要说明的是，vars_files指令是play级别的指令，且是在解析playbook的时候加载并解析的，所以所引入变量的变量是play范围内可用的，其它play不可使用这些变量。</p>\n<h3 id=\"_5-2-include-vars\"> 5.2 include_vars</h3>\n<p>include_vars指令也可用于引入外部变量文件，它和vars_files不同。一方面，include_vars是模块提供的功能，它是一个实实在在的任务，所以在这个任务执行之后才会创建变量。另一方面，既然include_vars是一个任务，它就可以被一些task级别的指令控制，如when指令。</p>\n<p>例如：</p>\n<div><pre><code>---\n- name: play1\n  hosts: localhost\n  gather_facts: false\n  tasks:\n    - name: include vars from files\n      include_vars: varfile1.yml\n      when: 3 &gt; 2\n       \n    - debug:\n        msg: &quot;var in varfile1: {{var1}}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>上面示例中引入变量文件的方式是直接指定文件名include_vars: varfile1.yml，也可以明确使用file参数来指定路径。</p>\n<div><pre><code>- name: include vars from files\n  include_vars:\n    file: varfile1.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果想要引入多个文件，可以使用循环的方式。例如：</p>\n<div><pre><code>- name: include two var files\n  include_vars:\n    file: &quot;{{item}}&quot;\n  loop:\n    - varfile1.yml\n    - varfile2.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>需要注意，include_vars在引入文件的时候要求文件已经存在，如果有多个可能的文件但不确定文件是否已经存在，可以使用with_first_found指令或lookup的first_found插件，它们作用相同，都用于从文件列表中找出存在的文件，找到后立即停止，之前就曾提到过with_xxx的本质是调用lookup对应的插件。</p>\n<p>例如：</p>\n<div><pre><code>tasks:\n  - name: include vars from files\n    include_vars:\n      file: &quot;{{item}}&quot;\n    with_first_found:\n      - varfile1.yml\n      - varfile2.yml\n      - default.yml\n\n# 等价于：\ntasks:\n  - name: include vars from files\n    include_vars:\n      file: &quot;{{ lookup(&#39;first_found&#39;,any_files) }}&quot;\n    vars:\n      any_files:\n        - varfile1.yml\n        - varfile2.yml\n        - default.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>此外，include_vars还能从目录中导入多个文件，默认会递归到子目录中。例如：</p>\n<div><pre><code>- name: Include all files in vars/all\n  include_vars:\n    dir: vars/all\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_5-3-extra-vars选项\"> 5.3 --extra-vars选项</h3>\n<p>ansible-playbook命令的-e选项或--extra-vars选项也可以用来定义变量或引入变量文件。</p>\n<div><pre><code># 定义单个变量\n$ ansible-playbook -e &#39;var1=&quot;value1&quot;&#39; xxx.yml\n\n# 定义多个变量\n$ ansible-playbook -e &#39;var1=&quot;value1&quot; var2=&quot;value2&quot;&#39; xxx.yml\n\n# 引入单个变量文件\n$ ansible-playbook -e &#39;@varfile1.yml&#39; xxx.yml\n\n# 引入多个变量文件\n$ ansible-playbook -e &#39;@varfile1.yml&#39; -e &#39;@varfile2.yml&#39; xxx.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>因为是通过选项的方式来定义变量的，所以它所定义的变量是全局的，对所有play都有效。</p>\n<p>通常来说不建议使用-e选项，因为这对用户来说是不透明也不友好的，要求用户记住要定义哪些变量。</p>\n<h2 id=\"_6-组织playbook文件\"> 6 组织playbook文件</h2>\n<p>当单个playbook文件中的任务过多时，或许就是将任务划分到多个文件中的时刻。</p>\n<p>import_playbook指令可用于引入playbook文件，它是一个play级别的指令，其本质是引入外部文件中的一个或多个play。</p>\n<p>例如，pb.yml是入口playbook文件，此文件中引入了其它playbook文件，其内容如下：</p>\n<div><pre><code>---\n# 引入其它playbook文件\n- import_playbook: pb1.yml\n- import_playbook: pb2.yml\n\n# 文件本身的play\n- name: play in self\n  hosts: localhost\n  gather_facts: false\n  tasks:\n    - debug: &#39;msg=&quot;file pb.yml&quot;&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>pb1.yml，pb2.yml文件都是一个完整的playbook，它可以包含一个或多个play</p>\n<h2 id=\"_7-playbook-调用\"> 7 playbook 调用</h2>\n<div><pre><code>ansible-playbook -i /root/xxx.yml  /root/app/main.yml  --limit &quot;lala_xxx&quot; -e &quot;user=wawo&quot;\n</code></pre>\n<div><span>1</span><br></div></div><p>解析：\n-i         指定要运行的主机清单\n--limit    指定运行的ip地址\n-e         指定运行的外部参数</p>\n<p>运行的控制 YAML 文件为： <code>/root/app/main.yml</code></p>\n<div><pre><code>---\n- hosts: all\n  roles:\n    - xxx\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>hosts指定所有(all)的主机，但是由于在外部已经指定了主机的配置，所以all由外部指定参数来进行</p>\n<p>roles指定要执行的具体剧本</p>\n<p>**roles\t**</p>\n<ol>\n<li>\n<p>首先执行meta下的main.yml文件内容     可以设置该role和其它role之前的关联关系。 dependencies</p>\n</li>\n<li>\n<p>gather_facts任务</p>\n</li>\n<li>\n<p>pre_tasks指令中的任务</p>\n</li>\n<li>\n<p>pre_tasks中触发的所有handler</p>\n</li>\n<li>\n<p>roles指令加载的Role,执行tasks下的main.yml文件内容</p>\n</li>\n<li>\n<p>tasks指令中的任务</p>\n</li>\n<li>\n<p>roles和tasks中触发的所有handler, 使用了notify后，会调用 handlers 目录下的main.yml文件</p>\n</li>\n<li>\n<p>post_tasks指令中的任务</p>\n</li>\n<li>\n<p>post_tasks中触发的所有handler</p>\n</li>\n</ol>\n<blockquote>\n<p>用到的变量，会直接加载defaults目录下的main.yml文件,或者vars目录下,</p>\n<p>用到的需要拷贝到远程机器的文件，会放到files目录下,</p>\n<p>用到模板文件，会放到 templates 目录下</p>\n</blockquote>\n<p><strong>写好Role之后就是使用Role，即在一个入口playbook文件中去加载Role。</strong></p>\n<p>加载Role的方式有多种：</p>\n<p>(1).roles指令：play级别的指令，在playbook解析阶段加载对应文件，这是传统的引入Role的方式</p>\n<p>(2).import_role指令：task级别的指令，在playbook解析阶段加载对应文件</p>\n<p>(3).include_role指令：task级别的指令，在遇到该指令的时候才加载Role对应文件</p>\n<p>上面通过roles指令来定义要解析和执行的Role，可以同时指定多个Role，且也可以加上role:参数，例如：</p>\n<div><pre><code>roles:\n  - first_role\n  - role: seconde_role\n  - role: third_role\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>也可以使用include_role和import_role来引入Role，但需注意，这两个指令是tasks级别的，也正因为它们是task级别，使得它们可以和其它task共存。</p>\n<p>例如：</p>\n<div><pre><code>---\n- hosts: localhost\n  gather_facts: false\n  tasks:\n    - debug:\n        msg: &quot;before first role&quot;\n    - import_role:\n         name: first_role\n    - include_role:\n      name: second_role\n    - debug:\n       msg: &quot;after second role&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>这三种引入Role的方式都可以为对应的Role传递参数，例如：</p>\n<div><pre><code>---\n- hosts: localhost\n  gather_facts: false\n  roles:\n    - role: first_role\n      varvar: &quot;valuevalue&quot;\n      vars:\n        var1: value1\n\ntasks:\n- import_role:\n    name: second_role\n  vars:\n    var1: value1\n- include_role:\n    name: third_role\n  vars:\n    var1: value1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>有时候需要让某个Role按需执行，比如对于目标节点是CentOS 7时执行Role7而不执行Role6，目标节点是CentOS 6时执行Role6而不是Role7，这可以使用when指令来控制。</p>\n<p>例如：</p>\n<div><pre><code>---\n- hosts: localhost\n  gather_facts: false\n  roles:\n  # 下面是等价的，分别采用YAML和Json语法书写\n    - role: first_role\n      when: xxx\n    - {role: ffirst_role, when: xxx}\n  tasks:\n  - import_role:\n      name: second_role\n    when: xxx\n  - include_role:\n      name: third_role\n    when: xxx\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>注意，在roles、import_role和include_role三种方式中，when指令的层次。</p>\n<p>通常来说，无论使用哪种方式来引入Role都可以，只是某些场景下需要小心一些陷阱。</p>\n<h2 id=\"_8-playbook解析、动态加载和静态加载\"> 8 playbook解析、动态加载和静态加载</h2>\n<p>还是这个结论：</p>\n<ol>\n<li>\n<p>import_xxx是在playbook的解析阶段加载文件</p>\n</li>\n<li>\n<p>include_xxx是遇到指令的时候加载文件</p>\n</li>\n</ol>\n<p>只要理解了这两个结论，所有相关的现象都能理解。</p>\n<p>那么playbook的解析是什么意思，它做了什么事呢？</p>\n<p>第一个要明确的是playbook解析处于哪个阶段执行：inventory解析完成后、play开始执行前的阶段。</p>\n<p>第二个要明确的是playbook解析做了哪些哪些事。一个简单又直观的描述是，playbook解析过程中，会扫描playbook文件中的内容，然后检查语法并转换成Ansible认识的内部格式，以便让Ansible去执行。</p>\n<p>更具体一点，在解析playbook期间：</p>\n<p>1.当在playbook文件中遇到了roles、include、import_xxx指令，则会将它们指定的文件内容&quot;插入到&quot;指令位置处，也即原文替换，这个过程对我们来说是透明的。实际上并非真的会插入替换，稍后我会再补充，但这样理解会更容易些；</p>\n<ul>\n<li>\n<p>(1).roles、include、import_xxx同属一类，它们都是静态加载，都在playbook解析阶段加载文件，而include_xxx属于另一类，是动态加载，遇到指令的时候临时去加载文件；</p>\n</li>\n<li>\n<p>(2).之所以有这么多看似功能重复的指令，这和Ansible版本的发展有关，不同的版本可能会小有区别；</p>\n</li>\n<li>\n<p>(3).早期版本只有include指令，所以它的行为有些混乱，建议不要对其做太多考究，也尽量不要使用该指令；</p>\n</li>\n</ul>\n<div><pre><code>1、ansible中的include, include_tasks 和 import_tasks 的差别\ninclude 被 deprecated（不建议使用）了. 建议使用 include_tasks 和 import_tasks\n\ninclude_tasks\n是动态的: 在运行时展开. when只应用一次. 被include的文件名可以使用变量.\n\nimport_tasks\n是静态的: 在加载时展开. when在被import的文件里的每个task, 都会重新检查一次. 因为是加载时展开的, 文件名的变量不能是动态设定的.\n请确保文件名中使用到的变量被定义在vars中、vars_files中、或者extra-vars中，静态的import不支持其他方式传入的变量。\n\nWhen using static includes, ensure that any variables used in their names are defined in vars/vars_files or extra-vars passed in from the command line. Static includes cannot use variables from inventory sources like group or host vars.\n除了上述不同之处，在使用&quot;循环操作&quot;和&quot;条件判断&quot;时，&quot;include_tasks&quot;和&quot;import_tasks&quot;也有很多不同点需要注意，注意点如下。\n如果想要对包含的任务列表进行循环操作，则只能使用&quot;include_tasks&quot;关键字，不能使用&quot;import_tasks&quot;关键字，&quot;import_tasks&quot;并不支持循环操作，\n也就是说，使用&quot;loop&quot;关键字或&quot;with_items&quot;关键字对include文件进行循环操作时，只能配合&quot;include_tasks&quot;才能正常运行。\nwhen关键字对&quot;include_tasks&quot;和&quot;import_tasks&quot;的实际操作有着本质区别，区别如下：\n当对&quot;include_tasks&quot;使用when进行条件判断时，when对应的条件只会应用于&quot;include_tasks&quot;任务本身，当执行被包含的任务时，不会对这些被包含的任务重新进行条件判断。\n当对&quot;import_tasks&quot;使用when进行条件判断时，when对应的条件会应用于被include的文件中的每一个任务，当执行被包含的任务时，会对每一个被包含的任务进行同样的条件判断。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>我想各位已经意识到了，使用include_tasks时，这个指令自身占用一个任务，使用import_tasks的时候，这个指令自身没有任务，它所在的任务会在解析playbook的时候被其加载的子任务覆盖。</p>\n<ul>\n<li>无法使用--list-tags列出include_xxx中的tags，无法使用--list-tasks列出include_xxx中的任务，因为它们都是临时动态加载的。</li>\n</ul>\n<h2 id=\"_9-ansible-galaxy和collection\"> 9 Ansible Galaxy和Collection</h2>\n<p>很多时候我们想要实现的Ansible部署需求其实别人已经写好了，所以我们自己不用再动手写(甚至不应该自己写)，直接去网上找别人已经写好的轮子即可。</p>\n<p>Ansible Galaxy(https://galaxy.ansible.com/ )是一个Ansible官方的Role仓库，世界各地的人都在里面分享自己写好的Role，我们可以直接去Galaxy上搜索是否有自己想要的Role，如果有符合自己心意的，直接安装便可。当然，我们也可以将写好的Role分享出去给别人使用。</p>\n<p>Ansible提供了一个ansible-galaxy命令行工具，可以快速创建、安装、管理由该工具维护的Role。它常用的命令有：</p>\n<div><pre><code># 安装Role:\nansible-galaxy install username.role_name\n\n# 移除Role:\nansible-galaxy remove username.role_name\n\n# 列出已安装的Role:\nansible-galaxy list\n\n# 查看Role信息:\nansible-galaxy info username.role_name\n\n# 搜索Role:\nansible-galaxy search role_name\n\n# 创建Role\nansible-galaxy init role_name\n\n# 此外还有：&#39;delete&#39;,&#39;import&#39;, &#39;setup&#39;, &#39;login&#39;\n# 它们都用于管理galaxy.ansible.com个人账户或里面的Role\n# 无视它们\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>虽然Ansible Galaxy中有大量的Role，但有时候我们也会在Github上搜索Role，而且Galaxy仓库上的Role大多也都在Github上。ansible-galaxy install也可以直接从git上下载安装Role。</p>\n<div><pre><code>ansible-galaxy install -p roles/ git+https://github.com/chusiang/helloworld.ansible.role.git\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>Ansible Collection</strong></p>\n<p>对于文件组织结构，在Ansible 2.8以前只支持Role的概念，但Ansible 2.8中添加了一项目前仍处于实验性的功能Collection，它以包的管理模式来结构化管理Ansible playbook涉及到的各个文件。</p>\n<p>比如，我们可以将整个写好的功能构建、打包，然后分发出去，别人就可以使用ansible-galaxy(要求Ansible 2.9)去安装这个打包好的文件，这为自动化构建和部署带来了很大的便利。</p>\n<blockquote>\n<p>参考链接：</p>\n<p>https://blog.51cto.com/cloumn/blog/1567</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20210316113538941.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "5 Ansible变量",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/var/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/var/",
      "content_html": "<h1 id=\"_5-ansible变量\"> 5 Ansible变量</h1>\n<h2 id=\"变量优先级\"> 变量优先级</h2>\n<p>这些变量定义的方法，它们的优先级如下：</p>\n<ol>\n<li>在命令行中定义的变量（即用<code>-e</code>或<code>--extra-vars</code>定义的变量）；</li>\n<li>在Inventory中定义的连接变量（比如：ansible_ssh_user）;</li>\n<li>大多数的其他变量（命令行转换、play中的变量、included的变量、role中的变量等）；</li>\n<li>在Inventory中定义的其他变量；</li>\n<li>Facts变量；</li>\n<li>“Role”默认变量，这个是默认的值，很容易丧失优先权。</li>\n</ol>\n<h2 id=\"变量作用域\"> 变量作用域</h2>\n<p>Ansible中变量主要有五种作用域概念：</p>\n<p>(1).全局作用域：Ansible配置文件、环境变量、命令行选项-e,--extra-vars设置的变量都是全局变量</p>\n<p>(2).Play作用域：整个Play中都有效的变量，vars_files、vars_prompt、play级别的vars以及Role的变量，它们都是play级别的变量</p>\n<p>(3).主机变量：绑定在各主机上的变量，各种方式定义的inventory变量、Facts信息变量(这个就划分在这吧)、set_fact、register、include_vars都是主机变量</p>\n<p>(4).任务变量：只在当前任务中生效的变量，task级别的vars定义的变量属于任务变量</p>\n<p>(5).block变量：只在当前block内生效，block级别的vars定义的变量属于block变量</p>\n<p>最后还有预定义特殊变量未分类，这些变量由Ansible自身内部维护，有些是全局变量，有些是play变量，有些是主机变量，所以不方便对它们分类。</p>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "5.5 使用vault配置加密",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/vault/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/vault/",
      "content_html": "<h1 id=\"_5-5-使用vault配置加密\"> 5.5 使用vault配置加密</h1>\n<h2 id=\"_1-简介\"> 1 简介</h2>\n<p>在使用ansible的过程中，不可避免的会存储一些敏感信息，比如在变量文件中存储帐号密码信息等。</p>\n<p>ansible通过ansible-vault命令行工具来提供对敏感文件的加密和解密。</p>\n<p>ansible-vault可以创建、加密、解密和查看文件。其可以加密任何ansible使用的文件，包括inventory文件，playbook中调用的变量文件等。</p>\n<h2 id=\"_2-ansible-vault常用操作\"> 2 Ansible-vault常用操作</h2>\n<ol>\n<li>创建加密文件</li>\n</ol>\n<div><pre><code>ansible-vault create file\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>编辑加密文件</li>\n</ol>\n<div><pre><code>ansible-vault edit file\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"3\">\n<li>重置密码</li>\n</ol>\n<div><pre><code>ansible-vault rekey file\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"4\">\n<li>加密已有文件</li>\n</ol>\n<div><pre><code>ansible-vault encrypt file\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"5\">\n<li>解密文件</li>\n</ol>\n<div><pre><code>ansible-vault decrypt file\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"6\">\n<li>查看文件</li>\n</ol>\n<div><pre><code>ansible-vault view file\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-ansible-vault配置示例\"> 3 Ansible-vault配置示例</h2>\n<ol>\n<li>创建一个user.yml的变量文件，内容如下:</li>\n</ol>\n<div><pre><code>username: &quot;user1&quot;\npwhash: &quot;$1$GkTPu7we$ZZtdsLPIHkS.fmoVcn3v51&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ol start=\"2\">\n<li>加密上面创建的变量文件：</li>\n</ol>\n<div><pre><code># ansible-vault encrypt user.yml \nNew Vault password: \nConfirm New Vault password: \nEncryption successful\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ol start=\"3\">\n<li>编写playbook文件如下：</li>\n</ol>\n<div><pre><code>- name: create user accounts for all our servers\n  hosts: test\n  become: True\n  remote_user: ansible\n  vars_files:\n    - user.yml\n  tasks:\n    - name: Creating user from user.yml\n      user:\n        name: &quot;{{ username }}&quot;\n        password: &quot;{{ pwhash }}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ol start=\"4\">\n<li>执行playbook</li>\n</ol>\n<div><pre><code># ansible-playbook create_user.yml --ask-vault-pass\nVault password: \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>也可以通过如下操作执行playbook：</p>\n<div><pre><code>echo redhat &gt; vault-pass\nchmod 600 vault-pass\n\nansible-playbook create_user.yml --vault-password-file=vault-pass\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "4.8 yaml语法",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/yaml/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/ansible/yaml/",
      "content_html": "<h1 id=\"_4-8-yaml语法\"> 4.8 yaml语法</h1>\n<h2 id=\"playbook的语法-yaml\"> playbook的语法：YAML</h2>\n<p>ansible的playbook采用yaml语法，它以非常简洁的方式实现了json格式的事件描述。</p>\n<p>yaml之于json就像markdown之于html一样，极度简化了json的书写。</p>\n<p>YAML文件后缀通常为.yaml或.yml。</p>\n<p>YAML在不少工具里都使用，学习它是&quot;一次学习、终生受益&quot;的，所以很有必要把yaml的语法格式做个梳理，系统性地去学一学。</p>\n<p><strong>YAML的基本语法规则如下：</strong></p>\n<p>(1).使用缩进表示层级关系</p>\n<p>(2).缩进时不允许使用Tab键，只允许使用空格</p>\n<p>(3).缩进的空格数目不重要，只要相同层级的元素左对齐即可</p>\n<p>(4).yaml文件以&quot;---&quot;作为文档的开始，以表明这是一个yaml文件</p>\n<blockquote>\n<p>即使没有使用<code>---</code>开头，也不会有什么影响</p>\n</blockquote>\n<p>(5).# 表示注释，从这个字符一直到行尾，都会被解析器忽略</p>\n<p>(6).字符串不用加引号，但在可能产生歧义时，需加引号(单双引号皆可)，比如引用变量时</p>\n<p>(7).布尔值非常灵活，不分区大小写的true/false、yes/no、on/off、y/n、0和1都允许</p>\n<p><strong>YAML支持三种数据结构：</strong></p>\n<p>(1).对象：key/value格式，也称为哈希结构、字典结构或关联数组</p>\n<p>(2).数组：也称为列表</p>\n<p>(3).标量(scalars)：单个值</p>\n<p>可以去找一些在线YAML转换JSON网站，比如 <a href=\"http://yaml-online-parser.appspot.com/\" target=\"_blank\" rel=\"noopener noreferrer\">http://yaml-online-parser.appspot.com</a> 通过在线转换可以验证或查看自己所写的YAML是否出错以及哪里出错。</p>\n<h3 id=\"对象\"> 对象</h3>\n<p>一组键值对，使用冒号隔开key和value。注意，冒号后必须至少一个空格。</p>\n<div><pre><code>name: clay\n</code></pre>\n<div><span>1</span><br></div></div><p>等价于json：</p>\n<div><pre><code>{\n\t&quot;name&quot;: &quot;clay&quot;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"数组\"> 数组</h3>\n<div><pre><code>---\n- Shell\n- Perl\n- Python\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>等价于json：</p>\n<div><pre><code>[&quot;Shell&quot;,&quot;Perl&quot;,&quot;Python&quot;]\n</code></pre>\n<div><span>1</span><br></div></div><p>也可以使用行内数组(内联语法)的写法：</p>\n<div><pre><code>---\n[&quot;Shell&quot;,&quot;Perl&quot;,&quot;Python&quot;]\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>再例如：</p>\n<div><pre><code>---\n- lang1: Shell\n- lang2: Perl\n- lang3: Python\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>等价于json：</p>\n<div><pre><code>[\n    {&quot;lang1&quot;: &quot;Shell&quot;},\n    {&quot;lang2&quot;: &quot;Perl&quot;},\n    {&quot;lang3&quot;: &quot;Python&quot;}\n]\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>将对象和数组混合：</p>\n<div><pre><code>---\nlanguages:\n  - Shell\n  - Perl\n  - Python\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>等价于json：</p>\n<div><pre><code>{\n\t&quot;languages&quot;: [&quot;Shell&quot;,&quot;Perl&quot;,&quot;Python&quot;]\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"字典\"> 字典</h3>\n<div><pre><code>---\nperson1:\n  name: clay\n  age: 18\n  gender: male\n\nperson2:\n  name: wangchi\n  age: 19\n  gender: female\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>等价于json：</p>\n<div><pre><code>{\n  &quot;person2&quot;: {\n    &quot;gender&quot;: &quot;female&quot;,\n    &quot;age&quot;: 19,\n    &quot;name&quot;: &quot;clay&quot;\n  },\n  &quot;person1&quot;: {\n    &quot;gender&quot;: &quot;male&quot;,\n    &quot;age&quot;: 18,\n    &quot;name&quot;: &quot;wangchi&quot;\n  }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>也可以使用行内对象的写法：</p>\n<div><pre><code>---\nperson1: {name: clay, age: 18, gender: male}\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"复合结构\"> 复合结构</h3>\n<div><pre><code>---\n- person1:\n  name: clay\n  age: 18\n  langs:\n    - Perl\n    - Ruby\n    - Shell\n\n- person2:\n  name: xiaofanggao\n  age: 19\n  langs:\n    - Python\n    - Javascript\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>等价于json：</p>\n<div><pre><code>[\n    {\n        &quot;langs&quot;: [\n        &quot;Perl&quot;,\n        &quot;Ruby&quot;,\n        &quot;Shell&quot;\n        ],\n        &quot;person1&quot;: null,\n        &quot;age&quot;: 18,\n        &quot;name&quot;: &quot;clay&quot;\n    },\n    {\n        &quot;person2&quot;: null,\n        &quot;age&quot;: 19,\n        &quot;langs&quot;: [\n        &quot;Python&quot;,\n        &quot;Javascript&quot;\n        ],\n        &quot;name&quot;: &quot;xiaofanggao&quot;\n    }\n]\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id=\"字符串续行\"> 字符串续行</h3>\n<p>字符串可以写成多行，从第二行开始，必须至少有一个单空格缩进。换行符会被转为空格。</p>\n<div><pre><code>str: hello\n  world\n  hello world\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>等价于json：</p>\n<div><pre><code>{\n  &quot;str&quot;: &quot;hello world hello world&quot;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>也可以使用 &gt; 换行，它类似于上面的多层缩进写法。此外，还可以使用|在换行时保留换行符。</p>\n<div><pre><code>that: &gt;\n  Foo\n  Bar\nthis: |\n  Foo\n  Bar\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>等价于json：</p>\n<div><pre><code>{&#39;that&#39;: &#39;Foo Bar&#39;, &#39;this&#39;: &#39;Foo\\nBar\\n&#39;}\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>参考链接：</p>\n<p>https://blog.51cto.com/cloumn/blog/1543</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:41:01.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "gitlab备份迁移升级&集成openldap",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/gitlab/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/gitlab/",
      "content_html": "<h1 id=\"gitlab备份迁移升级-集成openldap\"> gitlab备份迁移升级&amp;集成openldap</h1>\n<h2 id=\"gitlab安装\"> gitlab安装</h2>\n<h3 id=\"安装相关依赖\"> 安装相关依赖</h3>\n<div><pre><code>yum <span>install</span> -y <span>curl</span> policycoreutils-python openssh-server\nyum <span>install</span> postfix\nsystemctl <span>enable</span> postfix\nsystemctl start postfix\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"镜像切换\"> 镜像切换</h3>\n<p>切换为国内的清华源</p>\n<div><pre><code><span># cat gitlab_gitlab-ce.repo </span>\n<span>[</span>gitlab_gitlab-ce<span>]</span>\n<span>name</span><span>=</span>gitlab_gitlab-ce\n<span>baseurl</span><span>=</span>https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/\n<span>repo_gpgcheck</span><span>=</span><span>0</span>\n<span>gpgcheck</span><span>=</span><span>0</span>\n<span>enabled</span><span>=</span><span>1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>由于不同版本号的备份文件不能相互使用，下载旧gitlab中的对应的版本</p>\n<div><pre><code>yum -y <span>install</span> gitlab-ce-11.5.1\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"配置使用\"> 配置使用</h3>\n<p>安装完成之后，可以在<code>/etc/gitblab/gitlab.rb</code>中按照需求修改配置，\n主要需要修改<code>external_url</code>，改成自己使用的 url 地址。\n执行命令配置生效：</p>\n<div><pre><code>gitlab-ctl reconfigure\ngitlab-ctl restart\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"gitlab备份-恢复\"> gitlab备份&amp;恢复</h2>\n<p>Gitlab 成功运行起来之后，最终的事情就是定期的备份，遇到问题后的还原。</p>\n<h3 id=\"备份配置\"> 备份配置</h3>\n<p>默认 Gitlab 的备份文件会创建在<code>/var/opt/gitlab/backups</code>文件夹中，格式为<code>时间戳_日期_版本号_gitlab_backup.tar</code>，例如：<code>1515031353_2018_01_04_10.3.2_gitlab_backup.tar</code>。\n修改备份文件夹，需要修改配置文件<code>/etc/gitlab/gitlab.rb</code>中的：</p>\n<div><pre><code>gitlab_rails<span>[</span><span>'backup_path'</span><span>]</span> <span>=</span> <span>'/your_wish/backups'</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>然后<code>gitlabctl-reconfigure</code>生效。</p>\n<h3 id=\"手动备份\"> 手动备份</h3>\n<p>命令：<code>gitlab-backup create</code></p>\n<p>For GitLab 12.1 and earlier, use <code>gitlab-rake gitlab:backup:create</code>.\n会在命令执行的时间点，在你配置的文件夹或者默认文件夹创建一个备份文件。</p>\n<h3 id=\"自动备份\"> 自动备份</h3>\n<div><pre><code><span>0</span> <span>2</span> * * * /opt/gitlab/bin/gitlab-backup create <span>CRON</span><span>=</span><span>1</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p><strong>Note</strong> For GitLab 12.1 and earlier, use <code>gitlab-rake gitlab:backup:create</code>.</p>\n</blockquote>\n<h3 id=\"备份恢复\"> 备份恢复</h3>\n<p>First make sure your backup tar file is in the backup directory described in the <code>gitlab.rb</code> configuration <code>gitlab_rails['backup_path']</code>. The default is <code>/var/opt/gitlab/backups</code>. It needs to be owned by the <code>git</code> user.</p>\n<div><pre><code>cp 11493107454_2018_04_25_10.6.4-ce_gitlab_backup.tar /var/opt/gitlab/backups/\nchown git.git /var/opt/gitlab/backups/11493107454_2018_04_25_10.6.4-ce_gitlab_backup.tar\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>Stop the processes that are connected to the database. Leave the rest of GitLab running:</p>\n<div><pre><code>gitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\n<span># Verify</span>\ngitlab-ctl status\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>Next, restore the backup, specifying the timestamp of the backup you wish to restore:</p>\n<div><pre><code><span># This command will overwrite the contents of your GitLab database!</span>\ngitlab-backup restore <span>BACKUP</span><span>=</span>1493107454_2018_04_25_10.6.4-ce\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p><strong>Note</strong> For GitLab 12.1 and earlier, use <code>gitlab-rake gitlab:backup:restore</code>.</p>\n</blockquote>\n<blockquote>\n<p><strong>Warning:</strong> <code>gitlab-rake gitlab:backup:restore</code> does not set the right file system permissions on your Registry directory. This is a <a href=\"https://gitlab.com/gitlab-org/gitlab-foss/issues/62759\" target=\"_blank\" rel=\"noopener noreferrer\">known issue</a>. On GitLab 12.2 or newer, you can use <code>gitlab-backup restore</code> to avoid this issue.</p>\n</blockquote>\n<p>Next, restore <code>/etc/gitlab/gitlab-secrets.json</code> if necessary as mentioned above.</p>\n<p>Reconfigure, restart and check GitLab:</p>\n<div><pre><code>gitlab-ctl reconfigure\ngitlab-ctl restart\ngitlab-rake gitlab:check <span>SANITIZE</span><span>=</span>true\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>If there is a GitLab version mismatch between your backup tar file and the installed version of GitLab, the restore command will abort with an error. Install the <a href=\"https://packages.gitlab.com/gitlab/\" target=\"_blank\" rel=\"noopener noreferrer\">correct GitLab version</a> and try again.</p>\n<h2 id=\"gitlab升级\"> gitlab升级</h2>\n<p>It is considered safe to jump between patch versions and minor versions within one major version. For example, it is safe to:</p>\n<ul>\n<li>Upgrade the patch version:\n<ul>\n<li><code>8.9.0</code> -&gt; <code>8.9.7</code></li>\n<li><code>8.9.0</code> -&gt; <code>8.9.1</code></li>\n<li><code>8.9.2</code> -&gt; <code>8.9.6</code></li>\n<li><code>9.5.5</code> -&gt; <code>9.5.9</code></li>\n<li><code>10.6.3</code> -&gt; <code>10.6.6</code></li>\n<li><code>11.11.1</code> -&gt; <code>11.11.8</code></li>\n<li><code>12.0.4</code> -&gt; <code>12.0.9</code></li>\n</ul>\n</li>\n<li>Upgrade the minor version:\n<ul>\n<li><code>8.9.4</code> -&gt; <code>8.12.3</code></li>\n<li><code>9.2.3</code> -&gt; <code>9.5.5</code></li>\n<li><code>10.6.6</code> -&gt; <code>10.8.7</code></li>\n<li><code>11.3.4</code> -&gt; <code>11.11.8</code></li>\n</ul>\n</li>\n</ul>\n<p>Upgrading the major version requires more attention. We cannot guarantee that upgrading between major versions will be seamless. As previously mentioned, major versions are reserved for backwards incompatible changes. We recommend that you first upgrade to the latest available minor version within your major version. By doing this, you can address any deprecation messages that could change behavior in the next major release. To ensure background migrations are successful, increment by one minor version during the version jump before installing newer releases.</p>\n<p>For example: <code>11.11.x</code> -&gt; <code>12.0.x</code> Please see the table below for some examples:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Latest stable version</th>\n<th style=\"text-align:left\">Your version</th>\n<th style=\"text-align:left\">Recommended upgrade path</th>\n<th style=\"text-align:left\">Note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">9.4.5</td>\n<td style=\"text-align:left\">8.13.4</td>\n<td style=\"text-align:left\"><code>8.13.4</code> -&gt; <code>8.17.7</code> -&gt; <code>9.4.5</code></td>\n<td style=\"text-align:left\"><code>8.17.7</code> is the last version in version <code>8</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10.1.4</td>\n<td style=\"text-align:left\">8.13.4</td>\n<td style=\"text-align:left\"><code>8.13.4 -&gt; 8.17.7 -&gt; 9.5.10 -&gt; 10.1.4</code></td>\n<td style=\"text-align:left\"><code>8.17.7</code> is the last version in version <code>8</code>, <code>9.5.10</code> is the last version in version <code>9</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11.3.4</td>\n<td style=\"text-align:left\">8.13.4</td>\n<td style=\"text-align:left\"><code>8.13.4</code> -&gt; <code>8.17.7</code> -&gt; <code>9.5.10</code> -&gt; <code>10.8.7</code> -&gt; <code>11.3.4</code></td>\n<td style=\"text-align:left\"><code>8.17.7</code> is the last version in version <code>8</code>, <code>9.5.10</code> is the last version in version <code>9</code>, <code>10.8.7</code> is the last version in version <code>10</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12.5.8</td>\n<td style=\"text-align:left\">11.3.4</td>\n<td style=\"text-align:left\"><code>11.3.4</code> -&gt; <code>11.11.8</code> -&gt; <code>12.0.9</code> -&gt; <code>12.5.8</code></td>\n<td style=\"text-align:left\"><code>11.11.8</code> is the last version in version <code>11</code></td>\n</tr>\n</tbody>\n</table>\n<p>我的升级路线为：表格中最后一个</p>\n<p>每次升级直接<code>yum -y install gitlab-ce-版本号</code>就可以了</p>\n<p>例如</p>\n<div><pre><code>yum -y <span>install</span> gitlab-ce-11.11.8\n</code></pre>\n<div><span>1</span><br></div></div><p>每升级一次，重载一下配置，重启一下gitlab</p>\n<div><pre><code>gitlab-ctl reconfigure\ngitlab-ctl restart\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"gitlab集成openldap\"> gitlab集成openldap</h2>\n<h3 id=\"setting-up-ldap-sign-in\"> Setting up LDAP sign-in</h3>\n<p>If you have an LDAP directory service such as Active Directory, you can configure GitLab so that your users can sign in with their LDAP credentials. Add the following to <code>/etc/gitlab/gitlab.rb</code>, edited for your server.</p>\n<p>For GitLab Community Edition:</p>\n<p>以下是我ldap的配置</p>\n<div><pre><code><span>### LDAP Settings</span>\n<span>###! Docs: https://docs.gitlab.com/omnibus/settings/ldap.html</span>\n<span>###! **Be careful not to break the indentation in the ldap_servers block. It is</span>\n<span>###!   in yaml format and the spaces must be retained. Using tabs will not work.**</span>\n\ngitlab_rails<span>[</span><span>'ldap_enabled'</span><span>]</span> <span>=</span> <span>true</span>\ngitlab_rails<span>[</span><span>'prevent_ldap_sign_in'</span><span>]</span> <span>=</span> <span>false</span>\ngitlab_rails<span>[</span><span>'ldap_servers'</span><span>]</span> <span>=</span> YAML.load <span>&lt;&lt;-</span><span>EOS\nmain:\n  label: 'LDAP'\n  host: '192.168.x.x'\n  port: 389\n  uid: 'cn'\n  encryption: 'plain'\n  bind_dn: 'cn=admin,dc=xxx,dc=com'\n  password: 'xxx'\n  smartcard_auth: false\n  active_directory: true\n  allow_username_or_email_login: true\n  lowercase_usernames: false\n  base: 'ou=People,dc=xxx,dc=com'\n  user_filter: ''\nEOS</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><div><pre><code>gitlab-ctl reconfigure\ngitlab-ctl restart\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>参考文章：</p>\n<p>https://www.jianshu.com/p/d29c332bcf53</p>\n<p>https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore-for-omnibus-gitlab-installations</p>\n<p>https://www.jianshu.com/p/6361cba123a8</p>\n<p>https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations</p>\n<p>https://docs.gitlab.com/omnibus/settings/ldap.html</p>\n<p>https://www.jianshu.com/p/083cf462fed4</p>\n</blockquote>\n",
      "date_published": "2019-12-20T00:00:00.000Z",
      "date_modified": "2021-04-02T05:50:25.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "Jenkins Job迁移",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/migrate-job/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/migrate-job/",
      "content_html": "<h1 id=\"jenkins-job迁移\"> Jenkins Job迁移</h1>\n<p>在工作中可能会遇到这样的场景，即需要把一个Jenkins Master上的job迁移到另外一台Jenkins Master上，那怎么做比较好呢？</p>\n<p>如果只是单独的一个job且这个job的设置很简单，这种情况下当然可以直接在新的Jenkins Master上直接创建job然后从旧的job拷贝下配置即可。但如果job很多，或者job的配置项较多那手动复制配置肯定是比较傻的行为。那我们现在来介绍下这种配置项较多、job比较多的情况下怎么来迁移这些job。</p>\n<p>现在我搭建了两台Jenkins来进行说明。IP分别为192.168.9.9和192.168.9.8，现在我在.10上创建一个job，如test，然后进行如下配置</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/g62phjjstk.jpeg\" alt=\"img\"></p>\n<p>现在具体来看下如何将上面的配置的job从192.168.9.10的Jenkins上迁移到192.168.9.8的机器上。</p>\n<h2 id=\"job-import-plugin导入\"> <strong>Job Import Plugin导入</strong></h2>\n<p>现在先介绍第一种方式，通过Job Import Plugin方式来进行job的迁移，这种方式比较方便，首先到新的Jenkins上，也就是192.168.9.8上，在192.168.9.8上插件管理里先安装下Job Import Plugin，如下所示：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/jf3clczyv2.jpeg\" alt=\"img\"></p>\n<p>安装完后进入“Manage Jenkins” -&gt; &quot;Configure System&quot;下，找到Job Import Pluguin配置的地方，进行如下设置：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/eug932owyp.jpeg\" alt=\"img\"></p>\n<p><strong>name</strong>: 这个可以任意命名，这里我命名成要拷贝的Jenkins的IP</p>\n<p><strong>Url</strong>: 指要从哪里拷贝的Jenkins的URL，现在我们要从192.168.9.10拷贝job，因此这里要设置成192.168.9.10的Jenkins的URL</p>\n<p><strong>Credentials</strong>：需要添加一个旧Jenkins的账号（也就是192.168.9.10的账号），没有添加的时候点击Add手动添加下，就可以像上面的截图一样下拉选择到这个账号了</p>\n<p>设置完后点击保存下，回到Jenkins首页点击Job Import Plugin就可以进行Job的迁移了，如下所示：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/uov6bpo6hk.jpeg\" alt=\"img\"></p>\n<p>在Job Import Plugin界面，下拉选择刚才添加的配置，然后点击Query按钮就可以搜索出配置的Jenkins下的job了，然后选择需要的job进行迁移导入即可：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/v71i68ivlj.jpeg\" alt=\"img\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/o6jxwkuuba.jpeg\" alt=\"img\"></p>\n<p>因为有时候旧的Jenkins上的插件新Jenkins上未必有，因此可以根据实际情况勾选是否需要安装必要的插件，如上面的截图所示，需不需要覆盖已有的job也根据实际情况勾选下。导入成功会有如下的提示：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/sqfvrcd932.jpeg\" alt=\"img\"></p>\n<p>有了上面的提示后就可以会到新的Jenkins的首页，查看Job有没有成功进入，并进入导入的job查看设置有没有成功的复制过来，如下所示：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/7j29p9rg9g.jpeg\" alt=\"img\"></p>\n<p>可以看到job及其设置成功的被导入到新的job了。</p>\n<p>Job Import Pugin也支持多个job同时拷贝，如果旧的Job里有多个job，如上面的步骤里所示，query出来就有很多job可供选择，只需要勾选多个即可同时进行多个job的导入了。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/dg1ouhsl9j.jpeg\" alt=\"img\"></p>\n<h2 id=\"jenkins-cli方式导入\"> <strong>Jenkins CLI方式导入</strong></h2>\n<p>有时候在公司内部Jenkins部署到不同的网段里，不同网段间可能会限制无法相互访问，这种情况下通过Job Import Plugin进行job导入的方式就行不通了，这时候可以通过Jenkins CLI方式进行job配置导出，然后新Jenkins在根据导出的配置进行再导入操作，完成job的配置迁移 。下面我们来具体讲解下。</p>\n<p>现到旧Jenkins下的Jenkins管理页面找到Jenkins CLI，如下所示：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2yywfzeqrj.jpeg\" alt=\"img\"></p>\n<p>点击进入Jenkins CLI，可以看到Jenkins命令行接口提供很多命令可以用来进行Jenkins的相关操作，可以看到有提供了get-job这样一个命令，这个命令可以将job的定义导出到xml的格式到输出流，这样我们可以通过这个命令将旧Jenkins上的job导出到外部文件，然后还可以看到有另外一个命令create-job，这个命令可以根据已有的xml配置文件进行job创建，那我们可以根据从旧job导出的job配置文件做为输入进行job的创建了。</p>\n<p>首先在旧的Jenkins上的cli页面点击jenkins-cli.jar就可以下载这个jar到本地，如下所示：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/g1ltwl2a3o.jpeg\" alt=\"img\"></p>\n<p>接着点击下Jenkins右上角的账号，选择Configure，然后点击Show API Token，拷贝token，这个token可以用来进行配置导出的时候做为认证使用</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/u30td2vuwj.jpeg\" alt=\"img\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/yrwhwenjqe.jpeg\" alt=\"img\"></p>\n<p>在jenkins-cli.jar下载的根目录下执行如下命令进行job导出，这里我新建了个job，命名为test4，现在执行下如下命令进行test4这个job配置的导出：</p>\n<div><pre><code> java <span>-</span>jar jenkins<span>-</span>cli<span>.</span>jar <span>-</span>s http<span>:</span><span>/</span><span>/</span><span>192.168</span><span>.9</span><span>.10</span><span>:</span><span>8080</span><span>/</span>jenkins <span>-</span>auth admin<span>:</span><span>493375</span>c06bc0006a455005804796c989 get<span>-</span>job <span>\"test4\"</span> <span>></span> test4<span>.</span>xml\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>http://192.168.9.10:8080/jenkins:</strong> 就Job的Jenkins地址</p>\n<p><strong>admin：</strong> 上面截图获取Show API Token下的User ID</p>\n<p>**493375c06bc0006a455005804796c989：**上面截图获取API Token的值</p>\n<p><strong>test4:</strong> 需要导出配置的job名</p>\n<p><strong>test4.xml:</strong> 导出的文件的名称，可任意</p>\n<p>根据实际情况替换下上面的四个值即可</p>\n<p>执行完上面的命令就可以看到test4.xml文件生成了</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/xf64g5cl00.jpeg\" alt=\"img\"></p>\n<p>接着在新的Jenkins下同样先下载下jenkins-cli.jar，然后将上面生成的test4.xml拷贝到新的Jenkins机器下，同样获取下新Jenkins登录账号的API Token和User ID，执行下如下命令就可以进行job导入了</p>\n<div><pre><code>java <span>-</span>jar jenkins<span>-</span>cli<span>.</span>jar <span>-</span>s http<span>:</span><span>/</span><span>/</span><span>192.168</span><span>.9</span><span>.8</span><span>:</span><span>8080</span><span>/</span>jenkins <span>-</span>auth admin<span>:</span><span>51964e7</span>b89a427be5dd2a28f38c86eff create<span>-</span>job test4 <span>&lt;</span>  test4<span>.</span>xml\n</code></pre>\n<div><span>1</span><br></div></div><p>记得将URL替换成新Jenkins的URL，User ID和token也替换下</p>\n<p>上面的命令执行完后，就可以看到在新的Jenkins下新job被成功导入了</p>\n<blockquote>\n<p>转载链接：https://cloud.tencent.com/developer/article/1470433</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/g62phjjstk.jpeg",
      "date_published": "2020-01-16T00:00:00.000Z",
      "date_modified": "2021-04-02T06:00:49.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "使用Jenkins Pipeline自动化构建发布",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/pipeline/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/pipeline/",
      "content_html": "<h1 id=\"使用jenkins-pipeline自动化构建发布\"> 使用Jenkins Pipeline自动化构建发布</h1>\n<h2 id=\"一、jenkins介绍\"> 一、Jenkins介绍</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-91830c936e5fa651.webp\" alt=\"img\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-0fa91d8b2c207c35.webp\" alt=\"img\"></p>\n<h2 id=\"二、jenkins-pipeline介绍\"> 二、Jenkins Pipeline介绍</h2>\n<h3 id=\"jenkins-pipeline总体介绍\"> Jenkins Pipeline总体介绍</h3>\n<blockquote>\n<p>1.Pipeline 是Jenkins 2.X核心特性，帮助Jenkins实现从CI到CD与DevOps的转变\n2.Pipeline 简而言之，就是一套运行于Jenkins上的工作流框架，将原本独立\n运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流\n程编排与可视化。</p>\n</blockquote>\n<h3 id=\"什么是jenkins-pipeline\"> 什么是Jenkins Pipeline</h3>\n<blockquote>\n<p>1.Jenkins Pipeline是一组插件，让Jenkins可以实现持续交付管道的落地和实施。\n2.持续交付管道(CD Pipeline)是将软件从版本控制阶段到交付给用户或客户的完\n整过程的自动化表现。\n3.软件的每一次更改（提交到源代码管理系统）都要经过一个复杂的过程才能被发布。</p>\n</blockquote>\n<ol>\n<li>Pipeline提供了一组可扩展的工具，通过Pipeline Domain Specific Language\n(DSL) syntax可以达到Pipeline as Code的目的</li>\n<li>Pipeline as Code：Jenkinsfile 存储在项目的源代码库</li>\n</ol>\n<h3 id=\"why-pipeline\"> Why Pipeline?</h3>\n<p>本质上，Jenkins 是一个自动化引擎，它支持许多自动模式。 Pipeline向Jenkins中添加了一组强大的工具, 支持用例 简单的CI到全面的CD pipeline。通过对一系列的相关任务进行建模, 用户可以利用pipeline的很多特性:</p>\n<p>• 代码：Pipeline以代码的形式实现，通常被检入源代码控制，使团队能够编辑，\n审查和迭代其CD流程。\n• 可持续性：Jenkins重启或者中断后都不会影响Pipeline Job。\n• 停顿：Pipeline可以选择停止并等待人工输入或批准，然后再继续Pipeline运行。\n• 多功能：Pipeline支持现实世界的复杂CD要求，包括fork/join子进程，循环和\n并行执行工作的能力。\n• 可扩展：Pipeline插件支持其DSL的自定义扩展以及与其他插件集成的多个选项。</p>\n<h3 id=\"pipeline与freestyle区别\"> Pipeline与freestyle区别</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-40a98c55b7188ba8.webp\" alt=\"img\"></p>\n<p>1.Job调度方式\npipeline：通过结构化pipeline 语法进行调度，易于理解与阅读\nfreestyle：通过jenkins api或者cli进行调度</p>\n<p>2.Job显示形式\npipline:提供上帝视角（全局视图）\nfreestyle：没有视图</p>\n<h2 id=\"jenkins-pipeline-基础语法\"> Jenkins Pipeline 基础语法</h2>\n<blockquote>\n<p>官网链接：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fjenkins.io%2Fdoc%2F\" target=\"_blank\" rel=\"noopener noreferrer\">https://jenkins.io/doc/</a></p>\n</blockquote>\n<h3 id=\"pipeline-支持两种语法\"> Pipeline 支持两种语法</h3>\n<p>1.声明式（jenkins2.x新加入的语法）</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-4e99cf386cd7bd51.webp\" alt=\"img\"></p>\n<blockquote>\n<p>特点：</p>\n<p>1.最外层必须由pipline{ //do something }来进行包裹</p>\n<p>2.不需要分号作为分隔符，每个语句必须在一行内</p>\n<p>3.不能直接使用groovy语句（例如循环判断等），需要被script {}包裹</p>\n</blockquote>\n<p>2.脚本式</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-0976ca380ccc0097.webp\" alt=\"img\"></p>\n<blockquote>\n<p>特点：</p>\n<p>1.最外层有node{}包裹</p>\n<p>2.可直接使用groovy语句</p>\n</blockquote>\n<h3 id=\"declarative-pipeline-声明式-核心概念\"> Declarative Pipeline（声明式）核心概念</h3>\n<p>核心概念用来组织pipeline的运行流程</p>\n<blockquote>\n<p>1.pipeline :声明其内容为一个声明式的pipeline脚本</p>\n<p>2.agent:执行节点（job运行的slave或者master节点）</p>\n<p>3.stages:阶段集合，包裹所有的阶段（例如：打包，部署等各个阶段）</p>\n<p>4.stage:阶段，被stages包裹，一个stages可以有多个stage</p>\n<p>5.steps:步骤,为每个阶段的最小执行单元,被stage包裹</p>\n<p>6.post:执行构建后的操作，根据构建结果来执行对应的操作</p>\n</blockquote>\n<p>根据上面几个概念就能够轻易的创建一个简单的pipeline</p>\n<div><pre><code>pipeline<span>{</span>\n    agent any\n    stages<span>{</span>\n        stage<span>(</span><span>\"first stage\"</span><span>)</span><span>{</span>\n            steps<span>(</span><span>\"first steps\"</span><span>)</span><span>{</span>\n                <span>echo</span> <span>\"this is first step\"</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n    post<span>{</span>\n        always<span>{</span>\n            <span>echo</span> <span>\"this is ending...\"</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>下面针对几个核心概念，逐一进行说明</p>\n<h4 id=\"_1-pipeline\"> 1.pipeline</h4>\n<blockquote>\n<p>作用域：应用于全局最外层，表明该脚本为声明式pipeline\n是否必须：必须\n参数：无</p>\n</blockquote>\n<h4 id=\"_2-agent\"> 2.agent</h4>\n<blockquote>\n<p>作用域：可用在全局与stage内\n是否必须：是，\n参数：any,none, label, node,docker,dockerfile</p>\n</blockquote>\n<div><pre><code>pipeline<span>{</span>\n    agent any  <span>//全局必须带有agent表明此pipeline执行节点</span>\n    stages<span>{</span>\n        <span>stage</span><span>(</span><span>\"first stage\"</span><span>)</span><span>{</span>\n            agent <span>{</span> label <span>'master'</span> <span>}</span>  <span>//具体执行的步骤节点，非必须</span>\n            steps<span>{</span>\n                <span>echo</span> <span>\"this is first step\"</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>参数示例：</p>\n<div><pre><code><span>//运行在任意的可用节点上</span>\nagent <span>any</span>\n<span>//全局不指定运行节点，由各自stage来决定</span>\nagent none\n<span>//运行在指定标签的机器上,具体标签名称由agent配置决定</span>\nagent <span>{</span> label <span>'master'</span> <span>}</span>\n<span>//node参数可以扩展节点信息</span>\nagent <span>{</span> \n     node <span>{</span>\n         label <span>'master'</span>\n         customWorkspace <span>'xxx'</span>\n    <span>}</span> \n<span>}</span>\n<span>//使用指定运行的容器</span>\nagent <span>{</span> docker <span>'python'</span>  <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h4 id=\"_3-stages\"> 3.stages</h4>\n<blockquote>\n<p>作用域：全局或者stage阶段内，每个作用域内只能使用一次</p>\n<p>是否必须：全局必须</p>\n<p>参数：无</p>\n</blockquote>\n<div><pre><code>pipeline<span>{</span>\n    agent any\n    stages<span>{</span>\n        <span>stage</span><span>(</span><span>\"first stage\"</span><span>)</span><span>{</span>\n            stages<span>{</span>  <span>//嵌套在stage里</span>\n                <span>stage</span><span>(</span><span>\"inside\"</span><span>)</span><span>{</span>\n                    steps<span>{</span>\n                        <span>echo</span> <span>\"inside\"</span>\n                    <span>}</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n        <span>stage</span><span>(</span><span>\"stage2\"</span><span>)</span><span>{</span>\n            steps<span>{</span>\n                <span>echo</span> <span>\"outside\"</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>看下运行结果,发现嵌套的stage也是能够展现在视图里面的</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-1c06fd744811b10b.webp\" alt=\"img\"></p>\n<h4 id=\"_4-stage\"> 4.stage</h4>\n<blockquote>\n<p>作用域：被stages包裹，作用在自己的stage包裹范围内</p>\n<p>是否必须：必须</p>\n<p>参数：需要一个string参数，表示此阶段的工作内容</p>\n<p>备注：stage内部可以嵌套stages，内部可单独制定运行的agent</p>\n</blockquote>\n<h4 id=\"_5-steps\"> 5.steps</h4>\n<p>作用域：被stage包裹，作用在stage内部\n是否必须：必须\n参数：无</p>\n<h4 id=\"_6-post\"> 6.post</h4>\n<p>作用域：作用在pipeline结束后者stage结束后\n条件：always、changed、failure、success、unstable、aborted</p>\n<h3 id=\"declarative-pipeline-声明式-指令\"> Declarative Pipeline（声明式）指令</h3>\n<p>指令是帮助pipeline更容易的执行命令，可以理解为一个封装好的公共函数和方法，提供给pipeline使用</p>\n<h4 id=\"_1-environment-声明一个全局变量或者步骤内部的局部变量\"> 1.environment：声明一个全局变量或者步骤内部的局部变量</h4>\n<div><pre><code>pipeline<span>{</span>\n    agent any\n    environment <span>{</span>\n        <span>P1</span><span>=</span><span>\"parameters 1\"</span>\n    <span>}</span>\n    stages<span>{</span>\n        stage<span>(</span><span>\"stage2\"</span><span>)</span><span>{</span>\n            environment <span>{</span>\n                <span>P2</span><span>=</span><span>\"parameters 2\"</span>\n            <span>}</span>\n            steps<span>{</span>\n                <span>echo</span> <span>\"<span>$P1</span>\"</span>\n                <span>echo</span> <span>\"<span>$P2</span>\"</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h4 id=\"_2-options-options指令能够提供给脚本更多的选项\"> 2.options:options指令能够提供给脚本更多的选项</h4>\n<ul>\n<li>buildDiscarder:指定build history与console的保存数量\n用法：options { buildDiscarder(logRotator(numToKeepStr: '1')) }</li>\n<li>disableConcurrentBuilds：设置job不能够同时运行\n用法：options { disableConcurrentBuilds() }</li>\n<li>skipDefaultCheckout：跳过默认设置的代码check out\n用法：options { skipDefaultCheckout() }</li>\n<li>skipStagesAfterUnstable:一旦构建状态变得UNSTABLE，跳过该阶段\n用法：options { skipStagesAfterUnstable() }</li>\n<li>checkoutToSubdirectory:在工作空间的子目录进行check out\n用法：options { checkoutToSubdirectory('children_path') }</li>\n<li>timeout:设置jenkins运行的超时时间，超过超时时间，job会自动被终止\n用法：options { timeout(time: 1, unit: 'MINUTES') }</li>\n<li>retry :设置retry作用域范围的重试次数\n用法：options { retry(3) }</li>\n<li>timestamps:为控制台输出增加时间戳\n用法：options { timestamps() }</li>\n</ul>\n<p>备注：当options作用在stage内部的时候，可选的只能是跟stage相关的选项（skipDefaultCheckout、timeout、retry、timestamps)</p>\n<p>以其中几个作为例子</p>\n<div><pre><code>pipeline<span>{</span>\n    agent any\n    options <span>{</span>\n       timestamps<span>(</span><span>)</span> \n       disableConcurrentBuilds<span>(</span><span>)</span>\n        \n    <span>}</span>\n    stages<span>{</span>\n        \n        stage<span>(</span><span>\"stage1\"</span><span>)</span><span>{</span>\n            options <span>{</span> timeout<span>(</span>time:1,unit:<span>'MINUTES'</span><span>)</span> \n                        retry<span>(</span><span>2</span><span>)</span>\n            <span>}</span>\n            steps<span>{</span>\n                <span>echo</span> <span>\"beging====================\"</span>\n                <span>sh</span> <span>\"xxx.sh\"</span>\n            <span>}</span>\n        <span>}</span>   \n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h4 id=\"_3-parameters-提供pipeline运行的参数\"> 3.parameters：提供pipeline运行的参数</h4>\n<ul>\n<li>作用域：被最外层pipeline所包裹，并且只能出现一次，参数可被全局使用</li>\n<li>好处：使用parameters好处是能够使参数也变成code,达到pipeline as code，pipeline中设置的参数会自动在job构建的时候生成，形成参数化构建</li>\n<li>用法：</li>\n</ul>\n<div><pre><code>pipeline<span>{</span>\n    agent any\n    parameters <span>{</span>\n        string<span>(</span>name: <span>'P1'</span>, defaultValue: <span>'it is p1'</span>, description: <span>'it is p1'</span><span>)</span>\n        booleanParam<span>(</span>name: <span>'P2'</span>, defaultValue: true, description: <span>'it is p2'</span><span>)</span>\n    <span>}</span>\n    stages<span>{</span>\n        stage<span>(</span><span>\"stage1\"</span><span>)</span><span>{</span>\n            steps<span>{</span>\n                <span>echo</span> <span>\"<span>$P1</span>\"</span>\n                <span>echo</span> <span>\"<span>$P2</span>\"</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>自动生成的构建参数</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-cdd0be1f6dcfea2e.webp\" alt=\"img\"></p>\n<h4 id=\"_4-triggers-触发器是自动化运行pipeline的方法\"> 4.triggers:触发器是自动化运行pipeline的方法</h4>\n<ul>\n<li>作用域：被pipeline包裹，在符合条件下自动触发pipeline</li>\n</ul>\n<p>目前包含三种自动触发的方式：\n第一种：cron</p>\n<ul>\n<li>作用：以指定的时间来运行pipeline</li>\n<li>用法：triggers { cron('*/1 * * * *') }</li>\n</ul>\n<p>第二种：pollSCM</p>\n<ul>\n<li>作用：以固定的时间检查代码仓库更新（或者当代码仓库有更新时）自动触发pipeline构建</li>\n<li>用法：triggers { pollSCM('H */4 * * 1-5') }或者triggers { pollSCM() }（后者需要配置post-commit/post-receive钩子）</li>\n</ul>\n<p>第三种：upstream</p>\n<ul>\n<li>作用：可以利用上游Job的运行状态来进行触发</li>\n<li>用法：triggers { upstream(upstreamProjects: 'job1,job2', threshold: hudson.model.Result.SUCCESS) }</li>\n</ul>\n<div><pre><code>pipeline<span>{</span>\n    agent any\n    <span>//说明：当test_8或者test_7运行成功的时候，自动触发</span>\n    triggers <span>{</span> <span>upstream</span><span>(</span><span>upstreamProjects</span><span>:</span> <span>'test_8,test_7'</span><span>,</span> <span>threshold</span><span>:</span> hudson<span>.</span>model<span>.</span>Result<span>.</span><span>SUCCESS</span><span>)</span> <span>}</span>\n    stages<span>{</span>\n        <span>stage</span><span>(</span><span>\"stage1\"</span><span>)</span><span>{</span>\n            steps<span>{</span>\n                <span>echo</span> <span>\"hello\"</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id=\"_5-tools-用于引用配置好的工具\"> 5.tools:用于引用配置好的工具</h4>\n<p>引用的工具需要在管理页面的全局工具配置里配置过</p>\n<div><pre><code>pipeline <span>{</span>\n    agent <span>any</span>\n    tools <span>{</span>\n        maven <span>'apache-maven-3.0.1'</span> \n    <span>}</span>\n    stages <span>{</span>\n        <span>stage</span><span>(</span><span>'Example'</span><span>)</span> <span>{</span>\n            steps <span>{</span>\n                sh <span>'mvn --version'</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h4 id=\"_6-input-input指令允许暂时中断pipeline执行-等待用户输入-根据用户输入进行下一步动作\"> 6.input:input指令允许暂时中断pipeline执行，等待用户输入，根据用户输入进行下一步动作</h4>\n<div><pre><code>pipeline <span>{</span>\n    agent any\n    stages <span>{</span>\n        stage<span>(</span><span>'Example'</span><span>)</span> <span>{</span>\n            input <span>{</span>\n                message <span>\"Should we continue?\"</span>\n                ok <span>\"Yes, we should.\"</span>\n                submitter <span>\"alice,bob\"</span>\n                parameters <span>{</span>\n                    string<span>(</span>name: <span>'PERSON'</span>, defaultValue: <span>'Mr Jenkins'</span>, description: <span>'Who should I say hello to?'</span><span>)</span>\n                <span>}</span>\n            <span>}</span>\n            steps <span>{</span>\n                <span>echo</span> <span>\"Hello, <span>${PERSON}</span>, nice to meet you.\"</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>看下效果</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-767303542aa7a1ee.webp\" alt=\"img\"></p>\n<h4 id=\"_7-when-根据when指令的判断结果来决定是否执行后面的阶段\"> 7.when：根据when指令的判断结果来决定是否执行后面的阶段</h4>\n<p>可选条件</p>\n<ul>\n<li>branch ：判断分支名称是否符合预期\n用法：when { branch 'master' }</li>\n<li>environment ： 判断环境变量是否符合预期\n用法：when { environment name: 'DEPLOY_TO', value: 'production' }</li>\n<li>expression：判断表达式是否符合预期\n用法：when { expression { return params.DEBUG_BUILD } }</li>\n<li>not : 判断条件是否为假\n用法：when { not { branch 'master' } }</li>\n<li>allOf：判断所有条件是不是都为真\n用法：when { allOf { branch 'master'; environment name: 'DEPLOY_TO', value: 'production' } }</li>\n<li>anyOf：判断是否有一个条件为真\n用法：when { anyOf { branch 'master'; branch 'staging' } }</li>\n</ul>\n<p>特别的：如果我们想要在进入agent之前进行判断，需要将beforeAgent设置为true</p>\n<div><pre><code>pipeline <span>{</span>\n    agent none\n    stages <span>{</span>\n        <span>stage</span><span>(</span><span>'Example Build'</span><span>)</span> <span>{</span>\n            steps <span>{</span>\n                <span>echo</span> <span>'Hello World'</span>\n            <span>}</span>\n        <span>}</span>\n        <span>stage</span><span>(</span><span>'Example Deploy'</span><span>)</span> <span>{</span>\n            agent <span>{</span>\n                label <span>\"some-label\"</span>\n            <span>}</span>\n            when <span>{</span>\n                beforeAgent <span>true</span> <span>//设置先对条件进行判断，符合预期才进入steps</span>\n                branch <span>'production'</span>\n            <span>}</span>\n            steps <span>{</span>\n                <span>echo</span> <span>'Deploying'</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id=\"并行执行\"> 并行执行</h3>\n<p>通过将阶段设置为parallel来表明该stage为并行运行，但是需要注意以下几点</p>\n<ul>\n<li>一个stage只能有一个steps或者parallel</li>\n<li>嵌套的stages里不能使用parallel</li>\n<li>parallel不能包含agent或者tools</li>\n<li>通过设置failFast 为true表示：并行的job中如果其中的一个失败，则终止其他并行的stage</li>\n</ul>\n<div><pre><code>pipeline <span>{</span>\n    agent any\n    stages <span>{</span>\n        stage<span>(</span><span>'Non-Parallel Stage'</span><span>)</span> <span>{</span>\n            steps <span>{</span>\n                <span>echo</span> <span>'Non-parallel'</span>\n            <span>}</span>\n        <span>}</span>\n        stage<span>(</span><span>'Parallel Stage'</span><span>)</span> <span>{</span>\n            agent any\n            failFast <span>true</span>\n            parallel <span>{</span>\n                stage<span>(</span><span>'parallel 1'</span><span>)</span> <span>{</span>\n                    agent any\n                    steps <span>{</span>\n                        <span>echo</span> <span>\"parallel 1\"</span>\n                    <span>}</span>\n                <span>}</span>\n                stage<span>(</span><span>'parallel 2'</span><span>)</span> <span>{</span>\n                    steps <span>{</span>\n                        <span>echo</span> <span>\"parallel 2\"</span>\n                    <span>}</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h3 id=\"脚本\"> 脚本</h3>\n<blockquote>\n<p>在声明式的pipeline中默认无法使用脚本语法，但是pipeline提供了一个脚本环境入口：script{},通过使用script来包裹脚本语句，即可使用脚本语法</p>\n</blockquote>\n<ul>\n<li>条件判断：</li>\n</ul>\n<div><pre><code>pipeline <span>{</span>\n    agent any\n    stages <span>{</span>\n        stage<span>(</span><span>'stage 1'</span><span>)</span> <span>{</span>\n            steps <span>{</span>\n                script<span>{</span>\n                    <span>if</span> <span>(</span> <span>\"1\"</span> <span>==</span><span>\"1\"</span> <span>)</span> <span>{</span>\n                        <span>echo</span> <span>\"lalala\"</span>\n                    <span>}</span>else <span>{</span>\n                        <span>echo</span> <span>\"oooo\"</span>\n                    <span>}</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ul>\n<li>异常处理</li>\n</ul>\n<div><pre><code>pipeline <span>{</span>\n    agent any\n    stages <span>{</span>\n        <span>stage</span><span>(</span><span>'stage 1'</span><span>)</span> <span>{</span>\n            steps <span>{</span>\n                script<span>{</span>\n                    <span>try</span> <span>{</span>\n                        sh <span>'exit 1'</span>\n                    <span>}</span>\n                    <span>catch</span> <span>(</span><span>exc</span><span>)</span> <span>{</span>\n                        <span>echo</span> <span>'Something failed'</span>\n                        \n                    <span>}</span>\n                <span>}</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"局部变量的定义和传递\"> 局部变量的定义和传递</h3>\n<p>自定义变量（局部）</p>\n<div><pre><code>def username = &#39;Jenkins&#39;\necho &quot;Hello Mr.${username}&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>环境变量（局部）</p>\n<div><pre><code>withEnv([&#39;MYTOOL_HOME=/usr/local/mytool&#39;]){\n    sh &#39;$MYTOOL_HOME/bin/start&#39;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"exit-code-stdout-and-stderr-返回值和输出\"> exit code, stdout and stderr 返回值和输出</h3>\n<p>其做法是，把stdout定向到一个文件，sh 配置 returnStatus: true，它的返回是一个0或非0的整数，然后从文件读取stdout的内容。stderr同理可得。</p>\n<div><pre><code>def status = sh(returnStatus: true, script: &quot;git merge --no-edit $branches &gt; merge_output.txt&quot;)\nif (status != 0) {\n  currentBuild.result = &#39;FAILED&#39;\n  def output = readFile(&#39;merge_output.txt&#39;).trim()\n  slackSend channel: SLACK_CHANNEL, message: &quot;&lt;${env.JOB_URL}|${env.JOB_NAME}&gt; ran into an error merging the PR branches into the ${TARGET_BRANCH} branch:\\n```\\n${output}\\n```\\n&lt;${env.BUILD_URL}/console|See the full output&gt;&quot;, color: &#39;warning&#39;, tokenCredentialId: &#39;slack-token&#39;\n  error &#39;Merge conflict&#39;\n}\nsh &#39;rm merge_output.txt&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"三、前端项目实例\"> 三、前端项目实例</h2>\n<p>vue</p>\n<div><pre><code>pipeline {\n    agent { label &#39;master&#39;}\n\n    options {\n        timestamps()\n        disableConcurrentBuilds()\n        buildDiscarder(\n            logRotator(\n                numToKeepStr: &#39;20&#39;,\n                daysToKeepStr: &#39;30&#39;,\n            )\n        )\n    }\n\n    parameters {\n        choice(\n           name: &quot;DEPLOY_FLAG&quot;,\n           choices: [&#39;deploy&#39;, &#39;rollback&#39;],\n           description: &quot;发布/回滚&quot;\n        )\n    }\n\n    /*=======================================常修改变量-start=======================================*/\n\n    environment {\n        gitUrl = &quot;http://gitlab.schengle.com/driving-frontend/h5.git&quot;\n        branchName = &quot;master&quot;\n        gitlabCredentialsId = &quot;437c69b5-a874-4da6-8fe1-61e0275fdf0d&quot;\n        projectBuildDir = &quot;build&quot;\n        projectBuildPath = &quot;${env.WORKSPACE}/${projectBuildDir}/&quot;\n        nginxIp = &quot;192.168.16.141&quot;\n        nginxHtmlRoot = &quot;/tmp/${env.JOB_NAME}&quot;\n        owner = &quot;font&quot;\n        group = &quot;font&quot;\n        backupRootDir = &quot;/opt/backup&quot;\n        backupJob = &quot;${backupRootDir}/${env.JOB_NAME}&quot;\n        backupDir = &quot;${backupJob}/${env.BUILD_NUMBER}&quot;\n        rollbackVersion = &quot;&quot;\n    }\n\n    /*=======================================常修改变量-end=======================================*/\n\n    stages {\n        stage(&#39;Deploy&#39;) {\n            when {\n                expression { return params.DEPLOY_FLAG == &#39;deploy&#39; }\n            }\n            stages {\n                stage(&#39;Pre Env&#39;) {\n                    steps {\n                        echo &quot;======================================项目名称 = ${env.JOB_NAME}&quot;\n                        echo &quot;======================================项目 URL = ${gitUrl}&quot;\n                        echo &quot;======================================项目分支 = ${branchName}&quot;\n                        echo &quot;======================================当前编译版本号 = ${env.BUILD_NUMBER}&quot;\n                        echo &quot;======================================项目 Build 文件夹路径 = ${projectBuildPath}&quot;\n                        echo &quot;======================================项目 Nginx 的 ROOT 路径 = ${nginxHtmlRoot}&quot;\n                    }\n                }\n\n                stage(&#39;Git Clone&#39;) {\n                    steps {\n                        git branch: &quot;${branchName}&quot;,\n                        credentialsId: &quot;${gitlabCredentialsId}&quot;,\n                        url: &quot;${gitUrl}&quot;\n                    } \n                }\n\n                stage(&#39;NPM Install&#39;) {\n                    steps {\n                        nodejs(&#39;nodejs&#39;) {\n                            sh &quot;npm install&quot;\n                        }\n                    }\n                }\n\n                stage(&#39;NPM Build&#39;) {\n                    steps {\n                        nodejs(&#39;nodejs&#39;) {\n                            sh &quot;npm run build&quot;\n                        }\n                    }\n                }\n\n                stage(&#39;Backup&#39;) {\n                    agent { label &#39;ansible&#39;}\n                    steps {\n                        script {\n                            try {\n                                isItBackupToday = sh (returnStatus: true, script:&#39;ansible ${nginxIp} -m shell -a &quot;ls -l --time-style=+%D ${backupJob} | grep $(date +%D)&quot;&#39;)\n                                if (isItBackupToday !=0){\n                                    try {\n                                        sh &#39;ansible ${nginxIp} -m file -a &quot;path=${backupDir} state=directory owner=${owner} group=${group}&quot;&#39;\n                                        sh &#39;ansible ${nginxIp} -m shell -a &quot;cp -a ${nginxHtmlRoot}/* ${backupDir}&quot;&#39;\n                                    }\n                                    catch (exc) {\n                                        echo &#39;Something failed!&#39;\n                                    }  \n                                }\n                            }\n                            catch (exc) {\n                                echo &#39;Something failed!&#39;\n                            }                             \n                        }\n                    }\n                }\n\n                stage(&#39;Nginx Deploy&#39;) {\n                    agent { label &#39;ansible&#39;}\n                    steps {\n                        sh &#39;ansible ${nginxIp} -m synchronize -a &quot;src=${projectBuildPath} dest=${nginxHtmlRoot} delete=yes&quot;&#39;\n                        sh &#39;ansible ${nginxIp} -m file -a &quot;path=${nginxHtmlRoot} owner=${owner} group=${group} recurse=yes&quot;&#39;\n                    }\n                }\n\n                stage(&#39;Tar Build&#39;) {\n                    steps {\n                        sh &quot;tar -zcf  ${env.JOB_NAME}.tar.gz ${projectBuildDir}&quot;\n                    }\n                }\n\n                stage(&#39;Archive Artifacts&#39;) {\n                    steps {\n                        archiveArtifacts &quot;${env.JOB_NAME}.tar.gz&quot;\n                    }\n                }\n            }\n        }\n\n        stage(&#39;Rollback&#39;) {\n            when {\n                expression { return params.DEPLOY_FLAG == &#39;rollback&#39; }\n            }\n            agent { label &#39;ansible&#39;}\n            steps{\n                script {\n                    sh &#39;ansible ${nginxIp} -m shell -a &quot;ls -l  ${backupJob}&quot; | grep -v &quot;CHANGED&quot;&#39;\n                    rollbackVersion = input(\n                        message: &quot;请填写要回滚的版本&quot;,\n                        parameters: [\n                            string(name:&#39;BUILD_NUMBER&#39;)\n                        ]\n                    )\n                    sh &#39;ansible ${nginxIp} -m file -a &quot;path=${nginxHtmlRoot} state=absent&quot;&#39;\n                    sh &#39;ansible ${nginxIp} -m file -a &quot;path=${nginxHtmlRoot} state=directory owner=${owner} group=${group}&quot;&#39;                    \n                    withEnv([&quot;rollbackVersion=${rollbackVersion}&quot;]){\n                        sh &#39;ansible ${nginxIp} -m shell -a &quot;cp -a  ${backupJob}/${rollbackVersion}/* ${nginxHtmlRoot}&quot;&#39;\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br></div></div><p>这个jenkinsfile中有保存   制品，</p>\n<p>需要注意的是：制品的保存时间，和jenkins丢弃旧的构建参数，相同</p>\n<blockquote>\n<p>参考链接\nhttps://www.jianshu.com/p/f1167e8850cd</p>\n<p>https://blog.csdn.net/triThirty/article/details/91381502</p>\n<p>https://www.cnblogs.com/pekkle/p/9882927.html</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/2399048-91830c936e5fa651.webp",
      "date_published": "2020-01-16T00:00:00.000Z",
      "date_modified": "2021-04-02T06:00:49.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "jenkins 常见问题",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/qa/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/qa/",
      "content_html": "<h1 id=\"jenkins-常见问题\"> jenkins 常见问题</h1>\n<h2 id=\"jenkins报错error-cloning-remote-repo-origin\"> Jenkins报错Error cloning remote repo 'origin'</h2>\n<p>Jenkins配置了2个节点，但是只有master安装了git，很有可能任务被调到slave上执行所以报错</p>\n<p>解决办法</p>\n<ul>\n<li>slave安装git</li>\n<li>指定任务在master执行</li>\n</ul>\n<h2 id=\"jenkins添加从节点失败\"> jenkins添加从节点失败</h2>\n<p>jenkins在添加从节点时\n可以在启动方式中选择：Non verifying Verification Strategy</p>\n<h2 id=\"jenkins配置ldap错误导致无法登陆的问题\"> Jenkins配置ldap错误导致无法登陆的问题</h2>\n<p>为了方便用户管理，通过ldap集中式认证，让Gitlab和Jenkins都接入，这样就省去每个系统都是要创建用户的麻烦了。上一篇<a href=\"https://www.58jb.com/html/121.html\" target=\"_blank\" rel=\"noopener noreferrer\">Jenkins整合ldap认证</a>的文章中有网友发邮件说了，配置不当导致Jenkins无法登陆，可能文章未能详细说明。</p>\n<p>运维人员都会有这样的操作，修改任何配置文件前都会来一个备份。就是确保万一出错了可以回到之前的状态。所以建议就是Jenkins配置的问题，特别是这个登陆认证的配置，一搞错了就无法登陆。甚至无法正常访问到系统。\n默认Centos7使用rpm安装的目录为：/var/lib/jenkins/</p>\n<p>备份配置文件：config.xml</p>\n<div><pre><code>[root@jenkins ~]# cp /var/lib/jenkins/config.xml{,$(date +%F)}\n[root@jenkins ~]# ls /var/lib/jenkins/config.xml\nconfig.xml            config.xml2019-06-12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>然后在config.xml配置文件中找到这段关于ldap认证的信息：</p>\n<div><pre><code>  &lt;securityRealm class=&quot;hudson.security.LDAPSecurityRealm&quot; plugin=&quot;ldap@1.20&quot;&gt;\n    &lt;disableMailAddre***esolver&gt;false&lt;/disableMailAddre***esolver&gt;\n    &lt;configurations&gt;\n      &lt;jenkins.security.plugins.ldap.LDAPConfiguration&gt;\n        &lt;server&gt;ldap://XXXXXX.com:389&lt;/server&gt;\n        &lt;rootDN&gt;dc=XXXXXX,dc=com&lt;/rootDN&gt;\n        &lt;inhibitInferRootDN&gt;false&lt;/inhibitInferRootDN&gt;\n        &lt;userSearchBase&gt;&lt;/userSearchBase&gt;\n        &lt;userSearch&gt;uid={0}&lt;/userSearch&gt;\n        &lt;groupMembershipStrategy class=&quot;jenkins.security.plugins.ldap.FromGroupSearchLDAPGroupMembershipStrategy&quot;&gt;\n          &lt;filter&gt;cn=jenkins&lt;/filter&gt;\n        &lt;/groupMembershipStrategy&gt;\n        &lt;managerDN&gt;uid=jarry,ou=People,dc=XXXXXX,dc=com&lt;/managerDN&gt;\n        &lt;managerPasswordSecret&gt;{AQAAABAAAAAQWfZrb7qoIjewuj3SK/z53/oRo86cW5wi/t07QeW/4mM=}&lt;/managerPasswordSecret&gt;\n        &lt;displayNameAttributeName&gt;uid&lt;/displayNameAttributeName&gt;\n        &lt;mailAddressAttributeName&gt;mail&lt;/mailAddressAttributeName&gt;\n        &lt;ignoreIfUnavailable&gt;false&lt;/ignoreIfUnavailable&gt;\n        &lt;extraEnvVars class=&quot;linked-hash-map&quot;&gt;\n          &lt;entry&gt;\n            &lt;string&gt;&lt;/string&gt;\n            &lt;string&gt;&lt;/string&gt;\n          &lt;/entry&gt;\n        &lt;/extraEnvVars&gt;\n      &lt;/jenkins.security.plugins.ldap.LDAPConfiguration&gt;\n    &lt;/configurations&gt;\n    &lt;userIdStrategy class=&quot;jenkins.model.IdStrategy$CaseInsensitive&quot;/&gt;\n    &lt;groupIdStrategy class=&quot;jenkins.model.IdStrategy$CaseInsensitive&quot;/&gt;\n    &lt;disableRolePrefixing&gt;true&lt;/disableRolePrefixing&gt;\n  &lt;/securityRealm&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>上面的配置不当导致了无法通过ldap认证，而且导致jenkins也无法正常登陆了，可以把上面一段修改成以下样子：</p>\n<div><pre><code>   &lt;securityRealm class=&quot;hudson.security.HudsonPrivateSecurityRealm&quot;&gt;\n     &lt;disableSignup&gt;false&lt;/disableSignup&gt;\n     &lt;enableCaptcha&gt;false&lt;/enableCaptcha&gt;\n   &lt;/securityRealm&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>文章来源：https://www.58jb.com/html/jenkins_ldap_login_failure.html</p>\n",
      "date_published": "2020-01-16T00:00:00.000Z",
      "date_modified": "2021-04-02T06:00:49.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "Jenkins关闭和重启的实现方式",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/restart/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/restart/",
      "content_html": "<h1 id=\"jenkins关闭和重启的实现方式\"> Jenkins关闭和重启的实现方式</h1>\n<h2 id=\"关闭jenkins\"> 关闭jenkins</h2>\n<p>只需要在访问jenkins服务器的网址url地址后加上exit。例如我jenkins的地址http://localhost:8080/，那么我只需要在浏览器地址栏上敲下<strong>http://localhost:8080/exit</strong> 网址就能关闭jenkins服务.</p>\n<h2 id=\"重启jenkins\"> 重启Jenkins</h2>\n<p><strong>http://localhost:8080/restart</strong></p>\n<h2 id=\"重新加载配置信息\"> 重新加载配置信息</h2>\n<p><strong>http://localhost:8080/reload</strong></p>\n",
      "date_published": "2020-01-16T00:00:00.000Z",
      "date_modified": "2021-04-02T06:00:49.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "jenkins的安装配置",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/automate/jenkins/",
      "content_html": "<h1 id=\"jenkins的安装配置\"> jenkins的安装配置</h1>\n<h2 id=\"ansible安装jenkins\"> ansible安装jenkins</h2>\n<div><pre><code>ansible-galaxy <span>install</span> clay_wangzhi.jenkins\n</code></pre>\n<div><span>1</span><br></div></div><p>galaxy中有详细的文档说明：</p>\n<blockquote>\n<p>链接地址：https://galaxy.ansible.com/clay_wangzhi/jenkins</p>\n</blockquote>\n<p>额外注意一些插件的安装：</p>\n<div><pre><code>Role-based Authorization Strategy  #权限控制插件\ngit-parameter\nPublish Over SSH\nDIngDIng\ngit-parameter #选项参数增加，git-brach选项\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"配置管理工具\"> 配置管理工具</h2>\n<p>安装完成后，配置管理工具</p>\n<h3 id=\"安装并配置git\"> 安装并配置git</h3>\n<div><pre><code>yum -y <span>install</span> <span>git</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>编辑git环境变量为/usr/bin/git</p>\n<h3 id=\"安装并配置maven\"> 安装并配置maven</h3>\n<div><pre><code><span>wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz\n<span>tar</span> -xvf apache-maven-3.6.3-bin.tar.gz\n<span>mv</span> apache-maven-3.6.3 /usr/local/maven\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>vim /etc/profile.d/maven.sh</code></p>\n<div><pre><code><span>#!/bin/bash</span>\n<span>export</span> <span>M2_HOME</span><span>=</span>/usr/local/maven\n<span>export</span> <span><span>PATH</span></span><span>=</span><span>$PATH</span><span>:</span><span>$M2_HOME</span>/bin\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code>source /etc/profile.d/maven.sh\nmvn --version\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>编辑maven的环境变量为/usr/local/maven</p>\n<h3 id=\"安装并配置ansible\"> 安装并配置ansible</h3>\n<div><pre><code>yum -y <span>install</span> ansible\n</code></pre>\n<div><span>1</span><br></div></div><p>编辑ansible的环境变量为/usr/bin</p>\n<h2 id=\"jenkins集成openldap\"> jenkins集成openldap</h2>\n<p>参考图片</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/jen_ld.png\" alt=\"jen_ld\"></p>\n<blockquote>\n<p>集成ldap参考链接：https://www.cnblogs.com/mascot1/p/10498513.html</p>\n</blockquote>\n<h2 id=\"三种构建方式\"> 三种构建方式</h2>\n<p>**jenkins触发式构建：<strong>用于开发环境部署</strong>，**开发人员push代码或者合并代码到gitlab项目的master分支，jenkins就部署代码到对应服务器。</p>\n<p>**jenkins参数化构建：**用于测试环境预上线环境部署，开发push代码或者合并代码到gitlab项目的master分支之后，并不会部署代码，而是需要登录到jenkins的web界面，点击构建按钮，传入对应的参数（比如参数需要构建的tag，需要部署的分支）然后才会部署。</p>\n<p><strong>jenkins定时构建</strong>：用于APP自动打包，定时构建是在参数化构建的基础上添加的，开发人员可以登录jenkins手动传入tag进行打包，如果不手动打包，那么jenkins就每天凌晨从gitlab拉取最新的APP代码打包。</p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/jen_ld.png",
      "date_published": "2020-01-16T00:00:00.000Z",
      "date_modified": "2021-04-02T06:00:49.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "自动化工具"
      ]
    },
    {
      "title": "命名",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/golang/4.1%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/golang/4.1%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/",
      "content_html": "<h2 id=\"命名\"> 命名</h2>\n<p>命名规则：</p>\n<p>1）可以使用字母 数字 下划线</p>\n<p>2）不允许使用数字开头</p>\n<p>3）不允许使用系统关键字</p>\n<p>4）区分大小写</p>\n<p>5）见名知意</p>\n<p>函数命名规则：</p>\n<p>1）包本身的名字一般总是小写字母开头</p>\n<p>2）可以被外部访问的包是大写字母开头</p>\n<p>作用域命名规则：\n1）局部变量一般用<code>i</code>这类的短名字</p>\n<p>2）全局变量的名字一般较长，更有意义</p>\n<p>命名习惯：</p>\n<p>1）推荐使用驼峰式命名。</p>\n<h2 id=\"声明\"> 声明</h2>\n<p>Go语言主要有四种类型的声明语句：</p>\n<p>1） var 变量</p>\n<p>2） const 常量</p>\n<p>3） type 类型</p>\n<p>4） func 函数实体</p>\n<p><strong>一个函数的声明由一个函数名字、参数列表（由函数的调用者提供参数变量的具体值）、一个可选的返回值列表和包含函数定义的函数体组成。</strong></p>\n<p>如果函数没有返回值，那么返回值列表是省略的。</p>\n<p>执行函数从函数的第一个语句开始，依次顺序执行直到遇到renturn返回语句，如果没有返回语句则是执行到函数末尾，然后返回到函数调用者。</p>\n<h2 id=\"变量\"> 变量</h2>\n<p>变量声明的一般语法：</p>\n<div><pre><code>var 变量名字 类型 = 表达式\n</code></pre>\n<div><span>1</span><br></div></div><p>其中“类型”或“= 表达式”两个部分可以省略其中的一个。</p>\n<p>如果省略的是类型信息，那么将根据初始化表达式来推导变量的类型信息。</p>\n<p>如果初始化表达式被省略，那么将用零值初始化该变量。</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>零值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数值</td>\n<td>0</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>false</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>空字符串</td>\n</tr>\n<tr>\n<td>接口</td>\n<td>nil</td>\n</tr>\n<tr>\n<td>引用</td>\n<td>nil</td>\n</tr>\n<tr>\n<td>slice/map/chan</td>\n<td>nil</td>\n</tr>\n<tr>\n<td>数组/结构</td>\n<td>每个元素或字段的零值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"简短变量声明-自动推导类型\"> 简短变量声明（自动推导类型）</h3>\n<p>简短变量声明被广泛用于大部分的局部变量的声明和初始化。</p>\n<p>var形式的声明语句往往是用于需要显式指定变量类型地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。</p>\n<p>声明方法：</p>\n<div><pre><code>名字 := 表达式\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"指针\"> 指针</h3>\n<p>一个指针的值是另一个变量的地址。</p>\n<p>一个指针对应变量在内存中的存储位置。</p>\n<p>并不是每一个值都会有一个内存地址，但是对于每一个变量必然有对应的内存地址。</p>\n<p>通过指针，我们可以直接读或更新对应变量的值，而不需要知道该变量的名字（如果变量有名字的话）。</p>\n<div><pre><code>x := 1\np := &amp;x // p, of type *int, points to x\nfmt.Println(*p) // &quot;1&quot;\n*p = 2 // equivalent to x = 2\nfmt.Println(x) // &quot;2&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>变量有时候被称为可寻址的值。即使变量由表达式临时生成，那么表达式也必须能接受&amp;取地址操作。</p>\n<p>任何类型的指针的零值都是nil。</p>\n<h3 id=\"new函数\"> new函数</h3>\n<p>表达式new(T)将创建一个T类型的匿名变量，初始化为T类型的零值，然后返回变量地址，返回的指针类型为*T。</p>\n<div><pre><code>p := new(int) // p, *int 类型, 指向匿名的 int 变量\nfmt.Println(*p) // &quot;0&quot;\n*p = 2 // 设置 int 匿名变量的值为 2\nfmt.Println(*p) // &quot;2&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"赋值\"> 赋值</h2>\n<p>使用赋值语句可以更新一个变量的值，最简单的赋值语句是将要被赋值的变量放在=的左边，新值的表达式放在=的右边。</p>\n<div><pre><code>x = 1 // 命令变量的赋值\n*p = true // 通过指针间接赋值\nperson.name = &quot;bob&quot; // 结构体字段赋值\ncount[x] = count[x] * scale // 数组、slice或map的元素赋值\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"元组赋值-多重赋值\"> 元组赋值（多重赋值）</h3>\n<p>元组赋值是另一种形式的赋值语句，它允许同时更新多个变量的值。</p>\n<div><pre><code>x, y = y, x\na[i], a[j] = a[j], a[i]\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>例题：计算两个整数值的的最大公约数（GCD）</p>\n<div><pre><code>func gcd(x, y int) int {\nfor y != 0 {\nx, y = y, x%y\n}\nreturn x\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>例题：计算斐波纳契数列（Fibonacci）的第N个数：</p>\n<div><pre><code>func fib(n int) int {\nx, y := 0, 1\nfor i := 0; i &lt; n; i++ {\nx, y = y, x+y\n}\nreturn x\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>有些表达式会产生多个值，比如调用一个有多个返回值的函数。当这样一个函数调用出现在元组赋值右边的表达式中时（译注：右边不能再有其它表达式），左边变量的数目必须和右边一致。</p>\n<p>如果<code>map查找</code>、<code>类型断言</code>或<code>通道接收</code>出现在赋值语句的右边，它们都可能会产生两个结果，有一个额外的布尔结果表示操作是否成功：</p>\n<div><pre><code>v, ok = m[key] // map lookup\nv, ok = x.(T) // type assertion\nv, ok = &lt;-ch // channel receive\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>译注：map查找）、类型断言或通道接收出现在赋值语句的右边时，并不一定是产生两个结果，也可能只产生一个结果。对于值产生一个结果的情形，map查找失败时会返回零值，类型断言失败时会发送运行时panic异常，通道接收失败时会返回零值（阻塞不算是失败）。例如下面的例子：</p>\n<div><pre><code>v = m[key] // map查找，失败时返回零值\nv = x.(T) // type断言，失败时panic异常\nv = &lt;-ch // 管道接收，失败时返回零值（阻塞不算是失败）\n_, ok = m[key] // map返回2个值\n_, ok = mm[&quot;&quot;], false // map返回1个值\n_ = mm[&quot;&quot;] // map返回1个值\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>和变量声明一样，我们可以用下划线空白标识符_来丢弃不需要的值。</p>\n<div><pre><code>_, err = io.Copy(dst, src) // 丢弃字节数\n_, ok = x.(T) // 只检测类型，忽略具体值\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"类型\"> 类型</h2>\n<p>变量或表达式的类型定义了对应存储值的属性特征，例如数值在内存的存储大小（或者是元素的bit个数），它们在内部是如何表达的，是否支持一些操作符，以及它们自己关联的方法集等。</p>\n<p>在任何程序中都会存在一些变量有着相同的内部结构，但是却表示完全不同的概念。例如，一个int类型的变量可以用来表示一个循环的迭代索引、或者一个时间戳、或者一个文件描述符、或者一个月份；一个float64类型的变量可以用来表示每秒移动几米的速度、或者是不同温度单位下的温度；一个字符串可以用来表示一个密码或者一个颜色的名称。</p>\n<p>一个类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构。新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的。</p>\n<p>类型声明方法：</p>\n<div><pre><code>type 类型名字 底层类型\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>类型声明语句一般出现在包一级，因此如果新创建的类型名字的首字符大写，则在外部包也可以使用</strong>。</p>\n<h2 id=\"包和文件\"> 包和文件</h2>\n<p>Go语言中的包和其他语言的库或模块的概念类似，目的都是为了支持模块化、封装、单独编译和代码重用。</p>\n<p>每个包都对应一个独立的名字空间。</p>\n<p>例如，在image包中的Decode函数和在unicode/utf16包中的 Decode函数是不同的。</p>\n<p>要在外部引用该函数，必须显式使用image.Decode或utf16.Decode形式访问。</p>\n<p><strong>包级别的常量名都是以大写字母开头</strong>。</p>\n<h3 id=\"导入包\"> 导入包</h3>\n<p>除了包的导入路径，每个包还有一个包名，包名一般是短小的名字（并不要求包名是唯一的），包名在包的声明处指定。按照惯例，一个包的名字和包的导入路径的最后一个字段相同，例如gopl.io/ch2/tempconv包的名字一般是tempconv。\n导入语句将导入的包绑定到一个短小的名字，然后通过该短小的名字就可以引用包中导出的全部内容。</p>\n<h3 id=\"包的初始化\"> 包的初始化</h3>\n<p>包的初始化首先是解决包级变量的依赖顺序，然后安照包级变量声明出现的顺序依次初始化：</p>\n<div><pre><code>var a = b + c // a 第三个初始化, 为 3\nvar b = f() // b 第二个初始化, 为 2, 通过调用 f (依赖c)\nvar c = 1 // c 第一个初始化, 为 1\nfunc f() int { return c + 1 }\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>对于在包级别声明的变量，如果有初始化表达式则用表达式初始化，还有一些没有初始化表达式的，例如某些表格数据初始化并不是一个简单的赋值过程。在这种情况下，我们可以用一个特殊的init初始化函数来简化初始化工作。每个文件都可以包含多个<code>init初始化函数</code>。</p>\n<div><pre><code>func init() { /* ... */ }\n</code></pre>\n<div><span>1</span><br></div></div><p>以这种方式，可以确保在main函数执行之前，所有依然的包都已经完成初始化工\n作了。</p>\n<h2 id=\"作用域\"> 作用域</h2>\n<p>一个声明语句将程序中的实体和一个名字关联，比如一个函数或一个变量。声明语句的作用域是指源代码中可以有效使用这个名字的范围。</p>\n<p>不要将作用域和生命周期混为一谈。</p>\n<p>声明语句的作用域对应的是一个源代码的文本区域；它是一个<strong>编译时的属性</strong>。</p>\n<p>一个变量的生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个<strong>运行时的概念</strong>。</p>\n<p>语法块是由花括弧所包含的一系列语句，就像函数体或循环体花括弧对应的语法块那样。语法块内部声明的名字是无法被外部语法块访问的。语法决定了内部声明的名字的作用域范围。</p>\n<p>有一个语法块为整个源代码，称为全局语法块；</p>\n<p>然后是每个包的包语法决；每个for、if和switch语句的语法决；</p>\n<p>每个switch或select的分支也有独立的语法决；当然也包括显式书写的语法块（花括弧包含的语句）。</p>\n<p>对于内置的类型、函数和常量，比如int、len和true等是在全局作用域的，因此可以在整个程序中直接使用。</p>\n<p>控制流标号，就是break、continue或goto语句后面跟着的那种标号，则是函数级的作用域。</p>\n<p>下面的代码有三个不同的变量x，因为它们是定义在不同的词法域（这个例子只是为了演示作用域规则，但不是好的编程风格）。</p>\n<div><pre><code>func main() {\nx := &quot;hello!&quot;\nfor i := 0; i &lt; len(x); i++ {\nx := x[i]\nif x != &#39;!&#39; {\nx := x + &#39;A&#39; - &#39;a&#39;\nfmt.Printf(&quot;%c&quot;, x) // &quot;HELLO&quot; (one letter per iteration)\n}\n}\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>正如上面例子所示，并不是所有的词法域都显式地对应到由花括弧包含的语句；还有一些隐含的规则。</p>\n<p>上面的for语句创建了两个词法域：花括弧包含的是显式的部分是for的循环体部分词法域，另外一个隐式的部分则是循环的初始化部分，比如用于迭代变量i的初始化。</p>\n<p>隐式的词法域部分的作用域还包含条件测试部分和循环后的迭代部分（i++），当然也包含循环体词法域。\n下面的例子同样有三个不同的x变量，每个声明在不同的词法域，一个在函数体词法域，一个在for隐式的初始化词法域，一个在for循环体词法域；只有两个块是显式创建的：</p>\n<div><pre><code>func main() {\nx := &quot;hello&quot;\nfor _, x := range x {\nx := x + &#39;A&#39; - &#39;a&#39;\nfmt.Printf(&quot;%c&quot;, x) // &quot;HELLO&quot; (one letter per iteration)\n}\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "01 Python基础语法",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-basic-grammar/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-basic-grammar/",
      "content_html": "<h1 id=\"_01-python基础语法\"> 01 Python基础语法</h1>\n<p>Python 语言 后续补充</p>\n<p>计算机基础知识 后续补充</p>\n<h2 id=\"python-解释器\"> Python 解释器</h2>\n<table>\n<thead>\n<tr>\n<th>解释器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>CPython</code></td>\n<td>官方，C 语言开发，最广泛的 Python 解释器</td>\n</tr>\n<tr>\n<td><code>IPython</code></td>\n<td>一个交互式、功能增强的<code>CPython</code></td>\n</tr>\n<tr>\n<td><code>PyPy</code></td>\n<td>Python 语言写的 Python 解释器，<code>JIT</code>技术，动态编译 Python 代码</td>\n</tr>\n<tr>\n<td><code>Jython</code></td>\n<td>Python 的源代码编译成 Java 的字节码，跑在<code>JVM</code>上</td>\n</tr>\n<tr>\n<td><code>IronPython</code></td>\n<td>与<code>Jytho</code>n类似，运行在<code>.Net</code>平台上的解释器，Python 代码被编译成<code>.Net</code>的字节码</td>\n</tr>\n<tr>\n<td><code>stackless</code></td>\n<td>Python的增强版本解释器，不使用<code>CPython</code>的 C 的栈，采用微线程概念编程，并发编程</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"基础语法\"> 基础语法</h2>\n<h3 id=\"注释\"> 注释</h3>\n<p><code>#</code> 井号标注的文本</p>\n<h3 id=\"数字\"> 数字</h3>\n<ul>\n<li>\n<p>整数<code>int</code></p>\n<ul>\n<li><code>Python3</code>开始不再区分 long 、int ，long 被重命名为int，所以只有 int 类型了</li>\n<li>进制表示：\n<ul>\n<li>十进制10</li>\n<li>十六进制0x10</li>\n<li>八进制0o10</li>\n<li>二进制0b10</li>\n</ul>\n</li>\n<li>bool 类型，有2个值 True、False</li>\n</ul>\n</li>\n<li>\n<p>浮点数 float</p>\n<ul>\n<li>1.2、3.1415、-0.12、1.46e9等价于科学计数法1.46*10<sup>9</sup></li>\n</ul>\n</li>\n<li>\n<p>复数 complex</p>\n<ul>\n<li>1+2j 或 +2J</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字符串\"> 字符串</h3>\n<ul>\n<li>使用‘ ”单双引号引用的字符的序列</li>\n<li>'''和&quot;&quot;&quot; 单双三引号，可以跨行、可以在其中自由的使用单双引号</li>\n<li>r 前缀：在字符串前面加上 r 或者 R 前缀，表示该字符串不做特殊的处理</li>\n<li>f 前缀：3.6版本开始，新增 f 前缀，格式化字符串</li>\n</ul>\n<h3 id=\"转义序列\"> 转义序列</h3>\n<ul>\n<li><code>\\\\</code> <code>\\t</code> <code>\\r</code> <code>\\n</code> <code>\\'</code> <code>\\&quot;</code></li>\n<li>上面每一个转义字符只代表一个字符，例如<code>\\t</code>显示时占了4个字符位置，但是它是一个字符</li>\n<li>前缀 r，把里面的所有字符当普通字符对待，则转义字符就不转义了</li>\n</ul>\n<p>转义：让字符不再是它当前的意义，例如 \\t，t 就不是当前意义字符 t 了，而是被 \\ 转成了 tab 键</p>\n<h3 id=\"缩进\"> 缩进</h3>\n<ul>\n<li>未使用 C 等语言的花括号，而是采用缩进的方式表示层次关系</li>\n<li>约定使用4个空格缩进</li>\n</ul>\n<h3 id=\"续行\"> 续行</h3>\n<ul>\n<li>在行尾使用 \\，注意 \\ 之后除了紧跟着换行之外不能有其他字符</li>\n<li>如果使用各种括号，认为括号内是一个整体，其内部跨行不用 \\</li>\n</ul>\n<h3 id=\"标识符\"> 标识符</h3>\n<p><strong>标识符</strong></p>\n<ol>\n<li>一个名字，用来指代一个值</li>\n<li>只能是字母、下划线和数字</li>\n<li>只能以字母或下划线开头</li>\n<li>不能是 python 的关键字，例如 def、class 就不能作为标识符</li>\n<li>Python 是大小写敏感的</li>\n</ol>\n<p>标识符约定：</p>\n<ul>\n<li>不允许使用中文，也不建议使用拼音</li>\n<li>不要使用歧义单词，例如class_</li>\n<li>在python中不要随便使用下划线开头的标识符</li>\n</ul>\n<p><strong>常量</strong></p>\n<ul>\n<li>一旦赋值不能改变值的标识符</li>\n<li>python中无法定义常量</li>\n</ul>\n<p><strong>字面常量</strong></p>\n<ul>\n<li>一个单独的不可变量，例如 12、&quot;abc&quot; 、'2341356514.03e-9'</li>\n</ul>\n<p><strong>变量</strong></p>\n<ul>\n<li>赋值后，可以改变值的标识符</li>\n</ul>\n<p><strong>标识符本质</strong></p>\n<p>每一个标识符对应一个具有数据结构的值，但是这个值不方便直接访问，程序员就可以通过其对应的标\n识符来访问数据，标识符就是一个指代。一句话，标识符是给程序员编程使用的。</p>\n<h3 id=\"语言类型\"> 语言类型</h3>\n<blockquote>\n<p>详见 https://wiki.clay-wangzhi.com/23-wei-fen-lei/bian-cheng-yu-yan-de-fen-lei</p>\n</blockquote>\n<h3 id=\"false-等价\"> False 等价</h3>\n<table>\n<thead>\n<tr>\n<th>对象/常量</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;&quot;</td>\n<td>假</td>\n</tr>\n<tr>\n<td>“string”</td>\n<td>真</td>\n</tr>\n<tr>\n<td>0</td>\n<td>假</td>\n</tr>\n<tr>\n<td>&gt;=1</td>\n<td>真</td>\n</tr>\n<tr>\n<td>&lt;=-1</td>\n<td>真</td>\n</tr>\n<tr>\n<td>()空元组</td>\n<td>假</td>\n</tr>\n<tr>\n<td>[]空列表</td>\n<td>假</td>\n</tr>\n<tr>\n<td>{}空字典</td>\n<td>假</td>\n</tr>\n<tr>\n<td>None</td>\n<td>假</td>\n</tr>\n</tbody>\n</table>\n<p>False 等价布尔值，相当于<code>bool(value)</code></p>\n<ul>\n<li>空容器\n<ul>\n<li>空集合 set</li>\n<li>空字典 dict</li>\n<li>空列表 list</li>\n<li>空元组 tuple</li>\n</ul>\n</li>\n<li>空字符串</li>\n<li>None</li>\n<li>0</li>\n</ul>\n<h3 id=\"逻辑运算真值表\"> 逻辑运算真值表</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/log_op.png\" alt=\"log_ope\"></p>\n<h3 id=\"运算符-operator\"> 运算符 Operator</h3>\n<p><strong>算数运算符</strong></p>\n<p>+、-、*、/、//向下取整整除、%取模、**幂</p>\n<p>注：在<code>Python2</code>中/和//都是整除。</p>\n<p><strong>位运算符</strong></p>\n<p>&amp;位与、|位或、^异或、&lt;&lt;左移、&gt;&gt;右移</p>\n<p>~按位取反，包括符号位</p>\n<p><strong>比较运算符</strong></p>\n<p>==、!=、&gt;、&gt;=、&lt;、&lt;=</p>\n<p>链式比较： 4 &gt; 3 &gt; 2</p>\n<p><strong>逻辑运算符</strong></p>\n<p>与and、或or、非not</p>\n<p>逻辑运算符也是短路运算符</p>\n<ul>\n<li>\n<p>and 如果前面的表达式等价为False，后面就没有必要计算了，这个逻辑表达式最终一定等价为\nFalse\n1 and '2' and 0\n0 and 'abc' and 1</p>\n</li>\n<li>\n<p>or 如果前面的表达式等价为True，后面没有必要计算了，这个逻辑表达式最终一定等价为True\n1 or False or None</p>\n</li>\n<li>\n<p>特别注意，返回值。返回值不一定是 bool 型</p>\n</li>\n<li>\n<p>把最频繁使用的，做最少计算就可以知道结果的条件放到前面，如果它能短路，将大大减少计算量</p>\n</li>\n</ul>\n<p><strong>赋值运算符</strong></p>\n<p>a = min(3, 5)</p>\n<p>+=、 -= 、*=、/=、%=、//= 等</p>\n<p>x = y = z = 10</p>\n<p><strong>成员运算符</strong></p>\n<p>in、not in</p>\n<p><strong>身份运算符</strong></p>\n<p>is、is not</p>\n<h3 id=\"运算符优先级\"> 运算符优先级</h3>\n<ul>\n<li>单目运算符 &gt; 双目运算符</li>\n<li>算数运算符 &gt; 位运算符 &gt; 比较运算符 &gt; 逻辑运算符\n<ul>\n<li>-3 + 2 &gt; 5 and 'a' &gt; 'b'</li>\n</ul>\n</li>\n</ul>\n<p>搞不清楚就使用括号。长表达式，多用括号，易懂、易读。</p>\n<h3 id=\"表达式\"> 表达式</h3>\n<p>由数字、符号、括号、变量等的组合。有算数表达式、逻辑表达式、赋值表达式、lambda 表达式等\n等。</p>\n<p>Python 中，赋值即定义。Python 是动态语言，只有赋值才会创建一个变量，并决定了变量的类型和\n值。</p>\n<p>如果一个变量已经定义，赋值相当于重新定义。</p>\n<h2 id=\"内建函数\"> 内建函数</h2>\n<table>\n<thead>\n<tr>\n<th>内建函数</th>\n<th>函数签名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print</td>\n<td>print(value, ..., sep=' ', end='\\n')</td>\n<td>将多个数据输出到控制台，默认使用空格分隔、\\n 换行</td>\n</tr>\n<tr>\n<td>input</td>\n<td>input([prompt])</td>\n<td>在控制台和用户交互，接收用户输入，并返回字符串</td>\n</tr>\n<tr>\n<td>int</td>\n<td>int(value)</td>\n<td>将给定的值，转换成整数。int 本质是类</td>\n</tr>\n<tr>\n<td>str</td>\n<td>str(value)</td>\n<td>将给定的值，转换成字符串。str 本质是元类</td>\n</tr>\n<tr>\n<td>type</td>\n<td>type(value)</td>\n<td>返回对象的类型。本质是元类</td>\n</tr>\n<tr>\n<td>isinstance</td>\n<td>isinstance(obj, class_or_tuple)</td>\n<td>比较对象的类型，类型可以是 obj 的基类</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>print</span><span>(</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span>sep<span>=</span><span>'\\n'</span><span>,</span> end<span>=</span><span>'***'</span><span>)</span>\n\n<span>type</span><span>(</span><span>1</span><span>)</span> <span># 返回的是类型，不是字符串</span>\n<span>type</span><span>(</span><span>'abc'</span><span>)</span> <span># 返回的是类型，不是字符串</span>\n<span>type</span><span>(</span><span>int</span><span>)</span> <span># 返回type，意思是这个int类型由type构造出来</span>\n<span>type</span><span>(</span><span>str</span><span>)</span> <span># 返回type，也是类型</span>\n<span>type</span><span>(</span><span>type</span><span>)</span> <span># 也是type</span>\n\n<span>print</span><span>(</span><span>isinstance</span><span>(</span><span>1</span><span>,</span> <span>int</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>isinstance</span><span>(</span><span>False</span><span>,</span> <span>int</span><span>)</span><span>)</span> <span># True</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"程序控制\"> 程序控制</h2>\n<ul>\n<li>顺序\n<ul>\n<li>按照先后顺序一条条执行\n例如，先洗手，再吃饭，再洗碗</li>\n</ul>\n</li>\n<li>分支\n<ul>\n<li>根据不同的情况判断，条件满足执行某条件下的语句\n例如，先洗手，如果饭没有做好，玩游戏；如果饭做好了，就吃饭；如果饭都没有做，叫外卖</li>\n</ul>\n</li>\n<li>循环\n<ul>\n<li>条件满足就反复执行，不满足就不执行或不再执行\n例如，先洗手，看饭好了没有，没有好，一会来看一次是否好了，一会儿来看一次，直到饭\n好了，才可是吃饭。这里循环的条件是饭没有好，饭没有好，就循环的来看饭好了没有</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"单分支\"> 单分支</h3>\n<div><pre><code><span>if</span> condition<span>:</span>\n    代码块\n    \n\n<span>if</span> <span>1</span><span>&lt;</span><span>2</span><span>:</span> <span># if True:</span>\n    <span>print</span><span>(</span><span>'1 less than 2'</span><span>)</span> <span># 代码块</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>\n<li>condition 必须是一个 bool 类型，这个地方有一个隐式转换 bool(condition) ，相当于 False 等价</li>\n<li>if 语句这行最后，会有一个冒号，冒号之后如果有多条语句的代码块，需要另起一行，并缩进\n<ul>\n<li>if、for、def、class等关键字后面都可以跟代码块</li>\n<li>这些关键后面，如果有一条语句，也可以跟在这一行后面。例如 <code>if 1&gt;2: pass</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"多分支\"> 多分支</h3>\n<div><pre><code><span>if</span> condition1<span>:</span>\n    代码块<span>1</span>\n<span>elif</span> condition2<span>:</span>\n    代码块<span>2</span>\n<span>elif</span> condition3<span>:</span>\n    代码块<span>3</span>\n<span>.</span><span>.</span><span>.</span><span>.</span><span>.</span><span>.</span>\n<span>else</span><span>:</span>\n    代码块\n    \n\n   \na <span>=</span> <span>5</span>\n<span>if</span> a<span>&lt;</span><span>0</span><span>:</span>\n    <span>print</span><span>(</span><span>'negative'</span><span>)</span>\n<span>elif</span> a<span>==</span><span>0</span><span>:</span> <span># 相当于 a >= 0</span>\n    <span>print</span><span>(</span><span>'zero'</span><span>)</span>\n<span>else</span><span>:</span> <span># 相当于 a > 0</span>\n    <span>print</span><span>(</span><span>'positive'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>\n<li>多分支结构，只要有一个分支被执行，其他分支都不会被执行</li>\n<li>前一个条件被测试过，下一个条件相当于隐含着这个条件</li>\n</ul>\n<div><pre><code><span># 嵌套</span>\na <span>=</span> <span>5</span>\n<span>if</span> a <span>==</span> <span>0</span><span>:</span>\n    <span>print</span><span>(</span><span>'zero'</span><span>)</span>\n<span>else</span><span>:</span>\n    <span>if</span> a <span>&lt;</span> <span>0</span><span>:</span>\n    <span>print</span><span>(</span><span>'negative'</span><span>)</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'positive'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"while-循环\"> while 循环</h3>\n<p>while循环多用于死循环，或者不明确知道循环次数的场景</p>\n<div><pre><code><span>while</span> cond<span>:</span>\n    block\n\n    \n<span>while</span> <span>True</span><span>:</span> <span># 死循环</span>\n    <span>pass</span>\n\na <span>=</span> <span>10</span>\n<span>while</span> a<span>:</span> <span># 条件满足则进入循环</span>\n    <span>print</span><span>(</span>a<span>)</span>\n    a <span>-=</span> <span>1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"for-语句\"> for 语句</h3>\n<div><pre><code><span>for</span> element <span>in</span> iterable<span>:</span>\n    block\n   \n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>10</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span>i<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><table>\n<thead>\n<tr>\n<th>内建函数</th>\n<th>函数签名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>range</td>\n<td>range(stop)<br />range(start, stop, [step])</td>\n<td>返回惰性的对象<br/>可以生成一个序列，遍历它就可以得到这个序列的一个个元素<br/>前包后不包</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"continue\"> continue</h3>\n<p>跳过当前循环的当次循环，继续下一次循环</p>\n<div><pre><code><span>for</span> i <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>10</span><span>)</span><span>:</span>\n    <span>if</span> i <span>%</span> <span>2</span> <span>!=</span> <span>0</span><span>:</span> <span>continue</span>\n    <span>print</span><span>(</span>i<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"break\"> break</h3>\n<p>结束当前循环</p>\n<div><pre><code><span># 计算1000以内的被7整除的前20个正整数</span>\ncount <span>=</span> <span>0</span>\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>7</span><span>,</span> <span>1000</span><span>,</span> <span>7</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>i<span>)</span>\n\tcount <span>+=</span> <span>1</span>\n\t<span>if</span> count <span>>=</span> <span>20</span><span>:</span>\n\t\t<span>print</span><span>(</span>count<span>)</span>\n\t\t<span>break</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>总结</p>\n<ul>\n<li>continue 和 break 是循环的控制语句，只影响当前循环，包括 while、for 循环</li>\n<li>如果循环嵌套， continue 和 break 也只影响语句所在的那一层循环</li>\n<li>continue 和 break 只影响循环，所以<code>if cond: break</code>不是跳出 if，而是终止 if 外的 break 所在的循环</li>\n<li>分支和循环结构可以嵌套使用，可以嵌套多层</li>\n</ul>\n<h3 id=\"else-字句\"> else 字句</h3>\n<p>如果循环正常结束，else子句会被执行，即使是可迭代对象没有什么元素可迭代</p>\n<div><pre><code><span>for</span> i <span>in</span> <span>range</span><span>(</span><span>0</span><span>)</span><span>:</span> <span># 可迭代对象没有迭代</span>\n    <span>pass</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'ok'</span><span>)</span>\n    \n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>10</span><span>)</span><span>:</span>\n    <span>break</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'ok'</span><span>)</span>\n    \n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>10</span><span>)</span><span>:</span>\n    <span>continue</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'ok'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>有上例可知，一般情况下，循环正常执行，只要当前循环不是被break打断的，就可以执行else子句。\n哪怕是range(0)也可以执行else子句。</p>\n<h3 id=\"三元表达式\"> 三元表达式</h3>\n<p>在Python中，也有类似C语言的三目运算符构成的表达式，但python中的三元表达式不支持复杂的语句</p>\n<div><pre><code>真值表达式 <span>if</span> 条件表达式 <span>else</span> 假值表达式\n</code></pre>\n<div><span>1</span><br></div></div><p>三元表达式比较适合简化非常简单的if-else语句</p>\n<div><pre><code><span># 判断用户的输入的值，如果为空，输出\"empty\"，否则输出该值</span>\n\nvalue <span>=</span> <span>input</span><span>(</span><span>'>>>'</span><span>)</span>\n<span>if</span> value<span>:</span>\n    <span>print</span><span>(</span>value<span>)</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'empty'</span><span>)</span>\n   \nvalue <span>=</span> <span>input</span><span>(</span><span>'>>>'</span><span>)</span>\n<span>print</span><span>(</span>value <span>if</span> value <span>else</span> <span>'empty'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/log_op.png",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "05 装饰器",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-decorator/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-decorator/",
      "content_html": "<h1 id=\"_05-装饰器\"> 05 装饰器</h1>\n<h2 id=\"高阶函数\"> 高阶函数</h2>\n<p><strong>一等共民</strong></p>\n<ul>\n<li>函数在Python是一等公民（First-Class Object）</li>\n<li>函数也是对象，是可调用对象</li>\n<li>函数可以作为普通变量，也可以作为函数的参数、返回值</li>\n</ul>\n<p><strong>高级函数</strong></p>\n<p>高阶函数（High-order Function）</p>\n<ul>\n<li>数学概念 y = f(g(x))</li>\n<li>在数学和计算机科学中，高阶函数应当是至少满足下面一个条件的函数\n<ul>\n<li>接受一个或多个函数作为参数</li>\n<li>输出一个函数</li>\n</ul>\n</li>\n</ul>\n<div><pre><code><span>def</span> <span>counter</span><span>(</span>base<span>)</span><span>:</span>\n    <span>def</span> <span>inc</span><span>(</span>step<span>=</span><span>1</span><span>)</span><span>:</span> <span># 有没有闭包？</span>\n        <span>nonlocal</span> base <span># 形参base也是外部函数counter的local变量</span>\n        base <span>+=</span> step\n        <span>return</span> base\n    <span>return</span> inc\nc1 <span>=</span> counter<span>(</span><span>5</span><span>)</span>\n<span>print</span><span>(</span>c1<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>c1<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>c1<span>(</span><span>)</span><span>)</span>\nc2 <span>=</span> counter<span>(</span><span>5</span><span>)</span>\n<span>print</span><span>(</span>c2<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>c1 <span>==</span> c2<span>)</span> <span># 相等吗？ 不相等，两个不同的实例</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id=\"柯里化\"> 柯里化</h2>\n<ul>\n<li>指的是将原来接受两个参数的函数变成新的接受一个参数的函数的过程。新的函数返回一个以原有第二个参数为参数的函数</li>\n<li>z = f(x, y) 转换成 z = f(x)(y) 的形式</li>\n</ul>\n<p>例如</p>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>return</span> x <span>+</span> y\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>原来函数调用为 add(4, 5) ，柯里化目标是 add(4)(5) 。如何实现？</p>\n<p>每一次括号说明是函数调用，说明 add(4)(5) 是2次函数调用。</p>\n<div><pre><code>add(4)(5)\n等价于\nt = add(4)\nt(5)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>也就是说add(4)应该返回函数</p>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>)</span><span>:</span>\n    <span>def</span> <span>_add</span><span>(</span>y<span>)</span><span>:</span>\n        <span>return</span> x <span>+</span> y\n    <span>return</span> _add\n<span>print</span><span>(</span>add<span>(</span><span>100</span><span>)</span><span>(</span><span>200</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>通过嵌套函数就可以把函数转成柯里化函数。</p>\n<h2 id=\"时间模块\"> 时间模块</h2>\n<h3 id=\"datetime-模块\"> datetime 模块</h3>\n<p>datetime类</p>\n<ul>\n<li>时间高级类</li>\n<li>类方法，即使用类调用的方法，由类方法获得一个时间对象\n<ul>\n<li>now(tz=None) 返回当前时间的datetime对象，时间到微秒，如果tz为None，返回当前时区的不带时区信息的时间</li>\n<li>utcnow() 不带时区的0时区时间</li>\n<li>fromtimestamp(timestamp, tz=None) 从一个时间戳返回一个datetime对象</li>\n</ul>\n</li>\n<li>时间对象方法\n<ul>\n<li>timestamp() 返回一个到微秒的时间戳\n<ul>\n<li>时间戳：格林威治时间1970年1月1日0点到现在的秒数</li>\n</ul>\n</li>\n<li>构造方法 datetime.datetime(2016, 12, 6, 16, 29, 43, 79043)</li>\n<li>year、month、day、hour、minute、second、microsecond，取datetime对象的年月日时分秒及微秒</li>\n<li>weekday() 返回星期的天，周一0，周日6</li>\n<li>isoweekday() 返回星期的天，周一1，周日7</li>\n<li>date() 返回日期date对象</li>\n<li>time() 返回时间time对象</li>\n</ul>\n</li>\n</ul>\n<div><pre><code><span>import</span> datetime\n\n<span># 类方法获得时间对象</span>\n<span>print</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span>datetime<span>.</span>timezone<span>(</span>datetime<span>.</span>timedelta<span>(</span>hours<span>=</span><span>8</span><span>)</span><span>)</span><span>)</span><span>)</span> <span># 时区时间</span>\n<span>print</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>)</span> <span># 无时区时间</span>\n<span>print</span><span>(</span>datetime<span>.</span>datetime<span>.</span>utcnow<span>(</span><span>)</span><span>)</span> <span># UTC时间，可以认为是GMT或0时区时间</span>\n\n<span># 时间戳操作</span>\nstamp <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>.</span>timestamp<span>(</span><span>)</span> <span># 获得时间戳</span>\n<span>print</span><span>(</span>stamp<span>)</span>\ndt <span>=</span> datetime<span>.</span>datetime<span>.</span>fromtimestamp<span>(</span>stamp<span>)</span> <span># 从时间戳获得时间对象</span>\n<span>print</span><span>(</span>dt<span>)</span>\n\n<span>print</span><span>(</span><span>type</span><span>(</span>dt<span>.</span>date<span>(</span><span>)</span><span>)</span><span>,</span> dt<span>.</span>date<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>dt<span>.</span>time<span>(</span><span>)</span><span>)</span><span>,</span> dt<span>.</span>time<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id=\"日期与格式化\"> 日期与格式化</h3>\n<ul>\n<li>类方法 strptime(date_string, format) ，返回datetime对象（时间字符串+格式化字符串 =&gt; 时间对象）</li>\n<li>对象方法 strftime(format) ，返回字符串（时间对象通过格式字符串 =&gt; 时间字符串）</li>\n<li>字符串format函数格式化（时间对象通过格式字符串 =&gt; 时间字符串）</li>\n</ul>\n<div><pre><code><span>import</span> datetime\n\ndatestr <span>=</span> <span>'2018-01-10 17:16:08'</span>\ndt <span>=</span> datetime<span>.</span>datetime<span>.</span>strptime<span>(</span>datestr<span>,</span> <span>'%Y-%m-%d %H:%M:%S'</span><span>)</span> <span>#由字符串到时间对象</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>dt<span>)</span><span>,</span> dt<span>)</span>\n<span>print</span><span>(</span>dt<span>.</span>strftime<span>(</span><span>'%Y/%m/%d-%H:%M:%S'</span><span>)</span><span>)</span> <span># 输出为字符串</span>\n<span>print</span><span>(</span><span>\"{:%Y/%m/%d %H:%M:%S}\"</span><span>.</span><span>format</span><span>(</span>dt<span>)</span><span>)</span> <span># 输出为字符串</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"timedelta-类\"> timedelta 类</h3>\n<ul>\n<li>datetime2 = datetime1 + timedelta</li>\n<li>datetime2 = datetime1 - timedelta</li>\n<li>timedelta = datetime1 - datetime2</li>\n<li>构造方法\n<ul>\n<li>datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0,hours=0, weeks=0)</li>\n<li>year = datetime.timedelta(days=365)</li>\n</ul>\n</li>\n<li>timedelta对象有方法total_seconds()， 返回<strong>时间差的总秒数</strong></li>\n</ul>\n<h3 id=\"time-模块\"> time 模块</h3>\n<ul>\n<li>time.sleep(secs) 将调用线程挂起指定的秒数</li>\n</ul>\n<h2 id=\"装饰器\"> 装饰器</h2>\n<h3 id=\"由来\"> 由来</h3>\n<p>需求：为一个加法函数增加记录实参的功能</p>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'add called. x={}, y={}'</span><span>.</span><span>format</span><span>(</span>x<span>,</span> y<span>)</span><span>)</span> <span># 增加的记录功能</span>\n    <span>return</span> x <span>+</span> y\n\nadd<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>上面的代码满足了需求，但有缺点：</p>\n<p>记录信息的功能，可以是一个单独的功能。显然和add函数耦合太紧密。加法函数属于业务功能，输出信息属于非功能代码，不该放在add函数中</p>\n<p>1、提供一个函数logger完成记录功能</p>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>return</span> x <span>+</span> y\n\n<span>def</span> <span>logger</span><span>(</span>fn<span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'调用前增强'</span><span>)</span>\n    ret <span>=</span> fn<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n    <span>print</span><span>(</span><span>'调用后增强'</span><span>)</span>\n    <span>return</span> ret\n\n<span>print</span><span>(</span>logger<span>(</span>add<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>2、改进传参</p>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>return</span> x <span>+</span> y\n\n<span>def</span> <span>logger</span><span>(</span>fn<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'调用前增强'</span><span>)</span>\n    ret <span>=</span> fn<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n    <span>print</span><span>(</span><span>'调用后增强'</span><span>)</span>\n    <span>return</span> ret\n\n<span>print</span><span>(</span>logger<span>(</span>add<span>,</span> <span>4</span><span>,</span> <span>5</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>3、柯里化</p>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>return</span> x <span>+</span> y\n\n<span>def</span> <span>logger</span><span>(</span>fn<span>)</span><span>:</span>\n    <span>def</span> <span>wrapper</span><span>(</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'调用前增强'</span><span>)</span>\n        ret <span>=</span> fn<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n        <span>print</span><span>(</span><span>'调用后增强'</span><span>)</span>\n        <span>return</span> ret\n    <span>return</span> wrapper\n\ninner <span>=</span> logger<span>(</span>add<span>)</span>\nx <span>=</span> inner<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>x<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>再进一步</p>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>return</span> x <span>+</span> y\n\n<span>def</span> <span>logger</span><span>(</span>fn<span>)</span><span>:</span>\n    <span>def</span> <span>wrapper</span><span>(</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'调用前增强'</span><span>)</span>\n        ret <span>=</span> fn<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n        <span>print</span><span>(</span><span>'调用后增强'</span><span>)</span>\n        <span>return</span> ret\n    <span>return</span> wrapper\n\nadd <span>=</span> logger<span>(</span>add<span>)</span>\n<span>print</span><span>(</span>add<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>4、装饰器语法</p>\n<div><pre><code><span>def</span> <span>logger</span><span>(</span>fn<span>)</span><span>:</span>\n    <span>def</span> <span>wrapper</span><span>(</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'调用前增强'</span><span>)</span>\n        ret <span>=</span> fn<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n        <span>print</span><span>(</span><span>'调用后增强'</span><span>)</span>\n        <span>return</span> ret\n    <span>return</span> wrapper\n\n<span>@logger</span> <span># 等价于 add = wrapper &lt;=> add = logger(add)</span>\n<span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>return</span> x <span>+</span> y\n\n<span>print</span><span>(</span>add<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>@logger就是装饰器语法</p>\n<p><em><strong>等价式非常重要，如果你不能理解装饰器，开始的时候一定要把等价式写在后面</strong></em></p>\n<h3 id=\"无参装饰器\"> 无参装饰器</h3>\n<ul>\n<li>上例的装饰器语法，称为无参装饰器</li>\n<li>@符号后是一个函数</li>\n<li>虽然是无参装饰器，但是@后的函数本质上是单参函数</li>\n<li>上例的 logger 函数是一个高阶函数</li>\n</ul>\n<h3 id=\"日志记录装饰器实现\"> 日志记录装饰器实现</h3>\n<div><pre><code><span>import</span> time\n<span>import</span> datetime\n\n<span>def</span> <span>logger</span><span>(</span>fn<span>)</span><span>:</span>\n    <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'调用前增强'</span><span>)</span>\n        start <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n        ret <span>=</span> fn<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span> <span># 参数解构</span>\n        <span>print</span><span>(</span><span>'调用后增强'</span><span>)</span>\n        delta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\n        <span>print</span><span>(</span><span>'Function {} took {}s.'</span><span>.</span><span>format</span><span>(</span>fn<span>.</span>__name__<span>,</span> delta<span>)</span><span>)</span>\n        <span>return</span> ret\n    <span>return</span> wrapper\n\n<span>@logger</span> <span># 等价于 add = wrapper &lt;=> add = logger(add)</span>\n<span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    time<span>.</span>sleep<span>(</span><span>2</span><span>)</span>\n    <span>return</span> x <span>+</span> y\n\n<span>print</span><span>(</span>add<span>(</span><span>100</span><span>,</span> <span>200</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id=\"文档字符串\"> 文档字符串</h3>\n<ul>\n<li>Python 文档字符串 Documentation Strings</li>\n<li>在函数（类、模块）语句块的第一行，且习惯是多行的文本，所以多使用三引号</li>\n<li>文档字符串也算是合法的一条语句</li>\n<li>惯例是首字母大写，第一行写概述，空一行，第三行写详细描述</li>\n<li>可以使用特殊属性__doc__访问这个文档</li>\n</ul>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>\"\"\"这是加法函数的文档\"\"\"</span>\n    <span>return</span> x <span>+</span> y\n\n<span>print</span><span>(</span><span>\"{}'s doc = {}\"</span><span>.</span><span>format</span><span>(</span>add<span>.</span>__name__ <span>,</span> add<span>.</span>__doc__<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>import</span> time\n<span>import</span> datetime\n\n<span>def</span> <span>logger</span><span>(</span>fn<span>)</span><span>:</span>\n    <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>'''wrapper's doc'''</span>\n        <span>print</span><span>(</span><span>'调用前增强'</span><span>)</span>\n        start <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n        ret <span>=</span> fn<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span> <span># 参数解构</span>\n        <span>print</span><span>(</span><span>'调用后增强'</span><span>)</span>\n        delta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\n        <span>print</span><span>(</span><span>'Function {} took {}s.'</span><span>.</span><span>format</span><span>(</span>fn<span>.</span>__name__<span>,</span> delta<span>)</span><span>)</span>\n        <span>return</span> ret\n    <span>return</span> wrapper\n\n<span>@logger</span> <span># 等价于 add = wrapper &lt;=> add = logger(add)</span>\n<span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>'''add's doc'''</span>\n    time<span>.</span>sleep<span>(</span><span>0.1</span><span>)</span>\n    <span>return</span> x <span>+</span> y\n\n<span>print</span><span>(</span>add<span>(</span><span>100</span><span>,</span> <span>200</span><span>)</span><span>)</span>\n\n<span>print</span><span>(</span><span>\"name={}, doc={}\"</span><span>.</span><span>format</span><span>(</span>add<span>.</span>__name__<span>,</span> add<span>.</span>__doc__<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>被装饰后，函数名和文档都不对了。如何解决？</p>\n<p><strong>functools模块</strong>提供了一个wraps装饰器函数，本质上调用的是update_wrapper，它就是一个属性复制函数。</p>\n<p>wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)</p>\n<ul>\n<li>wrapped 就是被包装函数</li>\n<li>wrapper 就是包装函数</li>\n<li>用被包装函数的属性覆盖包装函数的同名属性</li>\n<li>元组 WRAPPER_ASSIGNMENTS 中是要被覆盖的属性\n<ul>\n<li><code>__module__</code> ,  <code>__name__</code> ,  <code>__qualname__</code> ,  <code>__doc__</code> ,  <code>__annotations__</code></li>\n<li>模块名、名称、限定名、文档、参数注解</li>\n</ul>\n</li>\n</ul>\n<div><pre><code><span>import</span> time\n<span>import</span> datetime\n<span>from</span> functools <span>import</span> wraps\n\n<span>def</span> <span>logger</span><span>(</span>fn<span>)</span><span>:</span>\n    <span>@wraps</span><span>(</span>fn<span>)</span> <span># 用被包装函数fn的属性覆盖包装函数wrapper的同名属性</span>\n    <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>'''wrapper's doc'''</span>\n        <span>print</span><span>(</span><span>'调用前增强'</span><span>)</span>\n        start <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n        ret <span>=</span> fn<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span> <span># 参数解构</span>\n        <span>print</span><span>(</span><span>'调用后增强'</span><span>)</span>\n        delta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\n        <span>print</span><span>(</span><span>'Function {} took {}s.'</span><span>.</span><span>format</span><span>(</span>fn<span>.</span>__name__<span>,</span> delta<span>)</span><span>)</span>\n        <span>return</span> ret\n    <span>return</span> wrapper\n\n<span>@logger</span> <span># 等价于 add = wrapper &lt;=> add = logger(add)</span>\n<span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>'''add's doc'''</span>\n    time<span>.</span>sleep<span>(</span><span>0.1</span><span>)</span>\n    <span>return</span> x <span>+</span> y\n\n<span>print</span><span>(</span>add<span>(</span><span>100</span><span>,</span> <span>200</span><span>)</span><span>)</span>\n\n<span>print</span><span>(</span><span>\"name={}, doc={}\"</span><span>.</span><span>format</span><span>(</span>add<span>.</span>__name__<span>,</span> add<span>.</span>__doc__<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h3 id=\"带参装饰器\"> 带参装饰器</h3>\n<ul>\n<li>@之后不是一个单独的标识符，是一个函数调用</li>\n<li>函数调用的返回值又是一个函数，此函数是一个无参装饰器</li>\n<li>带参装饰器，可以有任意个参数\n<ul>\n<li>@func()</li>\n<li>@func(1)</li>\n<li>@func(1, 2)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"进阶\"> 进阶</h3>\n<div><pre><code><span>import</span> datetime\n<span>from</span> functools <span>import</span> wraps\n\n<span>def</span> <span>logger</span><span>(</span>fn<span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'logger run'</span><span>)</span>\n    <span>@wraps</span><span>(</span>fn<span>)</span> <span># 用被包装函数fn的属性覆盖包装函数wrapper的同名属性</span>\n    <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span> <span># wrapper = wraps(fn)(wrapper)</span>\n        <span>\"wrapper's doc\"</span>\n        <span>print</span><span>(</span><span>'wrapper run'</span><span>)</span>\n        start <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n        ret <span>=</span> fn<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span> <span># 参数解构</span>\n        delta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\n        <span>print</span><span>(</span><span>'Function {} took {}s.'</span><span>.</span><span>format</span><span>(</span>fn<span>.</span>__name__<span>,</span> delta<span>)</span><span>)</span>\n        <span>return</span> ret\n    <span>return</span> wrapper\n\n<span>@logger</span> <span># 等价于 add = wrapper &lt;=> add = logger(add)</span>\n<span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>\"\"\"add function\"\"\"</span>\n\n<span>@logger</span>\n<span>def</span> <span>sub</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    <span>\"\"\"sub function\"\"\"</span>\n\n<span>print</span><span>(</span>add<span>.</span>__name__<span>,</span> sub<span>.</span>__name__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><ul>\n<li>logger 什么时候执行？  从上到下执行</li>\n<li>logger 执行过几次？ 两次</li>\n<li>wraps 装饰器执行过几次？ 两次 ， 也是进入函数，从上到下依次执行，函数没调用前，跳过函数部分代码</li>\n<li>wrapper 的 <code>__name__</code> 等属性被覆盖过几次？ 两次</li>\n<li><code>add.__name__</code> 打印什么名称？add</li>\n<li><code>sub.__name__</code> 打印什么名称？sub</li>\n</ul>\n<h2 id=\"内建函数\"> 内建函数</h2>\n<h3 id=\"排序-sorted\"> 排序 sorted</h3>\n<p>定义 <code>sorted(iterable, *, key=None, reverse=False) -&gt;list</code></p>\n<p>key 需要为 可调用的，如函数</p>\n<div><pre><code><span>sorted</span><span>(</span>lst<span>,</span> key<span>=</span><span>lambda</span> x<span>:</span><span>6</span><span>-</span>x<span>)</span> <span># 返回新列表</span>\n<span>list</span><span>.</span>sort<span>(</span>key<span>=</span><span>lambda</span> x<span>:</span> <span>6</span><span>-</span>x<span>)</span> <span># 就地修改</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"过滤-filter\"> 过滤 filter</h3>\n<ul>\n<li>定义 filter(function, iterable)</li>\n<li>对可迭代对象进行遍历，返回一个迭代器</li>\n<li>function 参数是一个参数的函数，且返回值应当是 bool 类型，或其返回值等效布尔值。</li>\n<li>function 参数如果是 None，可迭代对象的每一个元素自身等效布尔值</li>\n</ul>\n<div><pre><code><span>print</span><span>(</span><span>list</span><span>(</span><span>filter</span><span>(</span><span>lambda</span> x<span>:</span> x<span>%</span><span>3</span><span>==</span><span>0</span><span>,</span> <span>[</span><span>1</span><span>,</span><span>9</span><span>,</span><span>55</span><span>,</span><span>150</span><span>,</span><span>-</span><span>3</span><span>,</span><span>78</span><span>,</span><span>28</span><span>,</span><span>123</span><span>]</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>list</span><span>(</span><span>filter</span><span>(</span><span>None</span><span>,</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>list</span><span>(</span><span>filter</span><span>(</span><span>None</span><span>,</span> <span>range</span><span>(</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>)</span><span>)</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"映射-map\"> 映射 map</h3>\n<ul>\n<li>定义 map(function, *iterables) -&gt; map object</li>\n<li>对多个可迭代对象的元素，按照指定的函数进行映射</li>\n<li>返回一个迭代器</li>\n</ul>\n<div><pre><code><span>print</span><span>(</span><span>list</span><span>(</span><span>map</span><span>(</span><span>lambda</span> x<span>:</span> <span>2</span><span>*</span>x<span>+</span><span>1</span><span>,</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>dict</span><span>(</span><span>map</span><span>(</span><span>lambda</span> x<span>:</span> <span>(</span>x<span>%</span><span>5</span><span>,</span> x<span>)</span><span>,</span> <span>range</span><span>(</span><span>500</span><span>)</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>dict</span><span>(</span><span>map</span><span>(</span><span>lambda</span> x<span>,</span>y<span>:</span> <span>(</span>x<span>,</span>y<span>)</span><span>,</span> <span>'abcde'</span><span>,</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>)</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"拉链函数-zip\"> 拉链函数 zip</h3>\n<ul>\n<li>zip(*iterables)</li>\n<li>像拉链一样，把多个可迭代对象合并在一起，返回一个迭代器</li>\n<li>将每次从不同对象中取到的元素合并成一个元组</li>\n</ul>\n<div><pre><code><span>print</span><span>(</span><span>list</span><span>(</span><span>zip</span><span>(</span><span>range</span><span>(</span><span>10</span><span>)</span><span>,</span><span>range</span><span>(</span><span>10</span><span>)</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>list</span><span>(</span><span>zip</span><span>(</span><span>range</span><span>(</span><span>10</span><span>)</span><span>,</span><span>range</span><span>(</span><span>10</span><span>)</span><span>,</span><span>range</span><span>(</span><span>5</span><span>)</span><span>,</span><span>range</span><span>(</span><span>10</span><span>)</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>dict</span><span>(</span><span>zip</span><span>(</span><span>range</span><span>(</span><span>10</span><span>)</span><span>,</span><span>range</span><span>(</span><span>10</span><span>)</span><span>)</span><span>)</span><span>)</span>\n\nd1 <span>=</span> <span>{</span><span>str</span><span>(</span>x<span>)</span><span>:</span>y <span>for</span> x<span>,</span>y <span>in</span> <span>zip</span><span>(</span><span>range</span><span>(</span><span>10</span><span>)</span><span>,</span><span>range</span><span>(</span><span>10</span><span>)</span><span>)</span><span>}</span> <span># 字典解析式</span>\n<span>print</span><span>(</span>d1<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"匿名函数\"> 匿名函数</h2>\n<p>Python 中，匿名函数也叫 lambda 表达式。</p>\n<p>匿名：隐藏名字，即没有名称</p>\n<p>匿名函数：没有名字的函数。</p>\n<p>函数没有名字该如何定义？函数没有名字如何调用？</p>\n<p><strong>Lambda 表达式</strong></p>\n<p>Python中，使用 Lambda 表达式构建匿名函数。</p>\n<div><pre><code><span>def</span> <span>foo</span><span>(</span>x<span>)</span><span>:</span>\n    <span>return</span> x <span>**</span> <span>2</span>\n<span>lambda</span> x<span>:</span> x <span>**</span> <span>2</span> <span># 定义</span>\na <span>=</span> <span>(</span><span>lambda</span> x<span>:</span> x <span>**</span> <span>2</span><span>)</span><span>(</span><span>4</span><span>)</span> <span># 调用</span>\n<span>print</span><span>(</span>a<span>)</span>\nfoo <span>=</span> <span>lambda</span> x<span>,</span>y<span>:</span> <span>(</span>x<span>+</span>y<span>)</span> <span>**</span> <span>2</span> <span># 定义函数</span>\n<span>print</span><span>(</span>foo<span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>)</span>\n<span># 等价于</span>\n<span>def</span> <span>foo</span><span>(</span>x<span>,</span>y<span>)</span><span>:</span>\n    <span>return</span> <span>(</span>x<span>+</span>y<span>)</span> <span>**</span> <span>2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>\n<li>使用 lambda 关键字定义匿名函数，格式为 lambda [参数列表]: 表达式</li>\n<li>参数列表不需要小括号。无参就不写参数</li>\n<li>冒号用来分割参数列表和表达式部分</li>\n<li>不需要使用return。表达式的值，就是匿名函数的返回值。表达式中不能出现等号</li>\n<li>Python的lambda表达式（匿名函数）只能写在一行上，也称为单行函数</li>\n</ul>\n<p>匿名函数往往用在为高阶函数传参时，使用 lambda 表达式，往往能简化代码</p>\n<div><pre><code><span># 返回常量的函数</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> <span>:</span><span>3</span><span>)</span><span>(</span><span>)</span><span>)</span>\n\n<span># 加法匿名函数，带缺省值</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> x<span>,</span> y<span>=</span><span>3</span><span>:</span> x <span>+</span> y<span>)</span><span>(</span><span>5</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> x<span>,</span> y<span>=</span><span>3</span><span>:</span> x <span>+</span> y<span>)</span><span>(</span><span>5</span><span>,</span> <span>6</span><span>)</span><span>)</span>\n\n<span># keyword-only参数</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> x<span>,</span> <span>*</span><span>,</span> y<span>=</span><span>30</span><span>:</span> x <span>+</span> y<span>)</span><span>(</span><span>5</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> x<span>,</span> <span>*</span><span>,</span> y<span>=</span><span>30</span><span>:</span> x <span>+</span> y<span>)</span><span>(</span><span>5</span><span>,</span> y<span>=</span><span>10</span><span>)</span><span>)</span>\n\n<span># 可变参数</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> <span>*</span>args<span>:</span> <span>(</span>x <span>for</span> x <span>in</span> args<span>)</span><span>)</span><span>(</span><span>*</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span><span>)</span> <span># 生成器</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> <span>*</span>args<span>:</span> <span>[</span>x<span>+</span><span>1</span> <span>for</span> x <span>in</span> args<span>]</span><span>)</span><span>(</span><span>*</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span><span>)</span> <span># 列表</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> <span>*</span>args<span>:</span> <span>{</span>x<span>%</span><span>2</span> <span>for</span> x <span>in</span> args<span>}</span><span>)</span><span>(</span><span>*</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span><span>)</span> <span># 集合</span>\n<span>print</span><span>(</span><span>(</span><span>lambda</span> <span>*</span>args<span>:</span> <span>{</span><span>str</span><span>(</span>x<span>)</span><span>:</span>x <span>for</span> x <span>in</span> args<span>}</span><span>)</span><span>(</span><span>*</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span><span>)</span> <span># 字典</span>\n\n<span>print</span><span>(</span><span>dict</span><span>(</span><span>map</span><span>(</span><span>lambda</span> x<span>:</span> <span>(</span><span>chr</span><span>(</span><span>65</span><span>+</span>x<span>)</span><span>,</span> <span>10</span><span>-</span>x<span>)</span><span>,</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>)</span><span>)</span><span>)</span> <span># 高阶函数，构建字典</span>\n\nd <span>=</span> <span>dict</span><span>(</span><span>map</span><span>(</span><span>lambda</span> x<span>:</span> <span>(</span><span>chr</span><span>(</span><span>65</span><span>+</span>x<span>)</span><span>,</span> <span>10</span><span>-</span>x<span>)</span><span>,</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>)</span><span>)</span> <span># 高阶函数</span>\na <span>=</span> <span>sorted</span><span>(</span>d<span>.</span>items<span>(</span><span>)</span><span>,</span> key<span>=</span><span>lambda</span> x<span>:</span>x<span>[</span><span>1</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>a<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id=\"生成器函数\"> 生成器函数</h2>\n<p>后续补充</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "06 目录文件处理",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-dir-file-pro/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-dir-file-pro/",
      "content_html": "<h1 id=\"_06-目录文件处理\"> 06 目录文件处理</h1>\n<h2 id=\"文件io操作\"> 文件IO操作</h2>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>open</strong></td>\n<td>打开</td>\n</tr>\n<tr>\n<td><strong>read</strong></td>\n<td>读取</td>\n</tr>\n<tr>\n<td><strong>write</strong></td>\n<td>写入</td>\n</tr>\n<tr>\n<td><strong>close</strong></td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>readline</td>\n<td>行读取</td>\n</tr>\n<tr>\n<td>readlines</td>\n<td>多行读取</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"open-方法\"> open 方法</h3>\n<p><code>open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></p>\n<p>打开一个文件，返回一个文件对象(流对象)和文件描述符。打开文件失败，则返回异常</p>\n<p>基本使用：创建一个文件test，然后打开它，用完<strong>关闭</strong></p>\n<div><pre><code>f <span>=</span> <span>open</span><span>(</span><span>\"test\"</span><span>)</span> <span># file对象</span>\n<span># windows &lt;_io.TextIOWrapper name='test' mode='r' encoding='cp936'></span>\n<span># linux &lt;_io.TextIOWrapper name='test' mode='r' encoding='UTF-8'></span>\n<span>print</span><span>(</span>f<span>.</span>read<span>(</span><span>)</span><span>)</span> <span># 读取文件</span>\nf<span>.</span>close<span>(</span><span>)</span> <span># 关闭文件</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>文件操作中，最常用的操作就是读和写。</p>\n<p>文件访问的模式有两种：文本模式和二进制模式。不同模式下，操作函数不尽相同，表现的结果也不一样。</p>\n<blockquote>\n<p>注：windows中使用codepage代码页，可以认为每一个代码页就是一张编码表。cp936等同于GBK。</p>\n</blockquote>\n<h3 id=\"open-参数\"> open 参数</h3>\n<p><strong>file</strong></p>\n<p>打开或者要创建的文件名。如果不指定路径，默认是当前路径</p>\n<p><strong>mode 模式</strong></p>\n<table>\n<thead>\n<tr>\n<th>模式描述字符</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>缺省模式，只读打开</td>\n</tr>\n<tr>\n<td>w</td>\n<td>只写打开</td>\n</tr>\n<tr>\n<td>x</td>\n<td>创建并写入一个新文件</td>\n</tr>\n<tr>\n<td>a</td>\n<td>只写打开，追加内容</td>\n</tr>\n<tr>\n<td>b</td>\n<td>二进制模式</td>\n</tr>\n<tr>\n<td>t</td>\n<td>缺省模式，文本模式</td>\n</tr>\n<tr>\n<td>+</td>\n<td>读或写打开后，使用+来增加缺失的写或读的能力</td>\n</tr>\n</tbody>\n</table>\n<p>模式对于IO操作来说，其实只有读和写两种：</p>\n<ul>\n<li>只读 r</li>\n<li>只写 w、x、a</li>\n<li>增加缺失能力 +</li>\n</ul>\n<p>r 模式</p>\n<ul>\n<li>只读打开文件，如果使用write方法，会抛异常</li>\n<li>如果文件不存在，抛出FileNotFoundError异常</li>\n</ul>\n<p>w 模式</p>\n<ul>\n<li>表示只写方式打开，如果读取则抛出异常</li>\n<li>如果文件不存在，则直接创建文件</li>\n<li>如果文件存在，则清空文件内容</li>\n</ul>\n<p>x 模式</p>\n<ul>\n<li>文件不存在，创建文件，并只写方式打开</li>\n<li>文件存在，抛出 FileExistsError 异常</li>\n</ul>\n<p>a 模式</p>\n<ul>\n<li>文件存在，只写打开，追加内容</li>\n<li>文件不存在，则创建后，只写打开，追加内容</li>\n</ul>\n<p>wxa 模式都可以产生新文件</p>\n<ul>\n<li>w 不管文件存在与否，都会生成全新内容的文件</li>\n<li>a 不管文件是否存在，都能在打开的文件尾部追加</li>\n<li>x 必须要求文件事先不存在，自己要造一个新文件</li>\n</ul>\n<p>文本模式 t</p>\n<ul>\n<li>字符流，将文件的字节按照某种字符编码理解，按照字符操作。open 的默认 mode 就是rt。</li>\n</ul>\n<p>二进制模式 b</p>\n<ul>\n<li>字节流，将文件就按照字节理解，与字符编码无关。二进制模式操作时，字节操作使用bytes类型</li>\n</ul>\n<p>+ 模式</p>\n<ul>\n<li>为r、w、a、x提供缺失的读或写功能，但是，获取文件对象依旧按照r、w、a、x自己的特征。</li>\n<li>+模式不能单独使用，可以认为它是为前面的模式字符做增强功能的。</li>\n</ul>\n<p><strong>encoding：编码，仅文本模式使用</strong></p>\n<p>None 表示使用缺省编码，依赖操作系统。windows、linux下测试如下代码</p>\n<div><pre><code>f <span>=</span> <span>open</span><span>(</span><span>'test1'</span><span>,</span><span>'w'</span><span>)</span>\nf<span>.</span>write<span>(</span><span>'啊'</span><span>)</span>\nf<span>.</span>close<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>windows 下缺省 GBK（0xB0A1），Linux 下缺省 UTF-8（0xE5 95 8A）</p>\n<p><strong>文件指针</strong></p>\n<p>mode=r，指针起始在0</p>\n<p>mode=a，指针起始在EOF</p>\n<div><pre><code>f <span>=</span> <span>open</span><span>(</span><span>'test.txt'</span><span>,</span> <span>'wb+'</span><span>)</span>\n<span>print</span><span>(</span>f<span>)</span>\nf<span>.</span>write<span>(</span><span>b'abc'</span><span>)</span>\n<span>print</span><span>(</span>f<span>.</span>tell<span>(</span><span>)</span><span>)</span>\nf<span>.</span>close<span>(</span><span>)</span>\n\nf <span>=</span> <span>open</span><span>(</span><span>'test.txt'</span><span>,</span> <span>'rt+'</span><span>)</span> <span># windows下打开</span>\nf<span>.</span>write<span>(</span><span>'啊'</span><span>)</span> <span># 从什么地方开始写几个字节？</span>\n<span>print</span><span>(</span><span>hex</span><span>(</span><span>ord</span><span>(</span><span>'啊'</span><span>)</span><span>)</span><span>,</span> <span>'啊'</span><span>.</span>encode<span>(</span><span>)</span><span>,</span> <span>'啊'</span><span>.</span>encode<span>(</span><span>'gbk'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>f<span>.</span>tell<span>(</span><span>)</span><span>)</span>\nf<span>.</span>close<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"read\"> read</h3>\n<p>read(size=-1)</p>\n<ul>\n<li>size 表示读取的多少个字符或字节；负数或者 None 表示读取到 EOF</li>\n</ul>\n<div><pre><code>filename <span>=</span> <span>'test.txt'</span>\nf <span>=</span> <span>open</span><span>(</span>filename<span>,</span> <span>'w+'</span><span>)</span>\nf<span>.</span>write<span>(</span><span>'百度站长'</span><span>)</span>\nf<span>.</span>close<span>(</span><span>)</span>\n\nf <span>=</span> <span>open</span><span>(</span>filename<span>)</span>\n<span>print</span><span>(</span><span>1</span><span>,</span> f<span>.</span>read<span>(</span><span>1</span><span>)</span><span>)</span> <span># 按字符</span>\n<span>print</span><span>(</span><span>2</span><span>,</span> f<span>.</span>read<span>(</span><span>2</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>3</span><span>,</span> f<span>.</span>read<span>(</span><span>)</span><span>)</span>\nf<span>.</span>close<span>(</span><span>)</span>\n\nf <span>=</span> <span>open</span><span>(</span>filename<span>,</span> <span>'rb'</span><span>)</span>\n<span>print</span><span>(</span><span>4</span><span>,</span> f<span>.</span>read<span>(</span><span>1</span><span>)</span><span>)</span> <span># 按字节</span>\n<span>print</span><span>(</span><span>5</span><span>,</span> f<span>.</span>read<span>(</span><span>2</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>6</span><span>,</span> <span>'百度站长'</span><span>.</span>encode<span>(</span><span>'gbk'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>7</span><span>,</span> f<span>.</span>read<span>(</span><span>)</span><span>)</span>\nf<span>.</span>close<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>建议，使用文件对象时，一定要指定编码，而不是使用默认编码</p>\n<h3 id=\"write\"> write</h3>\n<ul>\n<li>write(s)，文本模式时，从当前指针处把字符串 s 写入到文件中并返回写入字符的个数；二进制时将 bytes写入文件并返回写入字节数</li>\n<li>writelines(lines)，将字符串列表写入文件</li>\n</ul>\n<div><pre><code>filename <span>=</span> <span>'test.txt'</span>\nf <span>=</span> <span>open</span><span>(</span>filename<span>,</span> <span>'w+'</span><span>)</span>\nlines <span>=</span> <span>[</span><span>'abc'</span><span>,</span> <span>'123\\n'</span><span>,</span> <span>'baidu'</span><span>]</span> <span># 需提供换行符</span>\n<span># for line in lines:</span>\n<span># f.write(line)</span>\nf<span>.</span>writelines<span>(</span>lines<span>)</span>\nf<span>.</span>seek<span>(</span><span>0</span><span>)</span> <span># 回到开始</span>\n<span>print</span><span>(</span>f<span>.</span>read<span>(</span><span>)</span><span>)</span>\nf<span>.</span>close<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><strong>close</strong></p>\n<p>flush并关闭文件对象。文件已经关闭，再次关闭没有任何效果。可以查看文件对象的closed属性，判断是否关闭</p>\n<h2 id=\"上下文管理\"> 上下文管理</h2>\n<p>文件对象这种打开资源并一定要关闭的对象，为了保证其打开后一定关闭，为其提供了上下文支持。</p>\n<div><pre><code>filename <span>=</span> <span>'test.txt'</span>\n<span>with</span> <span>open</span><span>(</span>filename<span>)</span> <span>as</span> f<span>:</span>\n    <span>print</span><span>(</span><span>1</span><span>,</span> f<span>.</span>closed<span>)</span>\n    <span>print</span><span>(</span>f<span>.</span>write<span>(</span><span>'abcd'</span><span>)</span><span>)</span> <span># r模式写入失败，抛异常</span>\n<span>print</span><span>(</span><span>2</span><span>,</span> f<span>.</span>closed<span>)</span> <span># with中不管是否抛异常，with结束时都会保证关闭文件对象</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>with</span> 文件对象 <span>as</span> 标识符<span>:</span> <span># 等同于 标识符 = 文件对象</span>\n    <span>pass</span> <span># 标识符可以在内部使用</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>上下文管理</p>\n<ol>\n<li>使用with关键字，上下文管理针对的是with后的对象</li>\n<li>使用with ... as 关键字</li>\n<li>上下文管理的语句块并不会开启新的作用域</li>\n</ol>\n<p>文件对象上下文管理</p>\n<ol>\n<li>进入with 时，with 后的文件对象是被管理对象</li>\n<li>as 子句后的标识符，指向 with 后的文件对象</li>\n<li>with 语句块执行完的时候，会自动关闭文件对象</li>\n</ol>\n<div><pre><code>filename <span>=</span> <span>'test.txt'</span>\nf <span>=</span> <span>open</span><span>(</span>filename<span>)</span>\n<span>with</span> f <span>as</span> f2<span>:</span>\n    <span>print</span><span>(</span>f <span>is</span> f2<span>)</span> <span># True</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><strong>文件的遍历</strong></p>\n<p>类似于日志文件，文件需要遍历，最常用的方式就是逐行遍历。</p>\n<div><pre><code>filename <span>=</span> <span>'test.txt'</span>\n<span>with</span> <span>open</span><span>(</span>filename<span>,</span> <span>'w'</span><span>)</span> <span>as</span> f<span>:</span>\n    f<span>.</span>write<span>(</span><span>'\\n'</span><span>.</span>join<span>(</span><span>map</span><span>(</span><span>str</span><span>,</span> <span>range</span><span>(</span><span>101</span><span>,</span> <span>120</span><span>)</span><span>)</span><span>)</span><span>)</span>\n\n<span>with</span> <span>open</span><span>(</span>filename<span>)</span> <span>as</span> f<span>:</span>\n    <span>for</span> line <span>in</span> f<span>:</span> <span># 文件对象时可迭代对象，逐行遍历</span>\n        <span>print</span><span>(</span>line<span>.</span>encode<span>(</span><span>)</span><span>)</span> <span># 带换行符</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"路径操作\"> 路径操作</h2>\n<h3 id=\"os-path-模块\"> os.path 模块</h3>\n<div><pre><code><span># os模块常用函数</span>\n<span>from</span> os <span>import</span> path\n\np <span>=</span> path<span>.</span>join<span>(</span><span>'/etc'</span><span>,</span> <span>'sysconfig'</span><span>,</span> <span>'network'</span><span>)</span> <span># 拼接</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>p<span>)</span><span>,</span> p<span>)</span>\n<span>print</span><span>(</span>path<span>.</span>exists<span>(</span>p<span>)</span><span>)</span> <span># 存在</span>\n\n<span>print</span><span>(</span>path<span>.</span>split<span>(</span>p<span>)</span><span>)</span> <span># 分割</span>\n<span>print</span><span>(</span>path<span>.</span>dirname<span>(</span>p<span>)</span><span>,</span> path<span>.</span>basename<span>(</span>p<span>)</span><span>)</span> <span># 路径和基名</span>\n\n<span>print</span><span>(</span>path<span>.</span>abspath<span>(</span><span>''</span><span>)</span><span>,</span> path<span>.</span>abspath<span>(</span><span>'.'</span><span>)</span><span>)</span> <span># 绝对路径</span>\n<span>print</span><span>(</span>path<span>.</span>splitdrive<span>(</span><span>'o:/temp/test'</span><span>)</span><span>)</span> <span># windows方法</span>\n\n<span># 打印父目录</span>\np1 <span>=</span> path<span>.</span>abspath<span>(</span>__file__<span>)</span>\n<span>print</span><span>(</span>p1<span>)</span>\n<span>while</span> p1 <span>!=</span> path<span>.</span>dirname<span>(</span>p1<span>)</span><span>:</span>\n    p1 <span>=</span> path<span>.</span>dirname<span>(</span>p1<span>)</span>\n    <span>print</span><span>(</span>p1<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>os.path模块操作的都是字符串。</p>\n<h3 id=\"path-类\"> Path 类</h3>\n<p>从3.4开始Python提供了pathlib模块，使用Path类操作目录更加方便。</p>\n<p><strong>初始化</strong></p>\n<div><pre><code><span>from</span> pathlib <span>import</span> Path\n\np <span>=</span> Path<span>(</span><span>)</span> <span># 当前目录， Path()、Path('.')、Path('')</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>p<span>)</span><span>,</span> p<span>)</span>\np <span>=</span> Path<span>(</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'c/d'</span><span>)</span> <span># 当前目录下的a/b/c/d</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>p<span>)</span><span>,</span> p<span>)</span>\np <span>=</span> Path<span>(</span><span>'/etc'</span><span>,</span> Path<span>(</span><span>'sysconfig'</span><span>)</span><span>,</span> <span>'network/ifcfg'</span><span>)</span> <span># 根下的etc目录</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>p<span>)</span><span>,</span> p<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><strong>拼接</strong></p>\n<p><em>操作符 /</em></p>\n<ul>\n<li>Path对象 / Path对象</li>\n<li>Path对象 / 字符串</li>\n<li>字符串 / Path对象</li>\n</ul>\n<p>joinpath</p>\n<ul>\n<li>joinpath(*other) 在当前Path路径上连接多个字符串返回新路径对象</li>\n</ul>\n<div><pre><code><span>from</span> pathlib <span>import</span> Path\n\np <span>=</span> Path<span>(</span><span>)</span>\np <span>=</span> p <span>/</span> <span>'a'</span>\np1 <span>=</span> <span>'b'</span> <span>/</span> p\np2 <span>=</span> Path<span>(</span><span>'c'</span><span>)</span>\np3 <span>=</span> p2 <span>/</span> p1\n<span>print</span><span>(</span>p1<span>,</span> p2<span>,</span> p3<span>)</span>\n<span>print</span><span>(</span>p3<span>.</span>parts<span>)</span>\n<span>print</span><span>(</span>p3<span>.</span>joinpath<span>(</span><span>'d'</span><span>,</span> <span>'e/f'</span><span>,</span> Path<span>(</span><span>'g/h'</span><span>)</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><strong>分解</strong></p>\n<p>parts属性，会返回目录各部分的元组</p>\n<div><pre><code>p <span>=</span> Path<span>(</span><span>'/a/b/c/d'</span><span>)</span>\n<span>print</span><span>(</span>p<span>.</span>parts<span>)</span> <span># 最左边的/是根目录</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><strong>父目录</strong></p>\n<div><pre><code><span>from</span> pathlib <span>import</span> Path\np <span>=</span> Path<span>(</span><span>'/clay/mysql/install/mysql.tar.gz'</span><span>)</span>\n<span>print</span><span>(</span>p<span>.</span>parent<span>)</span>\n<span>for</span> x <span>in</span> p<span>.</span>parents<span>:</span> <span># 可迭代对象</span>\n    <span>print</span><span>(</span>x<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><strong>目录组成部分</strong></p>\n<p>name、stem、suffix、suffixes、with_suffix(suffix)、with_name(name)</p>\n<ul>\n<li>name 目录的最后一个部分</li>\n<li>suffix 目录中最后一个部分的扩展名</li>\n<li>stem 目录最后一个部分，没有后缀</li>\n<li>name = stem + suffix</li>\n</ul>\n<p>suffixes 返回多个扩展名列表</p>\n<ul>\n<li>with_suffix(suffix) 有扩展名则替换，无则补充扩展名</li>\n<li>with_name(name) 替换目录最后一个部分并返回一个新的路径</li>\n</ul>\n<div><pre><code><span>from</span> pathlib <span>import</span> Path\n\np <span>=</span> Path<span>(</span><span>'/clay/mysql/install/mysql.tar.gz'</span><span>)</span>\n<span>print</span><span>(</span>p<span>.</span>parent<span>)</span>\n<span>print</span><span>(</span>p<span>.</span>name<span>)</span>\n<span>print</span><span>(</span>p<span>.</span>stem<span>)</span>\n<span>print</span><span>(</span>p<span>.</span>suffix<span>)</span>\n<span>print</span><span>(</span>p<span>.</span>suffixes<span>)</span>\n<span>print</span><span>(</span>p<span>.</span>with_name<span>(</span><span>'redis'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>p<span>.</span>with_name<span>(</span><span>'redis'</span><span>)</span><span>.</span>with_suffix<span>(</span><span>'.zip'</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><strong>全局方法</strong></p>\n<ul>\n<li>cwd() 返回当前工作目录</li>\n<li>home() 返回当前家目录</li>\n</ul>\n<div><pre><code><span>from</span> pathlib <span>import</span> Path\n\np <span>=</span> Path<span>(</span><span>'/clay/mysql/install/mysql.tar.gz'</span><span>)</span>\n<span>print</span><span>(</span>p<span>.</span>cwd<span>(</span><span>)</span><span>,</span> Path<span>.</span>cwd<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>p<span>.</span>home<span>(</span><span>)</span><span>,</span> Path<span>.</span>home<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><strong>判断方法</strong></p>\n<ul>\n<li>exists() 目录或文件是否存在</li>\n<li>is_dir() 是否是目录，目录存在返回True</li>\n<li>is_file() 是否是普通文件，文件存在返回True</li>\n<li>is_symlink() 是否是软链接</li>\n<li>is_socket() 是否是socket文件</li>\n<li>is_block_device() 是否是块设备</li>\n<li>is_char_device() 是否是字符设备</li>\n<li>is_absolute() 是否是绝对路径</li>\n</ul>\n<blockquote>\n<p>注意：文件只有存在，才能知道它是什么类型文件</p>\n</blockquote>\n<p><strong>绝对路径</strong></p>\n<ul>\n<li>resolve() 非Windows，返回一个新的路径，这个新路径就是当前Path对象的绝对路径，如果是软链接则直接被解析。</li>\n<li>absolute() 获取绝对路径。</li>\n</ul>\n<p><strong>通配符</strong></p>\n<ul>\n<li>glob(pattern) 通配给定的模式，返回生成器对象</li>\n<li>rglob(pattern) 通配给定的模式，递归目录，返回生成器对象</li>\n<li>? 代表一个字符</li>\n<li>* 表示任意个字符</li>\n<li>[abc]或[a-z] 表示一个字符</li>\n</ul>\n<div><pre><code><span>list</span><span>(</span>p<span>.</span>glob<span>(</span><span>'test*'</span><span>)</span><span>)</span> <span># 返回当前目录对象下的test开头的文件</span>\n<span>list</span><span>(</span>p<span>.</span>glob<span>(</span><span>'**/*.py'</span><span>)</span><span>)</span> <span># 递归所有目录，等同rglob</span>\n<span>list</span><span>(</span>p<span>.</span>glob<span>(</span><span>'**/*'</span><span>)</span><span>)</span>\n\ng <span>=</span> p<span>.</span>rglob<span>(</span><span>'*.py'</span><span>)</span> <span># 生成器，递归</span>\n<span>next</span><span>(</span>g<span>)</span>\n<span>list</span><span>(</span>p<span>.</span>rglob<span>(</span><span>'*.???'</span><span>)</span><span>)</span> <span># 匹配扩展名为3个字符的文件</span>\n<span>list</span><span>(</span>p1<span>.</span>rglob<span>(</span><span>'[a-z]*.???'</span><span>)</span><span>)</span> <span># 匹配字母开头的且扩展名是3个字符的文件</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><strong>其他操作</strong></p>\n<ul>\n<li>\n<p>rmdir() 删除空目录。没有提供判断目录为空的方法</p>\n</li>\n<li>\n<p>touch(mode=0o666, exist_ok=True) 创建一个文件</p>\n</li>\n<li>\n<p>as_uri() 将路径返回成URI，例如'file:///etc/passwd'</p>\n</li>\n<li>\n<p>mkdir(mode=0o777, parents=False, exist_ok=False)</p>\n<p>parents，是否创建父目录，True等同于mkdir -p。False时，父目录不存在，则抛出\nFileNotFoundError\nexist_ok参数，在3.5版本加入。False时，路径存在，抛出FileExistsError；True时，\nFileExistsError被忽略</p>\n</li>\n<li>\n<p>iterdir() 迭代当前目录，不递归</p>\n</li>\n</ul>\n<div><pre><code><span>from</span> pathlib <span>import</span> Path\n\np <span>=</span> Path<span>(</span><span>'o:/a/b/c/d'</span><span>)</span>\np<span>.</span>mkdir<span>(</span>parents<span>=</span><span>True</span><span>,</span> exist_ok<span>=</span><span>True</span><span>)</span>\n<span>(</span>p <span>/</span> <span>'test'</span><span>)</span><span>.</span>touch<span>(</span><span>)</span>\n<span>for</span> x <span>in</span> p<span>.</span>parents<span>[</span><span>len</span><span>(</span>p<span>.</span>parents<span>)</span> <span>-</span> <span>1</span><span>]</span><span>.</span>iterdir<span>(</span><span>)</span><span>:</span> <span># 不支持负索引</span>\n\t<span>if</span> x<span>.</span>is_dir<span>(</span><span>)</span><span>:</span>\n\t\t<span>print</span><span>(</span><span>'dir ='</span><span>,</span> x<span>)</span>\n\t<span>elif</span> x<span>.</span>is_file<span>(</span><span>)</span><span>:</span>\n\t\t<span>print</span><span>(</span><span>'file ='</span><span>,</span> x<span>)</span>\n\t<span>else</span><span>:</span>\n\t\t<span>print</span><span>(</span><span>'other ='</span><span>,</span> x<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>\n<li>stat 相当于stat命令</li>\n<li>lstat 使用方法同stat()，但如果是符号链接，则显示符号链接本身的文件信息</li>\n</ul>\n<h2 id=\"shutil-模块\"> shutil 模块</h2>\n<p>文件拷贝：使用打开2个文件对象，源文件读取内容，写入目标文件中来完成拷贝过程。但是这样丢失 stat 数据信息（权限等），因为根本没有复制这些信息过去。</p>\n<p>目录复制又怎么办呢？</p>\n<p>Python 提供了一个方便的库 shutil（高级文件操作）。</p>\n<h3 id=\"copy-复制\"> copy 复制</h3>\n<p><code>copyfileobj(fsrc, fdst[, length])</code>\n文件对象的复制，fsrc和fdst是open打开的文件对象，复制内容。fdst要求可写。\nlength 指定了表示buffer的大小；</p>\n<p><code>copyfile(src, dst, *, follow_symlinks=True)</code>\n复制文件内容，不含元数据。src、dst为文件的路径字符串\n本质上调用的就是copyfileobj，所以不带元数据二进制内容复制。</p>\n<p><code>copymode(src, dst, *, follow_symlinks=True)</code>\n仅仅复制权限。</p>\n<p><code>copystat(src, dst, *, follow_symlinks=True)</code>\n复制元数据，stat包含权限</p>\n<p><code>copy(src, dst, *, follow_symlinks=True)</code>\n复制文件内容、权限和部分元数据，不包括创建时间和修改时间。</p>\n<p>本质上调用的是\n<code>copyfile(src, dst, follow_symlinks=follow_symlinks)</code>\n<code>copymode(src, dst, follow_symlinks=follow_symlinks)</code></p>\n<p><code>copy2</code> 比copy多了复制全部元数据，但需要平台支持。\n本质上调用的是\n<code>copyfile(src, dst, follow_symlinks=follow_symlinks)</code>\n<code>copystat(src, dst, follow_symlinks=follow_symlinks)</code></p>\n<p><code>copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,ignore_dangling_symlinks=False)</code>\n<strong>递归复制</strong>目录。默认使用copy2，也就是带更多的元数据复制。\nsrc、dst必须是目录，src必须存在，dst必须<strong>不存在</strong>\nignore = func ，提供一个 callable(src, names) -&gt; ignored_names。提供一个函数，它会被调用。src是源目录，names 是 os.listdir(src) 的结果，就是列出 src 中的文件名，返回值是要被过滤的文件名的 set类型数据。</p>\n<div><pre><code><span>def</span> <span>ignore</span><span>(</span>src<span>,</span> names<span>)</span><span>:</span>\n\tig <span>=</span> <span>filter</span><span>(</span><span>lambda</span> x<span>:</span> x<span>.</span>startswith<span>(</span><span>'a'</span><span>)</span><span>,</span> names<span>)</span> <span># 忽略a开头的</span>\n\t<span>return</span> <span>set</span><span>(</span>ig<span>)</span>\n\nshutil<span>.</span>copytree<span>(</span><span>'o:/temp'</span><span>,</span><span>'o:/tt/o'</span><span>,</span>ignore<span>=</span>ignore<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"rm-删除\"> rm 删除</h3>\n<p><code>shutil.rmtree(path, ignore_errors=False, onerror=None)</code></p>\n<p>递归删除。如同 rm -rf 一样危险，慎用。</p>\n<p>它不是原子操作，有可能删除错误，就会中断，已经删除的就删除了。</p>\n<p>ignore_errors为true，忽略错误。当为False或者omitted时onerror生效。</p>\n<p>onerror为callable，接受函数function、path和execinfo。</p>\n<div><pre><code>shutil<span>.</span>rmtree<span>(</span><span>'O:/tmp'</span><span>)</span> <span># 类似 rm -rf</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"move-移动\"> move 移动</h3>\n<p><code>move(src, dst, copy_function=copy2)</code></p>\n<p>递归移动文件、目录到目标，返回目标。</p>\n<p>本身使用的是 os.rename方法。</p>\n<p>如果不支持rename，如果是目录则copytree再删除源目录。</p>\n<p>默认使用copy2方法。</p>\n<div><pre><code>shutil<span>.</span>move<span>(</span><span>'o:/a'</span><span>,</span> <span>'o:/aaa'</span><span>)</span>\nos<span>.</span>rename<span>(</span><span>'o:/t.txt'</span><span>,</span><span>'o:/temp/t'</span><span>)</span>\nos<span>.</span>rename<span>(</span><span>'test3'</span><span>,</span><span>'/tmp/py/test300'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>shutil还有打包功能。生成tar并压缩。支持zip、gz、bz、xz。</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "08 异常处理",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-exception/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-exception/",
      "content_html": "<h1 id=\"_08-异常处理\"> 08 异常处理</h1>\n<p><strong>错误 Error</strong></p>\n<p>逻辑错误：算法写错了，例如加法写成了减法</p>\n<p>笔误：例如变量名写错了，语法错误</p>\n<p>函数或类使用错误，其实这也属于逻辑错误</p>\n<p>总之，错误是可以避免的</p>\n<p><strong>异常 Exception</strong></p>\n<p>本意就是意外情况</p>\n<p>这有个前提，没有出现上面说的错误，也就是说程序写的没有问题，但是在某些情况下，会出现一些意外，导致程序无法正常的执行下去。</p>\n<p>例如open函数操作一个文件，文件不存在，或者创建一个文件时已经存在了，或者访问一个网络文件，突然断网了，这就是异常，是个意外的情况。</p>\n<p>异常不可能避免</p>\n<p>**错误和异常</p>\n<p>在高级编程语言中，一般都有错误和异常的概念，异常是可以捕获，并被处理的，但是错误是不能被捕获的。\n举例\n对比异常和错误</p>\n<div><pre><code><span>with</span> <span>open</span><span>(</span><span>'testabc'</span><span>)</span> <span>as</span> f<span>:</span>\n    <span>pass</span>\n<span># 异常</span>\nTraceback <span>(</span>most recent call last<span>)</span><span>:</span>\n  File <span>\"C:/Users/user/PycharmProjects/pr1/test1.py\"</span><span>,</span> line <span>1</span><span>,</span> <span>in</span> <span>&lt;</span>module<span>></span>\n    <span>with</span> <span>open</span><span>(</span><span>'testabc'</span><span>)</span> <span>as</span> f<span>:</span>\nFileNotFoundError<span>:</span> <span>[</span>Errno <span>2</span><span>]</span> No such <span>file</span> <span>or</span> directory<span>:</span> <span>'testabc'</span>\n        \n<span>def</span> <span>0A</span><span>(</span><span>)</span><span>:</span>\n    <span>pass</span>\n\n<span># 错误</span>\n  File <span>\"test1.py\"</span><span>,</span> line <span>1</span>\n    <span>def</span> <span>0A</span><span>(</span><span>)</span><span>:</span>\n        <span>^</span>\nSyntaxError<span>:</span> invalid syntax\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>一个健壮的程序</p>\n<ul>\n<li>尽可能的避免错误</li>\n<li>尽可能的捕获、处理各种异常</li>\n</ul>\n<h2 id=\"产生异常\"> 产生异常</h2>\n<p>产生：</p>\n<ul>\n<li>raise 语句显式的抛出异常</li>\n<li>Python解释器自己检测到异常并引发它</li>\n</ul>\n<div><pre><code><span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'before'</span><span>)</span>\n    <span>print</span><span>(</span><span>1</span><span>/</span><span>0</span><span>)</span> <span># 除零异常</span>\n    <span>print</span><span>(</span><span>'after'</span><span>)</span>\n\nfoo<span>(</span><span>)</span>\n\n<span>def</span> <span>bar</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'before'</span><span>)</span>\n    <span>raise</span> Exception<span>(</span><span>'my exception'</span><span>)</span> <span># raise主动抛出异常</span>\n    <span>print</span><span>(</span><span>'after'</span><span>)</span>\nbar<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>程序会在异常抛出的地方中断执行，如果不捕获，就会提前结束程序（其实是终止当前线程的执行）</p>\n<h2 id=\"异常的捕获\"> 异常的捕获</h2>\n<div><pre><code><span>try</span><span>:</span>\n\t待捕获异常的代码块\n<span>except</span> <span>[</span>异常类型<span>]</span><span>:</span>\n\t异常的处理代码块\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span>\n    <span>try</span><span>:</span>\n        <span>print</span><span>(</span><span>'before'</span><span>)</span>\n        <span>print</span><span>(</span><span>1</span><span>/</span><span>0</span><span>)</span> <span># 除零异常</span>\n        <span>print</span><span>(</span><span>'after'</span><span>)</span>\n    <span>except</span><span>:</span>\n        <span>print</span><span>(</span><span>'catch u'</span><span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n\nfoo<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>'==== end ===='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>上例执行到 <code>c = 1/0</code> 时产生异常并抛出，由于使用了 try...except 语句块则捕捉到了这个异常，异常生成位置之后语句将不再执行，转而执行对应的 except 部分的语句，最后执行 try...except 语句块之外的语句。</p>\n<p><strong>捕获指定类型的异常</strong></p>\n<div><pre><code><span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span>\n    <span>try</span><span>:</span>\n        <span>print</span><span>(</span><span>'before'</span><span>)</span>\n        <span>print</span><span>(</span><span>1</span><span>/</span><span>0</span><span>)</span> <span># 除零异常</span>\n        <span>print</span><span>(</span><span>'after'</span><span>)</span>\n    <span>except</span> ArithmeticError<span>:</span>\n        <span>print</span><span>(</span><span>'catch u'</span><span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n\nfoo<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>'==== end ===='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"异常类及继承层次\"> 异常类及继承层次</h2>\n<div><pre><code><span># Python异常的继承</span>\nBaseException\n    <span>+</span><span>-</span><span>-</span> SystemExit\n    <span>+</span><span>-</span><span>-</span> KeyboardInterrupt\n    <span>+</span><span>-</span><span>-</span> GeneratorExit\n    <span>+</span><span>-</span><span>-</span> Exception\n    <span>+</span><span>-</span><span>-</span> RuntimeError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> RecursionError\n    <span>+</span><span>-</span><span>-</span> MemoryError\n    <span>+</span><span>-</span><span>-</span> NameError\n    <span>+</span><span>-</span><span>-</span> StopIteration\n    <span>+</span><span>-</span><span>-</span> StopAsyncIteration\n    <span>+</span><span>-</span><span>-</span> ArithmeticError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> FloatingPointError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> OverflowError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> ZeroDivisionError\n    <span>+</span><span>-</span><span>-</span> LookupError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> IndexError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> KeyError\n    <span>+</span><span>-</span><span>-</span> SyntaxError\n    <span>+</span><span>-</span><span>-</span> OSError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> BlockingIOError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> ChildProcessError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> ConnectionError\n    <span>|</span> <span>|</span> <span>+</span><span>-</span><span>-</span> BrokenPipeError\n    <span>|</span> <span>|</span> <span>+</span><span>-</span><span>-</span> ConnectionAbortedError\n    <span>|</span> <span>|</span> <span>+</span><span>-</span><span>-</span> ConnectionRefusedError\n    <span>|</span> <span>|</span> <span>+</span><span>-</span><span>-</span> ConnectionResetError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> FileExistsError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> FileNotFoundError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> InterruptedError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> IsADirectoryError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> NotADirectoryError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> PermissionError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> ProcessLookupError\n    <span>|</span> <span>+</span><span>-</span><span>-</span> TimeoutError\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h2 id=\"baseexception-及子类\"> BaseException 及子类</h2>\n<h3 id=\"baseexception\"> BaseException</h3>\n<p>所有内建异常类的基类是BaseException</p>\n<h3 id=\"systemexit\"> SystemExit</h3>\n<p>sys.exit()函数引发的异常，异常不捕获处理，就直接交给Python解释器，解释器退出。</p>\n<div><pre><code><span>import</span> sys\n<span>print</span><span>(</span><span>'before'</span><span>)</span>\nsys<span>.</span>exit<span>(</span><span>1</span><span>)</span>\n<span>print</span><span>(</span><span>'SysExit'</span><span>)</span>\n<span>print</span><span>(</span><span>'after'</span><span>)</span> <span># 是否执行？ 不执行</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span># 捕获这个异常</span>\n<span>import</span> sys\n<span>try</span><span>:</span>\n    <span>print</span><span>(</span><span>'before'</span><span>)</span>\n    sys<span>.</span>exit<span>(</span><span>1</span><span>)</span>\n    <span>print</span><span>(</span><span>'SysExit'</span><span>)</span>\n    <span>print</span><span>(</span><span>'after'</span><span>)</span> \n<span>except</span> SystemExit<span>:</span> <span># 换成Exception能否捕获 ,能</span>\n    <span>print</span><span>(</span><span>'SysExit'</span><span>)</span>\n<span>print</span><span>(</span><span>'outer'</span><span>)</span>  <span># 是否执行？ 执行</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>如果except语句捕获了该异常，则继续向后面执行，如果没有捕获住该异常SystemExit，解释器直接退出程序。</p>\n<p>注意捕获前后程序退出状态码的变化。（捕获后状态码变为0）</p>\n<h3 id=\"keyboardinterrupt\"> KeyboardInterrupt</h3>\n<p>对应的捕获用户中断行为Ctrl + C</p>\n<div><pre><code><span>import</span> time\n<span>try</span><span>:</span>\n    <span>while</span> <span>True</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'running'</span><span>)</span>\n<span>except</span> KeyboardInterrupt<span>:</span>\n    <span>print</span><span>(</span><span>\"Ctrl + c\"</span><span>)</span>\n<span>print</span><span>(</span><span>'='</span> <span>*</span> <span>30</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"exception及子类\"> Exception及子类</h2>\n<p>Exception是所有内建的、非系统退出的异常的基类，自定义异常类应该继承自它</p>\n<p><strong>SyntaxError 语法错误</strong></p>\n<p>Python将这种错误也归到异常类下面的Exception下的子类，但是这种错误是不可捕获的</p>\n<div><pre><code><span>def</span> <span>a</span><span>(</span><span>)</span><span>:</span>\n    <span>try</span><span>:</span>\n        <span>0a</span> <span>=</span> <span>5</span>\n    <span>except</span><span>:</span>\n        <span>pass</span>\na<span>(</span><span>)</span>\n  File <span>\"test1.py\"</span><span>,</span> line <span>3</span>\n    <span>0a</span> <span>=</span> <span>5</span>\n     <span>^</span>\nSyntaxError<span>:</span> invalid syntax\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><strong>ArithmeticError</strong></p>\n<p>所有算术计算引发的异常，其子类有除零异常等</p>\n<p><strong>LookupError</strong></p>\n<p>使用映射的键或序列的索引无效时引发的异常的基类：IndexError, KeyError</p>\n<p><strong>自定义异常类</strong></p>\n<p>从 Exception 继承的类</p>\n<div><pre><code><span>class</span> <span>MyException</span><span>(</span>Exception<span>)</span><span>:</span>\n    <span>pass</span>\n\n<span>try</span><span>:</span>\n    <span>raise</span> MyException<span>(</span><span>)</span>\n<span>except</span> MyException<span>:</span> <span># 捕获自定义异常</span>\n    <span>print</span><span>(</span><span>'catch u'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"多种捕获\"> 多种捕获</h2>\n<p>except 可以指定捕获的类型，捕获多种异常</p>\n<div><pre><code><span>import</span> sys\n<span>class</span> <span>MyException</span><span>(</span>Exception<span>)</span><span>:</span>\n    <span>pass</span>\n\n<span>try</span><span>:</span>\n    a <span>=</span> <span>1</span><span>/</span><span>0</span>\n    <span>raise</span> MyException<span>(</span><span>)</span>\n    <span>open</span><span>(</span><span>'t'</span><span>)</span>\n    sys<span>.</span>exit<span>(</span><span>1</span><span>)</span>\n<span>except</span> ZeroDivisionError<span>:</span>\n    <span>print</span><span>(</span><span>'zero'</span><span>)</span>\n<span>except</span> ArithmeticError<span>:</span>\n    <span>print</span><span>(</span><span>'arith'</span><span>)</span>\n<span>except</span> MyException<span>:</span> <span># 捕获自定义异常</span>\n    <span>print</span><span>(</span><span>'catch u'</span><span>)</span>\n<span>except</span> Exception<span>:</span>\n    <span>print</span><span>(</span><span>'exception'</span><span>)</span>\n<span>except</span><span>:</span> <span># 写在最后，缺省捕获</span>\n    <span>print</span><span>(</span><span>'error'</span><span>)</span>\n<span>print</span><span>(</span><span>'====end===='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>捕获规则</p>\n<ul>\n<li>捕获是从上到下依次比较，如果匹配，则执行匹配的except语句块</li>\n<li>如果被一个except语句捕获，其他except语句就不会再次捕获了</li>\n<li>如果没有任何一个except语句捕获到这个异常，则该异常向外抛出</li>\n<li><code>except:</code> 称为缺省捕获，缺省捕获必须是最后一个捕获语句</li>\n</ul>\n<p>捕获的原则</p>\n<ul>\n<li>从小到大，从具体到宽泛</li>\n</ul>\n<h2 id=\"as-子句\"> as 子句</h2>\n<p>先看一个例子</p>\n<div><pre><code><span># raise 能抛出什么样的异常？</span>\n<span>class</span> <span>A</span><span>:</span> <span>pass</span>\n<span>try</span><span>:</span>\n    <span># 1/0</span>\n    <span>raise</span> <span>1</span>\n    <span># raise \"abc\"</span>\n    <span># raise A</span>\n    <span># raise A()</span>\n    <span># raise {}</span>\n<span>except</span><span>:</span>  <span># 写在最后，缺省捕获</span>\n    <span>print</span><span>(</span><span>'catch u'</span><span>)</span>\n\n<span>print</span><span>(</span><span>'====end===='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>raise 真的什么类型都能抛出吗？</p>\n<p>被抛出的异常，应该是异常类的实例，如何获得这个对象呢？使用 as 子句</p>\n<div><pre><code><span># raise 能抛出什么样的异常？</span>\n<span>class</span> <span>A</span><span>:</span> <span>pass</span>\n<span>try</span><span>:</span>\n    <span># 1/0</span>\n    <span># raise 1</span>\n    <span>raise</span> <span>\"abc\"</span>\n    <span># raise A</span>\n    <span># raise A()</span>\n    <span># raise {}</span>\n<span>except</span> Exception <span>as</span> e<span>:</span>  <span># 写在最后，缺省捕获</span>\n    <span>print</span><span>(</span><span>type</span><span>(</span>e<span>)</span><span>,</span> e<span>)</span>  <span># 抛出TypeError类型异常实例</span>\n\n<span>print</span><span>(</span><span>'====end===='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>raise语句</p>\n<ul>\n<li>\n<p>raise后要求应该是BaseException类的子类或实例，如果是类，将被无参实例化。自定义应该是Exception子类</p>\n</li>\n<li>\n<p>raise后什么都没有，表示抛出最近一个被激活的异常，如果没有被激活的异常，则抛类型异常。</p>\n<p>这种方式较少用，它用在except中</p>\n</li>\n</ul>\n<h2 id=\"finally子句\"> finally子句</h2>\n<p>finally 最终，即最后一定要执行的，try...finally 语句块中，不管是否发生了异常，都要执行finally的部分</p>\n<div><pre><code><span>try</span><span>:</span>\n    f <span>=</span> <span>open</span><span>(</span><span>'test.tt'</span><span>)</span>\n<span>except</span> FileNotFoundError <span>as</span> e<span>:</span>\n    <span>print</span><span>(</span><span>'{} {} {}'</span><span>.</span><span>format</span><span>(</span>e<span>.</span>__class__<span>,</span> e<span>.</span>errno<span>,</span> e<span>.</span>strerror<span>)</span><span>)</span>\n<span>finally</span><span>:</span>\n    <span>print</span><span>(</span><span>'清理工作'</span><span>)</span>\n\tf<span>.</span>close<span>(</span><span>)</span> <span>#</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>注意上例中的f的作用域，解决的办法是在外部定义 f</p>\n<p>finally 中一般放置资源的清理、释放工作的语句</p>\n<div><pre><code>f <span>=</span> <span>None</span>\n<span>try</span><span>:</span>\n    f <span>=</span> <span>open</span><span>(</span><span>'test.tt'</span><span>)</span>\n<span>except</span> Exception <span>as</span> e<span>:</span>\n    <span>print</span><span>(</span><span>'{}'</span><span>.</span><span>format</span><span>(</span>e<span>)</span><span>)</span>\n<span>finally</span><span>:</span>\n    <span>print</span><span>(</span><span>'清理工作'</span><span>)</span>\n    <span>if</span> f<span>:</span>\n        f<span>.</span>close<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>也可以在 finally 中再次捕捉异常</p>\n<div><pre><code><span>try</span><span>:</span>\n    f <span>=</span> <span>open</span><span>(</span><span>'test.tt'</span><span>)</span>\n<span>except</span> FileNotFoundError <span>as</span> e<span>:</span>\n    <span>print</span><span>(</span><span>'{} {} {}'</span><span>.</span><span>format</span><span>(</span>e<span>.</span>__class__<span>,</span> e<span>.</span>errno<span>,</span> e<span>.</span>strerror<span>)</span><span>)</span>\n<span>finally</span><span>:</span>\n    <span>print</span><span>(</span><span>'清理工作'</span><span>)</span>\n    <span>try</span><span>:</span>\n\t    f<span>.</span>close<span>(</span><span>)</span> <span>#</span>\n    <span>except</span> Exception <span>as</span> e<span>:</span>\n        <span>print</span><span>(</span>e<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>语句嵌套和捕获</p>\n<ul>\n<li>异常语句内部可以嵌入到try块、except块、finally块中</li>\n<li>异常在内部产生后，如果没有捕获到，就会继续向外部抛出</li>\n<li>如果外部也没能捕获，将继续再向外部抛出，直至异常代码所在线程，导致线程崩溃</li>\n<li>finally中有return、break语句，则异常就不会继续向外抛出</li>\n</ul>\n<div><pre><code><span>try</span><span>:</span>\n    <span>try</span><span>:</span>\n        <span>1</span><span>/</span><span>0</span>\n    <span>except</span> KeyError <span>as</span> e<span>:</span>\n        <span>print</span><span>(</span><span>1</span><span>,</span> e<span>)</span>\n    <span>finally</span><span>:</span>\n        <span>print</span><span>(</span><span>2</span><span>,</span> <span>'inner fin'</span><span>)</span>\n<span>except</span> FileNotFoundError <span>as</span> e<span>:</span>\n    <span>print</span><span>(</span><span>3</span><span>,</span> e<span>)</span>\n<span>finally</span><span>:</span>\n    <span>print</span><span>(</span><span>4</span><span>,</span> <span>'outer fin'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"else-子句\"> else 子句</h2>\n<div><pre><code><span>try</span><span>:</span>\n    ret <span>=</span> <span>1</span> <span>*</span> <span>0</span>\n<span>except</span> ArithmeticError <span>as</span> e<span>:</span>\n    <span>print</span><span>(</span>e<span>)</span>\n<span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>'OK'</span><span>)</span>\n<span>finally</span><span>:</span>\n    <span>print</span><span>(</span><span>'fin'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>else 子句，<strong>没有任何异常发生</strong>，则执行</p>\n<h2 id=\"总结\"> 总结</h2>\n<div><pre><code><span>try</span><span>:</span>\n    <span>&lt;</span>语句<span>></span> <span>#运行别的代码</span>\n<span>except</span> <span>&lt;</span>异常类<span>></span>：\n    <span>&lt;</span>语句<span>></span> <span># 捕获某种类型的异常</span>\n<span>except</span> <span>&lt;</span>异常类<span>></span> <span>as</span> <span>&lt;</span>变量名<span>></span><span>:</span>\n    <span>&lt;</span>语句<span>></span> <span># 捕获某种类型的异常并获得对象</span>\n<span>else</span><span>:</span>\n    <span>&lt;</span>语句<span>></span> <span>#如果没有异常发生</span>\n<span>finally</span><span>:</span>\n    <span>&lt;</span>语句<span>></span> <span>#退出try时总会执行</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ol>\n<li>如果try中语句执行时发生异常，搜索except子句，并执行第一个匹配该异常的except子句</li>\n<li>如果try中语句执行时发生异常，却没有匹配的except子句，异常将被递交到外层的try，如果外层不处理这个异常，异常将继续向外层传递。如果都不处理该异常，则会传递到最外层，如果还没有处理，就终止异常所在的线程</li>\n<li>如果在try执行时没有发生异常，如有else子句，可执行else子句中的语句</li>\n<li>无论try中是否发生异常，finally子句最终都会执行</li>\n</ol>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "04 函数",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-function/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-function/",
      "content_html": "<h1 id=\"_04-函数\"> 04 函数</h1>\n<h2 id=\"函数\"> 函数</h2>\n<p>数学定义</p>\n<ul>\n<li>y=f(x) ，y是x的函数，x是自变量。y=f(x0, x1, ..., xn)</li>\n</ul>\n<p>Python函数</p>\n<ul>\n<li>由若干语句组成的语句块、函数名称、参数列表构成，它是组织代码的最小单元</li>\n<li>完成一定的功能</li>\n</ul>\n<p>函数的作用</p>\n<ul>\n<li>结构化编程对代码的最基本的封装，一般按照功能组织一段代码</li>\n<li>封装的目的为了复用，减少冗余代码</li>\n<li>代码更加简洁美观、可读易懂</li>\n</ul>\n<p>函数的分类</p>\n<ul>\n<li>内建函数，如max()、reversed()等</li>\n<li>库函数，如math.ceil()等</li>\n<li>自定义函数，使用def关键字定义</li>\n</ul>\n<h2 id=\"函数定义\"> 函数定义</h2>\n<div><pre><code><span>def</span> 函数名<span>(</span>参数列表<span>)</span><span>:</span>\n\t函数体（代码块）\n\t<span>[</span><span>return</span> 返回值<span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>\n<li>函数名就是标识符，命名要求一样</li>\n<li>语句块必须缩进，约定4个空格</li>\n<li>Python的函数若没有return语句，会隐式返回一个None值</li>\n<li>定义中的参数列表称为形式参数，只是一种符号表达（标识符），简称形参</li>\n</ul>\n<h2 id=\"函数调用\"> 函数调用</h2>\n<ul>\n<li>函数定义，只是声明了一个函数，它不能被执行，需要调用执行</li>\n<li>调用的方式，就是函数名后加上小括号，如有必要在括号内填写上参数</li>\n<li>调用时写的参数是实际参数，是实实在在传入的值，简称实参</li>\n</ul>\n<div><pre><code><span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span> <span># 函数定义</span>\n\tresult <span>=</span> x <span>+</span> y <span># 函数体</span>\n\t<span>return</span> result <span># 返回值</span>\n\nout <span>=</span> add<span>(</span><span>4</span><span>,</span><span>5</span><span>)</span> <span># 函数调用，可能有返回值，使用变量接收这个返回值</span>\n<span>print</span><span>(</span>out<span>)</span> <span># print函数加上括号也是调用</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>上面代码解释：</p>\n<ul>\n<li>定义一个函数add，及函数名是add，能接受2个参数</li>\n<li>该函数计算的结果，通过返回值返回，需要return语句</li>\n<li>调用时，通过函数名add后加2个参数，返回值可使用变量接收</li>\n<li>函数名也是标识符</li>\n<li>返回值也是值</li>\n<li>定义需要在调用前，也就是说调用时，已经被定义过了，否则抛NameError异常</li>\n<li>函数是可调用的对象，callable(add)返回True</li>\n</ul>\n<h2 id=\"函数参数\"> 函数参数</h2>\n<p>函数在定义是要定义好形式参数，调用时也提供足够的实际参数，一般来说，形参和实参个数要一致（可变参数除外）。</p>\n<h3 id=\"实参传参方式\"> 实参传参方式</h3>\n<p>1、位置传参</p>\n<p>定义时def f(x, y, z)， 调用使用 f(1, 3, 5)，按照参数定义顺序传入实参</p>\n<p>2、关键字传参</p>\n<p>定义时def f(x, y, z)，调用使用 f(x=1, y=3, z=5)，使用形参的名字来传入实参的方式，如果使用了形参名字，那么传参顺序就可和定义顺序不同</p>\n<p>要求位置参数必须在关键字参数之前传入，位置参数是按位置对应的</p>\n<blockquote>\n<p>切记：传参指的是调用时传入实参，就2种方式。</p>\n</blockquote>\n<p>下面讲的都是形参定义。</p>\n<h3 id=\"形参缺省值\"> 形参缺省值</h3>\n<p>缺省值也称为默认值，可以在函数定义时，为形参增加一个缺省值。其作用：</p>\n<ul>\n<li>参数的默认值可以在未传入足够的实参的时候，对没有给定的参数赋值为默认值</li>\n<li>参数非常多的时候，并不需要用户每次都输入所有的参数，简化函数调用</li>\n</ul>\n<h3 id=\"可变参数\"> 可变参数</h3>\n<p>需求：写一个函数，可以对多个数累加求和</p>\n<div><pre><code><span>def</span> <span>sum</span><span>(</span>iterable<span>)</span><span>:</span>\n\ts <span>=</span> <span>0</span>\n\t<span>for</span> x <span>in</span> iterable<span>:</span>\n\t\ts <span>+=</span> x\n\t<span>return</span> s\n\n<span>print</span><span>(</span><span>sum</span><span>(</span><span>[</span><span>1</span><span>,</span><span>3</span><span>,</span><span>5</span><span>]</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>sum</span><span>(</span><span>range</span><span>(</span><span>4</span><span>)</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>上例，传入可迭代对象，并累加每一个元素。</p>\n<p>也可以使用可变参数完成上面的函数。</p>\n<div><pre><code><span>def</span> <span>sum</span><span>(</span><span>*</span>nums<span>)</span><span>:</span>\n\t<span>sum</span> <span>=</span> <span>0</span>\n\t<span>for</span> x <span>in</span> nums<span>:</span>\n\t\t<span>sum</span> <span>+=</span> x\n\t<span>return</span> <span>sum</span>\n\n<span>print</span><span>(</span><span>sum</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>sum</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>1、可变位置参数</p>\n<ul>\n<li>在形参前使用 * 表示该形参是可变位置参数，可以接受多个实参</li>\n<li>它将收集来的实参组织到一个 tuple 中</li>\n</ul>\n<p>2、可变关键字参数</p>\n<ul>\n<li>在形参前使用 ** 表示该形参是可变关键字参数，可以接受多个关键字参数</li>\n<li>它将收集来的实参的名称和值，组织到一个dict中</li>\n</ul>\n<p>总结：</p>\n<ul>\n<li>有可变位置参数和可变关键字参数</li>\n<li>可变位置参数在形参前使用一个星号*</li>\n<li>可变关键字参数在形参前使用两个星号**</li>\n<li>可变位置参数和可变关键字参数都可以收集若干个实参，可变位置参数收集形成一个tuple，可变关键字参数收集形成一个dict</li>\n<li>混合使用参数的时候，普通参数需要放到参数列表前面，可变参数要放到参数列表的后面，可变位置参数需要在可变关键字参数之前</li>\n</ul>\n<h3 id=\"keyword-only参数\"> keyword-only参数</h3>\n<p>在Python3之后，新增了keyword-only参数。</p>\n<p>keyword-only参数：在形参定义时，在一个*星号之后，或一个可变位置参数之后，出现的普通参数，就已经不是普通的参数了，称为keyword-only参数。</p>\n<p>keyword-only参数，言下之意就是这个参数必须采用关键字传参。</p>\n<h3 id=\"positional-only参数\"> positional-only参数</h3>\n<p>Python 3.8 开始，增加了最后一种形参类型的定义：Positional-only参数。（2019年10月发布3.8.0）</p>\n<div><pre><code><span>def</span> <span>fn</span><span>(</span>a<span>,</span> <span>/</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>a<span>,</span> sep<span>=</span><span>'\\n'</span><span>)</span>\nfn<span>(</span><span>3</span><span>)</span>\nfn<span>(</span>a<span>=</span><span>4</span><span>)</span> <span># 错误，仅位置参数，不可以使用关键字传参</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"参数规则\"> 参数规则</h3>\n<p>参数列表参数一般顺序是：positional-only参数、普通参数、缺省参数、可变位置参数、keyword-only参数（可带缺省值）、可变关键字参数。\n注意：</p>\n<ul>\n<li>代码应该易读易懂，而不是为难别人</li>\n<li>请按照书写习惯定义函数参数</li>\n<li>定义最常用参数为普通参数，可不提供缺省值，必须由用户提供。注意这些参数的顺序，最常用的先定义</li>\n<li>将必须使用名称的才能使用的参数，定义为keyword-only参数，要求必须使用关键字传参</li>\n<li>如果函数有很多参数，无法逐一定义，可使用可变参数。如果需要知道这些参数的意义，则使用可变关键字参数收集</li>\n</ul>\n<h3 id=\"参数解构\"> 参数解构</h3>\n<p>参数解构：</p>\n<ul>\n<li>在给函数提供实参的时候，可以在可迭代对象前使用 * 或者 ** 来进行结构的解构，提取出其中所有元素作为函数的实参</li>\n<li>使用 * 解构成位置传参</li>\n<li>使用 ** 解构成关键字传参</li>\n<li>提取出来的元素数目要和参数的要求匹配</li>\n</ul>\n<h2 id=\"函数返回值\"> 函数返回值</h2>\n<ul>\n<li>\n<p>Python 函数使用 return 语句返回“返回值”</p>\n</li>\n<li>\n<p>所有函数都有返回值，如果没有return语句，隐式调用return None</p>\n</li>\n<li>\n<p>return 语句并不一定是函数的语句块的最后一条语句</p>\n</li>\n<li>\n<p>一个函数可以存在多个return语句，但是只有一条可以被执行。如果没有一条return语句被执行到，隐式调用return None</p>\n</li>\n<li>\n<p>如果有必要，可以显示调用return None，可以简写为return</p>\n</li>\n<li>\n<p>如果函数执行了return语句，函数就会返回，当前被执行的return语句之后的其它语句就不会被执行了</p>\n</li>\n<li>\n<p>返回值的作用：结束函数调用、返回“返回值”</p>\n</li>\n<li>\n<p>函数不能同时返回多个值</p>\n</li>\n<li>\n<p>return 1, 3, 5 看似返回多个值，隐式的被python封装成了一个元组</p>\n</li>\n<li>\n<p>x, y, z = showlist() 使用解构提取返回值更为方便</p>\n</li>\n</ul>\n<h2 id=\"作用域\"> 作用域</h2>\n<p>一个标识符的可见范围，这就是标识符的作用域。一般常说的是变量的作用域</p>\n<div><pre><code><span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span>\n\tx <span>=</span> <span>100</span>\n<span>print</span><span>(</span>x<span>)</span> <span># 可以访问到吗</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>上例中x不可以访问到，会抛出异常（NameError: name 'x' is not defined），原因在于函数是一个封装，它会开辟一个作用域，x变量被限制在这个作用域中，所以在函数外部x变量不可见。</p>\n<blockquote>\n<p>注意：每一个函数都会开辟一个作用域</p>\n</blockquote>\n<h2 id=\"作用域分类\"> 作用域分类</h2>\n<ul>\n<li>全局作用域\n<ul>\n<li>在整个程序运行环境中都可见</li>\n<li>全局作用域中的变量称为全局变量global</li>\n</ul>\n</li>\n<li>局部作用域\n<ul>\n<li>在函数、类等内部可见</li>\n<li>局部作用域中的变量称为局部变量，其使用范围不能超过其所在局部作用域</li>\n<li>也称为本地作用域local</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"函数嵌套\"> 函数嵌套</h2>\n<p>在一个函数中定义了另外一个函数</p>\n<div><pre><code><span>def</span> <span>outer</span><span>(</span><span>)</span><span>:</span>\n\t<span>def</span> <span>inner</span><span>(</span><span>)</span><span>:</span>\n\t\t<span>print</span><span>(</span><span>\"inner\"</span><span>)</span>\n\tinner<span>(</span><span>)</span>\n\t<span>print</span><span>(</span><span>\"outer\"</span><span>)</span>\nouter<span>(</span><span>)</span> <span># 可以吗？ 可以</span>\ninner<span>(</span><span>)</span> <span># 可以吗？ 不可以</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>内部函数inner不能在外部直接使用，会抛NameError异常，因为它在函数外部不可见。</p>\n<p>其实，inner不过就是一个标识符，就是一个函数outer内部定义的变量而已。</p>\n<p><strong>嵌套结构的作用域</strong></p>\n<p>对比下面嵌套结构，代码执行的效果</p>\n<div><pre><code><span>def</span> <span>outer1</span><span>(</span><span>)</span><span>:</span> <span>#</span>\n    o <span>=</span> <span>65</span>\n    <span>def</span> <span>inner</span><span>(</span><span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>\"inner {}\"</span><span>.</span><span>format</span><span>(</span>o<span>)</span><span>)</span>\n        <span>print</span><span>(</span><span>chr</span><span>(</span>o<span>)</span><span>)</span>\n\n    inner<span>(</span><span>)</span>\n    <span>print</span><span>(</span><span>\"outer {}\"</span><span>.</span><span>format</span><span>(</span>o<span>)</span><span>)</span>\n\nouter1<span>(</span><span>)</span> <span># 打印结果</span>\n<span>#inner 65</span>\n<span>#A</span>\n<span>#outer 65</span>\n\n<span>def</span> <span>outer2</span><span>(</span><span>)</span><span>:</span> <span>#</span>\n    o <span>=</span> <span>65</span>\n    <span>def</span> <span>inner</span><span>(</span><span>)</span><span>:</span>\n        o <span>=</span> <span>97</span>\n        <span>print</span><span>(</span><span>\"inner {}\"</span><span>.</span><span>format</span><span>(</span>o<span>)</span><span>)</span>\n        <span>print</span><span>(</span><span>chr</span><span>(</span>o<span>)</span><span>)</span>\n\n    inner<span>(</span><span>)</span>\n    <span>print</span><span>(</span><span>\"outer {}\"</span><span>.</span><span>format</span><span>(</span>o<span>)</span><span>)</span>\n\nouter2<span>(</span><span>)</span> <span># 打印结果</span>\n<span>#inner 97</span>\n<span>#a</span>\n<span>#outer 65</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>从执行的结果来看：</p>\n<ul>\n<li>外层变量在内部作用域可见</li>\n<li>内层作用域 inner 中，如果定义了 <code>o = 97</code> ，相当于在当前函数 inner 作用域中重新定义了一个新的变量o，但是，<em><strong>这个 o 并不能覆盖掉外部作用域 outer2 中的变量 o</strong></em>。只不过对于 inner 函数来说，其只能可见自己作用域中定义的变量 o 了</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>内建函数</th>\n<th>函数签名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chr</td>\n<td>chr(i)</td>\n<td>通过unicode编码返回对应字符</td>\n</tr>\n<tr>\n<td>ord</td>\n<td>ord(c)</td>\n<td>获得字符对应的unicode</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>print</span><span>(</span><span>ord</span><span>(</span><span>'中'</span><span>)</span><span>,</span> <span>hex</span><span>(</span><span>ord</span><span>(</span><span>'中'</span><span>)</span><span>)</span><span>,</span> <span>'中'</span><span>.</span>encode<span>(</span><span>)</span><span>,</span> <span>'中'</span><span>.</span>encode<span>(</span><span>'gbk'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>chr</span><span>(</span><span>20013</span><span>)</span><span>)</span> <span># '中'</span>\n<span>print</span><span>(</span><span>chr</span><span>(</span><span>97</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>一个赋值语句的问题</strong></p>\n<p>函数内，变量未定义，+= 1问题</p>\n<p>略</p>\n<h2 id=\"global-语句\"> global 语句</h2>\n<div><pre><code>x <span>=</span> <span>5</span>\n<span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span>\n    <span>global</span> x <span># 全局变量</span>\n    x <span>+=</span> <span>1</span>\n    <span>print</span><span>(</span>x<span>)</span>\nfoo<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>\n<li>使用 global 关键字的变量，将 foo 内的 x 声明为使用外部的全局作用域中定义的 x</li>\n<li>全局作用域中必须有 x 的定义</li>\n<li>使用了global，foo中的x不再是局部变量了，它是全局变量。</li>\n</ul>\n<p><strong>总结</strong></p>\n<ul>\n<li><code>x+=1</code> 这种是特殊形式产生的错误的原因？先引用后赋值，而 python 动态语言是赋值才算定义，才能被引用。解决办法，在这条语句前增加 x=0 之类的赋值语句，或者使用global 告诉内部作用域，去全局作用域查找变量定义</li>\n<li>内部作用域使用 <code>x = 10</code> 之类的赋值语句会重新定义局部作用域使用的变量x，但是，一旦这个作\n用域中使用 global 声明x为全局的，那么<code>x=10</code>相当于在为全局作用域的变量x赋值</li>\n</ul>\n<p><strong>global使用原则</strong></p>\n<ul>\n<li>外部作用域变量会在内部作用域可见，但也不要在这个内部的局部作用域中直接使用，因为函数的目的就是为了封装，尽量与外界隔离</li>\n<li>如果函数需要使用外部全局变量，请尽量使用函数的形参定义，并在调用传实参解决</li>\n<li>一句话：不用global。学习它就是为了深入理解变量作用域</li>\n</ul>\n<h2 id=\"闭包\"> 闭包</h2>\n<p><strong>自由变量</strong>：未在本地作用域中定义的变量。例如定义在内层函数外的外层函数的作用域中的变量</p>\n<p><strong>闭包</strong>：就是一个概念，出现在嵌套函数中，指的是<strong>内层函数引用到了外层函数的自由变量</strong>，就形成了闭包。很多语言都有这个概念，最熟悉就是JavaScript</p>\n<div><pre><code><span>def</span> <span>counter</span><span>(</span><span>)</span><span>:</span>\n    c <span>=</span> <span>[</span><span>0</span><span>]</span>\n    <span>def</span> <span>inc</span><span>(</span><span>)</span><span>:</span>\n        c<span>[</span><span>0</span><span>]</span> <span>+=</span> <span>1</span> <span># 报错吗？ 为什么 # line 4</span>\n        <span>return</span> c<span>[</span><span>0</span><span>]</span>\n    <span>return</span> inc\nfoo <span>=</span> counter<span>(</span><span>)</span> <span># line 8</span>\n<span>print</span><span>(</span>foo<span>(</span><span>)</span><span>,</span> foo<span>(</span><span>)</span><span>)</span> <span># line 9</span>\nc <span>=</span> <span>100</span>\n<span>print</span><span>(</span>foo<span>(</span><span>)</span><span>)</span> <span># line 11</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>代码分析</p>\n<ul>\n<li>第8行会执行 counter 函数并返回 inc 对应的函数对象，注意这个函数对象并不释放，因为有 foo 记着</li>\n<li>第4行会报错吗？为什么\n<ul>\n<li>不会报错，c 已经在 counter 函数中定义过了。而且 inc 中的使用方式是为 c 的元素修改值，而不是重新定义 c 变量</li>\n</ul>\n</li>\n<li>第9行打印什么结果？\n<ul>\n<li>打印 1 2</li>\n</ul>\n</li>\n<li>第11行打印什么结果？\n<ul>\n<li>打印 3</li>\n<li>第9行的 c 和 counter 中的 c 不一样，而 inc 引用的是自由变量正是 counter 中的变量 c</li>\n</ul>\n</li>\n</ul>\n<p>这是 Python2 中实现闭包的方式，Python3 还可以使用 nonlocal 关键字</p>\n<p>再看下面这段代码，会报错吗？使用 global 能解决吗？</p>\n<div><pre><code><span>def</span> <span>counter</span><span>(</span><span>)</span><span>:</span>\n    count <span>=</span> <span>0</span>\n    <span>def</span> <span>inc</span><span>(</span><span>)</span><span>:</span>\n        count <span>+=</span> <span>1</span>\n        <span>return</span> count\n    <span>return</span> inc\n\nfoo <span>=</span> counter<span>(</span><span>)</span>\n<span>print</span><span>(</span>foo<span>(</span><span>)</span><span>,</span> foo<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>上例一定出错，使用gobal可以解决</p>\n<div><pre><code><span>def</span> <span>counter</span><span>(</span><span>)</span><span>:</span>\n    <span>global</span> count\n    count <span>=</span> <span>0</span>\n    <span>def</span> <span>inc</span><span>(</span><span>)</span><span>:</span>\n        <span>global</span> count\n        count <span>+=</span> <span>1</span>\n        <span>return</span> count\n    <span>return</span> inc\n\nfoo <span>=</span> counter<span>(</span><span>)</span>\n<span>print</span><span>(</span>foo<span>(</span><span>)</span><span>,</span> foo<span>(</span><span>)</span><span>)</span>\ncount <span>=</span> <span>100</span>\n<span>print</span><span>(</span>foo<span>(</span><span>)</span><span>)</span> <span># 打印几？ 101</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>上例使用 global 解决，这是全局变量的实现，而不是闭包了。</p>\n<p>如果要对这个普通变量使用闭包，Python3中可以使用nonlocal关键字。</p>\n<h2 id=\"nonlocal-语句\"> nonlocal 语句</h2>\n<p><strong>nonlocal</strong>：将变量标记为不在本地作用域定义，而是在<strong>上级的某一级局部作用域</strong>中定义，但<strong>不能是全局</strong>\n<strong>作用域中定义</strong>。</p>\n<div><pre><code><span>def</span> <span>counter</span><span>(</span><span>)</span><span>:</span>\n    count <span>=</span> <span>0</span>\n    <span>def</span> <span>inc</span><span>(</span><span>)</span><span>:</span>\n        <span>nonlocal</span> count <span># 声明变量count不是本地变量</span>\n        count <span>+=</span> <span>1</span>\n        <span>return</span> count\n    <span>return</span> inc\n\nfoo <span>=</span> counter<span>(</span><span>)</span>\n<span>print</span><span>(</span>foo<span>(</span><span>)</span><span>,</span> foo<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>count 是外层函数的局部变量，被内部函数引用。</p>\n<p>内部函数使用 nonlocal 关键字声明 count 变量在上级作用域而非本地作用域中定义。</p>\n<p>代码中内层函数引用外部局部作用域中的自由变量，形成闭包。</p>\n<div><pre><code>count <span>=</span> <span>10</span>\n<span>def</span> <span>counter</span><span>(</span><span>)</span><span>:</span>\n    <span>nonlocal</span> count\n    count <span>+=</span> <span>1</span>\n    <span>return</span> count\n\nfoo <span>=</span> counter<span>(</span><span>)</span>\n<span>print</span><span>(</span>foo<span>(</span><span>)</span><span>,</span> foo<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>上例是错误的，nonlocal 声明变量 a 不在当前作用域，但是往外就是全局作用域了，所以错误。</p>\n<h2 id=\"函数的销毁\"> 函数的销毁</h2>\n<p>定义一个函数就是生成一个函数对象，函数名指向的就是函数对象。</p>\n<p>可以使用 del 语句删除函数，使其引用计数减1。</p>\n<p>可以使用同名标识符覆盖原有定义，本质上也是使其引用计数减1。</p>\n<p>Python 程序结束时，所有对象销毁。</p>\n<p>函数也是对象，也不例外，是否销毁，还是看引用计数是否减为0。</p>\n<h2 id=\"变量名解析原则legb\"> 变量名解析原则LEGB</h2>\n<ul>\n<li>Local，本地作用域、局部作用域的 local 命名空间。函数调用时创建，调用结束消亡</li>\n<li>Enclosing，Python2.2 时引入了嵌套函数，实现了闭包，这个就是嵌套函数的外部函数的命名空间</li>\n<li>Global，全局作用域，即一个模块的命名空间。模块被 import 时创建，解释器退出时消亡</li>\n<li>Build-in，内置模块的命名空间，生命周期从 python 解释器启动时创建到解释器退出时消亡。例如print(open)，print 和 open 都是内置的变量</li>\n</ul>\n<p>所以一个名词的查找顺序就是LEGB</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/LEGB.png\" alt=\"LEGB\"></p>\n<table>\n<thead>\n<tr>\n<th>内建函数</th>\n<th>函数签名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iter</td>\n<td>iter(iterable)</td>\n<td>把一个可迭代对象包装成迭代器</td>\n</tr>\n<tr>\n<td>next</td>\n<td>next(iterable[,default])</td>\n<td>取迭代器下一个元素<br/>如果已经取完，继续取抛StopIteration异常</td>\n</tr>\n<tr>\n<td>reversed</td>\n<td>reversed(seq)</td>\n<td>返回一个翻转元素的迭代器</td>\n</tr>\n<tr>\n<td>enumerate</td>\n<td>enumerate(seq, start=0)</td>\n<td>迭代一个可迭代对象，返回一个迭代器<br/>每一个元素都是数字和元素构成的二元组</td>\n</tr>\n</tbody>\n</table>\n<p>迭代器</p>\n<ul>\n<li>特殊的对象，一定是可迭代对象，具备可迭代对象的特征</li>\n<li>通过 iter 方法把一个可迭代对象封装成迭代器</li>\n<li>通过 next 方法，迭代 迭代器对象</li>\n<li>生成器对象，就是迭代器对象。但是迭代器对象未必是生成器对象</li>\n</ul>\n<p>可迭代对象</p>\n<ul>\n<li>能够通过迭代一次次返回不同的元素的对象\n<ul>\n<li>所谓相同，不是指值是否相同，而是元素在容器中是否是同一个，例如列表中值可以重复的，['a', 'a']，虽然这个列表有2个元素，值一样，但是两个'a'是不同的元素</li>\n</ul>\n</li>\n<li>可以迭代，但是未必有序，未必可索引</li>\n<li>可迭代对象有：list、tuple、string、bytes、bytearray、range、set、dict、生成器、迭代器等</li>\n<li>可以使用成员操作符in、not in\n<ul>\n<li>对于线性数据结构，in本质上是在遍历对象，时间复杂度为O(n)</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>lst <span>=</span> <span>[</span><span>1</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>,</span> <span>7</span><span>,</span> <span>9</span><span>]</span>\nit <span>=</span> <span>iter</span><span>(</span>lst<span>)</span> <span># 返回一个迭代器对象</span>\n<span>print</span><span>(</span><span>next</span><span>(</span>it<span>)</span><span>)</span> <span># 1</span>\n<span>print</span><span>(</span><span>next</span><span>(</span>it<span>)</span><span>)</span> <span># 3</span>\n<span>for</span> i<span>,</span> x <span>in</span> <span>enumerate</span><span>(</span>it<span>,</span> <span>2</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span>i<span>,</span> x<span>)</span>\n<span>#2 5</span>\n<span>#3 7</span>\n<span>#4 9</span>\n\n<span># print(next(it)) # StopIteration</span>\n<span>print</span><span>(</span><span>)</span>\n\n<span>for</span> x <span>in</span> <span>reversed</span><span>(</span>lst<span>)</span><span>:</span>\n    <span>print</span><span>(</span>x<span>)</span> <span># 9 7 5 3 1</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/LEGB.png",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "14 多进程",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-gil-multiprocessing/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-gil-multiprocessing/",
      "content_html": "<h1 id=\"_14-多进程\"> 14 多进程</h1>\n<h2 id=\"gil\"> GIL</h2>\n<p>CPython 在解释器进程级别有一把锁，叫做GIL，即全局解释器锁。</p>\n<p>GIL 保证CPython进程中，只有一个线程执行字节码。甚至是在多核CPU的情况下，也只允许同时只能有一个CPU核心上运行该进程的一个线程。</p>\n<p>CPython中</p>\n<ul>\n<li>IO密集型，某个线程阻塞，GIL会释放，就会调度其他就绪线程</li>\n<li>CPU密集型，当前线程可能会连续的获得GIL，导致其它线程几乎无法使用CPU</li>\n<li>在CPython中由于有GIL存在，IO密集型，使用多线程较为合算；CPU密集型，使用多进程，要绕开GIL</li>\n</ul>\n<p>新版CPython正在努力优化GIL的问题，但不是移除。\n如果在意多线程的效率问题，请绕行，选择其它语言erlang、Go等。</p>\n<blockquote>\n<p>Python中绝大多数内置数据结构的读、写操作都是原子操作。\n由于GIL的存在，Python的内置数据类型在多线程编程的时候就变成了安全的了，但是实际上它们本身 不是线程安全类型。</p>\n</blockquote>\n<p>保留GIL的原因：\nGvR坚持的简单哲学，对于初学者门槛低，不需要高深的系统知识也能安全、简单的使用Python。\n而且移除GIL，会降低CPython单线程的执行效率。\n测试下面2个程序，请问下面的程序是计算密集型还是IO密集型？</p>\n<div><pre><code><span>import</span> logging\n<span>import</span> datetime\n\nlogging<span>.</span>basicConfig<span>(</span>level<span>=</span>logging<span>.</span>INFO<span>,</span> <span>format</span><span>=</span><span>\"%(thread)s %(message)s\"</span><span>)</span>\nstart <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n<span># 计算</span>\n<span>def</span> <span>calc</span><span>(</span><span>)</span><span>:</span>\n    <span>sum</span> <span>=</span> <span>0</span>\n    <span>for</span> _ <span>in</span> <span>range</span><span>(</span><span>10000000</span><span>)</span><span>:</span>\n        <span>sum</span> <span>+=</span> <span>1</span>\n\ncalc<span>(</span><span>)</span>\ncalc<span>(</span><span>)</span>\ncalc<span>(</span><span>)</span>\ncalc<span>(</span><span>)</span>\ndelta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\nlogging<span>.</span>info<span>(</span>delta<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><div><pre><code><span>import</span> threading\n<span>import</span> logging\n<span>import</span> datetime\n\nlogging<span>.</span>basicConfig<span>(</span>level<span>=</span>logging<span>.</span>INFO<span>,</span> <span>format</span><span>=</span><span>\"%(thread)s %(message)s\"</span><span>)</span>\nstart <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n<span># 计算</span>\n<span>def</span> <span>calc</span><span>(</span><span>)</span><span>:</span>\n    <span>sum</span> <span>=</span> <span>0</span>\n    <span>for</span> _ <span>in</span> <span>range</span><span>(</span><span>10000000</span><span>)</span><span>:</span>\n        <span>sum</span> <span>+=</span> <span>1</span>\n\nt1 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>calc<span>)</span>\nt2 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>calc<span>)</span>\nt3 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>calc<span>)</span>\nt4 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>calc<span>)</span>\nt1<span>.</span>start<span>(</span><span>)</span>\nt2<span>.</span>start<span>(</span><span>)</span>\nt3<span>.</span>start<span>(</span><span>)</span>\nt4<span>.</span>start<span>(</span><span>)</span>\nt1<span>.</span>join<span>(</span><span>)</span>\nt2<span>.</span>join<span>(</span><span>)</span>\nt3<span>.</span>join<span>(</span><span>)</span>\nt4<span>.</span>join<span>(</span><span>)</span>\ndelta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\nlogging<span>.</span>info<span>(</span>delta<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>注意，不要在代码中出现print等访问IO的语句。访问IO，线程阻塞，会释放GIL锁，其他线程被调度。</p>\n<p>程序1是单线程程序，所有calc()依次执行，根本就不是并发。在主线程内，函数串行执行。\n程序2是多线程程序，calc()执行在不同的线程中，但是由于GIL的存在，线程的执行变成了假并发。但是这些线程可以被调度到不同的CPU核心上执行，只不过GIL让同一时间该进程只有一个线程被执行。</p>\n<p>从两段程序测试的结果来看，CPython中多线程根本没有任何优势，和一个线程执行时间相当。因为GIL的存在，尤其是像上面的计算密集型程序，和单线程串行效果相当。这样，实际上就没有用上CPU多核心的优势。</p>\n<h2 id=\"多进程\"> 多进程</h2>\n<p>由于Python的GIL全局解释器锁存在，多线程未必是CPU密集型程序的好的选择。\n多进程可以完全独立的进程环境中运行程序，可以较充分地利用多处理器。\n但是进程本身的隔离带来的数据不共享也是一个问题。而且线程比进程轻量级。</p>\n<h3 id=\"multiprocessing\"> multiprocessing</h3>\n<p><strong>Process类</strong></p>\n<p>Process类遵循了Thread类的API，减少了学习难度。</p>\n<p>先看一个例子，前面介绍的单线程、多线程比较的例子的多进程版本</p>\n<div><pre><code><span>import</span> multiprocessing\n<span>import</span> datetime\n\n\n<span># 计算</span>\n<span>def</span> <span>calc</span><span>(</span>i<span>)</span><span>:</span>\n    <span>sum</span> <span>=</span> <span>0</span>\n    <span>for</span> _ <span>in</span> <span>range</span><span>(</span><span>10000000</span><span>)</span><span>:</span>\n        <span>sum</span> <span>+=</span> <span>1</span>\n    <span>return</span> i<span>,</span> <span>sum</span>\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    start <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n\n    ps <span>=</span> <span>[</span><span>]</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>4</span><span>)</span><span>:</span>\n        p <span>=</span> multiprocessing<span>.</span>Process<span>(</span>target<span>=</span>calc<span>,</span> args<span>=</span><span>(</span>i<span>,</span> <span>)</span><span>,</span> name<span>=</span><span>'calc-{}'</span><span>.</span><span>format</span><span>(</span>i<span>)</span><span>)</span>\n        ps<span>.</span>append<span>(</span>p<span>)</span>\n        p<span>.</span>start<span>(</span><span>)</span>\n\n    <span>for</span> p <span>in</span> ps<span>:</span>\n        p<span>.</span>join<span>(</span><span>)</span>\n        <span>print</span><span>(</span>p<span>.</span>name<span>,</span> p<span>.</span>exitcode<span>)</span>\n\n    delta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\n    <span>print</span><span>(</span>delta<span>)</span>\n    <span>for</span> p <span>in</span> ps<span>:</span>\n        <span>print</span><span>(</span>p<span>.</span>name<span>,</span> p<span>.</span>exitcode<span>)</span>\n    <span>print</span><span>(</span><span>'===end==='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>对于上面这个程序，在同一主上运行时长的对比</p>\n<ul>\n<li>使用单线程、多线程跑了4分钟多</li>\n<li>多进程用了1分半</li>\n</ul>\n<p>看到了多个进程都在使用CPU，这是真并行，而且进程库几乎没有什么学习难度</p>\n<p>注意：多进程代码一定要放在 <code>__name__ == '__main__'</code> 下面执行。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pid</td>\n<td>进程 id</td>\n</tr>\n<tr>\n<td>exitcode</td>\n<td>进程的退出状态码</td>\n</tr>\n<tr>\n<td>terminate()</td>\n<td>终止指定的进程</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"进程间同步\"> 进程间同步</h3>\n<p>Python 在进程间同步提供了和线程同步一样的类，使用的方法一样，使用的效果也类似。\n不过，进程间代价要高于线程间，而且系统底层实现是不同的，只不过 Python 屏蔽了这些不同之处，让用户简单使用多进程。\nmultiprocessing 还提供共享内存、服务器进程来共享数据，还提供了用于进程间通讯的 Queue队列、Pipe 管道。</p>\n<p>通信方式不同</p>\n<ol>\n<li>多进程就是启动多个解释器进程，进程间通信必须序列化、反序列化</li>\n<li>数据的线程安全性问题\n如果每个进程中没有实现多线程，GIL可以说没什么用了</li>\n</ol>\n<h3 id=\"多进程、多线程的选择\"> 多进程、多线程的选择</h3>\n<p>1、CPU密集型\nCPython中使用到了GIL，多线程的时候锁相互竞争，且多核优势不能发挥，选用Python多进程效率更\n高。</p>\n<p>2、IO密集型\n在Python中适合是用多线程，可以减少多进程间IO的序列化开销。且在IO等待的时候，切换到其他线程继续执行，效率不错。</p>\n<p><strong>应用</strong></p>\n<p>请求/应答模型：WEB应用中常见的处理模型</p>\n<p>master启动多个worker工作进程，一般和CPU数目相同。发挥多核优势。\nworker工作进程中，往往需要操作网络IO和磁盘IO，启动多线程，提高并发处理能力。worker处理用户的请求，往往需要等待数据，处理完请求还要通过网络IO返回响应。\n这就是nginx工作模式。</p>\n<h2 id=\"concurrent-futures包\"> concurrent.futures包</h2>\n<p>3.2版本引入的模块。</p>\n<p>异步并行任务编程模块，提供一个高级的异步可执行的便利接口。</p>\n<p>提供了2个池执行器：</p>\n<ul>\n<li>ThreadPoolExecutor 异步调用的线程池的 Executor</li>\n<li>ProcessPoolExecutor 异步调用的进程池的Executor</li>\n</ul>\n<h3 id=\"threadpoolexecutor对象\"> ThreadPoolExecutor对象</h3>\n<p>首先需要定义一个池的执行器对象，Executor类的子类实例。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ThreadPoolExecutor(max_workers=1)</td>\n<td>池中至多创建max_workers个线程的池来同时异步执行，返回Executor实例<br/>支持上下文，进入时返回自己，退出时调用shutdown(wait=True)</td>\n</tr>\n<tr>\n<td>submit(fn, *args, **kwargs)</td>\n<td>提交执行的函数及其参数，如有空闲开启daemon线程，返回Future类的实例</td>\n</tr>\n<tr>\n<td>shutdown(wait=True)</td>\n<td>清理池，wait 表示是否等待到任务线程完成</td>\n</tr>\n</tbody>\n</table>\n<p>Future 类</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>done()</td>\n<td>如果调用被成功的取消或者执行完成，返回True</td>\n</tr>\n<tr>\n<td>cancelled()</td>\n<td>如果调用被成功的取消，返回True</td>\n</tr>\n<tr>\n<td>running()</td>\n<td>如果正在运行且不能被取消，返回True</td>\n</tr>\n<tr>\n<td>cancel()</td>\n<td>尝试取消调用。如果已经执行且不能取消返回False，否则返回True</td>\n</tr>\n<tr>\n<td>result(timeout=None)</td>\n<td>取返回的结果，timeout为None，一直等待返回；timeout设置到期，抛出<br/>concurrent.futures.TimeoutError 异常</td>\n</tr>\n<tr>\n<td>exception(timeout=None)</td>\n<td>取返回的异常，timeout为None，一直等待返回；timeout设置到期，抛出<br/>concurrent.futures.TimeoutError 异常</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>from</span> concurrent<span>.</span>futures <span>import</span> ThreadPoolExecutor<span>,</span> wait\n<span>import</span> datetime\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s [%(processName)s %(threadName)s] %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>def</span> <span>calc</span><span>(</span>base<span>)</span><span>:</span>\n    <span>sum</span> <span>=</span> base\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>1000000</span><span>)</span><span>:</span>\n        <span>sum</span> <span>+=</span> <span>1</span>\n    logging<span>.</span>info<span>(</span><span>sum</span><span>)</span>\n    <span>return</span> <span>sum</span>\n\nstart <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\nexecutor <span>=</span> ThreadPoolExecutor<span>(</span><span>3</span><span>)</span>\n<span>with</span> executor<span>:</span> <span># 默认shutdown阻塞</span>\n    fs <span>=</span> <span>[</span><span>]</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>3</span><span>)</span><span>:</span>\n        future <span>=</span> executor<span>.</span>submit<span>(</span>calc<span>,</span> i<span>*</span><span>100</span><span>)</span>\n        fs<span>.</span>append<span>(</span>future<span>)</span>\n\n    <span>#wait(fs) # 阻塞</span>\n    <span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\n<span>for</span> f <span>in</span> fs<span>:</span>\n    <span>print</span><span>(</span>f<span>,</span> f<span>.</span>done<span>(</span><span>)</span><span>,</span> f<span>.</span>result<span>(</span><span>)</span><span>)</span> <span># done不阻塞，result阻塞</span>\n<span>print</span><span>(</span><span>'='</span> <span>*</span> <span>30</span><span>)</span>\n\ndelta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\n\n<span>print</span><span>(</span>delta<span>)</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h3 id=\"processpoolexecutor对象\"> ProcessPoolExecutor对象</h3>\n<p>方法一样。就是使用多进程完成。</p>\n<div><pre><code><span>from</span> concurrent<span>.</span>futures <span>import</span> ProcessPoolExecutor<span>,</span> wait\n<span>import</span> datetime\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s [%(processName)s %(threadName)s] %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>def</span> <span>calc</span><span>(</span>base<span>)</span><span>:</span>\n    <span>sum</span> <span>=</span> base\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10000000</span><span>)</span><span>:</span>\n        <span>sum</span> <span>+=</span> <span>1</span>\n    logging<span>.</span>info<span>(</span><span>sum</span><span>)</span>\n    <span>return</span> <span>sum</span>\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    start <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n    executor <span>=</span> ProcessPoolExecutor<span>(</span><span>3</span><span>)</span>\n    <span>with</span> executor<span>:</span> <span># 默认shutdown阻塞</span>\n        fs <span>=</span> <span>[</span><span>]</span>\n        <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>3</span><span>)</span><span>:</span>\n            future <span>=</span> executor<span>.</span>submit<span>(</span>calc<span>,</span> i<span>*</span><span>100</span><span>)</span>\n            fs<span>.</span>append<span>(</span>future<span>)</span>\n\n        <span>#wait(fs) # 阻塞</span>\n        <span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\n    <span>for</span> f <span>in</span> fs<span>:</span>\n        <span>print</span><span>(</span>f<span>,</span> f<span>.</span>done<span>(</span><span>)</span><span>,</span> f<span>.</span>result<span>(</span><span>)</span><span>)</span> <span># done不阻塞，result阻塞</span>\n    <span>print</span><span>(</span><span>'='</span> <span>*</span> <span>30</span><span>)</span>\n\n    delta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\n    <span>print</span><span>(</span>delta<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p><strong>总结</strong></p>\n<p>该库统一了线程池、进程池调用，简化了编程。\n是Python简单的思想哲学的体现。</p>\n<p>唯一的缺点：无法设置线程名称。但这都不值一提。</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "17 IO 模型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-io-model/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-io-model/",
      "content_html": "<h1 id=\"_17-io-模型\"> 17 IO 模型</h1>\n<h2 id=\"重要概念\"> 重要概念</h2>\n<h3 id=\"同步、异步\"> 同步、异步</h3>\n<p>函数或方法被调用的时候，调用者是否得到<strong>最终结果</strong>的。\n直接得到最终结果结果的，就是同步调用；\n不直接得到最终结果的，就是异步调用。</p>\n<h3 id=\"阻塞、非阻塞\"> 阻塞、非阻塞</h3>\n<p>函数或方法调用的时候，是否立刻返回。\n立即返回就是非阻塞调用；\n不立即返回就是阻塞调用。</p>\n<h3 id=\"区别\"> 区别</h3>\n<p>同步、异步，与阻塞、非阻塞不相关。\n同步、异步强调的是，是否得到（最终的）<strong>结果</strong>；\n阻塞、非阻塞强调是时间，是否<strong>等待</strong>。</p>\n<p>同步与异步区别在于：调用者是否得到了想要的最终结果。\n同步就是一直要执行到返回最终结果；\n异步就是直接返回了，但是返回的不是最终结果。调用者不能通过这种调用得到结果，以后可以通过被调用者提供的某种方式（被调用者通知调用者、调用者反复查询、回调），来取回最终结果。</p>\n<p>阻塞与非阻塞的区别在于，调用者是否还能干其他事。\n阻塞，调用者就只能干等；\n非阻塞，调用者可以先去忙会别的，不用一直等。</p>\n<h3 id=\"联系\"> 联系</h3>\n<p>同步阻塞，我啥事不干，就等你打饭打给我。打到饭是结果，而且我啥事不干一直等，同步加阻塞。\n同步非阻塞，我等着你打饭给我，饭没好，我不等，但是我无事可做，反复看饭好了没有。打饭是结果，但是我不一直等。</p>\n<p>异步阻塞，我要打饭，你说等叫号，并没有返回饭给我，我啥事不干，就干等着饭好了你叫我。例如，取了号什么不干就等叫自己的号。\n异步非阻塞，我要打饭，你给我号，你说等叫号，并没有返回饭给我，我去看电视、玩手机，饭打好了叫我。</p>\n<h2 id=\"io两个阶段\"> IO两个阶段</h2>\n<p>IO过程分两阶段：\n1、数据准备阶段。从设备读取数据到内核空间的缓冲区（淘米，把米放饭锅里煮饭）\n2、内核空间复制回用户空间进程缓冲区阶段（盛饭，从内核这个饭锅里面把饭装到碗里来）</p>\n<p>系统调用——read函数、recv函数等</p>\n<h2 id=\"同步-io-模型\"> 同步 IO 模型</h2>\n<p>同步IO模型包括 阻塞IO、非阻塞IO、IO多路复用</p>\n<h3 id=\"阻塞-io\"> 阻塞 IO</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/block_io.png\" alt=\"block_io\"></p>\n<h3 id=\"非阻塞-io\"> 非阻塞 IO</h3>\n<p>进程调用 recvfrom 操作，如果 IO 设备没有准备好，立即返回 ERROR，进程不阻塞。用户可以再次发起系统调用（可以轮询），如果内核已经准备好，就阻塞，然后复制数据到用户空间。</p>\n<p>第一阶段数据没有准备好，可以先忙别的，等会再来看看。检查数据是否准备好了的过程是非阻塞的。</p>\n<p>第二阶段是阻塞的，即内核空间和用户空间之间复制数据是阻塞的。</p>\n<p>淘米、蒸饭我不阻塞等，反复来询问，一直没有拿到饭。盛饭过程我等着你装好饭，但是要等到盛好饭才算完事，这是同步的，结果就是盛好饭。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/unblock-io.png\" alt=\"unblock-io\"></p>\n<h3 id=\"io多路复用\"> IO多路复用</h3>\n<p>也称 Event-driven IO。</p>\n<p>所谓 IO 多路复用，就是同时监控多个 IO，有一个准备好了，就不需要等了开始处理，提高了同时处理 IO 的能力。\nselect几乎所有操作系统平台都支持，poll是对的select的升级。</p>\n<p>epoll，Linux系统内核2.5+开始支持，对select和poll的增强，在监视的基础上，增加回调机制。BSD、\nMac平台有kqueue，Windows有iocp。</p>\n<p>以 select 为例，将关注的 IO 操作告诉 select 函数并调用，进程阻塞，内核“监视” select 关注的文件描述符  fd，被关注的任何一个 fd 对应的IO准备好了数据，select 返回。再使用 read 将数据复制到用户进程。</p>\n<p>select举例：\n食堂供应很多菜（众多的IO），你需要吃某三菜一汤，大师傅（操作系统）说要现做，需要你等，好多人都在等菜，谁先好不知道，你只好等待大师傅叫。你的其中一样菜好了，大师傅叫你，说你点的菜有好的了，你得自己遍历找找看哪一样才好了，请服务员把做好的菜打给你。\nepoll是有菜准备好了，大师傅喊你去几号窗口直接打菜，不用自己找菜了。</p>\n<p>一般情况下，select 最多能监听1024个 fd（可以修改），但是由于select采用轮询的方式，当管理的 IO 多了，每次都要遍历全部fd，效率低下。\nepoll 没有管理的 fd 的上限，且是回调机制，不需遍历，效率很高。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/io-more-road.png\" alt=\"io-more-road\"></p>\n<h3 id=\"信号驱动io\"> 信号驱动IO</h3>\n<p>进程在 IO 访问时，先通过 sigaction 系统调用，提交一个信号处理函数，立即返回。进程不阻塞。</p>\n<p>当内核准备好数据后，产生一个 SIGIO 信号并投递给信号处理函数。可以在此函数中调用 recvfrom 函数\n操作数据从内核空间复制到用户空间，这段过程进程阻塞。</p>\n<h2 id=\"异步-io\"> 异步 IO</h2>\n<p>进程发起异步 IO 请求，立即返回。内核完成 IO 的两个阶段，内核给进程发一个信号。</p>\n<p>举例，来打饭，跟大师傅说饭好了叫你，饭菜准备好了，窗口服务员把饭盛好了打电话叫你。两阶段都是异步的。在整个过程中，进程都可以忙别的，等好了才过来。\n举例，今天不想出去到饭店吃饭了，点外卖，饭菜在饭店做好了（第一阶段），快递员从饭店送到你家门口（第二阶段）。\nLinux 的 aio 的系统调用，内核从版本2.6开始支持</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/io-async.png\" alt=\"io-async\"></p>\n<p>前4个都是同步 IO，因为核心操作 recv 函数调用时，进程阻塞直到拿到最终结果为止。</p>\n<p>而异步 IO 进程全程不阻塞。</p>\n<h2 id=\"python-中-io多路复用\"> Python 中 IO多路复用</h2>\n<p>IO多路复用</p>\n<ul>\n<li>大多数操作系统都支持 select 和 poll</li>\n<li>Linux 2.5+ 支持 epoll</li>\n<li>BSD、Mac支持kqueue</li>\n<li>Solaris 实现了/dev/poll</li>\n<li>Windows的IOCP</li>\n</ul>\n<p>Python 的 select 库实现了 select、poll 系统调用，这个基本上操作系统都支持。对Linux内核2.5+支持了 epoll。</p>\n<p>开发中的选择\n1、完全跨平台，使用 select、poll。但是性能较差\n2、针对不同操作系统自行选择支持的技术，这样做会提高 IO 处理的性能</p>\n<p>select 维护一个文件描述符数据结构，单个进程使用有上限，通常是1024，线性扫描这个数据结构。效率低。</p>\n<p>pool 和 select 的区别是内部数据结构使用链表，没有这个最大限制，但是依然是线性遍历才知道哪个设备就绪了。\nepoll 使用事件通知机制，使用回调机制提高效率。\nselect/poll 还要从内核空间复制消息到用户空间，而 epoll 通过内核空间和用户空间共享一块内存来减少复制。</p>\n<p><strong>selectors 库</strong></p>\n<p>3.4 版本提供 selectors 库，高级 IO 复用库。</p>\n<div><pre><code>类层次结构︰\nBaseSelector\n+-- SelectSelector  实现select\n+-- PollSelector   实现poll\n+-- EpollSelector   实现epoll\n+-- DevpollSelector  实现devpoll\n+-- KqueueSelector  实现kqueue\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>selectors.DefaultSelector 返回当前平台最有效、性能最高的实现。</p>\n<p>但是，由于没有实现 Windows 下的 IOCP，所以，Windows 下只能退化为 select。</p>\n<div><pre><code><span># 在selects模块源码最下面有如下代码</span>\n<span># Choose the best implementation, roughly:</span>\n<span>#    epoll|kqueue|devpoll > poll > select.</span>\n<span># select() also can't accept a FD > FD_SETSIZE (usually around 1024)</span>\n<span>if</span> <span>'KqueueSelector'</span> <span>in</span> <span>globals</span><span>(</span><span>)</span><span>:</span>\n    DefaultSelector <span>=</span> KqueueSelector\n<span>elif</span> <span>'EpollSelector'</span> <span>in</span> <span>globals</span><span>(</span><span>)</span><span>:</span>\n    DefaultSelector <span>=</span> EpollSelector\n<span>elif</span> <span>'DevpollSelector'</span> <span>in</span> <span>globals</span><span>(</span><span>)</span><span>:</span>\n    DefaultSelector <span>=</span> DevpollSelector\n<span>elif</span> <span>'PollSelector'</span> <span>in</span> <span>globals</span><span>(</span><span>)</span><span>:</span>\n    DefaultSelector <span>=</span> PollSelector\n<span>else</span><span>:</span>\n    DefaultSelector <span>=</span> SelectSelector\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>事件注册</p>\n<div><pre><code><span>class</span> <span>SelectSelector</span><span>(</span>_BaseSelectorImpl<span>)</span><span>:</span>\n    <span>\"\"\"Select-based selector.\"\"\"</span>\n    <span>def</span> <span>register</span><span>(</span>fileobj<span>,</span> events<span>,</span> data<span>=</span><span>None</span><span>)</span> <span>-</span><span>></span> SelectorKey<span>:</span> <span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>\n<li>为 selector 注册一个文件对象，监视它的 IO 事件。返回 <strong>SelectKey</strong> 对象。</li>\n<li>fileobj 被监视文件对象，例如socket对象</li>\n<li>events 事件，该文件对象必须等待的事件</li>\n<li>data 可选的与此文件对象相关联的不透明数据，例如，关联用来存储每个客户端的会话 ID，关联方法。通过这个参数在关注的事件产生后让selector干什么事。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Event 常量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EVENT_READ</td>\n<td>可读 0b01，内核已经准备好输入设备，可以开始读了</td>\n</tr>\n<tr>\n<td>EVENT_WRITE</td>\n<td>可写 0b10，内核准备好了，可以往里写了</td>\n</tr>\n</tbody>\n</table>\n<p>selectors.SelectorKey 有4个属性：</p>\n<ol>\n<li>fileobj 注册的文件对象</li>\n<li>fd 文件描述符</li>\n<li>events 等待上面的文件描述符的文件对象的事件</li>\n<li>data 注册时关联的数据</li>\n</ol>\n<p><strong>练习：IO 多路复用 TCP Server</strong></p>\n<p>完成一个 TCP Server，能够接受客户端请求并回应客户端消息。</p>\n<div><pre><code><span>import</span> selectors\n<span>import</span> threading\n<span>import</span> socket\n<span>import</span> time\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span># 构建本系统最优Selector</span>\nselector <span>=</span> selectors<span>.</span>DefaultSelector<span>(</span><span>)</span>\n\nsock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span> <span># TCP Server</span>\nsock<span>.</span>bind<span>(</span><span>(</span><span>'127.0.0.1'</span><span>,</span> <span>9999</span><span>)</span><span>)</span>\nsock<span>.</span>listen<span>(</span><span>)</span>\nlogging<span>.</span>info<span>(</span>sock<span>)</span>\n\nsock<span>.</span>setblocking<span>(</span><span>False</span><span>)</span> <span># 注意：建议非阻塞</span>\n\n<span># 回调函数，sock的读事件</span>\n<span># 形参自定义</span>\n<span>def</span> <span>accept</span><span>(</span>sock<span>:</span>socket<span>.</span>socket<span>,</span> mask<span>)</span><span>:</span>\n    <span>\"\"\"mask: 事件掩码\"\"\"</span>\n    conn<span>,</span> raddr <span>=</span> sock<span>.</span>accept<span>(</span><span>)</span>\n    conn<span>.</span>setblocking<span>(</span><span>False</span><span>)</span> <span># 非阻塞</span>\n\n    logging<span>.</span>info<span>(</span><span>'new client socket {} in accept.'</span><span>.</span><span>format</span><span>(</span>conn<span>)</span><span>)</span>\n\n<span># 注册sock的被关注事件，返回SelectorKey对象</span>\n<span># key记录了fileobj, fileobj的fd, events, data</span>\nkey <span>=</span> selector<span>.</span>register<span>(</span>sock<span>,</span> selectors<span>.</span>EVENT_READ<span>,</span> accept<span>)</span>\nlogging<span>.</span>info<span>(</span>key<span>)</span>\n\n<span># 开始循环</span>\n<span>while</span> <span>True</span><span>:</span>\n    <span># 监听注册的对象的事件，发生被关注事件则返回events</span>\n    events <span>=</span> selector<span>.</span>select<span>(</span><span>)</span>\n    <span>print</span><span>(</span>events<span>)</span> <span># [(key, mask)]</span>\n    <span># 表示那个关注的对象的某事件发生了</span>\n    <span>for</span> key<span>,</span> mask <span>in</span> events<span>:</span>\n        <span># key.data => accept; key.fileobj => sock</span>\n        callback <span>=</span> key<span>.</span>data\n        callback<span>(</span>key<span>.</span>fileobj<span>,</span> mask<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><p>上面的代码完成了 Server socket 的读事件的监听。注意，select() 方法会阻塞到监控的对象的等待的事件有发生（监听的读或者写就绪）。</p>\n<div><pre><code><span>import</span> selectors\n<span>import</span> threading\n<span>import</span> socket\n<span>import</span> time\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span># 构建本系统最优Selector</span>\nselector <span>=</span> selectors<span>.</span>DefaultSelector<span>(</span><span>)</span>\n\nsock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span> <span># TCP Server</span>\nsock<span>.</span>bind<span>(</span><span>(</span><span>'127.0.0.1'</span><span>,</span> <span>9999</span><span>)</span><span>)</span>\nsock<span>.</span>listen<span>(</span><span>)</span>\nlogging<span>.</span>info<span>(</span>sock<span>)</span>\n\nsock<span>.</span>setblocking<span>(</span><span>False</span><span>)</span> <span># 注意：建议非阻塞</span>\n\n<span># 回调函数，sock的读事件</span>\n<span># 形参自定义</span>\n<span>def</span> <span>accept</span><span>(</span>sock<span>:</span>socket<span>.</span>socket<span>,</span> mask<span>)</span><span>:</span>\n    <span>\"\"\"mask: 事件掩码\"\"\"</span>\n    conn<span>,</span> raddr <span>=</span> sock<span>.</span>accept<span>(</span><span>)</span>\n    conn<span>.</span>setblocking<span>(</span><span>False</span><span>)</span> <span># 非阻塞</span>\n\n    logging<span>.</span>info<span>(</span><span>'new client socket {} in accept.'</span><span>.</span><span>format</span><span>(</span>conn<span>)</span><span>)</span>\n\n    key <span>=</span> selector<span>.</span>register<span>(</span>conn<span>,</span> selectors<span>.</span>EVENT_READ<span>,</span> read<span>)</span>\n    logging<span>.</span>info<span>(</span>key<span>)</span>\n\n<span># 回调函数</span>\n<span>def</span> <span>read</span><span>(</span>conn<span>:</span>socket<span>.</span>socket<span>,</span> mask<span>)</span><span>:</span>\n    data <span>=</span> conn<span>.</span>recv<span>(</span><span>1024</span><span>)</span>\n    msg <span>=</span> <span>\"Your msg = {} ~~~\"</span><span>.</span><span>format</span><span>(</span>data<span>.</span>decode<span>(</span><span>)</span><span>)</span>\n    logging<span>.</span>info<span>(</span>msg<span>)</span>\n    conn<span>.</span>send<span>(</span>msg<span>.</span>encode<span>(</span><span>)</span><span>)</span>\n\n<span># 注册sock的被关注事件，返回SelectorKey对象</span>\n<span># key记录了fileobj, fileobj的fd, events, data</span>\nkey <span>=</span> selector<span>.</span>register<span>(</span>sock<span>,</span> selectors<span>.</span>EVENT_READ<span>,</span> accept<span>)</span>\nlogging<span>.</span>info<span>(</span>key<span>)</span>\n\n<span># 开始循环</span>\n<span>while</span> <span>True</span><span>:</span>\n    <span># 监听注册的对象的事件，发生被关注事件则返回events</span>\n    events <span>=</span> selector<span>.</span>select<span>(</span><span>)</span>\n    <span>print</span><span>(</span>events<span>)</span> <span># [(key, mask)]</span>\n    <span># 表示那个关注的对象的某事件发生了</span>\n    <span>for</span> key<span>,</span> mask <span>in</span> events<span>:</span>\n        <span># key.data => accept; key.fileobj => sock</span>\n        callback <span>=</span> key<span>.</span>data\n        callback<span>(</span>key<span>.</span>fileobj<span>,</span> mask<span>)</span>\n\n\n\n\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div>",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/block_io.png",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "03 哈希表和解析式",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-ha-tables-analytic-expre/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-ha-tables-analytic-expre/",
      "content_html": "<h1 id=\"_03-哈希表和解析式\"> 03 哈希表和解析式</h1>\n<h2 id=\"封装和解构\"> 封装和解构</h2>\n<h3 id=\"基本概念\"> 基本概念</h3>\n<div><pre><code>t1 <span>=</span> <span>1</span><span>,</span> <span>2</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>t1<span>)</span><span>)</span> <span># 什么类型, tuple</span>\n\nt2 <span>=</span> <span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>t2<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>Python等式右侧出现逗号分隔的多值的时候，就会将这几个值封装到元组中。这种操作称为封装packing。</p>\n<div><pre><code>x<span>,</span> y <span>=</span> <span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span>\n<span>print</span><span>(</span>x<span>)</span> <span># 1</span>\n<span>print</span><span>(</span>y<span>)</span> <span># 2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>Python 中等式右侧是一个容器类型，左侧是逗号分隔的多个标识符，将右侧容器中数据的一个个和左侧\n标识符一一对应。这种操作称为解构 unpacking。</p>\n<p>从 Python3 开始，对解构做了很大的改进，现在用起来已经非常的方便快捷。</p>\n<p>封装和解构是非常方便的提取数据的方法，在 Python、JavaScript 等语言中应用极广。</p>\n<div><pre><code><span># 交换数据</span>\nx <span>=</span> <span>4</span>\ny <span>=</span> <span>5</span>\nt <span>=</span> x\nx <span>=</span> y\ny <span>=</span> t\n\n<span># 封装和解构，交换</span>\nx <span>=</span> <span>10</span>\ny <span>=</span> <span>11</span>\nx<span>,</span> y <span>=</span> y<span>,</span> x\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"简单解构\"> 简单解构</h3>\n<div><pre><code><span># 左右个数相同  ,必须相等</span>\na<span>,</span>b <span>=</span> <span>1</span><span>,</span><span>2</span>\na<span>,</span>b <span>=</span> <span>(</span><span>1</span><span>,</span><span>2</span><span>)</span>\na<span>,</span>b <span>=</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>]</span>\na<span>,</span>b <span>=</span> <span>[</span><span>10</span><span>,</span><span>20</span><span>]</span>\na<span>,</span>b <span>=</span> <span>{</span><span>10</span><span>,</span><span>20</span><span>}</span> <span># 非线性结构</span>\na<span>,</span>b <span>=</span> <span>{</span><span>'a'</span><span>:</span><span>10</span><span>,</span><span>'b'</span><span>:</span><span>20</span><span>}</span> <span># 非线性结构也可以解构</span>\n<span>[</span>a<span>,</span>b<span>]</span> <span>=</span> <span>(</span><span>1</span><span>,</span><span>2</span><span>)</span>\n<span>[</span>a<span>,</span>b<span>]</span> <span>=</span> <span>10</span><span>,</span><span>20</span>\n<span>(</span>a<span>,</span>b<span>)</span> <span>=</span> <span>{</span><span>30</span><span>,</span><span>40</span><span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"剩余变量解构\"> 剩余变量解构</h3>\n<p>在 Python3.0 中增加了剩余变量解构（rest）。</p>\n<div><pre><code>a<span>,</span> <span>*</span>rest<span>,</span> b <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span>\n<span>print</span><span>(</span>a<span>,</span> b<span>)</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>rest<span>)</span><span>,</span> rest<span>)</span> <span># &lt;class 'list'> [2, 3, 4]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>标识符 rest 将尽可能收集剩余的数据组成一个列表。</p>\n<div><pre><code>a<span>,</span> <span>*</span>_<span>,</span> b <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span>\n<span>print</span><span>(</span>_<span>)</span> <span># 在IPython中实验，_是最后一个输出值，这里将把它覆盖</span>\n_<span>,</span> <span>*</span>b<span>,</span> _ <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>\n<span>print</span><span>(</span>_<span>)</span> <span># 第一个_是什么</span>\n<span>print</span><span>(</span>b<span>)</span> <span># 是什么</span>\n<span>print</span><span>(</span>_<span>)</span> <span># 第二个_是什么</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>_ 是合法的标识符，这里它没有什么可读性，它在这里的作用就是表示不关心这个变量的值，我不想要。有人把它称作 丢弃(Throwaway)变量。</p>\n<h2 id=\"集合-set\"> 集合 set</h2>\n<p>集合，简称集。由任意个元素构成的集体。高级语言都实现了这个非常重要的数据结构类型。</p>\n<p>Python中，它是可变的、无序的、不重复的元素的集合。</p>\n<h3 id=\"初始化\"> 初始化</h3>\n<ul>\n<li>set() -&gt; new empty set object</li>\n<li>set(iterable) -&gt; new set object</li>\n</ul>\n<div><pre><code>s1 <span>=</span> <span>set</span><span>(</span><span>)</span>\ns2 <span>=</span> <span>set</span><span>(</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span>\ns3 <span>=</span> <span>set</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span>  <span># 报错</span>\ns4 <span>=</span> <span>set</span><span>(</span><span>'abcdabcd'</span><span>)</span>\ns5 <span>=</span> <span>{</span><span>}</span> <span># 这是什么？  z字典</span>\ns6 <span>=</span> <span>{</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>}</span>\ns7 <span>=</span> <span>{</span><span>1</span><span>,</span> <span>(</span><span>1</span><span>,</span><span>)</span><span>}</span>\ns8 <span>=</span> <span>{</span><span>1</span><span>,</span> <span>(</span><span>1</span><span>,</span><span>)</span><span>,</span> <span>[</span><span>1</span><span>]</span><span>}</span> <span>#  报错</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"元素性质\"> 元素性质</h3>\n<ul>\n<li>去重：在集合中，所有元素必须相异</li>\n<li>无序：因为无序，所以不可索引</li>\n<li>可哈希：Python集合中的元素必须可以hash，即元素都可以使用内建函数hash\n<ul>\n<li>目前学过不可hash的类型有：list、set、bytearray</li>\n</ul>\n</li>\n<li>可迭代：set中虽然元素不一样，但元素都可以迭代出来</li>\n</ul>\n<h3 id=\"增加\"> 增加</h3>\n<ul>\n<li>add(elem)\n<ul>\n<li>增加一个元素到 set 中</li>\n<li>如果元素存在，什么都不做</li>\n</ul>\n</li>\n<li>update(*others)\n<ul>\n<li>合并其他元素到set集合中来</li>\n<li>参数others必须是可迭代对象</li>\n<li>就地修改</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>s <span>=</span> <span>set</span><span>(</span><span>)</span>\ns<span>.</span>add<span>(</span><span>1</span><span>)</span>\ns<span>.</span>update<span>(</span><span>(</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>)</span><span>,</span> <span>[</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>]</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"删除\"> 删除</h3>\n<ul>\n<li>\n<p>remove(elem)</p>\n<ul>\n<li>从set中移除一个元素</li>\n<li>元素不存在，抛出KeyError异常。为什么是KeyError？</li>\n</ul>\n</li>\n<li>\n<p>discard(elem)</p>\n<ul>\n<li>从set中移除一个元素</li>\n<li>元素不存在，什么都不做</li>\n</ul>\n</li>\n<li>\n<p>pop() -&gt; item</p>\n<ul>\n<li>移除并返回任意的元素。为什么是任意元素？ 因为是随机的，无序的</li>\n<li>空集返回KeyError异常</li>\n</ul>\n</li>\n<li>\n<p>clear()</p>\n<ul>\n<li>移除所有元素</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>s <span>=</span> <span>set</span><span>(</span><span>range</span><span>(</span><span>10</span><span>)</span><span>)</span>\ns<span>.</span>remove<span>(</span><span>0</span><span>)</span>\n<span>#s.remove(11) # KeyError为什么</span>\ns<span>.</span>discard<span>(</span><span>11</span><span>)</span>\ns<span>.</span>pop<span>(</span><span>)</span>\ns<span>.</span>clear<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"修改\"> 修改</h3>\n<p>集合类型没有修改。因为元素唯一。如果元素能够加入到集合中，说明它和别的元素不一样。</p>\n<p>所谓修改，其实就是把当前元素改成一个完全不同的元素，就是删除加入新元素。</p>\n<h3 id=\"索引\"> 索引</h3>\n<p>非线性结构，不可索引。</p>\n<h3 id=\"遍历\"> 遍历</h3>\n<p>只要是容器，都可以遍历元素。但是效率都是O(n)</p>\n<h3 id=\"成员运算符-in\"> 成员运算符 in</h3>\n<div><pre><code><span>print</span><span>(</span><span>10</span> <span>in</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>10</span> <span>in</span> <span>{</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>上面2句代码，分别在列表和集合中搜索元素。如果列表和集合的元素都有100万个，谁的效率高？ 集合效率高</p>\n<p>set、dict 使用 hash 表实现，内部使用 hash 值作为 key，时间复杂度为 O(1)，查询时间和数据规模无关，不会随着数据规模增大而搜索性能下降。</p>\n<h3 id=\"集合概念\"> 集合概念</h3>\n<ul>\n<li>全集\n<ul>\n<li>所有元素的集合。例如实数集，所有实数组成的集合就是全集</li>\n</ul>\n</li>\n<li>子集 bset 和超集 superset\n<ul>\n<li>一个集合A所有元素都在另一个集合B内，A是B的子集，B是A的超集</li>\n</ul>\n</li>\n<li>真子集和真超集\n<ul>\n<li>A是B的子集，且A不等于B，A就是B的真子集，B是A的真超集</li>\n</ul>\n</li>\n<li>并集：多个集合合并的结果</li>\n<li>交集：多个集合的公共部分</li>\n<li>差集：集合中除去和其他集合公共部分</li>\n</ul>\n<p><strong>并集</strong></p>\n<p>将两个集合A和B的所有的元素合并到一起，组成的集合称作集合A与集合B的并集</p>\n<ul>\n<li>union(*others) 返回和多个集合合并后的新的集合</li>\n<li><code>|</code> 运算符重载，等同 union</li>\n<li>update(*others) 和多个集合合并，就地修改</li>\n<li><code>|=</code> 等同update</li>\n</ul>\n<p><strong>交集</strong></p>\n<p>集合A和B，由所有属于A且属于B的元素组成的集合</p>\n<ul>\n<li>intersection(*others) 返回和多个集合的交集</li>\n<li><code>&amp;</code> 等同 intersection</li>\n<li><code>intersection_update(*others)</code> 获取和多个集合的交集，并就地修改</li>\n<li><code>&amp;=</code> 等同 intersection_update</li>\n</ul>\n<p><strong>差集</strong></p>\n<p>集合A和B，由所有属于A且不属于B的元素组成的集合</p>\n<ul>\n<li>\n<p><code>difference(*others)</code> 返回和多个集合的差集</p>\n</li>\n<li>\n<p><code>-</code> 等同difference</p>\n</li>\n<li>\n<p><code>difference_update(*others)</code>获取和多个集合的差集并就地修改</p>\n</li>\n<li>\n<p><code>-=</code> 等同difference_update</p>\n</li>\n</ul>\n<p><strong>对称差集</strong></p>\n<p>集合A和B，由所有不属于A和B的交集元素组成的集合，记作（A-B）∪（B-A）</p>\n<ul>\n<li><code>symmetric_differece(other)</code>返回和另一个集合的对称差集</li>\n<li><code>^</code> 等同symmetric_differece</li>\n<li><code>symmetric_differece_update(other)</code> 获取和另一个集合的对称差集并就地修改</li>\n<li><code>^=</code> 等同symmetric_differece_update</li>\n</ul>\n<p><strong>其它集合运算</strong></p>\n<ul>\n<li><code>issubset(other)、&lt;=</code> 判断当前集合是否是另一个集合的子集</li>\n<li><code>set1 &lt; set2</code> 判断set1是否是set2的真子集</li>\n<li><code>issuperset(other)、&gt;=</code> 判断当前集合是否是other的超集</li>\n<li><code>set1 &gt; set2</code> 判断set1是否是set2的真超集</li>\n<li><code>isdisjoint(other)</code> 当前集合和另一个集合没有交集，没有交集，返回True</li>\n</ul>\n<h2 id=\"字典-dict\"> 字典 dict</h2>\n<p>Dict 即 Dictionary，也称为 mapping。</p>\n<p>Python 中，字典由任意个元素构成的集合，每一个元素称为 Item，也称为 Entry。这个 Item 是由(key,\nvalue)组成的二元组。</p>\n<p>字典是可变的、无序的、key 不重复的 key-value 键值对集合。</p>\n<h3 id=\"初始化-2\"> 初始化</h3>\n<ul>\n<li><code>dict(**kwargs)</code> 使用 name=value 对初始化一个字典</li>\n<li><code>dict(iterable, **kwarg)</code> 使用可迭代对象和name=value对构造字典，不过可迭代对象的元素必须是一个二元结构</li>\n<li><code>dict(mapping, **kwarg)</code> 使用一个字典构建另一个字典</li>\n</ul>\n<p>字典的初始化方法都非常常用，都需要会用</p>\n<div><pre><code>d1 <span>=</span> <span>{</span><span>}</span>\nd2 <span>=</span> <span>dict</span><span>(</span><span>)</span>\nd3 <span>=</span> <span>dict</span><span>(</span>a<span>=</span><span>100</span><span>,</span> b<span>=</span><span>200</span><span>)</span>\nd4 <span>=</span> <span>dict</span><span>(</span>d3<span>)</span> <span># 构造另外一个字典</span>\nd5 <span>=</span> <span>dict</span><span>(</span>d4<span>,</span> a<span>=</span><span>300</span><span>,</span> c<span>=</span><span>400</span><span>)</span>\nd6 <span>=</span> <span>dict</span><span>(</span><span>[</span><span>(</span><span>'a'</span><span>,</span> <span>100</span><span>)</span><span>,</span> <span>[</span><span>'b'</span><span>,</span> <span>200</span><span>]</span><span>,</span> <span>(</span><span>1</span><span>,</span> <span>'abc'</span><span>)</span><span>]</span><span>,</span> b<span>=</span><span>300</span><span>,</span> c<span>=</span><span>400</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span># 类方法dict.fromkeys(iterable, value)</span>\nd <span>=</span> <span>dict</span><span>.</span>fromkeys<span>(</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span>\nd <span>=</span> <span>dict</span><span>.</span>fromkeys<span>(</span><span>range</span><span>(</span><span>5</span><span>)</span><span>,</span> <span>0</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"元素访问\"> 元素访问</h3>\n<ul>\n<li>d[key]\n<ul>\n<li>返回 key 对应的值 value</li>\n<li>key 不存在抛出 KeyError 异常</li>\n</ul>\n</li>\n<li>get(key[, default])\n<ul>\n<li>返回 key 对应的值 value</li>\n<li>key 不存在返回缺省值，如果没有设置缺省值就返回 None</li>\n</ul>\n</li>\n<li>setdefault(key[, default])\n<ul>\n<li>返回 key 对应的值 value</li>\n<li>key 不存在，添加 kv 对，value 设置为 default，并返回 default，如果 default 没有设置，缺省\n为None</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"新增和修改\"> 新增和修改</h3>\n<ul>\n<li>d[key] = value\n<ul>\n<li>将 key 对应的值修改为 value</li>\n<li>key不存在添加新的kv对</li>\n</ul>\n</li>\n<li>update([other]) -&gt; None\n<ul>\n<li>使用另一个字典的 kv 对更新本字典</li>\n<li>key不存在，就添加</li>\n<li>key存在，覆盖已经存在的key对应的值</li>\n<li>就地修改</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>d <span>=</span> <span>{</span><span>}</span>\nd<span>[</span><span>'a'</span><span>]</span> <span>=</span> <span>1</span>\nd<span>.</span>update<span>(</span>red<span>=</span><span>1</span><span>)</span>\nd<span>.</span>update<span>(</span><span>[</span><span>'red'</span><span>,</span> <span>2</span><span>]</span><span>)</span> <span># 错误格式</span>\nd<span>.</span>update<span>(</span><span>{</span><span>'red'</span><span>:</span><span>3</span><span>}</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"删除-2\"> 删除</h3>\n<ul>\n<li>pop(key[, default])\n<ul>\n<li>key存在，移除它，并返回它的value</li>\n<li>key不存在，返回给定的default</li>\n<li>default未设置，key不存在则抛出KeyError异常</li>\n</ul>\n</li>\n<li>popitem()\n<ul>\n<li>移除并返回一个任意的键值对</li>\n<li>字典为empty，抛出KeyError异常</li>\n</ul>\n</li>\n<li>clear()\n<ul>\n<li>清空字典</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"遍历-2\"> 遍历</h3>\n<p>1、遍历 Key</p>\n<div><pre><code><span>for</span> k <span>in</span> d<span>:</span>\n\t<span>print</span><span>(</span>k<span>)</span>\n    \n<span>for</span> k <span>in</span> d<span>.</span>keys<span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>k<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>2、遍历Value</p>\n<div><pre><code><span>for</span> v <span>in</span> d<span>.</span>values<span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>v<span>)</span>\n    \n<span>for</span> k <span>in</span> d<span>.</span>keys<span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>d<span>[</span>k<span>]</span><span>)</span>\n\t<span>print</span><span>(</span>d<span>.</span>get<span>(</span>k<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>3、遍历Item</p>\n<div><pre><code><span>for</span> item <span>in</span> d<span>.</span>items<span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>item<span>)</span>\n\t<span>print</span><span>(</span>item<span>[</span><span>0</span><span>]</span><span>,</span> item<span>[</span><span>1</span><span>]</span><span>)</span>\n    \n<span>for</span> k<span>,</span>v <span>in</span> d<span>.</span>items<span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>k<span>,</span> v<span>)</span>\n    \n<span>for</span> k<span>,</span>_ <span>in</span> d<span>.</span>items<span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>k<span>)</span>\n    \n<span>for</span> _<span>,</span>v <span>in</span> d<span>.</span>items<span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>v<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>Python3 中，keys、values、items方法返回一个类似一个生成器的可迭代对象</p>\n<ul>\n<li>Dictionary view对象，可以使用len()、iter()、in操作</li>\n<li>字典的entry的动态的视图，字典变化，视图将反映出这些变化</li>\n<li>keys返回一个类set对象，也就是可以看做一个set集合。如果values都可以hash，那么items也可以看做是类set对象</li>\n</ul>\n<p>Python2 中，上面的方法会返回一个新的列表，立即占据新的内存空间。所以 Python2 建议使用 iterkeys、itervalues、iteritems 版本，返回一个迭代器，而不是返回一个copy</p>\n<h3 id=\"遍历与删除\"> 遍历与删除</h3>\n<div><pre><code><span># 错误的做法</span>\nd <span>=</span> <span>dict</span><span>(</span>a<span>=</span><span>1</span><span>,</span> b<span>=</span><span>2</span><span>,</span> c<span>=</span><span>3</span><span>)</span>\n<span>for</span> k<span>,</span>v <span>in</span> d<span>.</span>items<span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>d<span>.</span>pop<span>(</span>k<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在使用keys、values、items方法遍历的时候，不可以改变字典的size</p>\n<div><pre><code><span>while</span> <span>len</span><span>(</span>d<span>)</span><span>:</span>\n\t<span>print</span><span>(</span>d<span>.</span>popitem<span>(</span><span>)</span><span>)</span>\n    \n<span>while</span> d<span>:</span>\n\t<span>print</span><span>(</span>d<span>.</span>popitem<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>上面的 while 循环虽然可以移除字典元素，但是很少使用，不如直接 clear。</p>\n<div><pre><code><span># for 循环正确删除</span>\nd <span>=</span> <span>dict</span><span>(</span>a<span>=</span><span>1</span><span>,</span> b<span>=</span><span>2</span><span>,</span> c<span>=</span><span>3</span><span>)</span>\nkeys <span>=</span> <span>[</span><span>]</span>\n<span>for</span> k<span>,</span>v <span>in</span> d<span>.</span>items<span>(</span><span>)</span><span>:</span>\n\tkeys<span>.</span>append<span>(</span>k<span>)</span>\n    \n<span>for</span> k <span>in</span> keys<span>:</span>\n\td<span>.</span>pop<span>(</span>k<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"key\"> key</h3>\n<p>字典的 key 和 set 的元素要求一致</p>\n<ul>\n<li>set 的元素可以就是看做 key，set 可以看做 dict 的简化版</li>\n<li>hashable 可哈希才可以作为 key，可以使用 hash() 测试</li>\n<li>使用key访问，就如同列表使用index访问一样，时间复杂度都是O(1)，这也是最好的访问元素的方式</li>\n</ul>\n<div><pre><code>d <span>=</span> <span>{</span>\n    <span>1</span> <span>:</span> <span>0</span><span>,</span>\n    <span>2.0</span> <span>:</span> <span>3</span><span>,</span>\n    <span>\"abc\"</span> <span>:</span> <span>None</span><span>,</span>\n    <span>(</span><span>'hello'</span><span>,</span> <span>'world'</span><span>,</span> <span>'python'</span><span>)</span> <span>:</span> <span>\"string\"</span><span>,</span>\n    <span>b'abc'</span> <span>:</span> <span>'135'</span>\n<span>}</span>\n\n<span>print</span><span>(</span>d<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"有序性\"> 有序性</h3>\n<p>后续补充</p>\n<h2 id=\"解析式和生成器表达式\"> 解析式和生成器表达式</h2>\n<h3 id=\"列表解析式\"> 列表解析式</h3>\n<p>列表解析式 List Comprehension，也叫列表推导式。</p>\n<div><pre><code><span># 生成一个列表，元素0~9，将每一个元素加1后的平方值组成新的列表</span>\nx <span>=</span> <span>[</span><span>]</span>\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n    x<span>.</span>append<span>(</span><span>(</span>i<span>+</span><span>1</span><span>)</span><span>**</span><span>2</span><span>)</span>\n<span>print</span><span>(</span>x<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span># 列表解析式</span>\n<span>print</span><span>(</span><span>[</span><span>(</span>i<span>+</span><span>1</span><span>)</span><span>**</span><span>2</span> <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>]</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>语法</p>\n<ul>\n<li>[返回值 for 元素 in 可迭代对象 if 条件]</li>\n<li>使用中括号[]，内部是 for 循环，if 条件语句可选</li>\n<li>返回一个新的列表</li>\n</ul>\n<p>列表解析式是一种语法糖</p>\n<ul>\n<li>编译器会优化，不会因为简写而影响效率，反而因优化提高了效率</li>\n<li>减少程序员工作量，减少出错</li>\n<li>简化了代码，增强了可读性</li>\n</ul>\n<div><pre><code><span>[</span>expr <span>for</span> item <span>in</span> iterable <span>if</span> cond1 <span>if</span> cond2<span>]</span>\n等价于\nret <span>=</span> <span>[</span><span>]</span>\n<span>for</span> item <span>in</span> iterable<span>:</span>\n    <span>if</span> cond1<span>:</span>\n    \t<span>if</span> cond2<span>:</span>\n        \tret<span>.</span>append<span>(</span>expr<span>)</span>\n<span>#</span>\n<span>[</span>expr <span>for</span> i <span>in</span> iterable1 <span>for</span> j <span>in</span> iterable2 <span>]</span>\n等价于\nret <span>=</span> <span>[</span><span>]</span>\n<span>for</span> i <span>in</span> iterable1<span>:</span>\n    <span>for</span> j <span>in</span> iterable2<span>:</span>\n        ret<span>.</span>append<span>(</span>expr<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code><span># 因为循环或判断只有一个，一斜到底，所以结果相同</span>\n<span>[</span><span>(</span>i<span>,</span>j<span>)</span> <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>7</span><span>)</span> <span>if</span> i<span>></span><span>4</span> <span>for</span> j <span>in</span> <span>range</span><span>(</span><span>20</span><span>,</span><span>25</span><span>)</span> <span>if</span> j<span>></span><span>23</span><span>]</span>\n<span>[</span><span>(</span>i<span>,</span>j<span>)</span> <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>7</span><span>)</span> <span>for</span> j <span>in</span> <span>range</span><span>(</span><span>20</span><span>,</span><span>25</span><span>)</span> <span>if</span> i<span>></span><span>4</span> <span>if</span> j<span>></span><span>23</span><span>]</span>\n<span>[</span><span>(</span>i<span>,</span>j<span>)</span> <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>7</span><span>)</span> <span>for</span> j <span>in</span> <span>range</span><span>(</span><span>20</span><span>,</span><span>25</span><span>)</span> <span>if</span> i<span>></span><span>4</span> <span>and</span> j<span>></span><span>23</span><span>]</span>\n<span># 都是[(5, 24), (6, 24)]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"生成器表达式\"> 生成器表达式</h3>\n<p>语法</p>\n<ul>\n<li>(返回值 for 元素 in 可迭代对象 if 条件)</li>\n<li>列表解析式的中括号换成小括号就行了</li>\n<li>返回一个生成器对象</li>\n</ul>\n<p>和列表解析式的区别</p>\n<ul>\n<li>生成器表达式是按需计算（或称惰性求值、延迟计算），需要的时候才计算值，返回可迭代对象迭代器，只能迭代一次</li>\n<li>列表解析式是立即返回值，返回可迭代对象列表，不是迭代器，可反复迭代</li>\n</ul>\n<p>生成器对象</p>\n<ul>\n<li>可迭代对象</li>\n<li>迭代器</li>\n</ul>\n<p><strong>生成器表达式和列表解析式对比</strong></p>\n<ul>\n<li>计算方式\n<ul>\n<li>生成器表达式延迟计算，列表解析式立即计算</li>\n</ul>\n</li>\n<li>内存占用\n<ul>\n<li>单从返回值本身来说，生成器表达式省内存，列表解析式返回新的列表</li>\n<li>生成器没有数据，内存占用极少，但是使用的时候，虽然一个个返回数据，但是合起来占用的内存也差不多</li>\n<li>列表解析式构造新的列表需要立即占用掉内存</li>\n</ul>\n</li>\n<li>计算速度\n<ul>\n<li>单看计算时间看，生成器表达式耗时非常短，列表解析式耗时长</li>\n<li>但生成器本身并没有返回任何值，只返回了一个生成器对象</li>\n<li>列表解析式构造并返回了一个新的列表</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集合解析式\"> 集合解析式</h3>\n<p>语法</p>\n<ul>\n<li>{返回值 for 元素 in 可迭代对象 if 条件}</li>\n<li>列表解析式的中括号换成大括号{}就变成了集合解析式</li>\n<li>立即返回一个集合</li>\n</ul>\n<div><pre><code><span>{</span><span>(</span>x<span>,</span> x<span>+</span><span>1</span><span>)</span> <span>for</span> x <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>}</span>\n<span>{</span><span>[</span>x<span>]</span> <span>for</span> x <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>}</span> <span># 可以吗？ 不可以 list是不可hash的</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"字典解析式\"> 字典解析式</h3>\n<p>语法</p>\n<ul>\n<li>{key:value for 元素 in 可迭代对象 if 条件}</li>\n<li>列表解析式的中括号换成大括号{}，元素的构造使用 key:value 形式</li>\n<li>立即返回一个字典</li>\n</ul>\n<div><pre><code><span>print</span><span>(</span><span>{</span>x<span>:</span><span>(</span>x<span>,</span>x<span>+</span><span>1</span><span>)</span> <span>for</span> x <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>}</span><span>)</span>\n<span>print</span><span>(</span><span>{</span>x<span>:</span><span>[</span>x<span>,</span>x<span>+</span><span>1</span><span>]</span> <span>for</span> x <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>}</span><span>)</span>\n<span>print</span><span>(</span><span>{</span><span>(</span>x<span>,</span><span>)</span><span>:</span><span>[</span>x<span>,</span>x<span>+</span><span>1</span><span>]</span> <span>for</span> x <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>}</span><span>)</span>\n<span># print({[x]:[x,x+1] for x in range(10)}) # 错误 key要求 可hash</span>\n<span>print</span><span>(</span><span>{</span><span>str</span><span>(</span>x<span>)</span><span>:</span>y <span>for</span> x <span>in</span> <span>range</span><span>(</span><span>3</span><span>)</span> <span>for</span> y <span>in</span> <span>range</span><span>(</span><span>4</span><span>)</span><span>}</span><span>)</span> <span># 输出多少个元素？ 返回三个元素，key值唯一，{'0': 3, '1': 3, '2': 3}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"总结\"> 总结</h3>\n<ul>\n<li>Python2 引入列表解析式</li>\n<li>Python2.4 引入生成器表达式</li>\n<li>Python3 引入集合、字典解析式，并迁移到了2.7</li>\n</ul>\n<p>一般来说，应该多应用解析式，简短、高效。如果一个解析式非常复杂，难以读懂，要考虑拆解成for循环。</p>\n<p>生成器和迭代器是不同的对象，但都是可迭代对象。</p>\n<p>如果不需要立即获得所有可迭代对象的元素，在Python 3中，推荐使用惰性求值的迭代器。</p>\n<table>\n<thead>\n<tr>\n<th>内建函数</th>\n<th>函数签名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sorted</td>\n<td>sorted(iterable[,key][,reverse])</td>\n<td>默认升序，对可迭代对象排序<br/>立即返回列表</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span># 排序一定是容器内全体参与</span>\n<span>print</span><span>(</span><span>sorted</span><span>(</span><span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>,</span><span>5</span><span>]</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>sorted</span><span>(</span><span>range</span><span>(</span><span>10</span><span>,</span> <span>20</span><span>)</span><span>,</span> reverse<span>=</span><span>True</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>sorted</span><span>(</span><span>{</span><span>'a'</span><span>:</span><span>100</span><span>,</span> <span>'b'</span><span>:</span><span>'abc'</span><span>}</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>sorted</span><span>(</span><span>{</span><span>'a'</span><span>:</span><span>100</span><span>,</span> <span>'b'</span><span>:</span><span>'abc'</span><span>}</span><span>.</span>items<span>(</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>sorted</span><span>(</span><span>{</span><span>'a'</span><span>:</span><span>'ABC'</span><span>,</span> <span>'b'</span><span>:</span><span>'abc'</span><span>}</span><span>.</span>values<span>(</span><span>)</span><span>,</span> key<span>=</span><span>str</span><span>,</span> reverse<span>=</span><span>True</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div>",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "02 线性数据结构",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-linear-data-structure/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-linear-data-structure/",
      "content_html": "<h1 id=\"_02-线性数据结构\"> 02 线性数据结构</h1>\n<h2 id=\"内建常用数据类型\"> 内建常用数据类型</h2>\n<ul>\n<li>\n<p>数值型</p>\n<ul>\n<li>int、float、complex、bool</li>\n</ul>\n</li>\n<li>\n<p>序列 sequence</p>\n<ul>\n<li>字符串 str、字节序列 bytes、bytearray</li>\n<li>列表 list、元组 tuple</li>\n</ul>\n</li>\n<li>\n<p>键值对</p>\n<ul>\n<li>集合 set、字典 dict</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数值型\"> 数值型</h2>\n<ul>\n<li>int、float、complex、bool  都是class，1、5.0、2+3j 都是对象即实例</li>\n<li>int：python3 的 int 就是长整型，且没有大小限制，受限于内存区域的大小</li>\n<li>float：由整数部分和小数部分组成。支持十进制和科学计数法表示。C 的双精度型实现</li>\n<li>complex：有实数和虚数部分组成，实数和虚数部分都是浮点数，3+4.2J</li>\n<li>bool：int 的子类，仅有2个实例 True、False 对应1和0，可以和整数直接运算</li>\n</ul>\n<h3 id=\"类型转换\"> 类型转换</h3>\n<ul>\n<li>int、float、complex、bool 也可以当做内建函数对数据进行类型转换</li>\n<li>int(x) 返回一个整数</li>\n<li>float(x) 返回一个浮点数</li>\n<li>complex(x)、complex(x,y) 返回一个复数</li>\n<li>bool(x) 返回布尔值，前面讲过False等价的对象</li>\n</ul>\n<h3 id=\"整数\"> 整数</h3>\n<p>math模块的 floor()、ceil() 函数；内建函数 int()、round()；运算符 //</p>\n<div><pre><code><span># 整除</span>\n<span>print</span><span>(</span><span>3</span><span>//</span><span>2</span><span>,</span> <span>5</span><span>//</span><span>2</span><span>,</span> <span>7</span><span>//</span><span>2</span><span>)</span>\n<span>print</span><span>(</span><span>-</span><span>3</span><span>//</span><span>2</span><span>,</span> <span>-</span><span>5</span><span>//</span><span>2</span><span>,</span> <span>-</span><span>7</span><span>//</span><span>2</span><span>)</span>\n<span>print</span><span>(</span><span>7</span><span>//</span><span>2</span><span>,</span> <span>7</span><span>//</span><span>-</span><span>2</span><span>,</span> <span>-</span><span>7</span><span>//</span><span>2</span><span>,</span> <span>-</span><span>(</span><span>7</span><span>//</span><span>2</span><span>)</span><span>)</span>\n<span># int</span>\n<span>print</span><span>(</span><span>'int ------------'</span><span>)</span>\n<span>print</span><span>(</span><span>int</span><span>(</span><span>1.4</span><span>)</span><span>,</span> <span>int</span><span>(</span><span>1.5</span><span>)</span><span>,</span> <span>int</span><span>(</span><span>1.6</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>int</span><span>(</span><span>-</span><span>1.4</span><span>)</span><span>,</span> <span>int</span><span>(</span><span>-</span><span>1.5</span><span>)</span><span>,</span> <span>int</span><span>(</span><span>-</span><span>1.6</span><span>)</span><span>)</span>\n<span># ceil floor</span>\n<span>print</span><span>(</span><span>'ceil floor ------------'</span><span>)</span>\n<span>import</span> math\n<span>print</span><span>(</span>math<span>.</span>floor<span>(</span><span>2.5</span><span>)</span><span>,</span> math<span>.</span>floor<span>(</span><span>-</span><span>2.5</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>math<span>.</span>ceil<span>(</span><span>2.5</span><span>)</span><span>,</span> math<span>.</span>ceil<span>(</span><span>-</span><span>2.5</span><span>)</span><span>)</span>\n<span># round</span>\n<span>print</span><span>(</span><span>'round ------------'</span><span>)</span>\n<span>print</span><span>(</span><span>round</span><span>(</span><span>1.4</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>-</span><span>1.4</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>-</span><span>1.6</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>1.6</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>round</span><span>(</span><span>2.4</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>-</span><span>2.4</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>2.6</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>2.6</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'round .5 ---------'</span><span>)</span>\n<span>print</span><span>(</span><span>round</span><span>(</span><span>0.5</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>1.5</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>2.5</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>3.5</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>round</span><span>(</span><span>-</span><span>0.5</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>-</span><span>1.5</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>-</span><span>2.5</span><span>)</span><span>,</span> <span>round</span><span>(</span><span>-</span><span>3.5</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><ul>\n<li>round() 四舍六入五取偶</li>\n<li>math.floor()  向下取整</li>\n<li>math.ceil()向上取整</li>\n<li>int() 取整数部分</li>\n<li>// 整除且向下取整</li>\n</ul>\n<h3 id=\"常用数值处理函数\"> 常用数值处理函数</h3>\n<ul>\n<li>min()、max()</li>\n<li>pow(x,y) 等于 x**y</li>\n<li>math.sqrt() 等于 x ** 0.5</li>\n<li>进制函数，返回值是字符串\n<ul>\n<li>bin()、oct()、hex()</li>\n</ul>\n</li>\n<li>math模块\n<ul>\n<li>math.pi π</li>\n<li>math.e 自如常数</li>\n<li>math模块中还有对数函数、三角函数等</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"线性数据结构\"> 线性数据结构</h2>\n<p>线性表</p>\n<ul>\n<li>线性表（简称表），是一种抽象的数学概念，是一组元素的序列的抽象，它由有穷个元素组成（0\n个或任意个）</li>\n<li>顺序表：使用一大块连续的内存顺序存储表中的元素，这样实现的表称为顺序表，或称连续表\n<ul>\n<li>在顺序表中，元素的关系使用顺序表的存储顺序自然地表示</li>\n</ul>\n</li>\n<li>链接表：在存储空间中将分散存储的元素链接起来，这种实现称为链接表，简称链表</li>\n</ul>\n<p>列表如同地铁站排好的队伍，有序，可以插队、离队，可以索引。</p>\n<p>链表如同操场上手拉手的小朋友，有序但排列随意。或者可以想象成一串带线的珠子，随意盘放在桌\n上。也可以离队、插队，也可以索引。</p>\n<h2 id=\"列表-list\"> 列表 list</h2>\n<ul>\n<li>一个排列整齐的队伍，Python采用顺序表实现</li>\n<li>列表内的个体称作元素，由若干元素组成列表</li>\n<li>元素可以是任意对象（数字、字符串、对象、列表等）</li>\n<li>列表内元素有顺序，可以使用索引</li>\n<li>线性的数据结构</li>\n<li>使用 [ ] 表示</li>\n<li>列表是可变的</li>\n</ul>\n<p>列表是非常重要的数据结构，对其内存结构和操作方法必须烂熟于心。</p>\n<h3 id=\"初始化\"> 初始化</h3>\n<ul>\n<li>list() -&gt; new empty list</li>\n<li>list(iterable) -&gt;  new list initialized from iterable's items</li>\n<li>[]</li>\n<li>列表不能一开始就定义大小</li>\n</ul>\n<div><pre><code>ls1 <span>=</span> <span>[</span><span>]</span>\nls2 <span>=</span> <span>list</span><span>(</span><span>)</span>\nls3 <span>=</span> <span>[</span><span>2</span><span>,</span> <span>'ab'</span><span>,</span> <span>[</span><span>3</span><span>,</span> <span>'abc'</span><span>]</span><span>,</span> <span>(</span><span>5</span><span>,</span> <span>30</span><span>,</span> <span>50</span><span>)</span><span>]</span> <span># 列表是一个容器，元素可以是其它类型</span>\nls4 <span>=</span> <span>list</span><span>(</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span> <span># 非常常用的构造方式，将一个可迭代对象转换为一个列表</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"索引\"> 索引</h3>\n<ul>\n<li>索引，也叫下标</li>\n<li>正索引：从左至右，从0开始，为列表中每一个元素编号\n<ul>\n<li>如果列表有元素，索引范围[0, 长度-1]</li>\n</ul>\n</li>\n<li>负索引：从右至左，从-1开始\n<ul>\n<li>如果列表有元素，索引范围[-长度, -1]</li>\n</ul>\n</li>\n<li>正、负索引不可以超界，否则引发异常IndexError</li>\n<li>为了理解方便，可以认为列表是从左至右排列的，左边是头部，右边是尾部，左边是下界，右边是\n上界</li>\n<li>列表通过索引访问，list[index] ，index就是索引，使用中括号访问</li>\n</ul>\n<p>使用索引定位访问元素的时间复杂度为O(1)，这是最快的方式，是列表最好的使用方式。</p>\n<h3 id=\"查询\"> 查询</h3>\n<ul>\n<li>index(value,[start,[stop]])\n<ul>\n<li>通过值value，从指定区间查找列表内的元素是否匹配</li>\n<li>匹配第一个就立即返回索引</li>\n<li>匹配不到，抛出异常ValueError</li>\n</ul>\n</li>\n<li>count(value)\n<ul>\n<li>返回列表中匹配value的次数</li>\n</ul>\n</li>\n<li>时间复杂度\n<ul>\n<li>index和count方法都是O(n)</li>\n<li>随着列表数据规模的增大，而效率下降</li>\n</ul>\n</li>\n<li>len() 列表的长度</li>\n</ul>\n<h3 id=\"修改\"> 修改</h3>\n<p>索引定位元素，然后修改。注意索引不能超界</p>\n<div><pre><code>ls1 <span>=</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>]</span>\nls1<span>[</span><span>2</span><span>]</span> <span>=</span> <span>200</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"增加单个元素\"> 增加单个元素</h3>\n<ul>\n<li>append(object) -&gt; None\n<ul>\n<li>列表尾部追加元素，返回None</li>\n<li>返回None就意味着没有新的列表产生，就地修改</li>\n<li>定位时间复杂度是O(1)</li>\n</ul>\n</li>\n<li>insert(index, object) -&gt; None\n<ul>\n<li>在指定的索引index处插入元素object</li>\n<li>返回None就意味着没有新的列表产生，就地修改</li>\n<li>定位时间复杂度是O(1)</li>\n</ul>\n</li>\n<li>索引能超上下界吗？\n<ul>\n<li>超越上界，尾部追加</li>\n<li>超越下界，头部追加</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"增加多个元素\"> 增加多个元素</h3>\n<ul>\n<li>\n<p>extend(iteratable) -&gt; None</p>\n<ul>\n<li>将可迭代对象的元素追加进来，返回None</li>\n<li>就地修改，本列表自身扩展</li>\n</ul>\n</li>\n<li>\n<p>+ -&gt; list</p>\n<ul>\n<li>连接操作，将两个列表连接起来，产生新的列表，原列表不变</li>\n<li>本质上调用的是魔术方法__add__()方法</li>\n</ul>\n</li>\n<li>\n<p>* -&gt; list</p>\n<ul>\n<li>重复操作，将本列表元素重复n次，返回新的列表</li>\n</ul>\n</li>\n</ul>\n<p>在Python中一切皆对象，而对象都是引用类型，可以理解为一个地址指针指向这个对象。</p>\n<p>但是，字面常量字符串、数值等表现却不像引用类型，暂时可以称为简单类型。</p>\n<p>而列表、元组、字典，包括以后学习的类和实例都可以认为是引用类型。</p>\n<p>你可以认为简单类型直接存在列表中，而引入类型只是把引用地址存在了列表中。</p>\n<h3 id=\"删除\"> 删除</h3>\n<ul>\n<li>remove(value) -&gt; None\n<ul>\n<li>从左至右查找第一个匹配value的值，找到就移除该元素，并返回None，否则ValueError</li>\n<li>就地修改</li>\n</ul>\n</li>\n<li>pop([index]) -&gt; item\n<ul>\n<li>不指定索引index，就从列表尾部弹出一个元素</li>\n<li>指定索引index，就从索引处弹出一个元素，索引超界抛出IndexError错误</li>\n</ul>\n</li>\n<li>clear() -&gt; None\n<ul>\n<li>清除列表所有元素，剩下一个空列表</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"in-成员操作\"> in 成员操作</h3>\n<div><pre><code><span>'a'</span> <span>in</span> <span>[</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'c'</span><span>]</span>\n<span>[</span><span>3</span><span>,</span><span>4</span><span>]</span> <span>in</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>[</span><span>3</span><span>,</span><span>4</span><span>]</span><span>]</span>\n<span>for</span> x <span>in</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>]</span><span>:</span>\n\t<span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"列表复制\"> 列表复制</h3>\n<div><pre><code>a <span>=</span> <span>list</span><span>(</span><span>range</span><span>(</span><span>4</span><span>)</span><span>)</span>\nb <span>=</span> <span>list</span><span>(</span><span>range</span><span>(</span><span>4</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span>\nc <span>=</span> a\nc<span>[</span><span>2</span><span>]</span> <span>=</span> <span>10</span>\n<span>print</span><span>(</span>a<span>)</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span># 还相等吗？  不相等</span>\n<span>print</span><span>(</span>a <span>==</span> c<span>)</span> <span># 相等吗？ 相等</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code>a <span>=</span> <span>list</span><span>(</span><span>range</span><span>(</span><span>4</span><span>)</span><span>)</span>\nb <span>=</span> a<span>.</span>copy<span>(</span><span>)</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span># 相等</span>\na<span>[</span><span>2</span><span>]</span> <span>=</span> <span>10</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span># 不相等</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>a <span>=</span> <span>[</span><span>1</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span><span>,</span> <span>5</span><span>]</span>\nb <span>=</span> a<span>.</span>copy<span>(</span><span>)</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span># True</span>\na<span>[</span><span>2</span><span>]</span> <span>=</span> <span>10</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span># False</span>\na<span>[</span><span>2</span><span>]</span> <span>=</span> b<span>[</span><span>2</span><span>]</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span># True</span>\na<span>[</span><span>1</span><span>]</span><span>[</span><span>1</span><span>]</span> <span>=</span> <span>100</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span># True</span>\n<span>print</span><span>(</span>a<span>)</span>\n<span>print</span><span>(</span>b<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><strong>列表的内存模型和深浅拷贝</strong></p>\n<ul>\n<li>shadow copy\n<ul>\n<li>影子拷贝，也叫浅拷贝。遇到引用类型数据，仅仅复制一个引用而已</li>\n</ul>\n</li>\n<li>deep copy\n<ul>\n<li>深拷贝，往往会递归复制一定深度</li>\n</ul>\n</li>\n</ul>\n<p>一般情况下，大多数语言提供的默认复制行为都是浅拷贝。</p>\n<div><pre><code><span>import</span> copy\na <span>=</span> <span>[</span><span>1</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>]</span><span>,</span> <span>4</span><span>]</span>\nb <span>=</span> copy<span>.</span>deepcopy<span>(</span>a<span>)</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span>\na<span>[</span><span>1</span><span>]</span><span>[</span><span>1</span><span>]</span> <span>=</span> <span>100</span>\n<span>print</span><span>(</span>a <span>==</span> b<span>)</span> <span># False</span>\n<span>print</span><span>(</span>a<span>)</span>\n<span>print</span><span>(</span>b<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>\n<p>Python内建数据类型，内部都实现了 == ，它的意思是内容比较</p>\n</blockquote>\n<h3 id=\"python-内存管理\"> Python 内存管理</h3>\n<p>后续补充</p>\n<h2 id=\"随机数\"> 随机数</h2>\n<p>random模块</p>\n<ul>\n<li>randint(a, b) 返回[a, b]之间的整数</li>\n<li>randrange ([start,] stop [,step]) 从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1。 random.randrange(1,7,2)</li>\n<li>choice(seq) 从非空序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中\n随机挑选一个整数。random.choice([1,3,5,7])</li>\n<li>3.6开始提供choices，一次从样本中随机选择几个，可重复选择，可以指定权重</li>\n<li>random.shuffle(list) -&gt;None 就地打乱列表元素</li>\n<li>sample(population, k) 从样本空间或总体（序列或者集合类型）中随机取出k个不同的元素，返回\n一个新的列表\n<ul>\n<li>random.sample(['a', 'b', 'c', 'd'], 2)</li>\n<li>random.sample(['a', 'a'], 2)</li>\n<li>每次从样本空间采样，在这一次中不可以重复抽取同一个元素</li>\n</ul>\n</li>\n</ul>\n<div><pre><code><span>import</span> random\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span>random<span>.</span>randint<span>(</span><span>1</span><span>,</span> <span>5</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>random<span>.</span>randrange<span>(</span><span>1</span><span>,</span> <span>5</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\nx <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span>\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>random<span>.</span>choice<span>(</span>x<span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\n<span># 观察下面的0和1的比例</span>\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>random<span>.</span>choices<span>(</span><span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span><span>,</span> k<span>=</span><span>6</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>random<span>.</span>choices<span>(</span><span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span><span>,</span> <span>[</span><span>10</span><span>,</span> <span>1</span><span>]</span><span>,</span> k<span>=</span><span>6</span><span>)</span><span>)</span> <span># 10比1权重</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\nx <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span>\n<span># 采样</span>\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span>random<span>.</span>sample<span>(</span>x<span>,</span> <span>5</span><span>)</span><span>)</span> <span># k能不能是6, 不能</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id=\"元组-tuple\"> 元组 tuple</h2>\n<ul>\n<li>一个有序的元素组成的集合</li>\n<li>使用小括号 ( ) 表示</li>\n<li>元组是不可变对象</li>\n</ul>\n<h3 id=\"初始化-2\"> 初始化</h3>\n<ul>\n<li>tuple() -&gt; empty tuple</li>\n<li>tuple(iterable) -&gt; tuple initialized from iterable's items</li>\n</ul>\n<div><pre><code>t1 <span>=</span> <span>(</span><span>)</span> <span># 空元组</span>\nt2 <span>=</span> <span>(</span><span>1</span><span>,</span><span>)</span> <span># 必须有这个逗号</span>\nt3 <span>=</span> <span>(</span><span>1</span><span>,</span><span>)</span> <span>*</span> <span>5</span>\nt4 <span>=</span> <span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\nt5 <span>=</span> <span>1</span><span>,</span> <span>'a'</span>\nt6 <span>=</span> <span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span>\nt7 <span>=</span> <span>tuple</span><span>(</span><span>)</span> <span># 空元组</span>\nt8 <span>=</span> <span>tuple</span><span>(</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span>\nt9 <span>=</span> <span>tuple</span><span>(</span><span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"索引-2\"> 索引</h3>\n<p>索引和列表规则一样，不可以超界</p>\n<h3 id=\"查询-2\"> 查询</h3>\n<p>方法和列表一样，时间复杂度也一样。index、count、len等</p>\n<h3 id=\"增删改\"> 增删改</h3>\n<p>元组元素的个数在初始化的时候已经定义好了，所以不能为元组增加元素、也不能从中删除元素、也不能修改元素的内容。</p>\n<h2 id=\"字符串-str\"> 字符串 str</h2>\n<ul>\n<li>一个个字符组成的有序的序列，是字符的集合</li>\n<li>使用单引号、双引号、三引号引住的字符序列</li>\n<li>字符串是不可变对象，是字面常量</li>\n</ul>\n<p>Python3 起，字符串都是 Unicode 类型</p>\n<h3 id=\"初始化-3\"> 初始化</h3>\n<div><pre><code>s1 = &#39;string&#39;\ns2 = &quot;string2&quot;\ns3 = &#39;&#39;&#39;this&#39;s a &quot;String&quot; &#39;&#39;&#39;\ns4 = &#39;hello \\n magedu.com&#39;\ns5 = r&quot;hello \\n magedu.com&quot;\ns6 = &#39;c:\\windows\\nt&#39;\ns7 = R&quot;c:\\windows\\nt&quot;\ns8 = &#39;c:\\windows\\\\nt&#39;\nname = &#39;tom&#39;; age = 20 # python代码写在一行，使用分号隔开，不推荐\ns9 = f&#39;{name}, {age}&#39; # 3.6支持f前缀\nsql = &quot;&quot;&quot;select * from user where name=&#39;tom&#39; &quot;&quot;&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>r前缀：所有字符都是本来的意思，没有转义\nf前缀：3.6开始，使用变量插值</p>\n<h3 id=\"索引-3\"> 索引</h3>\n<p>字符串是序列，支持下标访问。但不可变，不可以修改元素。</p>\n<div><pre><code>sql <span>=</span> <span>\"select * from user where name='tom'\"</span>\n<span>print</span><span>(</span>sql<span>[</span><span>4</span><span>]</span><span>)</span> <span># 字符串'c'</span>\nsql<span>[</span><span>4</span><span>]</span> <span>=</span> <span>'o'</span> <span># 不可以</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"连接\"> 连接</h3>\n<p>+加号</p>\n<ul>\n<li>将2个字符串连接起来</li>\n<li>返回一个新的字符串</li>\n</ul>\n<p>join方法</p>\n<ul>\n<li>sep.join(iterable)</li>\n<li>使用指定字符串作为分隔符，将可迭代对象中字符串使用这个分隔符拼接起来</li>\n<li>可迭代对象必须是字符串</li>\n<li>返回一个新的字符串</li>\n</ul>\n<div><pre><code>x <span>=</span> <span>'ab'</span>\nx <span>=</span> x <span>+</span> <span>'cd'</span>\n<span>print</span><span>(</span><span>','</span><span>.</span>join<span>(</span>x<span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'\\t'</span><span>.</span>join<span>(</span>x<span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'\\n'</span><span>.</span>join<span>(</span>x<span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span><span>.</span>join<span>(</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span><span>)</span> <span># 可以吗 不可以，可迭代对象必须是字符串</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"字符查找\"> 字符查找</h3>\n<p>find、rfind、index、rindex</p>\n<p>后续补充</p>\n<h3 id=\"分割\"> 分割</h3>\n<ul>\n<li>split(sep=None, maxsplit=-1) -&gt; list of strings\n<ul>\n<li>从左至右</li>\n<li>sep 指定分割字符串，缺省的情况下空白字符串作为分隔符</li>\n<li>maxsplit 指定分割的次数，-1 表示遍历整个字符串</li>\n<li>立即返回列表</li>\n</ul>\n</li>\n<li>rsplit(sep=None, maxsplit=-1) -&gt; list of strings\n<ul>\n<li>从右向左开始切，但是输出的字符串字符不会反</li>\n<li>sep 指定分割字符串，缺省的情况下空白字符串作为分隔符</li>\n<li>maxsplit 指定分割的次数，-1 表示遍历整个字符串</li>\n<li>立即返回列表</li>\n</ul>\n</li>\n<li>splitlines([keepends]) -&gt; list of strings\n<ul>\n<li>按照行来切分字符串</li>\n<li>keepends 指的是是否保留行分隔符</li>\n<li>行分隔符包括\\n、\\r\\n、\\r等</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>s <span>=</span> <span>','</span><span>.</span>join<span>(</span><span>'abcd'</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>split<span>(</span><span>','</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>split<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>split<span>(</span><span>','</span><span>,</span> <span>2</span><span>)</span><span>)</span>  <span># ['a', 'b', 'c,d']</span>\n\ns1 <span>=</span> <span>'\\na b \\tc\\nd\\n'</span> <span># 注意下面3个切割的区别</span>\n<span>print</span><span>(</span>s1<span>.</span>split<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s1<span>.</span>split<span>(</span><span>' '</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s1<span>.</span>split<span>(</span><span>'\\n'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s1<span>.</span>split<span>(</span><span>'b'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s1<span>.</span>splitlines<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>\n<li>partition(sep) -&gt; (head, sep, tail)\n<ul>\n<li>从左至右，遇到分隔符就把字符串分割成两部分，返回头、分隔符、尾三部分的三元组</li>\n<li>如果没有找到分隔符，就返回头、2个空元素的三元组</li>\n<li>sep 分割字符串，必须指定</li>\n</ul>\n</li>\n<li>rpartition(sep) -&gt; (head, sep, tail)\n<ul>\n<li>从右至左，遇到分隔符就把字符串分割成两部分，返回头、分隔符、尾三部分的三元组</li>\n<li>如果没有找到分隔符，就返回2个空元素和尾的三元组</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>s <span>=</span> <span>','</span><span>.</span>join<span>(</span><span>'abcd'</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>partition<span>(</span><span>','</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>partition<span>(</span><span>'.'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>rpartition<span>(</span><span>','</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>rpartition<span>(</span><span>'.'</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"替换\"> 替换</h3>\n<ul>\n<li>replace(old, new[, count]) -&gt; str\n<ul>\n<li>字符串中找到匹配替换为新子串，返回新字符串</li>\n<li>count表示替换几次，不指定就是全部替换</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>s <span>=</span> <span>','</span><span>.</span>join<span>(</span><span>'abcd'</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>replace<span>(</span><span>','</span><span>,</span> <span>' '</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>replace<span>(</span><span>','</span><span>,</span> <span>' '</span><span>,</span> <span>2</span><span>)</span><span>)</span>\ns1 <span>=</span> <span>'www.baidu.edu'</span>\n<span>print</span><span>(</span>s1<span>.</span>replace<span>(</span><span>'w'</span><span>,</span> <span>'a'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s1<span>.</span>replace<span>(</span><span>'ww'</span><span>,</span> <span>'a'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s1<span>.</span>replace<span>(</span><span>'www'</span><span>,</span> <span>'a'</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"移除\"> 移除</h3>\n<ul>\n<li>strip([chars]) -&gt; str\n<ul>\n<li>在字符串两端去除指定的字符集chars中的所有字符</li>\n<li>如果chars没有指定，去除两端的空白字符</li>\n</ul>\n</li>\n<li>lstrip([chars]) -&gt; str ，从左开始</li>\n<li>rstrip([chars]) -&gt; str，从右开始</li>\n</ul>\n<div><pre><code>s <span>=</span> <span>'\\t\\r\\na b c,d\\ne\\n\\t'</span>\n<span>print</span><span>(</span>s<span>.</span>strip<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>strip<span>(</span><span>'\\t\\n'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>strip<span>(</span><span>'\\t\\ne\\r'</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>首尾判断</p>\n<ul>\n<li>endswith(suffix[, start[, end]]) -&gt; bool\n<ul>\n<li>在指定的区间[start, end)，字符串是否是suffix结尾</li>\n</ul>\n</li>\n<li>startswith(prefix[, start[, end]]) -&gt; bool\n<ul>\n<li>在指定的区间[start, end)，字符串是否是prefix开头</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>s <span>=</span> <span>\"www.baidu.edu\"</span>\n<span>print</span><span>(</span>s<span>.</span>startswith<span>(</span><span>'ww'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>startswith<span>(</span><span>'i'</span><span>,</span> <span>6</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>startswith<span>(</span><span>'e'</span><span>,</span> <span>9</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>startswith<span>(</span><span>'edu'</span><span>,</span> <span>10</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>s<span>.</span>endswith<span>(</span><span>'edu'</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"其他函数\"> 其他函数</h3>\n<ul>\n<li>upper()大写</li>\n<li>lower()小写</li>\n<li>swapcase() 交换大小写</li>\n<li>isalnum() -&gt; bool 是否是字母和数字组成</li>\n<li>isalpha() 是否是字母</li>\n<li>isdecimal() 是否只包含十进制数字</li>\n<li>isdigit() 是否全部数字(0~9)</li>\n<li>isidentifier() 是不是字母和下划线开头，其他都是字母、数字、下划线</li>\n<li>islower() 是否都是小写</li>\n<li>isupper() 是否全部大写</li>\n<li>isspace() 是否只包含空白字符</li>\n</ul>\n<h3 id=\"格式化\"> 格式化</h3>\n<p>简单的使用+或者 join 也可以拼接字符串，但是需要先转换数据到字符串后才能拼接。</p>\n<p><strong>C 风格 printf-style</strong></p>\n<ul>\n<li>占位符：使用%和格式字符，例如%s、%d</li>\n<li>修饰符：在占位符中还可以插入修饰符，例如%03d</li>\n<li>format % values\n<ul>\n<li>format 是格式字符串，values 是被格式的值</li>\n<li>格式字符串和被格式的值之间使用%</li>\n<li>values只能是一个对象，可以是一个值，可以是一个元素个数和占位符数目相等的元组，也可以是一个字典</li>\n</ul>\n</li>\n</ul>\n<div><pre><code><span>print</span><span>(</span><span>\"I am %5d\"</span> <span>%</span> <span>(</span><span>20</span><span>,</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'I like %s.'</span> <span>%</span> <span>'Python'</span><span>)</span>\n<span>print</span><span>(</span><span>\"%3.2f%% 0x%x %#X\"</span> <span>%</span> <span>(</span><span>89.7654</span><span>,</span> <span>10</span><span>,</span> <span>256</span><span>)</span><span>)</span> <span># 宽度为3，小数点后2位</span>\n<span>print</span><span>(</span><span>\"I am %-5d\"</span> <span>%</span> <span>(</span><span>20</span><span>,</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>\"%(host)s.%(domain)s\"</span> <span>%</span> <span>{</span><span>'domain'</span><span>:</span><span>'baidu.com'</span><span>,</span> <span>'host'</span><span>:</span><span>'www'</span><span>}</span><span>)</span> <span># 靠名字对应</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><strong>format函数</strong></p>\n<p>Python2.5 之后，字符串类型提供了 format 函数，功能更加强大，鼓励使用。\n&quot;{} {xxx}&quot;.format(*args, **kwargs) -&gt; str</p>\n<ul>\n<li>args是可变的位置参数</li>\n<li>kwargs是可变关键字参数，写作a=100</li>\n<li>使用花括号作为占位符</li>\n<li>{}表示按照顺序匹配位置参数，{n}表示取位置参数索引为n的值</li>\n<li>{xxx}表示在关键字参数中搜索名称一致的</li>\n<li>{{}} 表示打印花括号</li>\n</ul>\n<div><pre><code><span># 位置对应</span>\n<span>print</span><span>(</span><span>\"{}:{}\"</span><span>.</span><span>format</span><span>(</span><span>'127.0.0.1'</span><span>,</span> <span>8080</span><span>)</span><span>)</span>\n<span># 位置或关键字对应</span>\n<span>print</span><span>(</span><span>\"{server} {1}:{0}\"</span><span>.</span><span>format</span><span>(</span><span>8080</span><span>,</span> <span>'127.0.0.1'</span><span>,</span> server<span>=</span><span>'Web Server Info: '</span><span>)</span><span>)</span>\n<span># 访问元素</span>\n<span>print</span><span>(</span><span>\"{0[0]}.{0[1]}\"</span><span>.</span><span>format</span><span>(</span><span>(</span><span>'baidu'</span><span>,</span> <span>'com'</span><span>)</span><span>)</span><span>)</span>\n<span># 进制</span>\n<span>print</span><span>(</span><span>\"{0:d} {0:b} {0:o} {0:x} {0:#X}\"</span><span>.</span><span>format</span><span>(</span><span>31</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span># 浮点数</span>\n<span>print</span><span>(</span><span>\"{}\"</span><span>.</span><span>format</span><span>(</span><span>3</span><span>**</span><span>0.5</span><span>)</span><span>)</span> <span># 1.7320508075688772</span>\n<span>print</span><span>(</span><span>\"{:f}\"</span><span>.</span><span>format</span><span>(</span><span>3</span><span>**</span><span>0.5</span><span>)</span><span>)</span> <span># 1.732051，精度默认6</span>\n<span>print</span><span>(</span><span>\"{:10f}\"</span><span>.</span><span>format</span><span>(</span><span>3</span><span>**</span><span>0.5</span><span>)</span><span>)</span> <span># 右对齐，宽度10</span>\n<span>print</span><span>(</span><span>\"{:2}\"</span><span>.</span><span>format</span><span>(</span><span>102.231</span><span>)</span><span>)</span> <span># 宽度为2数字</span>\n<span>print</span><span>(</span><span>\"{:2}\"</span><span>.</span><span>format</span><span>(</span><span>1</span><span>)</span><span>)</span> <span># 宽度为2数字</span>\n<span>print</span><span>(</span><span>\"{:.2}\"</span><span>.</span><span>format</span><span>(</span><span>3</span><span>**</span><span>0.5</span><span>)</span><span>)</span> <span># 1.7 2个数字</span>\n<span>print</span><span>(</span><span>\"{:.2f}\"</span><span>.</span><span>format</span><span>(</span><span>3</span><span>**</span><span>0.5</span><span>)</span><span>)</span> <span># 1.73 小数点后2位</span>\n<span>print</span><span>(</span><span>\"{:3.2f}\"</span><span>.</span><span>format</span><span>(</span><span>3</span><span>**</span><span>0.5</span><span>)</span><span>)</span> <span># 1.73 宽度为3，小数点后2位</span>\n<span>print</span><span>(</span><span>\"{:20.3f}\"</span><span>.</span><span>format</span><span>(</span><span>0.2745</span><span>)</span><span>)</span> <span># 0.275</span>\n<span>print</span><span>(</span><span>\"{:3.3%}\"</span><span>.</span><span>format</span><span>(</span><span>1</span><span>/</span><span>3</span><span>)</span><span>)</span> <span># 33.333%</span>\n<span># 注意宽度可以被撑破</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><pre><code><span># 对齐</span>\n<span>print</span><span>(</span><span>\"{}*{}={}\"</span><span>.</span><span>format</span><span>(</span><span>5</span><span>,</span> <span>6</span><span>,</span> <span>5</span><span>*</span><span>6</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>\"{}*{}={:2}\"</span><span>.</span><span>format</span><span>(</span><span>5</span><span>,</span> <span>6</span><span>,</span> <span>5</span><span>*</span><span>6</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>\"{1}*{0}={2:3}\"</span><span>.</span><span>format</span><span>(</span><span>5</span><span>,</span> <span>6</span><span>,</span> <span>5</span><span>*</span><span>6</span><span>)</span><span>)</span> <span># 6*5= 30</span>\n<span>print</span><span>(</span><span>\"{1}*{0}={2:0>3}\"</span><span>.</span><span>format</span><span>(</span><span>5</span><span>,</span> <span>6</span><span>,</span> <span>5</span><span>*</span><span>6</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>\"{}*{}={:#&lt;3}\"</span><span>.</span><span>format</span><span>(</span><span>4</span><span>,</span> <span>5</span><span>,</span> <span>20</span><span>)</span><span>)</span> <span># 4*5=20#</span>\n<span>print</span><span>(</span><span>\"{:#^7}\"</span><span>.</span><span>format</span><span>(</span><span>'*'</span> <span>*</span> <span>3</span><span>)</span><span>)</span> <span># ##***##</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"字节序列\"> 字节序列</h2>\n<p>Python3 引入两个新的类型 bytes、bytearray。</p>\n<p>bytes 不可变字节序列；bytearray 是可变字节数组。</p>\n<h3 id=\"编码与解码\"> 编码与解码</h3>\n<ul>\n<li>编码：str =&gt; bytes，将字符串这个字符序列使用指定字符集encode编码为一个个字节组成的序列bytes</li>\n<li>解码：bytes 或 bytearray =&gt; str，将一个个字节按照某种指定的字符集解码为一个个字符串组成的字符串</li>\n</ul>\n<div><pre><code><span>print</span><span>(</span><span>\"abc\"</span><span>.</span>encode<span>(</span><span>)</span><span>)</span> <span># 缺省为utf-8编码</span>\n<span>print</span><span>(</span><span>\"啊\"</span><span>.</span>encode<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>\"啊\"</span><span>.</span>encode<span>(</span><span>'utf-8'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>\"啊\"</span><span>.</span>encode<span>(</span><span>'gbk'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>b'abc'</span><span>.</span>decode<span>(</span><span>'utf8'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>b'\\xb0\\xa1'</span><span>.</span>decode<span>(</span><span>'gbk'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>b'\\xe5\\x95\\x8a'</span><span>.</span>decode<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"ascii\"> ASCII</h3>\n<p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁\n字母的一套单字节编码系统</p>\n<p><em><strong>ASCII控制字符</strong></em></p>\n<table>\n<thead>\n<tr>\n<th>二进制</th>\n<th>十进制</th>\n<th>十六进制</th>\n<th>缩写</th>\n<th>可以显示的表示法</th>\n<th>名称/意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0000 0000</td>\n<td>0</td>\n<td>00</td>\n<td>NUL</td>\n<td>␀</td>\n<td>空字符（Null）</td>\n</tr>\n<tr>\n<td>0000 0001</td>\n<td>1</td>\n<td>01</td>\n<td>SOH</td>\n<td>␁</td>\n<td>标题开始</td>\n</tr>\n<tr>\n<td>0000 0010</td>\n<td>2</td>\n<td>02</td>\n<td>STX</td>\n<td>␂</td>\n<td>本文开始</td>\n</tr>\n<tr>\n<td>0000 0011</td>\n<td>3</td>\n<td>03</td>\n<td>ETX</td>\n<td>␃</td>\n<td>本文结束</td>\n</tr>\n<tr>\n<td>0000 0100</td>\n<td>4</td>\n<td>04</td>\n<td>EOT</td>\n<td>␄</td>\n<td>传输结束</td>\n</tr>\n<tr>\n<td>0000 0101</td>\n<td>5</td>\n<td>05</td>\n<td>ENQ</td>\n<td>␅</td>\n<td>请求</td>\n</tr>\n<tr>\n<td>0000 0110</td>\n<td>6</td>\n<td>06</td>\n<td>ACK</td>\n<td>␆</td>\n<td>确认回应</td>\n</tr>\n<tr>\n<td>0000 0111</td>\n<td>7</td>\n<td>07</td>\n<td>BEL</td>\n<td>␇</td>\n<td>响铃</td>\n</tr>\n<tr>\n<td>0000 1000</td>\n<td>8</td>\n<td>08</td>\n<td>BS</td>\n<td>␈</td>\n<td>退格</td>\n</tr>\n<tr>\n<td>0000 1001</td>\n<td>9</td>\n<td>09</td>\n<td>HT</td>\n<td>␉</td>\n<td>水平定位符号</td>\n</tr>\n<tr>\n<td>0000 1010</td>\n<td>10</td>\n<td>0A</td>\n<td>LF</td>\n<td>␊</td>\n<td>换行键</td>\n</tr>\n<tr>\n<td>0000 1011</td>\n<td>11</td>\n<td>0B</td>\n<td>VT</td>\n<td>␋</td>\n<td>垂直定位符号</td>\n</tr>\n<tr>\n<td>0000 1100</td>\n<td>12</td>\n<td>0C</td>\n<td>FF</td>\n<td>␌</td>\n<td>换页键</td>\n</tr>\n<tr>\n<td>0000 1101</td>\n<td>13</td>\n<td>0D</td>\n<td>CR</td>\n<td>␍</td>\n<td>归位键</td>\n</tr>\n<tr>\n<td>0000 1110</td>\n<td>14</td>\n<td>0E</td>\n<td>SO</td>\n<td>␎</td>\n<td>取消变换（Shift out）</td>\n</tr>\n<tr>\n<td>0000 1111</td>\n<td>15</td>\n<td>0F</td>\n<td>SI</td>\n<td>␏</td>\n<td>启用变换（Shift in）</td>\n</tr>\n<tr>\n<td>0001 0000</td>\n<td>16</td>\n<td>10</td>\n<td>DLE</td>\n<td>␐</td>\n<td>跳出数据通讯</td>\n</tr>\n<tr>\n<td>0001 0001</td>\n<td>17</td>\n<td>11</td>\n<td>DC1</td>\n<td>␑</td>\n<td>设备控制一（XON 启用软件速度控制）</td>\n</tr>\n<tr>\n<td>0001 0010</td>\n<td>18</td>\n<td>12</td>\n<td>DC2</td>\n<td>␒</td>\n<td>设备控制二</td>\n</tr>\n<tr>\n<td>0001 0011</td>\n<td>19</td>\n<td>13</td>\n<td>DC3</td>\n<td>␓</td>\n<td>设备控制三（XOFF 停用软件速度控制）</td>\n</tr>\n<tr>\n<td>0001 0100</td>\n<td>20</td>\n<td>14</td>\n<td>DC4</td>\n<td>␔</td>\n<td>设备控制四</td>\n</tr>\n<tr>\n<td>0001 0101</td>\n<td>21</td>\n<td>15</td>\n<td>NAK</td>\n<td>␕</td>\n<td>确认失败回应</td>\n</tr>\n<tr>\n<td>0001 0110</td>\n<td>22</td>\n<td>16</td>\n<td>SYN</td>\n<td>␖</td>\n<td>同步用暂停</td>\n</tr>\n<tr>\n<td>0001 0111</td>\n<td>23</td>\n<td>17</td>\n<td>ETB</td>\n<td>␗</td>\n<td>区块传输结束</td>\n</tr>\n<tr>\n<td>0001 1000</td>\n<td>24</td>\n<td>18</td>\n<td>CAN</td>\n<td>␘</td>\n<td>取消</td>\n</tr>\n<tr>\n<td>0001 1001</td>\n<td>25</td>\n<td>19</td>\n<td>EM</td>\n<td>␙</td>\n<td>连接介质中断</td>\n</tr>\n<tr>\n<td>0001 1010</td>\n<td>26</td>\n<td>1A</td>\n<td>SUB</td>\n<td>␚</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>0001 1011</td>\n<td>27</td>\n<td>1B</td>\n<td>ESC</td>\n<td>␛</td>\n<td>跳出</td>\n</tr>\n<tr>\n<td>0001 1100</td>\n<td>28</td>\n<td>1C</td>\n<td>FS</td>\n<td>␜</td>\n<td>文件分割符</td>\n</tr>\n<tr>\n<td>0001 1101</td>\n<td>29</td>\n<td>1D</td>\n<td>GS</td>\n<td>␝</td>\n<td>组群分隔符</td>\n</tr>\n<tr>\n<td>0001 1110</td>\n<td>30</td>\n<td>1E</td>\n<td>RS</td>\n<td>␞</td>\n<td>记录分隔符</td>\n</tr>\n<tr>\n<td>0001 1111</td>\n<td>31</td>\n<td>1F</td>\n<td>US</td>\n<td>␟</td>\n<td>单元分隔符</td>\n</tr>\n<tr>\n<td>0111 1111</td>\n<td>127</td>\n<td>7F</td>\n<td>DEL</td>\n<td>␡</td>\n<td>删除</td>\n</tr>\n</tbody>\n</table>\n<p><em><strong>ASCII可显示字符</strong></em></p>\n<table>\n<thead>\n<tr>\n<th>二进制</th>\n<th>十进制</th>\n<th>十六进制</th>\n<th>图形</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0010 0000</td>\n<td>32</td>\n<td>20</td>\n<td>（空格）(␠)</td>\n</tr>\n<tr>\n<td>0010 0001</td>\n<td>33</td>\n<td>21</td>\n<td>!</td>\n</tr>\n<tr>\n<td>0010 0010</td>\n<td>34</td>\n<td>22</td>\n<td>&quot;</td>\n</tr>\n<tr>\n<td>0010 0011</td>\n<td>35</td>\n<td>23</td>\n<td>#</td>\n</tr>\n<tr>\n<td>0010 0100</td>\n<td>36</td>\n<td>24</td>\n<td>$</td>\n</tr>\n<tr>\n<td>0010 0101</td>\n<td>37</td>\n<td>25</td>\n<td>%</td>\n</tr>\n<tr>\n<td>0010 0110</td>\n<td>38</td>\n<td>26</td>\n<td>&amp;</td>\n</tr>\n<tr>\n<td>0010 0111</td>\n<td>39</td>\n<td>27</td>\n<td>'</td>\n</tr>\n<tr>\n<td>0010 1000</td>\n<td>40</td>\n<td>28</td>\n<td>(</td>\n</tr>\n<tr>\n<td>0010 1001</td>\n<td>41</td>\n<td>29</td>\n<td>)</td>\n</tr>\n<tr>\n<td>0010 1010</td>\n<td>42</td>\n<td>2A</td>\n<td>*</td>\n</tr>\n<tr>\n<td>0010 1011</td>\n<td>43</td>\n<td>2B</td>\n<td>+</td>\n</tr>\n<tr>\n<td>0010 1100</td>\n<td>44</td>\n<td>2C</td>\n<td>,</td>\n</tr>\n<tr>\n<td>0010 1101</td>\n<td>45</td>\n<td>2D</td>\n<td>-</td>\n</tr>\n<tr>\n<td>0010 1110</td>\n<td>46</td>\n<td>2E</td>\n<td>.</td>\n</tr>\n<tr>\n<td>0010 1111</td>\n<td>47</td>\n<td>2F</td>\n<td>/</td>\n</tr>\n<tr>\n<td>0011 0000</td>\n<td>48</td>\n<td>30</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0011 0001</td>\n<td>49</td>\n<td>31</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0011 0010</td>\n<td>50</td>\n<td>32</td>\n<td>2</td>\n</tr>\n<tr>\n<td>0011 0011</td>\n<td>51</td>\n<td>33</td>\n<td>3</td>\n</tr>\n<tr>\n<td>0011 0100</td>\n<td>52</td>\n<td>34</td>\n<td>4</td>\n</tr>\n<tr>\n<td>0011 0101</td>\n<td>53</td>\n<td>35</td>\n<td>5</td>\n</tr>\n<tr>\n<td>0011 0110</td>\n<td>54</td>\n<td>36</td>\n<td>6</td>\n</tr>\n<tr>\n<td>0011 0111</td>\n<td>55</td>\n<td>37</td>\n<td>7</td>\n</tr>\n<tr>\n<td>0011 1000</td>\n<td>56</td>\n<td>38</td>\n<td>8</td>\n</tr>\n<tr>\n<td>0011 1001</td>\n<td>57</td>\n<td>39</td>\n<td>9</td>\n</tr>\n<tr>\n<td>0011 1010</td>\n<td>58</td>\n<td>3A</td>\n<td>:</td>\n</tr>\n<tr>\n<td>0011 1011</td>\n<td>59</td>\n<td>3B</td>\n<td>;</td>\n</tr>\n<tr>\n<td>0011 1100</td>\n<td>60</td>\n<td>3C</td>\n<td>&lt;</td>\n</tr>\n<tr>\n<td>0011 1101</td>\n<td>61</td>\n<td>3D</td>\n<td>=</td>\n</tr>\n<tr>\n<td>0011 1110</td>\n<td>62</td>\n<td>3E</td>\n<td>&gt;</td>\n</tr>\n<tr>\n<td>0011 1111</td>\n<td>63</td>\n<td>3F</td>\n<td>?</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>二进制</th>\n<th>十进制</th>\n<th>十六进制</th>\n<th>图形</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0100 0000</td>\n<td>64</td>\n<td>40</td>\n<td>@</td>\n</tr>\n<tr>\n<td>0100 0001</td>\n<td>65</td>\n<td>41</td>\n<td>A</td>\n</tr>\n<tr>\n<td>0100 0010</td>\n<td>66</td>\n<td>42</td>\n<td>B</td>\n</tr>\n<tr>\n<td>0100 0011</td>\n<td>67</td>\n<td>43</td>\n<td>C</td>\n</tr>\n<tr>\n<td>0100 0100</td>\n<td>68</td>\n<td>44</td>\n<td>D</td>\n</tr>\n<tr>\n<td>0100 0101</td>\n<td>69</td>\n<td>45</td>\n<td>E</td>\n</tr>\n<tr>\n<td>0100 0110</td>\n<td>70</td>\n<td>46</td>\n<td>F</td>\n</tr>\n<tr>\n<td>0100 0111</td>\n<td>71</td>\n<td>47</td>\n<td>G</td>\n</tr>\n<tr>\n<td>0100 1000</td>\n<td>72</td>\n<td>48</td>\n<td>H</td>\n</tr>\n<tr>\n<td>0100 1001</td>\n<td>73</td>\n<td>49</td>\n<td>I</td>\n</tr>\n<tr>\n<td>0100 1010</td>\n<td>74</td>\n<td>4A</td>\n<td>J</td>\n</tr>\n<tr>\n<td>0100 1011</td>\n<td>75</td>\n<td>4B</td>\n<td>K</td>\n</tr>\n<tr>\n<td>0100 1100</td>\n<td>76</td>\n<td>4C</td>\n<td>L</td>\n</tr>\n<tr>\n<td>0100 1101</td>\n<td>77</td>\n<td>4D</td>\n<td>M</td>\n</tr>\n<tr>\n<td>0100 1110</td>\n<td>78</td>\n<td>4E</td>\n<td>N</td>\n</tr>\n<tr>\n<td>0100 1111</td>\n<td>79</td>\n<td>4F</td>\n<td>O</td>\n</tr>\n<tr>\n<td>0101 0000</td>\n<td>80</td>\n<td>50</td>\n<td>P</td>\n</tr>\n<tr>\n<td>0101 0001</td>\n<td>81</td>\n<td>51</td>\n<td>Q</td>\n</tr>\n<tr>\n<td>0101 0010</td>\n<td>82</td>\n<td>52</td>\n<td>R</td>\n</tr>\n<tr>\n<td>0101 0011</td>\n<td>83</td>\n<td>53</td>\n<td>S</td>\n</tr>\n<tr>\n<td>0101 0100</td>\n<td>84</td>\n<td>54</td>\n<td>T</td>\n</tr>\n<tr>\n<td>0101 0101</td>\n<td>85</td>\n<td>55</td>\n<td>U</td>\n</tr>\n<tr>\n<td>0101 0110</td>\n<td>86</td>\n<td>56</td>\n<td>V</td>\n</tr>\n<tr>\n<td>0101 0111</td>\n<td>87</td>\n<td>57</td>\n<td>W</td>\n</tr>\n<tr>\n<td>0101 1000</td>\n<td>88</td>\n<td>58</td>\n<td>X</td>\n</tr>\n<tr>\n<td>0101 1001</td>\n<td>89</td>\n<td>59</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>0101 1010</td>\n<td>90</td>\n<td>5A</td>\n<td>Z</td>\n</tr>\n<tr>\n<td>0101 1011</td>\n<td>91</td>\n<td>5B</td>\n<td>[</td>\n</tr>\n<tr>\n<td>0101 1100</td>\n<td>92</td>\n<td>5C</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>0101 1101</td>\n<td>93</td>\n<td>5D</td>\n<td>]</td>\n</tr>\n<tr>\n<td>0101 1110</td>\n<td>94</td>\n<td>5E</td>\n<td>^</td>\n</tr>\n<tr>\n<td>0101 1111</td>\n<td>95</td>\n<td>5F</td>\n<td>_</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>二进制</th>\n<th>十进制</th>\n<th>十六进制</th>\n<th>图形</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0110 0000</td>\n<td>96</td>\n<td>60</td>\n<td>`</td>\n</tr>\n<tr>\n<td>0110 0001</td>\n<td>97</td>\n<td>61</td>\n<td>a</td>\n</tr>\n<tr>\n<td>0110 0010</td>\n<td>98</td>\n<td>62</td>\n<td>b</td>\n</tr>\n<tr>\n<td>0110 0011</td>\n<td>99</td>\n<td>63</td>\n<td>c</td>\n</tr>\n<tr>\n<td>0110 0100</td>\n<td>100</td>\n<td>64</td>\n<td>d</td>\n</tr>\n<tr>\n<td>0110 0101</td>\n<td>101</td>\n<td>65</td>\n<td>e</td>\n</tr>\n<tr>\n<td>0110 0110</td>\n<td>102</td>\n<td>66</td>\n<td>f</td>\n</tr>\n<tr>\n<td>0110 0111</td>\n<td>103</td>\n<td>67</td>\n<td>g</td>\n</tr>\n<tr>\n<td>0110 1000</td>\n<td>104</td>\n<td>68</td>\n<td>h</td>\n</tr>\n<tr>\n<td>0110 1001</td>\n<td>105</td>\n<td>69</td>\n<td>i</td>\n</tr>\n<tr>\n<td>0110 1010</td>\n<td>106</td>\n<td>6A</td>\n<td>j</td>\n</tr>\n<tr>\n<td>0110 1011</td>\n<td>107</td>\n<td>6B</td>\n<td>k</td>\n</tr>\n<tr>\n<td>0110 1100</td>\n<td>108</td>\n<td>6C</td>\n<td>l</td>\n</tr>\n<tr>\n<td>0110 1101</td>\n<td>109</td>\n<td>6D</td>\n<td>m</td>\n</tr>\n<tr>\n<td>0110 1110</td>\n<td>110</td>\n<td>6E</td>\n<td>n</td>\n</tr>\n<tr>\n<td>0110 1111</td>\n<td>111</td>\n<td>6F</td>\n<td>o</td>\n</tr>\n<tr>\n<td>0111 0000</td>\n<td>112</td>\n<td>70</td>\n<td>p</td>\n</tr>\n<tr>\n<td>0111 0001</td>\n<td>113</td>\n<td>71</td>\n<td>q</td>\n</tr>\n<tr>\n<td>0111 0010</td>\n<td>114</td>\n<td>72</td>\n<td>r</td>\n</tr>\n<tr>\n<td>0111 0011</td>\n<td>115</td>\n<td>73</td>\n<td>s</td>\n</tr>\n<tr>\n<td>0111 0100</td>\n<td>116</td>\n<td>74</td>\n<td>t</td>\n</tr>\n<tr>\n<td>0111 0101</td>\n<td>117</td>\n<td>75</td>\n<td>u</td>\n</tr>\n<tr>\n<td>0111 0110</td>\n<td>118</td>\n<td>76</td>\n<td>v</td>\n</tr>\n<tr>\n<td>0111 0111</td>\n<td>119</td>\n<td>77</td>\n<td>w</td>\n</tr>\n<tr>\n<td>0111 1000</td>\n<td>120</td>\n<td>78</td>\n<td>x</td>\n</tr>\n<tr>\n<td>0111 1001</td>\n<td>121</td>\n<td>79</td>\n<td>y</td>\n</tr>\n<tr>\n<td>0111 1010</td>\n<td>122</td>\n<td>7A</td>\n<td>z</td>\n</tr>\n<tr>\n<td>0111 1011</td>\n<td>123</td>\n<td>7B</td>\n<td>{</td>\n</tr>\n<tr>\n<td>0111 1100</td>\n<td>124</td>\n<td>7C</td>\n<td>|</td>\n</tr>\n<tr>\n<td>0111 1101</td>\n<td>125</td>\n<td>7D</td>\n<td>}</td>\n</tr>\n<tr>\n<td>0111 1110</td>\n<td>126</td>\n<td>7E</td>\n<td>~</td>\n</tr>\n</tbody>\n</table>\n<p>熟记：</p>\n<ol>\n<li>\n<p>\\x00 表中第一项，C语言中的字符串结束符</p>\n</li>\n<li>\n<p>\\t \\x09 tab字符</p>\n</li>\n<li>\n<p>\\r\\n \\x0d\\x0a</p>\n</li>\n<li>\n<p>\\x30~\\x39 字符0~9，\\x31 字符1</p>\n</li>\n<li>\n<p>\\x41 65 A</p>\n</li>\n<li>\n<p>\\x61 97 a</p>\n</li>\n</ol>\n<p>注意：这里的1指定是字符1，不是数字1\nUTF-8、GBK都兼容了ASCII</p>\n<h3 id=\"bytes-初始化\"> bytes 初始化</h3>\n<ul>\n<li>bytes() 空bytes</li>\n<li>bytes(int) 指定字节的bytes，被0填充</li>\n<li>bytes(iterable_of_ints) -&gt; bytes [0,255]的int组成的可迭代对象</li>\n<li>bytes(string, encoding[, errors]) -&gt; bytes 等价于string.encode()</li>\n<li>bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer 从一个字节序列或者buffer复制出一个新的不可变的bytes对象</li>\n<li>使用b前缀定义\n<ul>\n<li>只允许基本ASCII使用字符形式 b'abc9'</li>\n<li>使用16进制表示 b&quot;\\x41\\x61&quot;</li>\n</ul>\n</li>\n</ul>\n<p>bytes类型和str类型类似，都是不可变类型，操作方法类似。</p>\n<div><pre><code><span>print</span><span>(</span><span>b'abcd'</span><span>[</span><span>2</span><span>]</span><span>)</span> <span># 返回int，指定是本字节对应的十进制数</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"bytearrary-初始化\"> bytearrary 初始化</h3>\n<ul>\n<li>bytearray() 空bytearray</li>\n<li>bytearray(int) 指定字节的bytearray，被0填充</li>\n<li>bytearray(iterable_of_ints) -&gt; bytearray [0,255]的int组成的可迭代对象</li>\n<li>bytearray(string, encoding[, errors]) -&gt; bytearray 近似string.encode()，不过返回可变对象</li>\n<li>bytearray(bytes_or_buffer) 从一个字节序列或者buffer复制出一个新的可变的bytearray对象</li>\n</ul>\n<p>b前缀表示的是bytes，不是bytearray类型</p>\n<p>由于bytearray类型是可变数组，所以，类似列表。</p>\n<ul>\n<li>append(int) 尾部追加一个元素</li>\n<li>insert(index, int) 在指定索引位置插入元素</li>\n<li>extend(iterable_of_ints) 将一个可迭代的整数集合追加到当前bytearray</li>\n<li>pop(index=-1) 从指定索引上移除元素，默认从尾部移除</li>\n<li>remove(value) 找到第一个value移除，找不到抛ValueError异常</li>\n<li>注意：上述方法若需要使用int类型，值在[0, 255]</li>\n<li>clear() 清空bytearray</li>\n<li>reverse() 翻转bytearray，就地修改</li>\n</ul>\n<div><pre><code>b <span>=</span> <span>bytearray</span><span>(</span><span>)</span>\nb<span>.</span>append<span>(</span><span>97</span><span>)</span>\nb<span>.</span>append<span>(</span><span>99</span><span>)</span>\nb<span>.</span>insert<span>(</span><span>1</span><span>,</span><span>98</span><span>)</span>\nb<span>.</span>extend<span>(</span><span>[</span><span>65</span><span>,</span><span>66</span><span>,</span><span>67</span><span>]</span><span>)</span>\nb<span>.</span>remove<span>(</span><span>66</span><span>)</span>\nb<span>.</span>pop<span>(</span><span>)</span>\nb<span>.</span>reverse<span>(</span><span>)</span>\n<span>print</span><span>(</span>b<span>)</span> <span># 输出什么  bytearray(b'Acba')</span>\nb<span>.</span>clear<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"线性结构\"> 线性结构</h2>\n<p>线性结构特征：</p>\n<ul>\n<li>可迭代 for ... in</li>\n<li>有长度，通过len(x)获取，容器</li>\n<li>通过整数下标可以访问元素。正索引、负索引\n<ul>\n<li>可以切片</li>\n</ul>\n</li>\n</ul>\n<p>已经学习过的线性结构：list、tuple、str、bytes、bytearray</p>\n<h3 id=\"切片\"> 切片</h3>\n<div><pre><code>sequence<span>[</span>start<span>:</span>stop<span>]</span>\nsequence<span>[</span>start<span>:</span>stop<span>:</span>step<span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ul>\n<li>通过给定的索引区间获得线性结构的一部分数据</li>\n<li>start、stop、step为整数，可以是正整数、负整数、零</li>\n<li>start为0时，可以省略</li>\n<li>stop为末尾时，可以省略</li>\n<li>step为1时，可以省略</li>\n<li>切片时，索引超过上界（右边界），就取到末尾；超过下界（左边界），取到开头</li>\n</ul>\n<div><pre><code>x <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>,</span> <span>7</span><span>,</span> <span>8</span><span>,</span> <span>9</span><span>]</span>\n<span>print</span><span>(</span>x<span>[</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>:</span><span>-</span><span>1</span><span>]</span><span>)</span> <span>#</span>\n<span>print</span><span>(</span>x<span>[</span><span>0</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>3</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>3</span><span>:</span><span>-</span><span>1</span><span>]</span><span>)</span> <span>#</span>\n<span>print</span><span>(</span>x<span>[</span><span>9</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>:</span><span>9</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>9</span><span>:</span><span>-</span><span>1</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>:</span><span>100</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>-</span><span>100</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>4</span><span>:</span><span>-</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>-</span><span>4</span><span>:</span><span>-</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'0123456789'</span><span>[</span><span>-</span><span>4</span><span>:</span><span>8</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>b'0123456789'</span><span>[</span><span>-</span><span>4</span><span>:</span><span>8</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>bytearray</span><span>(</span><span>b'0123456789'</span><span>)</span><span>[</span><span>-</span><span>10</span><span>:</span><span>5</span><span>]</span><span>)</span>\n\n<span># 步长</span>\nx <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>,</span> <span>7</span><span>,</span> <span>8</span><span>,</span> <span>9</span><span>]</span>\n<span>print</span><span>(</span>x<span>[</span><span>:</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>:</span><span>:</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>2</span><span>:</span><span>8</span><span>:</span><span>3</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>:</span><span>9</span><span>:</span><span>3</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>1</span><span>:</span><span>:</span><span>3</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>-</span><span>10</span><span>:</span><span>8</span><span>:</span><span>2</span><span>]</span><span>)</span>\n\n<span># 起止和方向</span>\nx <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>,</span> <span>7</span><span>,</span> <span>8</span><span>,</span> <span>9</span><span>]</span>\n<span>print</span><span>(</span>x<span>[</span><span>-</span><span>10</span><span>:</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>-</span><span>5</span><span>:</span><span>6</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>-</span><span>5</span><span>:</span><span>-</span><span>6</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>6</span><span>:</span><span>5</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>5</span><span>:</span><span>5</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>1</span><span>:</span><span>9</span><span>:</span><span>-</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>:</span><span>:</span><span>-</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>8</span><span>:</span><span>:</span><span>-</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>8</span><span>:</span><span>2</span><span>:</span><span>-</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>8</span><span>:</span><span>-</span><span>10</span><span>:</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>8</span><span>:</span><span>-</span><span>10</span><span>:</span><span>-</span><span>2</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>-</span><span>5</span><span>:</span><span>4</span><span>:</span><span>-</span><span>1</span><span>]</span><span>)</span>\n<span>print</span><span>(</span>x<span>[</span><span>-</span><span>5</span><span>:</span><span>5</span><span>:</span><span>-</span><span>1</span><span>]</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><p>在序列上使用切片[start:stop]，子区间索引范围[start, stop)，相当于从start开始指向stop的方向上获\n取数据</p>\n<p>默认step为1，表示向右；步长为负数，表示向左</p>\n<p>如果子区间方向和步长方向不一致，直接返回当前类型的&quot;空对象&quot;</p>\n<p>如果子区间方向和步长方向一致，则从起点间隔步长取值</p>\n<table>\n<thead>\n<tr>\n<th>内建函数</th>\n<th>函数签名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>id(object)</td>\n<td>CPython中返回对象的内存地址<br/>可以用来判断是不是同一个对象</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span># 使用id看地址，要注意地址回收复用问题</span>\n<span>print</span><span>(</span><span>id</span><span>(</span><span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>id</span><span>(</span><span>[</span><span>4</span><span>,</span><span>5</span><span>,</span><span>6</span><span>,</span><span>7</span><span>]</span><span>)</span><span>)</span>\n<span># 上下两句可能内存地址一样，但是上面那个[1,2,3]没有意义，因为它用完之后，引用计数为0了，没人能再次访问到，释放了内存</span>\n<span># 如果2个存在在内存中的对象，地址一样一定是同一个对象</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>x <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>]</span>\ny <span>=</span> x<span>[</span><span>:</span><span>]</span>\n<span>print</span><span>(</span>x<span>,</span> y<span>)</span>\n<span>print</span><span>(</span><span>id</span><span>(</span>x<span>)</span><span>,</span> <span>id</span><span>(</span>y<span>)</span><span>)</span>\nx<span>[</span><span>0</span><span>]</span> <span>=</span> <span>100</span>\n<span>print</span><span>(</span>x<span>,</span> y<span>)</span>\n\nx <span>=</span> <span>[</span><span>[</span><span>1</span><span>]</span><span>]</span>\ny <span>=</span> x<span>[</span><span>:</span><span>]</span>\n<span>print</span><span>(</span>x<span>,</span> y<span>)</span>\n<span>print</span><span>(</span>x <span>==</span> y<span>)</span> <span># True</span>\n<span>print</span><span>(</span><span>id</span><span>(</span>x<span>)</span><span>,</span> <span>id</span><span>(</span>y<span>)</span><span>,</span> x <span>is</span> y<span>)</span> <span># False</span>\nx<span>[</span><span>0</span><span>]</span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>100</span>\n<span>print</span><span>(</span>x<span>,</span> y<span>)</span>\n<span>print</span><span>(</span>x <span>==</span> y<span>)</span> <span># True</span>\n<span>print</span><span>(</span>x <span>is</span> y<span>)</span> <span># False</span>\nx<span>[</span><span>0</span><span>]</span> <span>=</span> <span>200</span>\n<span>print</span><span>(</span>x <span>==</span> y<span>)</span> <span># False</span>\n<span>print</span><span>(</span>x<span>,</span> y<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>上例可知，实际上切片后得到一个全新的对象。 [:] 或 [::] 相当于copy方法。</p>\n<h3 id=\"切片赋值\"> 切片赋值</h3>\n<ul>\n<li>切片操作写在了等号左边</li>\n<li>被插入的可迭代对象写在等号右边</li>\n</ul>\n<div><pre><code>x <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>]</span>\nz <span>=</span> <span>None</span>\nz <span>=</span> <span>1</span>\nz<span>[</span><span>:</span><span>]</span> <span>=</span> x <span># 可以吗 不可以 TypeError: 'int' object does not support item assignment</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code>x <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span>\nz <span>=</span> <span>list</span><span>(</span><span>)</span>\nz<span>[</span><span>:</span><span>]</span> <span>=</span> x\nz<span>[</span><span>1</span><span>:</span><span>2</span><span>]</span> <span>=</span> <span>10</span> <span># 可以吗？ 不可以 TypeError: can only assign an iterable</span>\nz<span>[</span><span>1</span><span>:</span><span>2</span><span>]</span> <span>=</span> <span>(</span><span>10</span><span>,</span><span>)</span>\nz<span>[</span><span>3</span><span>:</span><span>]</span> <span>=</span> <span>(</span><span>20</span><span>,</span><span>)</span>\nz<span>[</span><span>1</span><span>:</span><span>]</span> <span>=</span> <span>(</span><span>40</span><span>,</span> <span>50</span> <span>,</span><span>60</span><span>,</span> <span>70</span><span>)</span>\nz<span>[</span><span>1</span><span>:</span><span>-</span><span>1</span><span>]</span> <span>=</span> <span>(</span><span>)</span>\nx <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span>\ny <span>=</span> <span>[</span><span>]</span>\ny<span>[</span><span>:</span><span>]</span> <span>=</span> x\n<span>print</span><span>(</span>x <span>==</span> y<span>)</span>\n<span>print</span><span>(</span><span>id</span><span>(</span>x<span>)</span><span>,</span> <span>id</span><span>(</span>y<span>)</span><span>,</span> x <span>is</span> y<span>)</span>\nm <span>=</span> x <span># 这一句有什么用？y[:] = x有什么用？</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>m 和 x它们两个变量指向同一个对象。</p>\n<p>y=[]、y[:]=x 等价于  z=x[:] ，都是创建x的副本。</p>\n<p>切片赋值用作初始化相当于copy，还可以使用。如果用在替换、插入元素，看似语法比较简洁，但是由\n于列表是顺序表结构，将会引起数据的挪动，这非常影响性能，应当尽量避免使用。</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "11 魔术方法",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-magic/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-magic/",
      "content_html": "<h1 id=\"_11-魔术方法\"> 11 魔术方法</h1>\n<h2 id=\"实例化\"> 实例化</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__new__</code></td>\n<td>实例化一个对象<br/>该方法需要返回一个值，如果该值不是 cls 的实例，则不会调用 <code>__init__</code><br/>该方法永远都是静态方法</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__new__</span><span>(</span>cls<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>print</span><span>(</span>cls<span>)</span>\n        <span>print</span><span>(</span>args<span>)</span>\n        <span>print</span><span>(</span>kwargs<span>)</span>\n        <span>#return super().__new__(cls)</span>\n        <span>#return 1</span>\n        <span>return</span> <span>None</span>\n\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n        \na <span>=</span> A<span>(</span><span>)</span>\n<span>print</span><span>(</span>a<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p><code>__new__</code> 方法很少使用，即使创建了该方法，也会使用 <code>return super().__new__(cls)</code> 基类object的\n<code>__new__</code> 方法来创建实例并返回。</p>\n<h2 id=\"可视化\"> 可视化</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__str__</code></td>\n<td>str()函数、format()函数、print()函数调用，需要返回对象的字符串表达。如果没<br/>有定义，就去调用<code>__repr__</code> 方法返回字符串表达，如果 <code>__repr__</code> 没有定义，就直接返回对象的内存地址信息</td>\n</tr>\n<tr>\n<td><code>__repr__</code></td>\n<td>内建函数repr()对一个对象获取字符串表达。<br/>调用 <code>__repr__</code> 方法返回字符串表达，如果 <code>__repr__</code> 也没有定义，就直接返回 object 的定义就是显示内存地址信息</td>\n</tr>\n<tr>\n<td><code>__bytes__</code></td>\n<td>bytes() 函数调用，返回一个对象的 bytes 表达，即返回 bytes 对象</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>=</span><span>18</span><span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n        self<span>.</span>age <span>=</span> age\n\n    <span>def</span> <span>__repr__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> <span>'repr: {},{}'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>name<span>,</span> self<span>.</span>age<span>)</span>\n\n    <span>def</span> <span>__str__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> <span>'str: {},{}'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>name<span>,</span> self<span>.</span>age<span>)</span>\n\n    <span>def</span> <span>__bytes__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>#return \"{} is {}\".format(self.name, self.age).encode()</span>\n        <span>import</span> json\n        <span>return</span> json<span>.</span>dumps<span>(</span>self<span>.</span>__dict__<span>)</span><span>.</span>encode<span>(</span><span>)</span>\n    \n<span>print</span><span>(</span>A<span>(</span><span>'tom'</span><span>)</span><span>)</span> <span># print函数使用__str__</span>\n<span>print</span><span>(</span><span>'{}'</span><span>.</span><span>format</span><span>(</span>A<span>(</span><span>'tom'</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>[</span>A<span>(</span><span>'tom'</span><span>)</span><span>]</span><span>)</span> <span># []使用__str__，但其内部使用__repr__</span>\n<span>print</span><span>(</span><span>[</span><span>str</span><span>(</span>A<span>(</span><span>'tom'</span><span>)</span><span>)</span><span>]</span><span>)</span> <span># []使用__str__，其中的元素使用str()函数也调用__str__</span>\n<span>print</span><span>(</span><span>bytes</span><span>(</span>A<span>(</span><span>'tom'</span><span>)</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id=\"hash\"> hash</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__hash__</code></td>\n<td>内建函数 hash() 调用的返回值，返回一个整数。如果定义这个方法该类的实例就<br/>可hash。</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>print</span><span>(</span><span>hash</span><span>(</span><span>1</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>hash</span><span>(</span><span>'tom'</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>hash</span><span>(</span><span>(</span><span>'tom'</span><span>,</span><span>)</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>=</span><span>18</span><span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n\n    <span>def</span> <span>__hash__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> <span>1</span>\n\n    <span>def</span> <span>__repr__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>name\n\n<span>print</span><span>(</span><span>hash</span><span>(</span>A<span>(</span><span>'tom'</span><span>)</span><span>)</span><span>)</span> <span># 可hash 1</span>\n<span>print</span><span>(</span><span>(</span>A<span>(</span><span>'tom'</span><span>)</span><span>,</span> A<span>(</span><span>'tom'</span><span>)</span><span>)</span><span>)</span> <span># (tom, tom)</span>\n<span>print</span><span>(</span><span>[</span>A<span>(</span><span>'tom'</span><span>)</span><span>,</span> A<span>(</span><span>'tom'</span><span>)</span><span>]</span><span>)</span> <span># [tom, tom]</span>\n<span>print</span><span>(</span><span>'~~~~~~~~~~~~~~~~~~~~'</span><span>)</span>\n<span>print</span><span>(</span><span>{</span><span>1</span><span>,</span> <span>1</span><span>}</span><span>)</span> <span># {1}</span>\n<span>print</span><span>(</span><span>{</span><span>'tom'</span><span>,</span> <span>'tom'</span><span>}</span><span>)</span> <span># {'tom'}</span>\na1 <span>=</span> A<span>(</span><span>'tom'</span><span>)</span>\na2 <span>=</span> A<span>(</span><span>'tom'</span><span>)</span>\ns <span>=</span> <span>{</span>a1<span>,</span> a2<span>}</span> <span># set</span>\n<span>print</span><span>(</span>s<span>)</span> <span># 去重了吗 没有 {tom, tom}</span>\n<span>print</span><span>(</span><span>hash</span><span>(</span>a1<span>)</span><span>,</span> <span>hash</span><span>(</span>a2<span>)</span><span>)</span> <span># 1, 1</span>\nt1 <span>=</span> <span>(</span><span>'tom'</span><span>,</span><span>)</span>\nt2 <span>=</span> <span>(</span><span>'tom'</span><span>,</span><span>)</span>\n<span>print</span><span>(</span>t1 <span>is</span> t2<span>)</span> <span># 3.7+是True，3.6及以下是False</span>\n<span>print</span><span>(</span>t1 <span>==</span> t2<span>)</span> <span># True</span>\n<span>print</span><span>(</span><span>{</span>t1<span>,</span> t2<span>}</span><span>,</span> <span>hash</span><span>(</span>t1<span>)</span><span>,</span> <span>hash</span><span>(</span>t2<span>)</span><span>)</span> <span>#(tom,)</span>\n<span>print</span><span>(</span><span>{</span><span>(</span><span>'tom'</span><span>,</span><span>)</span><span>,</span> <span>(</span><span>'tom'</span><span>,</span><span>)</span><span>}</span><span>)</span>\n<span>print</span><span>(</span><span>{</span><span>'tom'</span><span>,</span> <span>'tom'</span><span>}</span><span>)</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>上例中， A的实例放在set中，它们hash值是相同的，为什么不能去重？\nhash值相同就会去重吗？</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>=</span><span>18</span><span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n\n    <span>def</span> <span>__hash__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> <span>1</span>\n\n    <span>def</span> <span>__eq__</span><span>(</span>self<span>,</span> other<span>)</span><span>:</span> <span># 这个函数作用？</span>\n        <span>return</span> self<span>.</span>name <span>==</span> other<span>.</span>name\n\n    <span>def</span> <span>__repr__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>name\n\n<span>print</span><span>(</span><span>hash</span><span>(</span>A<span>(</span><span>'tom'</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>(</span>A<span>(</span><span>'tom'</span><span>)</span><span>,</span> A<span>(</span><span>'tom'</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>[</span>A<span>(</span><span>'tom'</span><span>)</span><span>,</span> A<span>(</span><span>'tom'</span><span>)</span><span>]</span><span>)</span>\n<span>print</span><span>(</span><span>'~~~~~~~~~~~~~~~~~~~~'</span><span>)</span>\ns <span>=</span> <span>{</span>A<span>(</span><span>'tom'</span><span>)</span><span>,</span> A<span>(</span><span>'tom'</span><span>)</span><span>}</span> <span># set</span>\n<span>print</span><span>(</span>s<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__eq__</code></td>\n<td>对应==操作符，判断2个对象内容是否相等，返回bool值<br/>定义了这个方法，如果不提供 <code>__hash__</code> 方法，那么实例将不可hash了</td>\n</tr>\n</tbody>\n</table>\n<p><code>__hash__</code> 方法只是返回一个hash值作为set的key，但是 去重 ，还需要 <code>__eq__</code> 来判断2个对象是否相等。\nhash值相等，只是hash冲突，不能说明两个对象是相等的。</p>\n<p>因此，一般来说提供 <code>__hash__</code> 方法是为了作为set或者dict的key，如果 去重 要同时提供 <code>__eq__</code> 方法。</p>\n<p>不可 hash 对象 isinstance(p1, collections.Hashable) 一定为 False。\n去重 需要提供 <code>__eq__</code> 方法。</p>\n<p><strong>思考：</strong>\nlist类实例为什么不可hash？</p>\n<p>源码中有一句 <code>__hash__ = None</code>，也就是如果调用 <code>__hash__ ()</code>相当于None()，一定报错。\n所有类都继承object，而这个类是具有 <code>__hash__ ()</code>方法的，如果一个类不能被hash，就把 <code>__hash__</code> 设置为None。</p>\n<h2 id=\"bool\"> bool</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__bool__</code></td>\n<td>内建函数bool()，或者对象放在逻辑表达式的位置，调用这个函数返回布尔值。<br/>没有定义 <code>__bool__</code> ()，就找 <code>__len__</code> ()返回长度，非0为真。<br/>如果 <code>__len__</code> ()也没有定义，那么所有实例都返回真</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>class</span> <span>A</span><span>:</span> <span>pass</span>\na <span>=</span> A<span>(</span><span>)</span>\n\n<span>print</span><span>(</span><span>bool</span><span>(</span>A<span>)</span><span>)</span> <span># True</span>\n<span>print</span><span>(</span><span>bool</span><span>(</span>a<span>)</span><span>)</span> <span>#True</span>\n\n<span>class</span> <span>B</span><span>:</span>\n    <span>def</span> <span>__bool__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> <span>False</span>\n\n<span>print</span><span>(</span><span>bool</span><span>(</span>B<span>)</span><span>)</span> <span># True</span>\n<span>print</span><span>(</span><span>bool</span><span>(</span>B<span>(</span><span>)</span><span>)</span><span>)</span> <span># False</span>\n\n<span>if</span> B<span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'Real B instance'</span><span>)</span>\n\n<span>class</span> <span>C</span><span>:</span>\n    <span>def</span> <span>__len__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> <span>0</span>\n\n<span>print</span><span>(</span><span>bool</span><span>(</span>C<span>)</span><span>)</span> <span># True</span>\n<span>print</span><span>(</span><span>bool</span><span>(</span>C<span>(</span><span>)</span><span>)</span><span>)</span> <span># False</span>\n\n<span>if</span> C<span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'Real C instance'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id=\"运算符重载\"> 运算符重载</h2>\n<p>operator 模块提供以下的特殊方法，可以将类的实例使用下面的操作符来操作</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>特殊方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;, &lt;=, ==, &gt;,<br/>&gt;=, !=</td>\n<td><code>__lt__</code>,<code>__le__</code>,<code>__eq__</code>,<code>__gt__</code>,<code>__ge__</code>,<code>__ne__</code></td>\n<td>比较运算符</td>\n</tr>\n<tr>\n<td>+, -, *, /, %,<br/>//, **,<br/>divmod</td>\n<td><code>__add__</code>,<code>__sub__</code>,<code>__mul__</code>,<code>__truediv__</code>,<br/><code>__mod__</code>,<code>__floordiv__</code>,<code>__pow__</code>,<code>__divmod__</code></td>\n<td>算数运算符，移位、<br/>位运算也有对应的方<br/>法</td>\n</tr>\n<tr>\n<td>+=, -=, *=,<br/>/=, %=, //=,<br/>**=</td>\n<td><code>__iadd__</code>,<code>__isub__</code>,<code>__imul__</code>,<code>__itruediv__</code>,<br/><code>__imod__</code>,<code>__ifloordiv__</code>,<code>__ipow__</code>,</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>实现自定义类的实例的大小比较（非常重要，排序时使用）</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>=</span><span>18</span><span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n        self<span>.</span>age <span>=</span> age\n\n    <span>def</span> <span>__eq__</span><span>(</span>self<span>,</span> other<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>name <span>==</span> other<span>.</span>name <span>and</span> self<span>.</span>age <span>==</span> other<span>.</span>age\n\n    <span>def</span> <span>__gt__</span><span>(</span>self<span>,</span> other<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>age <span>></span> other<span>.</span>age\n\n    <span>def</span> <span>__ge__</span><span>(</span>self<span>,</span> other<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>age <span>>=</span> other<span>.</span>age\n\ntom <span>=</span> A<span>(</span><span>'tom'</span><span>)</span>\njerry <span>=</span> A<span>(</span><span>'jerry'</span><span>,</span> <span>16</span><span>)</span>\n<span>print</span><span>(</span>tom <span>==</span> jerry<span>,</span> tom <span>!=</span> jerry<span>)</span>\n<span>print</span><span>(</span>tom <span>></span> jerry<span>,</span> tom <span>&lt;</span> jerry<span>)</span>\n<span>print</span><span>(</span>tom <span>>=</span> jerry<span>,</span> tom <span>&lt;=</span> jerry<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p><code>__eq__</code> 等于可以推断不等于\n<code>__gt__</code> 大于可以推断小于\n<code>__ge__</code> 大于等于可以推断小于等于\n也就是用3个方法，就可以把所有比较解决了</p>\n<p>实现两个学生的成绩差</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> score<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n        self<span>.</span>score <span>=</span> score\n\ntom <span>=</span> A<span>(</span><span>'tom'</span><span>,</span> <span>80</span><span>)</span>\njerry <span>=</span> A<span>(</span><span>'jerry'</span><span>,</span> <span>85</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>score <span>-</span> jerry<span>.</span>score<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> score<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n        self<span>.</span>score <span>=</span> score\n\n    <span>def</span> <span>__sub__</span><span>(</span>self<span>,</span> other<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>score <span>-</span> other<span>.</span>score\n\ntom <span>=</span> A<span>(</span><span>'tom'</span><span>,</span> <span>80</span><span>)</span>\njerry <span>=</span> A<span>(</span><span>'jerry'</span><span>,</span> <span>85</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>score <span>-</span> jerry<span>.</span>score<span>)</span>\n\n<span>print</span><span>(</span>tom <span>-</span> jerry<span>)</span>\n<span>print</span><span>(</span><span>'~~~~~~~~~~~~~~~~~~~~~~~~~~~'</span><span>)</span>\njerry <span>-=</span> tom <span># 调用什么</span>\n<span>print</span><span>(</span>tom<span>)</span>\n<span>print</span><span>(</span>jerry<span>)</span> <span># 显示什么 5</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> score<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n        self<span>.</span>score <span>=</span> score\n\n    <span>def</span> <span>__sub__</span><span>(</span>self<span>,</span> other<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>score <span>-</span> other<span>.</span>score\n\n    <span>def</span> <span>__isub__</span><span>(</span>self<span>,</span> other<span>)</span><span>:</span>\n        <span>#return A(self.name, self.score - other.score)</span>\n        self<span>.</span>score <span>-=</span> other<span>.</span>score\n        <span>return</span> self\n    \n    <span>def</span> <span>__repr__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> <span>\"&lt;A name={}, score={}>\"</span><span>.</span><span>format</span><span>(</span>self<span>.</span>name<span>,</span> self<span>.</span>score<span>)</span>\n\ntom <span>=</span> A<span>(</span><span>'tom'</span><span>,</span> <span>80</span><span>)</span>\njerry <span>=</span> A<span>(</span><span>'jerry'</span><span>,</span> <span>85</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>score <span>-</span> jerry<span>.</span>score<span>)</span>\n<span>print</span><span>(</span>tom <span>-</span> jerry<span>)</span>\n<span>print</span><span>(</span><span>'~~~~~~~~~~~~~~~~~~~~~~~~~~~'</span><span>)</span>\njerry <span>-=</span> tom <span># 调用什么</span>\n<span>print</span><span>(</span>tom<span>)</span>\n<span>print</span><span>(</span>jerry<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>思考：list的+和+=的区别。tuple呢？</p>\n<h2 id=\"上下文管理\"> 上下文管理</h2>\n<p>文件 IO 操作可以对文件对象使用上下文管理，使用 with...as 语法。</p>\n<div><pre><code><span>with</span> <span>open</span><span>(</span><span>'test'</span><span>)</span> <span>as</span> f<span>:</span>\n\t<span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>仿照上例写一个自己的类，实现上下文管理</p>\n<div><pre><code><span>class</span> <span>Point</span><span>:</span>\n\t<span>pass</span>\n\n<span>with</span> Point<span>(</span><span>)</span> <span>as</span> p<span>:</span> <span># AttributeError: __exit__</span>\n\t<span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>提示属性错误，没有 <code>__exit__</code> ，看了需要这个属性\n某些版本会显示没有 <code>__enter__</code></p>\n<h3 id=\"上下文管理对象\"> 上下文管理对象</h3>\n<p>当一个对象同时实现了 <code>__enter__</code>()和 <code>__exit__</code> ()方法，它就属于上下文管理的对象</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__enter__</code></td>\n<td>进入与此对象相关的上下文。如果存在该方法，with 语法会把该方法的返回值作<br/>为绑定到 as 子句中指定的变量上</td>\n</tr>\n<tr>\n<td><code>__exit__</code></td>\n<td>退出与此对象相关的上下文</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>import</span> time\n\n<span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'init ~~~~~~~~'</span><span>)</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'init over'</span><span>)</span>\n\n    <span>def</span> <span>__enter__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'enter ~~~~~~~~'</span><span>)</span>\n\n    <span>def</span> <span>__exit__</span><span>(</span>self<span>,</span> exc_type<span>,</span> exc_val<span>,</span> exc_tb<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'exit ============'</span><span>)</span>\n\n<span>with</span> Point<span>(</span><span>)</span> <span>as</span> p<span>:</span>\n    <span>print</span><span>(</span><span>'in with-------------'</span><span>)</span>\n\n    time<span>.</span>sleep<span>(</span><span>2</span><span>)</span>\n    <span>print</span><span>(</span><span>'with over'</span><span>)</span>\n\n<span>print</span><span>(</span><span>'=======end=========='</span><span>)</span>\n\n<span># 输出结果为</span>\ninit <span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span>\ninit over\nenter <span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span>\n<span>in</span> <span>with</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span>\n<span>with</span> over\nexit <span>==</span><span>==</span><span>==</span><span>==</span><span>==</span><span>==</span>\n<span>==</span><span>==</span><span>==</span><span>=</span>end<span>==</span><span>==</span><span>==</span><span>==</span><span>==</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>实例化对象的时候，并不会调用enter，进入with语句块调用 <code>__enter__</code> 方法，然后执行语句体，最后离开 with 语句块的时候，调用 <code>__exit__</code> 方法。</p>\n<p>with 可以开启一个上下文运行环境，在执行前做一些准备工作，执行后做一些收尾工作。</p>\n<p>注意，with并不开启一个新的作用域。</p>\n<h3 id=\"上下文管理的安全性\"> 上下文管理的安全性</h3>\n<div><pre><code><span>import</span> time\n\n<span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'init ~~~~~~~~'</span><span>)</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'init over'</span><span>)</span>\n\n    <span>def</span> <span>__enter__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'enter ~~~~~~~~'</span><span>)</span>\n\n    <span>def</span> <span>__exit__</span><span>(</span>self<span>,</span> exc_type<span>,</span> exc_val<span>,</span> exc_tb<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'exit ============'</span><span>)</span>\n\n<span>with</span> Point<span>(</span><span>)</span> <span>as</span> p<span>:</span>\n    <span>print</span><span>(</span><span>'in with-------------'</span><span>)</span>\n    <span>raise</span> Exception<span>(</span><span>'error'</span><span>)</span>\n    time<span>.</span>sleep<span>(</span><span>2</span><span>)</span>\n    <span>print</span><span>(</span><span>'with over'</span><span>)</span>\n    \n<span>print</span><span>(</span><span>'=======end=========='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>可以看出在抛出异常的情况下，with的<code>__exit__</code>照样执行，<strong>上下文管理是安全的</strong>。</p>\n<h3 id=\"with-语句\"> with 语句</h3>\n<div><pre><code><span># t3.py文件中写入下面代码</span>\n<span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'init'</span><span>)</span>\n\n    <span>def</span> <span>__enter__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'enter'</span><span>)</span>\n\n    <span>def</span> <span>__exit__</span><span>(</span>self<span>,</span> exc_type<span>,</span> exc_val<span>,</span> exc_tb<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'exit'</span><span>)</span>\n\nf <span>=</span> <span>open</span><span>(</span><span>'t3.py'</span><span>)</span>\n<span>with</span> f <span>as</span> p<span>:</span>\n    <span>print</span><span>(</span>f<span>)</span>\n    <span>print</span><span>(</span>p<span>)</span>\n    <span>print</span><span>(</span>f <span>is</span> p<span>)</span> <span># 打印什么 True</span>\n    <span>print</span><span>(</span>f <span>==</span> p<span>)</span> <span># 打印什么 True</span>\n\np <span>=</span> f <span>=</span> <span>None</span>\np <span>=</span> Point<span>(</span><span>)</span>\n<span>with</span> p <span>as</span> f<span>:</span>\n    <span>print</span><span>(</span><span>'in with-------------'</span><span>)</span>\n    <span>print</span><span>(</span>p <span>==</span> f<span>)</span>\n    <span>print</span><span>(</span><span>'with over'</span><span>)</span>\n\n<span>print</span><span>(</span><span>'=======end=========='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>问题在于 <code>__enter__</code> 方法上，它将自己的返回值赋给f。修改上例</p>\n<div><pre><code><span># t3.py文件中写入下面代码</span>\n<span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'init'</span><span>)</span>\n\n    <span>def</span> <span>__enter__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'enter'</span><span>)</span>\n        <span>return</span> self\n\n    <span>def</span> <span>__exit__</span><span>(</span>self<span>,</span> exc_type<span>,</span> exc_val<span>,</span> exc_tb<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'exit'</span><span>)</span>\np <span>=</span> f <span>=</span> <span>None</span>\np <span>=</span> Point<span>(</span><span>)</span>\n<span>with</span> p <span>as</span> f<span>:</span>\n    <span>print</span><span>(</span><span>'in with-------------'</span><span>)</span>\n    <span>print</span><span>(</span>p <span>==</span> f<span>)</span>\n    <span>print</span><span>(</span><span>'with over'</span><span>)</span>\n\n<span>print</span><span>(</span><span>'=======end=========='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>with 语法，会调用 with 后的对象的<code>__enter__</code>方法，如果有 as，则将该方法的返回值赋给 as 子句的变量</p>\n<p>上例，可以等价为<code>f = p.__enter__()</code></p>\n<h3 id=\"上下文应用场景\"> 上下文应用场景</h3>\n<ol>\n<li>增强功能\n在代码执行的前后增加代码，以增强其功能。类似装饰器的功能。</li>\n<li>资源管理\n打开了资源需要关闭，例如文件对象、网络连接、数据库连接等</li>\n<li>权限验证\n在执行代码之前，做权限的验证，在<code>__enter__</code> 中处理</li>\n</ol>\n<h3 id=\"生成器函数\"> 生成器函数</h3>\n<div><pre><code><span># 生成器函数 # 调用后返回什么呢？生成器对象（生成器表达式、生成器函数），惰性求值</span>\n<span># 在一个函数定义中，出现了yield语句，此函数就是生成器函数</span>\n<span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span>\n\t<span>while</span> <span>True</span><span>:</span>\n\t\t<span>yield</span> <span>1</span>\n<span># 无限可迭代对象</span>\nf <span>=</span> foo<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"contextlib-contextmanager\"> contextlib.contextmanager</h3>\n<p>contextlib.contextmanager 它是一个装饰器实现上下文管理，装饰一个函数，而不用像类一样实现<code>__enter__</code> 和 <code>__exit__</code> 方法。</p>\n<p>对下面的函数有要求：必须有yield，也就是这个函数必须返回一个生成器，且只有yield一个值。</p>\n<p>也就是这个装饰器接收一个生成器对象作为参数。</p>\n<div><pre><code><span>import</span> contextlib\n\n<span>@contextlib<span>.</span>contextmanager</span>\n<span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span> <span>#</span>\n    <span>print</span><span>(</span><span>'enter'</span><span>)</span> <span># 相当于__enter__()</span>\n    <span>yield</span> <span># yield 5，yield的值只能有一个，相当于作为__enter__方法的返回值</span>\n    <span>print</span><span>(</span><span>'exit'</span><span>)</span> <span># 相当于__exit__()</span>\n\n<span>with</span> foo<span>(</span><span>)</span> <span>as</span> f<span>:</span>\n    <span>#raise Exception()</span>\n    <span>print</span><span>(</span>f<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>f 接收 yield 语句的返回值。</p>\n<p>上面的程序看似不错但是，增加一个异常试一试，发现不能保证 exit 的执行，怎么办？\n增加 try finally。</p>\n<div><pre><code><span>import</span> contextlib\n\n<span>@contextlib<span>.</span>contextmanager</span>\n<span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span> <span>#</span>\n    <span>print</span><span>(</span><span>'enter'</span><span>)</span> <span># 相当于__enter__()</span>\n    <span>try</span><span>:</span>\n        <span>yield</span> <span># yield 5，yield的值只能有一个，相当于作为__enter__方法的返回值</span>\n    <span>finally</span><span>:</span>\n        <span>print</span><span>(</span><span>'exit'</span><span>)</span> <span># 相当于__exit__()</span>\n\n<span>with</span> foo<span>(</span><span>)</span> <span>as</span> f<span>:</span>\n    <span>raise</span> Exception<span>(</span><span>)</span>\n    <span>print</span><span>(</span>f<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>上例这么做有什么意义呢？\n当 yield 发生处为生成器函数增加了上下文管理。这是为函数增加上下文机制的方式。</p>\n<ul>\n<li>把 yield 之前的当做<code>__enter__</code>方法执行</li>\n<li>把 yield 之后的当做<code>__exit__</code>方法执行</li>\n<li>把 yield 的值作为<code>__enter__</code>的返回值</li>\n</ul>\n<p>练习：为add函数计时</p>\n<div><pre><code><span>import</span> contextlib\n<span>import</span> datetime\n<span>import</span> time\n\n<span>@contextlib<span>.</span>contextmanager</span>\n<span>def</span> <span>timeit</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'enter'</span><span>)</span>\n    start <span>=</span> datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span>\n    <span>try</span><span>:</span>\n        <span>yield</span>\n    <span>finally</span><span>:</span>\n        <span>print</span><span>(</span><span>'exit'</span><span>)</span>\n        delta <span>=</span> <span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span> <span>-</span> start<span>)</span><span>.</span>total_seconds<span>(</span><span>)</span>\n        <span>print</span><span>(</span><span>'delta = {}'</span><span>.</span><span>format</span><span>(</span>delta<span>)</span><span>)</span>\n\n<span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n    time<span>.</span>sleep<span>(</span><span>2</span><span>)</span>\n    <span>return</span> x <span>+</span> y\n\n<span>with</span> timeit<span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span>add<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p><strong>总结</strong></p>\n<p>如果业务逻辑简单可以使用函数加 contextlib.contextmanager 装饰器方式，如果业务复杂，用类的方\n式加 <code>__enter__</code> 和 <code>__exit__</code> 方法方便。</p>\n<h2 id=\"反射概念\"> 反射概念</h2>\n<p>概述</p>\n<p>运行时，runtime，区别于编译时，指的是程序被加载到内存中执行的时候。\n反射，reflection，指的是运行时获取类型定义信息。\n一个对象能够在运行时，像照镜子一样，反射出其类型信息。\n简单说，在Python中，能够通过一个对象，找出其type、class、attribute 或 method 的能力，称为反射或者自省。\n具有反射能力的函数有 type()、isinstance()、callable()、dir()、getattr() 等</p>\n<table>\n<thead>\n<tr>\n<th>内建函数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getattr(object, name[, default])</td>\n<td>通过name返回object的属性值。当属性不存在，将使用default返回，如果<br/>没有default，则抛出AttributeError。name必须为字符串</td>\n</tr>\n<tr>\n<td>setattr(object, name, value)</td>\n<td>object的属性存在，则覆盖，不存在，新增</td>\n</tr>\n<tr>\n<td>hasattr(object, name)</td>\n<td>判断对象是否有这个名字的属性，name必须为字符串</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>p1<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>为上面 Point 类增加打印的方法</p>\n<div><pre><code><span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>p1<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>x<span>,</span> p1<span>.</span>y<span>)</span>\n<span>print</span><span>(</span><span>getattr</span><span>(</span>p1<span>,</span> <span>'x'</span><span>)</span><span>,</span> <span>getattr</span><span>(</span>p1<span>,</span> <span>'y'</span><span>)</span><span>)</span>\n<span>setattr</span><span>(</span>p1<span>,</span> <span>'x'</span><span>,</span> <span>10</span><span>)</span>\n<span>setattr</span><span>(</span>Point<span>,</span> <span>'__str__'</span><span>,</span> <span>lambda</span> self<span>:</span> <span>\"&lt;Point {},{}>\"</span><span>.</span><span>format</span><span>(</span>self<span>.</span>x<span>,</span> self<span>.</span>y<span>)</span><span>)</span>\n<span>print</span><span>(</span>p1<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>反射相关的魔术方法\n<code>__getattr__()</code> 、 <code>__setattr__()</code> 、 <code>__delattr__()</code> 这三个魔术方法，分别测试这三个方法</p>\n<h3 id=\"getattr\"> <code>__getattr__()</code></h3>\n<div><pre><code><span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\n    <span>def</span> <span>__getattr__</span><span>(</span>self<span>,</span> item<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'getattr~~~'</span><span>)</span>\n        <span>print</span><span>(</span>item<span>)</span>\n        <span>return</span> <span>100</span>\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>x<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>y<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>z<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>实例属性查找顺序为：</p>\n<p><code>__instance.__dict__ --&gt; instance.__class__.__dict__ --&gt; 继承的祖先类（直到object）的__dict__ --&gt; 找不到 --&gt; 调用__getattr__()</code></p>\n<h3 id=\"setattr\"> <code>__setattr__()</code></h3>\n<div><pre><code><span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\n    <span>def</span> <span>__getattr__</span><span>(</span>self<span>,</span> item<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'getattr~~~'</span><span>)</span>\n        <span>print</span><span>(</span>item<span>)</span>\n        <span>return</span> <span>100</span>\n\n    <span>def</span> <span>__setattr__</span><span>(</span>self<span>,</span> key<span>,</span> value<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'setattr~~~, {}={}'</span><span>.</span><span>format</span><span>(</span>key<span>,</span> value<span>)</span><span>)</span>\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>x<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>y<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>p1 的实例字典里面什么都没有，而且访问x和y属性的时候竟然访问到了<code>__getattr__()</code>，为什么？</p>\n<div><pre><code><span>class</span> <span>Point</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\n    <span>def</span> <span>__getattr__</span><span>(</span>self<span>,</span> item<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'getattr~~~'</span><span>)</span>\n        <span>print</span><span>(</span>item<span>)</span>\n        <span>return</span> <span>100</span>\n\n    <span>def</span> <span>__setattr__</span><span>(</span>self<span>,</span> key<span>,</span> value<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'setattr~~~, {}={}'</span><span>.</span><span>format</span><span>(</span>key<span>,</span> value<span>)</span><span>)</span>\n        self<span>.</span>__dict__<span>[</span>key<span>]</span> <span>=</span> value\n        <span># setattr(self, key, value) # 对吗 不对，self会产生递归</span>\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>x<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>y<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p><code>__setattr__()</code> 方法，可以拦截对实例属性的增加、修改操作，如果要设置生效，需要自己操作实例\n的 <code>__dict__</code> 。</p>\n<h3 id=\"delattr\"> <code>__delattr__()</code></h3>\n<div><pre><code><span>class</span> <span>Point</span><span>:</span>\n    Z <span>=</span> <span>100</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\n    <span>def</span> <span>__delattr__</span><span>(</span>self<span>,</span> item<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'delattr, {}'</span><span>.</span><span>format</span><span>(</span>item<span>)</span><span>)</span>\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>del</span> p1<span>.</span>x\n<span>del</span> p1<span>.</span>y\n<span>del</span> p1<span>.</span>Z\n<span>print</span><span>(</span>p1<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>Point<span>.</span>__dict__<span>)</span>\n<span>del</span> Point<span>.</span>Z\n<span>print</span><span>(</span>Point<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>通过实例删除属性，就会尝试调用该魔术方法。</p>\n<h2 id=\"getattribute\"> <code>__getattribute__</code></h2>\n<div><pre><code><span>class</span> <span>Point</span><span>:</span>\n    Z <span>=</span> <span>100</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>x<span>,</span> p1<span>.</span>y<span>)</span>\n<span>print</span><span>(</span>Point<span>.</span>Z<span>,</span> p1<span>.</span>Z<span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\n<span># 为Point类增加__getattribute__，观察变化</span>\n<span>class</span> <span>Point</span><span>:</span>\n    Z <span>=</span> <span>100</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\n    <span>def</span> <span>__getattribute__</span><span>(</span>self<span>,</span> item<span>)</span><span>:</span>\n        <span>print</span><span>(</span>item<span>)</span>\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>x<span>,</span> p1<span>.</span>y<span>)</span>\n<span>print</span><span>(</span>Point<span>.</span>Z<span>,</span> p1<span>.</span>Z<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>实例的所有的属性访问，第一个都会调用 <code>__getattribute__</code> 方法，它阻止了属性的查找，该方法应该返回（计算后的）值或者抛出一个 AttributeError 异常。</p>\n<ul>\n<li>它的return值将作为属性查找的结果。</li>\n<li>如果抛出AttributeError异常，则会直接调用 <code>__getattr__</code>方法，因为表示属性没有找到。</li>\n</ul>\n<div><pre><code>\n<span>class</span> <span>Point</span><span>:</span>\n    Z <span>=</span> <span>100</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n\n    <span>def</span> <span>__getattr__</span><span>(</span>self<span>,</span> item<span>)</span><span>:</span>\n        <span>return</span> <span>'missing {}'</span><span>.</span><span>format</span><span>(</span>item<span>)</span>\n\n    <span>def</span> <span>__getattribute__</span><span>(</span>self<span>,</span> item<span>)</span><span>:</span>\n        <span># print(item)</span>\n        <span># raise AttributeError('Not Found')</span>\n        <span># return self.__dict__[item] # 不能用，会产生递归</span>\n        <span># pass</span>\n        <span># return object.__getattribute__(self, item)</span>\n        <span>return</span> <span>super</span><span>(</span><span>)</span><span>.</span>__getattribute__<span>(</span>item<span>)</span>\n\np1 <span>=</span> Point<span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>x<span>,</span> p1<span>.</span>y<span>)</span>\n<span>print</span><span>(</span>Point<span>.</span>Z<span>,</span> p1<span>.</span>Z<span>)</span>\n<span>print</span><span>(</span>p1<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p><code>__getattribute__</code> 方法中为了避免在该方法中无限的递归，它的实现应该永远调用基类的同名方法以访问需要的任何属性，例如 <code>object.__getattribute__(self, name)</code>。</p>\n<p>注意，除非你明确地知道 <code>__getattribute__</code> 方法用来做什么，否则不要使用它。</p>\n<p><strong>总结</strong></p>\n<table>\n<thead>\n<tr>\n<th>魔术方法</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__getattr__()</code></td>\n<td>当通过搜索实例、实例的类及祖先类查不到属性，就会调用此方法</td>\n</tr>\n<tr>\n<td><code>__setattr__()</code></td>\n<td>通过 <code>.</code>访问实例属性，进行增加、修改都要调用它</td>\n</tr>\n<tr>\n<td><code>__delattr__()</code></td>\n<td>当通过实例来删除属性时调用此方法</td>\n</tr>\n<tr>\n<td><code>__getattribute__()</code></td>\n<td>实例所有的属性调用都从这个方法开始</td>\n</tr>\n</tbody>\n</table>\n<p>实例属性查找顺序：</p>\n<p><code>实例调用__getattribute__() --&gt; instance.__dict__ --&gt; instance.__class__.__dict__ --&gt; 继承的祖先类（直到object）的__dict__ --&gt; 调用__getattr__()</code></p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "10 继承多态和Mixin",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-oo-inher-pol/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-oo-inher-pol/",
      "content_html": "<h1 id=\"_10-继承多态和mixin\"> 10 继承多态和Mixin</h1>\n<h2 id=\"继承基本概念\"> 继承基本概念</h2>\n<p>面向对象三要素之一，继承 Inheritance</p>\n<p>人类和猫类都继承自动物类。\n个体继承自父母，继承了父母的一部分特征，但也可以有自己的个性。\n在面向对象的世界中，从父类继承，就可以直接拥有父类的属性和方法，这样可减少代码冗余、多复用。子类也可以定义自己的属性和方法。</p>\n<p>看一个不用继承的例子</p>\n<div><pre><code><span>class</span> <span>Animal</span><span>:</span>\n    <span>def</span> <span>shout</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'Animal shouts'</span><span>)</span>\n\na <span>=</span> Animal<span>(</span><span>)</span>\na<span>.</span>shout<span>(</span><span>)</span>\n\n<span>class</span> <span>Cat</span><span>:</span>\n    <span>def</span> <span>shout</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'Cat shouts'</span><span>)</span>\n\nc <span>=</span> Cat<span>(</span><span>)</span>\nc<span>.</span>shout<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>上面的2个类虽然有关系，但是定义时并没有建立这种关系，而是各自完成定义。\n动物类和猫类都会叫，但是它们的叫法有区别，所以分别定义。</p>\n<div><pre><code><span>class</span> <span>Animal</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>)</span><span>:</span>\n        self<span>.</span>_name <span>=</span> name\n\n    <span>def</span> <span>shout</span><span>(</span>self<span>)</span><span>:</span> <span># 一个通用的叫方法</span>\n        <span>print</span><span>(</span><span>'{} shouts'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>__class__<span>.</span>__name__<span>)</span><span>)</span>\n\n    <span>@property</span>\n    <span>def</span> <span>name</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>_name\n\na <span>=</span> Animal<span>(</span><span>'monster'</span><span>)</span>\na<span>.</span>shout<span>(</span><span>)</span>\n\n<span>class</span> <span>Cat</span><span>(</span>Animal<span>)</span><span>:</span>\n    <span>pass</span>\n\ncat <span>=</span> Cat<span>(</span><span>'garfield'</span><span>)</span>\ncat<span>.</span>shout<span>(</span><span>)</span>\n<span>print</span><span>(</span>cat<span>.</span>name<span>)</span>\n\n<span>class</span> <span>Dog</span><span>(</span>Animal<span>)</span><span>:</span>\n    <span>pass</span>\n\ndog <span>=</span> Dog<span>(</span><span>'ahuang'</span><span>)</span>\ndog<span>.</span>shout<span>(</span><span>)</span>\n<span>print</span><span>(</span>dog<span>.</span>name<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>上例可以看出，通过继承，猫类、狗类不用写代码，直接继承了父类的属性和方法。</p>\n<p><strong>继承</strong>\nclass Cat(Animal) 这种形式就是从父类继承，括号中写上继承的类的列表。\n继承可以让子类从父类获取特征（属性和方法）</p>\n<p><strong>父类</strong>\nAnimal就是Cat的父类，也称为基类、超类。</p>\n<p><strong>子类</strong>\nCat就是Animal的子类，也称为派生类。</p>\n<h2 id=\"类继承的定义\"> 类继承的定义</h2>\n<p>格式如下</p>\n<div><pre><code><span>class</span> 子类名<span>(</span>基类<span>1</span><span>[</span><span>,</span>基类<span>2</span><span>,</span><span>.</span><span>.</span><span>.</span><span>]</span><span>)</span><span>:</span>\n\t语句块\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>如果类定义时，没有基类列表，等同于继承自 object 。在 Python3 中，object 类是所有对象的根基类。</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n\t<span>pass</span>\n<span># 等价于</span>\n<span>class</span> <span>A</span><span>(</span><span>object</span><span>)</span><span>:</span>\n\t<span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>注意，上例在 Python2 中，两种写法是不同的。</p>\n<p>Python 支持多继承，继承也可以多级。</p>\n<p>查看继承的特殊属性和方法有</p>\n<table>\n<thead>\n<tr>\n<th>特殊属性和方法</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>_<em>bases</em>_</td>\n<td>类的基类元组</td>\n</tr>\n<tr>\n<td>_<em>base</em>_</td>\n<td>类的基类元组的第一项</td>\n</tr>\n<tr>\n<td>_<em>mro</em>_</td>\n<td>显示方法查找顺序，基类的元组</td>\n</tr>\n<tr>\n<td>mro()方法</td>\n<td>同上，返回列表</td>\n</tr>\n<tr>\n<td>_<em>subclasses</em>_()</td>\n<td>类的子类列表</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>pass</span>\n\n<span>print</span><span>(</span>A<span>.</span>__base__<span>)</span>\n<span>print</span><span>(</span>A<span>.</span>__bases__<span>)</span>\n<span>print</span><span>(</span><span>)</span>\n<span>print</span><span>(</span>A<span>.</span>mro<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span>A<span>.</span>__mro__<span>)</span>\n<span>print</span><span>(</span><span>int</span><span>.</span>__subclasses__<span>(</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>bool</span><span>.</span>mro<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"python-不通版本的类\"> Python 不通版本的类</h2>\n<p>Python2.2之前类是没有共同的祖先的，之后，引入object类，它是所有类的共同祖先类 object。\nPython2 中为了兼容，分为古典类（旧式类）和新式类。\nPython3 中全部都是新式类。\n新式类都是继承自 object的，新式类可以使用super。</p>\n<div><pre><code><span># 以下代码在Python2.x中运行</span>\n<span># 古典类（旧式类）</span>\n<span>class</span> <span>A</span><span>:</span> <span>pass</span>\n<span># 新式类</span>\n<span>class</span> <span>B</span><span>(</span><span>object</span><span>)</span><span>:</span> <span>pass</span>\n<span>print</span><span>(</span><span>dir</span><span>(</span>A<span>)</span><span>)</span>\n<span>print</span><span>(</span><span>dir</span><span>(</span>B<span>)</span><span>)</span>\n<span>print</span><span>(</span>A<span>.</span>__bases__<span>)</span>\n<span>print</span><span>(</span>B<span>.</span>__bases__<span>)</span>\n<span># 古典类</span>\na <span>=</span> A<span>(</span><span>)</span>\n<span>print</span><span>(</span>a<span>.</span>__class__<span>)</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>a<span>)</span><span>)</span> <span># &lt;type 'instance'></span>\n<span># 新式类</span>\nb <span>=</span> B<span>(</span><span>)</span>\n<span>print</span><span>(</span>b<span>.</span>__class__<span>)</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>b<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id=\"继承中的访问控制\"> 继承中的访问控制</h2>\n<div><pre><code><span>class</span> <span>Animal</span><span>:</span>\n    __a <span>=</span> <span>10</span>\n    _b <span>=</span> <span>20</span>\n    c <span>=</span> <span>30</span>\n\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>__d <span>=</span> <span>40</span>\n        self<span>.</span>_e <span>=</span> <span>50</span>\n        self<span>.</span>f <span>=</span> <span>60</span>\n        self<span>.</span>__a <span>+=</span> <span>1</span>\n\n    <span>def</span> <span>showa</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>__a<span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>__class__<span>.</span>__a<span>)</span>\n\n    <span>def</span> <span>__showb</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>_b<span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>__a<span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>__class__<span>.</span>__a<span>)</span>\n\n<span>class</span> <span>Cat</span><span>(</span>Animal<span>)</span><span>:</span>\n    __a <span>=</span> <span>100</span>\n    _b <span>=</span> <span>200</span>\n\nc <span>=</span> Cat<span>(</span><span>)</span>\nc<span>.</span>showa<span>(</span><span>)</span> <span># 11 10</span>\nc<span>.</span>_Animal__showb<span>(</span><span>)</span> <span># 200, 11, 10</span>\n<span>print</span><span>(</span>c<span>.</span>c<span>)</span> <span># 30</span>\n<span>print</span><span>(</span>c<span>.</span>_Animal__d<span>)</span> <span>#40</span>\n<span>print</span><span>(</span>c<span>.</span>_e<span>,</span> c<span>.</span>f<span>,</span> c<span>.</span>_Animal__a<span>)</span> <span># 50,60,11</span>\n<span>print</span><span>(</span>c<span>.</span>_Animal__a<span>,</span> c<span>.</span>_Cat__a<span>)</span> <span># 11 100</span>\n<span>print</span><span>(</span>c<span>.</span>__dict__<span>)</span> <span>#</span>\n<span>print</span><span>(</span>c<span>.</span>__class__<span>.</span>__dict__<span>.</span>keys<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>从父类继承，自己没有的，就可以到父类中找。</p>\n<p>私有的都是不可以访问的，但是本质上依然是改了名称放在这个属性所在类或实例的__dict__中。</p>\n<p>知道这个新名称就可以直接找到这个隐藏的变量，这是个黑魔法技巧，慎用。</p>\n<p><strong>总结</strong>\n继承时，公有成员，子类和实例都可以随意访问；私有成员被隐藏，子类和实例不可直接访问，但私有变量所在的类内的方法中可以访问这个私有变量。</p>\n<p>Python通过自己一套实现，实现和其它语言一样的面向对象的继承机制。</p>\n<p><strong>实例属性查找顺序</strong></p>\n<p><code>实例的__dict__</code> → <code>类__dict__</code> →如果有继承→ <code>父类 __dict__</code>\n如果搜索这些地方后没有找到就会抛异常，先找到就立即返回了。</p>\n<h2 id=\"方法的重写、覆盖override\"> 方法的重写、覆盖override</h2>\n<div><pre><code><span>class</span> <span>Animal</span><span>:</span>\n    <span>def</span> <span>shout</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'Animal shouts'</span><span>)</span>\n\n<span>class</span> <span>Cat</span><span>(</span>Animal<span>)</span><span>:</span>\n    <span># 覆盖了父类方法</span>\n    <span>def</span> <span>shout</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'miao'</span><span>)</span>\n\na <span>=</span> Animal<span>(</span><span>)</span>\na<span>.</span>shout<span>(</span><span>)</span>\nc <span>=</span> Cat<span>(</span><span>)</span>\nc<span>.</span>shout<span>(</span><span>)</span>\n<span>print</span><span>(</span>a<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>c<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>Animal<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>Cat<span>.</span>__dict__<span>)</span>\n<span># Animal shouts</span>\n<span># miao</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>Cat中能否覆盖自己的方法吗？\nCat中能否对父类方法做个增强，不需要完全重写？</p>\n<div><pre><code><span>class</span> <span>Animal</span><span>:</span>\n    <span>def</span> <span>shout</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'Animal shout'</span><span>)</span>\n        \n<span>class</span> <span>Cat</span><span>(</span>Animal<span>)</span><span>:</span>\n    <span># 覆盖了父类方法</span>\n    <span>def</span> <span>shout</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'miao'</span><span>)</span>\n    <span># 覆盖了自身的方法，显式调用了父类的方法</span>\n    <span>def</span> <span>shout</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>super</span><span>(</span><span>)</span><span>)</span>\n        <span>print</span><span>(</span><span>super</span><span>(</span>Cat<span>,</span> self<span>)</span><span>)</span>\n\n        <span>super</span><span>(</span><span>)</span><span>.</span>shout<span>(</span><span>)</span>\n        <span>super</span><span>(</span>Cat<span>,</span> self<span>)</span><span>.</span>shout<span>(</span><span>)</span> <span># 等价于super()</span>\n        self<span>.</span>__class__<span>.</span>__base__<span>.</span>shout<span>(</span>self<span>)</span> <span># 不推荐</span>\na <span>=</span> Animal<span>(</span><span>)</span>\na<span>.</span>shout<span>(</span><span>)</span>\nc <span>=</span> Cat<span>(</span><span>)</span>\nc<span>.</span>shout<span>(</span><span>)</span>\n<span>print</span><span>(</span>a<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>c<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>Animal<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>Cat<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>super()可以访问到父类的类属性。\n静态方法和类方法，是特殊的方法，也是类属性，所以访问方式一样。</p>\n<h2 id=\"继承时使用初始化\"> 继承时使用初始化</h2>\n<p>先看下面一段代码，有没有问题</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> a<span>)</span><span>:</span>\n        self<span>.</span>a <span>=</span> a\n\n<span>class</span> <span>B</span><span>(</span>A<span>)</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> b<span>,</span> c<span>)</span><span>:</span>\n        self<span>.</span>b <span>=</span> b\n        self<span>.</span>c <span>=</span> c\n    <span>def</span> <span>printv</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>b<span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>a<span>)</span> <span># 出错吗？ 出错，没定义</span>\n\nf <span>=</span> B<span>(</span><span>200</span><span>,</span> <span>300</span><span>)</span>\n<span>print</span><span>(</span>f<span>.</span>__class__<span>.</span>__bases__<span>)</span>\nf<span>.</span>printv<span>(</span><span>)</span>\n<span>print</span><span>(</span>f<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>上例代码可知：</p>\n<p>如果类B定义时声明继承自类A，则在类B中<code>__bases__</code>中是可以看到类A。\n但是这和是否调用类A的构造方法是两回事。</p>\n<p>如果B中调用了父类A的构造方法，就可以拥有父类的属性了。如何理解这一句话呢？\n观察B的实例 f 的<code>__dict__</code>中的属性。</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> a<span>,</span> d<span>=</span><span>10</span><span>)</span><span>:</span>\n        self<span>.</span>a <span>=</span> a\n        self<span>.</span>__d <span>=</span> d\n\n<span>class</span> <span>B</span><span>(</span>A<span>)</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> b<span>,</span> c<span>)</span><span>:</span>\n        A<span>.</span>__init__<span>(</span>self<span>,</span> b <span>+</span> c<span>,</span> b <span>-</span> c<span>)</span>\n        self<span>.</span>b <span>=</span> b\n        self<span>.</span>c <span>=</span> c\n    <span>def</span> <span>printv</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>b<span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>a<span>)</span> <span># 出错吗？</span>\n\nf <span>=</span> B<span>(</span><span>200</span><span>,</span> <span>300</span><span>)</span>\n<span>print</span><span>(</span>f<span>.</span>__class__<span>.</span>__bases__<span>)</span>\nf<span>.</span>printv<span>(</span><span>)</span>\n<span>print</span><span>(</span>f<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>作为好的习惯，如果父类定义了<code>__init__</code>方法，你就该在子类的<code>__init__</code>中调用它。\n那么，子类什么时候自动调用父类的<code>__init__</code>方法呢？\n示例1</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>a1 <span>=</span> <span>'a1'</span>\n        self<span>.</span>__a2 <span>=</span> <span>'a2'</span>\n<span>print</span><span>(</span><span>'init in A'</span><span>)</span>\n<span>class</span> <span>B</span><span>(</span>A<span>)</span><span>:</span>\n    <span>pass</span>\nb <span>=</span> B<span>(</span><span>)</span>\n<span>print</span><span>(</span>b<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>B实例的初始化会自动调用基类A的<code>__init__</code>方法</p>\n<p>示例2</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>a1 <span>=</span> <span>'a1'</span>\n        self<span>.</span>__a2 <span>=</span> <span>'a2'</span>\n\t\t<span>print</span><span>(</span><span>'init in A'</span><span>)</span>\n        \n<span>class</span> <span>B</span><span>(</span>A<span>)</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>b1 <span>=</span> <span>'b1'</span>\n\t\t<span>print</span><span>(</span><span>'init in B'</span><span>)</span>\n        \nb <span>=</span> B<span>(</span><span>)</span>\n<span>print</span><span>(</span>b<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>B实例一旦定义了初始化<code>__init__</code>方法，就不会自动调用父类的初始化<code>__init__</code>方法，需要手动调用。</p>\n<div><pre><code><span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>a1 <span>=</span> <span>'a1'</span>\n        self<span>.</span>__a2 <span>=</span> <span>'a2'</span>\n        <span>print</span><span>(</span><span>'init in A'</span><span>)</span>\n\n<span>class</span> <span>B</span><span>(</span>A<span>)</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>#super().__init__()</span>\n        <span>#super(B, self).__init__()</span>\n        self<span>.</span>b1 <span>=</span> <span>'b1'</span>\n        <span>print</span><span>(</span><span>'init in B'</span><span>)</span>\n        A<span>.</span>__init__<span>(</span>self<span>)</span>\n        \nb <span>=</span> B<span>(</span><span>)</span>\n<span>print</span><span>(</span>b<span>.</span>__dict__<span>)</span> <span># 注意__a2</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><strong>总结</strong></p>\n<ul>\n<li>如果在子类中覆盖了父类的<code>__init__</code>方法，那么在子类的<code>__init__</code>方法中，应该显式调用父类的<code>__init__</code>方法</li>\n<li>Python中并不限制在子类的<code>__init__</code>方法中调用父类的<code>__init__</code>方法的位置，但一般都应该尽早的调用</li>\n<li>推荐使用 <code>super().__init__()</code>或<code>super(B, self).__init__()</code></li>\n</ul>\n<h2 id=\"单继承\"> 单继承</h2>\n<p>上面的例子中，类的继承列表中只有一个类，这种继承称为单一继承。</p>\n<p>OCP 原则：多用“继承”、少修改</p>\n<p>继承的用途：在子类上实现对基类的增强，实现多态</p>\n<h2 id=\"多态\"> 多态</h2>\n<p>在面向对象中，父类、子类通过继承联系在一起，如果可以通过一套方法，就可以实现不同表现，就是多态。多态的前提：继承、覆盖</p>\n<h2 id=\"多继承\"> 多继承</h2>\n<p>一个类继承自多个类就是多继承，它将具有多个类的特征。</p>\n<h3 id=\"多继承弊端\"> 多继承弊端</h3>\n<p>多继承很好的模拟了世界，因为事物很少是单一继承，但是舍弃简单，必然引入复杂性，带来了冲突。</p>\n<p>如同一个孩子继承了来自父母双方的特征。那么到底眼睛像爸爸还是妈妈呢？孩子究竟该像谁多一点呢？</p>\n<p>多继承的实现会导致编译器设计的复杂度增加，所以有些高级编程语言舍弃了类的多继承。</p>\n<p>C++支持多继承；Java舍弃了多继承。</p>\n<p>Java中，一个类可以实现多个接口，一个接口也可以继承多个接口。Java的接口很纯粹，只是方法的声明，继承者必须实现这些方法，就具有了这些能力，就能干什么。</p>\n<p>多继承可能会带来二义性，例如，猫和狗都继承自动物类，现在如果一个类多继承了猫和狗类，猫和狗都有shout方法，子类究竟继承谁的shout呢？</p>\n<p>解决方案\n实现多继承的语言，要解决二义性，深度优先或者广度优先。</p>\n<h3 id=\"python多继承实现\"> Python多继承实现</h3>\n<div><pre><code><span>class</span> <span>className</span><span>(</span>基类<span>1</span>， 基类<span>2</span><span>[</span><span>,</span><span>.</span><span>.</span><span>.</span><span>]</span><span>)</span><span>:</span>\n    类体\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/inher.png\" alt=\"inher\"></p>\n<p>左图是多继承（菱形继承），右图是单一继承</p>\n<p>多继承带来路径选择问题，究竟继承哪个父类的特征呢</p>\n<p>Python使用 MRO（method resolution order方法解析顺序）解决基类搜索顺序问题。</p>\n<ul>\n<li>历史原因，MRO有三个搜索算法：\n<ul>\n<li>经典算法，按照定义从左到右，深度优先策略。2.2版本之前\n左图的MRO是MyClass,D,B,A,C,A</li>\n<li>新式类算法，是经典算法的升级，深度优先，重复的只保留最后一个。2.2版本\n左图的MRO是MyClass,D,B,C,A,object</li>\n<li>C3算法，在类被创建出来的时候，就计算出一个MRO有序列表。2.3之后支持，Python3唯一支持的算法\n左图中的MRO是MyClass,D,B,C,A,object的列表\nC3算法解决多继承的二义性</li>\n</ul>\n</li>\n</ul>\n<p>经典算法有很大的问题，如果C中有方法覆盖了A的方法，也不会访问到C的方法，因为先访问A的（深度优先）。</p>\n<p>新式类算法，依然采用了深度优先，解决了重复问题，但是同经典算法一样，没有解决继承的单调性。</p>\n<p>C3算法，解决了继承的单调性，它阻止创建之前版本产生二义性的代码。求得的MRO 本质是为了线性化，且确定了顺序。</p>\n<p>单调性：假设有A、B、C三个类，C的mro是[C, A, B]，那么C的子类的mro中，A、B的顺序一致就是单调的。</p>\n<h3 id=\"多继承的缺点\"> 多继承的缺点</h3>\n<p>当类很多且继承复杂的情况下，继承路径太多，很难说清什么样的继承路径。</p>\n<p>Python语法是允许多继承，但Python代码是解释执行，只有执行到的时候，才发现错误。\n团队协作开发，如果引入多继承，那代码很有可能不可控。</p>\n<p>不管编程语言是否支持多继承，都应当避免多继承。</p>\n<p>Python的面向对象，我们看到的太灵活了，太开放了，所以要团队守规矩。</p>\n<h2 id=\"mixin\"> Mixin</h2>\n<p>在Python的很多类的实现中，都可以看到一个Mixin的名字，这种类是什么呢？</p>\n<p>类有下面的继承关系</p>\n<p>文档Document类是其他所有文档类的抽象基类；\nWord、Pdf类是Document的子类。</p>\n<p>需求：为Document子类提供打印能力</p>\n<p>思路：\n1、在Document中提供print方法\n假设已经有了下面3个类</p>\n<div><pre><code><span>class</span> <span>Document</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> content<span>)</span><span>:</span>\n        self<span>.</span>content <span>=</span> content\n    <span>def</span> <span>print</span><span>(</span>self<span>)</span><span>:</span> <span># 抽象方法</span>\n        <span>raise</span> NotImplementedError<span>(</span><span>)</span>\n    \n<span>class</span> <span>Word</span><span>(</span>Document<span>)</span><span>:</span> <span>pass</span> <span># 其他功能略去</span>\n<span>class</span> <span>Pdf</span><span>(</span>Document<span>)</span><span>:</span> <span>pass</span> <span># 其他功能略去</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>基类提供的方法可以不具体实现，因为它未必适合子类的打印，子类中需要覆盖重写。</p>\n<p>基类中只定义，不实现的方法，称为“抽象方法”。在Python中，如果采用这种方式定义的抽象方法，子类可以不实现，直到子类使用该方法的时候才报错。</p>\n<p>print算是一种能力 —— 打印功能，不是所有的Document的子类都需要的，所有，从这个角度出发，上面的基类Document设计有点问题。</p>\n<p>2、需要打印的子类上增加</p>\n<p>如果在现有子类Word或Pdf上直接增加，虽然可以，却违反了OCP的原则，所以可以继承后增加打印功能。</p>\n<div><pre><code><span>class</span> <span>Document</span><span>:</span> <span># 第三方库，不允许修改</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> content<span>)</span><span>:</span>\n        self<span>.</span>content <span>=</span> content\n<span>class</span> <span>Word</span><span>(</span>Document<span>)</span><span>:</span> <span>pass</span> <span># 第三方库，不允许修改</span>\n<span>class</span> <span>Pdf</span><span>(</span>Document<span>)</span><span>:</span> <span>pass</span> <span># 第三方库，不允许修改</span>\n<span># 单继承</span>\n<span>class</span> <span>PrintableWord</span><span>(</span>Word<span>)</span><span>:</span>\n    <span>def</span> <span>print</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>content<span>)</span>\n\n<span>print</span><span>(</span>PrintableWord<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>PrintableWord<span>.</span>mro<span>(</span><span>)</span><span>)</span>\npw <span>=</span> PrintableWord<span>(</span><span>'test string'</span><span>)</span>\npw<span>.</span><span>print</span><span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>看似不错，如果需要还要提供其他能力，如何继承？</p>\n<p>例如，如果该类用于网络，还应具备序列化的能力，在类上就应该实现序列化。</p>\n<p>可序列化还可能分为使用pickle、json、messagepack等。</p>\n<p>这个时候发现，为了</p>\n<p>增加一种能力，就要增加一次继承，类可能太多了，继承的方式不是很好了。</p>\n<p>功能太多，A类需要某几样功能，B类需要另几样功能，它们需要的是多个功能的自由组合，继承实现很繁琐。</p>\n<p>3、Mixin</p>\n<p>先看代码</p>\n<div><pre><code><span>class</span> <span>Document</span><span>:</span> <span># 第三方库，不允许修改</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> content<span>)</span><span>:</span>\n        self<span>.</span>content <span>=</span> content\n<span>class</span> <span>Word</span><span>(</span>Document<span>)</span><span>:</span> <span>pass</span> <span># 第三方库，不允许修改</span>\n<span>class</span> <span>Pdf</span><span>(</span>Document<span>)</span><span>:</span> <span>pass</span> <span># 第三方库，不允许修改</span>\n<span>class</span> <span>PrintableMixin</span><span>:</span>\n    <span>def</span> <span>print</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>content<span>,</span> <span>'Mixin'</span><span>)</span>\n<span>class</span> <span>PrintableWord</span><span>(</span>PrintableMixin<span>,</span> Word<span>)</span><span>:</span> <span>pass</span>\n\n<span>print</span><span>(</span>PrintableWord<span>.</span>__dict__<span>)</span>\n<span>print</span><span>(</span>PrintableWord<span>.</span>mro<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>Mixin就是其它类混合进来，同时带来了类的属性和方法。</p>\n<p><strong>Mixin类</strong></p>\n<p>Mixin 本质上就是多继承实现的。</p>\n<p>Mixin 体现的是一种组合的设计模式。</p>\n<p>在面向对象的设计中，一个复杂的类，往往需要很多功能，而这些功能由来自不同的类提供，这就需要很多的类组合在一起。</p>\n<p>从设计模式的角度来说，多组合，少继承。</p>\n<p>Mixin 类的使用原则</p>\n<ul>\n<li>Mixin类中不应该显式的出现<code>__init__</code>初始化方法</li>\n<li>Mixin 类通常不能独立工作，因为它是准备混入别的类中的部分功能实现</li>\n<li>Mixin 类是类，也可以继承，其祖先类也应是 Mixin 类</li>\n</ul>\n<p>使用时，<strong>Mixin 类通常在继承列表的第一个位置</strong>，例如 <code>class PrintableWord(PrintableMixin, Word): pass</code></p>\n<p>Mixin 类和装饰器，都可以实现对类的增强，这两种方式都可以使用，看个人喜好。</p>\n<p>如果还需要继承就得使用 Mixin 类的方式。</p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/inher.png",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "09 面向对象-封装",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-oo-package/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-oo-package/",
      "content_html": "<h1 id=\"_09-面向对象-封装\"> 09 面向对象-封装</h1>\n<h2 id=\"面向对象\"> 面向对象</h2>\n<p>什么是面向对象呢？</p>\n<p>一种认识世界、分析世界的方法论。将万事万物抽象为各种对象。</p>\n<p><strong>类 class</strong></p>\n<p>类是抽象的概念，是万事万物的抽象，是一类事物的共同特征的集合。\n用计算机语言来描述<strong>类</strong>，是<strong>属性</strong>和<strong>方法</strong>的集合。</p>\n<p><strong>对象 instance、object</strong></p>\n<p>对象是类的具象，是一个实体。\n对于我们每个人这个个体，都是抽象概念人类的不同的实体。</p>\n<p>举例：略</p>\n<p><strong>属性</strong>：对对象状态的抽象，用数据结构来描述。</p>\n<p><strong>操作</strong>：对对象行为的抽象，用操作名和实现该操作的方法来描述。</p>\n<p>哲学</p>\n<ul>\n<li>一切皆对象</li>\n<li>对象是数据和操作的封装</li>\n<li>对象是对立的，但是对象之间可以相互作用</li>\n<li>目前OOP是最接近人类认知的编程范式</li>\n</ul>\n<h2 id=\"面向对象3要素\"> 面向对象3要素</h2>\n<ol>\n<li>封装\n<ul>\n<li>组装：将数据和操作组装到一起。</li>\n<li>隐藏数据：对外只暴露一些接口，通过接口访问对象。</li>\n</ul>\n</li>\n<li>集成\n<ul>\n<li>多复用，继承来的就不用自己写了</li>\n<li>多继承少修改，OCP（Open-closed Principle），使用继承来改变，来体现个性</li>\n</ul>\n</li>\n<li>多态\n<ul>\n<li>面向对象编程最灵活的地方，动态绑定</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"封装\"> 封装</h2>\n<p>封装就是定义类，将属性和操作组织在类中</p>\n<h3 id=\"python-类定义\"> Python 类定义</h3>\n<div><pre><code><span>class</span> <span>ClassName</span><span>:</span>\n    语句块\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ol>\n<li>必须使用 class 关键字</li>\n<li>类名强烈建议使用<strong>大驼峰</strong>命名方式，即每个单词首字母大写。其本质就是一个标识符</li>\n<li>类定义完成后，就产生了一个<strong>类对象</strong>，绑定到了标识符 ClassName 上</li>\n</ol>\n<p>举例</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>\"\"\"A Example Class\"\"\"</span>\n    x <span>=</span> <span>'abc'</span> <span># 类属性</span>\n    \n    <span>def</span> <span>showme</span><span>(</span>self<span>)</span><span>:</span> <span># 方法，也是属性</span>\n        <span>return</span> __class__<span>.</span>__name__ <span># 返回类的名称</span>\n  \n<span>print</span><span>(</span>Person<span>)</span>\n<span>print</span><span>(</span>Person<span>.</span>__name__<span>)</span> <span># 类名字</span>\n<span>print</span><span>(</span>Person<span>.</span>__doc__<span>)</span> <span># 类文档</span>\n<span>print</span><span>(</span>Person<span>.</span>showme<span>)</span> <span># 类属性</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"类及类属性\"> 类及类属性</h3>\n<ul>\n<li>类对象：类也是对象，类的定义执行后会生成一个类对象</li>\n<li>类属性：类定义中的变量和类中定义的方法都是类的属性。上例中类 Person 的 x 和 showme</li>\n<li>类变量：属性也是标识符，也是变量。上例中类 Person 的 x 和 showme</li>\n</ul>\n<p>Person 中， x、foo 都是类的属性，<code>__name__</code>、<code>__doc__</code>是类的特殊属性</p>\n<p>showme 方法是类的属性，如果吃是人类的方法，但是每一个具体的人才能吃东西，也就是说吃是人的实例能调用的方法。</p>\n<p>showme 是方法method，本质上就是普通的函数对象 function，它一般要求至少有一个参数。第一个形式参数可以是 self（self 只是个惯用标识符，可以换名字），这个参数位置就留给了 self。</p>\n<p><strong>self 指代当前实例本身</strong></p>\n<h2 id=\"实例化\"> 实例化</h2>\n<div><pre><code>a <span>=</span> Person<span>(</span><span>)</span> <span># 实例化</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>使用上面的语法，在类对象名称后面加上一个括号，就调用类的实例化方法，完成实例化。\n实例化就真正创建一个改类的对象（实例 instance）。例如</p>\n<div><pre><code>tom <span>=</span> Person<span>(</span><span>)</span> <span># 不同的实例</span>\njerry <span>=</span> Person<span>(</span><span>)</span> <span># 不用的实例</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>上面的 tom、jerry 都是 Person 类的实例，通过实例化生成了2个不同的实例。</p>\n<p>通常，每次实例化后获得的实例，是不同的实例，即使是使用同样的参数实例化，也得到不一样的对象。</p>\n<p>Python 类实例化后，会自动调用<code>__init__</code>方法。这个方式第一个形式参数必须留给 self, 其他形式参数随意。</p>\n<p><strong>构造的2个阶段</strong></p>\n<p>确切地讲，<code>tom = Person()</code>过程分为2个阶段：实例化和初始化。</p>\n<p><strong><code>__init__</code>方法</strong></p>\n<p>有些人把 Python 的<code>__init__</code>方法称为构造方法或构造器。</p>\n<p>Person() 实例化后，要初始化，要调用的是<code>__init__(self)</code>方法，可以不定义，如果没有定义会在实例化后<strong>隐式</strong>调用其父类的。</p>\n<p>作用：对实例进行初始化</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'init~~~~'</span><span>)</span>\n     \n<span>print</span><span>(</span>Person<span>)</span> <span># 不会调用__init__</span>\n<span>print</span><span>(</span>Person<span>(</span><span>)</span><span>)</span> <span># 会调用__init__</span>\ntom <span>=</span> Person<span>(</span><span>)</span> <span># 会调用__init__</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>初始化函数可以多个参数，请注意第一位置必须是 self， 例如<code>__init__(self, name, age)</code></p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'init~~~~'</span><span>)</span>\n        self<span>.</span>name <span>=</span> name\n        self<span>.</span>age <span>=</span> age\n    \n    <span>def</span> <span>showage</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>\"{} is {}.\"</span><span>.</span><span>format</span><span>(</span>self<span>.</span>name<span>,</span> self<span>.</span>age<span>)</span><span>)</span>\n       \n   \ntom <span>=</span> Person<span>(</span><span>'Tom'</span><span>,</span> <span>20</span><span>)</span> \n<span>print</span><span>(</span>tom<span>.</span>name<span>,</span> tom<span>.</span>age<span>)</span>\ntom<span>.</span>showage<span>(</span><span>)</span>\njerry <span>=</span> Person<span>(</span><span>'Jerry'</span><span>,</span> <span>18</span><span>)</span>\n<span>print</span><span>(</span>jerry<span>.</span>name<span>,</span> jerry<span>.</span>age<span>)</span>\njerry<span>.</span>age <span>+=</span> <span>1</span>\n<span>print</span><span>(</span>jerry<span>.</span>name<span>,</span> jerry<span>.</span>age<span>)</span>\njerry<span>.</span>showage<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><blockquote>\n<p>注意： <code>__init__()</code>方法不能有返回值，也就是只能是 return None</p>\n</blockquote>\n<p><strong>实例对象 instance</strong></p>\n<p>上例中，类 Person 实例化后获得一个该类的实例，就是实例对象</p>\n<p><code>__init__</code>方法的第一参数 self 就是指代某一个实例自身。</p>\n<p>执行<code>Person('Tom', 20)</code>时，调用<code>__init__()</code>方法。self.name 就是 tom 对象的 name，name 是保存在了 tom 对象上，而不是 Person 类上，称为 实例变量。</p>\n<p>类实例化后，得到一个实例对象，调用方法时采用 tomc.showage() 的方式，但是 showage 方法的形参需要一个形参 self, 我们并没有提供，并没有报错，为什么？</p>\n<p><strong>方法绑定</strong></p>\n<p>采用 tom.showage() 的方式调用，实例对象会绑定到方法上。这个 self 就是 tom，指向 当前调用改方法的实例本身。</p>\n<p>tom.showage() 调用时，会把方法的调用者 tom 实例作为第一参数 self 的实参输入<code>__init__()</code>方法。</p>\n<p><strong>self</strong></p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>1</span><span>,</span> <span>'self in init = {}'</span><span>.</span><span>format</span><span>(</span><span>id</span><span>(</span>self<span>)</span><span>)</span><span>)</span>\n\n    <span>def</span> <span>showme</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>2</span><span>,</span> <span>'self in showme = {}'</span><span>.</span><span>format</span><span>(</span><span>id</span><span>(</span>self<span>)</span><span>)</span><span>)</span>\n\ntom <span>=</span> Person<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>3</span><span>,</span> <span>'tom = {}'</span><span>.</span><span>format</span><span>(</span><span>id</span><span>(</span>tom<span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\ntom<span>.</span>showme<span>(</span><span>)</span>\n\n<span># 打印结果为</span>\n<span>1</span> self <span>in</span> init <span>=</span> <span>2921507816448</span>\n<span>3</span> tom <span>=</span> <span>2921507816448</span>\n<span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span>\n<span>2</span> self <span>in</span> showme <span>=</span> <span>2921507816448</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>上例说明，self 就是调用者， 就是 tom 对应的实例对象。</p>\n<p>self 这个形参标识符的名字只是一个惯例，它可以修改，但是请不要修改，否则影响代码的可读性。</p>\n<h3 id=\"实例变量和类变量\"> 实例变量和类变量</h3>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    age <span>=</span> <span>3</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n\ntom <span>=</span> Person<span>(</span><span>'tom'</span><span>)</span>\njerry <span>=</span> Person<span>(</span><span>'Jerry'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>name<span>,</span> tom<span>.</span>age<span>)</span>\n<span>print</span><span>(</span>jerry<span>.</span>name<span>,</span> jerry<span>.</span>age<span>)</span>\n<span>print</span><span>(</span>Person<span>.</span>age<span>)</span>\n\nPerson<span>.</span>age <span>=</span> <span>30</span>\n<span>print</span><span>(</span>Person<span>.</span>age<span>,</span> tom<span>.</span>age<span>,</span> jerry<span>.</span>age<span>)</span>\n\n<span># 运行结果</span>\ntom <span>3</span>\nJerry <span>3</span>\n<span>3</span>\n<span>30</span> <span>30</span> <span>30</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>\n<li>实例变量是每一个实例自己的变量，是自己独有的</li>\n<li>类变量是类的变量，是类的所有实例共享的属性或方法</li>\n</ul>\n<h3 id=\"特殊属性\"> 特殊属性</h3>\n<table>\n<thead>\n<tr>\n<th>特殊属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__name__</code></td>\n<td>对象名</td>\n</tr>\n<tr>\n<td><code>__class__</code></td>\n<td>对象的类型</td>\n</tr>\n<tr>\n<td><code>__dict__</code></td>\n<td>对象的属性的字典</td>\n</tr>\n<tr>\n<td><code>__qualname__</code></td>\n<td>类的限定名</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：Python中每一种对象都拥有不同的属性。函数是对象，类是对象，类的实例也是对象。</p>\n</blockquote>\n<h3 id=\"属性本质\"> 属性本质</h3>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    age <span>=</span> <span>3</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n\n<span>print</span><span>(</span><span>'----类----'</span><span>)</span>\n<span>print</span><span>(</span>Person<span>.</span>__class__<span>,</span><span>type</span><span>(</span>Person<span>)</span><span>,</span> Person<span>.</span>__class__ <span>is</span> <span>type</span><span>(</span>Person<span>)</span><span>)</span> <span># 类型</span>\n<span>print</span><span>(</span><span>sorted</span><span>(</span>Person<span>.</span>__dict__<span>.</span>items<span>(</span><span>)</span><span>)</span><span>,</span> end<span>=</span><span>'\\n\\n'</span><span>)</span> <span># 类字典</span>\n\ntom <span>=</span> Person<span>(</span><span>'tom'</span><span>)</span>\n<span>print</span><span>(</span><span>'----通过实例访问类----'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>__class__<span>,</span> <span>type</span><span>(</span>tom<span>)</span><span>,</span> tom<span>.</span>__class__ <span>is</span> <span>type</span><span>(</span>tom<span>)</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>__class__<span>.</span>__name__<span>,</span> <span>type</span><span>(</span>tom<span>)</span><span>.</span>__name__<span>)</span>\n<span>print</span><span>(</span><span>sorted</span><span>(</span>tom<span>.</span>__class__<span>.</span>__dict__<span>.</span>items<span>(</span><span>)</span><span>)</span><span>)</span>\n<span>print</span><span>(</span><span>'----实例自己的属性----'</span><span>)</span>\n<span>print</span><span>(</span><span>sorted</span><span>(</span>tom<span>.</span>__dict__<span>.</span>items<span>(</span><span>)</span><span>)</span><span>)</span>  <span># 实例的字典</span>\n\n<span># 结果为</span>\n<span>-</span><span>-</span><span>-</span><span>-</span>类<span>-</span><span>-</span><span>-</span><span>-</span>\n<span>&lt;</span><span>class</span> <span>'type'</span><span>></span> <span>&lt;</span><span>class</span> <span>'type'</span><span>></span> <span>True</span>\n<span>[</span><span>(</span><span>'__dict__'</span><span>,</span> <span>&lt;</span>attribute <span>'__dict__'</span> of <span>'Person'</span> objects<span>></span><span>)</span><span>,</span> <span>(</span><span>'__doc__'</span><span>,</span> <span>None</span><span>)</span><span>,</span> <span>(</span><span>'__init__'</span><span>,</span> <span>&lt;</span>function Person<span>.</span>__init__ at <span>0x000001E279A8BB80</span><span>></span><span>)</span><span>,</span> <span>(</span><span>'__module__'</span><span>,</span> <span>'__main__'</span><span>)</span><span>,</span> <span>(</span><span>'__weakref__'</span><span>,</span> <span>&lt;</span>attribute <span>'__weakref__'</span> of <span>'Person'</span> objects<span>></span><span>)</span><span>,</span> <span>(</span><span>'age'</span><span>,</span> <span>3</span><span>)</span><span>]</span>\n\n<span>-</span><span>-</span><span>-</span><span>-</span>通过实例访问类<span>-</span><span>-</span><span>-</span><span>-</span>\n<span>&lt;</span><span>class</span> <span>'__main__.Person'</span><span>></span> <span>&lt;</span><span>class</span> <span>'__main__.Person'</span><span>></span> <span>True</span>\nPerson Person\n<span>[</span><span>(</span><span>'__dict__'</span><span>,</span> <span>&lt;</span>attribute <span>'__dict__'</span> of <span>'Person'</span> objects<span>></span><span>)</span><span>,</span> <span>(</span><span>'__doc__'</span><span>,</span> <span>None</span><span>)</span><span>,</span> <span>(</span><span>'__init__'</span><span>,</span> <span>&lt;</span>function Person<span>.</span>__init__ at <span>0x000001E279A8BB80</span><span>></span><span>)</span><span>,</span> <span>(</span><span>'__module__'</span><span>,</span> <span>'__main__'</span><span>)</span><span>,</span> <span>(</span><span>'__weakref__'</span><span>,</span> <span>&lt;</span>attribute <span>'__weakref__'</span> of <span>'Person'</span> objects<span>></span><span>)</span><span>,</span> <span>(</span><span>'age'</span><span>,</span> <span>3</span><span>)</span><span>]</span>\n<span>-</span><span>-</span><span>-</span><span>-</span>实例自己的属性<span>-</span><span>-</span><span>-</span><span>-</span>\n<span>[</span><span>(</span><span>'name'</span><span>,</span> <span>'tom'</span><span>)</span><span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>上例中，可以看到类属性保存在类的<code>__dict__</code>中，实例属性保存在实例的<code>__dict__</code>中，如果从实例访问类的属性，也可以借助<code>__class__</code>找到所属的类，再通过类来访问类属性，例如<code>tom.__class__.age</code></p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    age <span>=</span> <span>3</span>\n    height <span>=</span> <span>170</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>=</span><span>18</span><span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n        self<span>.</span>age <span>=</span> age\n\ntom <span>=</span> Person<span>(</span><span>'Tom'</span><span>)</span> <span># 实例化、初始化</span>\njerry <span>=</span> Person<span>(</span><span>'Jerry'</span><span>,</span> <span>20</span><span>)</span>\n\nPerson<span>.</span>age <span>=</span> <span>30</span>\n<span>print</span><span>(</span><span>1</span><span>,</span> Person<span>.</span>age<span>,</span> tom<span>.</span>age<span>,</span> jerry<span>.</span>age<span>)</span> <span># 3, 18, 20</span>\n\n<span>print</span><span>(</span><span>2</span><span>,</span> Person<span>.</span>height<span>,</span> tom<span>.</span>height<span>,</span> jerry<span>.</span>height<span>)</span> <span># 170, 170, 170</span>\njerry<span>.</span>height <span>=</span> <span>175</span>\n<span>print</span><span>(</span><span>3</span><span>,</span> Person<span>.</span>height<span>,</span> tom<span>.</span>height<span>,</span> jerry<span>.</span>height<span>)</span> <span># 170, 170, 175</span>\n\ntom<span>.</span>height <span>+=</span> <span>10</span>\n<span>print</span><span>(</span><span>4</span><span>,</span> Person<span>.</span>height<span>,</span> tom<span>.</span>height<span>,</span> jerry<span>.</span>height<span>)</span> <span># 170, 180, 175</span>\n\nPerson<span>.</span>height <span>+=</span> <span>15</span>\n<span>print</span><span>(</span><span>5</span><span>,</span> Person<span>.</span>height<span>,</span> tom<span>.</span>height<span>,</span> jerry<span>.</span>height<span>)</span> <span># 185, 180, 175</span>\n\nPerson<span>.</span>weight <span>=</span> <span>70</span>\n<span>print</span><span>(</span><span>6</span><span>,</span> Person<span>.</span>weight<span>,</span> tom<span>.</span>weight<span>,</span> jerry<span>.</span>weight<span>)</span> <span># 70, 70, 70</span>\n\n<span>print</span><span>(</span><span>7</span><span>,</span> tom<span>.</span>__dict__<span>[</span><span>'height'</span><span>]</span><span>)</span> <span># 180</span>\n<span>print</span><span>(</span><span>8</span><span>,</span> tom<span>.</span>__dict__<span>[</span><span>'weight'</span><span>]</span><span>)</span> <span># error</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p><strong>总结</strong></p>\n<ul>\n<li>是类的，也是这个类所有实例的，其 实例都可以访问到</li>\n<li>是实例的，就是这个实例自己的，通过类访问不到</li>\n<li>类变量是属于类的变量，这个类的所有实例可以共享这个变量</li>\n</ul>\n<p>对象（实例或类）可以动态的给自己增加一个属性（赋值即定义一个新属性）。这也是动态语言的特性。</p>\n<p><code>实例.__dict__[变量名]</code>和<code>实例.变量</code>都可以访问到实例自己的属性（注意这两种访问是有本质区别的）</p>\n<p>对实例访问来说，实例的同名变量会<strong>隐藏</strong>掉类变量，或者说是覆盖了这个类变量。但是注意类变量还在那里，并没有真正被覆盖。</p>\n<p><strong>实例属性的查找顺序</strong></p>\n<p>指的是实例使用<code>.点号</code>来访问属性，会先找自己的<code>__dict__</code>，如果没有，然后通过属性<code>__class__</code>找到自己的类，再去类的<code>__dict__</code>中找</p>\n<blockquote>\n<p>注意：如果实例使用<code>__dict__[变量名]</code>访问变量，将不会按照上面的查找顺序找变量了，这是指明使用字典的 key 查找，不是属性查找</p>\n</blockquote>\n<p>一般来说，<strong>类变量可使用全大写来命名</strong></p>\n<h3 id=\"类方法和静态方法\"> 类方法和静态方法</h3>\n<p>前面的例子中定义的<code>__init__</code>等方法，这些方法本身都是类的属性，第一个参数必须是 self，而 self 必须指向一个对象，也就是类实例化之后，由实例来调用这个方法。</p>\n<p><strong>普通函数</strong></p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>normal_function</span><span>(</span><span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'普通的函数'</span><span>)</span>\n\n    <span>def</span> <span>method</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'方法'</span><span>)</span>\n\n<span># 调用</span>\nPerson<span>.</span>normal_function<span>(</span><span>)</span> <span># 正常调用</span>\n<span>print</span><span>(</span>Person<span>(</span><span>)</span><span>.</span>normal_function<span>)</span> <span># 可以， 没调用</span>\n<span># print(Person().normal_function()) # 不可以，多传了一个参数</span>\n<span>print</span><span>(</span>Person<span>.</span>__dict__<span>)</span> <span># </span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>Person.normal_function()</p>\n<p>可以放在类中定义，因为这个方法只是被 Person 这个类管理的一个普通的函数， normal_function 是 Person 的一个属性而已。</p>\n<p>由于 normal_function 在定义的时候没有指定形参 self，不能用 Person().normal_method() 调用。\n原因是，Person() 是实例，实例调用的时候，由于做了实例绑定，那么就需要 normal_method 的第一个形参来接受绑定的实例。</p>\n<blockquote>\n<p>注意：虽然语法是对的，但是，没人会这么用，也就是<strong>禁止</strong>这么写</p>\n</blockquote>\n<p><strong>类方法</strong></p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>@classmethod</span>\n    <span>def</span> <span>class_method</span><span>(</span>cls<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'类方法'</span><span>)</span>\n        <span>print</span><span>(</span><span>\"{0}'s name = {0.__name__}\"</span><span>.</span><span>format</span><span>(</span>cls<span>)</span><span>)</span>\n        cls<span>.</span>HEIGHT <span>=</span> <span>170</span>\n\n<span># 调用</span>\nPerson<span>.</span>class_method<span>(</span><span>)</span>\nPerson<span>(</span><span>)</span><span>.</span>class_method<span>(</span><span>)</span>\n<span>print</span><span>(</span>Person<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>\n<li>在类定义中，使用 @classmethod 装饰器修饰的方法</li>\n<li>必须至少有一个参数，且第一个参数留给了 cls, cls 指代调用者即类对象自身</li>\n<li>cls 这个标识符可以是任意合法名称，但是为了易读，请不要修改</li>\n<li>通过 cls 可以直接操作类的属性</li>\n</ul>\n<p>通过类、实例都可以非常方便地调用类方法。 classmethod 装饰器 内存 将类或提取实例的 类 注入到类方法的第一个参数中。</p>\n<blockquote>\n<p>注意：无法通过 cls 操作类的实例</p>\n</blockquote>\n<p><strong>静态方法</strong></p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    HEIGHT <span>=</span> <span>180</span>\n\n    <span>@staticmethod</span>\n    <span>def</span> <span>static_method</span><span>(</span><span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'静态方法'</span><span>)</span>\n        <span>print</span><span>(</span>Person<span>.</span>HEIGHT<span>)</span>\n\n<span># 调用</span>\nPerson<span>.</span>static_method<span>(</span><span>)</span>\nPerson<span>(</span><span>)</span><span>.</span>static_method<span>(</span><span>)</span>\n<span>print</span><span>(</span>Person<span>.</span>__dict__<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>\n<li>在类定义中，使用 @staticmethod 装饰器修饰的方法</li>\n<li>调用时，不会隐式的传入参数</li>\n</ul>\n<p>通过类、实例都可以调用静态方法，不会像普通方式、类方法那样注入参数。</p>\n<p>静态方法，只表明这个方法属于这个名词空间。函数归在一起，方便组织管理</p>\n<p><strong>方法的调用</strong></p>\n<p>类可以定义这么多种方法，究竟如何调用他们？</p>\n<p>类几乎可以调用所有内部定义的方法，但是调用普通的方法时会报错，原因是第一参数应该是累的实例。</p>\n<p>实例也几乎可以调用所有的方法，普通的函数 的调用一般不可能出现，因为原则上不允许这么定义。</p>\n<p>总结：</p>\n<ul>\n<li>类除了普通方法都可以调用</li>\n<li>普通方法需要对象的实例作为第一参数</li>\n<li>实例可以调用所有类中定义的方法（包括类方法、静态方法），普通方法传入实例自身，静态方法和类方法内部都要使用实例的类</li>\n</ul>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>method</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>\"{}\"</span><span>.</span><span>format</span><span>(</span>self<span>)</span><span>)</span>\n        <span>print</span><span>(</span><span>\"{}\"</span><span>.</span><span>format</span><span>(</span>__class__<span>)</span><span>)</span>\n        <span>print</span><span>(</span><span>\"{}\"</span><span>.</span><span>format</span><span>(</span>__class__<span>.</span>__name__<span>)</span><span>)</span>\n        <span>print</span><span>(</span><span>\"{}\"</span><span>.</span><span>format</span><span>(</span>__name__<span>)</span><span>)</span>\n\ntom <span>=</span> Person<span>(</span><span>)</span>\ntom<span>.</span>method<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\nPerson<span>.</span>method<span>(</span><span>1</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\nPerson<span>.</span>method<span>(</span>tom<span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\ntom<span>.</span>__class__<span>.</span>method<span>(</span>tom<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>tom.method() 调用的时候，会绑定实例，调用 method 方法是，实例 tom 会注入到 method 中，这样第一参数就满足了。</p>\n<p>Person.method() ，使用类调用，不会有实例绑定，调用 method 方法时，就缺少了第一参数，可以手动的填入。</p>\n<h3 id=\"访问控制\"> 访问控制</h3>\n<p><strong>私有（Private） 成员</strong></p>\n<p>在 Python 中，在类变量或实例变量前使用两个下划线的变量，称为私有成员，包括私有属性、私有方法。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>=</span><span>18</span><span>)</span><span>:</span>\n        self<span>.</span>a <span>=</span> <span>'1'</span>\n        self<span>.</span>__name <span>=</span> name\n        self<span>.</span>__age <span>=</span> age\n\n    <span>def</span> <span>__showage</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>__age<span>)</span>\n\n<span>print</span><span>(</span>Person<span>.</span>__name<span>)</span>  <span># 都不可以调用</span>\n<span>print</span><span>(</span>Person<span>.</span>__showage<span>)</span>\ntom <span>=</span> Person<span>(</span><span>'tom'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>__name<span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>__showage<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>在类的定义范围内，使用前置双下划线的标识符，在类外部不能直接访问。</p>\n<p><strong>私有成员本质</strong></p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>=</span><span>18</span><span>)</span><span>:</span>\n        self<span>.</span>__name <span>=</span> name\n        self<span>.</span>__age <span>=</span> age\n\n    <span>def</span> <span>__showage</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>__age<span>)</span>\n\n<span>print</span><span>(</span>Person<span>.</span>__dict__<span>)</span>\ntom <span>=</span> Person<span>(</span><span>'tom'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>__dict__<span>)</span>\n<span># 结果如下</span>\n<span>{</span><span>'__module__'</span><span>:</span> <span>'__main__'</span><span>,</span> <span>'__init__'</span><span>:</span> <span>&lt;</span>function Person<span>.</span>__init__ at <span>0x0000029B2B86BB80</span><span>></span><span>,</span> <span>'_Person__showage'</span><span>:</span> <span>&lt;</span>function Person<span>.</span>__showage at <span>0x0000029B2B86BC10</span><span>></span><span>,</span> <span>'__dict__'</span><span>:</span> <span>&lt;</span>attribute <span>'__dict__'</span> of <span>'Person'</span> objects<span>></span><span>,</span> <span>'__weakref__'</span><span>:</span> <span>&lt;</span>attribute <span>'__weakref__'</span> of <span>'Person'</span> objects<span>></span><span>,</span> <span>'__doc__'</span><span>:</span> <span>None</span><span>}</span>\n<span>{</span><span>'_Person__name'</span><span>:</span> <span>'tom'</span><span>,</span> <span>'_Person__age'</span><span>:</span> <span>18</span><span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>打开类字典和实例字典，一目了然，都被悄悄的改了名称，所以使用定义的名字就访问不了了。</p>\n<p>名称都被前置了<code>_类名</code>前缀。</p>\n<p>如果知道了改后的名称，照样可以访问，就绕过了Python做的限制。</p>\n<blockquote>\n<p>Python就没有真正的私有成员！但是请遵守这个约定，不要在类外面访问类私有或者实例的私有成员。因为类的作用就是封装，私有成员就是要被隐藏的数据或方法。</p>\n</blockquote>\n<p><strong>保护成员</strong></p>\n<p>在类变量或实例变量前使用一个下划线的变量，称为保护成员。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>,</span> age<span>=</span><span>18</span><span>)</span><span>:</span>\n        self<span>.</span>_name <span>=</span> name\n        self<span>.</span>_age <span>=</span> age\n\n    <span>def</span> <span>_showage</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span>self<span>.</span>_age<span>)</span>\n\n<span>print</span><span>(</span>Person<span>.</span>__dict__<span>)</span>\ntom <span>=</span> Person<span>(</span><span>'Tom'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>__dict__<span>)</span>\ntom<span>.</span>_showage<span>(</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>_name<span>,</span> tom<span>.</span>_age<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>保护成员不是 Python 中定义的，是 Python 编程者自我约定俗称的，请遵守这个约定。</p>\n<p><strong>总结</strong></p>\n<p>在 Python 中使用 _单下划线或者__双下划线来表示一个成员被保护或者私有化隐藏起来。</p>\n<p>但是，不管使用什么样的访问控制，都不能真正的阻止用户修改类的成员。Python 中没有绝对的安全的保护成员或者私有成员。</p>\n<p>因此，前导的下划线只是一种警告或者提醒，请遵守这个约定。</p>\n<p>在 Pycharm 中，已经对访问私有、保护成员访问的时候不会直接提示，就是一种善意的提醒。</p>\n<h3 id=\"属性装饰器\"> 属性装饰器</h3>\n<p>一般好的设计是：把实例的某些属性保护起来，不让外部直接访问，外部使用 getter 读取属性和 setter 方法设置属性。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>)</span><span>:</span>\n        self<span>.</span>_name <span>=</span> name\n\n    <span>def</span> <span>name</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>_name\n\n    <span>def</span> <span>set_name</span><span>(</span>self<span>,</span>value<span>)</span><span>:</span>\n        self<span>.</span>_name <span>=</span> value\n\ntom <span>=</span> Person<span>(</span><span>'Tom'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>name<span>(</span><span>)</span><span>)</span>\ntom<span>.</span>set_name<span>(</span><span>'Jerry'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>name<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>Python 提供了 property 装饰器，简化调用。</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>)</span><span>:</span>\n        self<span>.</span>_name <span>=</span> name\n\n    <span>@property</span>\n    <span>def</span> <span>name</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>_name\n\n    <span>@name<span>.</span>setter</span>\n    <span>def</span> <span>name</span><span>(</span>self<span>,</span>value<span>)</span><span>:</span>\n        self<span>.</span>_name <span>=</span> value\n\n    <span>@name<span>.</span>deleter</span>\n    <span>def</span> <span>name</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'del name'</span><span>)</span>\n\ntom <span>=</span> Person<span>(</span><span>'Tom'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>name<span>)</span>\ntom<span>.</span>name <span>=</span> <span>'Jerry'</span>\n<span>print</span><span>(</span>tom<span>.</span>name<span>)</span>\n<span>del</span> tom<span>.</span>name\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>特别注意：使用 property 装饰器的时候这三个方法同名</p>\n<p>property 装饰器</p>\n<ul>\n<li>后面跟的函数名就是以后的属性名。它就是getter。这个必须有，有了它至少是只读属性</li>\n<li>setter 装饰器\n<ul>\n<li>与属性名同名，且接收2个参数，第一个是 self， 第二个是将要赋值的值。有了它，属性可写</li>\n</ul>\n</li>\n<li>deleter 装饰器\n<ul>\n<li>可以控制是否删除属性。很少用</li>\n</ul>\n</li>\n<li>property 装饰器必须在前，setter、deleter 装饰器在后</li>\n<li>property 装饰器能通过简单的方式，把对方法的操作编程对属性的访问，并起到了一定隐藏效果</li>\n</ul>\n<p>其他方法</p>\n<div><pre><code><span>class</span> <span>Person</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>)</span><span>:</span>\n        self<span>.</span>_name <span>=</span> name\n\n    <span>def</span> <span>get_name</span><span>(</span>self<span>)</span><span>:</span>\n        <span>return</span> self<span>.</span>_name\n\n    <span>def</span> <span>set_name</span><span>(</span>self<span>,</span> value<span>)</span><span>:</span>\n        self<span>.</span>_name <span>=</span> value\n\n    <span>def</span> <span>del_name</span><span>(</span>self<span>)</span><span>:</span>\n        <span># del self._name</span>\n        <span>print</span><span>(</span><span>'del name'</span><span>)</span>\n\n    name <span>=</span> <span>property</span><span>(</span>get_name<span>,</span> set_name<span>,</span> del_name<span>)</span>\n\ntom <span>=</span> Person<span>(</span><span>'Tom'</span><span>)</span>\n<span>print</span><span>(</span>tom<span>.</span>name<span>)</span>\ntom<span>.</span>name <span>=</span> <span>'Jerry'</span>\n<span>print</span><span>(</span>tom<span>.</span>name<span>)</span>\n<span>del</span> tom<span>.</span>name\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>这种定义方式，适合 get_name、set_name、del_name 还可以单独使用，即可以当方法使用。</p>\n<h3 id=\"封装总结\"> 封装总结</h3>\n<p>面向对象的三要素之一，封装 Encapsulation</p>\n<p>封装</p>\n<ul>\n<li>将数据和操作组织到类中，即属性和方法</li>\n<li>将数据隐藏起来，给使用者提供操作（方法）。使用者通过操作就可以获取或者修改数据。getter 和 setter</li>\n<li>通过访问控制，暴露适当的数据和操作给用户，该隐藏的隐藏起来，例如保护成员和私有成员。</li>\n</ul>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "07 序列化和反序列化",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-serialize/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-serialize/",
      "content_html": "<h1 id=\"_07-序列化和反序列化\"> 07 序列化和反序列化</h1>\n<h2 id=\"csv\"> csv</h2>\n<h3 id=\"csv-文件简介\"> csv 文件简介</h3>\n<p>参看 RFC 4180\nhttp://www.ietf.org/rfc/rfc4180.txt</p>\n<p>逗号分隔值Comma-Separated Values。\nCSV 是一个被行分隔符、列分隔符划分成行和列的文本文件。\nCSV 不指定字符编码。</p>\n<p>行分隔符为\\r\\n，最后一行可以没有换行符\n列分隔符常为逗号或者制表符。\n每一行称为一条记录record</p>\n<p>字段可以使用双引号括起来，也可以不使用。如果字段中出现了双引号、逗号、换行符必须使用双引号\n括起来。如果字段的值是双引号，使用两个双引号表示一个转义。</p>\n<p>表头可选，和字段列对齐就行了。</p>\n<h3 id=\"csv-模块\"> csv 模块</h3>\n<p><code>reader(csvfile, dialect='excel', **fmtparams)</code>\n返回reader对象，是一个行<strong>迭代器</strong>。</p>\n<p>默认使用excel方言，如下：</p>\n<ul>\n<li>delimiter 列分隔符,逗号</li>\n<li>lineterminator 行分隔符\\r\\n</li>\n<li>quotechar 字段的引用符号，缺省为 &quot; 双引号</li>\n<li>双引号的处理\n<ul>\n<li>doublequote 双引号的处理，默认为True。如果碰到数据中有双引号，而quotechar也是双引号，True则使用2个双引号表示，False表示使用转义字符将作为双引号的前缀</li>\n<li>escapechar 一个转义字符，默认为None</li>\n<li>writer = csv.writer(f, doublequote=False, escapechar='@') 遇到双引号，则必须提供转义字符</li>\n</ul>\n</li>\n<li>quoting 指定双引号的规则\n<ul>\n<li>QUOTE_ALL 所有字段</li>\n<li>QUOTE_MINIMAL特殊字符字段，Excel方言使用该规则</li>\n<li>QUOTE_NONNUMERIC非数字字段</li>\n<li>QUOTE_NONE都不使用引号。</li>\n</ul>\n</li>\n</ul>\n<p><code>writer(csvfile, dialect='excel', **fmtparams)</code>\n返回DictWriter的实例。\n主要方法有writerow、writerows。</p>\n<p><code>writerow(iterable)</code></p>\n<div><pre><code><span>import</span> csv\nrows <span>=</span> <span>[</span>\n    <span>(</span><span>'id'</span><span>,</span> <span>'name'</span><span>,</span> <span>'age'</span><span>,</span> <span>'comment'</span><span>)</span><span>,</span>\n    <span>[</span><span>1</span><span>,</span> <span>'tom'</span><span>,</span> <span>20</span><span>,</span> <span>'tom'</span><span>]</span><span>,</span>\n    <span>(</span><span>2</span><span>,</span> <span>'jerry'</span><span>,</span> <span>18</span><span>,</span> <span>'jerry'</span><span>)</span><span>,</span>\n    <span>(</span><span>3</span><span>,</span> <span>'justin'</span><span>,</span> <span>22</span><span>,</span> <span>'just\\t\"in'</span><span>)</span><span>,</span>\n    <span>\"abcdefgh\"</span><span>,</span>\n    <span>(</span><span>(</span><span>1</span><span>,</span><span>)</span><span>,</span> <span>2</span><span>,</span> <span>[</span><span>3</span><span>]</span><span>)</span>\n<span>]</span>\n\n<span># newline=''，表示写入时，不要做\\n的替换，那么输出就是\\r\\n</span>\n<span>with</span> <span>open</span><span>(</span><span>'o:/test.csv'</span><span>,</span> <span>'w+'</span><span>,</span> encoding<span>=</span><span>'utf-8'</span><span>,</span> newline<span>=</span><span>''</span><span>)</span> <span>as</span> f<span>:</span>\n    writer <span>=</span> csv<span>.</span>writer<span>(</span>f<span>)</span>\n    writer<span>.</span>writerow<span>(</span>rows<span>[</span><span>0</span><span>]</span><span>)</span>\n    writer<span>.</span>writerows<span>(</span>rows<span>[</span><span>1</span><span>:</span><span>]</span><span>)</span>\n    \n<span># newline=''，表示读取时，也不做\\n的替换</span>\n<span>with</span> <span>open</span><span>(</span><span>'o:/test.csv'</span><span>,</span> encoding<span>=</span><span>'utf-8'</span><span>,</span> newline<span>=</span><span>''</span><span>)</span> <span>as</span> f<span>:</span>\n    reader <span>=</span> csv<span>.</span>reader<span>(</span>f<span>)</span> <span># 行迭代器</span>\n    <span>print</span><span>(</span><span>next</span><span>(</span>reader<span>)</span><span>)</span>\n    <span>print</span><span>(</span><span>next</span><span>(</span>reader<span>)</span><span>)</span>\n    <span>for</span> line <span>in</span> reader<span>:</span>\n        <span>print</span><span>(</span>line<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id=\"ini-文件处理\"> ini 文件处理</h2>\n<p>略</p>\n<h2 id=\"序列化和反序列化\"> 序列化和反序列化</h2>\n<h3 id=\"为什么要序列化\"> 为什么要序列化</h3>\n<p>内存中的字典、列表、集合以及各种对象，如何保存到一个文件中？</p>\n<p>如果是自己定义的类的实例，如何保存到一个文件中？</p>\n<p>如何从文件中读取数据，并让它们在内存中再次恢复成自己对应的类的实例？</p>\n<p>要设计一套协议，按照某种规则，把内存中数据保存到文件中。文件是一个字节序列，所以必须把数据转换成字节序列，输出到文件。这就是序列化。</p>\n<p>反之，从文件的字节序列恢复到内存并且还是原来的类型，就是反序列化。</p>\n<h3 id=\"定义\"> 定义</h3>\n<p>serialization 序列化\n将内存中对象存储下来，把它变成一个个字节。-&gt; 二进制</p>\n<p>deserialization 反序列化\n将文件的一个个字节恢复成内存中对象。&lt;- 二进制</p>\n<p>序列化保存到文件就是持久化。\n可以将数据序列化后持久化，或者网络传输；也可以将从文件中或者网络接收到的字节序列反序列化。</p>\n<p>Python 提供了pickle 库。</p>\n<h3 id=\"pickle\"> pickle</h3>\n<p>Python中的序列化、反序列化模块。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dumps</td>\n<td>对象序列化为bytes对象</td>\n</tr>\n<tr>\n<td>dump</td>\n<td>对象序列化到文件对象，就是存入文件</td>\n</tr>\n<tr>\n<td>loads</td>\n<td>从bytes对象反序列化</td>\n</tr>\n<tr>\n<td>load</td>\n<td>对象反序列化，从文件读取数据</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>import</span> pickle\n\nfilename <span>=</span> <span>'o:/ser'</span>\n\n<span># 序列化后看到什么</span>\ni <span>=</span> <span>99</span>\nc <span>=</span> <span>'c'</span>\nl <span>=</span> <span>list</span><span>(</span><span>'123'</span><span>)</span>\nd <span>=</span> <span>{</span><span>'a'</span><span>:</span><span>127</span><span>,</span> <span>'b'</span><span>:</span><span>'abc'</span><span>,</span> <span>'c'</span><span>:</span><span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>}</span>\n\n<span># 序列化</span>\n<span>with</span> <span>open</span><span>(</span>filename<span>,</span> <span>'wb'</span><span>)</span> <span>as</span> f<span>:</span>\n    pickle<span>.</span>dump<span>(</span>i<span>,</span> f<span>)</span>\n    pickle<span>.</span>dump<span>(</span>c<span>,</span> f<span>)</span>\n    pickle<span>.</span>dump<span>(</span>l<span>,</span> f<span>)</span>\n    pickle<span>.</span>dump<span>(</span>d<span>,</span> f<span>)</span>\n\n<span># 反序列化</span>\n<span>with</span> <span>open</span><span>(</span>filename<span>,</span> <span>'rb'</span><span>)</span> <span>as</span> f<span>:</span>\n    <span>print</span><span>(</span>f<span>.</span>read<span>(</span><span>)</span><span>,</span> f<span>.</span>seek<span>(</span><span>0</span><span>)</span><span>)</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>4</span><span>)</span><span>:</span>\n        x <span>=</span> pickle<span>.</span>load<span>(</span>f<span>)</span>\n        <span>print</span><span>(</span>x<span>,</span> <span>type</span><span>(</span>x<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h3 id=\"序列化应用\"> 序列化应用</h3>\n<p>一般来说，本地序列化的情况，应用较少。大多数场景都应用在网络传输中。\n将数据序列化后通过网络传输到远程节点，远程服务器上的服务将接收到的数据反序列化后，就可以使用了。\n但是，要注意一点，远程接收端，反序列化时必须有对应的数据类型，否则就会报错。尤其是自定义\n类，必须远程得有一致的定义。</p>\n<p>现在，大多数项目，都不是单机的，也不是单服务的，需要多个程序之间配合。需要通过网络将数据传送到其他节点上去，这就需要大量的序列化、反序列化过程。</p>\n<p>但是，问题是，Python程序之间可以都用pickle解决序列化、反序列化，如果是跨平台、跨语言、跨协议pickle就不太适合了，就需要公共的协议。例如XML、Json、Protocol Buffer、msgpack等。</p>\n<p>不同的协议，效率不同、学习曲线不同，适用不同场景，要根据不同的情况分析选型。</p>\n<h2 id=\"json\"> Json</h2>\n<p>SON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript\n1999年ES3 的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。\nhttp://json.org/\nhttps://www.json.org/json-zh.html</p>\n<h3 id=\"json的数据类型\"> Json的数据类型</h3>\n<p><strong>值</strong></p>\n<p>双引号引起来的字符串、数值、true和false、null、对象、数组，这些都是值</p>\n<p><strong>字符串</strong></p>\n<p>由双引号包围起来的任意字符的组合，可以有转义字符。</p>\n<p><strong>数值</strong>\n有正负，有整数、浮点数。</p>\n<p><strong>对象</strong>\n无序的键值对的集合\n格式: {key1:value1, ... ,keyn:valulen}\nkey必须是一个字符串，需要双引号包围这个字符串。\nvalue可以是任意合法的值。</p>\n<p><strong>数组</strong></p>\n<p>有序的值的集合\n格式：[val1,...,valn]</p>\n<p>实例</p>\n<div><pre><code>{\n  &quot;person&quot;: [\n    {\n      &quot;name&quot;: &quot;tom&quot;,\n      &quot;age&quot;: 18\n    },\n    {\n      &quot;name&quot;: &quot;jerry&quot;,\n      &quot;age&quot;: 16\n    }\n  ],\n  &quot;total&quot;: 2\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id=\"json-模块\"> json 模块</h3>\n<p><strong>python 与json</strong></p>\n<p>Python支持少量内建数据类型到Json类型的转换。</p>\n<table>\n<thead>\n<tr>\n<th>Python 类型</th>\n<th>Json 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True</td>\n<td>true</td>\n</tr>\n<tr>\n<td>False</td>\n<td>false</td>\n</tr>\n<tr>\n<td>None</td>\n<td>null</td>\n</tr>\n<tr>\n<td>str</td>\n<td>string</td>\n</tr>\n<tr>\n<td>int</td>\n<td>integer</td>\n</tr>\n<tr>\n<td>float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>list</td>\n<td>array</td>\n</tr>\n<tr>\n<td>dict</td>\n<td>object</td>\n</tr>\n</tbody>\n</table>\n<p><strong>常用方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>Python 类型</th>\n<th>Json 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dumps</td>\n<td>json 编码</td>\n</tr>\n<tr>\n<td>dump</td>\n<td>json 编码并存入文件</td>\n</tr>\n<tr>\n<td>loads</td>\n<td>json 解码</td>\n</tr>\n<tr>\n<td>load</td>\n<td>json 解码，从文件读取数据</td>\n</tr>\n</tbody>\n</table>\n<div><pre><code><span>import</span> json\n\nd <span>=</span> <span>{</span><span>'name'</span><span>:</span><span>'Tom'</span><span>,</span> <span>'age'</span><span>:</span><span>20</span><span>,</span> <span>'interest'</span><span>:</span><span>(</span><span>'music'</span><span>,</span> <span>'movie'</span><span>)</span><span>,</span> <span>'class'</span><span>:</span><span>[</span><span>'python'</span><span>]</span><span>}</span>\nj <span>=</span> json<span>.</span>dumps<span>(</span>d<span>)</span>\n<span>print</span><span>(</span>j<span>,</span> <span>type</span><span>(</span>j<span>)</span><span>)</span> <span># 请注意引号、括号的变化，注意数据类型的变化</span>\n\nd1 <span>=</span> json<span>.</span>loads<span>(</span>j<span>)</span>\n<span>print</span><span>(</span>d1<span>)</span>\n<span>print</span><span>(</span><span>id</span><span>(</span>d<span>)</span><span>,</span> <span>id</span><span>(</span>d1<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>一般 json 编码的数据很少落地，数据都是通过网络传输。传输的时候，要考虑压缩它。</p>\n<p>本质上来说它就是个文本，就是个字符串。</p>\n<p>json 很简单，几乎编程语言都支持 json，所以应用范围十分广泛。</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "16 SocketServer",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-socketserver/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-socketserver/",
      "content_html": "<h1 id=\"_16-socketserver\"> 16 SocketServer</h1>\n<p>socket 编程过于底层，编程虽然有套路，但是想要写出健壮的代码还是比较困难的，所以很多语言都对 socket 底层 API 进行封装，Python 的封装就是 socketserver 模块。它是网络服务编程框架，便于企业级快速开发。</p>\n<h2 id=\"类的继承关系\"> 类的继承关系</h2>\n<div><pre><code>+------------+\n| BaseServer |\n+------------+\n      |\n      v\n+-----------+        +------------------+\n| TCPServer |-------&gt;| UnixStreamServer |\n+-----------+        +------------------+\n      |\n      v\n+-----------+        +--------------------+\n| UDPServer |-------&gt;| UnixDatagramServer |\n+-----------+        +--------------------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>SocketServer简化了网络服务器的编写。</p>\n<p>它有4个同步类：</p>\n<ul>\n<li>TCPServer</li>\n<li>UDPServer</li>\n<li>UnixStreamServer</li>\n<li>UnixDatagramServer。</li>\n</ul>\n<p>2个 Mixin 类：ForkingMixIn 和 ThreadingMixIn 类，用来支持异步。由此得到</p>\n<ul>\n<li>class ForkingUDPServer(ForkingMixIn, UDPServer): pass</li>\n<li>class ForkingTCPServer(ForkingMixIn, TCPServer): pass</li>\n<li>class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass</li>\n<li>class ThreadingTCPServer(ThreadingMixIn, TCPServer): pass</li>\n</ul>\n<p>fork是创建多进程，thread是创建多线程。\nfork需要操作系统支持，Windows不支持。</p>\n<h2 id=\"编程接口\"> 编程接口</h2>\n<div><pre><code>socketserver.BaseServer(server_address, RequestHandlerClass)\n</code></pre>\n<div><span>1</span><br></div></div><p>需要提供服务器绑定的地址信息，和用于处理请求的 RequestHandlerClass 类。</p>\n<p>RequestHandlerClass 类必须是 BaseRequestHandler 类的子类，在 BaseServer 中代码如下：</p>\n<div><pre><code><span># BaseServer代码</span>\n<span>class</span> <span>BaseServer</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> server_address<span>,</span> RequestHandlerClass<span>)</span><span>:</span>\n        <span>\"\"\"Constructor. May be extended, do not override.可扩展不可覆盖\"\"\"</span>\n        self<span>.</span>server_address <span>=</span> server_address\n        self<span>.</span>RequestHandlerClass <span>=</span> RequestHandlerClass <span># 请求处理类</span>\n        self<span>.</span>__is_shut_down <span>=</span> threading<span>.</span>Event<span>(</span><span>)</span>\n        self<span>.</span>__shutdown_request <span>=</span> <span>False</span>\n    <span>def</span> <span>finish_request</span><span>(</span>self<span>,</span> request<span>,</span> client_address<span>)</span><span>:</span> <span># 处理请求的方法</span>\n        <span>\"\"\"Finish one request by instantiating RequestHandlerClass.\"\"\"</span>\n        self<span>.</span>RequestHandlerClass<span>(</span>request<span>,</span> client_address<span>,</span> self<span>)</span> <span>#RequestHandlerClass构造</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><strong>BaseRequestHandler类</strong></p>\n<p>它是和用户连接的用户请求处理类的基类，定义为</p>\n<div><pre><code>BaseRequestHandler(request, client_address, server)\n</code></pre>\n<div><span>1</span><br></div></div><p>服务端 Server 实例接收用户请求后，最后会实例化这个类。\n它被初始化时，送入3个构造参数：request, client_address, server自身\n以后就可以在 BaseRequestHandler 类的实例上使用以下属性：</p>\n<ul>\n<li>self.request是和客户端的连接的socket对象</li>\n<li>self.server是TCPServer实例本身</li>\n<li>self.client_address是客户端地址</li>\n</ul>\n<p>这个类在初始化的时候，它会依次调用3个方法。子类可以覆盖这些方法。</p>\n<div><pre><code><span># BaseRequestHandler要子类覆盖的方法</span>\n<span>class</span> <span>BaseRequestHandler</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> request<span>,</span> client_address<span>,</span> server<span>)</span><span>:</span>\n        self<span>.</span>request <span>=</span> request\n        self<span>.</span>client_address <span>=</span> client_address\n        self<span>.</span>server <span>=</span> server\n        self<span>.</span>setup<span>(</span><span>)</span>\n        <span>try</span><span>:</span>\n            self<span>.</span>handle<span>(</span><span>)</span>\n        <span>finally</span><span>:</span>\n            self<span>.</span>finish<span>(</span><span>)</span>\n            \n    <span>def</span> <span>setup</span><span>(</span>self<span>)</span><span>:</span> <span># 每一个连接初始化</span>\n        <span>pass</span>\n    \n    <span>def</span> <span>handle</span><span>(</span>self<span>)</span><span>:</span> <span># 每一次请求处理</span>\n        <span>pass</span>\n    \n    <span>def</span> <span>finish</span><span>(</span>self<span>)</span><span>:</span> <span># 每一个连接清理</span>\n        <span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>测试代码</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> socketserver\n\n<span>class</span> <span>MyHandler</span><span>(</span>socketserver<span>.</span>BaseRequestHandler<span>)</span><span>:</span>\n    <span>def</span> <span>handle</span><span>(</span>self<span>)</span><span>:</span>\n        <span># super().handle() # 可以不调用，父类handle什么都没有做</span>\n        <span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>server<span>)</span> <span># 服务</span>\n        <span>print</span><span>(</span>self<span>.</span>request<span>)</span> <span># 服务端负责客户端连接请求的socket对象</span>\n        <span>print</span><span>(</span>self<span>.</span>__dict__<span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>server<span>.</span>__dict__<span>)</span> <span># 能看到负责accept的socket</span>\n\n        <span>print</span><span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span>\n        <span>print</span><span>(</span>threading<span>.</span>current_thread<span>(</span><span>)</span><span>)</span>\n        <span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\naddr <span>=</span> <span>(</span><span>'127.0.0.1'</span><span>,</span> <span>9999</span><span>)</span>\nserver <span>=</span> socketserver<span>.</span>ThreadingTCPServer<span>(</span>addr<span>,</span> MyHandler<span>)</span> <span># 注意参数是MyHandler类</span>\n<span>#server.handle_request() # 一次行</span>\nserver<span>.</span>serve_forever<span>(</span><span>)</span> <span># 永久循环执行</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>测试结果说明，handle 方法相当于 socket 的 recv 方法。\n每个不同的连接上的请求过来后，生成这个连接的 socket 对象即 self.request，客户端地址是 self.client_address。</p>\n<p>问题\n测试过程中，上面代码，连接后立即断开了，为什么？\n怎样才能客户端和服务器端长时间连接？</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> socketserver\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>class</span> <span>MyHandler</span><span>(</span>socketserver<span>.</span>BaseRequestHandler<span>)</span><span>:</span>\n    <span>def</span> <span>handle</span><span>(</span>self<span>)</span><span>:</span>\n        <span># super().handle() # 可以不调用，父类handle什么都没有做</span>\n        <span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>server<span>)</span> <span># 服务</span>\n        <span>print</span><span>(</span>self<span>.</span>request<span>)</span> <span># 服务端负责客户端连接请求的socket对象</span>\n        <span>print</span><span>(</span>self<span>.</span>client_address<span>)</span> <span># 客户端地址</span>\n        <span>print</span><span>(</span>self<span>.</span>__dict__<span>)</span>\n        <span>print</span><span>(</span>self<span>.</span>server<span>.</span>__dict__<span>)</span> <span># 能看到负责accept的socket</span>\n\n        <span>print</span><span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span>\n        <span>print</span><span>(</span>threading<span>.</span>current_thread<span>(</span><span>)</span><span>)</span>\n        <span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n        <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>3</span><span>)</span><span>:</span>\n            data <span>=</span> self<span>.</span>request<span>.</span>recv<span>(</span><span>1024</span><span>)</span>\n            logging<span>.</span>info<span>(</span>data<span>)</span>\n        logging<span>.</span>info<span>(</span><span>'====end===='</span><span>)</span>\n\naddr <span>=</span> <span>(</span><span>'127.0.0.1'</span><span>,</span> <span>9999</span><span>)</span>\nserver <span>=</span> socketserver<span>.</span>ThreadingTCPServer<span>(</span>addr<span>,</span> MyHandler<span>)</span> <span># 注意参数是MyHandler类</span>\n<span>#server.handle_request() # 一次行</span>\nserver<span>.</span>serve_forever<span>(</span><span>)</span> <span># 永久循环执行</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>将ThreadingTCPServer换成TCPServer，同时连接2个客户端观察效果。</p>\n<p>ThreadingTCPServer是异步的，可以同时处理多个连接。</p>\n<p>TCPServer是同步的，一个连接处理完了，即一个连接的handle方法执行完了，才能处理另一个连接，且<strong>只有主线程</strong>。\n总结\n创建服务器需要几个步骤：</p>\n<ol>\n<li>从BaseRequestHandler类派生出子类，并覆盖其handle()方法来创建请求处理程序类，此方法将处理传入请求</li>\n<li>实例化一个服务器类，传参服务器的地址和请求处理类</li>\n<li>调用服务器实例的handle_request()或serve_forever()方法</li>\n<li>调用server_close()关闭套接字</li>\n</ol>\n<h2 id=\"实现-echoserver\"> 实现 EchoServer</h2>\n<p>顾名思义，Echo，来什么消息回显什么消息\n客户端发来什么信息，返回什么信息</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> socketserver\n\n<span>class</span> <span>Handler</span><span>(</span>socketserver<span>.</span>BaseRequestHandler<span>)</span><span>:</span>\n    <span>def</span> <span>setup</span><span>(</span>self<span>)</span><span>:</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>setup<span>(</span><span>)</span>\n        self<span>.</span>event <span>=</span> threading<span>.</span>Event<span>(</span><span>)</span>\n\n    <span>def</span> <span>finish</span><span>(</span>self<span>)</span><span>:</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>finish<span>(</span><span>)</span>\n        self<span>.</span>event<span>.</span><span>set</span><span>(</span><span>)</span>\n\n    <span>def</span> <span>handle</span><span>(</span>self<span>)</span><span>:</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>handle<span>(</span><span>)</span>\n        <span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            data <span>=</span> self<span>.</span>request<span>.</span>recv<span>(</span><span>1024</span><span>)</span><span>.</span>decode<span>(</span><span>)</span>\n            <span>print</span><span>(</span>data<span>)</span>\n            msg <span>=</span> <span>'{} {}'</span><span>.</span><span>format</span><span>(</span>self<span>.</span>client_address<span>,</span> data<span>)</span><span>.</span>encode<span>(</span><span>)</span>\n            self<span>.</span>request<span>.</span>send<span>(</span>msg<span>)</span>\n\nserver <span>=</span> socketserver<span>.</span>ThreadingTCPServer<span>(</span><span>(</span><span>'127.0.0.1'</span><span>,</span> <span>9999</span><span>)</span><span>,</span> Handler<span>)</span>\n<span>print</span><span>(</span>server<span>)</span>\nthreading<span>.</span>Thread<span>(</span>target<span>=</span>server<span>.</span>serve_forever<span>,</span> name<span>=</span><span>'EchoServer'</span><span>,</span> daemon<span>=</span><span>True</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    cmd <span>=</span> <span>input</span><span>(</span><span>'>>'</span><span>)</span>\n    <span>if</span> cmd <span>==</span> <span>'quit'</span><span>:</span>\n        server<span>.</span>server_close<span>(</span><span>)</span>\n        <span>break</span>\n    <span>print</span><span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><h2 id=\"总结\"> 总结</h2>\n<p>为每一个连接提供 RequestHandlerClass 类实例，依次调用 setup、handle、finish 方法，且使用了try...finally结构保证 finish 方法一定能被调用。这些方法依次执行完成，如果想维持这个连接和客户端通信，就需要 handle 函数中使用循环。</p>\n<p>socketserver 模块提供的不同的类，但是编程接口是一样的，即使是多进程、多线程的类也是一样，大大减少了编程的难度。\n将 socket 编程简化，只需要程序员关注数据处理本身，实现 Handler 类就行了。这种风格在 Python 十分常见。</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "15 TCP 编程",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-tcp-pg/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-tcp-pg/",
      "content_html": "<h1 id=\"_15-tcp-编程\"> 15 TCP 编程</h1>\n<h2 id=\"socket介绍\"> Socket介绍</h2>\n<p><strong>Socket 套接字</strong>。Socket是一种通用的网络编程接口，和网络层次没有一一对应的关系。</p>\n<p>Python 中标准库中提供了 socket 模块。socket 模块中也提供了 socket 类，实现了对底层接口的封装，\nsocket 模块是非常底层的接口库。</p>\n<p>socke类定义为</p>\n<div><pre><code>socket<span>(</span>self<span>,</span> family<span>=</span>AF_INET<span>,</span> <span>type</span><span>=</span>SOCK_STREAM<span>,</span> proto<span>=</span><span>0</span><span>,</span> fileno<span>=</span><span>None</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>协议族</strong>\nAF表示Address Family，用于socket()第一个参数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AF_INET</td>\n<td>IPV4</td>\n</tr>\n<tr>\n<td>AF_INET6</td>\n<td>IPV6</td>\n</tr>\n<tr>\n<td>AF_UNIX</td>\n<td>Unix Domain Socket，windows没有</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Socket 类型</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SOCK_STREAM</td>\n<td>SOCK_STREAM</td>\n</tr>\n<tr>\n<td>SOCK_DGRAM</td>\n<td>无连接的数据报文套接字。UDP协议</td>\n</tr>\n</tbody>\n</table>\n<p>TCP 协议是流协议，也就是一大段数据看做字节流，一段段持续发送这些字节。</p>\n<p>UDP 协议是数据报协议，每一份数据封在一个单独的数据报中，一份一份发送数据。</p>\n<p><strong>socket 常用方法</strong></p>\n<p>socket 类创建出 socket 对象，这个对象常用方法如下</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>socket.recv(bufsize[, flags])</strong></td>\n<td>获取数据。默认是阻塞的方式</td>\n</tr>\n<tr>\n<td><strong>socket.recvfrom(bufsize[, flags])</strong></td>\n<td>获取数据，返回一个二元组(bytes, address)</td>\n</tr>\n<tr>\n<td>socket.recv_into(buffer[, nbytes[,flags]])</td>\n<td>获取到nbytes的数据后，存储到buffer中。如果nbytes没有指定或0，将buffer大小的数据存入buffer中。返回接收的字节数。</td>\n</tr>\n<tr>\n<td>socket.recvfrom_into(buffer[, nbytes[,flags]])</td>\n<td>获取数据，返回一个二元组(bytes, address)到buffer中</td>\n</tr>\n<tr>\n<td><strong>socket.send(bytes[, flags])</strong></td>\n<td>TCP发送数据</td>\n</tr>\n<tr>\n<td>socket.sendall(bytes[, flags])</td>\n<td>TCP发送全部数据，成功返回None</td>\n</tr>\n<tr>\n<td><strong>socket.sendto(string[,flag],address)</strong></td>\n<td>UDP发送数据</td>\n</tr>\n<tr>\n<td>socket.sendfile(file, offset=0,count=None)</td>\n<td>发送一个文件直到EOF，使用高性能的os.sendfile机制，返回发送的字节数。如果win下不支持sendfile，或者不是普通文件，使用send()发送文件。offset告诉起始位置。3.5版本开始</td>\n</tr>\n<tr>\n<td><strong>socket.getpeername()</strong></td>\n<td>返回连接套接字的远程地址。返回值通常是元组<br/>(ipaddr,port)</td>\n</tr>\n<tr>\n<td><strong>socket.getsockname()</strong></td>\n<td>返回套接字自己的地址。通常是一个元组<br/>(ipaddr,port)</td>\n</tr>\n<tr>\n<td>socket.setblocking(flag)</td>\n<td>如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常</td>\n</tr>\n<tr>\n<td>socket.settimeout(value)</td>\n<td>设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td>\n</tr>\n<tr>\n<td>socket.setsockopt(level,optname,value)</td>\n<td>设置套接字选项的值。比如缓冲区大小。太多了，<br/>去看文档。不同系统，不同版本都不尽相同</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"tcp-编程\"> TCP 编程</h2>\n<p>Socket 编程，是完成一端和另一端通信的，注意一般来说这两端分别处在不同的进程中，也就是说网络通信是一个进程发消息到另外一个进程。</p>\n<p>我们写代码的时候，每一个 socket 对象只表示了其中的一端。</p>\n<p>从业务角度来说，这两端从角色上分为：</p>\n<ul>\n<li>主动发送请求的一端，称为客户端 Client</li>\n<li>被动接受请求并回应的一端，称为服务端 Server</li>\n</ul>\n<p>这种编程模式也称为 C/S 编程。</p>\n<h3 id=\"服务器端编程步骤\"> 服务器端编程步骤</h3>\n<ul>\n<li>创建 Socket 对象</li>\n<li>绑定 IP 地址 Address 和端口 Port。bind() 方法\nIPv4 地址为一个二元组('IP地址字符串', Port)</li>\n<li>开始监听，将在指定的 IP 的端口上监听。listen()方法</li>\n<li>获取用于传送数据的 Socket 对象\nsocket.accept() -&gt; (socket object, address info)\naccept 方法阻塞等待客户端建立连接，返回一个新的 Socket 对象和客户端地址的二元组地址是远程客户端的地址，IPv4 中它是一个二元组(clientaddr, port)\n<ul>\n<li>接收数据\nrecv(bufsize[, flags]) 使用缓冲区接收数据</li>\n<li>发送数据\nsend(bytes) 发送数据</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>Server端开发\nsocket对象 --&gt; bind((IP, PORT)) --&gt; listen --&gt; accept --&gt; close\n                                                |--&gt; recv or send --&gt; close\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/tcp-server.png\" alt=\"tcp-server\"></p>\n<h3 id=\"socket-初识\"> socket 初识</h3>\n<div><pre><code><span>import</span> socket\n\ns <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span> <span># 创建socket对象</span>\ns<span>.</span>bind<span>(</span><span>(</span><span>'127.0.0.1'</span><span>,</span> <span>9999</span><span>)</span><span>)</span> <span># 一个地址和端口二元组</span>\ns<span>.</span>listen<span>(</span><span>)</span> <span># 开始监听，等待客户端连接到来，准备accept</span>\n\n<span># 接入一个到来的连接</span>\ns1<span>,</span> info <span>=</span> s<span>.</span>accept<span>(</span><span>)</span> <span># 阻塞，直到和客户端成功建立连接，返回一个新的socket对象和客户端地址</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>s1<span>)</span><span>,</span> <span>type</span><span>(</span>info<span>)</span><span>)</span>\n<span>print</span><span>(</span>s1<span>)</span>\n<span>print</span><span>(</span>info<span>)</span>\nsockname <span>=</span> s1<span>.</span>getsockname<span>(</span><span>)</span>\npeername <span>=</span> s1<span>.</span>getpeername<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>sockname<span>)</span><span>,</span> sockname<span>)</span> <span># 本地地址</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>peername<span>)</span><span>,</span> peername<span>)</span> <span># 对端地址</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\n<span># 使用缓冲区获取数据</span>\ndata <span>=</span> s1<span>.</span>recv<span>(</span><span>1024</span><span>)</span> <span># 阻塞</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>data<span>)</span><span>,</span> data<span>)</span>\ns1<span>.</span>send<span>(</span><span>b'baidu.com ack'</span><span>)</span> <span># bytes</span>\ns1<span>.</span>close<span>(</span><span>)</span> <span># 关闭</span>\n\n<span># 接入另外一个连接</span>\ns2<span>,</span> info <span>=</span> s<span>.</span>accept<span>(</span><span>)</span> <span># 阻塞</span>\ndata <span>=</span> s2<span>.</span>recv<span>(</span><span>1024</span><span>)</span>\n<span>print</span><span>(</span>info<span>,</span> data<span>)</span>\ns2<span>.</span>send<span>(</span><span>b'hello python ack'</span><span>)</span>\ns2<span>.</span>close<span>(</span><span>)</span> <span># 关闭</span>\ns<span>.</span>close<span>(</span><span>)</span> <span># 关闭</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>上例 accept 和 recv 是阻塞的，主线程经常被阻塞住而不能工作。怎么办？</p>\n<p>查看监听端口</p>\n<div><pre><code>windows 命令\n# netstat -an -p tcp | findstr 9999\n\nlinux命令\n# netstat -tanl | grep 9999\n# ss -tanl | grep 9999\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"实战-写一个群聊程序\"> 实战——写一个群聊程序</h3>\n<p><strong>需求分析</strong>\n聊天工具是 CS 程序，C 是每一个客户端 client，S 是服务器端 server。</p>\n<p>服务器应该具有的功能：</p>\n<ol>\n<li>启动服务，包括绑定地址和端口，并监听</li>\n<li>建立连接，能和多个客户端建立连接</li>\n<li>接收不同用户的信息</li>\n<li>分发，将接收的某个用户的信息转发到已连接的所有客户端</li>\n<li>停止服务</li>\n<li>记录连接的客户端</li>\n</ol>\n<p><strong>代码实现</strong>\n服务端应该设计为一个类</p>\n<div><pre><code><span>import</span> socket\n\n<span>class</span> <span>ChatServer</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> ip<span>,</span> port<span>)</span><span>:</span> <span># 启动服务</span>\n        self<span>.</span>sock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\n        self<span>.</span>addr <span>=</span> <span>(</span>ip<span>,</span> port<span>)</span>\n    \n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span> <span># 启动监听</span>\n        <span>pass</span>\n    \n    <span>def</span> <span>accept</span><span>(</span>self<span>)</span><span>:</span> <span># 多人连接</span>\n        <span>pass</span>\n    \n    <span>def</span> <span>recv</span><span>(</span>self<span>)</span><span>:</span> <span># 接收客户端数据</span>\n        <span>pass</span>\n    \n    <span>def</span> <span>stop</span><span>(</span>self<span>)</span><span>:</span> <span># 停止服务</span>\n        <span>pass</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>在此基础上，扩展完成</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> datetime\n<span>import</span> socket\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>class</span> <span>ChatServer</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> ip<span>=</span><span>'127.0.0.1'</span><span>,</span> port<span>=</span><span>9999</span><span>)</span><span>:</span> <span># 启动服务</span>\n        self<span>.</span>sock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\n        self<span>.</span>addr <span>=</span> <span>(</span>ip<span>,</span> port<span>)</span>\n        self<span>.</span>clients <span>=</span> <span>{</span><span>}</span> <span># 客户端</span>\n\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span> <span># 启动监听</span>\n        self<span>.</span>sock<span>.</span>bind<span>(</span>self<span>.</span>addr<span>)</span> <span># 绑定</span>\n        self<span>.</span>sock<span>.</span>listen<span>(</span><span>)</span> <span># 监听</span>\n        <span># accept会阻塞主线程，所以开一个新线程</span>\n        threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>accept<span>(</span><span>)</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>accept</span><span>(</span>self<span>)</span><span>:</span> <span># 多人连接</span>\n        <span>while</span> <span>True</span><span>:</span>\n            sock<span>,</span> client <span>=</span> self<span>.</span>sock<span>.</span>accept<span>(</span><span>)</span> <span># 阻塞</span>\n            self<span>.</span>clients<span>[</span>client<span>]</span> <span>=</span> sock <span># 添加到客户端字典</span>\n            <span># 准备接收数据，recv是阻塞的，开启新的线程</span>\n            threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>recv<span>,</span> args<span>=</span><span>(</span>sock<span>,</span> client<span>)</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n\n    <span>def</span> <span>recv</span><span>(</span>self<span>,</span> sock<span>:</span>socket<span>.</span>socket<span>,</span> client<span>)</span><span>:</span> <span># 接收客户端数据</span>\n        <span>while</span> <span>True</span><span>:</span>\n            data <span>=</span> sock<span>.</span>recv<span>(</span><span>1024</span><span>)</span> <span># 阻塞到数据到来</span>\n            msg <span>=</span> <span>\"{:%Y/%m/%d %H:%M:%S} {} {}\\n{}\\n\"</span><span>.</span><span>format</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>,</span> <span>*</span>client<span>,</span> data<span>.</span>decode<span>(</span><span>)</span><span>)</span>\n            logging<span>.</span>info<span>(</span>msg<span>)</span>\n            msg <span>=</span> msg<span>.</span>encode<span>(</span><span>)</span>\n            <span>for</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                s<span>.</span>send<span>(</span>msg<span>)</span>\n\n\n    <span>def</span> <span>stop</span><span>(</span>self<span>)</span><span>:</span> <span># 停止服务</span>\n        <span>for</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n            s<span>.</span>close<span>(</span><span>)</span>\n        self<span>.</span>sock<span>.</span>close<span>(</span><span>)</span>\n\ncs <span>=</span> ChatServer<span>(</span><span>)</span>\ncs<span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p>基本功能完成，但是有问题。使用Event改进。先实现单独聊，然后改成群聊</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> datetime\n<span>import</span> socket\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>class</span> <span>ChatServer</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> ip<span>=</span><span>'127.0.0.1'</span><span>,</span> port<span>=</span><span>9999</span><span>)</span><span>:</span> <span># 启动服务</span>\n        self<span>.</span>sock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\n        self<span>.</span>addr <span>=</span> <span>(</span>ip<span>,</span> port<span>)</span>\n        self<span>.</span>clients <span>=</span> <span>{</span><span>}</span> <span># 客户端</span>\n        self<span>.</span>event <span>=</span> threading<span>.</span>Event<span>(</span><span>)</span>\n\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span> <span># 启动监听</span>\n        self<span>.</span>sock<span>.</span>bind<span>(</span>self<span>.</span>addr<span>)</span> <span># 绑定</span>\n        self<span>.</span>sock<span>.</span>listen<span>(</span><span>)</span> <span># 监听</span>\n        <span># accept会阻塞主线程，所以开一个新线程</span>\n        threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>accept<span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>accept</span><span>(</span>self<span>)</span><span>:</span> <span># 多人连接</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            sock<span>,</span> client <span>=</span> self<span>.</span>sock<span>.</span>accept<span>(</span><span>)</span> <span># 阻塞</span>\n            self<span>.</span>clients<span>[</span>client<span>]</span> <span>=</span> sock <span># 添加到客户端字典</span>\n            <span># 准备接收数据，recv是阻塞的，开启新的线程</span>\n            threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>recv<span>,</span> args<span>=</span><span>(</span>sock<span>,</span> client<span>)</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n\n    <span>def</span> <span>recv</span><span>(</span>self<span>,</span> sock<span>:</span>socket<span>.</span>socket<span>,</span> client<span>)</span><span>:</span> <span># 接收客户端数据</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            data <span>=</span> sock<span>.</span>recv<span>(</span><span>1024</span><span>)</span> <span># 阻塞到数据到来</span>\n            msg <span>=</span> <span>\"{:%Y/%m/%d %H:%M:%S} {} {}\\n{}\\n\"</span><span>.</span><span>format</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>,</span> <span>*</span>client<span>,</span> data<span>.</span>decode<span>(</span><span>)</span><span>)</span>\n            logging<span>.</span>info<span>(</span>msg<span>)</span>\n            msg <span>=</span> msg<span>.</span>encode<span>(</span><span>)</span>\n            <span>for</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                s<span>.</span>send<span>(</span>msg<span>)</span>\n\n\n    <span>def</span> <span>stop</span><span>(</span>self<span>)</span><span>:</span> <span># 停止服务</span>\n        <span>for</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n            s<span>.</span>close<span>(</span><span>)</span>\n        self<span>.</span>sock<span>.</span>close<span>(</span><span>)</span>\n\ncs <span>=</span> ChatServer<span>(</span><span>)</span>\ncs<span>.</span>start<span>(</span><span>)</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    cmd <span>=</span> <span>input</span><span>(</span><span>'>>'</span><span>)</span><span>.</span>strip<span>(</span><span>)</span>\n    <span>if</span> cmd <span>==</span> <span>'quit'</span><span>:</span>\n        cs<span>.</span>stop<span>(</span><span>)</span>\n        threading<span>.</span>Event<span>(</span><span>)</span><span>.</span>wait<span>(</span><span>3</span><span>)</span>\n        <span>break</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><p>这一版基本能用了，测试通过。但是还有要完善的地方。\n例如各种异常的判断，客户端断开连接后字典中的移除客户端数据等。</p>\n<p><strong>客户端主动断开带来的问题</strong></p>\n<p>服务端知道自己何时断开，如果客户端断开，服务器不知道。（客户端主动断开，服务端recv会得到一个空串）\n所以，好的做法是，客户端断开发出特殊消息通知服务器端断开连接。但是，如果客户端主动断开，服务端主动发送一个空消息，超时返回异常，捕获异常并清理连接。\n即使为客户端提供了断开命令，也不能保证客户端会使用它断开连接。但是还是要增加这个退出功能。</p>\n<p>增加客户端退出命令</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> datetime\n<span>import</span> socket\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>class</span> <span>ChatServer</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> ip<span>=</span><span>'127.0.0.1'</span><span>,</span> port<span>=</span><span>9999</span><span>)</span><span>:</span> <span># 启动服务</span>\n        self<span>.</span>sock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\n        self<span>.</span>addr <span>=</span> <span>(</span>ip<span>,</span> port<span>)</span>\n        self<span>.</span>clients <span>=</span> <span>{</span><span>}</span> <span># 客户端</span>\n        self<span>.</span>event <span>=</span> threading<span>.</span>Event<span>(</span><span>)</span>\n\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span> <span># 启动监听</span>\n        self<span>.</span>sock<span>.</span>bind<span>(</span>self<span>.</span>addr<span>)</span> <span># 绑定</span>\n        self<span>.</span>sock<span>.</span>listen<span>(</span><span>)</span> <span># 监听</span>\n        <span># accept会阻塞主线程，所以开一个新线程</span>\n        threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>accept<span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>accept</span><span>(</span>self<span>)</span><span>:</span> <span># 多人连接</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            sock<span>,</span> client <span>=</span> self<span>.</span>sock<span>.</span>accept<span>(</span><span>)</span> <span># 阻塞</span>\n            self<span>.</span>clients<span>[</span>client<span>]</span> <span>=</span> sock <span># 添加到客户端字典</span>\n            <span># 准备接收数据，recv是阻塞的，开启新的线程</span>\n            threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>recv<span>,</span> args<span>=</span><span>(</span>sock<span>,</span> client<span>)</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n\n    <span>def</span> <span>recv</span><span>(</span>self<span>,</span> sock<span>:</span>socket<span>.</span>socket<span>,</span> client<span>)</span><span>:</span> <span># 接收客户端数据</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            data <span>=</span> sock<span>.</span>recv<span>(</span><span>1024</span><span>)</span> <span># 阻塞到数据到来</span>\n            msg <span>=</span> data<span>.</span>decode<span>(</span><span>)</span><span>.</span>strip<span>(</span><span>)</span>\n            <span>if</span> msg <span>==</span> <span>'quit'</span> <span>or</span> msg <span>==</span> <span>''</span><span>:</span> <span># 主动断开得到空串</span>\n                self<span>.</span>clients<span>.</span>pop<span>(</span>client<span>)</span>\n                sock<span>.</span>close<span>(</span><span>)</span>\n                logging<span>.</span>info<span>(</span><span>'{} quits'</span><span>.</span><span>format</span><span>(</span>client<span>)</span><span>)</span>\n                <span>break</span>\n            msg <span>=</span> <span>\"{:%Y/%m/%d %H:%M:%S} {} {}\\n{}\\n\"</span><span>.</span><span>format</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>,</span> <span>*</span>client<span>,</span> data<span>.</span>decode<span>(</span><span>)</span><span>)</span>\n            logging<span>.</span>info<span>(</span>msg<span>)</span>\n            msg <span>=</span> msg<span>.</span>encode<span>(</span><span>)</span>\n            <span>for</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                s<span>.</span>send<span>(</span>msg<span>)</span>\n\n\n    <span>def</span> <span>stop</span><span>(</span>self<span>)</span><span>:</span> <span># 停止服务</span>\n        self<span>.</span>event<span>.</span><span>set</span><span>(</span><span>)</span>\n        <span>for</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n            s<span>.</span>close<span>(</span><span>)</span>\n        self<span>.</span>sock<span>.</span>close<span>(</span><span>)</span>\n\ncs <span>=</span> ChatServer<span>(</span><span>)</span>\ncs<span>.</span>start<span>(</span><span>)</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    cmd <span>=</span> <span>input</span><span>(</span><span>'>>'</span><span>)</span><span>.</span>strip<span>(</span><span>)</span>\n    <span>if</span> cmd <span>==</span> <span>'quit'</span><span>:</span>\n        cs<span>.</span>stop<span>(</span><span>)</span>\n        threading<span>.</span>Event<span>(</span><span>)</span><span>.</span>wait<span>(</span><span>3</span><span>)</span>\n        <span>break</span>\n    logging<span>.</span>info<span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span> <span># 用来观察断开后线程的变化</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div><p>程序还有瑕疵，但是业务功能基本完成了</p>\n<p><strong>线程安全</strong>\n由于 GIL 和内置数据结构的读写原子性，单独操作字典的某一项 item 是安全的。但是遍历过程是线程不安全的，遍历中有可能被打断，其他线程如果对字典元素进行增加、弹出，都会影响字典的 size ，就会抛出异常。所以还是要加锁 Lock。出错测试代码如下</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n<span>import</span> random\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\nglobal_dict <span>=</span> <span>{</span><span>}</span>\n\n<span>def</span> <span>additem</span><span>(</span>d<span>:</span><span>dict</span><span>)</span><span>:</span>\n    count <span>=</span> <span>1</span>\n    <span>while</span> <span>True</span><span>:</span>\n        d<span>[</span>count<span>]</span> <span>=</span> random<span>.</span>randint<span>(</span><span>100</span><span>,</span><span>110</span><span>)</span> <span># kv 对一直增加</span>\n        count <span>+=</span> <span>1</span>\n        time<span>.</span>sleep<span>(</span><span>0.001</span><span>)</span>\n\n<span>def</span> <span>iterdict</span><span>(</span>d<span>:</span><span>dict</span><span>)</span><span>:</span>\n    <span>while</span> <span>True</span><span>:</span>\n        <span>for</span> k<span>,</span>v <span>in</span> d<span>.</span>items<span>(</span><span>)</span><span>:</span> <span># 遍历</span>\n            logging<span>.</span>info<span>(</span>k<span>,</span> v<span>)</span>\n            d<span>[</span>k<span>]</span> <span>=</span> random<span>.</span>randint<span>(</span><span>1</span><span>,</span> <span>10</span><span>)</span>\n\na <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>additem<span>,</span> args<span>=</span><span>(</span>global_dict<span>,</span><span>)</span><span>,</span> daemon<span>=</span><span>True</span><span>)</span>\ni <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>iterdict<span>,</span> args<span>=</span><span>(</span>global_dict<span>,</span><span>)</span><span>,</span> daemon<span>=</span><span>True</span><span>)</span>\n\na<span>.</span>start<span>(</span><span>)</span>\ni<span>.</span>start<span>(</span><span>)</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n    logging<span>.</span>info<span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span>\n\n    <span>if</span> threading<span>.</span>active_count<span>(</span><span>)</span> <span>&lt;=</span> <span>2</span><span>:</span>\n        keys <span>=</span> <span>list</span><span>(</span>global_dict<span>.</span>keys<span>(</span><span>)</span><span>)</span>\n        logging<span>.</span>info<span>(</span>keys<span>)</span>\n        logging<span>.</span>info<span>(</span><span>len</span><span>(</span>keys<span>)</span><span>)</span>\n        logging<span>.</span>info<span>(</span><span>'='</span> <span>*</span> <span>30</span><span>)</span>\n        <span>break</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><p>加锁后的代码如下</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> datetime\n<span>import</span> socket\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>class</span> <span>ChatServer</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> ip<span>=</span><span>'127.0.0.1'</span><span>,</span> port<span>=</span><span>9999</span><span>)</span><span>:</span> <span># 启动服务</span>\n        self<span>.</span>sock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\n        self<span>.</span>addr <span>=</span> <span>(</span>ip<span>,</span> port<span>)</span>\n        self<span>.</span>clients <span>=</span> <span>{</span><span>}</span> <span># 客户端</span>\n        self<span>.</span>event <span>=</span> threading<span>.</span>Event<span>(</span><span>)</span>\n        self<span>.</span>lock <span>=</span> threading<span>.</span>Lock<span>(</span><span>)</span>\n\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span> <span># 启动监听</span>\n        self<span>.</span>sock<span>.</span>bind<span>(</span>self<span>.</span>addr<span>)</span> <span># 绑定</span>\n        self<span>.</span>sock<span>.</span>listen<span>(</span><span>)</span> <span># 监听</span>\n        <span># accept会阻塞主线程，所以开一个新线程</span>\n        threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>accept<span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>accept</span><span>(</span>self<span>)</span><span>:</span> <span># 多人连接</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            sock<span>,</span> client <span>=</span> self<span>.</span>sock<span>.</span>accept<span>(</span><span>)</span> <span># 阻塞</span>\n            <span>with</span> self<span>.</span>lock<span>:</span>\n                self<span>.</span>clients<span>[</span>client<span>]</span> <span>=</span> sock <span># 添加到客户端字典</span>\n            <span># 准备接收数据，recv是阻塞的，开启新的线程</span>\n            threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>recv<span>,</span> args<span>=</span><span>(</span>sock<span>,</span> client<span>)</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n\n    <span>def</span> <span>recv</span><span>(</span>self<span>,</span> sock<span>:</span>socket<span>.</span>socket<span>,</span> client<span>)</span><span>:</span> <span># 接收客户端数据</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            data <span>=</span> sock<span>.</span>recv<span>(</span><span>1024</span><span>)</span> <span># 阻塞到数据到来</span>\n            msg <span>=</span> data<span>.</span>decode<span>(</span><span>)</span><span>.</span>strip<span>(</span><span>)</span>\n            <span>if</span> msg <span>==</span> <span>'quit'</span> <span>or</span> msg <span>==</span> <span>''</span><span>:</span> <span># 主动断开得到空串</span>\n                <span>with</span> self<span>.</span>lock<span>:</span>\n                    self<span>.</span>clients<span>.</span>pop<span>(</span>client<span>)</span>\n                    sock<span>.</span>close<span>(</span><span>)</span>\n                logging<span>.</span>info<span>(</span><span>'{} quits'</span><span>.</span><span>format</span><span>(</span>client<span>)</span><span>)</span>\n                <span>break</span>\n            msg <span>=</span> <span>\"{:%Y/%m/%d %H:%M:%S} {} {}\\n{}\\n\"</span><span>.</span><span>format</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>,</span> <span>*</span>client<span>,</span> data<span>.</span>decode<span>(</span><span>)</span><span>)</span>\n            logging<span>.</span>info<span>(</span>msg<span>)</span>\n            msg <span>=</span> msg<span>.</span>encode<span>(</span><span>)</span>\n            <span>with</span> self<span>.</span>lock<span>:</span>\n                <span>for</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                    s<span>.</span>send<span>(</span>msg<span>)</span>\n\n\n    <span>def</span> <span>stop</span><span>(</span>self<span>)</span><span>:</span> <span># 停止服务</span>\n        self<span>.</span>event<span>.</span><span>set</span><span>(</span><span>)</span>\n        <span>with</span> self<span>.</span>lock<span>:</span>\n            <span>for</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                s<span>.</span>close<span>(</span><span>)</span>\n        self<span>.</span>sock<span>.</span>close<span>(</span><span>)</span>\n\ncs <span>=</span> ChatServer<span>(</span><span>)</span>\ncs<span>.</span>start<span>(</span><span>)</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    cmd <span>=</span> <span>input</span><span>(</span><span>'>>'</span><span>)</span><span>.</span>strip<span>(</span><span>)</span>\n    <span>if</span> cmd <span>==</span> <span>'quit'</span><span>:</span>\n        cs<span>.</span>stop<span>(</span><span>)</span>\n        threading<span>.</span>Event<span>(</span><span>)</span><span>.</span>wait<span>(</span><span>3</span><span>)</span>\n        <span>break</span>\n    logging<span>.</span>info<span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span> <span># 用来观察断开后线程的变化</span>\n    logging<span>.</span>info<span>(</span>cs<span>.</span>clients<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br></div></div><p>也可以把 recv 和 accept 线程设置为 daemon 线程。</p>\n<h3 id=\"makefile\"> MakeFile</h3>\n<div><pre><code>socket<span>.</span>makefile<span>(</span>mode<span>=</span><span>'r'</span><span>,</span> buffering<span>=</span><span>None</span><span>,</span> <span>*</span><span>,</span> encoding<span>=</span><span>None</span><span>,</span> errors<span>=</span><span>None</span><span>,</span>newline<span>=</span><span>None</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>创建一个与该套接字相关连的文件对象，将recv方法看做读方法，将send方法看做写方法。</p>\n<div><pre><code><span># 使用makefile简单例子</span>\n<span>import</span> socket\n\nserver <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\nserver<span>.</span>bind<span>(</span><span>(</span><span>'127.0.0.1'</span><span>,</span> <span>9999</span><span>)</span><span>)</span>\nserver<span>.</span>listen<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\ns<span>,</span> _ <span>=</span> server<span>.</span>accept<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\nf <span>=</span> s<span>.</span>makefile<span>(</span>mode<span>=</span><span>'rw'</span><span>)</span>\n\nline <span>=</span> f<span>.</span>read<span>(</span><span>10</span><span>)</span> <span># 按行读取要使用readline方法</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n<span>print</span><span>(</span>line<span>)</span>\nf<span>.</span>write<span>(</span><span>'return your msg: {}'</span><span>.</span><span>format</span><span>(</span>line<span>)</span><span>)</span>\nf<span>.</span>flush<span>(</span><span>)</span>\n\nf<span>.</span>close<span>(</span><span>)</span>\n<span>print</span><span>(</span>f<span>.</span>closed<span>,</span> s<span>.</span>_closed<span>)</span>\ns<span>.</span>close<span>(</span><span>)</span>\n<span>print</span><span>(</span>f<span>.</span>closed<span>,</span> s<span>.</span>_closed<span>)</span>\n\nserver<span>.</span>close<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p><strong>makefile练习</strong>\n使用makefile改写群聊类</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> datetime\n<span>import</span> socket\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>class</span> <span>ChatServer</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> ip<span>=</span><span>'127.0.0.1'</span><span>,</span> port<span>=</span><span>9999</span><span>)</span><span>:</span> <span># 启动服务</span>\n        self<span>.</span>sock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\n        self<span>.</span>addr <span>=</span> <span>(</span>ip<span>,</span> port<span>)</span>\n        self<span>.</span>clients <span>=</span> <span>{</span><span>}</span> <span># 客户端</span>\n        self<span>.</span>event <span>=</span> threading<span>.</span>Event<span>(</span><span>)</span>\n        self<span>.</span>lock <span>=</span> threading<span>.</span>Lock<span>(</span><span>)</span>\n\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span> <span># 启动监听</span>\n        self<span>.</span>sock<span>.</span>bind<span>(</span>self<span>.</span>addr<span>)</span> <span># 绑定</span>\n        self<span>.</span>sock<span>.</span>listen<span>(</span><span>)</span> <span># 监听</span>\n        <span># accept会阻塞主线程，所以开一个新线程</span>\n        threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>accept<span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>accept</span><span>(</span>self<span>)</span><span>:</span> <span># 多人连接</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            sock<span>,</span> client <span>=</span> self<span>.</span>sock<span>.</span>accept<span>(</span><span>)</span> <span># 阻塞</span>\n            f <span>=</span> sock<span>.</span>makefile<span>(</span><span>'rw'</span><span>)</span>\n            <span>with</span> self<span>.</span>lock<span>:</span>\n                self<span>.</span>clients<span>[</span>client<span>]</span> <span>=</span> f<span>,</span> sock <span># 添加到客户端字典</span>\n            <span># 准备接收数据，recv是阻塞的，开启新的线程</span>\n            threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>recv<span>,</span> args<span>=</span><span>(</span>f<span>,</span> client<span>)</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n\n    <span>def</span> <span>recv</span><span>(</span>self<span>,</span> f<span>,</span> client<span>)</span><span>:</span> <span># 接收客户端数据</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            data <span>=</span> f<span>.</span>readline<span>(</span><span>)</span> <span># 阻塞等一行来，换行符</span>\n            msg <span>=</span> data<span>.</span>strip<span>(</span><span>)</span>\n            <span>if</span> msg <span>==</span> <span>'quit'</span> <span>or</span> msg <span>==</span> <span>''</span><span>:</span> <span># 主动断开得到空串</span>\n                <span>with</span> self<span>.</span>lock<span>:</span>\n                    _<span>,</span> sock <span>=</span> self<span>.</span>clients<span>.</span>pop<span>(</span>client<span>)</span>\n                    sock<span>.</span>close<span>(</span><span>)</span>\n                    f<span>.</span>close<span>(</span><span>)</span>\n                logging<span>.</span>info<span>(</span><span>'{} quits'</span><span>.</span><span>format</span><span>(</span>client<span>)</span><span>)</span>\n                <span>break</span>\n            msg <span>=</span> <span>\"{:%Y/%m/%d %H:%M:%S} {} {}\\n{}\\n\"</span><span>.</span><span>format</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>,</span> <span>*</span>client<span>,</span> data<span>)</span>\n            logging<span>.</span>info<span>(</span>msg<span>)</span>\n            <span>with</span> self<span>.</span>lock<span>:</span>\n                <span>for</span> ff<span>,</span> _ <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                    ff<span>.</span>write<span>(</span>msg<span>)</span>\n                    ff<span>.</span>flush<span>(</span><span>)</span>\n\n\n    <span>def</span> <span>stop</span><span>(</span>self<span>)</span><span>:</span> <span># 停止服务</span>\n        self<span>.</span>event<span>.</span><span>set</span><span>(</span><span>)</span>\n        <span>with</span> self<span>.</span>lock<span>:</span>\n            <span>for</span> f<span>,</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                s<span>.</span>close<span>(</span><span>)</span>\n                f<span>.</span>close<span>(</span><span>)</span>\n        self<span>.</span>sock<span>.</span>close<span>(</span><span>)</span>\n\ncs <span>=</span> ChatServer<span>(</span><span>)</span>\ncs<span>.</span>start<span>(</span><span>)</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    cmd <span>=</span> <span>input</span><span>(</span><span>'>>'</span><span>)</span><span>.</span>strip<span>(</span><span>)</span>\n    <span>if</span> cmd <span>==</span> <span>'quit'</span><span>:</span>\n        cs<span>.</span>stop<span>(</span><span>)</span>\n        threading<span>.</span>Event<span>(</span><span>)</span><span>.</span>wait<span>(</span><span>3</span><span>)</span>\n        <span>break</span>\n    logging<span>.</span>info<span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span> <span># 用来观察断开后线程的变化</span>\n    logging<span>.</span>info<span>(</span>cs<span>.</span>clients<span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br></div></div><p>上例完成了基本功能，但是，如果网络异常，或者 readline 出现异常，就不会从 clients 中移除作废的 socket。可以使用异常处理解决这个问题。</p>\n<p><strong>ChatServer实验用完整代码</strong>\n注意，这个代码为实验用，代码中瑕疵还有很多。Socket太底层了，实际开发中很少使用这么底层的接口。</p>\n<p>增加一些异常处理。</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> datetime\n<span>import</span> socket\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>class</span> <span>ChatServer</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> ip<span>=</span><span>'127.0.0.1'</span><span>,</span> port<span>=</span><span>9999</span><span>)</span><span>:</span> <span># 启动服务</span>\n        self<span>.</span>sock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\n        self<span>.</span>addr <span>=</span> <span>(</span>ip<span>,</span> port<span>)</span>\n        self<span>.</span>clients <span>=</span> <span>{</span><span>}</span> <span># 客户端</span>\n        self<span>.</span>event <span>=</span> threading<span>.</span>Event<span>(</span><span>)</span>\n        self<span>.</span>lock <span>=</span> threading<span>.</span>Lock<span>(</span><span>)</span>\n\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span> <span># 启动监听</span>\n        self<span>.</span>sock<span>.</span>bind<span>(</span>self<span>.</span>addr<span>)</span> <span># 绑定</span>\n        self<span>.</span>sock<span>.</span>listen<span>(</span><span>)</span> <span># 监听</span>\n        <span># accept会阻塞主线程，所以开一个新线程</span>\n        threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>accept<span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>accept</span><span>(</span>self<span>)</span><span>:</span> <span># 多人连接</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            sock<span>,</span> client <span>=</span> self<span>.</span>sock<span>.</span>accept<span>(</span><span>)</span> <span># 阻塞</span>\n            f <span>=</span> sock<span>.</span>makefile<span>(</span><span>'rw'</span><span>)</span>\n            <span>with</span> self<span>.</span>lock<span>:</span>\n                self<span>.</span>clients<span>[</span>client<span>]</span> <span>=</span> f<span>,</span> sock <span># 添加到客户端字典</span>\n            <span># 准备接收数据，recv是阻塞的，开启新的线程</span>\n            threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>recv<span>,</span> args<span>=</span><span>(</span>f<span>,</span> client<span>)</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n\n    <span>def</span> <span>recv</span><span>(</span>self<span>,</span> f<span>,</span> client<span>)</span><span>:</span> <span># 接收客户端数据</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            <span>try</span><span>:</span>\n                data <span>=</span> f<span>.</span>readline<span>(</span><span>)</span> <span># 阻塞等一行来，换行符</span>\n            <span>except</span> Exception <span>as</span> e<span>:</span>\n                logging<span>.</span>error<span>(</span>e<span>)</span>\n                data <span>=</span> <span>'quit'</span>\n\n            msg <span>=</span> data<span>.</span>strip<span>(</span><span>)</span>\n            <span>if</span> msg <span>==</span> <span>'quit'</span> <span>or</span> msg <span>==</span> <span>''</span><span>:</span> <span># 主动断开得到空串</span>\n                <span>with</span> self<span>.</span>lock<span>:</span>\n                    _<span>,</span> sock <span>=</span> self<span>.</span>clients<span>.</span>pop<span>(</span>client<span>)</span>\n                    sock<span>.</span>close<span>(</span><span>)</span>\n                    f<span>.</span>close<span>(</span><span>)</span>\n                logging<span>.</span>info<span>(</span><span>'{} quits'</span><span>.</span><span>format</span><span>(</span>client<span>)</span><span>)</span>\n                <span>break</span>\n            msg <span>=</span> <span>\"{:%Y/%m/%d %H:%M:%S} {} {}\\n{}\\n\"</span><span>.</span><span>format</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>,</span> <span>*</span>client<span>,</span> data<span>)</span>\n            logging<span>.</span>info<span>(</span>msg<span>)</span>\n            <span>with</span> self<span>.</span>lock<span>:</span>\n                <span>for</span> ff<span>,</span> _ <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                    ff<span>.</span>write<span>(</span>msg<span>)</span>\n                    ff<span>.</span>flush<span>(</span><span>)</span>\n\n\n    <span>def</span> <span>stop</span><span>(</span>self<span>)</span><span>:</span> <span># 停止服务</span>\n        self<span>.</span>event<span>.</span><span>set</span><span>(</span><span>)</span>\n        <span>with</span> self<span>.</span>lock<span>:</span>\n            <span>for</span> f<span>,</span> s <span>in</span> self<span>.</span>clients<span>.</span>values<span>(</span><span>)</span><span>:</span>\n                s<span>.</span>close<span>(</span><span>)</span>\n                f<span>.</span>close<span>(</span><span>)</span>\n        self<span>.</span>sock<span>.</span>close<span>(</span><span>)</span>\n\n<span>def</span> <span>main</span><span>(</span><span>)</span><span>:</span>\n    cs <span>=</span> ChatServer<span>(</span><span>)</span>\n    cs<span>.</span>start<span>(</span><span>)</span>\n\n    <span>while</span> <span>True</span><span>:</span>\n        cmd <span>=</span> <span>input</span><span>(</span><span>'>>'</span><span>)</span><span>.</span>strip<span>(</span><span>)</span>\n        <span>if</span> cmd <span>==</span> <span>'quit'</span><span>:</span>\n            cs<span>.</span>stop<span>(</span><span>)</span>\n            threading<span>.</span>Event<span>(</span><span>)</span><span>.</span>wait<span>(</span><span>3</span><span>)</span>\n            <span>break</span>\n        logging<span>.</span>info<span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span> <span># 用来观察断开后线程的变化</span>\n        logging<span>.</span>info<span>(</span>cs<span>.</span>clients<span>)</span>\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    main<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br></div></div><h3 id=\"tcp客户端编程\"> TCP客户端编程</h3>\n<p><strong>客户端编程步骤</strong></p>\n<ul>\n<li>创建 Socket 对象\n连接到远端服务端的 ip 和 port，connect() 方法</li>\n<li>传输数据\n<ul>\n<li>使用send、recv方法发送、接收数据</li>\n</ul>\n</li>\n<li>关闭连接，释放资源</li>\n</ul>\n<div><pre><code><span>import</span> socket\n\nclient <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\nipaddr <span>=</span> <span>(</span><span>'127.0.0.1'</span><span>,</span> <span>9999</span><span>)</span>\nclient<span>.</span>connect<span>(</span>ipaddr<span>)</span> <span># 直接连接服务器</span>\n\nclient<span>.</span>send<span>(</span><span>b'abcd\\n'</span><span>)</span>\ndata <span>=</span> client<span>.</span>recv<span>(</span><span>1024</span><span>)</span> <span># 阻塞等待</span>\n<span>print</span><span>(</span>data<span>)</span>\n\nclient<span>.</span>close<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>开始编写客户端类</p>\n<div><pre><code><span>import</span> socket\n<span>import</span> threading\n<span>import</span> datetime\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\n<span>class</span> <span>ChatClient</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> ip<span>=</span><span>'127.0.0.1'</span><span>,</span> port<span>=</span><span>9999</span><span>)</span><span>:</span>\n        self<span>.</span>sock <span>=</span> socket<span>.</span>socket<span>(</span><span>)</span>\n        self<span>.</span>addr <span>=</span> <span>(</span>ip<span>,</span> port<span>)</span>\n        self<span>.</span>event <span>=</span> threading<span>.</span>Event<span>(</span><span>)</span>\n\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span> <span># 启动对远端服务器的连接</span>\n        self<span>.</span>sock<span>.</span>connect<span>(</span>self<span>.</span>addr<span>)</span>\n        self<span>.</span>send<span>(</span><span>\"I'm ready.\"</span><span>)</span>\n        <span># 准备接收数据，recv是阻塞的，开启新的线程</span>\n        threading<span>.</span>Thread<span>(</span>target<span>=</span>self<span>.</span>recv<span>,</span> name<span>=</span><span>\"recv\"</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>recv</span><span>(</span>self<span>)</span><span>:</span> <span># 接收服务端的数据</span>\n        <span>while</span> <span>not</span> self<span>.</span>event<span>.</span>is_set<span>(</span><span>)</span><span>:</span>\n            <span>try</span><span>:</span>\n                data <span>=</span> self<span>.</span>sock<span>.</span>recv<span>(</span><span>1024</span><span>)</span> <span># 阻塞</span>\n            <span>except</span> Exception <span>as</span> e<span>:</span>\n                logging<span>.</span>error<span>(</span>e<span>)</span>\n                <span>break</span>\n            msg <span>=</span> <span>\"{:%Y/%m/%d %H:%M:%S} {}:{}\\n{}\\n\"</span><span>.</span><span>format</span><span>(</span>datetime<span>.</span>datetime<span>.</span>now<span>(</span><span>)</span><span>,</span> <span>*</span>self<span>.</span>addr<span>,</span> data<span>.</span>strip<span>(</span><span>)</span><span>)</span>\n            logging<span>.</span>info<span>(</span>msg<span>)</span>\n    <span>def</span> <span>send</span><span>(</span>self<span>,</span> msg<span>:</span><span>str</span><span>)</span><span>:</span>\n        data <span>=</span> <span>\"{}\\n\"</span><span>.</span><span>format</span><span>(</span>msg<span>.</span>strip<span>(</span><span>)</span><span>)</span><span>.</span>encode<span>(</span><span>)</span> <span># 服务端需要一个换行符</span>\n        self<span>.</span>sock<span>.</span>send<span>(</span>data<span>)</span>\n\n    <span>def</span> <span>stop</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>sock<span>.</span>close<span>(</span><span>)</span>\n        self<span>.</span>event<span>.</span>wait<span>(</span><span>3</span><span>)</span>\n        self<span>.</span>event<span>.</span><span>set</span><span>(</span><span>)</span>\n        logging<span>.</span>info<span>(</span><span>'Client stops'</span><span>)</span>\n\n<span>def</span> <span>main</span><span>(</span><span>)</span><span>:</span>\n    cc <span>=</span> ChatClient<span>(</span><span>)</span>\n    cc<span>.</span>start<span>(</span><span>)</span>\n    <span>while</span> <span>True</span><span>:</span>\n        cmd <span>=</span> <span>input</span><span>(</span><span>'>>>'</span><span>)</span>\n        <span>if</span> cmd<span>.</span>strip<span>(</span><span>)</span> <span>==</span> <span>'quit'</span><span>:</span>\n            cc<span>.</span>stop<span>(</span><span>)</span>\n            <span>break</span>\n        cc<span>.</span>send<span>(</span>cmd<span>)</span> <span># 发送消息</span>\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    main<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><p>同样，这样的客户端还是有些问题的，仅用于测试。</p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/tcp-server.png",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "13 线程同步",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-thread-sync/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-thread-sync/",
      "content_html": "<h1 id=\"_13-线程同步\"> 13 线程同步</h1>\n<h2 id=\"线程同步概念\"> 线程同步概念</h2>\n<p>线程同步，线程间协同，通过某种技术，让一个线程访问某些数据时，其他线程不能访问这些数据，直到该线程完成对数据的操作。</p>\n<h2 id=\"event\"> Event</h2>\n<p>Event 事件，是线程间通信机制中最简单的实现，使用一个内部的标记 flag，通过 flag 的 True 或 False 的变化来进行操作。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set()</td>\n<td>标记设置为True</td>\n</tr>\n<tr>\n<td>clear()</td>\n<td>标记设置为False</td>\n</tr>\n<tr>\n<td>is_set()</td>\n<td>标记是否为True</td>\n</tr>\n<tr>\n<td>wait(timeout=None)</td>\n<td>设置等待标记为True的时长，None为无限等待。等到返回True，未等到超时了返回False</td>\n</tr>\n</tbody>\n</table>\n<p><strong>练习</strong></p>\n<p>老板雇佣了一个工人，让他生产杯子，老板一直等着这个工人，直到生产了10个杯子</p>\n<div><pre><code><span># 下面的代码是否能够完成功能？</span>\n<span>from</span> threading <span>import</span> Event<span>,</span> Thread\n<span>import</span> logging\n<span>import</span> time\n\nFORMAT <span>=</span> <span>'%(asctime)s %(threadName)s %(thread)s %(message)s'</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\ncups <span>=</span> <span>[</span><span>]</span>\nflag <span>=</span> <span>False</span>\n\n<span>def</span> <span>boss</span><span>(</span><span>)</span><span>:</span>\n    logging<span>.</span>info<span>(</span><span>\"I'm boss, waiting for U\"</span><span>)</span>\n    <span>while</span> <span>True</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>if</span> flag<span>:</span>\n            <span>break</span>\n    logging<span>.</span>info<span>(</span><span>'Good Job.'</span><span>)</span>\n\n<span>def</span> <span>worker</span><span>(</span>count<span>=</span><span>10</span><span>)</span><span>:</span>\n    logging<span>.</span>info<span>(</span><span>'I am working for U'</span><span>)</span>\n\n    <span>while</span> <span>True</span><span>:</span>\n        logging<span>.</span>info<span>(</span><span>'make 1 cup'</span><span>)</span>\n        time<span>.</span>sleep<span>(</span><span>0.5</span><span>)</span>\n        cups<span>.</span>append<span>(</span><span>1</span><span>)</span>\n        <span>if</span> <span>len</span><span>(</span>cups<span>)</span> <span>>=</span> count<span>:</span>\n            flag <span>=</span> <span>True</span>\n            <span>break</span>\n    logging<span>.</span>info<span>(</span><span>'I finished my job. cups={}'</span><span>.</span><span>format</span><span>(</span>cups<span>)</span><span>)</span>\n\nb <span>=</span> Thread<span>(</span>target<span>=</span>boss<span>,</span> name<span>=</span><span>'boss'</span><span>)</span>\nw <span>=</span> Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span>\nb<span>.</span>start<span>(</span><span>)</span>\nw<span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>上面代码基本能够完成，但上面代码问题有：</p>\n<ul>\n<li>bug，应该将worker中的flag定义为global就可解决</li>\n<li>老板一直要不停的查询worker的状态变化</li>\n</ul>\n<div><pre><code><span># 下面的代码是否能够完成功能？</span>\n<span>from</span> threading <span>import</span> Event<span>,</span> Thread\n<span>import</span> logging\n<span>import</span> time\n\nFORMAT <span>=</span> <span>'%(asctime)s %(threadName)s %(thread)s %(message)s'</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\ncups <span>=</span> <span>[</span><span>]</span>\nflag <span>=</span> <span>False</span>\n\n<span>def</span> <span>boss</span><span>(</span>event<span>:</span>Event<span>)</span><span>:</span>\n    logging<span>.</span>info<span>(</span><span>\"I'm boss, waiting for U\"</span><span>)</span>\n    event<span>.</span>wait<span>(</span><span>)</span> <span># 阻塞等待</span>\n    logging<span>.</span>info<span>(</span><span>'Good Job.'</span><span>)</span>\n\n<span>def</span> <span>worker</span><span>(</span>event<span>:</span>Event <span>,</span>count<span>=</span><span>10</span><span>)</span><span>:</span>\n    logging<span>.</span>info<span>(</span><span>'I am working for U'</span><span>)</span>\n\n    <span>while</span> <span>True</span><span>:</span>\n        logging<span>.</span>info<span>(</span><span>'make 1 cup'</span><span>)</span>\n        time<span>.</span>sleep<span>(</span><span>0.5</span><span>)</span>\n        cups<span>.</span>append<span>(</span><span>1</span><span>)</span>\n        <span>if</span> <span>len</span><span>(</span>cups<span>)</span> <span>>=</span> count<span>:</span>\n            event<span>.</span><span>set</span><span>(</span><span>)</span>\n            <span>break</span>\n    logging<span>.</span>info<span>(</span><span>'I finished my job. cups={}'</span><span>.</span><span>format</span><span>(</span>cups<span>)</span><span>)</span>\n\nevent <span>=</span> Event<span>(</span><span>)</span>\nb <span>=</span> Thread<span>(</span>target<span>=</span>boss<span>,</span> name<span>=</span><span>'boss'</span><span>,</span> args<span>=</span><span>(</span>event<span>,</span><span>)</span><span>)</span>\nw <span>=</span> Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>,</span> args<span>=</span><span>(</span>event<span>,</span><span>)</span><span>)</span>\nb<span>.</span>start<span>(</span><span>)</span>\nw<span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p><strong>总结</strong></p>\n<p>需要使用同一个 Event 对象的标记 flag。\n谁 wait 就是等到 flag 变为 True，或等到超时返回 False。\n不限制等待者的个数，通知所有等待者。</p>\n<p><strong>wait 的使用</strong></p>\n<div><pre><code><span>def</span> <span>worker</span><span>(</span>event<span>:</span>Event <span>,</span>count<span>=</span><span>10</span><span>)</span><span>:</span>\n    logging<span>.</span>info<span>(</span><span>'I am working for U'</span><span>)</span>\n\n    <span>while</span> <span>not</span> event<span>.</span>wait<span>(</span><span>0.5</span><span>)</span><span>:</span> <span># 使用 wait 阻塞等待</span>\n        logging<span>.</span>info<span>(</span><span>'make 1 cup'</span><span>)</span>\n        cups<span>.</span>append<span>(</span><span>1</span><span>)</span>\n        <span>if</span> <span>len</span><span>(</span>cups<span>)</span> <span>>=</span> count<span>:</span>\n            event<span>.</span><span>set</span><span>(</span><span>)</span>\n            <span># break</span>\n    logging<span>.</span>info<span>(</span><span>'I finished my job. cups={}'</span><span>.</span><span>format</span><span>(</span>cups<span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"lock\"> Lock</h2>\n<ul>\n<li>Lock 类是 mutex 互斥锁</li>\n<li>一旦一个线程获得锁，其它试图获取锁的线程将被阻塞，只到拥有锁的线程释放锁</li>\n<li>凡是存在共享资源争抢的地方都可以使用锁，从而保证只有一个使用者可以完全使用这个资源。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>acquire(blocking=True, timeout=-1)</td>\n<td>默认阻塞，阻塞可以设置超时时间。非阻塞时，timeout禁<br/>止设置。<br/>成功获取锁，返回True，否则返回False</td>\n</tr>\n<tr>\n<td>release()</td>\n<td>释放锁。可以从任何线程调用释放。<br/>已上锁的锁，会被重置为unlocked<br/>未上锁的锁上调用，抛RuntimeError异常。</td>\n</tr>\n</tbody>\n</table>\n<p>锁的基本使用</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\nlock <span>=</span> threading<span>.</span>Lock<span>(</span><span>)</span> <span># 互斥 mutex</span>\n\nlock<span>.</span>acquire<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span><span>30</span><span>)</span>\n\n<span>def</span> <span>worker</span><span>(</span>l<span>:</span>threading<span>.</span>Lock<span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'worker start'</span><span>,</span> threading<span>.</span>current_thread<span>(</span><span>)</span><span>)</span>\n    l<span>.</span>acquire<span>(</span><span>)</span>\n    <span>print</span><span>(</span><span>'worker done'</span><span>,</span> threading<span>.</span>current_thread<span>(</span><span>)</span><span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n    threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>\"w{}\"</span><span>.</span><span>format</span><span>(</span>i<span>)</span><span>,</span>\n                     args<span>=</span><span>(</span>lock<span>,</span><span>)</span><span>,</span> daemon<span>=</span><span>True</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    cmd <span>=</span> <span>input</span><span>(</span><span>\">>>\"</span><span>)</span>\n    <span>if</span> cmd <span>==</span> <span>'r'</span><span>:</span> <span># 按 r 后枚举所有线程查看</span>\n        lock<span>.</span>release<span>(</span><span>)</span>\n        <span>print</span><span>(</span><span>'released one locker'</span><span>)</span>\n    <span>elif</span> cmd <span>==</span> <span>'quit'</span><span>:</span>\n        lock<span>.</span>release<span>(</span><span>)</span>\n        <span>break</span>\n    <span>else</span><span>:</span>\n        <span>print</span><span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span>\n        <span>print</span><span>(</span>lock<span>.</span>locked<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>上例可以看出不管在哪一个线程中，只要对一个已经上锁的锁发起阻塞地请求，该线程就会阻塞。</p>\n<p><strong>练习</strong>\n订单要求生产1000个杯子，组织10个工人生产。请忽略老板，关注工人生成杯子</p>\n<div><pre><code><span>from</span> threading <span>import</span> Thread<span>,</span> Lock\n<span>import</span> time\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\ncups <span>=</span> <span>[</span><span>]</span>\n\n<span>def</span> <span>worker</span><span>(</span>count<span>=</span><span>1000</span><span>)</span><span>:</span>\n    logging<span>.</span>info<span>(</span><span>\"I'm working\"</span><span>)</span>\n    <span>while</span> <span>True</span><span>:</span>\n        <span>if</span> <span>len</span><span>(</span>cups<span>)</span> <span>>=</span> count<span>:</span>\n            <span>break</span>\n        time<span>.</span>sleep<span>(</span><span>0.0001</span><span>)</span>\n        cups<span>.</span>append<span>(</span><span>1</span><span>)</span>\n    logging<span>.</span>info<span>(</span><span>'I finished my job. cups = {}'</span><span>.</span><span>format</span><span>(</span><span>len</span><span>(</span>cups<span>)</span><span>)</span><span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>1</span><span>,</span> <span>11</span><span>)</span><span>:</span>\n    t <span>=</span> Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>\"w{}\"</span><span>.</span><span>format</span><span>(</span>i<span>)</span><span>,</span> args<span>=</span><span>(</span><span>1000</span><span>,</span><span>)</span><span>)</span>\n    t<span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>从上例的运行结果看出，多线程调度，导致了判断失效，多生产了杯子。\n如何修改解决这个问题？加锁\n上例使用锁实现如下：</p>\n<div><pre><code><span>from</span> threading <span>import</span> Thread<span>,</span> Lock\n<span>import</span> time\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\ncups <span>=</span> <span>[</span><span>]</span>\nlock <span>=</span> Lock<span>(</span><span>)</span> <span># 锁</span>\n\n<span>def</span> <span>worker</span><span>(</span>count<span>=</span><span>1000</span><span>)</span><span>:</span>\n    logging<span>.</span>info<span>(</span><span>\"I'm working\"</span><span>)</span>\n    <span>while</span> <span>True</span><span>:</span>\n        lock<span>.</span>acquire<span>(</span><span>)</span> <span># 获取锁</span>\n\n        <span>if</span> <span>len</span><span>(</span>cups<span>)</span> <span>>=</span> count<span>:</span>\n            lock<span>.</span>release<span>(</span><span>)</span> <span># 1</span>\n            <span>break</span>\n        <span># lock.release() # 2</span>\n        time<span>.</span>sleep<span>(</span><span>0.0001</span><span>)</span>\n        cups<span>.</span>append<span>(</span><span>1</span><span>)</span>\n        lock<span>.</span>release<span>(</span><span>)</span> <span># 3</span>\n    logging<span>.</span>info<span>(</span><span>'I finished my job. cups = {}'</span><span>.</span><span>format</span><span>(</span><span>len</span><span>(</span>cups<span>)</span><span>)</span><span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>1</span><span>,</span> <span>11</span><span>)</span><span>:</span>\n    t <span>=</span> Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>\"w{}\"</span><span>.</span><span>format</span><span>(</span>i<span>)</span><span>,</span> args<span>=</span><span>(</span><span>1000</span><span>,</span><span>)</span><span>)</span>\n    t<span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h3 id=\"锁分析\"> 锁分析</h3>\n<p><strong>位置2分析</strong></p>\n<ul>\n<li>假设某一个瞬间，有一个工作线程A获取了锁，len(cups)正好有999个，然后就释放了锁，可以继续执行下面的语句，生产一个杯子，这地方不阻塞，但是正好杯子也没有生产完。锁释放后，其他线程就可以获得锁，线程B获得了锁，发现len(cups)也是999个，然后释放锁，然后也可以去生产一个杯子。锁释放后，其他的线也可能获得锁。就说A和B线程都认为是999个，都会生产一个杯子，那么实际上最后一定会超出1000个。</li>\n<li>假设某个瞬间一个线程获得锁，然后发现杯子到了1000个，没有释放锁就直接break了，由于其他线程还在阻塞等待锁释放，这就成了死锁了。</li>\n</ul>\n<p><strong>位置3分析</strong></p>\n<ul>\n<li>获得锁的线程发现是999，有资格生产杯子，生产一个，释放锁，看似很完美</li>\n<li>问题在于，获取锁的线程发现杯子有1000个，直接break，没释放锁离开了，死锁了</li>\n</ul>\n<p>位置1分析</p>\n<ul>\n<li>如果线程获得锁，发现是1000，break前释放锁，没问题\n问题在于，A线程获得锁后，发现小于1000，继续执行，其他线程获得锁全部阻塞。A线程再次执行循环后，自己也阻塞了。死锁了。</li>\n</ul>\n<p>问题：究竟怎样加锁才正确呢？</p>\n<p>要在位置1和位置3同时加release。</p>\n<h3 id=\"上下文支持\"> 上下文支持</h3>\n<p>锁是典型必须释放的，Python提供了上下文支持。查看Lock类的上下文方法，<code>__enter__</code>方法返回bool表示是否获得锁，<code>__exit__</code>方法中释放锁。</p>\n<p>由此上例可以修改为</p>\n<div><pre><code><span>from</span> threading <span>import</span> Thread<span>,</span> Lock\n<span>import</span> time\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\ncups <span>=</span> <span>[</span><span>]</span>\nlock <span>=</span> Lock<span>(</span><span>)</span> <span># 锁</span>\n\n<span>def</span> <span>worker</span><span>(</span>count<span>=</span><span>1000</span><span>)</span><span>:</span>\n    logging<span>.</span>info<span>(</span><span>\"I'm working\"</span><span>)</span>\n    <span>while</span> <span>True</span><span>:</span>\n        <span>with</span> lock<span>:</span>\n            <span>if</span> <span>len</span><span>(</span>cups<span>)</span> <span>>=</span> count<span>:</span>\n                <span>break</span>\n            time<span>.</span>sleep<span>(</span><span>0.0001</span><span>)</span>\n            cups<span>.</span>append<span>(</span><span>1</span><span>)</span>\n    logging<span>.</span>info<span>(</span><span>'I finished my job. cups = {}'</span><span>.</span><span>format</span><span>(</span><span>len</span><span>(</span>cups<span>)</span><span>)</span><span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>1</span><span>,</span> <span>11</span><span>)</span><span>:</span>\n    t <span>=</span> Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>\"w{}\"</span><span>.</span><span>format</span><span>(</span>i<span>)</span><span>,</span> args<span>=</span><span>(</span><span>1000</span><span>,</span><span>)</span><span>)</span>\n    t<span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>感觉一下正确得到结果了吗？感觉到了执行速度了吗？慢了还是快了，为什么？</p>\n<h3 id=\"锁的应用场景\"> 锁的应用场景</h3>\n<p>锁适用于访问和修改同一个共享资源的时候，即读写同一个资源的时候。</p>\n<p>如果全部都是读取同一个共享资源需要锁吗？\n不需要。因为这时可以认为共享资源是不可变的，每一次读取它都是一样的值，所以不用加锁</p>\n<p>使用锁的注意事项：</p>\n<ul>\n<li>少用锁，必要时用锁。使用了锁，多线程访问被锁的资源时，就成了串行，要么排队执行，要么争抢执行\n举例，高速公路上车并行跑，可是到了省界只开放了一个收费口，过了这个口，车辆依然可以在多车道上一起跑。过收费口的时候，如果排队一辆辆过，加不加锁一样效率相当，但是一旦出现争抢，就必须加锁一辆辆过。注意，不管加不加锁，只要是一辆辆过，效率就下降了。</li>\n<li>加锁时间越短越好，不需要就立即释放锁</li>\n<li>一定要避免死锁</li>\n</ul>\n<p>不使用锁，有了效率，但是结果是错的。\n使用了锁，效率低下，但是结果是对的。\n所以，我们是为了效率要错误结果呢？还是为了对的结果，让计算机去计算吧</p>\n<h3 id=\"非阻塞锁使用\"> 非阻塞锁使用</h3>\n<div><pre><code><span>from</span> threading <span>import</span> Thread<span>,</span> Lock\n<span>import</span> time\n<span>import</span> logging\n\nFORMAT <span>=</span> <span>\"%(asctime)s %(threadName)s %(thread)d %(message)s\"</span>\nlogging<span>.</span>basicConfig<span>(</span><span>format</span><span>=</span>FORMAT<span>,</span> level<span>=</span>logging<span>.</span>INFO<span>)</span>\n\nlock <span>=</span> Lock<span>(</span><span>)</span>\n\n<span>def</span> <span>worker</span><span>(</span>l<span>:</span>Lock<span>)</span><span>:</span>\n    <span>while</span> <span>True</span><span>:</span>\n        flag <span>=</span> l<span>.</span>acquire<span>(</span><span>False</span><span>)</span>\n        <span># flag = l.acquire()</span>\n        <span>if</span> flag<span>:</span>\n            logging<span>.</span>info<span>(</span><span>'do sth.'</span><span>)</span>\n            time<span>.</span>sleep<span>(</span><span>2</span><span>)</span> <span># 拿到锁做事情</span>\n            l<span>.</span>release<span>(</span><span>)</span>\n        <span>else</span><span>:</span>\n            logging<span>.</span>info<span>(</span><span>'try again'</span><span>)</span> <span># 没拿到锁，重试</span>\n            time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n    Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span><span>f\"w-</span><span><span>{</span>i<span>}</span></span><span>\"</span></span><span>,</span> args<span>=</span><span>(</span>lock<span>,</span><span>)</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id=\"queue的线程安全\"> Queue的线程安全</h2>\n<p>标准库queue模块，提供FIFO的Queue、LIFO的队列、优先队列。</p>\n<p>Queue类是线程安全的，适用于同一进程内多线程间安全的交换数据。内部使用了Lock和Condition。</p>\n<p>特别注意下面的代码在多线程中使用</p>\n<div><pre><code><span>import</span> queue\n\nq <span>=</span> queue<span>.</span>Queue<span>(</span><span>8</span><span>)</span>\n\n<span>if</span> q<span>.</span>qsize<span>(</span><span>)</span> <span>==</span> <span>7</span><span>:</span>\n    <span>print</span><span>(</span>q<span>)</span>\n    q<span>.</span>put<span>(</span><span>)</span> <span># 上下两句可能被打断</span>\n\n<span>if</span> q<span>.</span>qsize<span>(</span><span>)</span> <span>==</span> <span>1</span><span>:</span>\n    <span>print</span><span>(</span>q<span>)</span>\n    q<span>.</span>get<span>(</span><span>)</span> <span># 未必会成功</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>如果不加锁，是不可能获得准确的大小的，因为你刚读取到了一个大小，还没有取走数据，就有可能被其他线程改了。\nQueue 类的 size 虽然加了锁，但是，依然不能保证立即 get、put 就能成功，因为读取大小和 get、put 方法是分开的。</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "12 线程",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-thread/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/python-thread/",
      "content_html": "<h1 id=\"_12-线程\"> 12 线程</h1>\n<h2 id=\"并发\"> 并发</h2>\n<p><strong>并发和并行区别</strong></p>\n<p>并行，parallel\n同时做某些事，可以互不干扰的同一个时刻做几件事</p>\n<p>并发，concurrency\n也是同时做某些事，但是强调，一个时段内有事情要处理。</p>\n<p>举例\n高速公路的车道，双向4车道，所有车辆（数据）可以互不干扰的在自己的车道上奔跑（传输）。\n在同一个时刻，每条车道上可能同时有车辆在跑，是同时发生的概念，这是并行。\n在一段时间内，有这么多车要通过，这是并发。</p>\n<p>并行不过是使用水平扩展方式解决并发的一种手段而已。</p>\n<h2 id=\"进程和线程\"> 进程和线程</h2>\n<p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p>\n<p>进程和程序的关系：程序是源代码编译后的文件，而这些文件存放在磁盘上。当程序被操作系统加载到内存中，就是进程，进程中存放着指令和数据（资源）。一个程序的执行实例就是一个进程。它也是线程的容器。</p>\n<p>Linux进程有父进程、子进程，Windows的进程是平等关系。</p>\n<p>在实现了线程的操作系统中，线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p>\n<p>线程，有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元。\n一个标准的线程由线程ID，当前指令指针(PC）、寄存器集合和堆、栈组成。</p>\n<p>在许多系统中，创建一个线程比创建一个进程快10-100倍。</p>\n<h3 id=\"进程、线程的理解\"> 进程、线程的理解</h3>\n<p>现代操作系统提出进程的概念，每一个进程都认为自己独占所有的计算机硬件资源。\n进程就是独立的王国，进程间不可以随便的共享数据。\n线程就是省份，同一个进程内的线程可以共享进程的资源，每一个线程拥有自己独立的堆栈。</p>\n<h3 id=\"线程的状态\"> 线程的状态</h3>\n<ul>\n<li>就绪（Ready）：线程能够运行，但在等待被调度。可能线程刚刚创建启动，或刚刚从阻塞中恢复，或者被其他线程抢占</li>\n<li>运行（Running）：线程正在运行</li>\n<li>阻塞（Blocked）：线程等待外部事件发生而无法运行，如 I/O 操作</li>\n<li>终止（Terminated）：线程完成，或退出，或被取消</li>\n</ul>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/thread.png\" alt=\"thread\"></p>\n<p><strong>python 中的进程和线程</strong></p>\n<p>运行程序会启动一个解释器进程，线程共享一个解释器进程。</p>\n<h2 id=\"python的线程开发\"> Python的线程开发</h2>\n<p>Python 的线程开发使用标准库 threading。</p>\n<p>进程靠线程执行代码，至少有一个<strong>主线程</strong>，其它线程是工作线程。\n主线程是第一个启动的线程。</p>\n<p>父线程：如果线程A中启动了一个线程B，A就是B的父线程。\n子线程：B就是A的子线程。</p>\n<h3 id=\"thread类\"> Thread类</h3>\n<div><pre><code><span># 签名</span>\n<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> group<span>=</span><span>None</span><span>,</span> target<span>=</span><span>None</span><span>,</span> name<span>=</span><span>None</span><span>,</span> args<span>=</span><span>(</span><span>)</span><span>,</span> kwargs<span>=</span><span>None</span><span>,</span> <span>*</span><span>,</span> daemon<span>=</span><span>None</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>target</td>\n<td>线程调用的对象，就是目标函数</td>\n</tr>\n<tr>\n<td>name</td>\n<td>为线程起个名字</td>\n</tr>\n<tr>\n<td>args</td>\n<td>为目标函数传递实参，元组</td>\n</tr>\n<tr>\n<td>kwargs</td>\n<td>为目标函数关键字传参，字典</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"线程启动\"> 线程启动</h3>\n<div><pre><code><span>import</span> threading\n\n<span># 最简单的线程程序</span>\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n\t<span>print</span><span>(</span><span>\"I'm working\"</span><span>)</span>\n\t<span>print</span><span>(</span><span>'Fineshed'</span><span>)</span>\n    \nt <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span> <span># 线程对象</span>\nt<span>.</span>start<span>(</span><span>)</span> <span># 启动</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>通过threading.Thread创建一个线程对象，target是目标函数，可以使用name为线程指定名称。\n但是线程没有启动，需要调用start方法。</p>\n<p>线程之所以执行函数，是因为线程中就是要执行代码的，而最简单的代码封装就是函数，所以还是函数调用。\n函数执行完，线程也就退出了。\n那么，如果不让线程退出，或者让线程一直工作怎么办呢？</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    <span>while</span> <span>True</span><span>:</span> <span># for i in range(10):</span>\n        time<span>.</span>sleep<span>(</span><span>0.5</span><span>)</span>\n        <span>print</span><span>(</span><span>\"I'm working\"</span><span>)</span>\n    <span>print</span><span>(</span><span>'Fineshed'</span><span>)</span>\n    \nt <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span> <span># 线程对象</span>\nt<span>.</span>start<span>(</span><span>)</span> <span># 启动</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"线程退出\"> 线程退出</h3>\n<p>Python没有提供线程退出的方法，线程在下面情况时退出\n1、线程函数内语句执行完毕\n2、线程函数中抛出未处理的异常</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>0.5</span><span>)</span>\n        <span>if</span> i <span>></span> <span>5</span><span>:</span>\n            <span>#break # 终止循环</span>\n            <span>#return # 函数返回</span>\n            <span>raise</span> RuntimeError <span># 抛异常</span>\n    \t<span>print</span><span>(</span><span>'I am working'</span><span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n    \nt <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span>\nt<span>.</span>start<span>(</span><span>)</span>\n<span>print</span><span>(</span><span>'='</span> <span>*</span> <span>30</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>Python的线程没有优先级、没有线程组的概念，也不能被销毁、停止、挂起，那也就没有恢复、中断了。</p>\n<h3 id=\"线程的传参\"> 线程的传参</h3>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>add</span><span>(</span>x<span>,</span> y<span>)</span><span>:</span>\n\t<span>print</span><span>(</span><span>'{} + {} = {}'</span><span>.</span><span>format</span><span>(</span>x<span>,</span> y<span>,</span> x <span>+</span> y<span>,</span> threading<span>.</span>current_thread<span>(</span><span>)</span><span>.</span>ident<span>)</span><span>)</span>\n    \nt1 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>add<span>,</span> name<span>=</span><span>'add'</span><span>,</span> args<span>=</span><span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span><span>)</span>\nt1<span>.</span>start<span>(</span><span>)</span>\ntime<span>.</span>sleep<span>(</span><span>2</span><span>)</span>\n\nt2 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>add<span>,</span> name<span>=</span><span>'add'</span><span>,</span> args<span>=</span><span>(</span><span>6</span><span>,</span><span>)</span><span>,</span> kwargs<span>=</span><span>{</span><span>'y'</span><span>:</span><span>7</span><span>}</span><span>)</span>\nt2<span>.</span>start<span>(</span><span>)</span>\ntime<span>.</span>sleep<span>(</span><span>2</span><span>)</span>\n\nt3 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>add<span>,</span> name<span>=</span><span>'add'</span><span>,</span> kwargs<span>=</span><span>{</span><span>'x'</span><span>:</span><span>8</span><span>,</span> <span>'y'</span><span>:</span><span>9</span><span>}</span><span>)</span>\nt3<span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>线程传参和函数传参没什么区别，本质上就是函数传参。</p>\n<h3 id=\"threading-的属性和方法\"> threading 的属性和方法</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>current_thread()</td>\n<td>返回当前线程对象</td>\n</tr>\n<tr>\n<td>main_thread()</td>\n<td>返回主线程对象</td>\n</tr>\n<tr>\n<td>active_count()</td>\n<td>当前处于alive状态的线程个数</td>\n</tr>\n<tr>\n<td>enumerate()</td>\n<td>返回所有活着的线程的列表，不包括已经终止的线程和未开始的线程</td>\n</tr>\n<tr>\n<td>get_ident()</td>\n<td>返回当前线程的ID，非0整数</td>\n</tr>\n</tbody>\n</table>\n<p>active_count、enumerate 方法返回的值还包括主线程。</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>showtreadinfo</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>'current thread = {}\\nmain thread = {}\\nactive count = {}'</span><span>.</span><span>format</span><span>(</span>\n    threading<span>.</span>current_thread<span>(</span><span>)</span><span>,</span> threading<span>.</span>main_thread<span>(</span><span>)</span><span>,</span> threading<span>.</span>active_count<span>(</span><span>)</span>\n    <span>)</span><span>)</span>\n    \n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    showtreadinfo<span>(</span><span>)</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'i am working'</span><span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n    \nt <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span> <span># 线程对象</span>\nshowtreadinfo<span>(</span><span>)</span>\ntime<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\nt<span>.</span>start<span>(</span><span>)</span> <span># 启动</span>\n<span>print</span><span>(</span><span>'===end==='</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id=\"thread-实例的属性和方法\"> Thread 实例的属性和方法</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>只是一个名字，只是个标识，名称可以重名。getName()、setName() 获取、设置这个名词</td>\n</tr>\n<tr>\n<td>ident</td>\n<td>线程ID，它是非0整数。线程启动后才会有ID，否则为None。线程退出，此ID依旧可以访问。此ID可以重复使用</td>\n</tr>\n<tr>\n<td>is_alive()</td>\n<td>返回线程是否活着</td>\n</tr>\n</tbody>\n</table>\n<p>注意：线程的name这是一个名称，可以重复；ID必须唯一，但可以在线程退出后再利用。</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'i am working'</span><span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n\nt <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span> <span># 线程对象</span>\n<span>print</span><span>(</span>t<span>.</span>name<span>,</span> t<span>.</span>ident<span>)</span>\ntime<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\nt<span>.</span>start<span>(</span><span>)</span> <span># 启动</span>\n\n<span>print</span><span>(</span><span>'===end==='</span><span>)</span>\n\n<span>while</span> <span>True</span><span>:</span>\n    time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n    <span>print</span><span>(</span><span>'{} {} {}'</span><span>.</span><span>format</span><span>(</span>t<span>.</span>name<span>,</span> t<span>.</span>ident<span>,</span>\n    <span>'alive'</span> <span>if</span> t<span>.</span>is_alive<span>(</span><span>)</span> <span>else</span> <span>'dead'</span><span>)</span><span>)</span>\n    <span>if</span> <span>not</span> t<span>.</span>is_alive<span>(</span><span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'{} restart'</span><span>.</span><span>format</span><span>(</span>t<span>.</span>name<span>)</span><span>)</span>\n        t<span>.</span>start<span>(</span><span>)</span> <span># 线程重启？？ 报错 线程只可以启动一次</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start()</td>\n<td>启动线程。每一个线程必须且只能执行该方法一次</td>\n</tr>\n<tr>\n<td>run()</td>\n<td>运行线程函数</td>\n</tr>\n</tbody>\n</table>\n<p>为了演示，派生一个Thread的子类</p>\n<p><strong>start  方法</strong></p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'i am working'</span><span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n\n<span>class</span> <span>MyThread</span><span>(</span>threading<span>.</span>Thread<span>)</span><span>:</span>\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'start~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n        \n    <span>def</span> <span>run</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'run~~~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>run<span>(</span><span>)</span>\n\nt <span>=</span> MyThread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span>\nt<span>.</span>start<span>(</span><span>)</span>\n\n<span># 运行结果</span>\nstart<span>~</span><span>~</span><span>~</span><span>~</span>\nrun<span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span>\ni am working\ni am working\ni am working\ni am working\ni am working\nfinished\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p><strong>run 方法</strong></p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'i am working'</span><span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n\n<span>class</span> <span>MyThread</span><span>(</span>threading<span>.</span>Thread<span>)</span><span>:</span>\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'start~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>run</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'run~~~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>run<span>(</span><span>)</span>\n\nt <span>=</span> MyThread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span>\n<span># t.start()</span>\nt<span>.</span>run<span>(</span><span>)</span> <span># 也不可执行多次</span>\n\n<span># 运行结果</span>\nrun<span>~</span><span>~</span><span>~</span><span>~</span><span>~</span><span>~</span>\ni am working\ni am working\ni am working\ni am working\ni am working\nfinished\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>start() 方法会调用 run() 方法，而 run() 方法可以运行函数。\n这两个方法看似功能重复了，这么看来留一个方法就可以了。是这样吗？</p>\n<p><strong>start和run的区别</strong></p>\n<p>在线程函数中，增加打印线程的名字的语句，看看能看到什么信息。</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span>threading<span>.</span><span>enumerate</span><span>(</span><span>)</span><span>)</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'i am working'</span><span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n\n<span>class</span> <span>MyThread</span><span>(</span>threading<span>.</span>Thread<span>)</span><span>:</span>\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'start~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n\n    <span>def</span> <span>run</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'run~~~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>run<span>(</span><span>)</span>\n\nt <span>=</span> MyThread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker'</span><span>)</span>\nt<span>.</span>start<span>(</span><span>)</span>\n<span># t.run() # 分别执行start或者run方法</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>使用start方法启动线程，启动了一个新的线程，名字叫做worker运行。但是使用run方法的，并没有启动新的线程，就是在主线程中调用了一个普通的函数而已。</p>\n<p>因此，启动线程请使用start方法，且对于这个线程来说，start方法只能调用一次。（设置_started属性实现）</p>\n<h2 id=\"多线程\"> 多线程</h2>\n<p>顾名思义，多个线程，一个进程中如果有多个线程运行，就是多线程，实现一种并发。</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    t <span>=</span> threading<span>.</span>current_thread<span>(</span><span>)</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'i am working'</span><span>,</span> t<span>.</span>name<span>,</span> t<span>.</span>ident<span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n    \n<span>class</span> <span>MyThread</span><span>(</span>threading<span>.</span>Thread<span>)</span><span>:</span>\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'start~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n        \n    <span>def</span> <span>run</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'run~~~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>run<span>(</span><span>)</span>\n    \nt1 <span>=</span> MyThread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker1'</span><span>)</span>\nt2 <span>=</span> MyThread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker2'</span><span>)</span>\nt1<span>.</span>start<span>(</span><span>)</span>\nt2<span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>可以看到 worker1 和 worker2 交替执行，改成 run 方法试试看</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    t <span>=</span> threading<span>.</span>current_thread<span>(</span><span>)</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>5</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>1</span><span>)</span>\n        <span>print</span><span>(</span><span>'i am working'</span><span>,</span> t<span>.</span>name<span>,</span> t<span>.</span>ident<span>)</span>\n    <span>print</span><span>(</span><span>'finished'</span><span>)</span>\n    \n<span>class</span> <span>MyThread</span><span>(</span>threading<span>.</span>Thread<span>)</span><span>:</span>\n    <span>def</span> <span>start</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'start~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>start<span>(</span><span>)</span>\n        \n    <span>def</span> <span>run</span><span>(</span>self<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'run~~~~~~'</span><span>)</span>\n        <span>super</span><span>(</span><span>)</span><span>.</span>run<span>(</span><span>)</span>\n    \nt1 <span>=</span> MyThread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker1'</span><span>)</span>\nt2 <span>=</span> MyThread<span>(</span>target<span>=</span>worker<span>,</span> name<span>=</span><span>'worker2'</span><span>)</span>\n<span># t1.start()</span>\n<span># t2.start()</span>\nt1<span>.</span>run<span>(</span><span>)</span>\nt2<span>.</span>run<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>没有开新的线程，这就是普通函数调用，所以执行完 t1.run() ，然后执行 t2.run() ，这里就不是多线程。\n当使用 start 方法启动线程后，进程内有多个活动的线程并行的工作，就是多线程。</p>\n<p>一个进程中至少有一个线程，并作为程序的入口，这个线程就是主线程。\n一个进程至少有一个主线程。\n其他线程称为工作线程。</p>\n<h2 id=\"线程安全\"> 线程安全</h2>\n<p>多线程执行一段代码，不会产生不确定的结果，那这段代码就是线程安全的。</p>\n<p>多线程在运行过程中，由于共享同一进程中的数据，多线程并发使用同一个数据，那么数据就有可能被相互修改，从而导致某些时刻无法确定这个数据的值，最终随着多线程运行，运行结果不可预期，这就是线程不安全。</p>\n<h2 id=\"deamon-线程\"> deamon 线程</h2>\n<p>注：有人翻译成后台线程，也有人翻译成守护线程。</p>\n<p>Python中，构造线程的时候，可以设置daemon属性，这个属性必须在start方法前设置好。</p>\n<div><pre><code><span># 源码Thread的__init__方法中</span>\n<span>if</span> daemon <span>is</span> <span>not</span> <span>None</span><span>:</span>\n\tself<span>.</span>_daemonic <span>=</span> daemon <span># 用户设定bool值</span>\n<span>else</span><span>:</span>\n\tself<span>.</span>_daemonic <span>=</span> current_thread<span>(</span><span>)</span><span>.</span>daemon\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>线程daemon属性，如果设定就是用户的设置，否则就取当前线程的daemon值。\n主线程是non-daemon线程，即daemon = False。</p>\n<div><pre><code><span>class</span> <span>_MainThread</span><span>(</span>Thread<span>)</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n    \tThread<span>.</span>__init__<span>(</span>self<span>,</span> name<span>=</span><span>\"MainThread\"</span><span>,</span> daemon<span>=</span><span>False</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>import</span> time\n<span>import</span> threading\n\n<span>def</span> <span>foo</span><span>(</span><span>)</span><span>:</span>\n    time<span>.</span>sleep<span>(</span><span>5</span><span>)</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>20</span><span>)</span><span>:</span>\n    \t<span>print</span><span>(</span>i<span>)</span>\n        \n<span># 主线程是non-daemon线程</span>\nt <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>foo<span>,</span> daemon<span>=</span><span>False</span><span>)</span>\nt<span>.</span>start<span>(</span><span>)</span>\n\n<span>print</span><span>(</span><span>'Main Thread Exits'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>发现线程t依然执行，主线程已经执行完，但是一直等着线程 t。\n修改为  t = threading.Thread(target=foo, daemon=True)  试一试，结果程序立即结束了，进程根本没有等daemon 线程t。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>daemon 属性</td>\n<td>表示线程是否是daemon线程，这个值必须在start()之前设置，否则引发<br/>RuntimeError异常</td>\n</tr>\n<tr>\n<td>isDaemon()</td>\n<td>是否是daemon线程</td>\n</tr>\n<tr>\n<td>setDaemon()</td>\n<td>设置为daemon线程，必须在start方法之前设置</td>\n</tr>\n</tbody>\n</table>\n<p>看一个例子，，看看主线程何时结束 daemon 线程</p>\n<div><pre><code><span>import</span> time\n<span>import</span> threading\n\n<span>def</span> <span>worker</span><span>(</span>name<span>,</span> timeout<span>)</span><span>:</span>\n    time<span>.</span>sleep<span>(</span>timeout<span>)</span>\n    <span>print</span><span>(</span><span>'{} working'</span><span>.</span><span>format</span><span>(</span>name<span>)</span><span>)</span>\n    \n<span># 主线程 是non-daemon线程</span>\nt1 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> args<span>=</span><span>(</span><span>'t1'</span><span>,</span> <span>5</span><span>)</span><span>,</span> daemon<span>=</span><span>True</span><span>)</span> <span># 调换5和10看看效果</span>\nt1<span>.</span>start<span>(</span><span>)</span>\n\nt2 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> args<span>=</span><span>(</span><span>'t2'</span><span>,</span> <span>10</span><span>)</span><span>,</span> daemon<span>=</span><span>False</span><span>)</span>\nt2<span>.</span>start<span>(</span><span>)</span>\n\n<span>print</span><span>(</span><span>'Main Thread Exits'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>上例说明，如果除主线程之外还有 non-daemon 线程的时候，主线程退出时，进程也不会杀掉所有 daemon 线程，直到所有 non-daemon 线程全部结束，如果还有 daemon 线程，主线程需要退出（主线程退出也可以理解为最后一个non-daemon线程也要退出了），进程会结束所有 daemon 线程，程序退出。</p>\n<p><strong>总结</strong></p>\n<ul>\n<li>线程具有一个daemon属性，可以手动设置为True或False，也可以不设置，则取默认值None</li>\n<li>如果不设置daemon，就取当前线程的daemon来设置它</li>\n<li>主线程是non-daemon线程，即daemon = False</li>\n<li>从主线程创建的所有线程的不设置daemon属性，则默认都是daemon = False，也就是non-daemon线程</li>\n<li>Python程序在没有活着的non-daemon线程运行时，程序退出，也就是除主线程之外剩下的只能都是daemon线程，主线程才能退出，否则主线程就只能等待</li>\n</ul>\n<h2 id=\"join-方法\"> join 方法</h2>\n<p>先看一个简单的例子，看看效果</p>\n<div><pre><code><span>import</span> time\n<span>import</span> threading\n\n<span>def</span> <span>worker</span><span>(</span>name<span>,</span> timeout<span>)</span><span>:</span>\n    time<span>.</span>sleep<span>(</span>timeout<span>)</span>\n    <span>print</span><span>(</span><span>'{} working'</span><span>.</span><span>format</span><span>(</span>name<span>)</span><span>)</span>\n    \nt1 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> args<span>=</span><span>(</span><span>'t1'</span><span>,</span> <span>3</span><span>)</span><span>,</span> daemon<span>=</span><span>True</span><span>)</span>\nt1<span>.</span>start<span>(</span><span>)</span>\nt1<span>.</span>join<span>(</span><span>)</span><span># 设置join，取消join对比一下</span>\n\n<span>print</span><span>(</span><span>'Main Thread Exits'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>使用了 join 方法后，当前线程阻塞了，daemon 线程执行完了，主线程才退出了。</p>\n<div><pre><code><span>import</span> time\n<span>import</span> threading\n\n<span>def</span> <span>worker</span><span>(</span>name<span>,</span> timeout<span>)</span><span>:</span>\n    time<span>.</span>sleep<span>(</span>timeout<span>)</span>\n    <span>print</span><span>(</span><span>'{} working'</span><span>.</span><span>format</span><span>(</span>name<span>)</span><span>)</span>\n    \nt1 <span>=</span> threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>,</span> args<span>=</span><span>(</span><span>'t1'</span><span>,</span> <span>10</span><span>)</span><span>,</span> daemon<span>=</span><span>True</span><span>)</span>\nt1<span>.</span>start<span>(</span><span>)</span>\nt1<span>.</span>join<span>(</span><span>2</span><span>)</span>\n<span>print</span><span>(</span><span>'~~~~~~~~~~~'</span><span>)</span>\nt1<span>.</span>join<span>(</span><span>2</span><span>)</span>\n<span>print</span><span>(</span><span>'~~~~~~~~~~~'</span><span>)</span>\n\n<span>print</span><span>(</span><span>'Main Thread Exits'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p><code>join(timeout=None)</code></p>\n<ul>\n<li>join 方法是线程的标准方法之一</li>\n<li>一个线程中调用另一个线程的 join 方法，调用者将被阻塞，直到被调用线程终止，或阻塞超时</li>\n<li>一个线程可以被 join 多次</li>\n<li>timeout 参数指定调用者等待多久，没有设置超时，就一直等到被调用线程结束</li>\n<li>调用谁的 join 方法，就是 join 谁，就要等谁</li>\n</ul>\n<h2 id=\"daemon线程应用场景\"> daemon线程应用场景</h2>\n<p>主要应用场景有：</p>\n<ol>\n<li>后台任务。如发送心跳包、监控，这种场景最多</li>\n<li>主线程工作才有用的线程。如主线程中维护这公共的资源，主线程已经清理了，准备退出，而工作线程使用这些资源工作也没有意义了，一起退出最合适</li>\n<li>随时可以被终止的线程</li>\n</ol>\n<p>如果主线程退出，想所有其它工作线程一起退出，就使用daemon=True来创建工作线程。\n比如，开启一个线程定时判断WEB服务是否正常工作，主线程退出，工作线程也没有必须存在了，应该随着主线程退出一起退出。这种daemon线程一旦创建，就可以忘记它了，只用关心主线程什么时候退出就行了。</p>\n<p>daemon线程，简化了程序员手动关闭线程的工作。</p>\n<h2 id=\"threading-local-类\"> threading.local 类</h2>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    x <span>=</span> <span>0</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>100</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>0.0001</span><span>)</span>\n        x <span>+=</span> <span>1</span>\n    <span>print</span><span>(</span>threading<span>.</span>current_thread<span>(</span><span>)</span><span>,</span> x<span>)</span>\n    \n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n\tthreading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>)</span><span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>上例使用多线程，每个线程完成不同的计算任务。\nx是局部变量，可以看出每一个线程的x是独立的，互不干扰的，为什么？</p>\n<p>能否改造成使用全局变量完成？</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span>class</span> <span>A</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> <span>0</span>\n\n<span># 全局对象</span>\nglobal_data <span>=</span> A<span>(</span><span>)</span>\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    global_data<span>.</span>x <span>=</span> <span>0</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>100</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>0.0001</span><span>)</span>\n        global_data<span>.</span>x <span>+=</span> <span>1</span>\n    <span>print</span><span>(</span>threading<span>.</span>current_thread<span>(</span><span>)</span><span>,</span> global_data<span>.</span>x<span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n    threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>)</span><span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>上例虽然使用了全局对象，但是线程之间互相干扰，导致了不期望的结果。<strong>线程不安全</strong>。</p>\n<p>能不能既使用全局对象，还能保持每个线程使用不同的数据呢？</p>\n<p>python 提供 threading.local 类，将这个类实例化得到一个全局对象，但是不同的线程使用这个对象存储的数据其他线程看不见。</p>\n<div><pre><code><span>import</span> threading\n<span>import</span> time\n\n<span># 全局对象</span>\nglobal_data <span>=</span> threading<span>.</span>local<span>(</span><span>)</span>\n\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    global_data<span>.</span>x <span>=</span> <span>0</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>100</span><span>)</span><span>:</span>\n        time<span>.</span>sleep<span>(</span><span>0.0001</span><span>)</span>\n        global_data<span>.</span>x <span>+=</span> <span>1</span>\n    <span>print</span><span>(</span>threading<span>.</span>current_thread<span>(</span><span>)</span><span>,</span> global_data<span>.</span>x<span>)</span>\n\n<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>\n    threading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>)</span><span>.</span>start<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>结果显示和使用局部变量的效果一样。</p>\n<p>再看 threading.local 的例子</p>\n<div><pre><code><span>import</span> threading\n\nX <span>=</span> <span>'abc'</span>\nglobal_data <span>=</span> threading<span>.</span>local<span>(</span><span>)</span> <span># 注意这个对象所处的线程</span>\nglobal_data<span>.</span>x <span>=</span> <span>100</span>\n\n<span>print</span><span>(</span>global_data<span>,</span> <span>type</span><span>(</span>global_data<span>)</span><span>,</span> global_data<span>.</span>x<span>)</span>\n<span>def</span> <span>worker</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span>X<span>)</span>\n    <span>print</span><span>(</span>global_data<span>)</span>\n    <span>print</span><span>(</span>global_data<span>.</span>x<span>)</span>\n    <span>print</span><span>(</span><span>'in worker'</span><span>)</span>\n    \nworker<span>(</span><span>)</span> <span># 普通函数调用</span>\n<span>print</span><span>(</span><span>'-'</span> <span>*</span> <span>30</span><span>)</span>\nthreading<span>.</span>Thread<span>(</span>target<span>=</span>worker<span>)</span><span>.</span>start<span>(</span><span>)</span> <span># 启动一个线程</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>从运行结果来看，另起一个线程打印 global_data.x 出错了。</p>\n<p><code>AttributeError: '_thread._local' object has no attribute 'x'</code></p>\n<p>但是，global_data 打印没有出错，说明看到 global_data，但是 global_data 中的 x 看不到，这个 x 不能跨线程。\nthreading.local类构建了一个大字典，存放所有线程相关的字典，定义如下：\n<code>{ id(Thread) -&gt; (ref(Thread), thread-local dict) }</code></p>\n<p>每一线程实例的 id 为 key，元组为 value。</p>\n<p>value中2部分为，线程对象引用，每个线程自己的字典。</p>\n<blockquote>\n<p>本质</p>\n<p>运行时，threading.local 实例处在不同的线程中，就从大字典中找到当前线程相关键值对中的字典，覆盖threading.local 实例的 <code>__dict__</code> 。</p>\n<p>这样就可以在不同的线程中，安全地使用线程独有的数据，做到了线程间数据隔离，如同本地变量一样安全。</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/thread.png",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 学习笔记",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/",
      "content_html": "<h1 id=\"python-学习笔记\"> Python 学习笔记</h1>\n<p>Hello Python~</p>\n<h1 id=\"summary\"> Summary</h1>\n<ul>\n<li><a href=\"./python-basic-grammar.html\">01 Python基础语法</a></li>\n<li><a href=\"./python-linear-data-structure.html\">02 线性数据结构</a></li>\n<li><a href=\"./python-ha-tables-analytic-expre.html\">03 哈希表和解析式</a></li>\n<li><a href=\"./python-function.html\">04 函数</a></li>\n<li><a href=\"./python-decorator.html\">05 装饰器</a></li>\n<li><a href=\"./python-dir-file-pro.html\">06 目录文件处理</a></li>\n<li><a href=\"./python-serialize.html\">07 序列化和反序列化</a></li>\n<li><a href=\"./python-exception.html\">08 异常处理</a></li>\n<li><a href=\"./python-oo-package.html\">09 面向对象-封装</a></li>\n<li><a href=\"./python-oo-inher-pol.html\">10 继承多态和Mixin</a></li>\n<li><a href=\"./python-magic.html\">11 魔术方法</a></li>\n<li><a href=\"./python-thread.html\">12 线程</a></li>\n<li><a href=\"./python-thread-sync.html\">13 线程同步</a></li>\n<li><a href=\"./python-gil-multiprocessing.html\">14 多进程</a></li>\n<li><a href=\"./python-tcp-pg.html\">15 TCP 编程</a></li>\n<li><a href=\"./python-socketserver.html\">16 SocketServer</a></li>\n<li><a href=\"./python-io-model.html\">17 IO 模型</a></li>\n</ul>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-06T03:44:06.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python介绍",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/temp/3.1%20%E7%AE%80%E4%BB%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/temp/3.1%20%E7%AE%80%E4%BB%8B/",
      "content_html": "<h2 id=\"python介绍\"> Python介绍</h2>\n<p>python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。</p>\n<p>Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。</p>\n<p><strong>目前Python主要应用领域：</strong></p>\n<ul>\n<li>云计算：OpenStack</li>\n<li>WEB开发：Django</li>\n<li>人工智能</li>\n<li>系统运维</li>\n<li>金融：量化交易</li>\n<li>图形GUI</li>\n</ul>\n<h2 id=\"python是一门什么样的语言\"> Python是一门什么样的语言</h2>\n<p>编程语言主要从以下几个角度为进行分类，编译型和解释型、静态语言和动态语言、强类型定义语言和弱类型定义语言。</p>\n<h3 id=\"低级语言与高级语言\"> 低级语言与高级语言</h3>\n<p>低级语言</p>\n<p><em>最初的计算机程序都是用0和1的序列表示的，程序员直接使用的是机器指令，无需翻译，从纸带打孔输入即可执行得到结果。后来为了方便记忆，就将用0、1序列表示的机器指令都用符号助记，这些与机器指令一一对应的助记符就成了汇编指令，从而诞生了汇编语言。无论是机器指令还是汇编指令都是面向机器的，统称为低级语言。因为是针对特定机器的机器指令的助记符，所以汇编语言是无法独立于机器(特定的CPU体系结构)的。但汇编语言也是要经过翻译成机器指令才能执行的，所以也有将运行在一种机器上的汇编语言翻译成运行在另一种机器上的机器指令的方法，那就是交叉汇编技术。</em></p>\n<p>高级语言</p>\n<p><em>高级语言是从人类的逻辑思维角度出发的计算机语言，抽象程度大大提高，需要经过编译成特定机器上的目标代码才能执行，一条高级语言的语句往往需要若干条机器指令来完成。高级语言独立于机器的特性是靠编译器为不同机器生成不同的目标代码(或机器指令)来实现的。那具体的说，要将高级语言编译到什么程度呢，这又跟编译的技术有关了，既可以编译成直接可执行的目标代码，也可以编译成一种中间表示，然后拿到不同的机器和系统上去执行，这种情况通常又需要支撑环境，比如解释器或虚拟机的支持，Java程序编译成bytecode，再由不同平台上的虚拟机执行就是很好的例子。所以，说高级语言不依赖于机器，是指在不同的机器或平台上高级语言的程序本身不变，而通过编译器编译得到的目标代码去适应不同的机器。从这个意义上来说，通过交叉汇编，一些汇编程序也可以获得不同机器之间的可移植性，但这种途径获得的移植性远远不如高级语言来的方便和实用性大。</em></p>\n<p><strong>Python为高级语言</strong></p>\n<h3 id=\"编译语言和解释语言\"> 编译语言和解释语言</h3>\n<p><strong>编译器</strong>是把源程序的每一条语句都编译成机器语言,并保存成二进制文件,这样运行时计算机可以直接以机器语言来运行此程序,速度很快;</p>\n<p>而<strong>解释器</strong>则是只在执行程序时,才一条一条的解释成机器语言给计算机来执行,所以运行速度是不如编译后的程序运行的快的.</p>\n<p>这是因为计算机不能直接认识并执行我们写的语句,它只能认识机器语言(是二进制的形式)</p>\n<p><img src=\"images/%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B.png\" alt=\"\"></p>\n<p><strong>Python为解释型语言</strong></p>\n<p><img src=\"images/%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B2.png\" alt=\"\"></p>\n<h4 id=\"编译型vs解释型\"> 编译型vs解释型</h4>\n<p><strong>编译型</strong></p>\n<p>优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高。可以脱离语言环境独立运行。\n缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。</p>\n<p><strong>解释型</strong></p>\n<p>优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。</p>\n<p>缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。</p>\n<h3 id=\"动态语言和静态语言\"> 动态语言和静态语言</h3>\n<p><em>通常我们所说的动态语言、静态语言是指动态类型语言和静态类型语言。</em></p>\n<p><em>（1）动态类型语言：动态类型语言是指在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。</em></p>\n<p><em>（2）静态类型语言：静态类型语言与动态类型语言刚好相反，它的数据类型是在编译其间检查的，也就是说在写程序时要声明所有变量的数据类型，C/C++是静态类型语言的典型代表，其他的静态类型语言还有C#、JAVA等。</em></p>\n<p><strong>Python为动态类型语言</strong></p>\n<h3 id=\"强类型定义语言和弱类型定义语言\"> 强类型定义语言和弱类型定义语言</h3>\n<p><em>（1）强类型定义语言：强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。</em></p>\n<p><em>（2）弱类型定义语言：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。</em></p>\n<p><em>强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。另外，“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的！</em>\n<em>例如：Python是动态语言，是强类型定义语言（类型安全的语言）; VBScript是动态语言，是弱类型定义语言（类型不安全的语言）; JAVA是静态语言，是强类型定义语言（类型安全的语言）。</em></p>\n<p><strong>Python为强类型定义语言</strong></p>\n<blockquote>\n<p>总结，python是一门动态解释性的强类型定义语言</p>\n</blockquote>\n<h2 id=\"hello-world程序\"> Hello World程序</h2>\n<h3 id=\"指定解释器\"> 指定解释器</h3>\n<div><pre><code><span>#!/usr/bin/env python</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"指定字符编码\"> 指定字符编码</h3>\n<div><pre><code><span>#_*_coding:utf-8_*_</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"注释\"> 注释</h3>\n<p>当行注视：# 被注释内容</p>\n<p>多行注释：&quot;&quot;&quot; 被注释内容 &quot;&quot;&quot;</p>\n<p>参考链接：</p>\n<blockquote>\n<p>https://www.cnblogs.com/alex3714/articles/5465198.html</p>\n</blockquote>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-03T15:30:56.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "数据类型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/temp/3.2%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/temp/3.2%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
      "content_html": "<h2 id=\"数据类型\"> 数据类型</h2>\n<h3 id=\"列表\"> 列表</h3>\n<p>列表是我们最以后最常用的数据类型之一，通过列表可以对数据实现最方便的存储、修改等操作。</p>\n<p>定义列表</p>\n<div><pre><code>names <span>=</span> <span>[</span><span>'zhangsan'</span><span>,</span><span>'lisi'</span><span>,</span><span>'wangwu'</span><span>]</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>通过下标访问列表中的元素，下标从0开始计数</p>\n<div><pre><code>print(name[0])\n</code></pre>\n<div><span>1</span><br></div></div><p>运行结果为：</p>\n<p>zhangsan</p>\n<p><strong>取多个元素</strong></p>\n<div><pre><code>names<span>[</span><span>1</span><span>:</span><span>4</span><span>:</span><span>2</span><span>]</span>  <span>#取下标1至下标4之间的数字，每隔一个元素，就取一个,包括1，不包括4</span>\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>追加</strong></p>\n<div><pre><code>names<span>.</span>append<span>(</span><span>'xiaoliu'</span><span>)</span>\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>插入</strong></p>\n<div><pre><code>names.insert(1, &quot;aa&quot;)\n</code></pre>\n<div><span>1</span><br></div></div><p>运行结果为：</p>\n<p>['zhangsan', 'aa', 'lisi', 'wangwu', 'xiaoliu']</p>\n<p><strong>修改</strong></p>\n<div><pre><code>names[1] = &quot;bb&quot;\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>删除</strong></p>\n<p>按下标删除</p>\n<div><pre><code>del names[1]\n</code></pre>\n<div><span>1</span><br></div></div><p>按指定元素删除</p>\n<div><pre><code>names.remove(&quot;zhangsan&quot;)\n</code></pre>\n<div><span>1</span><br></div></div><p>删除列表中最后一个值</p>\n<div><pre><code>names.pop()\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>扩展</strong></p>\n<div><pre><code>names = [&#39;zhangsan&#39;,&#39;lisi&#39;,&#39;wangwu&#39;]\nages = [&#39;1&#39;,&#39;2&#39;]\nnames.extend(ages)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>输出结果为：</p>\n<p>['zhangsan', 'lisi', 'wangwu', '1', '2']</p>\n<p><strong>拷贝</strong></p>\n<div><pre><code>name2 = names.copy()\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>统计</strong></p>\n<div><pre><code>num = [1,2,3,4,2,3,4,2]\nprint(num.count(2))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>3</p>\n<p><strong>排序</strong></p>\n<div><pre><code>num = [1,2,3,4,2,3,4,2]\nnum.sort()\nprint(num)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>输出结果为：</p>\n<p>[1, 2, 2, 2, 3, 3, 4, 4]</p>\n<p><strong>翻转</strong></p>\n<div><pre><code>name.reverse()\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>获取下标</strong></p>\n<div><pre><code>num = [1,2,3,4,2,3,4,2]\nprint(num.index(3))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>2</p>\n<p>注意：只返回找到的第一个下标</p>\n<h3 id=\"元组\"> 元组</h3>\n<p>元组其实跟列表差不多，也是存一组数，只不是它一旦创建，便不能再修改，所以又叫只读列表</p>\n<div><pre><code>names = (&#39;zhangsan&#39;,&#39;lisi&#39;,&#39;wangwu&#39;)\nprint(names, names.count(&quot;zhangsan&quot;),names.index(&quot;lisi&quot;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>('zhangsan', 'lisi', 'wangwu') 1 1</p>\n<h3 id=\"字符串\"> 字符串</h3>\n<p><strong>特性：不可修改</strong></p>\n<p><strong>首字母大写</strong></p>\n<div><pre><code>name <span>=</span> <span>\"abc\"</span>\n<span>print</span><span>(</span>name<span>.</span>capitalize<span>(</span><span>)</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>Abc</p>\n<p><strong>大写全部变小写</strong></p>\n<div><pre><code>name = &quot;ABC&quot;\nprint(name.casefold())\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>abc</p>\n<p><strong>居中</strong></p>\n<div><pre><code>name = &quot;ABC&quot;\nprint(name.center(50, &quot;-&quot;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>-----------------------ABC------------------------</p>\n<p><strong>统计lex出现次数</strong></p>\n<div><pre><code>name = &quot;ABClexjjlllex&quot;\nprint(name.count(&#39;lex&#39;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>2</p>\n<p><strong>将字符串编码成bytes格式</strong></p>\n<div><pre><code>name.encode()\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>判断字符串是否已Li结尾</strong></p>\n<div><pre><code>name = &quot;ABClexjjlllexLi&quot;\nprint(name.endswith(&quot;Li&quot;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>True</p>\n<p><strong>输出'Wangzhi      Clay'， 将\\t转换成多长的空格</strong></p>\n<div><pre><code>print(&quot;Wangzhi\\tClay&quot;.expandtabs(20))\n</code></pre>\n<div><span>1</span><br></div></div><p>输出结果为：</p>\n<p>Wangzhi             Clay</p>\n<p><strong>find 查找A,找到返回其索引， 找不到返回-1</strong></p>\n<div><pre><code>name = &quot;BClexAjjlllex&quot;\nprint(name.find(&#39;A&#39;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>5</p>\n<p><strong>format 格式化输出</strong></p>\n<div><pre><code>msg = &quot;my name is {}, and age is {}&quot;\nprint(msg.format(&quot;clay&quot;, 18))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>my name is clay, and age is 18</p>\n<div><pre><code>msg = &quot;my name is {1}, and age is {0}&quot;\nprint(msg.format(&quot;clay&quot;, 18))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>my name is 18, and age is clay</p>\n<div><pre><code>msg = &quot;my name is {name}, and age is {age}&quot;\nprint(msg.format(age=18, name=&quot;clay&quot;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>my name is clay, and age is 18</p>\n<p><strong>format_map 格式化输出</strong></p>\n<div><pre><code>msg = &quot;my name is {name}, and age is {age}&quot;\nprint(msg.format_map({&#39;age&#39;:18, &#39;name&#39;:&#39;clay&#39;})\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>my name is clay, and age is 18</p>\n<p><strong>index 返回索引</strong></p>\n<div><pre><code>name = &quot;BAClexAjjlllex&quot;\nprint(name.index(&#39;A&#39;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>1</p>\n<p><strong>isalnum都是字母和数字</strong></p>\n<div><pre><code>name = &quot;k&quot;\nprint(name.isalnum())\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>True</p>\n<p><strong>isdigit 是否为整数</strong></p>\n<div><pre><code>name = &quot;5&quot;\nprint(name.isdigit())\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>True</p>\n<p><em>isnumeric isprintable isspace isupper</em>      ????</p>\n<p><strong>join</strong></p>\n<div><pre><code>print(&quot;|&quot;.join([&#39;alex&#39;, &#39;jack&#39;, &#39;rain&#39;]))\n</code></pre>\n<div><span>1</span><br></div></div><p>输出结果为：</p>\n<p>alex|jack|rain</p>\n<p><strong>maketrans  替换</strong></p>\n<div><pre><code>intab = &quot;aeiou&quot;\noutab = &quot;12345&quot;\ntrantab = str.maketrans(intab, outab)\nstr = &quot;this is string example ... wow!!&quot;\nprint(str.translate(trantab))\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>输出结果为：</p>\n<p>th3s 3s str3ng 2x1mpl2 ... w4w!!</p>\n<p><strong>partition分隔</strong></p>\n<div><pre><code>str = &quot;this is string example ... wow!!&quot;\nprint(str.partition(&#39;is&#39;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>('th', 'is', ' is string example ... wow!!')</p>\n<p><strong>swapcase 大小写互换</strong></p>\n<div><pre><code>msg = &quot;xiaoxieDAXIE&quot;\nprint(msg.swapcase())\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>XIAOXIEdaxie</p>\n<p><strong>zfill 用0补齐</strong></p>\n<div><pre><code>msg = &quot;xiaoxieDAXIE&quot;\nprint(msg.zfill(20))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>00000000xiaoxieDAXIE</p>\n<p><strong>ljust 靠左侧补齐</strong></p>\n<div><pre><code>msg = &quot;xiaoxieDAXIE&quot;\nprint(msg.ljust(20, &quot;-&quot;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>xiaoxieDAXIE--------</p>\n<p><strong>rjust 靠右侧补齐</strong></p>\n<div><pre><code>msg = &quot;xiaoxieDAXIE&quot;\nprint(msg.rjust(20, &quot;-&quot;))\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>\n<p>--------xiaoxieDAXIE</p>\n<p><strong>isidentifier 检测一段字符串可否被当作标志符，即是否符合变量命名规则</strong></p>\n<div><pre><code>msg = &quot;1_xiaoxieDAXIE&quot;\nprint(msg.isidentifier())\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>False</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-03T15:30:56.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "导入nginx配置文件",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/code/python/temp/python%E8%A7%A3%E6%9E%90nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/code/python/temp/python%E8%A7%A3%E6%9E%90nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
      "content_html": "<h2 id=\"导入nginx配置文件\"> 导入nginx配置文件</h2>\n<div><pre><code>scp -r /etc/nginx 192.168.167.24:/etc/\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"pip安装相关依赖模块\"> pip安装相关依赖模块</h2>\n<div><pre><code>pip3 install xlrd xlwt xlutils\n</code></pre>\n<div><span>1</span><br></div></div><p>之前在github找到过一个相关的模块，之前用过，现在不用了，讲一下，它怎么导入，命令如下</p>\n<div><pre><code>pip3 install git+https://github.com/fatiherikli/nginxparser.git\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"编写python脚本\"> 编写python脚本</h2>\n<p><code>cat nginx_excel.py</code></p>\n<div><pre><code><span>#!/usr/bin/python3</span>\n<span># coding:utf-8</span>\n<span>import</span> re\n<span>import</span> os\n<span>import</span> xlrd\n<span>import</span> xlwt\n<span>from</span> xlutils<span>.</span>copy <span>import</span> copy\n\n\n<span># from nginx import NGINX</span>\n\n<span>class</span> <span>Nginx</span><span>:</span>\n\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> conf_path<span>)</span><span>:</span>\n        self<span>.</span>conf_path <span>=</span> conf_path\n        self<span>.</span>backend <span>=</span> <span>list</span><span>(</span><span>)</span>\n        self<span>.</span>serverBlock <span>=</span> <span>list</span><span>(</span><span>)</span>\n        self<span>.</span>servers <span>=</span> <span>list</span><span>(</span><span>)</span>\n        self<span>.</span>tmp_conf <span>=</span> <span>'/tmp/tmp_nginx.conf'</span>\n        self<span>.</span>all_conf <span>=</span> <span>'/tmp/nginx.conf'</span>\n        self<span>.</span>merge_conf<span>(</span><span>)</span>\n        self<span>.</span>parse_backend_ip<span>(</span><span>)</span>\n        self<span>.</span>parse_server_block<span>(</span><span>)</span>\n\n    <span>def</span> <span>merge_conf</span><span>(</span>self<span>)</span><span>:</span>\n        conf_dir <span>=</span> os<span>.</span>path<span>.</span>dirname<span>(</span>self<span>.</span>conf_path<span>)</span>\n        <span>if</span> <span>len</span><span>(</span>conf_dir<span>)</span> <span>!=</span> <span>0</span><span>:</span>\n            os<span>.</span>chdir<span>(</span>conf_dir<span>)</span>\n        include_regex <span>=</span> <span>'.*include.*'</span>\n        fm <span>=</span> <span>open</span><span>(</span>self<span>.</span>tmp_conf<span>,</span> <span>'w+'</span><span>)</span>\n        <span>with</span> <span>open</span><span>(</span>self<span>.</span>conf_path<span>,</span> <span>'r'</span><span>)</span> <span>as</span> f<span>:</span>\n            <span>for</span> line <span>in</span> f<span>.</span>readlines<span>(</span><span>)</span><span>:</span>\n                r <span>=</span> re<span>.</span>findall<span>(</span>include_regex<span>,</span> line<span>)</span>\n                <span>if</span> <span>len</span><span>(</span>r<span>)</span> <span>></span> <span>0</span><span>:</span>\n                    include_line <span>=</span> r<span>[</span><span>0</span><span>]</span><span>.</span>split<span>(</span><span>\" \"</span><span>)</span>\n                    include_path <span>=</span> include_line<span>[</span><span>5</span><span>]</span><span>.</span>split<span>(</span><span>\";\"</span><span>)</span><span>[</span><span>0</span><span>]</span>\n                    <span>if</span> os<span>.</span>path<span>.</span>exists<span>(</span>include_path<span>)</span><span>:</span>\n                        <span>with</span> <span>open</span><span>(</span>include_path<span>,</span> <span>'r'</span><span>)</span> <span>as</span> ff<span>:</span>\n                            include_con <span>=</span> ff<span>.</span>read<span>(</span><span>)</span>\n                            fm<span>.</span>write<span>(</span>include_con<span>)</span>\n                <span>else</span><span>:</span>\n                    fm<span>.</span>write<span>(</span>line<span>)</span>\n        fm<span>.</span>close<span>(</span><span>)</span>\n\n        <span># 去掉注释行</span>\n        fm <span>=</span> <span>open</span><span>(</span>self<span>.</span>tmp_conf<span>,</span> <span>'r'</span><span>)</span>\n        <span>with</span> <span>open</span><span>(</span>self<span>.</span>all_conf<span>,</span> <span>'w+'</span><span>)</span> <span>as</span> fp<span>:</span>\n            <span>for</span> xx <span>in</span> fm<span>.</span>readlines<span>(</span><span>)</span><span>:</span>\n                <span>if</span> <span>len</span><span>(</span>re<span>.</span>findall<span>(</span><span>'^\\s*#'</span><span>,</span> xx<span>)</span><span>)</span> <span>==</span> <span>0</span><span>:</span>\n                    fp<span>.</span>write<span>(</span>xx<span>)</span>\n        fm<span>.</span>close<span>(</span><span>)</span>\n\n        <span># 删除临时配置文件</span>\n        <span>if</span> os<span>.</span>path<span>.</span>exists<span>(</span>self<span>.</span>tmp_conf<span>)</span><span>:</span>\n            os<span>.</span>remove<span>(</span>self<span>.</span>tmp_conf<span>)</span>\n\n    <span>def</span> <span>parse_backend_ip</span><span>(</span>self<span>)</span><span>:</span>\n        <span>with</span> <span>open</span><span>(</span>self<span>.</span>all_conf<span>,</span> <span>'r'</span><span>)</span> <span>as</span> fp<span>:</span>\n            alllines <span>=</span> fp<span>.</span>read<span>(</span><span>)</span>\n\n            <span># 获取每个upstream块</span>\n            regex_1 <span>=</span> <span>'upstream\\s+([^{ ]+)\\s*{([^}]*)}'</span>\n            upstreams <span>=</span> re<span>.</span>findall<span>(</span>regex_1<span>,</span> alllines<span>)</span>\n\n            <span>for</span> up <span>in</span> upstreams<span>:</span>\n                <span># 获取后端的ip</span>\n                regex_2 <span>=</span> <span>'server\\s+(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?::\\d{2,5})?)'</span>\n                backend <span>=</span> re<span>.</span>findall<span>(</span>regex_2<span>,</span> up<span>[</span><span>1</span><span>]</span><span>)</span>\n                <span># 判断是否有后端的ip设置</span>\n                <span>if</span> <span>len</span><span>(</span>backend<span>)</span> <span>></span> <span>0</span><span>:</span>\n                    pool_and_ip <span>=</span> <span>{</span><span>'poolname'</span><span>:</span> up<span>[</span><span>0</span><span>]</span><span>,</span> <span>'ip'</span><span>:</span> <span>' '</span><span>.</span>join<span>(</span>backend<span>)</span><span>}</span>\n                    self<span>.</span>backend<span>.</span>append<span>(</span>pool_and_ip<span>)</span>\n\n    <span>def</span> <span>parse_server_block</span><span>(</span>self<span>)</span><span>:</span>\n        flag <span>=</span> <span>False</span>\n        serverblock <span>=</span> <span>''</span>\n        num_of_quote <span>=</span> <span>0</span>\n\n        <span>with</span> <span>open</span><span>(</span>self<span>.</span>all_conf<span>,</span> <span>'r'</span><span>)</span> <span>as</span> fp<span>:</span>\n            <span>for</span> line <span>in</span> fp<span>.</span>readlines<span>(</span><span>)</span><span>:</span>\n                x <span>=</span> line<span>.</span>replace<span>(</span><span>' '</span><span>,</span> <span>''</span><span>)</span>\n                <span>if</span> x<span>.</span>startswith<span>(</span><span>'server{'</span><span>)</span><span>:</span>\n                    num_of_quote <span>+=</span> <span>1</span>\n                    flag <span>=</span> <span>True</span>\n                    serverblock <span>+=</span> line\n                    <span>continue</span>\n                <span>if</span> flag <span>and</span> <span>'{'</span> <span>in</span> line<span>:</span>\n                    num_of_quote <span>+=</span> <span>1</span>\n\n                <span># 将proxy_pass的别名换成ip</span>\n                <span>if</span> flag <span>and</span> <span>'proxy_pass'</span> <span>in</span> line<span>:</span>\n                    r <span>=</span> re<span>.</span>findall<span>(</span><span>'proxy_pass\\s+https?://([^;/]*)[^;]*;'</span><span>,</span> line<span>)</span>\n                    <span>if</span> <span>len</span><span>(</span>r<span>)</span> <span>></span> <span>0</span><span>:</span>\n                        <span>for</span> pool <span>in</span> self<span>.</span>backend<span>:</span>\n                            <span>if</span> r<span>[</span><span>0</span><span>]</span> <span>==</span> pool<span>[</span><span>'poolname'</span><span>]</span><span>:</span>\n                                line <span>=</span> line<span>.</span>replace<span>(</span>r<span>[</span><span>0</span><span>]</span><span>,</span> pool<span>[</span><span>'ip'</span><span>]</span><span>)</span>\n\n                <span>if</span> flag <span>and</span> num_of_quote <span>!=</span> <span>0</span><span>:</span>\n                    serverblock <span>+=</span> line\n\n                <span>if</span> flag <span>and</span> <span>'}'</span> <span>in</span> line<span>:</span>\n                    num_of_quote <span>-=</span> <span>1</span>\n\n                <span>if</span> flag <span>and</span> num_of_quote <span>==</span> <span>0</span><span>:</span>\n                    self<span>.</span>serverBlock<span>.</span>append<span>(</span>serverblock<span>)</span>\n                    flag <span>=</span> <span>False</span>\n                    serverblock <span>=</span> <span>''</span>\n                    num_of_quote <span>=</span> <span>0</span>\n\n        <span>for</span> singleServer <span>in</span> self<span>.</span>serverBlock<span>:</span>\n            <span># port和server_name均只有一个的情况下</span>\n            port <span>=</span> re<span>.</span>findall<span>(</span><span>'listen\\s*((?:\\d|\\s)*)[^;]*;'</span><span>,</span> singleServer<span>)</span><span>[</span><span>0</span><span>]</span>\n            r <span>=</span> re<span>.</span>findall<span>(</span><span>'server_name\\s+([^;]*);'</span><span>,</span> singleServer<span>)</span>\n\n            <span>if</span> <span>len</span><span>(</span>r<span>)</span> <span>></span> <span>0</span><span>:</span>\n                servername <span>=</span> r<span>[</span><span>0</span><span>]</span>\n            <span>else</span><span>:</span>\n                <span>continue</span>\n\n            <span># location可能不止一个</span>\n            locations <span>=</span> re<span>.</span>findall<span>(</span><span>'location\\s*[\\^~\\*=]{0,3}\\s*([^{ ]*)\\s*\\{[^}]*proxy_pass\\s+https?://([^;/]*)[^;]*;'</span><span>,</span>\n                                   singleServer<span>)</span>\n\n            backend_list <span>=</span> <span>list</span><span>(</span><span>)</span>\n            backend_ip <span>=</span> <span>''</span>\n\n            <span>if</span> <span>len</span><span>(</span>locations<span>)</span> <span>></span> <span>0</span><span>:</span>\n                <span>for</span> location <span>in</span> locations<span>:</span>\n                    backend_path <span>=</span> location<span>[</span><span>0</span><span>]</span>\n                    poolname <span>=</span> location<span>[</span><span>1</span><span>]</span>\n                    <span># 如果不是ip的pool name，就取出后端对应的ip</span>\n                    <span>if</span> <span>len</span><span>(</span>re<span>.</span>findall<span>(</span><span>'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'</span><span>,</span> poolname<span>)</span><span>)</span> <span>==</span> <span>0</span><span>:</span>\n                        <span>for</span> backend <span>in</span> self<span>.</span>backend<span>:</span>\n                            <span>if</span> poolname <span>==</span> backend<span>[</span><span>'poolname'</span><span>]</span><span>:</span>\n                                backend_ip <span>=</span> backend<span>[</span><span>'ip'</span><span>]</span>\n                                <span>break</span>\n                    <span>else</span><span>:</span>\n                        backend_ip <span>=</span> poolname\n\n                    backend_list<span>.</span>append<span>(</span><span>{</span><span>\"backend_path\"</span><span>:</span> backend_path<span>,</span> <span>\"backend_ip\"</span><span>:</span> backend_ip<span>}</span><span>)</span>\n\n            server <span>=</span> <span>{</span>\n                <span>'port'</span><span>:</span> port<span>,</span>\n                <span>'server_name'</span><span>:</span> servername<span>,</span>\n                <span>'backend'</span><span>:</span> backend_list\n            <span>}</span>\n\n            self<span>.</span>servers<span>.</span>append<span>(</span>server<span>)</span>\n\n\n<span>class</span> <span>NginxExcel</span><span>:</span>\n\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> row<span>,</span> col<span>)</span><span>:</span>\n        self<span>.</span>row <span>=</span> row\n        self<span>.</span>col <span>=</span> col\n\n    <span>def</span> <span>read_from_txt</span><span>(</span>self<span>,</span> txt_filename<span>,</span> line<span>)</span><span>:</span>\n        file_txt <span>=</span> <span>open</span><span>(</span>txt_filename<span>)</span>\n        lines <span>=</span> file_txt<span>.</span>readlines<span>(</span><span>)</span>\n        strlist <span>=</span> lines<span>[</span>line<span>]</span><span>.</span>split<span>(</span><span>\" \"</span><span>)</span>\n        self<span>.</span>project_name <span>=</span> strlist<span>[</span><span>0</span><span>]</span>\n        self<span>.</span>domain <span>=</span> strlist<span>[</span><span>1</span><span>]</span>\n        self<span>.</span>link <span>=</span> strlist<span>[</span><span>2</span><span>]</span>\n        self<span>.</span>proxy_pass <span>=</span> strlist<span>[</span><span>3</span><span>:</span><span>]</span>\n\n    <span>def</span> <span>write_to_excel</span><span>(</span>self<span>,</span> excel_filename<span>)</span><span>:</span>\n        <span>if</span> os<span>.</span>path<span>.</span>exists<span>(</span>excel_filename<span>)</span><span>:</span>\n            rb <span>=</span> xlrd<span>.</span>open_workbook<span>(</span>excel_filename<span>)</span>\n            wb <span>=</span> copy<span>(</span>rb<span>)</span>\n            sheet <span>=</span> wb<span>.</span>get_sheet<span>(</span><span>0</span><span>)</span>\n        <span>else</span><span>:</span>\n            wb <span>=</span> xlwt<span>.</span>Workbook<span>(</span><span>)</span>\n            sheet <span>=</span> wb<span>.</span>add_sheet<span>(</span><span>'私有云'</span><span>)</span>\n            sheet<span>.</span>write<span>(</span>self<span>.</span>row<span>,</span> self<span>.</span>col<span>,</span> <span>\"项目名\"</span><span>)</span>\n            self<span>.</span>col <span>+=</span> <span>1</span>\n            sheet<span>.</span>write<span>(</span>self<span>.</span>row<span>,</span> self<span>.</span>col<span>,</span> <span>\"域名\"</span><span>)</span>\n            self<span>.</span>col <span>+=</span> <span>1</span>\n            sheet<span>.</span>write<span>(</span>self<span>.</span>row<span>,</span> self<span>.</span>col<span>,</span> <span>\"项目链接\"</span><span>)</span>\n            self<span>.</span>col <span>+=</span> <span>1</span>\n            sheet<span>.</span>write<span>(</span>self<span>.</span>row<span>,</span> self<span>.</span>col<span>,</span> <span>\"后端地址\"</span><span>)</span>\n            self<span>.</span>row <span>+=</span> <span>1</span>\n            self<span>.</span>col <span>=</span> <span>0</span>\n\n        sheet<span>.</span>write<span>(</span>self<span>.</span>row<span>,</span> self<span>.</span>col<span>,</span> self<span>.</span>project_name<span>)</span>\n        self<span>.</span>col <span>+=</span> <span>1</span>\n        sheet<span>.</span>write<span>(</span>self<span>.</span>row<span>,</span> self<span>.</span>col<span>,</span> self<span>.</span>domain<span>)</span>\n        self<span>.</span>col <span>+=</span> <span>1</span>\n        sheet<span>.</span>write<span>(</span>self<span>.</span>row<span>,</span> self<span>.</span>col<span>,</span> self<span>.</span>link<span>)</span>\n        self<span>.</span>col <span>+=</span> <span>1</span>\n        sheet<span>.</span>write<span>(</span>self<span>.</span>row<span>,</span> self<span>.</span>col<span>,</span> <span>\", \"</span><span>.</span>join<span>(</span>self<span>.</span>proxy_pass<span>)</span><span>)</span>\n        self<span>.</span>row <span>+=</span> <span>1</span>\n        self<span>.</span>col <span>=</span> <span>0</span>\n        wb<span>.</span>save<span>(</span>excel_filename<span>)</span>\n\n\n<span>def</span> <span>main</span><span>(</span><span>)</span><span>:</span>\n    txt_filename <span>=</span> <span>\"私有云项目清单.txt\"</span>\n    excel_filename <span>=</span> <span>\"私有云项目清单.xls\"</span>\n    s <span>=</span> NginxExcel<span>(</span><span>0</span><span>,</span> <span>0</span><span>)</span>\n    nginx <span>=</span> Nginx<span>(</span><span>'/etc/nginx/nginx.conf'</span><span>)</span>\n    nginx_list <span>=</span> nginx<span>.</span>servers\n    f <span>=</span> <span>open</span><span>(</span>txt_filename<span>,</span> <span>\"w+\"</span><span>)</span>\n\n    <span>for</span> server <span>in</span> nginx_list<span>:</span>\n        <span>for</span> backend <span>in</span> server<span>[</span><span>\"backend\"</span><span>]</span><span>:</span>\n            old_project_name <span>=</span> backend<span>[</span><span>\"backend_path\"</span><span>]</span>\n            new_project_name <span>=</span> re<span>.</span>sub<span>(</span><span>r'/'</span><span>,</span> <span>''</span><span>,</span> old_project_name<span>)</span>\n            <span>if</span> server<span>[</span><span>\"port\"</span><span>]</span> <span>==</span> <span>\"80\"</span><span>:</span>\n                domain <span>=</span> <span>\"http://\"</span> <span>+</span> server<span>[</span><span>\"server_name\"</span><span>]</span>\n                link <span>=</span> domain <span>+</span> <span>\"/\"</span> <span>+</span> new_project_name <span>+</span> <span>\"/\"</span>\n            <span>elif</span> server<span>[</span><span>\"port\"</span><span>]</span> <span>==</span> <span>\"443\"</span><span>:</span>\n                domain <span>=</span> <span>\"https://\"</span> <span>+</span> server<span>[</span><span>\"server_name\"</span><span>]</span>\n                link <span>=</span> domain <span>+</span> <span>\"/\"</span> <span>+</span> new_project_name <span>+</span> <span>\"/\"</span>\n            <span>else</span><span>:</span>\n                domain <span>=</span> <span>\"http://\"</span> <span>+</span> server<span>[</span><span>\"server_name\"</span><span>]</span>\n                link <span>=</span> domain <span>+</span> <span>\":\"</span> <span>+</span> server<span>[</span><span>\"port\"</span><span>]</span> <span>+</span> <span>\"/\"</span> <span>+</span> new_project_name <span>+</span> <span>\"/\"</span>\n            f<span>.</span>write<span>(</span><span>\"%s %s %s %s\\n\"</span> <span>%</span> <span>(</span>new_project_name<span>,</span> domain<span>,</span> link<span>,</span> backend<span>[</span><span>\"backend_ip\"</span><span>]</span><span>)</span><span>)</span>\n\n    f<span>.</span>close<span>(</span><span>)</span>\n\n    f <span>=</span> <span>open</span><span>(</span>txt_filename<span>)</span>\n    lines <span>=</span> f<span>.</span>readlines<span>(</span><span>)</span>\n\n    <span>for</span> line <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span>lines<span>)</span><span>)</span><span>:</span>\n        s<span>.</span>read_from_txt<span>(</span>txt_filename<span>,</span> line<span>)</span>\n        s<span>.</span>write_to_excel<span>(</span>excel_filename<span>)</span>\n\n    f<span>.</span>close<span>(</span><span>)</span>\n\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    main<span>(</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br><span>203</span><br><span>204</span><br><span>205</span><br><span>206</span><br><span>207</span><br><span>208</span><br><span>209</span><br><span>210</span><br><span>211</span><br><span>212</span><br><span>213</span><br><span>214</span><br><span>215</span><br><span>216</span><br><span>217</span><br><span>218</span><br><span>219</span><br><span>220</span><br><span>221</span><br><span>222</span><br><span>223</span><br><span>224</span><br><span>225</span><br><span>226</span><br><span>227</span><br><span>228</span><br><span>229</span><br><span>230</span><br><span>231</span><br><span>232</span><br></div></div><p>执行脚本，生成Excel表格</p>\n<div><pre><code>python3 nginx_excel.py\n</code></pre>\n<div><span>1</span><br></div></div><p>表格生成在<code>/etc/nginx</code>目录下</p>\n",
      "date_published": "2021-04-03T15:30:56.000Z",
      "date_modified": "2021-04-03T15:30:56.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Harbor创建",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/container/Docker/docker_harbor/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/container/Docker/docker_harbor/",
      "content_html": "<h1 id=\"harbor创建\"> Harbor创建</h1>\n<h2 id=\"安装依赖软件\"> 安装依赖软件</h2>\n<div><pre><code>yum -y install openssl\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"installation-steps\"> Installation Steps</h2>\n<p>1）Offline installer:</p>\n<p>从github上下载官方最新包，然后上传到服务器上</p>\n<p>2）解压</p>\n<div><pre><code>tar xvf harbor-offline-installer-&lt;version&gt;.tgz  -C /usr/local/\n</code></pre>\n<div><span>1</span><br></div></div><p>3）修改配置文件</p>\n<div><pre><code># cd /usr/local/harbor\n# vim harbor.yml\n# 将hostname改为对应的本机地址（not localhost or 127.0.0.1）\n# 修改harbor_admin_password管理用户密码，只能在这里改，改后不可再改\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>hostname一定要用域名</p>\n</blockquote>\n<p>4）安装启动</p>\n<div><pre><code>./install\n</code></pre>\n<div><span>1</span><br></div></div><h1 id=\"configuring-harbor-with-https-access\"> Configuring Harbor with HTTPS Access</h1>\n<h2 id=\"getting-certificate-authority\"> Getting Certificate Authority</h2>\n<div><pre><code># hostnamectl set-hostname sdqcharbor.com\n# echo &quot;本机地址 sdqcharbor.com&quot; &gt;&gt; /etc/hosts\n# mkdir -p /opt/certs\n# cd /opt/certs\n# openssl genrsa -out ca.key 4096\n# openssl req -x509 -new -nodes -sha512 -days 3650 \\\n  -subj &quot;/CN=sdqcharbor.com&quot; \\\n  -key ca.key \\\n  -out ca.crt\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"getting-server-certificate\"> Getting Server Certificate</h2>\n<p><strong>1) Create your own Private Key:</strong></p>\n<div><pre><code>openssl genrsa -out sdqcharbor.com.key 4096\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>2) Generate a Certificate Signing Request:</strong></p>\n<div><pre><code>openssl req -sha512 -new \\\n  -subj &quot;/CN=sdqcharbor.com&quot; \\\n  -key sdqcharbor.com.key \\\n  -out sdqcharbor.com.csr\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><strong>3) Generate the certificate of your registry host:</strong></p>\n<div><pre><code>cat &gt; v3.ext &lt;&lt;-EOF\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth \nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1=sdqcharbor.com\nDNS.2=192.168.162.45\nEOF\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><div><pre><code>openssl x509 -req -sha512 -days 3650     -extfile v3.ext     -CA ca.crt -CAkey ca.key -CAcreateserial     -in sdqcharbor.com.csr     -out sdqcharbor.com.crt\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"configuration-and-installation\"> Configuration and Installation</h2>\n<div><pre><code>mkdir /data/cert\ncp sdqcharbor.com.crt /data/cert/\ncp sdqcharbor.com.key /data/cert/\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>2) Configure Server Certificate, Key and CA for Docker</strong></p>\n<div><pre><code>openssl x509 -inform PEM -in sdqcharbor.com.crt -out sdqcharbor.com.cert\n</code></pre>\n<div><span>1</span><br></div></div><p>Delpoy .com.cert<code>,</code>yourdomain.com.key<code>, and</code>ca.crt` for Docker:</p>\n<div><pre><code>mkdir /etc/docker/certs.d/sdqcharbor.com\ncp sdqcharbor.com.cert sdqcharbor.com.key ca.crt /etc/docker/certs.d/sdqcharbor.com\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><strong>3) Configure Harbor</strong></p>\n<p>vim /usr/local/harbor/harbor.yml</p>\n<p>修改为以下内容</p>\n<div><pre><code>hostname: sdqcharbor.com\nhttps:\n  certificate: /data/cert/sdqcharbor.com.crt\n  private_key: /data/cert/sdqcharbor.com.key\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>If Harbor is already running, stop and remove the existing instance. Your image data remain in the file system</p>\n<div><pre><code>docker-compose down -v\nrm -rf /data/database/\nrm -rf /data/registry/\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>编辑docker中配置文件，<code>daemon.json</code>，去掉<code>&quot;insecure-registries&quot;: [&quot;sdqcharbor.com&quot;]</code>这一行</p>\n<p>重启docker</p>\n<div><pre><code>systemctl daemon-reload\nsystemctl restart docker\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>预编译</p>\n<div><pre><code>./prepare\ndocker-compose -f ./docker-compose.yml up -d\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>登录</p>\n<div><pre><code>docker login sdqcharbor.com\n</code></pre>\n<div><span>1</span><br></div></div><p>上传镜像</p>\n<div><pre><code>docker tag centos:latest sdqcharbor.com/library/centos:latest\ndocker push sdqcharbor.com/library/centos:latest \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h1 id=\"参考文档\"> 参考文档</h1>\n<blockquote>\n<p><a href=\"https://goharbor.io/docs/1.10/install-config/download-installer/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></p>\n</blockquote>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Harbor简介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/container/Docker/docker_harbor_ha/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/container/Docker/docker_harbor_ha/",
      "content_html": "<h2 id=\"harbor简介\"> Harbor简介</h2>\n<p><a href=\"https://goharbor.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Harbor</a>是一个用于存储和分发<code>Docker镜像</code>的企业级<code>Registry</code>服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。</p>\n<p>作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。</p>\n<p>提升用户使用Registry构建和运行环境传输镜像的效率。</p>\n<p>Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。</p>\n<p>另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p>\n<h2 id=\"高可用架构-双主复制\"> 高可用架构：双主复制</h2>\n<h3 id=\"主从同步\"> 主从同步</h3>\n<p>harbor官方默认提供主从复制的方案来解决镜像同步问题，通过复制的方式，我们可以实时将测试环境harbor仓库的镜像同步到生产环境harbor，类似于如下流程：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/harbor_CI.png\" alt=\"img\"></p>\n<p>在实际生产运维的中，往往需要把镜像发布到几十或上百台集群节点上。这时，单个Registry已经无法满足大量节点的下载需求，因此要配置多个Registry实例做负载均衡。手工维护多个Registry实例上的镜像，将是十分繁琐的事情。Harbor可以支持一主多从的镜像发布模式，可以解决大规模镜像发布的难题：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/harbor_ab.png\" alt=\"img\"></p>\n<p>只要往一台Harbor上发布，镜像就会像&quot;仙女散花&quot;般地同步到多个Registry中，高效可靠。</p>\n<p>如果是地域分布较广的集群，还可以采用层次型发布方式，比如从集团总部机房同步到分公司1机房，再从分公司1机房同步到分公司2机房：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/harbor_cl.png\" alt=\"img\"></p>\n<p>然而单靠主从同步，仍然解决不了harbor主节点的单点问题。</p>\n<h3 id=\"双主复制说明\"> 双主复制说明</h3>\n<p>所谓的双主复制其实就是复用主从同步实现两个harbor节点之间的双向同步，来保证数据的一致性，然后在两台harbor前端顶一个负载均衡器将进来的请求分流到不同的实例中去，只要有一个实例中有了新的镜像，就是自动的同步复制到另外的的实例中去，这样实现了负载均衡，也避免了单点故障，在一定程度上实现了Harbor的高可用性：</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/harbor_st.png\" alt=\"img\"></p>\n<p>这个方案有一个问题就是有可能两个Harbor实例中的数据不一致。假设如果一个实例A挂掉了，这个时候有新的镜像进来，那么新的镜像就会在另外一个实例B中，后面即使恢复了挂掉的A实例，Harbor实例B也不会自动去同步镜像，这样只能手动的先关掉Harbor实例B的复制策略，然后再开启复制策略，才能让实例B数据同步，让两个实例的数据一致。另外，这里还需要多吐槽一句：<strong>在实际生产使用中，主从复制十分的不靠谱！！<strong>所以这里</strong>推荐使用下面要说的这种方案</strong>。</p>\n<h2 id=\"高可用架构-多实例共享后端存储\"> 高可用架构：多实例共享后端存储</h2>\n<h3 id=\"方案说明\"> 方案说明</h3>\n<p>共享后端存储算是一种比较标准的方案，就是多个Harbor实例共享同一个后端存储，任何一个实例持久化到存储的镜像，都可被其他实例中读取。通过前置LB进来的请求，可以分流到不同的实例中去处理，这样就实现了负载均衡，也避免了单点故障。</p>\n<p>本次搭建以NFS作为共享存储存放Harbor相关data，并分离PostgreSQL与Redis为多个Harbor共同连接使用，使用Nginx做负载均衡。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/harbor_ha_r.png\" alt=\"img\"></p>\n<p>如果最终生产环境集群中服务器较多，依赖做完LB的Harbor也无法完全达到需求时，可以使用如下架构，部署下级Harbor节点从主节点同步镜像，然后再分发给生产服务器。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/harbor_ha_l.png\" alt=\"img\"></p>\n<p>这个方案在实际生产环境中部署需要考虑三个问题：</p>\n<p><strong>1.</strong> 共享存储的选取，Harbor的后端存储目前支持AWS S3、Openstack Swift, Ceph等，在下面的实验环境里，暂且直接使用nfs。</p>\n<p><strong>2.</strong> Session在不同的实例上共享，这个现在其实已经不是问题了，在最新的harbor中，默认session会存放在redis中，只需要将redis独立出来即可。可以通过redis sentinel或者redis cluster等方式来保证redis的可用性。在下面的实验环境里，暂且使用单台redis。</p>\n<p><strong>3.</strong> Harbor多实例数据库问题，这个也只需要将harbor中的数据库拆出来独立部署即可。让多实例共用一个外部数据库，数据库的高可用也可以通过数据库的高可用方案保证。</p>\n<h3 id=\"环境说明\"> 环境说明</h3>\n<ul>\n<li>操作系统：<code>CentOS 7.6</code></li>\n<li>演示环境软件版本</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>软件</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Docker</td>\n<td>19.03.8</td>\n</tr>\n<tr>\n<td>docker-compose</td>\n<td>1.25.5</td>\n</tr>\n<tr>\n<td>Harbor</td>\n<td>1.10.2</td>\n</tr>\n<tr>\n<td>Nginx</td>\n<td>1.14.0</td>\n</tr>\n<tr>\n<td>PostgreSQL</td>\n<td>9.6.17</td>\n</tr>\n<tr>\n<td>Redis</td>\n<td>3.2.12</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>演示环境网络</li>\n</ul>\n<p>这里主要做Harbor高可用演示，真实生产环境请按需分离NFS与DB单独部署。</p>\n<table>\n<thead>\n<tr>\n<th>IP</th>\n<th>主机名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>192.168.16.141</td>\n<td>Nginx</td>\n</tr>\n<tr>\n<td>192.168.166.122</td>\n<td>NFS</td>\n</tr>\n<tr>\n<td>192.168.166.203</td>\n<td>postgresql</td>\n</tr>\n<tr>\n<td>192.168.166.245</td>\n<td>Redis</td>\n</tr>\n<tr>\n<td>192.168.166.81</td>\n<td>Harbor-01</td>\n</tr>\n<tr>\n<td>192.168.166.212</td>\n<td>Harbor-02</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"多实例共享后端存储-部署\"> 多实例共享后端存储 部署</h2>\n<h3 id=\"docker\"> Docker</h3>\n<p>1）安装依赖包：</p>\n<div><pre><code>yum <span>install</span> -y yum-utils <span>\\</span>\n  device-mapper-persistent-data <span>\\</span>\n  lvm2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>2）官方一键脚本安装</p>\n<div><pre><code><span>curl</span> -fsSL get.docker.com -o get-docker.sh\n<span>sh</span> get-docker.sh --mirror Aliyun\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>3）添加内核参数</p>\n<div><pre><code><span>tee</span> -a /etc/sysctl.conf <span>&lt;&lt;-</span><span>EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>将<code>net.ipv4.ip_forward</code>赋值为<code>1</code></p>\n<p>然后刷新内核参数</p>\n<div><pre><code>sysctl -p\n</code></pre>\n<div><span>1</span><br></div></div><p>4）修改Docker仓库为国内镜像站</p>\n<div><pre><code><span>curl</span> -sSL https://get.daocloud.io/daotools/set_mirror.sh <span>|</span> <span>sh</span> -s https://pclhthp0.mirror.aliyuncs.com\n</code></pre>\n<div><span>1</span><br></div></div><p>5）启动Docker</p>\n<div><pre><code>systemctl <span>enable</span> docker <span>&amp;&amp;</span> systemctl start docker\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"compose\"> Compose</h3>\n<p><a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener noreferrer\">compose</a>是Docker提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用compose，我们可以通过YAML文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。</p>\n<p>由于国内政策原因，可能在海外网站上下载文件速度较慢，建议下载本地后上传至服务器</p>\n<p>1）下载<code>docker-compose</code>并赋予可执行权限</p>\n<div><pre><code><span># curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</span>\n<span># chmod +x /usr/local/bin/docker-compose</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>cd</span> /usr/local/bin\n<span>scp</span> <span>192.168</span>.166.96:/usr/local/bin/docker-compose <span>.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>注意：由于我其他服务器已经存在，所以我直接拷贝了</p>\n</blockquote>\n<p>2）安装bash补全命令</p>\n<div><pre><code><span># curl -L https://raw.githubusercontent.com/docker/compose/1.24.1/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose</span>\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code>scp 192.168.166.96:/etc/bash_completion.d/docker-compose /etc/bash_completion.d/\n</code></pre>\n<div><span>1</span><br></div></div><p>重新连接终端即生效</p>\n<blockquote>\n<p>注意：由于我其他服务器已经存在，所以我直接拷贝了</p>\n</blockquote>\n<h3 id=\"nfs\"> NFS</h3>\n<h4 id=\"服务端\"> 服务端</h4>\n<p>1）安装必需的RPM包</p>\n<div><pre><code>yum -y <span>install</span> nfs-utils rpcbind   \n</code></pre>\n<div><span>1</span><br></div></div><p>2）创建NFS共享目录</p>\n<div><pre><code><span>mkdir</span> -p /data/harbor_data\n<span>chown</span> nobody:nobody /data/harbor_data/ \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>3）修改NFS服务配置文件</p>\n<div><pre><code><span>echo</span> <span>\"/data/harbor_data 192.168.166.0/24(rw,sync,no_root_squash)\"</span>  <span>>></span> /etc/exports\n</code></pre>\n<div><span>1</span><br></div></div><p>4）启动NFS服务器</p>\n<div><pre><code>systemctl <span>enable</span> rpcbind <span>&amp;&amp;</span> systemctl restart rpcbind\nsystemctl <span>enable</span> nfs <span>&amp;&amp;</span> systemctl restart nfs\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"客户端\"> 客户端</h4>\n<p>1）安装nfs-utils</p>\n<div><pre><code>yum -y <span>install</span> nfs-utils\n</code></pre>\n<div><span>1</span><br></div></div><p>2）在NFS客户端上查看NFS的连通性</p>\n<div><pre><code><span># showmount -e 192.168.166.122</span>\nExport list <span>for</span> <span>192.168</span>.166.122:\n/data/harbor_data <span>192.168</span>.166.0/24\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>3）挂载NFS共享存储</p>\n<p>创建挂载目录</p>\n<div><pre><code>mkdir /data\n</code></pre>\n<div><span>1</span><br></div></div><p>修改/etc/fstab配置文件加入以下内容</p>\n<div><pre><code>192.168.166.122:/data/harbor_data  /data  nfs defaults 0 0\n</code></pre>\n<div><span>1</span><br></div></div><p>mount挂载</p>\n<div><pre><code>mount -a\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"postgresql\"> PostgreSQL</h3>\n<p>1）下载PostgreSQL官方YUM源配置文件包并安装</p>\n<div><pre><code><span>wget</span> https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n<span>rpm</span> -ivh pgdg-redhat-repo-latest.noarch.rpm \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>2）安装PostgreSQL</p>\n<div><pre><code>yum  -y <span>install</span> postgresql96-server postgresql96-contrib \n</code></pre>\n<div><span>1</span><br></div></div><p>3）初始化数据库</p>\n<div><pre><code>/usr/pgsql-9.6/bin/postgresql96-setup initdb  \n</code></pre>\n<div><span>1</span><br></div></div><p>4）启动数据库</p>\n<div><pre><code>systemctl <span>enable</span> postgresql-9.6 <span>&amp;&amp;</span> systemctl restart postgresql-9.6\n</code></pre>\n<div><span>1</span><br></div></div><p>5）PostgreSQL数据库配置</p>\n<ol>\n<li>\n<p>修改密码</p>\n<div><pre><code><span># su - postgres</span>\n-bash-4.2$ psql\npsql <span>(</span><span>9.6</span>.17<span>)</span>\nType <span>\"help\"</span> <span>for</span> help.\n<span>postgres</span><span>=</span><span># ALTER USER postgres WITH PASSWORD 'postgres';</span>\nALTER ROLE\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>\n<li>\n<p>开启远程访问</p>\n<p><code>vi /var/lib/pgsql/9.6/data/postgresql.conf</code></p>\n<p># listen_addresses = 'localhost' 改为 listen_addresses='*'</p>\n</li>\n<li>\n<p>信任远程连接</p>\n<p><code>vim /var/lib/pgsql/9.6/data/pg_hba.conf</code></p>\n<p>加入:</p>\n<div><pre><code><span>host</span>    all  all  <span>192.168</span>.166.203/32 trust\n<span>host</span>    all  all  <span>192.168</span>.166.81/32 trust\n<span>host</span>    all  all  <span>192.168</span>.166.212/32 trust\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n</ol>\n<p>6）重启PostgreSQL服务</p>\n<div><pre><code>systemctl restart postgresql-9.6\n</code></pre>\n<div><span>1</span><br></div></div><p>7）验证服务</p>\n<div><pre><code>psql -h 192.168.166.203 -p 5432 -U postgres\n</code></pre>\n<div><span>1</span><br></div></div><p>8）迁移数据库</p>\n<ol>\n<li>在postgresql所在服务器，先启动一套harbor环境</li>\n</ol>\n<p>简要步骤如下：</p>\n<div><pre><code># yum install -y yum-utils   device-mapper-persistent-data   lvm2\n# curl -fsSL get.docker.com -o get-docker.sh\n# sh get-docker.sh --mirror Aliyun\n#curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s https://pclhthp0.mirror.aliyuncs.com\n# systemctl enable docker &amp;&amp; systemctl start docker\n# cd /usr/local/bin\n# scp 192.168.166.96:/usr/local/bin/docker-compose .\n# scp 192.168.166.96:/etc/bash_completion.d/docker-compose /etc/bash_completion.d/\n# cd ~\n# scp 192.168.166.96:/root/harbor-offline-installer-v1.10.2.tgz .\n# tar -xvf harbor-offline-installer-v1.10.2.tgz -C /usr/local/\n# cd /usr/local/harbor/\n# vim harbor.yml ###修改hostname: 192.168.166.203  ####注释掉https段即可\n# ./prepare \n# ./install.sh \n# docker-compose up -d\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ol start=\"2\">\n<li>\n<p>进入harbor-db容器导出相关表及数据</p>\n<div><pre><code><span># docker container exec -it harbor-db /bin/bash</span>\npg_dump -U postgres registry <span>></span> /tmp/registry.sql \npg_dump -U postgres notarysigner <span>></span> /tmp/notarysigner.sql  \npg_dump -U postgres notaryserver <span>></span> /tmp/notaryserver.sql\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>\n<li>\n<p>导出数据库</p>\n<div><pre><code>docker container <span>cp</span> harbor-db:/tmp/registry.sql /tmp\ndocker container <span>cp</span> harbor-db:/tmp/notarysigner.sql /tmp\ndocker container <span>cp</span> harbor-db:/tmp/notaryserver.sql /tmp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n<li>\n<p>将数据导入至外部PostgreSQL数据库</p>\n<div><pre><code><span># psql -h 192.168.166.203 -U postgres</span>\n<span>postgres</span><span>=</span><span># create database registry;</span>\nCREATE DATABASE\n<span>postgres</span><span>=</span><span># create database notarysigner;</span>\nCREATE DATABASE\n<span>postgres</span><span>=</span><span># create database notaryserver;</span>\nCREATE DATABASE\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code>psql -h <span>192.168</span>.166.203 -U postgres registry <span>&lt;</span> /tmp/registry.sql\npsql -h <span>192.168</span>.166.203 -U postgres notarysigner  <span>&lt;</span> /tmp/notarysigner.sql\npsql -h <span>192.168</span>.166.203 -U postgres notaryserver <span>&lt;</span> /tmp/notaryserver.sql\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>\n</ol>\n<h3 id=\"redis\"> Redis</h3>\n<p>1）安装redis</p>\n<div><pre><code>yum -y <span>install</span> redis\n</code></pre>\n<div><span>1</span><br></div></div><p>2） 修改配置参数</p>\n<div><pre><code><span>sed</span> -i <span>'s/bind 127.0.0.1/bind 0.0.0.0/g'</span> /etc/redis.conf   \n<span>sed</span> -i <span>'s/daemonize no/daemonize yes/g'</span> /etc/redis.conf   \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>3）启动并测试redis连接</p>\n<div><pre><code>systemctl <span>enable</span> redis <span>&amp;&amp;</span> systemctl restart redis\nredis-cli \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"harbor\"> Harbor</h3>\n<p>下载<a href=\"https://github.com/goharbor/harbor/releases\" target=\"_blank\" rel=\"noopener noreferrer\">Harbor</a>离线安装包，离线安装包文件较大（约为：590M），建议在本地使用多线程工具下载后上传服务器使用。</p>\n<p>1）下载</p>\n<div><pre><code><span>cd</span> ~\n<span>scp</span> <span>192.168</span>.166.96:/root/harbor-offline-installer-v1.10.2.tgz <span>.</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>2）解压</p>\n<div><pre><code><span>tar</span> -xvf harbor-offline-installer-v1.10.2.tgz -C /usr/local/\n</code></pre>\n<div><span>1</span><br></div></div><p>3）修改配置文件</p>\n<div><pre><code># cd /usr/local/harbor/\n# vim harbor.yml \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>修改的内容有</p>\n<ul>\n<li><code>hostname</code>修改为本机ip</li>\n<li>注释掉https</li>\n<li>修改harbor默认的admin账号密码</li>\n<li>数据存储位置，改为nfs挂载目录，因为我们本来就挂载到了<code>/data</code>目录下，所以不用动</li>\n<li>注释掉<code>database</code></li>\n<li>注释掉<code>clair</code></li>\n<li>打开<code>external_database</code>和<code>external_redis</code>块的注释，并改为刚刚部署的地址</li>\n</ul>\n<p>修改完的样例文件，如下</p>\n<div><pre><code>hostname: 192.168.166.81\nhttp:\n  port: 80\nharbor_admin_password: Harbor12345\ndata_volume: /data\njobservice:\n  max_job_workers: 10\nnotification:\n  webhook_job_max_retry: 10\nchart:\n  absolute_url: disabled\nlog:\n  level: info\n  local:\n    rotate_count: 50\n    rotate_size: 200M\n    location: /var/log/harbor\n_version: 1.10.0\nexternal_database:\n  harbor:\n    host: 192.168.166.203\n    port: 5432\n    db_name: registry\n    username: postgres\n    password: postgres\n    ssl_mode: disable\n    max_idle_conns: 2\n    max_open_conns: 0\n  clair:\n    host: 192.168.166.203\n    port: 5432\n    db_name: clair\n    username: postgres\n    password: postgres\n    ssl_mode: disable\n  notary_signer:\n    host: 192.168.166.203\n    port: 5432\n    db_name: notarysigner\n    username: postgres\n    password: postgres\n    ssl_mode: disable\n  notary_server:\n    host: 192.168.166.203\n    port: 5432\n    db_name: notaryserver\n    username: postgres\n    password: postgres\n    ssl_mode: disable\nexternal_redis:\n  host: 192.168.166.245\n  port: 6379\n  password:\n  registry_db_index: 1\n  jobservice_db_index: 2\n  chartmuseum_db_index: 3\n  clair_db_index: 4\nproxy:\n  http_proxy:\n  https_proxy:\n  no_proxy:\n  components:\n    - core\n    - jobservice\n    - clair\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br></div></div><p>4）生成harbor运行的必要文件（环境）以及<code>docker-compose.yml</code>文件；执行后会通过网络获取Docker Image，建议提前修改好国内镜像站加速。</p>\n<div><pre><code>./prepare \n</code></pre>\n<div><span>1</span><br></div></div><p>5）安装Harbor</p>\n<div><pre><code>./install.sh \n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"nginx\"> Nginx</h3>\n<p>1）安装nginx</p>\n<p>安装可以参考https://wiki.clay-wangzhi.com/7-nginx/1.-chu-shi-nginx#4-bian-yi-an-zhuang-nginx</p>\n<p>这里我就不再详细讲了</p>\n<p>2）编写配置文件</p>\n<div><pre><code><span># cat harbor.schengle.com.conf </span>\n<span>upstream</span> harbor <span>{</span>\n    <span>ip_hash</span><span>;</span>\n    <span>server</span> <span>192.168</span><span>.166</span><span>.81</span><span>:</span><span>80</span><span>;</span>\n    <span>server</span> <span>192.168</span><span>.166</span><span>.212</span><span>:</span><span>80</span><span>;</span>\n<span>}</span>\n<span>server</span> <span>{</span>\n    <span>listen</span>       <span>80</span><span>;</span>\n    <span>server_name</span>  harbor<span>.</span><span>*</span><span>*</span><span>*</span><span>.</span>com<span>;</span>\n    <span>rewrite</span> <span>^</span><span>(</span><span>.</span><span>*</span><span>)</span> <span>https</span><span>:</span><span>/</span><span>/</span><span>$server_name</span>$<span>1</span> permanent<span>;</span>\n<span>}</span>\n<span>server</span> <span>{</span>\n    <span>listen</span>  <span>443</span> <span>ssl</span><span>;</span>\n    <span>server_name</span> harbor<span>.</span>schengle<span>.</span>com<span>;</span>\n    \n    <span>ssl_certificate</span> <span>*</span><span>*</span><span>*</span><span>.</span>crt<span>;</span>\n    <span>ssl_certificate_key</span> <span>*</span><span>*</span><span>*</span><span>.</span>key<span>;</span>\n    <span>client_max_body_size</span> <span>0</span><span>;</span>\n    <span>chunked_transfer_encoding</span> on<span>;</span>\n\n    <span>location</span> <span>/</span> <span>{</span>\n        <span>proxy_set_header</span> X<span>-</span>Forwarded<span>-</span>For <span>$proxy_add_x_forwarded_for</span><span>;</span>\n        <span>#proxy_set_header Host $host;</span>\n        <span>proxy_set_header</span> X<span>-</span>Forwarded<span>-</span>Proto <span>https</span><span>;</span>\n        <span>proxy_redirect</span> off<span>;</span>\n        proxy_ssl_verify off<span>;</span>\n        <span>proxy_ssl_session_reuse</span> on<span>;</span>\n        <span>proxy_pass</span> <span>http</span><span>:</span><span>/</span><span>/</span>harbor<span>;</span>\n\t\t<span>proxy_redirect</span> default<span>;</span>\n        <span>proxy_http_version</span> <span>1.1</span><span>;</span>\n<span>}</span>\n    <span>location</span> <span>/</span>v2<span>/</span> <span>{</span>\n        <span>proxy_pass</span> <span>http</span><span>:</span><span>/</span><span>/</span>harbor<span>/</span>v2<span>/</span><span>;</span>\n\t\t<span>proxy_redirect</span> default<span>;</span>\n        <span>#proxy_set_header Host $host;</span>\n        <span>proxy_set_header</span> X<span>-</span>Real<span>-</span>IP <span>$remote_addr</span><span>;</span>\n        <span>proxy_set_header</span> X<span>-</span>Forwarded<span>-</span>For <span>$proxy_add_x_forwarded_for</span><span>;</span>\n        <span>proxy_set_header</span> X<span>-</span>Forwarded<span>-</span>Proto <span>$scheme</span><span>;</span>\n        proxy_ssl_verify off<span>;</span>\n        <span>proxy_ssl_session_reuse</span> on<span>;</span>\n        <span>proxy_buffering</span> off<span>;</span>\n        proxy_request_buffering off<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><p>3）平滑重启nginx</p>\n<div><pre><code>nginx -s reload\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"参考文章\"> 参考文章</h2>\n<blockquote>\n<p>https://www.cnblogs.com/kevingrace/p/11422710.html</p>\n<p>https://juejin.im/post/5d973e246fb9a04dfa0963fb#heading-18</p>\n<p>https://mp.weixin.qq.com/s?__biz=MzU5Mzg4NTYyOA==&amp;mid=2247483698&amp;idx=1&amp;sn=79db67ba94f7de4a681f5827b32495c3&amp;chksm=fe08e1e1c97f68f79ce3c1de437d25a0262acdf6e50295d7b05f25fd9090c05ae17547f582c9&amp;mpshare=1&amp;scene=24&amp;srcid=0426o4pE2rlbV9jiC0uU7bbf&amp;sharer_sharetime=1587898963958&amp;sharer_shareid=9b928482ebeb2f07e6828859301773b2&amp;key=0c8b8599c39815a077ababf632218cf4dd47c3300ac756d5d1f91cab59a40607f01f1490e733f7642923a35122555c5af376a556d629fd23b6d57045ab998c4c8ef4c0069aaa95360699b46822a279da&amp;ascene=1&amp;uin=MjIyMjY5MjcyMg%3D%3D&amp;devicetype=Windows+10&amp;version=62080079&amp;lang=zh_CN&amp;exportkey=ATu2VmD5qWBN%2BODgGFu%2BLRg%3D&amp;pass_ticket=UKe3uNkZN8oXGdb8m9nzjnYYPVa%2B6oSRKUVpiOMdQ%2BemAGGjU653K0yx2yLVIF6J</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/harbor_CI.png",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "RabbitMQ 高可用集群架构",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/container/Docker/docker_rabbitmq/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/container/Docker/docker_rabbitmq/",
      "content_html": "<h2 id=\"rabbitmq-高可用集群架构\"> RabbitMQ 高可用集群架构</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/rabbitmq_ha.png\" alt=\"img\"></p>\n<p>将两个 RabbitMQ 磁盘节点和一个 RabbitMQ 内存节点组成一个内建集群，之所以要用两个磁盘节点是防止，唯一的磁盘节点挂掉后，不能重建队列，交换器。用 HAProxy 作为 RabbitMQ 集群的负载均衡。为了防止 HAProxy 单点故障，用 Keepalived 将两个 HAProxy 节点做成一主一备。应用使用 VIP（虚拟IP） 访问 HAProxy 服务时，默认连接主机（Master）的 HAProxy，当主机（Master）上的 HAProxy 故障时，VIP 会漂移到备机（Backup）上，就会连接备机（Backup）上的 HAProxy 服务。</p>\n<h2 id=\"服务器规划\"> 服务器规划</h2>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>数量</th>\n<th>ip地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RabbitMQ Disc Node</td>\n<td>2</td>\n<td>192.168.125.26，192.168.125.190</td>\n</tr>\n<tr>\n<td>RabbitMQ RAM Node</td>\n<td>1</td>\n<td>192.168.125.176</td>\n</tr>\n<tr>\n<td>HAProxy</td>\n<td>2</td>\n<td>192.168.125.222，192.168.125.168</td>\n</tr>\n<tr>\n<td>虚拟ip</td>\n<td>1</td>\n<td>192.168.125.245</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"准备工作\"> 准备工作</h2>\n<h3 id=\"安装docker和docker-compose\"> 安装Docker和Docker Compose</h3>\n<ol>\n<li>\n<p>安装配置Docker</p>\n<p>使用官方脚本安装 Docker</p>\n<div><pre><code><span>curl</span> -fsSL <span>\"https://get.docker.com/\"</span> <span>|</span> <span>bash</span> -s -- --mirror Aliyun\n</code></pre>\n<div><span>1</span><br></div></div><p>加载br_netfilter</p>\n<div><pre><code>modprobe br_netfilter\n</code></pre>\n<div><span>1</span><br></div></div><p>设置下系统内核参数</p>\n<div><pre><code>cat<span>&lt;&lt;</span><span>EOF<span> <span>></span> /etc/sysctl.d/docker.conf</span>\n# 要求iptables不对bridge的数据进行处理\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-arptables = 1\n# 开启转发\nnet.ipv4.ip_forward = 1\nEOF</span>\nsysctl -p /etc/sysctl.d/docker.conf\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>\n<p>⚠️ 慎用<code>sysctl --system</code>命令，如果参数在不同文件中设置，会有优先级问题，目前看来<code>/etc/sysctl.conf</code>的优先级最高</p>\n</blockquote>\n<p>配置docker镜像站</p>\n<div><pre><code><span>curl</span> -sSL https://get.daocloud.io/daotools/set_mirror.sh <span>|</span> <span>sh</span> -s http://f1361db2.m.daocloud.io\n</code></pre>\n<div><span>1</span><br></div></div><p>启动docker服务</p>\n<div><pre><code>systemctl <span>enable</span> docker <span>&amp;&amp;</span> systemctl start docker\n</code></pre>\n<div><span>1</span><br></div></div></li>\n<li>\n<p>安装配置Docker Compose</p>\n<p>二进制方式 安装Docker Compose</p>\n<div><pre><code><span>curl</span> -L https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span><span>$(</span><span>uname</span> -s<span>)</span></span>-<span><span>$(</span><span>uname</span> -m<span>)</span></span> <span>></span> /usr/local/bin/docker-compose\n<span>chmod</span> +x /usr/local/bin/docker-compose\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>配置bash补全命令</p>\n<div><pre><code><span>curl</span> -L https://raw.githubusercontent.com/docker/compose/1.27.4/contrib/completion/bash/docker-compose <span>></span> /etc/bash_completion.d/docker-compose\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>如果网络不可达，可先下载到本地，然后上传到内网ftp服务器上，进行下载，以下是笔者自己的内网ftp下载地址</p>\n</blockquote>\n<div><pre><code><span>curl</span> -L ftp://192.168.166.21/docker-compose <span>></span> /etc/bash_completion.d/docker-compose\n</code></pre>\n<div><span>1</span><br></div></div></li>\n</ol>\n<h3 id=\"下载rabbitmq和haproxy镜像\"> 下载rabbitmq和haproxy镜像</h3>\n<p>下载镜像</p>\n<div><pre><code>docker pull rabbitmq:3.8.9-management\ndocker pull haproxy:2.1\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"部署rabbitmq集群\"> 部署rabbitmq集群</h2>\n<h3 id=\"部署192-168-125-26节点\"> 部署<code>192.168.125.26</code>节点</h3>\n<p>创建目录</p>\n<div><pre><code><span>mkdir</span> -p /app/clay/rabbitmq\n<span>cd</span> /app/clay/rabbitmq\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>查看服务编排文件<code>clay-rabbitmq-node1.yaml</code></p>\n<div><pre><code><span>version</span><span>:</span> <span>'3'</span>\n<span>services</span><span>:</span>\n  <span>rabbitmq</span><span>:</span>\n    <span>container_name</span><span>:</span> clay<span>-</span>rabbitmq\n    <span>image</span><span>:</span> rabbitmq<span>:</span>3.8.9<span>-</span>management\n    <span>restart</span><span>:</span> always\n    <span>ports</span><span>:</span>\n      <span>-</span> 4369<span>:</span><span>4369</span>\n      <span>-</span> 5671<span>:</span><span>5671</span>\n      <span>-</span> 5672<span>:</span><span>5672</span>\n      <span>-</span> 15672<span>:</span><span>15672</span>\n      <span>-</span> 25672<span>:</span><span>25672</span>\n    <span>environment</span><span>:</span>\n      <span>-</span> TZ=Asia/Shanghai\n      <span>-</span> RABBITMQ_ERLANG_COOKIE=iweru238roseire\n      <span>-</span> RABBITMQ_DEFAULT_USER=clay_admin\n      <span>-</span> RABBITMQ_DEFAULT_PASS=clay_admin_123\n      <span>-</span> RABBITMQ_DEFAULT_VHOST=clay_vhost\n    <span>hostname</span><span>:</span> rabbitmq1\n    <span>extra_hosts</span><span>:</span>\n      <span>-</span> rabbitmq1<span>:</span>192.168.125.26\n      <span>-</span> rabbitmq2<span>:</span>192.168.125.190\n      <span>-</span> rabbitmq3<span>:</span>192.168.125.176\n    <span>volumes</span><span>:</span>\n      <span>-</span> ./data<span>:</span>/var/lib/rabbitmq\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>部署</p>\n<div><pre><code>docker-compose -f clay-rabbitmq-node1.yaml up -d\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>⚠️ 三个节点 RABBITMQ_ERLANG_COOKIE 保持一致。一定要有 extra_hosts 配置，否则在搭建集群的过程中会连接不到其他 rabbitmq 节点服务。此节点</p>\n<p>作为集群根节点。</p>\n</blockquote>\n<h3 id=\"部署192-168-125-190节点\"> 部署<code>192.168.125.190</code>节点</h3>\n<p>创建目录</p>\n<div><pre><code><span>mkdir</span> -p /app/clay/rabbitmq\n<span>cd</span> /app/clay/rabbitmq\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>编写<code>rabbitmq.sh</code>启动脚本（磁盘节点）</p>\n<div><pre><code><span>cat</span> <span>></span> rabbitmq.sh <span>&lt;&lt;</span><span>EOF\nrabbitmqctl stop_app\nrabbitmqctl reset\nrabbitmqctl join_cluster rabbit@rabbitmq1\nrabbitmqctl start_app\nEOF</span>\n<span>chmod</span> +x rabbitmq.sh \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>查看服务编排文件<code>clay-rabbitmq-node2.yaml</code></p>\n<div><pre><code><span>version</span><span>:</span> <span>'3'</span>\n<span>services</span><span>:</span>\n  <span>rabbitmq</span><span>:</span>\n    <span>container_name</span><span>:</span> clay<span>-</span>rabbitmq\n    <span>image</span><span>:</span> rabbitmq<span>:</span>3.8.9<span>-</span>management\n    <span>restart</span><span>:</span> always\n    <span>ports</span><span>:</span>\n      <span>-</span> 4369<span>:</span><span>4369</span>\n      <span>-</span> 5671<span>:</span><span>5671</span>\n      <span>-</span> 5672<span>:</span><span>5672</span>\n      <span>-</span> 15672<span>:</span><span>15672</span>\n      <span>-</span> 25672<span>:</span><span>25672</span>\n    <span>environment</span><span>:</span>\n      <span>-</span> TZ=Asia/Shanghai\n      <span>-</span> RABBITMQ_ERLANG_COOKIE=iweru238roseire\n      <span>-</span> RABBITMQ_DEFAULT_USER=clay_admin\n      <span>-</span> RABBITMQ_DEFAULT_PASS=clay_admin_123\n      <span>-</span> RABBITMQ_DEFAULT_VHOST=clay_vhost\n    <span>hostname</span><span>:</span> rabbitmq2\n    <span>extra_hosts</span><span>:</span>\n      <span>-</span> rabbitmq1<span>:</span>192.168.125.26\n      <span>-</span> rabbitmq2<span>:</span>192.168.125.190\n      <span>-</span> rabbitmq3<span>:</span>192.168.125.176\n    <span>volumes</span><span>:</span>\n      <span>-</span> ./rabbitmq.sh<span>:</span>/home/rabbitmq.sh\n      <span>-</span> ./data<span>:</span>/var/lib/rabbitmq\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>部署</p>\n<div><pre><code>docker-compose -f clay-rabbitmq-node2.yaml up -d\n</code></pre>\n<div><span>1</span><br></div></div><p>节点启动完成后，通过命令进入<code>rabbitmq2</code>节点的容器中，执行<code>/home/rabbitmq.sh</code>脚本</p>\n<div><pre><code>docker container <span>exec</span> -it clay-rabbitmq /bin/bash\n./home/rabbitmq.sh \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"部署192-168-125-176节点\"> 部署<code>192.168.125.176</code>节点</h3>\n<p>创建目录</p>\n<div><pre><code><span>mkdir</span> -p /app/clay/rabbitmq\n<span>cd</span> /app/clay/rabbitmq\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>编写<code>rabbitmq-ram.sh</code>启动脚本（内存节点）</p>\n<div><pre><code><span>cat</span> <span>></span> rabbitmq-ram.sh <span>&lt;&lt;</span><span>EOF\nrabbitmqctl stop_app\nrabbitmqctl reset\nrabbitmqctl join_cluster --ram rabbit@rabbitmq1\nrabbitmqctl start_app\nEOF</span>\n<span>chmod</span> +x rabbitmq-ram.sh\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>查看服务编排文件<code>clay-rabbitmq-node3.yaml</code></p>\n<div><pre><code><span>version</span><span>:</span> <span>'3'</span>\n<span>services</span><span>:</span>\n  <span>rabbitmq</span><span>:</span>\n    <span>container_name</span><span>:</span> clay<span>-</span>rabbitmq\n    <span>image</span><span>:</span> rabbitmq<span>:</span>3.8.9<span>-</span>management\n    <span>restart</span><span>:</span> always\n    <span>ports</span><span>:</span>\n      <span>-</span> 4369<span>:</span><span>4369</span>\n      <span>-</span> 5671<span>:</span><span>5671</span>\n      <span>-</span> 5672<span>:</span><span>5672</span>\n      <span>-</span> 15672<span>:</span><span>15672</span>\n      <span>-</span> 25672<span>:</span><span>25672</span>\n    <span>environment</span><span>:</span>\n      <span>-</span> TZ=Asia/Shanghai\n      <span>-</span> RABBITMQ_ERLANG_COOKIE=iweru238roseire\n      <span>-</span> RABBITMQ_DEFAULT_USER=clay_admin\n      <span>-</span> RABBITMQ_DEFAULT_PASS=clay_admin_123\n      <span>-</span> RABBITMQ_DEFAULT_VHOST=clay_vhost\n    <span>hostname</span><span>:</span> rabbitmq3\n    <span>extra_hosts</span><span>:</span>\n      <span>-</span> rabbitmq1<span>:</span>192.168.125.26\n      <span>-</span> rabbitmq2<span>:</span>192.168.125.190\n      <span>-</span> rabbitmq3<span>:</span>192.168.125.176\n    <span>volumes</span><span>:</span>\n      <span>-</span> ./rabbitmq<span>-</span>ram.sh<span>:</span>/home/rabbitmq<span>-</span>ram.sh\n      <span>-</span> ./data<span>:</span>/var/lib/rabbitmq\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>部署</p>\n<div><pre><code>docker-compose -f clay-rabbitmq-node3.yaml up -d\n</code></pre>\n<div><span>1</span><br></div></div><p>在启动<code>rabbitmq3</code>节点，启动后，进入容器内部，执行 <code>/home/rabbitmq-ram.sh</code> 脚本添加内存节点到集群中</p>\n<div><pre><code>docker container <span>exec</span> -it clay-rabbitmq /bin/bash\n./home/rabbitmq-ram.sh \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>在容器内部使用<code>rabbitmqctl cluster_status</code>命令查看集群状态，以下是输出</p>\n<div><pre><code>Basics\n\nCluster name: rabbit@rabbitmq3\n\nDisk Nodes\n\nrabbit@rabbitmq1\nrabbit@rabbitmq2\n\nRAM Nodes\n\nrabbit@rabbitmq3\n\nRunning Nodes\n\nrabbit@rabbitmq1\nrabbit@rabbitmq2\nrabbit@rabbitmq3\n\nVersions\n\nrabbit@rabbitmq1: RabbitMQ 3.8.9 on Erlang 23.1.1\nrabbit@rabbitmq2: RabbitMQ 3.8.9 on Erlang 23.1.1\nrabbit@rabbitmq3: RabbitMQ 3.8.9 on Erlang 23.1.1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>也可以通过 http://192.168.125.26:15672/ 进入管理端查看集群状态</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/rabbitmqclay.png\" alt=\"rabbitmq_ha\"></p>\n<h2 id=\"haproxy-负载均衡\"> HaProxy 负载均衡</h2>\n<p>在<code>192.168.125.222</code>，<code>192.168.125.168</code>两个节点同时操作</p>\n<p>创建目录</p>\n<div><pre><code><span>mkdir</span> -p /app/clay/haproxy\n<span>cd</span> /app/clay/haproxy\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>查看服务编排文件<code>clay-haproxy.yaml</code></p>\n<div><pre><code><span>version</span><span>:</span> <span>'3'</span>\n<span>services</span><span>:</span>\n  <span>haproxy</span><span>:</span>\n    <span>container_name</span><span>:</span> clay<span>-</span>haproxy\n    <span>image</span><span>:</span> haproxy<span>:</span><span>2.1</span>\n    <span>restart</span><span>:</span> always\n    <span>ports</span><span>:</span>\n      <span>-</span> 8100<span>:</span><span>8100</span>\n      <span>-</span> 15670<span>:</span><span>5670</span>\n    <span>environment</span><span>:</span>\n      <span>-</span> TZ=Asia/Shanghai\n    <span>extra_hosts</span><span>:</span>\n      <span>-</span> rabbitmq1<span>:</span>192.168.125.26\n      <span>-</span> rabbitmq2<span>:</span>192.168.125.190\n      <span>-</span> rabbitmq3<span>:</span>192.168.125.176\n    <span>volumes</span><span>:</span>\n      <span>-</span> ./haproxy.cfg<span>:</span>/usr/local/etc/haproxy/haproxy.cfg<span>:</span>ro\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><blockquote>\n<p>重点是设置 extra_hosts（rabbitmq 集群节点 ip） 和 volumes（使用自定义的配置文件）</p>\n</blockquote>\n<p>haproxy 配置文件内容：</p>\n<div><pre><code>global\n    log 127.0.0.1 local0 info\n    maxconn 4096\n\ndefaults\n    log     global\n    mode    tcp\n    option  tcplog\n    retries 3\n    option  redispatch\n    maxconn 2000\n    timeout connect 5s\n    timeout client 120s\n    timeout server 120s\n\n# ssl for rabbitmq\n# frontend ssl_rabbitmq\n    # bind *:5673 ssl crt /root/rmqha_proxy/rmqha.pem\n    # mode tcp\n    # default_backend rabbitmq\n\n# web 管理界面\nlisten stats\n    bind *:8100\n    mode http\n    stats enable\n    stats realm Haproxy\\ Statistics\n    stats uri /\n    stats auth admin:admin123\n# 配置负载均衡\nlisten rabbitmq\n    bind *:5670\n    mode tcp\n    balance roundrobin\n    server  rabbitmq1 rabbitmq1:5672  check inter 5s rise 2 fall 3\n    server  rabbitmq2 rabbitmq2:5672  check inter 5s rise 2 fall 3\n    server  rabbitmq3 rabbitmq3:5672  check inter 5s rise 2 fall 3\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p>部署</p>\n<div><pre><code>docker-compose -f clay-haproxy.yaml up -d\n</code></pre>\n<div><span>1</span><br></div></div><p>登录 HAProxy 的管理端查看集群状态：http://192.168.125.222:8100/</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/haproxyauth.png\" alt=\"haproxyauth\"></p>\n<h2 id=\"使用-keepalived-给-haproxy-做主备\"> 使用 Keepalived 给 HAProxy 做主备</h2>\n<p>在<code>192.168.125.222</code>，<code>192.168.125.168</code>两个节点安装<code>keepalived</code></p>\n<div><pre><code>yum -y <span>install</span> keepalived\n<span># 安装killall命令</span>\nyum -y <span>install</span> psmisc\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>Master 节点配置：</strong></p>\n<div><pre><code>vrrp_script chk_haproxy {\n    script &quot;killall -0 haproxy&quot;  # verify haproxy&#39;s pid existance\n    interval 5                   # check every 5 seconds\n    weight -2                    # if check failed, priority will minus 2\n}\nvrrp_instance VI_1 {\n    # 主机: MASTER\n    # 备机: BACKUP\n    state MASTER\n    # 实例绑定的网卡, 用ip a命令查看网卡编号\n    interface eth0\n    # 虚拟路由标识，这个标识是一个数字(1-255)，在一个VRRP实例中主备服务器ID必须一样\n    virtual_router_id 51\n    # 优先级，数字越大优先级越高，在一个实例中主服务器优先级要高于备服务器\n    priority 101\n    # 虚拟IP地址,可以有多个，每行一个\n    virtual_ipaddress {\n        192.168.125.245\n    }\n    track_script {               # Scripts state we monitor\n        chk_haproxy\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p><code>eth0</code>是网卡名，<code>ifconfig</code> 命令查看服务器网卡，找到和本机服务 ip 对应的网卡，<code>virtual_router_id</code> 的值要和 backup 节点上的配置保持一致。</p>\n<p><code>killall -0 haproxy</code> 命令的意思是，如果 haproxy 服务存在执行该命令，什么都不会发生，如果服务不存在，执行该命令会报找不到进程 <code>haproxy: no process found</code>。</p>\n<p>master 节点的 priority 在减去 weight 后要比 backup 节点的 priority 低才行，否则主备切换不成功。</p>\n<p><strong>Backup节点配置：</strong></p>\n<div><pre><code>vrrp_script chk_haproxy {\n    script &quot;killall -0 haproxy&quot;  # verify haproxy&#39;s pid existance\n    interval 5                   # check every 5 seconds\n    weight -2                    # if check failed, priority will minus 2\n}\nvrrp_instance VI_1 {\n    # 主机: MASTER\n    # 备机: BACKUP\n    state BACKUP\n    # 实例绑定的网卡, 用ip a命令查看网卡编号\n    interface eth0\n    # 虚拟路由标识，这个标识是一个数字(1-255)，在一个VRRP实例中主备服务器ID必须一样\n    virtual_router_id 51\n    # 优先级，数字越大优先级越高，在一个实例中主服务器优先级要高于备服务器\n    priority 100\n    # 虚拟IP地址,可以有多个，每行一个\n    virtual_ipaddress {\n        192.168.125.245\n    }\n    track_script {               # Scripts state we monitor\n        chk_haproxy\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>创建完配置，启动 keepalived。</p>\n<div><pre><code>systemctl restart keepalived.service \n</code></pre>\n<div><span>1</span><br></div></div><p><strong>测试 Keepalived</strong></p>\n<p>在 Master，Backup 节点上，使用 <code>ip addr</code> 命令看下 vip 在哪台机器的 eth0 网卡上。</p>\n<p>默认在 master 主机上，停掉 master 主机的 haproxy 服务，然后在用 <code>ip addr</code> 查看虚拟 ip 在哪个机器上，如果漂移到备份主机上则代表热备生效。</p>\n<p>在开启 master 主机的 haproxy 服务，<code>ip addr</code> 查看虚拟 ip 应该重新漂移回 master 主机上。</p>\n<p>测试服务，使用虚拟 ip 加服务端口号访问 HAProxy 服务。</p>\n<p>至此，高可用的 rabbitmq 集群 和 haproxy 软负载就搭建完成。</p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/rabbitmq_ha.png",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "使用方法",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/container/dockerfile/fastdfs/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/container/dockerfile/fastdfs/",
      "content_html": "<h2 id=\"使用方法\"> 使用方法</h2>\n<p>需要注意的是 你需要在运行容器的时候制定宿主机的<code>ip</code> 用参数<code>PUBIP</code> 来指定</p>\n<div><pre><code><span>mkdir</span> -p /data/fastdfs\ndocker pull wangzhichidocker/fastdfs:1.0.0\ndocker container run -d --name fdfs-test --network <span>host</span> -e <span>PUBIP</span><span>=</span>xxx --mount <span>type</span><span>=</span>bind,source<span>=</span>/data/fastdfs,target<span>=</span>/data/fastdfs wangzhichidocker/fastdfs:1.0.0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"客户端测试\"> 客户端测试</h2>\n<p>拷贝一个图片到容器内</p>\n<div><pre><code>docker container cp favicon.png fdfs-test:/tmp\n</code></pre>\n<div><span>1</span><br></div></div><p>进入容器上传图片</p>\n<div><pre><code>docker container exec -it fdfs-test /bin/bash\nfdfs_upload_file /etc/fdfs/client.conf /tmp/favicon.png \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>返回值为<code>group1/M00/00/00/wKh932A9-xCAcK7FAAGO_BH5JHs036.png</code></p>\n<p>在浏览器访问<code>http://宿主机IP:8888/group1/M00/00/00/wKh932A9-xCAcK7FAAGO_BH5JHs036.png</code>，如果访问图片正常，则测试成功</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "1 数据库相关概念",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.1%20MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.1%20MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
      "content_html": "<h2 id=\"_1-数据库相关概念\"> 1 数据库相关概念</h2>\n<h3 id=\"_1-1-什么是数据\"> 1.1 什么是数据？</h3>\n<p>​\t\t数据（data）是事实或观察的结果，是对客观事物的逻辑归纳，是用于表示客观事物的未经加工的原始素材。数据是信息的表现形式和载体，可以是符号、文字、数字、语音、图像、视频等。数据和信息是不可分离的，数据是信息的表达，信息是数据的内涵。数据本身没有意义，数据只有对实体行为产生影响才成为信息。数据可以是连续的值，比如声音、图像，称为模拟数据。也可以是离散的，如符号、文字，称为数字数据。在计算机系统中，数据以二进制信息单元0,1的形式表示。</p>\n<h3 id=\"_1-2-什么是数据库\"> 1.2 什么是数据库？</h3>\n<p>​\t\t数据库（Database）：是按照数据结构来组织、存储和管理数据的仓库。</p>\n<h3 id=\"_1-3-什么是数据库管理系统-dbms\"> 1.3 什么是数据库管理系统（DBMS）？</h3>\n<p>​\t\t数据库管理系统：是由数据库及其管理软件组成的系统，它支持如下操作：</p>\n<p>​\t\t\t1）提供数据持久性的存储，备份，恢复</p>\n<p>​\t\t\t2）支持事务管理</p>\n<p>​\t\t\t3）支持数据操作的并发</p>\n<p>​\t\t\t4）支持独立的管理语言（sql语句）</p>\n<h2 id=\"_2-数据库的发展史\"> 2 数据库的发展史</h2>\n<h3 id=\"_2-1-萌芽阶段-文件系统\"> 2.1 萌芽阶段：文件系统</h3>\n<p>最初始的数据库是用磁盘来存储数据的。文件就是最早的数据库。</p>\n<h3 id=\"_2-2-第一代数据库-层次模型、网状模型\"> 2.2  第一代数据库：层次模型、网状模型</h3>\n<h4 id=\"_2-2-1-层次模型\"> 2.2.1 层次模型</h4>\n<p><img src=\"images/1536628336467.png\" alt=\"1536628336467\"></p>\n<p>缺点：</p>\n<ol>\n<li>\n<p>查找不同类的数据效率低了（导航的结构的缺点）</p>\n</li>\n<li>\n<p>数据不完整（不能区分到底是一个李白还是两个李白）</p>\n</li>\n</ol>\n<h4 id=\"_2-2-2-网状模型\"> 2.2.2 网状模型</h4>\n<p>网状模型解决了层次数据的数据不完整的问题，但是没有解决层次模型的导航问题。</p>\n<p><img src=\"images/1536628485678.png\" alt=\"1536628485678\"></p>\n<h3 id=\"_2-3-第二代数据库-关系型数据库\"> 2.3 第二代数据库：关系型数据库</h3>\n<p>特点：</p>\n<ol>\n<li>\n<p>每个表都是独立的</p>\n</li>\n<li>\n<p>表与表之间通过公共字段来建立关系</p>\n</li>\n</ol>\n<p><img src=\"images/1536628687644.png\" alt=\"1536628687644\"></p>\n<p>优点：解决了导航问题，并且数据完整性得到解决</p>\n<p>缺点：多表查询效率低了</p>\n<p>提示：我们现在用的主流的数据库都是关系模型的。</p>\n<div><pre><code>多学一招：NoSQL（非关系型数据库）解决关系型数据库多表查询效率的问题，常见的非关系型数据库有：Redis、mongodb。数据库中存储格式是键值对。 \n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-数据库的分类\"> 3 数据库的分类</h2>\n<h3 id=\"_3-1-关系型数据库\"> 3.1 关系型数据库</h3>\n<p>​\t\t关系数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。关系模型是由埃德加·科德于1970年首先提出的，并配合“科德十二定律”。现如今虽然对模型有一些批评意见，但它还是数据存储的传统标准。标准数据查询语言SQL就是一种基于关系数据库的语言，这种语言执行对关系数据库中数据的检索和操作。关系模型由关系数据结构、关系操作集合、关系完整性约束三部分组成。</p>\n<h4 id=\"_3-1-2-常见的关系型数据库\"> 3.1.2  常见的关系型数据库</h4>\n<table>\n<thead>\n<tr>\n<th>关系型数据库</th>\n<th>开发公司</th>\n<th>使用语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SQL Server</td>\n<td>微软公司</td>\n<td>T-SQL</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>甲骨文公司</td>\n<td>PL/SQL</td>\n</tr>\n<tr>\n<td>MySQL</td>\n<td>MySQL AB 公司开发——甲骨文公司收购</td>\n<td>MySQL</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_3-2-非关系型数据库\"> 3.2 非关系型数据库</h3>\n<h2 id=\"_4-mysql的安装\"> 4 Mysql的安装</h2>\n<h2 id=\"_5-连接服务器\"> 5 连接服务器</h2>\n<div><pre><code>-h 主机（host）\n-u 用户名（username）\n-p 密码（password）\n-P 端口（port）\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><img src=\"images/1536633424017.png\" alt=\"1536633424017\"></p>\n<hr>\n<p><img src=\"images/1536633591923.png\" alt=\"1536633591923\"></p>\n<div><pre><code>多学一招：如果MySQL服务器在本地，IP地址可以省略；如果MySQL服务器用的是3306端口，-P也是可以省略 \n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_6-sql介绍\"> 6 SQL介绍</h2>\n<h3 id=\"_6-1-sql是什么\"> 6.1 SQL是什么</h3>\n<p>Structured Query Language（结构化查询语言），是用来操作关系型数据库的一门语言。这是一个关系型数据库的通用操作语言，也成为标准SQL，也叫SQL-92。</p>\n<div><pre><code>多学一招：数据库的生产厂商为了占有市场份额，都会在标准SQL的基础上扩展一些自己的东西以吸引用户。\n</code></pre>\n<div><span>1</span><br></div></div><p>**思考：**已知标准SQL可以在所有的关系型数据库上运行，在Oracle上编写的PL/SQL能否在MySQL上运行？</p>\n<p>答：不能，只能运行标准SQL 。</p>\n<h3 id=\"_6-2-sql的分类\"> 6.2 SQL的分类</h3>\n<ul>\n<li>DDL（data definition language）数据库定义语言CREATE、ALTER、DROP、SHOW</li>\n<li>DML（data manipulation language）数据操纵语言SELECT、UPDATE、INSERT、DELETE</li>\n<li>DCL（data control language）数据库控制语言,是用来设置或更改数据库用户或角色权限的语句GRANT,REVOKE,COMMIT,ROLLBACK</li>\n<li>DQL（data query language）：数据查询语言 SELECT</li>\n</ul>\n<h3 id=\"_6-3-注意事项\"> 6.3 注意事项</h3>\n<ul>\n<li>\n<p>每条SQL语句结束时要以<code>;</code>做为结束符(除了use命令)</p>\n</li>\n<li>\n<p>SQL语句的关键字不区分大小写(除了库名字和表名字)</p>\n</li>\n<li>\n<p>在查询数据库信息或者表信息时,可以以\\G做为结束符,表示以文本模式输出</p>\n</li>\n<li>\n<p>当你不需要一条语句输出的结果以\\c结束,不可以使用ctrl+c,否则登出mysql.</p>\n</li>\n<li>\n<p>我们可以在命令行执行sql语句,要通过mysql -e参数</p>\n<p><code>mysql -e &quot;show databases \\G</code>&quot;显示到shell上</p>\n</li>\n<li>\n<p>如果需要获取SQL语句的帮助可以用help命令<code>help create</code>\n如果需要进一步获取帮助,可以继续使用help命令<code>help create database</code></p>\n</li>\n</ul>\n<h2 id=\"_7-数据库操作\"> 7 数据库操作</h2>\n<h3 id=\"_7-1-增\"> 7.1 增</h3>\n<div><pre><code>create database [if not exists] `数据库名` [charset=utf8];\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_7-2-删\"> 7.2 删</h3>\n<div><pre><code>drop database [if exists] 数据库名;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_7-3-改\"> 7.3 改</h3>\n<div><pre><code>alter database 数据库名 charset=字符编码;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_7-4-查\"> 7.4 查</h3>\n<div><pre><code>show databases;\n</code></pre>\n<div><span>1</span><br></div></div><p>安装MySQL后，MySQL自带了4个数据库</p>\n<ol>\n<li>information_schema：存储了MySQL服务器管理数据库的信息。</li>\n<li>performance_schema：MySQL5.5新增的表，用来保存数据库服务器性能的参数</li>\n<li>mysql：MySQL系统数据库，保存的登录用户名，密码，以及每个用户的权限等等</li>\n<li>test：给用户学习和测试的数据库。</li>\n</ol>\n<p>显示创建数据库的SQL语句</p>\n<div><pre><code>show create database 数据库名;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_7-5-选择数据库\"> 7.5 选择数据库</h3>\n<div><pre><code>use 数据库名称\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_8-表操作\"> 8 表操作</h2>\n<h3 id=\"_8-1-增\"> 8.1 增</h3>\n<div><pre><code>create table [if not exists] 表名（字段名 数据类型 [null|not null] [auto_increment] [primary key] [comment], 字段名 数据类型 [default]...）engine=存储引擎;\n</code></pre>\n<div><span>1</span><br></div></div><p>单词</p>\n<div><pre><code>null | not null   \t空|非空\ndefault\t          \t默认值\nauto_increment    \t自动增长\nprimary key       \t主键\ncomment           \t备注\nengine           \t引擎   \ninnodb  myisam  memory  引擎是决定数据存储的方式\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_8-2-删\"> 8.2 删</h3>\n<div><pre><code>drop table [if exists] 表1,表2;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_8-3-改\"> 8.3 改</h3>\n<h4 id=\"_8-3-1-修改表名\"> 8.3.1 修改表名</h4>\n<div><pre><code>alter table aa rename to bb;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_8-3-2-添加字段\"> 8.3.2 添加字段</h4>\n<div><pre><code>alter table aa add age int;\n</code></pre>\n<div><span>1</span><br></div></div><p>在第一个位置上添加字段</p>\n<div><pre><code>alter table aa add email varchar(30) first;\n</code></pre>\n<div><span>1</span><br></div></div><p>在指定的字段后添加字段</p>\n<div><pre><code>alter table aa add age int(10) after name;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_8-3-3-删除字段\"> 8.3.3 删除字段</h4>\n<div><pre><code>alter table aa drop email;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_8-3-4-修改字段名和类型\"> 8.3.4 修改字段名和类型</h4>\n<div><pre><code>alter table aa change sex xingbie int;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_8-3-5-修改字段类型\"> 8.3.5 修改字段类型</h4>\n<div><pre><code>alter table aa modify xingbie varchar(2);\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_8-3-6-修改引擎\"> 8.3.6 修改引擎</h4>\n<div><pre><code>alter table aa engine=myisam;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_8-4-查\"> 8.4 查</h3>\n<h4 id=\"_8-4-1-显示所有表\"> 8.4.1 显示所有表</h4>\n<div><pre><code>show tables;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_8-4-2-显示创建表的语句\"> 8.4.2 显示创建表的语句</h4>\n<div><pre><code>show create table 表名;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_8-4-3-查看表结构\"> 8.4.3 查看表结构</h4>\n<div><pre><code>desc 表名;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_8-5-复制表\"> 8.5 复制表</h3>\n<div><pre><code>create table 新表 select 字段 from 旧表;\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_9-数据操作\"> 9 数据操作</h2>\n<h3 id=\"_9-1-增\"> 9.1 增</h3>\n<div><pre><code>insert into 表名 (字段名，字段名，...) values (值1，值2，...);\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_9-2-删\"> 9.2 删</h3>\n<div><pre><code>delete from 表名 [where 条件];\n</code></pre>\n<div><span>1</span><br></div></div><p>删除表中所有记录</p>\n<div><pre><code>delete from aa;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_9-3-改\"> 9.3 改</h3>\n<div><pre><code>update 表名 set 字段=值 [where 条件];\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_9-4-查\"> 9.4 查</h3>\n<div><pre><code>select 列名 from 表;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_9-5-清空表数据\"> 9.5 清空表数据</h3>\n<div><pre><code>truncate table 表名;\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_10-数据表的文件介绍\"> 10 数据表的文件介绍</h2>\n<p>一个数据库对应一个文件夹</p>\n<p>一个表对应一个或多个文件</p>\n<p>引擎是myisam，一个表对应三个文件</p>\n<ol>\n<li>xx.frm  表结构</li>\n<li>xx.MYD  数据</li>\n<li>xx.MYI   index信息</li>\n</ol>\n<p><img src=\"images/1536654269605.png\" alt=\"1536654269605\"></p>\n<p>引擎是innodb,一个表对应一个表结构文件</p>\n<p><img src=\"images/1536654519700.png\" alt=\"1536654519700\"></p>\n<p>go3.frm 表结构</p>\n<p>所有的innodb引擎的数据统一的存放在data\\ibdata1文件中。如果数据量很大，MySQL会自动的创建ibdata2，ibdata3，…，目的就是为了便于管理。</p>\n<p>引擎是memory，数据存储在内存中，重启服务数据丢失，但是读取速度非常快</p>\n<h2 id=\"_11-字符集\"> 11 字符集</h2>\n<p>查看当前设置的字符编码集</p>\n<div><pre><code>show variables like &#39;character_set_%&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><p>客户端编码、character_set_client、character_set_results三个编码的值一致即可操作中文。</p>\n<h2 id=\"_12-思维导图\"> 12 思维导图</h2>\n<p><img src=\"images/xmind.png\" alt=\"\"></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "mysql架构",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.11%20MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.11%20MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/",
      "content_html": "<h2 id=\"mysql架构\"> mysql架构</h2>\n<p>mysql架构分为三层：</p>\n<ol>\n<li>服务层：为客户请求做连接处理、授权认证、安全等</li>\n<li>核心层：查询解析，分析，优化，缓存，所有内建函数；存储过程，触发器，视图等</li>\n<li>存储引擎层：存储和提取数据以及事务处理</li>\n</ol>\n<p><img src=\"images/1.png\" alt=\"\"></p>\n<h3 id=\"服务层\"> 服务层</h3>\n<p>​         <img src=\"images/1-1581242308187.png\" alt=\"\"></p>\n<h3 id=\"核心层\"> 核心层</h3>\n<p>​         <img src=\"images/1-1581242354457.png\" alt=\"\"></p>\n<h3 id=\"存储引擎层\"> 存储引擎层</h3>\n<p>​         <img src=\"images/1-1581242634333.png\" alt=\"\"></p>\n<h2 id=\"总图\"> 总图</h2>\n<p>​         <img src=\"images/1-1581242670762.png\" alt=\"\"></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "1 锁等待模拟",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.12%20MySQL%E9%94%81%E7%AD%89%E5%BE%85/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.12%20MySQL%E9%94%81%E7%AD%89%E5%BE%85/",
      "content_html": "<h2 id=\"_1-锁等待模拟\"> 1 锁等待模拟</h2>\n<p>创建数据库</p>\n<div><pre><code>create database clay_test default charset utf8 collate utf8_general_ci;\nuse clay_test\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>创建表</p>\n<div><pre><code>create table t1(id int, name varchar(20)) engine=innodb default charset=utf8;\n</code></pre>\n<div><span>1</span><br></div></div><p>插入数据</p>\n<div><pre><code>insert into t1 values(1, &#39;clay&#39;);\n</code></pre>\n<div><span>1</span><br></div></div><p>取消自动提交</p>\n<p>则当执行语句commit或者rollback执行提交事务或者回滚</p>\n<div><pre><code>set autocommit=0;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; show variables like &#39;autocommit&#39;;\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| autocommit    | OFF   |\n+---------------+-------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>更新第一条插入的数据</p>\n<div><pre><code>update t1 set name=&#39;hello&#39; where id=1;\n</code></pre>\n<div><span>1</span><br></div></div><p>新开一个终端，也更新第一条数据</p>\n<div><pre><code>update t1 set name=&#39;world&#39; where id=1;\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_2-监控锁状态\"> 2 监控锁状态</h2>\n<h3 id=\"_2-1-查看有无锁等待\"> 2.1 查看有无锁等待</h3>\n<div><pre><code>mysql&gt; show status like &#39;%innodb_row_lock%&#39;;\n+-------------------------------+---------+\n| Variable_name                 | Value   |\n+-------------------------------+---------+\n| Innodb_row_lock_current_waits | 1       |\n| Innodb_row_lock_time          | 2270662 |\n| Innodb_row_lock_time_avg      | 44522   |\n| Innodb_row_lock_time_max      | 51599   |\n| Innodb_row_lock_waits         | 51      |\n+-------------------------------+---------+\n5 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>\n<li>Innodb_row_lock_current_waits 表示当前所等待的数量</li>\n<li>Innodb_row_lock_waits 表示历史发生锁等待的数量</li>\n</ul>\n<p>查看哪个表的打开数量大于0</p>\n<div><pre><code>show open tables where in_use&gt;0;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-2-查看哪个事务在等待-被阻塞了\"> 2.2 查看哪个事务在等待（被阻塞了）</h3>\n<div><pre><code>mysql&gt; select * from information_schema.innodb_trx where trx_state=&#39;lock wait&#39; \\G;\n*************************** 1. row ***************************\n                    trx_id: 2502\n                 trx_state: LOCK WAIT\n               trx_started: 2020-02-15 17:19:37\n     trx_requested_lock_id: 2502:9:3:2\n          trx_wait_started: 2020-02-15 17:19:37\n                trx_weight: 2\n       trx_mysql_thread_id: 38\n                 trx_query: update t1 set name=&#39;world&#39; where id=1\n       trx_operation_state: starting index read\n         trx_tables_in_use: 1\n         trx_tables_locked: 1\n          trx_lock_structs: 2\n     trx_lock_memory_bytes: 360\n           trx_rows_locked: 1\n         trx_rows_modified: 0\n   trx_concurrency_tickets: 0\n       trx_isolation_level: REPEATABLE READ\n         trx_unique_checks: 1\n    trx_foreign_key_checks: 1\ntrx_last_foreign_key_error: NULL\n trx_adaptive_hash_latched: 0\n trx_adaptive_hash_timeout: 10000\n          trx_is_read_only: 0\ntrx_autocommit_non_locking: 0\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h3 id=\"_2-3-查看索源\"> 2.3 查看索源</h3>\n<div><pre><code>mysql&gt; select * from information_schema.innodb_lock_waits;\n+-------------------+-------------------+-----------------+------------------+\n| requesting_trx_id | requested_lock_id | blocking_trx_id | blocking_lock_id |\n+-------------------+-------------------+-----------------+------------------+\n| 2502              | 2500:9:3:2        | 2491            | 2491:9:3:2       |\n+-------------------+-------------------+-----------------+------------------+\n1 row in set (0.00 sec)\n\nselect * from information_schema.innodb_locks;\n+------------+-------------+-----------+-----------+------------------+-----------------+------------+-----------+----------+----------------+\n| lock_id    | lock_trx_id | lock_mode | lock_type | lock_table       | lock_index      | lock_space | lock_page | lock_rec | lock_data      |\n+------------+-------------+-----------+-----------+------------------+-----------------+------------+-----------+----------+----------------+\n| 2500:9:3:2 | 2502        | X         | RECORD    | `clay_test`.`t1` | GEN_CLUST_INDEX |          9 |         3 |        2 | 0x000000000212 |\n| 2491:9:3:2 | 2491        | X         | RECORD    | `clay_test`.`t1` | GEN_CLUST_INDEX |          9 |         3 |        2 | 0x000000000212 |\n+------------+-------------+-----------+-----------+------------------+-----------------+------------+-----------+----------+----------------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id=\"_2-4-找到锁源的sql语句\"> 2.4 找到锁源的SQL语句</h3>\n<div><pre><code>mysql&gt; select * from information_schema.innodb_trx where trx_id=&#39;2491&#39; \\G;\n*************************** 1. row ***************************\n                    trx_id: 2491\n                 trx_state: RUNNING\n               trx_started: 2020-02-15 17:01:28\n     trx_requested_lock_id: NULL\n          trx_wait_started: NULL\n                trx_weight: 5\n       trx_mysql_thread_id: 37\n                 trx_query: update t1 set name=&#39;hello&#39; where id=1;\n       trx_operation_state: NULL\n         trx_tables_in_use: 0\n         trx_tables_locked: 0\n          trx_lock_structs: 2\n     trx_lock_memory_bytes: 360\n           trx_rows_locked: 2\n         trx_rows_modified: 3\n   trx_concurrency_tickets: 0\n       trx_isolation_level: REPEATABLE READ\n         trx_unique_checks: 1\n    trx_foreign_key_checks: 1\ntrx_last_foreign_key_error: NULL\n trx_adaptive_hash_latched: 0\n trx_adaptive_hash_timeout: 10000\n          trx_is_read_only: 0\ntrx_autocommit_non_locking: 0\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id=\"_3-杀掉进程\"> 3 杀掉进程</h2>\n<p>线程ID（trx_mysql_thread_id）</p>\n<div><pre><code>mysql&gt; kill 37;\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "主库异常，从库手动切换为主库方案",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.13%20MySQL%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.13%20MySQL%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",
      "content_html": "<h2 id=\"主库异常-从库手动切换为主库方案\"> 主库异常，从库手动切换为主库方案</h2>\n<p>1.登录从服务器，确认从服务器已经完成所有同步操作：</p>\n<div><pre><code>mysql&gt; stop slave io_thread  \nmysql&gt; show processlist \n直到看到状态都为：xxx has read all relay log 表示更新都执行完毕\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>2.停止从服务器slave服务：</p>\n<div><pre><code>mysql&gt; stop slave\n</code></pre>\n<div><span>1</span><br></div></div><p>3.将从服务器切换为主服务器：</p>\n<div><pre><code>mysql&gt; reset master \n</code></pre>\n<div><span>1</span><br></div></div><p>完成切换</p>\n<p>4.授权内网其他机器有写入等权限(如果没有权限的话)</p>\n<div><pre><code>mysql&gt; SELECT Host,User FROM mysql.user;\nmysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.1.%&#39; IDENTIFIED BY &#39;123456&#39;  WITH GRANT OPTION;\nmysql&gt; FLUSH PRIVILEGES;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>5.修改其他机器hosts或应用内连接</p>\n<div><pre><code># vi /etc/hosts\n192.168.1.106 db-001\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>Mysql常见的几个错误问题及解决方法：</p>\n\n<h2 id=\"mysql-dns反解-skip-name-resolve\"> mysql DNS反解：skip-name-resolve</h2>\n<p>错误日志有类似警告：</p>\n<ol>\n<li>\n<p>120119 16:26:04 [Warning] IP address '192.168.1.10' could not be resolved: Name or service not known</p>\n</li>\n<li>\n<p>120119 16:26:04 [Warning] IP address '192.168.1.14' could not be resolved: Name or service not known</p>\n</li>\n<li>\n<p>120119 16:26:04 [Warning] IP address '192.168.1.17' could not be resolved: Name or service not known</p>\n</li>\n</ol>\n<p>通过show processlist发现大量类似如下的连接：</p>\n<ol>\n<li>\n<p>|592|unauthenticated user|192.168.1.10:35320|NULL|Connect| |login|NULL|</p>\n</li>\n<li>\n<p>|593|unauthenticated user|192.168.1.14:35321|NULL|Connect| |login|NULL|</p>\n</li>\n<li>\n<p>|594|unauthenticated user|192.168.1.17:35322|NULL|Connect| |login|NULL|</p>\n</li>\n</ol>\n<p>skip-name-resolve 参数的作用：不再进行反解析（ip不反解成域名），这样可以加快数据库的反应时间。 修改配置文件添加并需要重启：</p>\n<div><pre><code>[mysqld] \nskip-name-resolve\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"一键安装mysql脚本\"> 一键安装mysql脚本</h2>\n<div><pre><code><span>#!/bin/bash</span>\n\n\n<span># Notes: install mysql5.6 on centos</span>\n<span>#</span>\n<span>mysql_install_dir</span><span>=</span>/opt/mysql                 <span>#程序目录</span>\n<span>mysql_data_dir</span><span>=</span>/opt/mysql/data                           <span>#数据目录</span>\n<span>mysql_6_version</span><span>=</span><span>5.6</span>.36                                    <span>#更改文件名</span>\n<span>dbrootpwd</span><span>=</span>1qazxsw2                                              <span>#mysql密码</span>\n\n<span>Mem</span><span>=</span><span><span>`</span><span>free</span> -m <span>|</span> <span>awk</span> <span>'/Mem:/{print <span>$2</span>}'</span><span>`</span></span>\n<span>Swap</span><span>=</span><span><span>`</span><span>free</span> -m <span>|</span> <span>awk</span> <span>'/Swap:/{print <span>$2</span>}'</span><span>`</span></span>\n\n<span>Install_MySQL</span><span>(</span><span>)</span>\n<span>{</span>\nyum -y <span>install</span> <span>make</span> gcc-c++ cmake bison-devel  ncurses-devel autoconf\n<span>wget</span> http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-<span>${mysql_6_version}</span>.tar.gz\n\n<span>id</span> -u mysql <span>></span>/dev/null <span><span>2</span>></span><span>&amp;1</span>\n<span>[</span> <span>$?</span> -ne <span>0</span> <span>]</span> <span>&amp;&amp;</span> <span>useradd</span> -M -s /sbin/nologin mysql\n\n<span>mkdir</span> -p <span>$mysql_data_dir</span><span>;</span><span>chown</span> mysql.mysql -R <span>$mysql_data_dir</span>\n<span>tar</span> zxf mysql-<span>${mysql_6_version}</span>.tar.gz\n<span>cd</span> mysql-<span>$mysql_6_version</span>\n<span>make</span> clean\n<span>[</span> <span>!</span> -d <span>\"<span>$mysql_install_dir</span>\"</span> <span>]</span> <span>&amp;&amp;</span> <span>mkdir</span> -p <span>$mysql_install_dir</span>\ncmake <span>.</span> -DCMAKE_INSTALL_PREFIX<span>=</span><span>$mysql_install_dir</span> <span>\\</span>\n-DMYSQL_DATADIR<span>=</span><span>$mysql_data_dir</span> <span>\\</span>\n-DSYSCONFDIR<span>=</span>/etc <span>\\</span>\n-DWITH_INNOBASE_STORAGE_ENGINE<span>=</span><span>1</span> <span>\\</span>\n-DWITH_PARTITION_STORAGE_ENGINE<span>=</span><span>1</span> <span>\\</span>\n-DWITH_FEDERATED_STORAGE_ENGINE<span>=</span><span>1</span> <span>\\</span>\n-DWITH_BLACKHOLE_STORAGE_ENGINE<span>=</span><span>1</span> <span>\\</span>\n-DWITH_MYISAM_STORAGE_ENGINE<span>=</span><span>1</span> <span>\\</span>\n-DWITH_INNOBASE_STORAGE_ENGINE<span>=</span><span>1</span> <span>\\</span>\n-DENABLED_LOCAL_INFILE<span>=</span><span>1</span> <span>\\</span>\n-DENABLE_DTRACE<span>=</span><span>0</span> <span>\\</span>\n-DEXTRA_CHARSETS<span>=</span>all <span>\\</span>\n-DDEFAULT_CHARSET<span>=</span>utf8mb4 <span>\\</span>\n-DDEFAULT_COLLATION<span>=</span>utf8mb4_general_ci <span>\\</span>\n-DWITH_EMBEDDED_SERVER<span>=</span><span>1</span> <span>\\</span>\n\n<span>make</span> -j <span><span>`</span><span>grep</span> processor /proc/cpuinfo <span>|</span> <span>wc</span> -l<span>`</span></span>\n<span>make</span> <span>install</span>\n\n<span>if</span> <span>[</span> -d <span>\"<span>$mysql_install_dir</span>/support-files\"</span> <span>]</span><span>;</span><span>then</span>\n    <span>echo</span> <span>\"<span>${CSUCCESS}</span>MySQL install successfully! <span>${CEND}</span>\"</span>\n    <span>cd</span> <span>..</span>\n    <span>rm</span> -rf mysql-<span>$mysql_6_version</span>\n<span>else</span>\n    <span>rm</span> -rf <span>$mysql_install_dir</span>\n    <span>echo</span> <span>\"<span>${CFAILURE}</span>MySQL install failed, Please contact the author! <span>${CEND}</span>\"</span>\n    <span>kill</span> -9 <span>$$</span>\n<span>fi</span>\n\n/bin/cp <span>$mysql_install_dir</span>/support-files/mysql.server /etc/init.d/mysqld\n<span>chmod</span> +x /etc/init.d/mysqld\n<span>chkconfig</span> mysqld on\n<span>cd</span> <span>..</span>\n\n<span># my.cf</span>\n<span>[</span> -d <span>\"/etc/mysql\"</span> <span>]</span> <span>&amp;&amp;</span> /bin/mv /etc/mysql<span>{</span>,_bk<span>}</span>\n<span>cat</span> <span>></span> /etc/my.cnf <span>&lt;&lt;</span> <span>EOF\n[client]\nport = 3306\nsocket = /tmp/mysql.sock\ndefault-character-set = utf8\n\n[mysqld]\nport = 3306\nsocket = /tmp/mysql.sock\n\nbasedir = <span>$mysql_install_dir</span>\ndatadir = <span>$mysql_data_dir</span>\npid-file = <span>$mysql_data_dir</span>/mysql.pid\nuser = mysql\nbind-address = 0.0.0.0\nserver-id = 1\n\ninit-connect = 'SET NAMES utf8mb4'\ncharacter-set-server = utf8mb4\n\nskip-name-resolve\nskip-external-locking\n#skip-networking\nback_log = 300\n\nmax_connections = 1000\nmax_connect_errors = 6000\nopen_files_limit = 65535\ntable_open_cache = 128\nmax_allowed_packet = 4M\nbinlog_cache_size = 1M\nmax_heap_table_size = 8M\ntmp_table_size = 16M\n\nread_buffer_size = 2M\nread_rnd_buffer_size = 8M\nsort_buffer_size = 8M\njoin_buffer_size = 8M\nkey_buffer_size = 4M\nthread_cache_size = 8\nquery_cache_type = 1\nquery_cache_size = 8M\nquery_cache_limit = 2M\nft_min_word_len = 4\nlog_bin = mysql-bin\nbinlog_format = mixed\nexpire_logs_days = 10\nlog_error = <span>$mysql_data_dir</span>/mysql-error.log\nslow_query_log = 1\nlong_query_time = 1\n#slow_query_log_file = <span>$mysql_data_dir</span>/mysql-slow.log\nperformance_schema = 0\nexplicit_defaults_for_timestamp\n\n#lower_case_table_names = 1\ndefault_storage_engine = InnoDB\n#default-storage-engine = MyISAM\ninnodb_file_per_table = 1\ninnodb_open_files = 500\ninnodb_buffer_pool_size = 64M\ninnodb_write_io_threads = 4\ninnodb_read_io_threads = 4\ninnodb_thread_concurrency = 0\ninnodb_purge_threads = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_log_buffer_size = 2M\ninnodb_log_file_size = 32M\ninnodb_log_files_in_group = 3\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\n\nbulk_insert_buffer_size = 8M\nmyisam_sort_buffer_size = 8M\nmyisam_max_sort_file_size = 10G\nmyisam_repair_threads = 1\n\ninteractive_timeout = 28800\nwait_timeout = 28800\n\n[mysqldump]\nquick\nmax_allowed_packet = 16M\n\n[myisamchk]\nkey_buffer_size = 8M\nsort_buffer_size = 8M\nread_buffer = 4M\nwrite_buffer = 4M\n\nEOF</span>\n\n<span>if</span> <span>[</span> <span>$Mem</span> -gt <span>1500</span> -a <span>$Mem</span> -le <span>2500</span> <span>]</span><span>;</span><span>then</span>\n    <span>sed</span> -i <span>'s@^thread_cache_size.*@thread_cache_size = 16@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^query_cache_size.*@query_cache_size = 16M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^myisam_sort_buffer_size.*@myisam_sort_buffer_size = 16M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^key_buffer_size.*@key_buffer_size = 16M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^innodb_buffer_pool_size.*@innodb_buffer_pool_size = 128M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^tmp_table_size.*@tmp_table_size = 32M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^table_open_cache.*@table_open_cache = 256@'</span> /etc/my.cnf\n<span>elif</span> <span>[</span> <span>$Mem</span> -gt <span>2500</span> -a <span>$Mem</span> -le <span>3500</span> <span>]</span><span>;</span><span>then</span>\n    <span>sed</span> -i <span>'s@^thread_cache_size.*@thread_cache_size = 32@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^query_cache_size.*@query_cache_size = 32M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^myisam_sort_buffer_size.*@myisam_sort_buffer_size = 32M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^key_buffer_size.*@key_buffer_size = 64M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^innodb_buffer_pool_size.*@innodb_buffer_pool_size = 512M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^tmp_table_size.*@tmp_table_size = 64M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^table_open_cache.*@table_open_cache = 512@'</span> /etc/my.cnf\n<span>elif</span> <span>[</span> <span>$Mem</span> -gt <span>3500</span> <span>]</span><span>;</span><span>then</span>\n    <span>sed</span> -i <span>'s@^thread_cache_size.*@thread_cache_size = 64@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^query_cache_size.*@query_cache_size = 64M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^myisam_sort_buffer_size.*@myisam_sort_buffer_size = 64M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^key_buffer_size.*@key_buffer_size = 256M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^innodb_buffer_pool_size.*@innodb_buffer_pool_size = 1024M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^tmp_table_size.*@tmp_table_size = 128M@'</span> /etc/my.cnf\n    <span>sed</span> -i <span>'s@^table_open_cache.*@table_open_cache = 1024@'</span> /etc/my.cnf\n<span>fi</span>\n\n<span>$mysql_install_dir</span>/scripts/mysql_install_db --user<span>=</span>mysql --basedir<span>=</span><span>$mysql_install_dir</span> --datadir<span>=</span><span>$mysql_data_dir</span>\n\n<span>chown</span> mysql.mysql -R <span>$mysql_data_dir</span>\n<span>service</span> mysqld start\n<span>[</span> -z <span>\"<span><span>`</span><span>grep</span> ^<span>'export PATH='</span> /etc/profile<span>`</span></span>\"</span> <span>]</span> <span>&amp;&amp;</span> <span>echo</span> <span>\"export PATH=<span>$mysql_install_dir</span>/bin:\\<span>$PATH</span>\"</span> <span>>></span> /etc/profile\n<span>[</span> -n <span>\"<span><span>`</span><span>grep</span> ^<span>'export PATH='</span> /etc/profile<span>`</span></span>\"</span> -a -z <span>\"<span><span>`</span><span>grep</span> $mysql_install_dir /etc/profile<span>`</span></span>\"</span> <span>]</span> <span>&amp;&amp;</span> <span>sed</span> -i <span>\"s@^export PATH=\\(.*\\)@export PATH=<span>$mysql_install_dir</span>/bin:<span title=\"\\1\">\\1</span>@\"</span> /etc/profile\n\n<span>.</span> /etc/profile\n\n<span>$mysql_install_dir</span>/bin/mysql -e <span>\"grant all privileges on *.* to root@'127.0.0.1' identified by <span title=\"\\&quot;\">\\\"</span><span>$dbrootpwd</span><span title=\"\\&quot;\">\\\"</span> with grant option;\"</span>\n<span>$mysql_install_dir</span>/bin/mysql -e <span>\"grant all privileges on *.* to root@'localhost' identified by <span title=\"\\&quot;\">\\\"</span><span>$dbrootpwd</span><span title=\"\\&quot;\">\\\"</span> with grant option;\"</span>\n<span>$mysql_install_dir</span>/bin/mysql -uroot -p<span>$dbrootpwd</span> -e <span>\"delete from mysql.user where Password='';\"</span>\n<span>$mysql_install_dir</span>/bin/mysql -uroot -p<span>$dbrootpwd</span> -e <span>\"delete from mysql.db where User='';\"</span>\n<span>$mysql_install_dir</span>/bin/mysql -uroot -p<span>$dbrootpwd</span> -e <span>\"delete from mysql.proxies_priv where Host!='localhost';\"</span>\n<span>$mysql_install_dir</span>/bin/mysql -uroot -p<span>$dbrootpwd</span> -e <span>\"drop database test;\"</span>\n<span>$mysql_install_dir</span>/bin/mysql -uroot -p<span>$dbrootpwd</span> -e <span>\"reset master;\"</span>\n<span>rm</span> -rf /etc/ld.so.conf.d/<span>{</span>mysql,mariadb,percona<span>}</span>*.conf\n<span>echo</span> <span>\"<span>$mysql_install_dir</span>/lib\"</span> <span>></span> mysql.conf\n/sbin/ldconfig\n<span>service</span> mysqld stop\n<span>}</span>\n\nInstall_MySQL\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "1 数据类型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.2%20%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.2%20%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7/",
      "content_html": "<h2 id=\"_1-数据类型\"> 1 数据类型</h2>\n<h3 id=\"_1-1-值类型\"> 1.1 值类型</h3>\n<h4 id=\"_1-1-1-整型\"> 1.1.1   整型</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">字节</th>\n<th style=\"text-align:center\">范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">tinyint</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">-128~127</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">smallint</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">-32768~32767</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mediumint</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">-8388608~8388607</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">-2<sup>31</sup>~2<sup>31</sup>-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bigint</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-2<sup>63</sup>~2<sup>63</sup>-1</td>\n</tr>\n</tbody>\n</table>\n<p>1、无符号整数（unsigned）：无符号数没有负数，正数部分是有符号的两倍。</p>\n<p>例题</p>\n<div><pre><code>mysql&gt; create table stu(\n    -&gt; id smallint unsigned auto_increment primary key comment &#39;主键&#39;,\n    -&gt; age tinyint unsigned not null comment &#39;年龄&#39;,\n    -&gt; money bigint unsigned comment &#39;存款&#39;\n    -&gt; );\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql&gt; desc stu;\n+-------+----------------------+------+-----+---------+----------------+\n| Field | Type                 | Null | Key | Default | Extra          |\n+-------+----------------------+------+-----+---------+----------------+\n| id    | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |\n| age   | tinyint(3) unsigned  | NO   |     | NULL    |                |\n| money | bigint(20) unsigned  | YES  |     | NULL    |                |\n+-------+----------------------+------+-----+---------+----------------+\n3 rows in set, 3 warnings (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>2、整型支持显示宽度（最小的显示位数）  比如int(5)，如果数值的位数小于5位，前面加上前导0。比如输入12，显示00012；大于5位就不添加前导0。</p>\n<div><pre><code>脚下留心：必须结合zerofill才起作用\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code>mysql&gt; create table stu(\n    -&gt; id int(5),\n    -&gt; age int(5) zerofill   # 填充前导0\n    -&gt; );\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&gt; desc stu;\n+-------+--------------------------+------+-----+---------+-------+\n| Field | Type                     | Null | Key | Default | Extra |\n+-------+--------------------------+------+-----+---------+-------+\n| id    | int(5)                   | YES  |     | NULL    |       |\n| age   | int(5) unsigned zerofill | YES  |     | NULL    |       |\n+-------+--------------------------+------+-----+---------+-------+\n2 rows in set (0.02 sec)\n\nmysql&gt; insert into stu values (1,11);\nmysql&gt; insert into stu values (1111111,2222222);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from stu;\n+---------+---------+\n| id      | age     |\n+---------+---------+\n|       1 |   00011 |\n| 1111111 | 2222222 |    # 注意：age填充了前导0\n+---------+---------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h4 id=\"_1-1-2-浮点型-保存近似值小数\"> 1.1.2   浮点型（保存近似值小数）</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">浮点型</th>\n<th style=\"text-align:center\">占用字节</th>\n<th style=\"text-align:center\">范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">float（单精度）</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">-3.4E+38~3.4E+38</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double（双精度）</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-1.8E+308~1.8E+308</td>\n</tr>\n</tbody>\n</table>\n<p>1、浮点数声明:  float(M,D)   double(M,D)</p>\n<p>M：总位数</p>\n<p>D：小数位数</p>\n<p>例题；</p>\n<div><pre><code>mysql&gt; create table t1(\n    -&gt; num1 float(5,2),   #总位数是5，小数位数是2，那么整数位数是3，\n    -&gt; num2 double(4,1)\n    -&gt; );\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql&gt; insert into t1 values (1.23,1.23); #如果精度超出了允许的范围，会四舍五入\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from t1;\n+------+------+\n| num1 | num2 |\n+------+------+\n| 1.23 |  1.2 |   #如果精度超出了允许的范围，会四舍五入\n+------+------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>2、浮点的精度可能会丢失【精度指的是小数】</p>\n<p><img src=\"images/1536718268668.png\" alt=\"1536718268668\"></p>\n<h4 id=\"_1-1-3-定点数\"> 1.1.3   定点数</h4>\n<p>语法：<code>decimal(M,D)</code></p>\n<div><pre><code>mysql&gt; create table t4(\n   -&gt; num decimal(20,19)\n   -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t4 values (1.1234567890123456789);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; select * from t4;\n+-----------------------+\n| num                   |\n+-----------------------+\n| 1.1234567890123456789 |\n+-----------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code>多学一招：\n1、定点数是变长的，大致每9个数字用4个字节来存储。定点数之所以能保存精确的小数，因为整数和小数是分开存储的。占用的资源比浮点数要多。\n2、定点数和浮点数都支持显示宽度和无符号数。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_1-2-字符型\"> 1.2 字符型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">长度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">char(长度)</td>\n<td style=\"text-align:center\">定长</td>\n<td style=\"text-align:center\">最大255</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">varchar(长度)</td>\n<td style=\"text-align:center\">变长</td>\n<td style=\"text-align:center\">最大65535</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tinytext</td>\n<td style=\"text-align:center\">大段文本</td>\n<td style=\"text-align:center\">2<sup>8</sup>-1=255</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">text</td>\n<td style=\"text-align:center\">大段文本</td>\n<td style=\"text-align:center\">2<sup>16</sup>-1=65535</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mediumtext</td>\n<td style=\"text-align:center\">大段文本</td>\n<td style=\"text-align:center\">2<sup>24</sup>-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">longtext</td>\n<td style=\"text-align:center\">大段文本</td>\n<td style=\"text-align:center\">2<sup>32</sup>-1</td>\n</tr>\n</tbody>\n</table>\n<p>1、char(10)和varchar(10)的区别？</p>\n<p>答：相同点：它们最多只能保存10个字符；</p>\n<div><pre><code>    不同点：char不回收多余的字符，varchar会回收多余的字符。\n\n                    char效率高，浪费空间，varchar节省空间，效率比char低。\n</code></pre>\n</div><p>2、char的最大长度是255。  <img src=\"images/1536719919287.png\" alt=\"1536719919287\"></p>\n<p>3、varchar理论长度是65535字节,实际根本达不到。具体长度与字符编码有关。 <img src=\"images/1536720096028.png\" alt=\"1536720096028\"></p>\n<p><img src=\"images/1536720113031.png\" alt=\"1536720113031\"></p>\n<p>4、一个记录的总长度不能超过65535个字节。</p>\n<p>5、大块文本（text）不计算在总长度中,一个大块文本只占用10个字节来保存文本的地址。 <img src=\"images/1536720763914.png\" alt=\"1536720763914\"></p>\n<h3 id=\"_1-3-枚举-enum\"> 1.3 枚举（enum）</h3>\n<p>1、从集合中选择一个数据（单选）</p>\n<div><pre><code>mysql&gt; create table t8(\n   -&gt; name varchar(20),\n   -&gt; sex enum(&#39;男&#39;,&#39;女&#39;,&#39;保密&#39;)   # 枚举\n   -&gt; )charset=utf8;\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql&gt; insert into t8 values (&#39;tom&#39;,&#39;男&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t8 values (&#39;berry&#39;,&#39;女&#39;);\nQuery OK, 1 row affected (0.05 sec)\n\nmysql&gt; insert into t8 values (&#39;rose&#39;,&#39;未知&#39;);   # 报错，只能插入枚举值\nERROR 1265 (01000): Data truncated for column &#39;sex&#39; at row 1\nmysql&gt; select * from t8;\n+-------+------+\n| name  | sex  |\n+-------+------+\n| tom   | 男     |\n| berry | 女    |\n+-------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>2、MySQL的枚举类型是通过整数来管理的，第一个值是1，第二个值是2，以此类推。</p>\n<p><img src=\"images/1536721403493.png\" alt=\"1536721403493\"></p>\n<div><pre><code>mysql&gt; select sex+0 from t8;\n+-------+\n| sex+0 |\n+-------+\n|     1 |\n|     2 |\n+-------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>3、既然枚举在数据库内部存储的是整数，那么可以直接插入数字</p>\n<div><pre><code>mysql&gt; insert into t8 values (&#39;rose&#39;,3);  # 可以直接插入数字\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from t8;\n+-------+------+\n| name  | sex  |\n+-------+------+\n| tom   | 男     |\n| berry | 女    |\n| rose  | 保密     |\n+-------+------+\n3 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>枚举的优点：</p>\n<p>1、     运行速度快（数字比字符串运算速度快）</p>\n<p>2、     限制数据，保证数据完整性</p>\n<p>3、     节省空间</p>\n<div><pre><code>思考：已知枚举占用2个字节，请问最多有多少个枚举值？\n\n答：2个字节=16位，可以保存数字（0-65535），枚举是从1开始，所以枚举最多可以有65535个枚举值。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_1-4-集合-set\"> 1.4 集合（set）</h3>\n<p>从集合中选择一些数据（多选）</p>\n<div><pre><code>mysql&gt; create table t9(\n   -&gt; hobby set(&#39;爬山&#39;,&#39;读书&#39;,&#39;游泳&#39;,&#39;敲代码&#39;)\n   -&gt; );\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql&gt; insert into t9 values (&#39;爬山&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t9 values (&#39;爬山,游泳&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t9 values (&#39;游泳,爬山&#39;);  # 插入顺序不一样，但是显示的顺序是一样的\nQuery OK, 1 row affected (0.02 sec)\n\nmysql&gt; insert into t9 values (&#39;爬山,游泳,开车&#39;);  # 报错，插入集合中没有的选项会报错\nERROR 1265 (01000): Data truncated for column &#39;hobby&#39; at row 1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>每个集合的元素都分配一个固定的数字，分配的方式从左往右按2的0、1、2、…次方</p>\n<p><img src=\"images/1536723512843.png\" alt=\"1536723512843\"></p>\n<hr>\n<div><pre><code>思考：已知集合占用8个字节，最多可以表示几个选项？\n\n答：8个字节=64位，一个位表示1个选项，最多可以表示64个选项。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_1-5-日期类型\"> 1.5 日期类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">datetime</td>\n<td style=\"text-align:center\">日期时间，占用8个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">日期 占用3个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">time</td>\n<td style=\"text-align:center\">时间 占用3个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timestamp</td>\n<td style=\"text-align:center\">时间戳，占用4个字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">year</td>\n<td style=\"text-align:center\">年份   占用1个字节</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"_1-5-1-datetime\"> 1.5.1 datetime</h4>\n<p>格式：年-月-日 小时:分钟:秒</p>\n<div><pre><code>mysql&gt; create table t10(\n   -&gt; field datetime\n   -&gt; );\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&gt; insert into t10 values (&#39;2025-10-12 10:12:36&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t10 values (&#39;100-10-12 10:12:36&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t10 values (&#39;10000-10-12 10:12:36&#39;);  #datetime保存范围是：1~9999年\nERROR 1292 (22007): Incorrect datetime value: &#39;10000-10-12 10:12:36&#39; for column &#39;field&#39; at row 1\n\nmysql&gt; select * from t10;\n+---------------------+\n| field               |\n+---------------------+\n| 2025-10-12 10:12:36 |\n| 0100-10-12 10:12:36 |\n+---------------------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h4 id=\"_1-5-2-date\"> 1.5.2 date</h4>\n<div><pre><code>mysql&gt; create table t11(\n    -&gt; field date\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t11 values (&#39;2025-10-12&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from t11;\n+------------+\n| field      |\n+------------+\n| 2025-10-12 |\n+------------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h4 id=\"_1-5-3-timestamp\"> 1.5.3 timestamp</h4>\n<p>时间戳</p>\n<p>timestamp类型和 datetime类型在表现上是一样的。他们的区别：\ndatetime是从1到9999，而timestamp从1970年~2038年，2038年01月19日11:14:07秒以后就超出timestamp范围了。</p>\n<div><pre><code>mysql&gt; create table t12(\n    -&gt; field timestamp\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t12 values (&#39;1975-5-5 12:12:12&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t12 values (&#39;1969-5-5 12:12:12&#39;);   # 超出范围\nERROR 1292 (22007): Incorrect datetime value: &#39;1969-5-5 12:12:12&#39; for column &#39;field&#39; at row 1\nmysql&gt; insert into t12 values (&#39;2038-1-19 11:14:07&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t12 values (&#39;2038-1-19 11:14:08&#39;);  # 超出范围\nERROR 1292 (22007): Incorrect datetime value: &#39;2038-1-19 11:14:08&#39; for column &#39;field&#39; at row 1\n\nmysql&gt; select * from t12;\n+---------------------+\n| field               |\n+---------------------+\n| 1975-05-05 12:12:12 |\n| 2038-01-19 11:14:07 |\n+---------------------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h4 id=\"_1-5-4-year\"> 1.5.4 year</h4>\n<p>因为只占用1个字节，最多只能表示255个年份，范围是1901-2155之间的年份</p>\n<div><pre><code>mysql&gt; create table t13(\n    -&gt; field year\n    -&gt; );\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql&gt; insert into t13 values (2025);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t13 values (1900);   # 超出范围\nERROR 1264 (22003): Out of range value for column &#39;field&#39; at row 1\nmysql&gt; insert into t13 values (2155);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t13 values (2156);   # 超出范围\nERROR 1264 (22003): Out of range value for column &#39;field&#39; at row 1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h4 id=\"_1-5-5-time\"> 1.5.5 time</h4>\n<p>表示时间或时间间隔，范围是-838:59:59~838:59:59</p>\n<div><pre><code>mysql&gt; create table t14(\n   -&gt; field time\n   -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t14 values (&#39;12:12:12&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t14 values (&#39;212:12:12&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t14 values (&#39;838:59:59&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t14 values (&#39;839:00:00&#39;);  # 操作范围\nERROR 1292 (22007): Incorrect time value: &#39;839:00:00&#39; for column &#39;field&#39; at row 1\nmysql&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>多学一招：time支持以天的方式插入</p>\n<div><pre><code>mysql&gt; insert into t14 values (&#39;10 10:10:10&#39;);\nQuery OK, 1 row affected (0.02 sec)\n\nmysql&gt; select * from t14;\n+-----------+\n| field     |\n+-----------+\n| 12:12:12  |\n| 212:12:12 |\n| 838:59:59 |\n| 250:10:10 |\n+-----------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id=\"_1-6-boolean\"> 1.6 boolean</h3>\n<p>MySQL不支持boolean类型，true和false在数据库中对应1和0。</p>\n<div><pre><code>mysql&gt; create table t15(\n   -&gt; field boolean\n   -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t15 values (true),(false);   # true和false在数据库中对应1和0\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql&gt; select * from t15;\n+-------+\n| field |\n+-------+\n|     1 |\n|     0 |\n+-------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"_1-7-关于数据类型的思考题\"> 1.7 关于数据类型的思考题</h3>\n<ol>\n<li>\n<p>手机号码一般使用什么数据类型存储?               char</p>\n</li>\n<li>\n<p>电话号码使用什么数据类型                                 varchar</p>\n</li>\n<li>\n<p>性别一般使用什么数据类型存储?                      char      enum</p>\n</li>\n<li>\n<p>学生年龄信息一般使用什么数据类型存储?               tinyint</p>\n</li>\n<li>\n<p>照片信息一般使用什么数据类型存储?                      binary</p>\n</li>\n<li>\n<p>薪水一般使用什么数据类型存储?                             decimal</p>\n</li>\n</ol>\n<p>多学一招：一个字段到底选数字还是字符，取决于有没有计算的可能，如果没有计算的可能即使是数字也要用字符类型，比如手机号、QQ号，…</p>\n<h2 id=\"_2-列属性\"> 2 列属性</h2>\n<h3 id=\"_2-1-是否为空-null-not-null\"> 2.1 是否为空(null | not null)</h3>\n<p>null：可以为空</p>\n<p>not null：不可以为空</p>\n<p>思考题</p>\n<ol>\n<li>\n<p>学员姓名允许为空吗?                  非空</p>\n</li>\n<li>\n<p>家庭地址允许为空吗?                  非空</p>\n</li>\n<li>\n<p>电子邮件信息允许为空吗?           可以为空</p>\n</li>\n<li>\n<p>考试成绩允许为空吗?                  可以为空</p>\n</li>\n</ol>\n<h3 id=\"_2-2-默认值-default\"> 2.2 默认值（default）</h3>\n<p>1、如果一个字段没有插入值，可以默认插入一个指定的值。</p>\n<p>2、default关键字用来插入默认值</p>\n<div><pre><code>mysql&gt; create table t16(\n   -&gt; id int unsigned,\n   -&gt; addr varchar(20) not null default &#39;地址不详&#39;\n   -&gt; );\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql&gt; insert into t16 values (1,&#39;北京&#39;),(2,default);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql&gt; select * from t16;\n+------+----------+\n| id   | addr     |\n+------+----------+\n|    1 | 北京         |\n|    2 | 地址不详        |\n+------+----------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"_2-3-自动增长-auto-increment\"> 2.3 自动增长（auto_increment）</h3>\n<p>1、字段的值从1开始，每次递增1，特点就在字段中的数据不可能重复，适合为记录生成唯一的id</p>\n<p>2、自动增长都是无符号整数。</p>\n<p>3、在MySQL中，auto_increment必须是主键。但是主键不一定是自动增长的。</p>\n<p>4、如果要给自动增长列插入数据，使用null关键字。</p>\n<p>5、自动增长列上的数据被删除，默认情况下此记录的编号不再使用。</p>\n<p><img src=\"images/1536737314504.png\" alt=\"1536737314504\"></p>\n<h3 id=\"_2-4-主键-primary-key\"> 2.4 主键（primary key）</h3>\n<p>主键：唯一标识表中记录的一个或一组列</p>\n<p>主键的特点：不能重复，不能为空</p>\n<p>一个表只能有一个主键，主键可以有多个字段组成。</p>\n<p>主键的作用：</p>\n<p>1、     保证数据完整性</p>\n<p>2、     加快查询速度</p>\n<h4 id=\"_2-4-1-添加主键\"> 2.4.1 添加主键</h4>\n<p>方法一：创建表的时候添加主键</p>\n<div><pre><code>mysql&gt; create table t17(\n    -&gt; id varchar(5) primary key,   # 创建主键\n    -&gt; name varchar(10) not null\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t17 values (&#39;s2531&#39;,&#39;tom&#39;),(&#39;s2532&#39;,&#39;berry&#39;);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql&gt; select * from t17;\n+-------+-------+\n| id    | name  |\n+-------+-------+\n| s2531 | tom   |\n| s2532 | berry |\n+-------+-------+\n2 rows in set (0.00 sec)\n\n# 如果插入主键相同数据会报错\nmysql&gt; insert into t17 values (&#39;s2531&#39;,&#39;tom&#39;);\nERROR 1062 (23000): Duplicate entry &#39;s2531&#39; for key &#39;PRIMARY&#39;\n\n# 主键不能插入null值\nmysql&gt; insert into t17 values (null,&#39;tom&#39;);\nERROR 1048 (23000): Column &#39;id&#39; cannot be null\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>方法二：创建表的时候添加主键</p>\n<div><pre><code>mysql&gt; create table t18(\n    -&gt; id int,\n    -&gt; name varchar(10),\n    -&gt; primary key(id)\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; desc t18;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   | PRI | 0       |       |\n| name  | varchar(10) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>方法三：更改表的时候添加主键</p>\n<div><pre><code>mysql&gt; create table t20(\n    -&gt; id int,\n    -&gt; name varchar(10)\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; alter table t20 add primary key (id);   # 更改表添加主键\nQuery OK, 0 rows affected (0.08 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql&gt; desc t20;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int(11)     | NO   | PRI | 0       |       |\n| name  | varchar(10) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h4 id=\"_2-4-2-创建组合键\"> 2.4.2 创建组合键</h4>\n<p><img src=\"images/1536736467251.png\" alt=\"1536736467251\"></p>\n<h4 id=\"_2-4-3-查看主键\"> 2.4.3 查看主键</h4>\n<p><img src=\"images/1536736627655.png\" alt=\"1536736627655\"></p>\n<h4 id=\"_2-4-4-删除主键\"> 2.4.4 删除主键</h4>\n<p><img src=\"images/1536736700169.png\" alt=\"1536736700169\"></p>\n<h4 id=\"_2-4-5-选择主键的原则\"> 2.4.5 选择主键的原则</h4>\n<p>1、     最少性：尽量选择一个字段做主键</p>\n<p>2、     稳定性：尽量选择更新少的列做主键</p>\n<p>3、     尽量选择数字型的列做主键</p>\n<h4 id=\"_2-4-6-主键思考题\"> 2.4.6 主键思考题</h4>\n<p>1、在主键列输入的数值，允许为空吗?       不可以</p>\n<p>2、 一个表可以有多个主键吗?                     不可以</p>\n<p>3、 在一个学校数据库中，如果一个学校内允许重名的学员，但是一个班级内不允许学员重名，可以组合班级和姓名两个字段一起来作为主键吗？                  可以</p>\n<p>4、 标识列（自动增长列）允许为字符数据类型吗？     不可以</p>\n<p>5、 表中没有合适的列作为主键怎么办？      添加自动增加列</p>\n<p>6、  如果标识列A的初始值为1，增长量为1，则输入三行数据以后，再删除两行，下次再输入数据行的时候，标识值从多少开始？          从4开始</p>\n<h3 id=\"_2-5-唯一键\"> 2.5 唯一键</h3>\n<p>特点：</p>\n<p>1、不能重复，可以为空</p>\n<p>2、一个表可以有多个唯一键</p>\n<p>作用：</p>\n<p>1、     保证数据不能重复。保证数据完整性</p>\n<p>2、     加快数据访问</p>\n<h4 id=\"_2-5-1-添加唯一键\"> 2.5.1 添加唯一键</h4>\n<p>方法一：创建表的时候添加唯一键</p>\n<div><pre><code>mysql&gt; create table t22(\n   -&gt; id int primary key,\n   -&gt; name varchar(20) unique,    #通过unique添加唯一键\n   -&gt; addr varchar(100) unique\n   -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t22 values (1,&#39;tom&#39;,&#39;上海&#39;);\nQuery OK, 1 row affected (0.05 sec)\n\nmysql&gt; insert into t22 values (2,&#39;tom&#39;,&#39;北京&#39;);    #  name重复了，报错\nERROR 1062 (23000): Duplicate entry &#39;tom&#39; for key &#39;name&#39;\nmysql&gt; insert into t22 values (2,&#39;berry&#39;,&#39;上海&#39;);   # addr重复了 \nERROR 1062 (23000): Duplicate entry &#39;上海&#39; for key &#39;addr&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>还有一种方法</p>\n<div><pre><code>mysql&gt; create table t26(\n    -&gt; id int,\n    -&gt; name varchar(20),\n    -&gt; addr varchar(20),\n    -&gt; primary key(id),\n    -&gt; unique (name),     # 添加唯一键\n    -&gt; unique (addr)\n    -&gt; );\nQuery OK, 0 rows affected (0.06 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>方法二：修改表的时候添加唯一键</p>\n<div><pre><code>mysql&gt; create table t23(\n    -&gt; id int primary key,\n    -&gt; name varchar(20)\n    -&gt; );\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&gt; alter table t23 add unique (name);    #  添加一个唯一键\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>一次添加多个唯一键</p>\n<div><pre><code>mysql&gt; create table t24(\n    -&gt; id int primary key,\n    -&gt; name varchar(20),\n    -&gt; addr varchar(20)\n    -&gt; );\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql&gt; alter table t24 add unique(name),add unique(addr);  \nQuery OK, 0 rows affected (0.09 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>添加组合唯一键</p>\n<div><pre><code>mysql&gt; create table t25(\n    -&gt; id int primary key,\n    -&gt; name varchar(20),\n    -&gt; addr varchar(20)\n    -&gt; );\nQuery OK, 0 rows affected (0.09 sec)\n\nmysql&gt; alter table t25 add unique(name,addr);\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h4 id=\"_2-5-2-查看唯一键\"> 2.5.2 查看唯一键</h4>\n<div><pre><code>mysql&gt; show create table t26\\G;\n*************************** 1. row ***************************\n      Table: t26\nCreate Table: CREATE TABLE `t26` (\n `id` int(11) NOT NULL DEFAULT &#39;0&#39;,\n `name` varchar(20) DEFAULT NULL,\n `addr` varchar(20) DEFAULT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `name` (`name`),      # 唯一键\n UNIQUE KEY `addr` (`addr`)       # 唯一键\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n\nmysql&gt; show create table t25\\G;\n*************************** 1. row ***************************\n      Table: t25\nCreate Table: CREATE TABLE `t25` (\n `id` int(11) NOT NULL,\n `name` varchar(20) DEFAULT NULL,\n `addr` varchar(20) DEFAULT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `name` (`name`,`addr`)    # 组合唯一键\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>添加唯一键，给唯一键取名</p>\n<div><pre><code>mysql&gt; create table t27(\n    -&gt; name varchar(20)\n    -&gt; );\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql&gt; alter table t27 add unique UQ_name(name);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql&gt; show create table t27\\G\n*************************** 1. row ***************************\n       Table: t27\nCreate Table: CREATE TABLE `t27` (\n  `name` varchar(20) DEFAULT NULL,\n  UNIQUE KEY `UQ_name` (`name`)    # 唯一键的名字是UQ_name\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h4 id=\"_2-5-3-删除唯一键\"> 2.5.3 删除唯一键</h4>\n<p>通过唯一键的名字来删除唯一键</p>\n<div><pre><code>alter table 表名 drop index 唯一键名称;\n</code></pre>\n<div><span>1</span><br></div></div><p><img src=\"images/1536739081697.png\" alt=\"1536739081697\"></p>\n<p>问题：主键和唯一键的区别？</p>\n<p>1、主键不能重复，不能为空，唯一键不能重复，可以为空</p>\n<p>2、主键只有一个，唯一键可以有多个。</p>\n<h3 id=\"_2-6-备注-comment\"> 2.6 备注（comment）</h3>\n<p>为了程序员之间的相互交流  <img src=\"images/1536739540981.png\" alt=\"1536739540981\"></p>\n<h2 id=\"_3-sql注释\"> 3 SQL注释</h2>\n<p>单行注释：--或#</p>\n<p>多行注释：/*    */</p>\n<p><img src=\"images/1536739661909.png\" alt=\"1536739661909\"></p>\n<h2 id=\"_4-数据完整性介绍\"> 4 数据完整性介绍</h2>\n<p><img src=\"images/1536739894901.png\" alt=\"1536739894901\"></p>\n<h3 id=\"_4-1-保证实体完整性\"> 4.1 保证实体完整性</h3>\n<p>1、     主键约束</p>\n<p>2、     唯一约束</p>\n<p>3、     自动增长列</p>\n<h3 id=\"_4-2-保证域完整性\"> 4.2 保证域完整性</h3>\n<p>1、     数据类型约束</p>\n<p>2、     非空约束</p>\n<p>3、     默认值约束</p>\n<h3 id=\"_4-3-保证引用完整性\"> 4.3 保证引用完整性</h3>\n<p>1、外键约束：从表中的公共字段是主表的外键</p>\n<h4 id=\"_4-3-1-主表和从表\"> 4.3.1 主表和从表</h4>\n<p>两个表建立关系（两个表只要有公共字段就有关系），一个表称为主表，一个表称为从表。</p>\n<p>外键约束可以实现：</p>\n<p>1、     主表中没有的从表中不允许插入</p>\n<p>2、     从表中有的主表中不允许删除</p>\n<p>3、     不能更改主表中的值而导致从表中的记录孤立存在。</p>\n<p>4、     先删除从表，再删除主表</p>\n<h4 id=\"_4-3-2-外键-foreign-key\"> 4.3.2    外键（foreign key）</h4>\n<p>1、     外键：从表中的公共字段，公共字段的名字可以不一样，但是数据类型必须一样。</p>\n<p>2、     外键约束用来保证引用完整性</p>\n<h4 id=\"_4-3-3-添加外键\"> 4.3.3 添加外键</h4>\n<p>方法一：创建表的时候添加外键</p>\n<div><pre><code>create table stuinfo(\n   stuno char(4) primary key,\n   name varchar(10) not null\n);\n\ncreate table stumarks(\n   stuid char(4) primary key,\n   score tinyint unsigned,\n   foreign key (stuid) references stuinfo(stuno)\n);\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>方法二：修改表的时候添加外键</p>\n<div><pre><code>mysql&gt; create table stuinfo(\n    -&gt;  stuno char(4) primary key,\n    -&gt;  name varchar(10) not null\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; create table stumarks(\n    -&gt;  stuid char(4) primary key,\n    -&gt;  score tinyint unsigned\n    -&gt; );\nQuery OK, 0 rows affected (0.06 sec)\n\n语法：  alter table 从表 add foreign key (从表的公共字段) references 主表(公共字段)\n\nmysql&gt; alter table stumarks add foreign key (stuid) references stuinfo(stuno);\nQuery OK, 0 rows affected (0.06 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>脚下留心：要创建外键必须是innodb引擎，myisam不支持外键约束</p>\n<h4 id=\"_4-3-4-查看外键\"> 4.3.4 查看外键</h4>\n<p><img src=\"images/1536742477588.png\" alt=\"1536742477588\"></p>\n<h4 id=\"_4-3-5-删除外键\"> 4.3.5 删除外键</h4>\n<p>通过外键的名字删除外键</p>\n<div><pre><code>alter table 表名 drop foreign key 外键名;\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; alter table stumarks drop foreign key stumarks_ibfk_1;\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_5-外键操作\"> 5 外键操作</h2>\n<p>1、     严格操作（前面讲的是严格操作）</p>\n<p>2、     置空操作（set null）：如果主表记录删除或更新，从表置空</p>\n<p>3、     级联操作（cascade）：如果主表记录删除或更新，从表级联</p>\n<p>一般来说：主表删除的时候，从表置空操作，主表更新的时候，从表级联操作。</p>\n<div><pre><code>foreign key(外键) references 主表(关键字段)[主表删除是的动作][主表更新时候的动作]\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; create table stuinfo(\n    -&gt; stuno char(4) primary key,\n    -&gt; name varchar(10) not null\n    -&gt; );\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&gt; create table stumarks(\n    -&gt; stuid int auto_increment primary key,\n    -&gt; stuno char(4) ,\n    -&gt; score tinyint unsigned,\n    -&gt;  foreign key (stuno) references stuinfo(stuno) on delete set null on update cascade\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into stuinfo values (&#39;s101&#39;,&#39;tom&#39;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into stumarks values (null,&#39;s101&#39;,88);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from stuinfo;\n+-------+------+\n| stuno | name |\n+-------+------+\n| s101  | tom  |\n+-------+------+\n1 row in set (0.00 sec)\n\nmysql&gt; update stuinfo set stuno=&#39;s102&#39; where stuno=&#39;s101&#39;;   # 更新时级联\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql&gt; select * from stumarks;\n+-------+-------+-------+\n| stuid | stuno | score |\n+-------+-------+-------+\n|     1 | s102  |    88 |\n+-------+-------+-------+\n1 row in set (0.00 sec)\n\nmysql&gt; delete from stuinfo where stuno=&#39;s102&#39;;    # 删除时置空\nQuery OK, 1 row affected (0.02 sec)\n\nmysql&gt; select * from stumarks;\n+-------+-------+-------+\n| stuid | stuno | score |\n+-------+-------+-------+\n|     1 | NULL  |    88 |\n+-------+-------+-------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "自动清理",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.14%20MySQL%20bin-log%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86%20/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.14%20MySQL%20bin-log%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86%20/",
      "content_html": "<h2 id=\"自动清理\"> 自动清理</h2>\n<h3 id=\"永久生效\"> 永久生效</h3>\n<p>需要重启mysql才能生效</p>\n<p>修改<code>my.cnf</code>文件</p>\n<p>添加下面一行</p>\n<div><pre><code>expire_logs_days = 7\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"临时生效\"> 临时生效</h3>\n<p>进入mysql，执行，下面的语句</p>\n<div><pre><code>show variables like &#39;%expire_logs_days%&#39;;\nset global expire_logs_days = 7;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"手动清理\"> 手动清理</h2>\n<p>进入mysql，查看binlog日志</p>\n<div><pre><code>show binary logs;\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>删除某个日志文件之前的所有日志文件</strong></p>\n<div><pre><code>purge binary logs to &#39;mysql-bin.000035&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>清理2019-09-09 13:00:00前binlog日志</strong></p>\n<div><pre><code>PURGE MASTER LOGS BEFORE &#39;2019-09-09 13:00:00&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>清除3天前的bin日志</strong></p>\n<div><pre><code>PURGE MASTER LOGS BEFORE DATE_SUB(NOW( ), INTERVAL 3 DAY); \n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>注意，不要轻易手动去删除binlog，会导致binlog.index和真实存在的binlog不匹配，而导致expire_logs_day失效</p>\n</blockquote>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "1  数据库基本概念",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.3%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.3%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/",
      "content_html": "<h2 id=\"_1-数据库基本概念\"> 1  数据库基本概念</h2>\n<p>1、关系：两个表的公共字段</p>\n<p>2、行：也称记录，也称实体</p>\n<p>3、列：也称字段，也称属性</p>\n<div><pre><code>就表结构而言，表分为行和列；\n就表数据而言，分为记录和字段；\n就面向对象而言，一个记录就是一个实体，一个字段就是一个属性。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>4、数据冗余：相同的数据存储在不同的地方</p>\n<div><pre><code>脚下留心：\n1、冗余只能减少，不能杜绝。\n2、减少冗余的方法是分表\n3、为减少数据查找的麻烦，允许数据有一定的冗余\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>5、数据完整性：正确性+准确性=数据完整性</p>\n<div><pre><code>正确性：数据类型正确\n准确性：数据范围要准确\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>思考：学生的年龄是整型，输入1000岁，正确性和准确性如何？</p>\n<p>答：正确的，但不准确的</p>\n<p>思考：年龄是整形的，收入了字符串，正确性和准确性如何？</p>\n<p>答：不正确</p>\n<h2 id=\"_2-实体和实体之间的关系\"> 2  实体和实体之间的关系</h2>\n<p>1、一对一</p>\n<p>2、一对多 （多对一）</p>\n<p>3、多对多 <img src=\"images/1536975724695.png\" alt=\"1536975724695\"></p>\n<h3 id=\"_2-1-一对多-1-n\"> 2.1 一对多 1：N</h3>\n<p>1、主表中的一条记录对应从表中的多条记录。</p>\n<p>2、一对多和多对一是一样的</p>\n<p><img src=\"images/1536976096582.png\" alt=\"1536976096582\"></p>\n<hr>\n<p>如何实现一对多？</p>\n<p>答：主键和非主键建关系</p>\n<p>问题：说出几个一对多的关系？</p>\n<p>答：班级表和学生表、      班主表和学生表</p>\n<h3 id=\"_2-2-一对一-1-1\"> 2.2 一对一（1:1）</h3>\n<p>1、主表中的一条记录对应从表中的一条记录</p>\n<p><img src=\"images/1536976513236.png\" alt=\"1536976513236\"></p>\n<p>如何实现一对一？</p>\n<p>主键和主键建关系就能实现一对一。</p>\n<div><pre><code>思考：一对一两个表完全可以用一个表实现，为什么还要分成两个表？\n\n答：在字段数量很多情况下，数据量也就很大，每次查询都需要检索大量数据，这样效率低下。我们可以将所有字段分成两个部分，“常用字段”和“不常用字段”，这样对大部分查询者来说效率提高了。【表的垂直分割】\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_2-3-多对多-n-m\"> 2.3 多对多（N：M）</h3>\n<p>主表中的一条记录对应从表中的多条记录，从表中的一条记录对应主表中的多条记录</p>\n<p>班级和讲师的关系</p>\n<p><img src=\"images/1536977577667.png\" alt=\"1536977577667\"></p>\n<p>如何实现多对多？</p>\n<p>答：建立第三张表来保存关系。</p>\n<p>问题：说出几个多对多的关系？</p>\n<p>1、科目表和学生表的关系\t\t2、商品表和订单表         3、游戏目录表和玩家表</p>\n<h2 id=\"_3-数据库设计的步骤\"> 3 数据库设计的步骤</h2>\n<p><img src=\"images/1536977906540.png\" alt=\"1536977906540\"></p>\n<h3 id=\"_3-1-数据库设计具体步骤\"> 3.1 数据库设计具体步骤</h3>\n<p>1、     收集信息：与该系统有关人员进行交流、坐谈，充分理解数据库需要完成的任务</p>\n<p>2、     标识对象（实体－Entity）标识数据库要管理的关键对象或实体</p>\n<p>3、     标识每个实体的属性（Attribute）</p>\n<p>4、     标识对象之间的关系（Relationship）</p>\n<p>5、     将模型转换成数据库</p>\n<p>6、     规范化</p>\n<h3 id=\"_3-2-绘制e-r图\"> 3.2 绘制E-R图</h3>\n<p>E-R（Entity－Relationship）实体关系图</p>\n<p>E-R图的语法</p>\n<p><img src=\"images/1536978470142.png\" alt=\"1536978470142\"></p>\n<p>绘制E-R图</p>\n<p><img src=\"images/1536978565499.png\" alt=\"1536978565499\"></p>\n<h3 id=\"_3-3-将e-r图转成表\"> 3.3 将E-R图转成表</h3>\n<p>1、     实体转成表，属性转成字段</p>\n<p>2、     如果没有合适的字段做主键，给表添加一个自动增长列做主键。</p>\n<h3 id=\"_3-4-例题\"> 3.4 例题</h3>\n<p>1、项目需求</p>\n<div><pre><code>BBS论坛的基本功能：\n用户注册和登录，后台数据库需要存放用户的注册信息和在线状态信息；\n用户发贴，后台数据库需要存放贴子相关信息，如贴子内容、标题等；\n用户可以对发帖进行回复；\n论坛版块管理：后台数据库需要存放各个版块信息，如版主、版块名称、贴子数等；\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>2、标识对象</p>\n<div><pre><code>参与的对象有：用户、发的帖子、跟帖、板块\n</code></pre>\n</div><p>3、标识对象的属性</p>\n<p><img src=\"images/1536978271446.png\" alt=\"1536978271446\"></p>\n<p>4、建立关系，绘制E-R图</p>\n<p><img src=\"images/1536978734804.png\" alt=\"1536978734804\"></p>\n<p>5、将E-R图转出表结构</p>\n<h2 id=\"_4-数据规范化\"> 4 数据规范化</h2>\n<p>Codd博士定义了6个范式来规范化数据库，范式由小到大来约束，范式越高冗余越小，但表的个数也越多。实验证明，三范式是性价比最高的。</p>\n<h3 id=\"_4-1-第一范式-确保每列原子性\"> 4.1 第一范式：确保每列原子性</h3>\n<p>第一范式确保每个字段不可再分</p>\n<p><img src=\"images/1536979522448.png\" alt=\"1536979522448\"></p>\n<p>思考：如下表设计是否合理？</p>\n<p><img src=\"images/1536979672041.png\" alt=\"1536979672041\"></p>\n<p>不合理。不满足第一范式，上课时间可以再分</p>\n<p><img src=\"images/1536979718323.png\" alt=\"1536979718323\"></p>\n<p>思考：地址包含省、市、县、地区是否需要拆分？</p>\n<p>答：如果仅仅起地址的作用，不需要统计，可以不拆分；如果有按地区统计的功能需要拆分。</p>\n<p>在实际项目中，建议拆分。</p>\n<h3 id=\"_4-2-第二范式-非键字段必须依赖于键字段\"> 4.2 第二范式：非键字段必须依赖于键字段</h3>\n<p>一个表只能描述一件事</p>\n<p><img src=\"images/1536980482113.png\" alt=\"1536980482113\"></p>\n<p>思考：如下表设计是否合理？</p>\n<p><img src=\"images/1536980574792.png\" alt=\"1536980574792\"></p>\n<h3 id=\"_4-3-第三范式-消除传递依赖\"> 4.3 第三范式：消除传递依赖</h3>\n<p>在所有的非键字段中，不能有传递依赖</p>\n<p><img src=\"images/1536981861980.png\" alt=\"1536981861980\"></p>\n<p>下列设计是否满足第三范式？</p>\n<p><img src=\"images/1536982061259.png\" alt=\"1536982061259\"></p>\n<p>不满足，因为语文和数学确定了，总分就确定了。</p>\n<div><pre><code>多学一招：上面的设计不满足第三范式，但是高考分数表就是这样设计的，为什么？\n\n答：高考分数峰值访问量非常大，这时候就是性能更重要。当性能和规范化冲突的时候，我们首选性能。这就是“反三范式”。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_4-4-数据库设计的例题\"> 4.4 数据库设计的例题</h3>\n<p>1、需求</p>\n<div><pre><code>公司承担多个工程项目，每一项工程有：工程号、工程名称、施工人员等\n公司有多名职工，每一名职工有：职工号、姓名、性别、职务（工程师、技术员）等\n公司按照工时和小时工资率支付工资，小时工资率由职工的职务决定（例如，技术员的小时工资率与工程师不同）\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>2、工资表</p>\n<p><img src=\"images/1536982976983.png\" alt=\"1536982976983\"></p>\n<p>3、将工资表转成数据库表</p>\n<p><img src=\"images/1536983011535.png\" alt=\"1536983011535\"></p>\n<p>4、这个表存在的问题</p>\n<div><pre><code>A：新人入职需要虚拟一个项目\n\nB：职务更改，小时工资率可能会忘记更改，造成数据不完整\n\nC：有人离职，删除记录后，工程也没有了\n</code></pre>\n</div><p>5、规范化表</p>\n<div><pre><code>第一步：这个表满足第一范式\n\n第二步：这个表不是描述了一件事情\n</code></pre>\n</div><p><img src=\"images/1536983332419.png\" alt=\"1536983332419\"></p>\n<div><pre><code>第三步：是否满足第三范式\n</code></pre>\n</div><p><img src=\"images/1536983422611.png\" alt=\"1536983422611\"></p>\n<p>更改如下：</p>\n<p><img src=\"images/1536983406042.png\" alt=\"1536983406042\"></p>\n<h2 id=\"_5-查询语句\"> 5 查询语句</h2>\n<div><pre><code>语法：select [选项] 列名 [from 表名] [where 条件]  [group by 分组] [order by 排序][having 条件] [limit 限制]\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_5-1-字段表达式\"> 5.1 字段表达式</h3>\n<div><pre><code>mysql&gt; select &#39;锄禾日当午&#39;;\n+------------+\n| 锄禾日当午          |\n+------------+\n| 锄禾日当午          |\n+------------+\n\nmysql&gt; select 10*10;\n+-------+\n| 10*10 |\n+-------+\n|   100 |\n+-------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>通过as给字段取别名</p>\n<div><pre><code>mysql&gt;  select &#39;锄禾日当午&#39; as content;\n+------------+\n| content    |\n+------------+\n| 锄禾日当午          |\n+------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select 10*10 as result;\n+--------+\n| result |\n+--------+\n|    100 |\n+--------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>多学一招：as可以省略</p>\n<div><pre><code>mysql&gt; select 10*10  result;\n+--------+\n| result |\n+--------+\n|    100 |\n+--------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_5-2-from子句\"> 5.2 from子句</h3>\n<p>from：来自，from后面跟的是数据源。数据源可以有多个。返回笛卡尔积。</p>\n<p>插入测试表</p>\n<div><pre><code>mysql&gt; create table t1(\n    -&gt; id int,\n    -&gt; name varchar(10)\n    -&gt; );\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql&gt; create table t2(\n    -&gt; field1 varchar(10),\n    -&gt; field2 varchar(10)\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t1 values (1,&#39;tom&#39;),(2,&#39;berry&#39;);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql&gt; insert into t2 values (&#39;333&#39;,&#39;333&#39;),(&#39;444&#39;,&#39;444&#39;);\nQuery OK, 2 rows affected (0.02 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>测试多个数据源</p>\n<div><pre><code>mysql&gt; select * from t1,t2;              # 返回笛卡尔积\n+------+-------+--------+--------+\n| id   | name  | field1 | field2 |\n+------+-------+--------+--------+\n|    1 | tom   | 333    | 333    |\n|    2 | berry | 333    | 333    |\n|    1 | tom   | 444    | 444    |\n|    2 | berry | 444    | 444    |\n+------+-------+--------+--------+\n4 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"_5-3-dual表\"> 5.3 dual表</h3>\n<p>dual表是一个伪表。在有些特定情况下，没有具体的表的参与，但是为了保证select语句的完整又必须要一个表名，这时候就使用伪表。</p>\n<div><pre><code>mysql&gt; select 10*10 as result from dual;  #dual表是用来保证select语句的完整性。\n+--------+\n| result |\n+--------+\n|    100 |\n+--------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_5-4-where子句\"> 5.4 where子句</h3>\n<p>where后面跟的是条件，在数据源中进行筛选。返回条件为真记录</p>\n<p>MySQL支持的运算符</p>\n<ol>\n<li><code>&gt;</code>\t大于</li>\n<li><code>&lt;</code>小于</li>\n<li><code>&gt;=</code></li>\n<li><code>&lt;=</code></li>\n<li><code>=</code></li>\n<li><code>!=</code></li>\n<li>and    与</li>\n<li>or      或</li>\n<li>not   非</li>\n</ol>\n<div><pre><code>mysql&gt; select * from stu where stusex=&#39;男&#39;;\t\t# 查找性别是男的记录\nmysql&gt; select * from stu where stuage&gt;=20;\t\t# 查找年龄不低于20的记录\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>思考：如下代码输出什么</p>\n<div><pre><code>select * from stu where 1      # 返回所有数据库\nselect * from stu where 0\t\t#返回空记录\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>思考：如何查找北京和上海的学生</p>\n<div><pre><code>mysql&gt; select * from stu where stuaddress=&#39;上海&#39; or stuaddress=&#39;北京&#39;;\n+--------+---------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+---------+--------+--------+---------+------------+------+------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |\n| s25302 | 李文才       | 男       |     31 |       3 | 上海          |   77 |   76 |\n| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |   55 |   82 |\n| s25320 | Tom     | 男       |     24 |       8 | 北京           |   65 |   67 |\n+--------+---------+--------+--------+---------+------------+------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"_5-5-in-not-in\"> 5.5  in | not in</h3>\n<p>上面的查询上海和北京的学生的SQL可以通过in语句来实现</p>\n<div><pre><code>mysql&gt; select * from stu where stuaddress in (&#39;北京&#39;,&#39;上海&#39;);\n</code></pre>\n<div><span>1</span><br></div></div><p>练习：</p>\n<p>1、查找学号是s25301,s25302,s25303的学生</p>\n<div><pre><code>mysql&gt; select * from stu where stuno in (&#39;s25301&#39;,&#39;s25302&#39;,&#39;s25303&#39;);\n</code></pre>\n<div><span>1</span><br></div></div><p>2、查找年龄是18,19,20的学生</p>\n<div><pre><code>mysql&gt; select * from stu where stuage in(18,19,20);\n</code></pre>\n<div><span>1</span><br></div></div><p>3、查找不是北京和上海的学生</p>\n<div><pre><code>mysql&gt; select * from stu where stuaddress not in (&#39;北京&#39;,&#39;上海&#39;);\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_5-6-between-and-not-between-and\"> 5.6  between…and|not between…and</h3>\n<p>查找某个范围的记录</p>\n<p>1、查找年龄在18~20之间的学生</p>\n<div><pre><code>mysql&gt; select * from stu where stuage&gt;=18 and stuage&lt;=20;   # 方法一\n\nmysql&gt; select * from stu where stuage between 18 and 20;   # 方法二\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>2、查找年龄不在18~20之间的学生</p>\n<div><pre><code>mysql&gt; select * from stu where stuage&lt;18 or stuage&gt;20;\t\t#方法一\n\nmysql&gt; select * from stu where not (stuage&gt;=18 and stuage&lt;=20);\n\nmysql&gt; select * from stu where stuage not between 18 and 20;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_5-7-is-null-is-not-null\"> 5.7 is null | is not null</h3>\n<p>脚下留心：查询一个为空的字段不能用等于，必须用is null</p>\n<p>查找缺考的学生</p>\n<div><pre><code>mysql&gt; select * from stu where ch is null or math is null; # 查找缺考的人\n+--------+----------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+----------+--------+--------+---------+------------+------+------+\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |   80 | NULL |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | NULL |   74 |\n+--------+----------+--------+--------+---------+------------+------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>查找参加考试的学生</p>\n<div><pre><code>mysql&gt; select * from stu where ch is not null and math is not null;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_5-8-聚合函数\"> 5.8 聚合函数</h3>\n<ol>\n<li>\n<p>sum()  \t   求和</p>\n</li>\n<li>\n<p>avg()          求平均值</p>\n</li>\n<li>\n<p>max()        求最大值</p>\n</li>\n<li>\n<p>min()          求最小值</p>\n</li>\n<li>\n<p>count()      求记录数</p>\n</li>\n</ol>\n<div><pre><code>#求语文总分、语文平均分、语文最高分、语文最低分、总人数\n\nmysql&gt; select sum(ch) &#39;语文总分&#39;,avg(ch) &#39;语文平均分&#39;, max(ch) &#39;语文最高分&#39;,min(ch) &#39;语文最低分&#39;,count(*) &#39;总人数&#39; from stu;\n+----------+------------+------------+------------+--------+\n| 语文总分        | 语文平均分          | 语文最高分          | 语文最低分          | 总人数       |\n\n+----------+------------+------------+------------+--------+\n|      597 |    74.6250 |         88 |         55 |      9 |\n+----------+------------+------------+------------+--------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"_5-9-通配符\"> 5.9 通配符</h3>\n<ol>\n<li>\n<p>_  [下划线]   表示任意一个字符</p>\n</li>\n<li>\n<p>%  表示任意字符</p>\n</li>\n</ol>\n<p>练习</p>\n<p>1、满足“T_m”的有（A、C）</p>\n<p>A：Tom         B：Toom       C：Tam         D：Tm     E：Tmo</p>\n<p>2、满足“T_m_”的有（B、C  ）</p>\n<p>A:Tmom   B:Tmmm  C:T1m2    D:Tmm     E:Tm</p>\n<p>3、满足“张%”的是（A、B、C、D）</p>\n<p>A:张三     B：张三丰     C：张牙舞爪      D：张      E：小张</p>\n<p>4、满足“%诺基亚%”的是（A、B、C、D）</p>\n<p>A：诺基亚2100   B：2100诺基亚   C：把我的诺基亚拿过来   D：诺基亚</p>\n<h3 id=\"_5-10-模糊查询-like\"> 5.10 模糊查询（like）</h3>\n<div><pre><code># 查找姓张的同学\nmysql&gt; select * from stu where stuname like &#39;张%&#39;;\n+--------+---------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+---------+--------+--------+---------+------------+------+------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |\n+--------+---------+--------+--------+---------+------------+------+------+\n1 row in set (0.00 sec)\n#例题\nmysql&gt; select * from stu where stuname like &#39;T_m&#39;;\n+--------+---------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+---------+--------+--------+---------+------------+------+------+\n| s25320 | Tom     | 男       |     24 |       8 | 北京           |   65 |   67 |\n+--------+---------+--------+--------+---------+------------+------+------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id=\"_5-11-order-by排序\"> 5.11 order by排序</h3>\n<p>asc：升序【默认】</p>\n<p>desc：降序</p>\n<div><pre><code>mysql&gt; select * from stu order by ch desc;\t\t# 语文成绩降序排列\n\nmysql&gt; select * from stu order by math asc;     # 数学成绩升序排列\n\nmysql&gt; select * from stu order by math;       # 默认升序排列\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>多列排序</p>\n<div><pre><code>#年龄升序,成绩降序\nmysql&gt; select *,(ch+math) as &#39;总分&#39; from stu order by stuage asc,(ch+math) desc;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>思考如下代码表示什么含义</p>\n<div><pre><code>select * from stu order by stuage desc,ch desc;     #年龄降序，语文降序\nselect * from stu order by stuage desc,ch asc;\t\t#年龄降序，语文升序\nselect * from stu order by stuage,ch desc;          #年龄升序、语文降序\nselect * from stu order by stuage,ch; \t\t\t\t#年龄升序、语文升序\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_5-12-group-by-【分组查询】\"> 5.12 group by 【分组查询】</h3>\n<p>将查询的结果分组，分组查询目的在于统计数据。</p>\n<div><pre><code># 按性别分组，显示每组的平均年龄\nmysql&gt; select avg(stuage) as &#39;年龄&#39;,stusex from stu group by stusex;\n+---------+--------+\n| 年龄        | stusex |\n+---------+--------+\n| 22.7500 | 女      |\n| 25.4000 | 男       |\n+---------+--------+\n2 rows in set (0.00 sec)\n# 按地区分组，每个地区的平均年龄\nmysql&gt; select avg(stuage) as &#39;年龄&#39;,stuaddress from stu group by stuaddress;\n+---------+------------+\n| 年龄        | stuaddress |\n+---------+------------+\n| 31.0000 | 上海          |\n| 21.3333 | 北京           |\n| 27.0000 | 天津           |\n| 23.0000 | 河北          |\n| 23.0000 | 河南           |\n+---------+------------+\n5 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><div><pre><code>脚下留心：\n1、如果是分组查询，查询字段必须是分组字段和聚合函数。\n2、查询字段是普通字段，只取第一个值\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src=\"images/1536999666442.png\" alt=\"1536999666442\"></p>\n<p>通过group_concat()函数将同一组的值连接起来显示</p>\n<div><pre><code>mysql&gt; select group_concat(stuname),stusex from stu group by stusex;\n+-------------------------------------+--------+\n| group_concat(stuname)               | stusex |\n+-------------------------------------+--------+\n| 李斯文,诸葛丽丽,梅超风,Tabm                           | 女      |\n| 张秋丽,李文才,欧阳俊雄,争青小子,Tom                          | 男       |\n+-------------------------------------+--------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code>多学一招：【了解】\n1、分组后的结果默认会按升序排列显示\n2、也是可以使用desc实现分组后的降序\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src=\"images/1536999889281.png\" alt=\"1536999889281\"></p>\n<p><img src=\"images/1536999987356.png\" alt=\"1536999987356\"></p>\n<p>多列分组</p>\n<div><pre><code>mysql&gt; select stuaddress,stusex,avg(stuage) from stu group by stuaddress,stusex;\n+------------+--------+-------------+\n| stuaddress | stusex | avg(stuage) |\n+------------+--------+-------------+\n| 上海          | 男       |     31.0000 |\n| 北京           | 女      |     22.0000 |\n| 北京           | 男       |     21.0000 |\n| 天津           | 男       |     27.0000 |\n| 河北          | 女      |     23.0000 |\n| 河南           | 女      |     23.0000 |\n+------------+--------+-------------+\n6 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id=\"_5-13-having条件\"> 5.13 having条件</h3>\n<div><pre><code>思考：数据库中的表是一个二维表，返回的结果是一张二维表，既然能在数据库的二维表中进行查询，能否在结果集的二维表上继续进行查询？\n\n答：可以，having条件就是在结果集上继续进行筛选。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; select * from stu where stusex=&#39;男&#39;;   # 从数据库中查找\n+--------+----------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+----------+--------+--------+---------+------------+------+------+\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |   80 | NULL |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          |   77 |   76 |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | NULL |   74 |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |\n| s25320 | Tom      | 男       |     24 |       8 | 北京           |   65 |   67 |\n+--------+----------+--------+--------+---------+------------+------+------+\n5 rows in set (0.00 sec)\n\nmysql&gt; select * from stu having stusex=&#39;男&#39;;   # 从结果集中查找\n+--------+----------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+----------+--------+--------+---------+------------+------+------+\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |   80 | NULL |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          |   77 |   76 |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | NULL |   74 |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |\n| s25320 | Tom      | 男       |     24 |       8 | 北京           |   65 |   67 |\n+--------+----------+--------+--------+---------+------------+------+------+\n5 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>思考如下语句是否正确 <img src=\"images/1537001246956.png\" alt=\"1537001246956\"></p>\n<p><img src=\"images/1537001432304.png\" alt=\"1537001432304\"></p>\n<p>having和where的区别：</p>\n<p>where是对原始数据进行筛选，having是对记录集进行筛选。</p>\n<h3 id=\"_5-14-limit\"> 5.14 limit</h3>\n<p>语法：limit 起始位置，显示长度</p>\n<div><pre><code>mysql&gt; select * from stu limit 0,2;    # 从0的位置开始，取两条数据\n+--------+---------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+---------+--------+--------+---------+------------+------+------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |\n| s25302 | 李文才       | 男       |     31 |       3 | 上海          |   77 |   76 |\n+--------+---------+--------+--------+---------+------------+------+------+\n2 rows in set (0.00 sec)\n \nmysql&gt; select * from stu limit 2,2;    # 从2的位置开始，取两条数据\n+--------+----------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+----------+--------+--------+---------+------------+------+------+\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |   55 |   82 |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | NULL |   74 |\n+--------+----------+--------+--------+---------+------------+------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>起始位置可以省略，默认是从0开始</p>\n<div><pre><code>mysql&gt; select * from stu limit 2;\n+--------+---------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+---------+--------+--------+---------+------------+------+------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |\n| s25302 | 李文才       | 男       |     31 |       3 | 上海          |   77 |   76 |\n+--------+---------+--------+--------+---------+------------+------+------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>例题：找出班级总分前三名</p>\n<div><pre><code>mysql&gt; select *,(ch+math) total from stu order by total desc limit 0,3;\n+--------+----------+--------+--------+---------+------------+------+------+-------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math | total |\n+--------+----------+--------+--------+---------+------------+------+------+-------+\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |   178 |\n| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |   165 |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          |   77 |   76 |   153 |\n+--------+----------+--------+--------+---------+------------+------+------+-------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>多学一招：limit在update和delete语句中也是可以使用的。</p>\n<h3 id=\"_5-15-查询语句中的选项\"> 5.15 查询语句中的选项</h3>\n<p>查询语句中的选项有两个：</p>\n<p>1、     all：显示所有数据 【默认】</p>\n<p>2、     distinct：去除结果集中重复的数据</p>\n<div><pre><code>mysql&gt; select distinct stuaddress from stu;\n+------------+\n| stuaddress |\n+------------+\n| 上海          |\n| 天津           |\n| 河南           |\n| 河北          |\n| 北京           |\n+------------+\n5 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"_6-union-联合\"> 6 union（联合）</h2>\n<p>插入测试数据</p>\n<div><pre><code>mysql&gt; create table GO1(\n    -&gt; id int primary key,\n    -&gt; name varchar(20));\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql&gt; insert into Go1 values (1,&#39;李白&#39;),(2,&#39;张秋丽&#39;);\nQuery OK, 2 rows affected (0.02 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"_6-1-union的使用\"> 6.1 union的使用</h3>\n<p>作用：将多个select语句结果集纵向联合起来</p>\n<div><pre><code>select 语句 union [选项] select 语句 union [选项] select 语句;\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code>mysql&gt; select stuno,stuname from stu union select id,name from Go1;\n+--------+----------+\n| stuno  | stuname  |\n+--------+----------+\n| s25301 | 张秋丽         |\n| s25302 | 李文才        |\n| s25303 | 李斯文        |\n| s25304 | 欧阳俊雄        |\n| s25305 | 诸葛丽丽         |\n| s25318 | 争青小子        |\n| s25319 | 梅超风        |\n| s25320 | Tom      |\n| s25321 | Tabm     |\n| 1      | 李白         |\n| 2      | 张秋丽         |\n+--------+----------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>例题：查询上海的男生和北京的女生</p>\n<div><pre><code>mysql&gt; select stuname,stuaddress,stusex from stu where (stuaddress=&#39;上海&#39; and stusex=&#39;男&#39;) or (stuaddress=&#39;北京&#39; and stusex=&#39;女&#39;);\n+---------+------------+--------+\n| stuname | stuaddress | stusex |\n+---------+------------+--------+\n| 张秋丽        | 上海          | 男       |\n| 梅超风       | 北京           | 女      |\n+---------+------------+--------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select stuname,stuaddress,stusex from stu where stuaddress=&#39;上海&#39; and stusex=&#39;男&#39; union select stuname,stuaddress,stusex from stu where stuaddress=&#39;北京&#39; and stusex=&#39;女&#39;;\n+---------+------------+--------+\n| stuname | stuaddress | stusex |\n+---------+------------+--------+\n| 张秋丽        | 上海          | 男       |\n| 梅超风       | 北京           | 女      |\n+---------+------------+--------+\n2 rows in set (0.02 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"_6-2-union的选项\"> 6.2 union的选项</h3>\n<p>union的选项有两个</p>\n<p>1、     all：显示所有数据</p>\n<p>2、     distinct：去除重复的数据【默认】</p>\n<div><pre><code>mysql&gt; select name from go1 union select stuname from stu;\n+----------+\n| name     |\n+----------+\n| 李白         |\n| 张秋丽         |\n| 李文才        |\n| 李斯文        |\n| 欧阳俊雄        |\n| 诸葛丽丽         |\n| 争青小子        |\n| 梅超风        |\n| Tom      |\n| Tabm     |\n+----------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>默认是去重复的</p>\n<div><pre><code>mysql&gt; select name from go1 union all select stuname from stu;  # all不去重复记录\n+----------+\n| name     |\n+----------+\n| 李白         |\n| 张秋丽         |\n| 张秋丽         |\n| 李文才        |\n| 李斯文        |\n| 欧阳俊雄        |\n| 诸葛丽丽         |\n| 争青小子        |\n| 梅超风        |\n| Tom      |\n| Tabm     |\n+----------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id=\"_6-3-union的注意事项\"> 6.3 union的注意事项</h3>\n<p>1、     union两边的select语句的字段个数必须一致</p>\n<p>2、     union两边的select语句的字段名可以不一致，最终按第一个select语句的字段名。</p>\n<p>3、     union两边的select语句中的数据类型可以不一致。</p>\n<h2 id=\"_7-多表查询分类\"> 7 多表查询分类</h2>\n<p>将多个表的数据横向的联合起来。\n1、\t内连接\n2、\t外连接\na)\t左外连接\nb)\t右外连接\n3、\t交叉连接\n4、\t自然连接</p>\n<h3 id=\"_7-1-内连接【inner-join】\"> 7.1 内连接【inner join】</h3>\n<div><pre><code>语法一：select 列名 from 表1 inner join 表2 on 表1.公共字段=表2.公共字段\n\n语法二：select 列名 from 表1,表2 where 表1.公共字段=表2.公共字段\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>例题</p>\n<div><pre><code>方法一：\nmysql&gt; select stuname,stusex,writtenexam,labexam from stuinfo inner join stumarks on stuinfo.stuno=stumarks.stuno;\n+----------+--------+-------------+---------+\n| stuname  | stusex | writtenexam | labexam |\n+----------+--------+-------------+---------+\n| 李斯文        | 女      |          80 |      58 |\n| 李文才        | 男       |          50 |      90 |\n| 欧阳俊雄        | 男       |          65 |      50 |\n| 张秋丽         | 男       |          77 |      82 |\n| 争青小子        | 男       |          56 |      48 |\n+----------+--------+-------------+---------+\n\n方法二：\nmysql&gt; select stuinfo.stuno,stuname,stusex,writtenexam,labexam from stuinfo,stumarks where stuinfo.stuno=stumarks.stuno;\n+--------+----------+--------+-------------+---------+\n| stuno  | stuname  | stusex | writtenexam | labexam |\n+--------+----------+--------+-------------+---------+\n| s25303 | 李斯文        | 女      |          80 |      58 |\n| s25302 | 李文才        | 男       |          50 |      90 |\n| s25304 | 欧阳俊雄        | 男       |          65 |      50 |\n| s25301 | 张秋丽         | 男       |          77 |      82 |\n| s25318 | 争青小子        | 男       |          56 |      48 |\n+--------+----------+--------+-------------+---------+\n\n可以给表取别名\nmysql&gt; select i.stuno,stuname,stusex,writtenexam,labexam from stuinfo i,stumarks s where i.stuno=s.stuno;\n+--------+----------+--------+-------------+---------+\n| stuno  | stuname  | stusex | writtenexam | labexam |\n+--------+----------+--------+-------------+---------+\n| s25303 | 李斯文        | 女      |          80 |      58 |\n| s25302 | 李文才        | 男       |          50 |      90 |\n| s25304 | 欧阳俊雄        | 男       |          65 |      50 |\n| s25301 | 张秋丽         | 男       |          77 |      82 |\n| s25318 | 争青小子        | 男       |          56 |      48 |\n+--------+----------+--------+-------------+---------+\n5 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>脚下留心：显示公共字段需要指定表名 <img src=\"images/1537061664763.png\" alt=\"1537061664763\"></p>\n<p><img src=\"images/1537061715978.png\" alt=\"1537061715978\"></p>\n<div><pre><code>思考：\nselect * from 表1 inner join 表2 on 表1.公共字段=表2.公共字段  和\nselect * from 表2 inner join 表1 on 表1.公共字段=表2.公共字段   结果是否一样？\n答：一样的，因为内连接获取的是两个表的公共部分\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code>多学一招：三个表的内连接如何实现？\nselect * from 表1 inner join 表2 on 表1.公共字段=表2.公共字段\ninner join 表3 on 表2.公共字段=表3.公共字段\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_7-2-左外连接【left-join】\"> 7.2 左外连接【left join】</h3>\n<p>以左边的表为标准，如果右边的表没有对应的记录，用NULL填充。</p>\n<div><pre><code>语法：select 列名 from 表1 left join 表2 on 表1.公共字段=表2.公共字段\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; select stuname,writtenexam,labexam from stuinfo left join stumarks on stuinfo.stuno=stumarks.stuno;\n+----------+-------------+---------+\n| stuname  | writtenexam | labexam |\n+----------+-------------+---------+\n| 张秋丽         |          77 |      82 |\n| 李文才        |          50 |      90 |\n| 李斯文        |          80 |      58 |\n| 欧阳俊雄        |          65 |      50 |\n| 诸葛丽丽         |        NULL |    NULL |\n| 争青小子        |          56 |      48 |\n| 梅超风        |        NULL |    NULL |\n+----------+-------------+---------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><pre><code>思考：\nselect * from 表1 left join 表2 on 表1.公共字段=表2.公共字段\n和\nselect * from 表2 left join 表1 on 表1.公共字段=表2.公共字段   是否一样？\n答：不一样，左连接以左边的表为准。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_7-3-右外连接【right-join】\"> 7.3 右外连接【right join】</h3>\n<p>以右边的表为标准，如果左边的表没有对应的记录，用NULL填充。</p>\n<div><pre><code>语法：select 列名 from 表1 right join 表2 on 表1.公共字段=表2.公共字段\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; select stuname,writtenexam,labexam from stuinfo right join stumarks on stuinfo.stuno=stumarks.stuno;\n+----------+-------------+---------+\n| stuname  | writtenexam | labexam |\n+----------+-------------+---------+\n| 李斯文        |          80 |      58 |\n| 李文才        |          50 |      90 |\n| 欧阳俊雄        |          65 |      50 |\n| 张秋丽         |          77 |      82 |\n| 争青小子        |          56 |      48 |\n| NULL     |          66 |      77 |\n+----------+-------------+---------+\n6 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><pre><code>思考：\nselect * from 表1 left join 表2 on 表1.公共字段=表2.公共字段\n和\nselect * from 表2 right join 表1 on 表1.公共字段=表2.公共字段  是否一样？\n\n答：一样的\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_7-4-交叉连接【cross-join】\"> 7.4 交叉连接【cross join】</h3>\n<p>插入测试数据</p>\n<div><pre><code>mysql&gt; create table t1(\n    -&gt; id int,\n    -&gt; name varchar(10)\n    -&gt; );\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql&gt; insert into t1 values (1,&#39;tom&#39;),(2,&#39;berry&#39;);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql&gt; create table t2(\n    -&gt; id int,\n    -&gt; score int);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&gt; insert into t2 values (1,88),(2,99);\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>1、如果没有连接表达式返回的是笛卡尔积</p>\n<div><pre><code>mysql&gt; select * from t1 cross join t2;   # 返回笛卡尔积\n+------+-------+------+-------+\n| id   | name  | id   | score |\n+------+-------+------+-------+\n|    1 | tom   |    1 |    88 |\n|    2 | berry |    1 |    88 |\n|    1 | tom   |    2 |    99 |\n|    2 | berry |    2 |    99 |\n+------+-------+------+-------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>2、如果有连接表达式等价于内连接</p>\n<div><pre><code>mysql&gt; select * from t1 cross join t2 where t1.id=t2.id;\n+------+-------+------+-------+\n| id   | name  | id   | score |\n+------+-------+------+-------+\n|    1 | tom   |    1 |    88 |\n|    2 | berry |    2 |    99 |\n+------+-------+------+-------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"_7-5-自然连接【natural】\"> 7.5 自然连接【natural】</h3>\n<div><pre><code>自动的判断连接条件，它是过同名字段来判断的\n</code></pre>\n<div><span>1</span><br></div></div><p>自然连接又分为：</p>\n<ol>\n<li>自然内连接\t\tnatural join\n. 自然左外连接\t\tnatural left join\n. 自然右外连接\t\tnatural right join</li>\n</ol>\n<p>例题：</p>\n<div><pre><code># 自然内连接\nmysql&gt; select * from stuinfo natural join stumarks;\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 |          80 |\n  58 |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 |          50 |\n  90 |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 |          65 |\n     50 |\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 |          77 |\n    82 |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 |          56 |\n     48 |\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n5 rows in set (0.00 sec)\n\n# 自然左外连接\n\nmysql&gt; select * from stuinfo natural left join stumarks;\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 |          77\n    82 |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 |          50 |\n  90 |\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 |          80 |\n  58 |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 |          65\n     50 |\n| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           | NULL    |        NULL\n   NULL |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 |          56\n     48 |\n| s25319 | 梅超风        | 女      |     23 |       5 | 河北          | NULL    |        NULL |\nULL |\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n7 rows in set (0.00 sec)\n\n# 自然右外连接\nmysql&gt; select * from stuinfo natural right join stumarks;\n+--------+---------+-------------+---------+----------+--------+--------+---------+------------+\n| stuNo  | examNo  | writtenExam | labExam | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+-------------+---------+----------+--------+--------+---------+------------+\n| s25303 | s271811 |          80 |      58 | 李斯文        | 女      |     22 |       2 | 北京\n     |\n| s25302 | s271813 |          50 |      90 | 李文才        | 男       |     31 |       3 | 上海\n     |\n| s25304 | s271815 |          65 |      50 | 欧阳俊雄        | 男       |     28 |       4 | 天津\n        |\n| s25301 | s271816 |          77 |      82 | 张秋丽         | 男       |     18 |       1 | 北京\n       |\n| s25318 | s271819 |          56 |      48 | 争青小子        | 男       |     26 |       6 | 天津\n        |\n| s25320 | s271820 |          66 |      77 | NULL     | NULL   |   NULL |    NULL | NULL       |\n+--------+---------+-------------+---------+----------+--------+--------+---------+------------+\n6 rows in set (0.00 sec)\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div><p>自然连接结论：</p>\n<ol>\n<li>\n<p>表连接通过同名的字段来连接的</p>\n</li>\n<li>\n<p>如果没有同名的字段返回笛卡尔积</p>\n</li>\n<li>\n<p>会对结果进行整理，整理的规则如下</p>\n<p>a)\t连接字段保留一个</p>\n<p>b)\t连接字段放在最前面</p>\n<p>c)     左外连接左边在前，右外连接右表在前</p>\n</li>\n</ol>\n<h3 id=\"_7-6-using\"> 7.6 using()</h3>\n<ol>\n<li>用来指定连接字段。</li>\n<li>using()也会对连接字段进行整理，整理方式和自然连接是一样的。</li>\n</ol>\n<div><pre><code>mysql&gt; select * from stuinfo inner join stumarks using(stuno);   # using指定字段\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           | s271811 |          80 |\n  58 |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          | s271813 |          50 |\n  90 |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           | s271815 |          65 |\n     50 |\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           | s271816 |          77 |\n    82 |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           | s271819 |          56 |\n     48 |\n+--------+----------+--------+--------+---------+------------+---------+-------------+---------+\n5 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id=\"_8-子查询\"> 8 子查询</h2>\n<p>语法</p>\n<div><pre><code>语法：select 语句 where 条件 (select … from 表)\n</code></pre>\n<div><span>1</span><br></div></div><ol>\n<li>外面的查询称为父查询，括号中的查询称为子查询</li>\n<li>子查询为父查询提供查询条件</li>\n</ol>\n<h3 id=\"_8-1-例题\"> 8.1 例题</h3>\n<p>1、查找笔试80分的学生</p>\n<div><pre><code>mysql&gt; select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=80);\n+--------+---------+--------+--------+---------+------------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |\n+--------+---------+--------+--------+---------+------------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>2、查找笔试最高分的学生</p>\n<div><pre><code># 方法一：\nmysql&gt; select * from stuinfo where stuno=(select stuno from stumarks order by writtenexam desc limit\n 1);\n+--------+---------+--------+--------+---------+------------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |\n+--------+---------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n\n# 方法二：\nmysql&gt; select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=(select max(writtenexam) from stumarks));\n+--------+---------+--------+--------+---------+------------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |\n+--------+---------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><div><pre><code>脚下留心：上面的例题，子查询只能返回一个值。如果子查询返回多个值就不能用“=”了,需要用 in\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_8-2-in-not-in子查询\"> 8.2 in|not in子查询</h3>\n<p>用于子查询的返回结果多个值。</p>\n<p>1、查找笔试成绩及格的同学</p>\n<div><pre><code>mysql&gt; select * from stuinfo where stuno in (select stuno from stumarks where writtenexam&gt;=60);\n+--------+----------+--------+--------+---------+------------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+----------+--------+--------+---------+------------+\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |\n+--------+----------+--------+--------+---------+------------+\n3 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>2、查询不及格的同学</p>\n<div><pre><code>mysql&gt; select * from stuinfo where stuno  in (select stuno from stumarks where writtenexam&lt;=60);\n+--------+----------+--------+--------+---------+------------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+----------+--------+--------+---------+------------+\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |\n+--------+----------+--------+--------+---------+------------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>3、查询没有通过的同学（不及格，缺考）</p>\n<div><pre><code>mysql&gt; select * from stuinfo where stuno  not in (select stuno from stumarks where writtenexam&gt;=60);\n+--------+----------+--------+--------+---------+------------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+----------+--------+--------+---------+------------+\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          |\n| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |\n| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |\n+--------+----------+--------+--------+---------+------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"_8-3-exists和not-exists\"> 8.3 exists和not exists</h3>\n<p>1、\t如果有人笔试超过80分就显示所有的学生</p>\n<div><pre><code>mysql&gt; select * from stuinfo where exists (select * from stumarks where writtenexam&gt;=80);\n+--------+----------+--------+--------+---------+------------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+----------+--------+--------+---------+------------+\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          |\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |\n| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |\n| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |\n+--------+----------+--------+--------+---------+------------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>2、\t如果没有人超过80分就显示所有的学生</p>\n<div><pre><code>mysql&gt; select * from stuinfo where not exists (select * from stumarks where writtenexam&gt;=80);\nEmpty set (0.02 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_8-4-子查询分类\"> 8.4 子查询分类</h3>\n<p>1、标量子查询：子查询返回的结果就一个</p>\n<p>2、列子查询：子查询返回的结果是一个列表</p>\n<p>3、行子查询：子查询返回的结果是一行</p>\n<p>例题：查询成绩最高的男生和女生</p>\n<div><pre><code>mysql&gt; select stuname,stusex,ch from stu where (stusex,ch) in (select stusex,max(ch) from stu group by stusex);\n+----------+--------+------+\n| stuname  | stusex | ch   |\n+----------+--------+------+\n| 争青小子        | 男       |   86 |\n| Tabm     | 女      |   88 |\n+----------+--------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>4、表子查询：子查询返回的结果当成一个表</p>\n<p>例题：查询成绩最高的男生和女生</p>\n<div><pre><code>mysql&gt; select stuname,stusex,ch from (select * from stu order by ch desc) as t group by stusex;\n+----------+--------+------+\n| stuname  | stusex | ch   |\n+----------+--------+------+\n| Tabm     | 女      |   88 |\n| 争青小子        | 男       |   86 |\n+----------+--------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code>脚下留心：from后面是一个表，如果子查询的结果当成表来看，必须将子查询的结果取别名。\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_9-补充技术\"> 9  补充技术</h2>\n<h3 id=\"_9-1-insert-select\"> 9.1  insert…select…</h3>\n<p>选择一个表的数据插入到另外的表中。</p>\n<h3 id=\"_9-2-on-duplicate-key-update\"> 9.2 on duplicate key update</h3>\n<p>在插入数据的时候，如果插入的数据不满足主键约束或唯一约束则执行更新操作。</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "1 视图【view】",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.4%20%E8%A7%86%E5%9B%BE%E3%80%81%E4%BA%8B%E5%8A%A1%E3%80%81%E7%B4%A2%E5%BC%95%E3%80%81%E5%87%BD%E6%95%B0/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.4%20%E8%A7%86%E5%9B%BE%E3%80%81%E4%BA%8B%E5%8A%A1%E3%80%81%E7%B4%A2%E5%BC%95%E3%80%81%E5%87%BD%E6%95%B0/",
      "content_html": "<h2 id=\"_1-视图【view】\"> 1 视图【view】</h2>\n<p>1、\t视图是一张虚拟表，它表示一张表的部分或多张表的综合的结构。</p>\n<p>2、\t视图仅仅是表结构，没有表数据。视图的结构和数据建立在表的基础上。</p>\n<h3 id=\"_1-1-创建视图\"> 1.1 创建视图</h3>\n<p>语法</p>\n<div><pre><code>create [or replace] view 视图的名称\nas\n\tselect语句;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>例题：</p>\n<div><pre><code>mysql&gt; create view vw_stu\n    -&gt; as\n    -&gt; select stuname,stusex,writtenexam,labexam from stuinfo inner join stumarks using(stuno);\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code>多学一招：因为视图是一个表结构，所以创建视图后，会在数据库文件夹中多一个与视图名同名的.frm文件\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_1-2-使用视图\"> 1.2 使用视图</h3>\n<p>视图是一张虚拟表，视图的用法和表的用法一样的</p>\n<div><pre><code>mysql&gt; select * from vw_stu;\n+----------+--------+-------------+---------+\n| stuname  | stusex | writtenexam | labexam |\n+----------+--------+-------------+---------+\n| 李斯文        | 女      |          80 |      58 |\n| 李文才        | 男       |          50 |      90 |\n| 欧阳俊雄        | 男       |          65 |      50 |\n| 张秋丽         | 男       |          77 |      82 |\n| 争青小子        | 男       |          56 |      48 |\n+----------+--------+-------------+---------+\n\nmysql&gt; update vw_stu set writtenexam=88 where stuname=&#39;李斯文&#39;;\nQuery OK, 1 row affected (0.05 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id=\"_1-3-查看视图的结构\"> 1.3 查看视图的结构</h3>\n<p>语法：</p>\n<div><pre><code>desc 视图名;\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; desc vw_stu;\n+-------------+-------------+------+-----+---------+-------+\n| Field       | Type        | Null | Key | Default | Extra |\n+-------------+-------------+------+-----+---------+-------+\n| stuname     | varchar(10) | NO   |     | NULL    |       |\n| stusex      | char(2)     | NO   |     | NULL    |       |\n| writtenexam | int(11)     | YES  |     | NULL    |       |\n| labexam     | int(11)     | YES  |     | NULL    |       |\n+-------------+-------------+------+-----+---------+-------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"_1-4-查看创建视图的语法\"> 1.4 查看创建视图的语法</h3>\n<p>语法：</p>\n<div><pre><code>show create view 视图名\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<p><img src=\"images/1537067071676.png\" alt=\"1537067071676\"></p>\n<h3 id=\"_1-5-显示所有视图\"> 1.5 显示所有视图</h3>\n<div><pre><code> #方法一：\nmysql&gt; show tables;\n+------------------+\n| Tables_in_itcast |\n+------------------+\n| stu              |\n| stuinfo          |\n| stumarks         |\n| t1               |\n| t2               |\n| vw_stu           |\n\n# 方法二\nmysql&gt; select table_name from information_schema.views;\n+------------+\n| table_name |\n+------------+\n| vw_stu     |\n+------------+\n1 row in set (0.05 sec)\n+------------------+\n\n#方法三\nmysql&gt; show table status where comment=&#39;view&#39; \\G\n*************************** 1. row ***************************\n           Name: vw_stu\n         Engine: NULL\n        Version: NULL\n     Row_format: NULL\n           Rows: NULL\n Avg_row_length: NULL\n    Data_length: NULL\nMax_data_length: NULL\n   Index_length: NULL\n      Data_free: NULL\n Auto_increment: NULL\n    Create_time: NULL\n    Update_time: NULL\n     Check_time: NULL\n      Collation: NULL\n       Checksum: NULL\n Create_options: NULL\n        Comment: VIEW\n1 row in set (0.00 sec)\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><h3 id=\"_1-6-更改视图\"> 1.6 更改视图</h3>\n<p>语法：</p>\n<div><pre><code>alter view 视图名\nas\n\tselect 语句\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>例题：</p>\n<div><pre><code>mysql&gt; alter view vw_stu\n    -&gt; as\n    -&gt; select * from stuinfo;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_1-7-删除视图\"> 1.7 删除视图</h3>\n<p>语法：</p>\n<div><pre><code>drop view [if exists] 视图1,视图2,…\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; drop view vw_stu;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_1-8-视图的作用\"> 1.8 视图的作用</h3>\n<ol>\n<li>\n<p>筛选数据，防止未经许可访问敏感数据</p>\n</li>\n<li>\n<p>隐藏表结构</p>\n</li>\n<li>\n<p>降低SQL语句的复杂度</p>\n</li>\n</ol>\n<h3 id=\"_1-9视图的算法\"> 1.9\t视图的算法</h3>\n<p>场景：找出语文成绩最高的男生和女生</p>\n<div><pre><code>mysql&gt; select * from (select * from stu order by ch desc) as t group by stusex;\n+--------+----------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+----------+--------+--------+---------+------------+------+------+\n| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |\n+--------+----------+--------+--------+---------+------------+------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>我们可以将子查询封装到视图中</p>\n<div><pre><code>mysql&gt; create view vw_stu\n    -&gt; as\n    -&gt; select * from stu order by ch desc;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>可以将上面的子查询更改成视图，但是，结果和上面不一样</p>\n<div><pre><code>mysql&gt; select * from vw_stu group by stusex;\n+--------+---------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+---------+--------+--------+---------+------------+------+------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |   80 | NULL |\n| s25303 | 李斯文       | 女      |     22 |       2 | 北京           |   55 |   82 |\n+--------+---------+--------+--------+---------+------------+------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>原因：这是因为视图的算法造成的</p>\n<div><pre><code>1. merge：合并算法，将视图的语句和外层的语句合并后在执行。\n2. temptable：临时表算法，将视图生成一个临时表，再执行外层语句\n3. undefined：未定义，MySQL到底用merge还是用temptable由MySQL决定，这是一个默认的算法，一般视图都会选择merge算法，因为merge效率高。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>解决：在创建视图的时候指定视图的算法</p>\n<div><pre><code>create algorithm=temptable view 视图名\nas\n\tselect 语句\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>指定算法创建视图</p>\n<div><pre><code>mysql&gt; create algorithm=temptable view vw_stu\n    -&gt; as\n    -&gt;  select * from stu order by ch desc;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select * from vw_stu group by stusex;   # 结果是一致的\n+--------+----------+--------+--------+---------+------------+------+------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress | ch   | math |\n+--------+----------+--------+--------+---------+------------+------+------+\n| s25321 | Tabm     | 女      |     23 |       9 | 河北          |   88 |   77 |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |   86 |   92 |\n+--------+----------+--------+--------+---------+------------+------+------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id=\"_2-事务【transaction】\"> 2 事务【transaction】</h2>\n<ol>\n<li>事务是一个不可分割的执行单元</li>\n<li>事务作为一个整体要么一起执行，要么一起回滚</li>\n</ol>\n<p>插入测试数据</p>\n<div><pre><code>mysql&gt; create table bank(\n    -&gt; cardid char(4) primary key,\n    -&gt; money int\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into bank values (&#39;1001&#39;,1000),(&#39;1002&#39;,100);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"_2-1-事务操作\"> 2.1 事务操作</h3>\n<div><pre><code>开启事务：start transaction或begin [work]\n提交事务：commit\n回滚事务：rollback\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>例题：</p>\n<div><pre><code>mysql&gt; delimiter //            # 更改定界符\n\nmysql&gt; start transaction;\t\t\t# 开启事务\n    -&gt; update bank set money=money-100 where cardid=&#39;1001&#39;;\n    -&gt; update bank set money=money+100 where cardid=&#39;1002&#39;  //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; commit //   # 提交事务\n\nmysql&gt; rollback //  # 回滚事务\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><pre><code>思考：事务什么时候产生？什么时候结束？\n答：开启的时候产生，提交事务或回滚事务都结束\n\n脚下留心：只有innodb和BDB才支持事务，myisam不支持事务。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-2-设置事务的回滚点\"> 2.2 设置事务的回滚点</h3>\n<p>语法：</p>\n<div><pre><code>设置回滚点： savepoint 回滚点名\n回滚到回滚点： rollback to 回滚点\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>例题：</p>\n<div><pre><code>mysql&gt;  start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into bank values (&#39;1003&#39;,1000);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; savepoint aa;    # 设置回滚点 aa\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into bank values (&#39;1004&#39;,500);\nQuery OK, 1 row affected (0.00 sec)\n \nmysql&gt; savepoint bb;   # 设置回滚点bb\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql&gt; rollback to aa;    # 回滚到aa点\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; commit;    # 提交事务\n\nmysql&gt; select * from bank ;\n+--------+-------+\n| cardid | money |\n+--------+-------+\n| 1001   |   800 |\n| 1002   |   200 |\n| 1003   |  1000 |\n+--------+-------+\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h3 id=\"_2-3-事务的特性-acid\"> 2.3 事务的特性（ACID）</h3>\n<ol>\n<li>原子性（Atomicity）：事务是一个整体，不可以再分，要么一起执行，要么一起不执行。</li>\n<li>一致性（Consistency）：事务完成时，数据必须处于一致的状态。</li>\n<li>隔离性（Isolation）：每个事务都是相互隔离的</li>\n<li>永久性（Durability）：事务完成后，对数据的修改是永久性的。</li>\n</ol>\n<h2 id=\"_3-索引【index】\"> 3 索引【index】</h2>\n<p>索引的优点：查询速度快</p>\n<p>索引的缺点：</p>\n<ol>\n<li>增、删、改（数据操作语句）效率低了</li>\n<li>索引占用空间</li>\n</ol>\n<h3 id=\"_3-1索引的类型\"> 3.1\t索引的类型</h3>\n<ol>\n<li>\n<p>普通索引</p>\n</li>\n<li>\n<p>唯一索引（唯一键）</p>\n</li>\n<li>\n<p>主键索引：只要主键就自动创建主键索引，不需要手动创建。</p>\n</li>\n<li>\n<p>全文索引，搜索引擎使用，MySQL不支持中文的全文索引，我们通过sphinx去解决中文的全文索引。</p>\n</li>\n</ol>\n<h3 id=\"_3-2创建普通索引【create-index】\"> 3.2\t创建普通索引【create index】</h3>\n<p>语法：</p>\n<div><pre><code>create index [索引名] on 表名 （字段名）\nalter table 表名 add index [索引的名称] （列名）\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>例题：</p>\n<div><pre><code># 创建索引方法一\nmysql&gt; create index ix_stuname on stuinfo(stuname);\nQuery OK, 0 rows affected (0.08 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n# 创建索引方法二\nmysql&gt; alter table stuinfo add index ix_address (stuaddress);\nQuery OK, 0 rows affected (0.08 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n# 创建表的时候就添加索引\nmysql&gt; create table emp(\n    -&gt; id int,\n    -&gt; name varchar(10),\n    -&gt; index ix_name (name)   # 创建索引\n    -&gt; );\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"_3-3创建唯一索引\"> 3.3\t创建唯一索引</h3>\n<div><pre><code>语法一：create unique index 索引名 on 表名 （字段名）\n语法二：alter table 表名 add unqiue [index] [索引的名称] （列名）\n语法三：创建表的时候添加唯一索引，和创建唯一键是一样的。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>例题</p>\n<div><pre><code># 方法一：\nmysql&gt; create unique index UQ_stuname on stu(stuname);\nQuery OK, 0 rows affected (0.06 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n# 方法二：\nmysql&gt; alter table stu add unique UQ_address (stuaddress);\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n# 方法三\nmysql&gt; create table stu2(\n    -&gt; id int,\n    -&gt; name varchar(20),\n    -&gt; unique UQ_name(name)\n    -&gt; );\nQuery OK, 0 rows affected (0.01 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"_3-4删除索引\"> 3.4\t删除索引</h3>\n<p>语法</p>\n<div><pre><code>drop index 索引名 on 表名\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; drop index ix_stuname on stuinfo;\nQuery OK, 0 rows affected (0.03 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"_3-5创建索引的指导原则\"> 3.5\t创建索引的指导原则</h3>\n<ol>\n<li>\n<p>该列用于频繁搜索</p>\n</li>\n<li>\n<p>改列用于排序</p>\n</li>\n<li>\n<p>公共字段要创建索引</p>\n</li>\n<li>\n<p>如果表中的数据很少，不需要创建索引。MySQL搜索索引的时间比逐条搜索数据的时间要长。</p>\n</li>\n<li>\n<p>如果一个字段上的数据只有几个不同的值，改字段不适合做索引，比如性别。</p>\n</li>\n</ol>\n<h2 id=\"_4-函数\"> 4  函数</h2>\n<h3 id=\"_4-1-数字类\"> 4.1  数字类</h3>\n<div><pre><code>mysql&gt; select rand();\t\t\t# 生成随机数\n+---------------------+\n| rand()              |\n+---------------------+\n| 0.18474003969201822 |\n+---------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from stuinfo order by rand();   # 随机排序\n\nmysql&gt; select * from stuinfo order by rand() limit 2;    # 随机抽两个学生\n+--------+----------+--------+--------+---------+------------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+----------+--------+--------+---------+------------+\n| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |\n+--------+----------+--------+--------+---------+------------+\n2 rows in set (0.00 sec)\n\nmysql&gt; select round(3.5);     #四舍五入\n+------------+\n| round(3.5) |\n+------------+\n|          4 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select ceil(3.1);\t# 向上取整\n+-----------+\n| ceil(3.1) |\n+-----------+\n|         4 |\n+-----------+\n1 row in set (0.00 sec)\n\nmysql&gt; select floor(3.9);\t# 向下取整\n+------------+\n| floor(3.9) |\n+------------+\n|          3 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select truncate(3.1415926,3);\t# 截取数字\n+-----------------------+\n| truncate(3.1415926,3) |\n+-----------------------+\n|                 3.141 |\n+-----------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><h3 id=\"_4-2-字符串类\"> 4.2 字符串类</h3>\n<div><pre><code>mysql&gt; select ucase(&#39;i am a boy!&#39;);\t\t# 转成大写\n+----------------------+\n| ucase(&#39;i am a boy!&#39;) |\n+----------------------+\n| I AM A BOY!          |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select lcase(&#39;I Am A Boy!&#39;);\t\t#转成小写\n+----------------------+\n| lcase(&#39;I Am A Boy!&#39;) |\n+----------------------+\n| i am a boy!          |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select left(&#39;abcde&#39;,3);\t\t# 从左边开始截取，截取3个\n+-----------------+\n| left(&#39;abcde&#39;,3) |\n+-----------------+\n| abc             |\n+-----------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select right(&#39;abcde&#39;,3);\t\t# 从右边开始截取，截取3个\n+------------------+\n| right(&#39;abcde&#39;,3) |\n+------------------+\n| cde              |\n+------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select substring(&#39;abcde&#39;,2,3);\t#从第2个位置开始截取，截取3个【位置从1开始】\n+------------------------+\n| substring(&#39;abcde&#39;,2,3) |\n+------------------------+\n| bcd                    |\n+------------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select concat(&#39;中国&#39;,&#39;上海&#39;);\t# 字符串相连\n+-----------------------+\n| concat(&#39;中国&#39;,&#39;上海&#39;)       |\n+-----------------------+\n| 中国上海                    |\n+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select concat(stuname,&#39;-&#39;,stusex) from stuinfo;  # 将表中的姓名和性别连接起来\n+----------------------------+\n| concat(stuname,&#39;-&#39;,stusex) |\n+----------------------------+\n| 张秋丽-男                          |\n| 李文才-男                         |\n| 李斯文-女                        |\n| 欧阳俊雄-男                         |\n| 诸葛丽丽-女                         |\n| 争青小子-男                         |\n| 梅超风-女                        |\n+----------------------------+\n7 rows in set (0.00 sec)\n\n# coalesce(字段1，字段2)  如果字段1不为空就显示字段1，否则，显示字段2\nmysql&gt; select stuname,coalesce(writtenexam,&#39;缺考&#39;),coalesce(labexam,&#39;缺考&#39;) from stuinfo natural left join stumarks;   # 将考试成绩为空的显示为缺考\n+----------+------------------------------+--------------------------+\n| stuname  | coalesce(writtenexam,&#39;缺考&#39;)    | coalesce(labexam,&#39;缺考&#39;)    |\n+----------+------------------------------+--------------------------+\n| 张秋丽         | 77                           | 82                       |\n| 李文才        | 50                           | 90                       |\n| 李斯文        | 88                           | 58                       |\n| 欧阳俊雄        | 65                           | 50                       |\n| 诸葛丽丽         | 缺考                            | 缺考                        |\n| 争青小子        | 56                           | 48                       |\n| 梅超风        | 缺考                            | 缺考                        |\n+----------+------------------------------+--------------------------+\n\nmysql&gt; select length(&#39;锄禾日当午&#39;);\t\t# 字节长度\n+----------------------+\n| length(&#39;锄禾日当午&#39;)          |\n+----------------------+\n|                   10 |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select char_length(&#39;锄禾日当午&#39;);\t\t# 字符个数\n+---------------------------+\n| char_length(&#39;锄禾日当午&#39;)          |\n+---------------------------+\n|                         5 |\n+---------------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br></div></div><h3 id=\"_4-3-时间类\"> 4.3 时间类</h3>\n<div><pre><code>mysql&gt; select unix_timestamp();\t#获取时间戳\n+------------------+\n| unix_timestamp() |\n+------------------+\n|       1537084508 |\n+------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select from_unixtime(unix_timestamp());\t# 将时间戳转成年-月-日 小时:分钟:秒的格式\n+---------------------------------+\n| from_unixtime(unix_timestamp()) |\n+---------------------------------+\n| 2018-09-16 15:55:56             |\n+---------------------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select now();\t\t# 获取当前日期时间\n+---------------------+\n| now()               |\n+---------------------+\n| 2018-09-16 15:57:04 |\n+---------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select year(now()) 年,month(now()) 月, day(now()) 日,hour(now()) 小,minute(now()) 分钟,second(now()) 秒;\n+------+------+------+------+------+------+\n| 年     | 月     | 日     | 小时   | 分钟     | 秒     |\n+------+------+------+------+------+------+\n| 2018 |    9 |   16 |   15 |   59 |   14 |\n+------+------+------+------+------+------+\n1 row in set (0.00 sec)\n\nmysql&gt; select dayname(now()) 星期,monthname(now()),dayofyear(now()) 本年的第几天;\n+--------+------------------+--------------+\n| 星期       | monthname(now()) | 本年的第几天           |\n+--------+------------------+--------------+\n| Sunday | September        |          259 |\n+--------+------------------+--------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select datediff(now(),&#39;2008-8-8&#39;);\t# 日期相减\n+----------------------------+\n| datediff(now(),&#39;2008-8-8&#39;) |\n+----------------------------+\n|                       3691 |\n+----------------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select convert(now(),date),convert(now(),time);\t# 将now()转成日期和时间\n+---------------------+---------------------+\n| convert(now(),date) | convert(now(),time) |\n+---------------------+---------------------+\n| 2018-09-16          | 16:07:24            |\n+---------------------+---------------------+\n\nmysql&gt; select cast(now() as date),cast(now() as time);   # 将now()转成日期和时间\n+---------------------+---------------------+\n| cast(now() as date) | cast(now() as time) |\n+---------------------+---------------------+\n| 2018-09-16          | 16:08:03            |\n+---------------------+---------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><h3 id=\"_4-4-加密函数\"> 4.4 加密函数</h3>\n<div><pre><code>+----------------------------------+------------------------------------------+\n| md5(&#39;root&#39;)                      | sha(&#39;root&#39;)                              |\n+----------------------------------+------------------------------------------+\n| 63a9f0ea7bb98050796b649e85481845 | dc76e9f0c0006e8f919e0c515c66dbba3982f785 |\n+----------------------------------+------------------------------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_4-5-判断函数\"> 4.5 判断函数</h3>\n<p>语法</p>\n<div><pre><code>if(表达式,值1,值2)\n</code></pre>\n<div><span>1</span><br></div></div><p>例题：</p>\n<div><pre><code>mysql&gt; select if(10%2=0,&#39;偶数&#39;,&#39;奇数&#39;);\n+--------------------------+\n| if(10%2=0,&#39;偶数&#39;,&#39;奇数&#39;)        |\n+--------------------------+\n| 偶数                        |\n+--------------------------+\n1 row in set (0.00 sec)\n\n# 语文和数学都超过60分才通过\nmysql&gt; select stuname,ch,math,if(ch&gt;=60 &amp;&amp; math&gt;=60,&#39;通过&#39;,&#39;不通过&#39;) &#39;是否通过&#39; from stu;\n+----------+------+------+----------+\n| stuname  | ch   | math | 是否通过       |\n+----------+------+------+----------+\n| 张秋丽         |   80 | NULL | 不通过        |\n| 李文才        |   77 |   76 | 通过        |\n| 李斯文        |   55 |   82 | 不通过        |\n| 欧阳俊雄        | NULL |   74 | 不通过        |\n| 诸葛丽丽         |   72 |   56 | 不通过        |\n| 争青小子        |   86 |   92 | 通过        |\n| 梅超风        |   74 |   67 | 通过        |\n| Tom      |   65 |   67 | 通过        |\n| Tabm     |   88 |   77 | 通过        |\n+----------+------+------+----------+\n9 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id=\"_5-预处理\"> 5  预处理</h2>\n<p>预编译一次，可以多次执行。用来解决一条SQL语句频繁执行的问题。</p>\n<div><pre><code>预处理语句：prepare 预处理名字 from ‘sql语句’\n执行预处理：execute 预处理名字 [using 变量]\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>例题一：</p>\n<div><pre><code>mysql&gt; prepare stmt from &#39;select * from stuinfo&#39;;\t# 创建预处理\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; execute stmt;\t# 执行预处理\n+--------+----------+--------+--------+---------+------------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+----------+--------+--------+---------+------------+\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          |\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |\n| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |\n| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |\n+--------+----------+--------+--------+---------+------------+\n7 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>例题二：传递参数</p>\n<div><pre><code>mysql&gt; delimiter // \nmysql&gt; prepare stmt from &#39;select * from stuinfo where stuno=?&#39; // -- ?是位置占位符\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; set @id=&#39;s25301&#39;;       -- 变量以@开头，通过set给变量赋值\n    -&gt; execute stmt using @id //  -- 执行预处理，传递参数\nQuery OK, 0 rows affected (0.00 sec)\n\n+--------+---------+--------+--------+---------+------------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+--------+--------+---------+------------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |\n+--------+---------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code>脚下留心：\n1、?是位置占位符\n2、变量以@开头\n3、通过set给变量赋值\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>例题三：传递多个参数</p>\n<div><pre><code>mysql&gt; prepare stmt from &#39;select * from stuinfo where stusex=? and stuaddress=?&#39;  //\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; set @sex=&#39;男&#39;;\n    -&gt; set @addr=&#39;北京&#39;;\n    -&gt; execute stmt using @sex,@addr //\nQuery OK, 0 rows affected (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\n+--------+---------+--------+--------+---------+------------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+--------+--------+---------+------------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |\n+--------+---------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id=\"_6-存储过程【procedure】\"> 6 存储过程【procedure】</h2>\n<h3 id=\"_6-1-存储过程的优点\"> 6.1 存储过程的优点</h3>\n<ol>\n<li>存储过程可以减少网络流量</li>\n<li>允许模块化设计</li>\n<li>支持事务</li>\n</ol>\n<h3 id=\"_6-2创建存储过程\"> 6.2\t创建存储过程</h3>\n<p>语法：</p>\n<div><pre><code>create procedure 存储过程名(参数)\nbegin\n\t//sql语句\nend;\n\n脚下留心：由于过程中有很多SQL语句，每个语句的结束都要用（；）结束。默认情况下，分号既表示语句结束，又表示向服务器发送SQL语句。我们希望分号仅表示语句的结束，不要将SQL语句发送到服务器执行，通过delimiter来更改结束符。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; delimiter //\nmysql&gt; create procedure proc()     -- 创建存储过程\n    -&gt; begin\n    -&gt; select * from stuinfo;\n    -&gt; end //\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_6-3调用存储过程\"> 6.3\t调用存储过程</h3>\n<p>语法：</p>\n<div><pre><code>call 存储过程名()\n</code></pre>\n<div><span>1</span><br></div></div><p>例题：</p>\n<div><pre><code>mysql&gt; call proc() //     -- 调用存储过程\n+--------+----------+--------+--------+---------+------------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+----------+--------+--------+---------+------------+\n| s25301 | 张秋丽         | 男       |     18 |       1 | 北京           |\n| s25302 | 李文才        | 男       |     31 |       3 | 上海          |\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |\n| s25305 | 诸葛丽丽         | 女      |     23 |       7 | 河南           |\n| s25318 | 争青小子        | 男       |     26 |       6 | 天津           |\n| s25319 | 梅超风        | 女      |     23 |       5 | 河北          |\n+--------+----------+--------+--------+---------+------------+\n7 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id=\"_6-4删除存储过程\"> 6.4\t删除存储过程</h3>\n<p>语法</p>\n<div><pre><code>drop procedure [if exists] 存储过程名\n</code></pre>\n<div><span>1</span><br></div></div><p>例题：</p>\n<div><pre><code>mysql&gt; drop procedure proc //    -- 删除存储过程\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_6-5-查看存储过程的信息\"> 6.5  查看存储过程的信息</h3>\n<div><pre><code>show create procedure 存储过程名\\G\n</code></pre>\n<div><span>1</span><br></div></div><p>例题</p>\n<div><pre><code>mysql&gt; show create procedure proc \\G\n*************************** 1. row ***************************\n           Procedure: proc\n            sql_mode: STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n    Create Procedure: CREATE DEFINER=`root`@`localhost` PROCEDURE `proc`()\nbegin\nselect * from stuinfo;\nend\ncharacter_set_client: gbk\ncollation_connection: gbk_chinese_ci\n  Database Collation: utf8_general_ci\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id=\"_6-6-显示所有的存储过程\"> 6.6 显示所有的存储过程</h3>\n<div><pre><code>mysql&gt; show procedure status \\G\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_6-7存储过程的参数\"> 6.7\t存储过程的参数</h3>\n<p>存储过程的参数分为：输入参数（in）【默认】，输出参数（out），输入输出参数（inout）</p>\n<p>存储过程不能使用return返回值，要返回值只能通过“输出参数”来向外传递值。</p>\n<p>例题一：传递学号，获取对应的信息</p>\n<div><pre><code>mysql&gt; create procedure proc(in param varchar(10))   -- 输入参数\n    -&gt; select * from stuinfo where stuno=param //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; call proc(&#39;s25301&#39;) //\n+--------+---------+--------+--------+---------+------------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+--------+--------+---------+------------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京           |\n+--------+---------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>例题二：查找同桌</p>\n<div><pre><code>mysql&gt; create procedure proc(name varchar(10))\n    -&gt; begin\n    -&gt; declare seat tinyint;   -- 声明局部变量\n    -&gt; select stuseat into seat from stuinfo where stuname=name;  -- 将座位号保存到变量中\n    -&gt; select * from stuinfo where stuseat=seat+1 or stuseat=seat-1;  -- 查找同桌\n    -&gt; end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; call proc(&#39;李文才&#39;) //\n+--------+----------+--------+--------+---------+------------+\n| stuNo  | stuName  | stuSex | stuAge | stuSeat | stuAddress |\n+--------+----------+--------+--------+---------+------------+\n| s25303 | 李斯文        | 女      |     22 |       2 | 北京           |\n| s25304 | 欧阳俊雄        | 男       |     28 |       4 | 天津           |\n+--------+----------+--------+--------+---------+------------+\n2 rows in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>强调</p>\n<div><pre><code>1、通过declare关键字声明局部变量；全局变量@开头就可以了\n2、给变量赋值有两种方法\n\t方法一：set 变量名=值\n\t方法二：select 字段 into 变量 from 表 where 条件\n3、声明的变量不能与列名同名\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>例题三：输出参数</p>\n<div><pre><code>mysql&gt; create procedure proc(num int, out result int)  //out 表示输出参数\n    -&gt; begin\n    -&gt; set result=num*num;\n    -&gt; end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; call proc(10,@result) //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select @result //\n+---------+\n| @result |\n+---------+\n|     100 |\n+---------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>例题四：输入输出参数</p>\n<div><pre><code>mysql&gt; create procedure proc(inout num int)  #  inout 表示是输入输出参数\n    -&gt; begin\n    -&gt; set num=num*num;\n    -&gt; end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; set @num=10;\n    -&gt; call proc(@num);\n    -&gt; select @num //\nQuery OK, 0 rows affected (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\n+------+\n| @num |\n+------+\n|  100 |\n+------+\n1 row in set (0.00 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id=\"_7-go连接mysql\"> 7 GO连接MySQL</h2>\n<ol>\n<li>因为Go语言没有提供任何官方数据库驱动，所以需要安装第三方函数库。</li>\n<li>由于在github上安装，所以需要安装git软件，安装过程一直点击下一步即可。安装完成后需要配置环境变量</li>\n</ol>\n<h3 id=\"_7-1-安装git\"> 7.1  安装git</h3>\n<p>git软件</p>\n<p><img src=\"images/1537011074242.png\" alt=\"1537011074242\"></p>\n<p>安装完毕后，配置git的环境变量，这样可以使用<code>get</code>的指令</p>\n<p><img src=\"images/1537094210154.png\" alt=\"1537094210154\"></p>\n<h3 id=\"_7-2-安装数据库驱动\"> 7.2  安装数据库驱动</h3>\n<p>设置GOPATH的环境变量，这样驱动才会下载到项目根目录中。</p>\n<p><img src=\"images/1537094342573.png\" alt=\"1537094342573\">****</p>\n<p>在cmd命令窗口中输入如下命令安装驱动</p>\n<div><pre><code><span>go</span> get github<span>.</span>com<span>/</span><span>go</span><span>-</span>sql<span>-</span>driver<span>/</span>mysql\n\n这一命令会从代码中获取驱动的具体代码，并将这些代码放置到包库中，当需要用到驱动的时候，编译器会把驱动代码与用户编写的代码一同编译。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>安装完毕后，会在GOPATH下看到下载的驱动</p>\n<p><img src=\"images/1537011722807.png\" alt=\"1537011722807\"></p>\n<h3 id=\"_7-3-连接数据库\"> 7.3  连接数据库</h3>\n<p>1、在src目录下创建demo.go文件，导入数据库驱动</p>\n<div><pre><code><span>import</span> <span>(</span>\n\t<span>\"database/sql\"</span>\n\t<span>_</span> <span>\"github.com/go-sql-driver/mysql\"</span>\n<span>)</span>\n\n注意：程序在操作数据库的时候只需要用到database<span>/</span>sql，而不需要直接使用数据库驱动，所以程序在导入数据库驱动的时候将这个包的名字设置成下划线。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>2、通过sql.open()连接数据库</p>\n<div><pre><code>sql.open(驱动名,数据源dsn)(*DB,err)\n\n数据源语法：&quot;用户名:密码@[连接方式](主机名:端口号)/数据库名&quot;\n\n注意：open()在执行时不会真正的与数据库进行连接，只是设置连接数据库需要的参数\nping()方法才是连接数据库\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>3、执行SQL语句</p>\n<p>​\t创建测试表</p>\n<div><pre><code>mysql&gt; create table stu(\n    -&gt; id int primary key,\n    -&gt; name varchar(10)\n    -&gt; );\nQuery OK, 0 rows affected (0.02 sec)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>操作数据</p>\n<div><pre><code>package main\n\nimport (\n\t&quot;database/sql&quot;\n\t_ &quot;github.com/go-sql-driver/mysql&quot;\n\t&quot;fmt&quot;\n)\n\nfunc main(){\n\t//&quot;用户名:密码@[连接方式](主机名:端口号)/数据库名&quot;\n\tdb,_:=sql.Open(&quot;mysql&quot;,&quot;root:root@(127.0.0.1:3306)/itcast&quot;) // 设置连接数据库的参数\n\tdefer db.Close()\t//关闭数据库\n\terr:=db.Ping()\t\t//连接数据库\n\tif err!=nil{\n\t\tfmt.Println(&quot;数据库连接失败&quot;)\n\t\treturn\n\t}\n\n\t//操作一：执行数据操作语句\n\t/*\n\tsql:=&quot;insert into stu values (2,&#39;berry&#39;)&quot;\n\tresult,_:=db.Exec(sql)\t\t//执行SQL语句\n\tn,_:=result.RowsAffected();\t//获取受影响的记录数\n\tfmt.Println(&quot;受影响的记录数是&quot;,n)\n\t*/\n\n\t//操作二：执行预处理\n\t/*\n\tstu:=[2][2] string{{&quot;3&quot;,&quot;ketty&quot;},{&quot;4&quot;,&quot;rose&quot;}}\n\tstmt,_:=db.Prepare(&quot;insert into stu values (?,?)&quot;)\t\t//获取预处理语句对象\n\tfor _,s:=range stu{\n\t\tstmt.Exec(s[0],s[1])\t\t\t//调用预处理语句\n\t}\n\t*/\n\n\t//操作三：单行查询\n\t/*\n\tvar id,name string\n\trows:=db.QueryRow(&quot;select * from stu where id=4&quot;)   //获取一行数据\n\trows.Scan(&amp;id,&amp;name)\t\t//将rows中的数据存到id,name中\n\tfmt.Println(id,&quot;--&quot;,name)\n\t*/\n\n\t//操作四：多行查询\n\trows,_:=db.Query(&quot;select * from stu&quot;)\t\t//获取所有数据\n\tvar id,name string\n\tfor rows.Next(){\t\t//循环显示所有的数据\n\t\trows.Scan(&amp;id,&amp;name)\n\t\tfmt.Println(id,&quot;--&quot;,name)\n\t}\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><h2 id=\"_8-例题\"> 8  例题</h2>\n<p>1、\t显示地区及每个地区参加考试的人数，并按人数降序排列。</p>\n<div><pre><code>select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress order by c desc;\n</code></pre>\n<div><span>1</span><br></div></div><p>2、\t显示有学生参加考试的地区</p>\n<p>方法一：过滤</p>\n<div><pre><code>select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress having c&gt;0;\n</code></pre>\n<div><span>1</span><br></div></div><p>方法二：链接查询</p>\n<div><pre><code>select distinct stuaddress c from stuinfo right join stumarks using(stuno) ;\n</code></pre>\n<div><span>1</span><br></div></div><p>3、\t显示男生和女生的人数</p>\n<p>方法一：</p>\n<div><pre><code>select stusex,count() from stuinfo where stusex=&#39;男&#39; union select stusex,count() from stuinfo where stusex=&#39;女&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><p>方法二：</p>\n<div><pre><code>select sum(stusex=&#39;男&#39;) 男,sum(stusex=&#39;女&#39;) 女 from stuinfo;\n</code></pre>\n<div><span>1</span><br></div></div><p>4、\t显示每个地区的男生和女生和总人数</p>\n<div><pre><code>select stuaddress,count(stusex) 总人数, sum(stusex=&#39;男&#39;) 男,sum(stusex=&#39;女&#39;) 女 from stuinfo group by stuaddress\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "存储引擎简介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.5%20MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.5%20MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",
      "content_html": "<h2 id=\"存储引擎简介\"> 存储引擎简介</h2>\n<p>​\t\tMySQL中的数据用各种不同的技术存储在文件(或者内存)中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。</p>\n<p>​\t\t例如，如果你在研究大量的临时数据，你也许需要使用内存存储引擎。内存存储引擎能够在内存中存储所有的表格数据。</p>\n<h2 id=\"常用的存储引擎及其特点\"> 常用的存储引擎及其特点</h2>\n<h3 id=\"myisam存储引擎\"> MyISAM存储引擎</h3>\n<p>在5.5版本之前，MyISAM是MySQL的默认存储引擎。</p>\n<p>每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名 为.MYD （MYData）。索引文件的扩展名是.MYI （MYIndex）。</p>\n<p>MyISAM文件的格式是平台无关的，这意味着你可以将数据和索引文件从一个intel服务器上拷贝到一台PowerPC或者Sun SPARC上，而不会出任何问题。</p>\n<p>该存储引擎并发性差，不支持事务，所以使用场景比较少，主要特点为：</p>\n<ul>\n<li>不支持事务</li>\n<li>不支持外键，如果强行增加外键，不会提示错误，只是外键不起作用</li>\n<li>对数据的查询缓存只会缓存索引，不会像InnoDB一样缓存数据，而且是利用操作系统本身的缓存</li>\n<li>默认的锁粒度为表级锁，所以并发度很差，加锁快，锁冲突较少，所以不太容易发生死锁</li>\n<li>支持全文索引（MySQL5.6之后，InnoDB存储引擎也对全文索引做了支持），但是MySQL的全文索引基本不会使用，对于全文索引，现在有其他成熟的解决方案，比如：ElasticSearch，Solr，Sphinx等</li>\n<li>数据库所在主机如果宕机，MyISAM的数据文件容易损坏，而且难恢复</li>\n</ul>\n<h3 id=\"innodb存储引擎\"> InnoDB存储引擎</h3>\n<p>从MySQL5.5版本之后，MySQL的默认内置存储引擎已经是InnoDB了，它的主要特点有：</p>\n<ul>\n<li>灾难恢复性比较好</li>\n<li>支持事务,默认的事务隔离级别为可重复度，通过MVCC（并发版本控制）来实现的</li>\n<li>使用的锁粒度为行级锁，可以支持更高的并发</li>\n<li>支持外键</li>\n<li>配合一些热备工具可以支持在线热备份</li>\n<li>在InnoDB中存在着缓冲管理，通过缓冲池，将索引和数据全部缓存起来，加快查询的速度</li>\n<li>对于InnoDB类型的表，其数据的物理组织形式是聚簇表。所有的数据按照主键来组织。数据和索引放在一块，都位于B+数的叶子节点上；</li>\n</ul>\n<blockquote>\n<p>独享表空间：使用 .ibd 文件来存放数据，且每一张 InnoDB 表对应一个 .ibd 文件，文件存放在所属数据库的目录下。</p>\n<p>共享表空间：使用 .ibdata 文件，所有表共同使用一个（或多个，自行配置）.ibdata 文件。</p>\n<p>配置：innodb_file_per_table 参数</p>\n<p>根据版本不同，默认参数不同</p>\n</blockquote>\n<h3 id=\"memory存储引擎\"> MEMORY存储引擎</h3>\n<p>将数据存在内存中，和市场上的Redis，memcached等思想类似，为了提高数据的访问速度，主要特点：</p>\n<ul>\n<li>支持的数据类型有限制，比如：不支持TEXT和BLOB类型，对于字符串类型的数据，只支持固定长度的行，VARCHAR会被自动存储为CHAR类型</li>\n<li>支持的锁粒度为表级锁。所以，在访问量比较大时，表级锁会成为MEMORY存储引擎的瓶颈</li>\n<li>由于数据是存放在内存中，所以在服务器重启之后，所有数据都会丢失；</li>\n<li>查询的时候，如果有用到临时表，而且临时表中有BLOB，TEXT类型的字段，那么这个临时表就会转化为MyISAM类型的表，性能会急剧降低</li>\n</ul>\n<h3 id=\"archive存储引擎\"> ARCHIVE存储引擎</h3>\n<p>ARCHIVE存储引擎适合的场景有限，由于其支持压缩，故主要是用来做日志，流水等数据的归档，主要特点：</p>\n<ul>\n<li>支持Zlib压缩，数据在插入表之前，会先被压缩</li>\n<li>仅支持SELECT和INSERT操作，存入的数据就只能查询，不能做修改和删除</li>\n<li>只支持自增键上的索引，不支持其他索引</li>\n</ul>\n<h3 id=\"csv存储引擎\"> CSV存储引擎</h3>\n<p>数据中转试用，主要特点：</p>\n<ul>\n<li>其数据格式为.csv格式的文本，可以直接编辑保存</li>\n<li>导入导出比较方便，可以将某个表中的数据直接导出为csv，试用Excel办公软件打开；</li>\n</ul>\n<h2 id=\"myisam和innodb的主要区别\"> MyISAM和InnoDB的主要区别</h2>\n<ul>\n<li>MyISAM锁的粒度是表级，而InnoDB支持行级锁定\n<ul>\n<li>由于锁粒度的不同，InnoDB比MyISAM支持更高的并发</li>\n<li>InnoDB相对于MyISAM来说，更容易发生死锁，锁冲突的概率更大，而且上锁的开销也更大，因为需要为每一行加锁</li>\n</ul>\n</li>\n<li>在备份容灾上，InnoDB支持在线热备，有很成熟的在线热备解决方案</li>\n<li>查询性能上，MyISAM的查询效率高于InnoDB，因为InnoDB在查询过程中，是需要维护数据缓存，而且查询过程是先定位到行所在的数据块，然后在从数据块中定位到要查找的行；而MyISAM可以直接定位到数据所在的内存地址，可以直接找到数据</li>\n<li>MyISAM的表结构文件包括：.frm(表结构定义),.MYI(索引),.MYD(数据)；而InnoDB的表数据文件为:.ibd（数据）和.frm(表结构定义)</li>\n<li>MyISAM是非事务安全型的，而InnoDB是事务安全型的。</li>\n<li>MyISAM支持全文类型索引，而InnoDB不支持全文索引。</li>\n<li>MyISAM表是保存成文件的形式，在跨平台的数据转移中使用MyISAM存储会省去不少的麻烦。</li>\n</ul>\n<h2 id=\"如何选择合适的存储引擎\"> 如何选择合适的存储引擎</h2>\n<p>1、使用场景是否需要事务支持；\n2、是否需要支持高并发，InnoDB的并发度远高于MyISAM；\n3、是否需要支持外键；\n4、是否需要支持在线热备；\n5、高效缓冲数据，InnoDB对数据和索引都做了缓冲，而MyISAM只缓冲了索引；\n6、索引，不同存储引擎的索引并不太一样；</p>\n<blockquote>\n<p>参考链接：https://segmentfault.com/a/1190000019400925</p>\n</blockquote>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "1 用户",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.6%20%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E5%92%8C%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.6%20%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E5%92%8C%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/",
      "content_html": "<h2 id=\"_1-用户\"> 1 用户</h2>\n<h3 id=\"_1-1-创建用户并设置密码\"> 1.1 创建用户并设置密码</h3>\n<div><pre><code>create user aa@localhost identified by &#39;123&#39;;//本地用户\ncreate user aa@&#39;%&#39; identified by &#39;123&#39;; //其他远程用户\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_1-2-重命名用户\"> 1.2 重命名用户</h3>\n<div><pre><code>rename user &#39;test3&#39;@&#39;%&#39; to &#39;test1&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_1-3-删除用户\"> 1.3 删除用户</h3>\n<div><pre><code>drop user &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_2-权限\"> 2 权限</h2>\n<h3 id=\"_2-1-授予权限\"> 2.1 授予权限</h3>\n<div><pre><code>grant 权限 on 库.表 to 用户@主机 identified by &#39;密码&#39;；grant 权限 on 库.表 to 用户@主机 identified by &#39;密码&#39;；\ngrant all on *.* to &#39;testUser&#39;@&#39;%&#39; identified by &#39;123&#39;;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"_2-1-1-查询、插入、更新、删除的权限\"> 2.1.1 查询、插入、更新、删除的权限</h4>\n<div><pre><code>grant select on testdb.* to &#39;testUser&#39;@&#39;%&#39;;  \ngrant insert on testdb.* to &#39;testUser&#39;@&#39;%&#39;;  #其中*第通配符，表示所有\ngrant update on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\ngrant delete on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n\n#总结成一条命令\ngrant select,insert,update,delete on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h4 id=\"_2-1-2-创建和删除表、索引、视图、存储过程的权限\"> 2.1.2 创建和删除表、索引、视图、存储过程的权限</h4>\n<div><pre><code>grant create on testdb.* to &#39;testUser&#39;@&#39;%&#39;;  #其中*第通配符，表示所有\ngrant alter on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\ngrant drop on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n\n#总结成一条命令\ngrant create,alter,drop on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n\n#外键权限\ngrant reference on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n\n#索引权限\ngrant index on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n\n#视图权限\ngrant create view on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\ngrant show view on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n\n#存储过程权限\ngrant create routine on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\ngrant alter routine on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\ngrant execute on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h4 id=\"_2-1-3-指定用户管理数据库的权限\"> 2.1.3 指定用户管理数据库的权限</h4>\n<div><pre><code>#仅管理testdb数据库\ngrant all privileges on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n\n#管理所有数据库\ngrant all privileges on *.* to &#39;testUser&#39;@&#39;%&#39;;\n#其中privileges关键字可省略\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"_2-2-权限的作用层次\"> 2.2 权限的作用层次</h3>\n<h4 id=\"_2-2-1-作用在整个mysql服务器上\"> 2.2.1 作用在整个MySQL服务器上</h4>\n<div><pre><code>grant all privileges on *.* to &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-2-2-作用在单个数据库上\"> 2.2.2 作用在单个数据库上</h4>\n<div><pre><code>grant all privileges on testdb.* to &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-2-3-作用在单个数据表上\"> 2.2.3 作用在单个数据表上</h4>\n<div><pre><code>grant all privileges on testdb.testTable to &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-2-4-作用在单个数据表的若干个列上\"> 2.2.4 作用在单个数据表的若干个列上</h4>\n<div><pre><code>grant select(id, name, home, phone) on testdb.testTable to &#39;testUser&#39;@&#39;%&#39;; #select可以改其他，字段根据实际修改\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_2-2-5-作用在存储过程、函数上\"> 2.2.5 作用在存储过程、函数上</h4>\n<div><pre><code>grant execute on procedure testdb.tsetfunc to &#39;testUser&#39;@&#39;%&#39;;\ngrant execute on function testdb.tsetfunc to &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_2-3-权限刷新\"> 2.3 权限刷新</h3>\n<div><pre><code>flush privileges;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_2-4-查看权限\"> 2.4 查看权限</h3>\n<div><pre><code>#查看当前用户的权限\nshow grants;\n\n#查看mysql中其他用户的权限\nshow grants for &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_2-5-移除权限\"> 2.5 移除权限</h3>\n<div><pre><code>revoke 权限 on 库.表 from 用户@主机;\nrevoke all on *.* from &#39;testUser&#39;@&#39;%&#39;;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"_2-6-mysql授权表\"> 2.6 mysql授权表</h3>\n<p>mysql授权表共有5个表：user、db、host、tables_priv和columns_priv。</p>\n<h4 id=\"_2-6-1-user表\"> 2.6.1 user表</h4>\n<p>user表列出可以连接服务器的用户及其口令，并且它指定他们有哪种全局（超级用户）权限。在user表启用的任何权限均是全局权限，并适用于所有数据库。</p>\n<h4 id=\"_2-6-2-db表\"> 2.6.2 db表</h4>\n<p>db表列出数据库，用户有权限访问它们。在这里指定的权限适用于一个数据库中的所有表。</p>\n<h4 id=\"_2-6-2-host表\"> 2.6.2 host表</h4>\n<p>host表与db表结合使用在一个较好层次上控制特定主机对数据库的访问权限，这可能比单独使用db好些。这个表不受GRANT和REVOKE语句的影响，所以，你可能发觉你根本不是用它。</p>\n<h4 id=\"_2-6-3-tables-priv表\"> 2.6.3 tables_priv表</h4>\n<p>tables_priv表指定表级权限，在这里指定的一个权限适用于一个表的所有列。</p>\n<h4 id=\"_2-6-4-columns-priv表\"> 2.6.4 columns_priv表</h4>\n<p>columns_priv表指定列级权限。这里指定的权限适用于一个表的特定列。</p>\n<h3 id=\"_2-7-注意事项\"> 2.7 注意事项</h3>\n<p>grant, revoke 用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效。</p>\n<p>如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 <code>grant option</code></p>\n<div><pre><code>grant all on testdb.* to &#39;testUser&#39;@&#39;%&#39; with grant option;\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"_3-密码\"> 3 密码</h2>\n<h3 id=\"_3-1-修改密码\"> 3.1 修改密码</h3>\n<h4 id=\"_3-1-1-更新mysql-user表\"> 3.1.1 更新mysql.user表</h4>\n<div><pre><code># mysql5.7之前\nupdate user set password=password(&#39;123456&#39;) where user=&#39;root&#39;;\n# mysql5.7之后\nupdate user set authentication_string=password(&#39;123456&#39;) where user=&#39;root&#39;;\nflush privileges;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"_3-1-2-用set-password命令\"> 3.1.2 用set password命令</h4>\n<p>**语法：**set password for ‘用户名'@'登录地址'=password(‘密码')</p>\n<div><pre><code>set password for &#39;root&#39;@&#39;localhost&#39;=password(&#39;123456&#39;);\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_3-1-3-mysqladmin\"> 3.1.3 mysqladmin</h4>\n<p>**语法：**mysqladmin -u用户名 -p旧的密码 password 新密码</p>\n<div><pre><code>mysqladmin -uroot -p123456 password 1234abcd\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_3-2-忘记密码\"> 3.2 忘记密码</h3>\n<h4 id=\"_3-2-1-跳过授权\"> 3.2.1 跳过授权</h4>\n<p><code>vim /etc/my.cnf</code></p>\n<div><pre><code>[mysqld]\nskip-grant-tables\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"_3-2-2-重启服务\"> 3.2.2 重启服务</h4>\n<div><pre><code>service mysqld restart\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"_3-2-3-修改密码\"> 3.2.3 修改密码</h4>\n<p>此时在终端用mysql命令登录时不需要用户密码，然后按照修改密码的第一种方式将密码修改即可。</p>\n<h4 id=\"_3-2-4-还原登录权限跳过检查配置\"> 3.2.4 还原登录权限跳过检查配置</h4>\n<p>将my.cnf中mysqld节点的skip-grant-tables配置删除，然后重新启动服务即可。</p>\n<blockquote>\n<p>参考链接：</p>\n<p>https://blog.csdn.net/a791693310/article/details/81083864</p>\n<p>https://www.jb51.net/article/87979.htm</p>\n</blockquote>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "MySQL AB简介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.8%20MySQLAB%E5%A4%8D%E5%88%B6/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.8%20MySQLAB%E5%A4%8D%E5%88%B6/",
      "content_html": "<h2 id=\"mysql-ab简介\"> MySQL AB简介</h2>\n<p>AB复制又称主从复制，实现的是数据同步。</p>\n<p>如果要做MySQL AB复制，数据库版本尽量保持一致。如果版本不一致，从服务器版本高于主服务器，但是版本不一致不能做双向复制。</p>\n<p>MySQL AB复制有什么好处呢？</p>\n<ul>\n<li>解决宕机带来的数据不一致，因为MySQL AB复制可以实时备份数据；</li>\n<li>减轻数据库服务器压力，多台服务器的性能一般比单台要好。但是MySQL AB复制不适用于大数据量，如果是大数据环境，推荐使用集群。</li>\n</ul>\n<p>​    MySQL复制（replication）是一个异步的复制，从一个MySQL实例（Master）复制到另一个MySQL（Slave）。实现整个主从复制，需要由Master服务器上的IO进程，和Slave服务器上的Sql进程和IO进程共同完成。</p>\n<h2 id=\"主从复制的过程\"> 主从复制的过程</h2>\n<p>​    要实现主从复制，首先必须打开Master端的binary log(bin-log)功能，因为整个MySQL复制过程实际上就是Slave从Master端获取相应的二进制日志，然后再在自己slave端完全顺序的执行日志中所有记录的各种操作。\n主从复制的基本过程：\n​    1）MySQL Slave端的IO进程连接上Master，向Master请求指定日志文件的指定位置（或者从最开始的日志）之后的日志内容；</p>\n<p>​    2）Master接收到来自Slave的IO进程的请求后，负责复制的IO进程根据Slave的请求信息，读取相应日志内容，返回给Slave的IO的进程。并将本次请求读到的bin-log文件名及位置一起返回给Slave端。</p>\n<p>​    3）Slave的IO进程接收到信息后，将接收到的日志内容依次添加Slave端的realy-log文件的最末端，并将读取到的Master端的bin-log的文件名和位置记录到master-info文件中，以便在下一次读取的时候能够清楚的告诉Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我；”</p>\n<p>​    4）Slave的Sql进程监测到relay-log中新增了内容后，会马上解析relay-log的内容成为在Master端真实执行时候的那些可执行的内容，并在自身执行。</p>\n<h3 id=\"主服务器操作\"> 主服务器操作</h3>\n<h4 id=\"全备-并在从机恢复数据\"> 全备，并在从机恢复数据</h4>\n<h4 id=\"开启binlog日志\"> 开启binlog日志</h4>\n<div><pre><code>vim /etc/my.cnf\n[mysqld]\nlog-bin = master\nlog-bin-index = master\nserver-id = 1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>service mysqld restart\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"授权从服务器\"> 授权从服务器</h4>\n<p>授权从服务器，可以传输binlog日志</p>\n<div><pre><code>grant replication slave on *.* to slave@&#39;从服务器&#39; identified by &#39;123&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"从服务器操作\"> 从服务器操作</h3>\n<h4 id=\"导入主服务器的数据\"> 导入主服务器的数据</h4>\n<div><pre><code>mysql -u root &lt; all.sql\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"改配置文件\"> 改配置文件</h4>\n<div><pre><code>vim /etc/my.cnf\n[mysqld]\nserver-id = 2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id=\"配置主服务器的信息\"> 配置主服务器的信息</h4>\n<div><pre><code>&gt;stop slave;\n&gt;change master to\n-&gt; master_host = &#39;主服务器&#39;，\n-&gt;master_user = &#39;slave&#39;,\n-&gt;master_password = &#39;123&#39;,\n-&gt;master_port = 3306,\n-&gt;master_log_file = &#39;mysql-bin.000001&#39;,\n-&gt; master_log_pos=120;\n&gt;start slave;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"校验\"> 校验</h3>\n<div><pre><code>&gt; show slave status\\G\nSlave_IO_Running: Yes\nSlave_SQL_Running: Yes\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>表示成功</p>\n<p>​</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "keepalived简介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.9%20MySQL%E7%9A%84%E4%B8%BB%E4%B8%BB%E5%92%8Ckeepalived/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/mysql/16.9%20MySQL%E7%9A%84%E4%B8%BB%E4%B8%BB%E5%92%8Ckeepalived/",
      "content_html": "<h2 id=\"keepalived简介\"> keepalived简介</h2>\n<p>keepalived是vrrp协议的实现，原生设计目的是为了高可用ipvs服务，keepalived能够配置文件中的定义生成ipvs规则，并能够对各RS的健康状态进行检测；通过共用的虚拟IP地址对外提供服务；每个热备组内同一时刻只有一台主服务器提供服务，其他服务器处于冗余状态，若当前在线的服务器宕机，其虚拟IP地址将会被其他服务器接替（优先级决定接替顺序），实现高可用为后端主机提供服务。</p>\n<p>VRRP全称Virtual Router Redundancy Protocol，即<a href=\"http://en.wikipedia.org/wiki/VRRP\" target=\"_blank\" rel=\"noopener noreferrer\">虚拟路由冗余协议</a>。</p>\n<p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据<a href=\"http://tools.ietf.org/html/rfc5798#section-5.1\" target=\"_blank\" rel=\"noopener noreferrer\">VRRP的优先级</a>来<a href=\"http://en.wikipedia.org/wiki/Virtual_Router_Redundancy_Protocol#Elections_of_master_routers\" target=\"_blank\" rel=\"noopener noreferrer\">选举一个backup当master</a>。这样的话就可以保证路由器的高可用了。</p>\n<h2 id=\"keepalived组件\"> keepalived组件</h2>\n<p>Keepalived组件介绍</p>\n<p><img src=\"images/wKiom1gVgVqxP0nVAADi2pjRuog301.png\" alt=\"wKiom1gVgVqxP0nVAADi2pjRuog301.png\"></p>\n<ul>\n<li>\n<p>core：keepalived核心组件，主进程的启动和维护，全局配置等。</p>\n</li>\n<li>\n<p>vrrp stack：keepalived是基于vrrp协议实现高可用vps服务，vrrp则为相关子进程为其提供服务</p>\n</li>\n<li>\n<p>check：检测keepalived的健康状态相关进程</p>\n</li>\n<li>\n<p>system call:系统调用</p>\n<p>watch dog:监控check和vrrp进程的看管者，check负责检测器子进程的健康状态，当其检测到master上的服务不可用时则通告vrrp将其转移至backup服务器上。</p>\n</li>\n</ul>\n<h2 id=\"mysql主主搭建\"> mysql主主搭建</h2>\n<p>在主从的基础上，互换搭建一下就好了</p>\n<p>不详细介绍</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "安装",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.1%20%E5%AE%89%E8%A3%85/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.1%20%E5%AE%89%E8%A3%85/",
      "content_html": "<h1 id=\"安装\"> 安装</h1>\n<p>当前redis最新稳定版本是4.0，常用版本3.2版本。\nstep1:下载</p>\n<div><pre><code>wget &lt;http://download.redis.io/releases/redis-3.2.8.tar.gz&gt;\n</code></pre>\n<div><span>1</span><br></div></div><p>step2:解压</p>\n<div><pre><code>tar -zxvf redis-3.2.8.tar.gz\n</code></pre>\n<div><span>1</span><br></div></div><p>step3:复制，放到usr/local/redis⽬录下</p>\n<div><pre><code>sudo mv ./redis-3.2.8 /usr/local/redis/\n</code></pre>\n<div><span>1</span><br></div></div><p>step4:进⼊redis⽬录</p>\n<div><pre><code>cd /usr/local/redis/\n</code></pre>\n<div><span>1</span><br></div></div><p>step5:生成\na) 安装c语言编译器gcc</p>\n<div><pre><code>sudo apt-get install gcc\n</code></pre>\n<div><span>1</span><br></div></div><p>b) 安装编译命令make</p>\n<div><pre><code>sudo apt-get install make(这一步可能会出问题，根据提示执行命令)\n</code></pre>\n<div><span>1</span><br></div></div><p>c) 生成</p>\n<div><pre><code>sudo make(比较慢)\n</code></pre>\n<div><span>1</span><br></div></div><p>step6:测试,这段运⾏时间会较⻓</p>\n<div><pre><code>sudo make test\n</code></pre>\n<div><span>1</span><br></div></div><p><img src=\"images/4b9a2195123aef8955b322ab717f01450ba01875.png\" alt=\"Image\"></p>\n<p>解决方法</p>\n<div><pre><code>cd\nwget http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz\nsudo tar xzvf tcl8.6.1-src.tar.gz -C /usr/local/\ncd /usr/local/tcl8.6.1/unix/\nsudo ./configure\nsudo make（时间比较长）\nsudo make install\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>step7:安装,将redis的命令安装到/usr/local/bin/⽬录</p>\n<div><pre><code>sudo make install （时间比较长）\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>常用命令</strong>\na) redis-server  redis服务器\nb) redis-cli  redis命令行客户端\nc) redis-benchmark redis性能测试工具\nd) redis-check-aof  AOF文件修复工具\ne) redis-check-rdb  RDB文件检索工具</p>\n<p>step9:配置⽂件，移动到/etc/⽬录下\n配置⽂件⽬录为/usr/local/redis/redis.conf</p>\n<div><pre><code>sudo cp /usr/local/redis/redis.conf /etc/redis/\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "配置",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.2%20%E9%85%8D%E7%BD%AE/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.2%20%E9%85%8D%E7%BD%AE/",
      "content_html": "<h1 id=\"配置\"> 配置</h1>\n<p>Redis的配置信息在/etc/redis/redis.conf下。\n查看</p>\n<div><pre><code>sudo vi /etc/redis/redis.conf\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"核心配置选项\"> 核心配置选项</h2>\n<p>绑定ip：如果需要远程访问，可将此⾏注释，或绑定⼀个真实ip</p>\n<div><pre><code>bind 127.0.0.1\n</code></pre>\n<div><span>1</span><br></div></div><p>端⼝，默认为6379</p>\n<div><pre><code>port 6379\n</code></pre>\n<div><span>1</span><br></div></div><p>是否以守护进程运⾏\na) 如果以守护进程运⾏，则不会在命令⾏阻塞，类似于服务\nb) 如果以⾮守护进程运⾏，则当前终端被阻塞\nc) 设置为yes表示守护进程，设置为no表示⾮守护进程\nd) 推荐设置为yes</p>\n<div><pre><code>daemonize yes\n</code></pre>\n<div><span>1</span><br></div></div><p>数据⽂件</p>\n<div><pre><code>dbfilename dump.rdb\n</code></pre>\n<div><span>1</span><br></div></div><p>数据⽂件存储路径</p>\n<div><pre><code>dir /var/lib/redis\n</code></pre>\n<div><span>1</span><br></div></div><p>⽇志⽂件</p>\n<div><pre><code>logfile /var/log/redis/redis-server.log\n</code></pre>\n<div><span>1</span><br></div></div><p>数据库，默认有16个</p>\n<div><pre><code>database 16\n</code></pre>\n<div><span>1</span><br></div></div><p>主从复制，类似于双机备份。</p>\n<div><pre><code>slaveof\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "string类型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.4%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/17.4.1%20string%E7%B1%BB%E5%9E%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.4%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/17.4.1%20string%E7%B1%BB%E5%9E%8B/",
      "content_html": "<h1 id=\"string类型\"> string类型</h1>\n<p>字符串类型是Redis中最为基础的数据存储类型，该类型可以接受任何格式的数据，如JPEG图像数据或Json对象描述信息等。在Redis中字符串类型的Value最多可以容纳的数据长度是512M。</p>\n<h2 id=\"保存\"> 保存</h2>\n<p>如果设置的键不存在则为添加，如果设置的键已经存在则修改</p>\n<ul>\n<li>设置键值</li>\n</ul>\n<div><pre><code>set key value\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>设置键值及过期时间，以秒为单位</li>\n</ul>\n<div><pre><code>setex key seconds value\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>设置多个键值</li>\n</ul>\n<div><pre><code>mset key1 value1 key2 value2 ...\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>追加值</li>\n</ul>\n<div><pre><code>append key value\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"中文乱码问题的解决\"> 中文乱码问题的解决</h2>\n<p>a) 退出redis客户端</p>\n<div><pre><code>Exit\n</code></pre>\n<div><span>1</span><br></div></div><p>b) 再次进图redis客户端</p>\n<div><pre><code>Redis-cli --raw\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"获取\"> 获取</h2>\n<ul>\n<li>获取：根据键获取值，如果不存在此键则返回nil</li>\n</ul>\n<div><pre><code>get key\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>根据多个键获取多个值</li>\n</ul>\n<div><pre><code>mget key1 key2 ...\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"删除\"> 删除</h2>\n<p>详⻅下节键的操作，删除键时会将值删除</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "服务器端",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.3%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.3%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4/",
      "content_html": "<h2 id=\"服务器端\"> 服务器端</h2>\n<p>服务器端的命令为redis-server\n可以使⽤help查看帮助⽂档</p>\n<div><pre><code>redis-server --help\n</code></pre>\n<div><span>1</span><br></div></div><p>推荐使⽤服务的⽅式管理redis服务\n启动</p>\n<div><pre><code>sudo service redis start\n</code></pre>\n<div><span>1</span><br></div></div><p>停⽌</p>\n<div><pre><code>sudo service redis stop\n</code></pre>\n<div><span>1</span><br></div></div><p>重启</p>\n<div><pre><code>sudo service redis restart\n</code></pre>\n<div><span>1</span><br></div></div><p>个人习惯</p>\n<div><pre><code>ps -aux|grep redis //查看redis服务器进程\nsudo kill -9 pid //杀死redis服务器\nsudo redis-server /etc/redis/redis.conf //指定加载的配置文件\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"客户端\"> 客户端</h2>\n<p>客户端的命令为redis-cli\n可以使⽤help查看帮助⽂档</p>\n<div><pre><code>redis-cli --help\n</code></pre>\n<div><span>1</span><br></div></div><p>连接redis</p>\n<div><pre><code>redis-cli\n</code></pre>\n<div><span>1</span><br></div></div><p>运⾏测试命令</p>\n<div><pre><code>ping //返回PONG\n</code></pre>\n<div><span>1</span><br></div></div><p>切换数据库\n数据库没有名称，默认有16个，通过0-15来标识，连接redis默认选择第一个数据库</p>\n<div><pre><code>select n\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "键命令",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.4%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/17.4.2%20%E9%94%AE%E5%91%BD%E4%BB%A4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.4%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/17.4.2%20%E9%94%AE%E5%91%BD%E4%BB%A4/",
      "content_html": "<h1 id=\"键命令\"> 键命令</h1>\n<ul>\n<li>查找键\n参数⽀持正则表达式</li>\n</ul>\n<div><pre><code>keys pattern\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>判断键是否存在，\n如果存在返回1，不存在返回0</li>\n</ul>\n<div><pre><code>exists key\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>查看键对应的value的类型</li>\n</ul>\n<div><pre><code>type key\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>删除键</li>\n</ul>\n<div><pre><code>del key1 key2 ...\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>设置过期时间</li>\n</ul>\n<p>以秒为单位，如果没有指定过期时间则⼀直存在，直到使⽤DEL移除</p>\n<div><pre><code>expire key seconds\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>查看有效时间</li>\n</ul>\n<p>以秒为单位</p>\n<div><pre><code>ttl key\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "hash类型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.4%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/17.4.3%20hash%E7%B1%BB%E5%9E%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.4%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/17.4.3%20hash%E7%B1%BB%E5%9E%8B/",
      "content_html": "<h1 id=\"hash类型\"> hash类型</h1>\n<p>hash⽤于存储对象\n对象的结构为属性、值\n值的类型为string</p>\n<h2 id=\"增加、修改\"> 增加、修改</h2>\n<ul>\n<li>设置单个属性</li>\n</ul>\n<div><pre><code>hset key field value\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>设置多个属性</li>\n</ul>\n<div><pre><code>hmset key field1 value1 field2 value2 ...\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"获取\"> 获取</h2>\n<ul>\n<li>获取指定键所有的属性</li>\n</ul>\n<div><pre><code>hkeys key\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>获取⼀个属性的值</li>\n</ul>\n<div><pre><code>hget key field\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>获取多个属性的值</li>\n</ul>\n<div><pre><code>hmget key field1 field2 ...\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>获取所有属性的值</li>\n</ul>\n<div><pre><code>hvals key\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>获取一个hash有多少个属性</li>\n</ul>\n<div><pre><code>hlen key\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"删除\"> 删除</h2>\n<ul>\n<li>删除整个hash键及值，使⽤del命令</li>\n<li>删除属性，属性对应的值会被⼀起删除</li>\n</ul>\n<div><pre><code>hdel key field1 field2 ...\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "list类型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.4%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/17.4.4%20list%E7%B1%BB%E5%9E%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.4%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/17.4.4%20list%E7%B1%BB%E5%9E%8B/",
      "content_html": "<h1 id=\"list类型\"> list类型</h1>\n<ul>\n<li>列表的元素类型为string</li>\n<li>按照插⼊顺序排序</li>\n</ul>\n<h2 id=\"增加\"> 增加</h2>\n<ul>\n<li>在左侧插⼊数据</li>\n</ul>\n<div><pre><code>lpush key value1 value2 ...\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>在右侧插⼊数据</li>\n</ul>\n<div><pre><code>rpush key value1 value2 ...\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>在指定元素的前或后插⼊新元素</li>\n</ul>\n<div><pre><code>linsert key before或after 现有元素 新元素\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"获取\"> 获取</h2>\n<ul>\n<li>\n<p>返回列表⾥指定范围内的元素</p>\n</li>\n<li>\n<p>start、stop为元素的下标索引</p>\n</li>\n<li>\n<p>索引从左侧开始，第⼀个元素为0</p>\n</li>\n<li>\n<p>索引可以是负数，表示从尾部开始计数，如-1表示最后⼀个元素</p>\n</li>\n</ul>\n<div><pre><code>lrange key start stop\n</code></pre>\n<div><span>1</span><br></div></div><p>设置指定索引位置的元素值</p>\n<p>索引从左侧开始，第⼀个元素为0</p>\n<ul>\n<li>索引可以是负数，表示尾部开始计数，如-1表示最后⼀个元素</li>\n</ul>\n<p>lset key index value</p>\n<ul>\n<li>例5：修改键为'a1'的列表中下标为1的元素值为'z'</li>\n</ul>\n<p>lset a1 1 z</p>\n<p><img src=\"images/2d0e9776c8d627c94d31dda913cdee8690173dff.png\" alt=\"Image\"></p>\n<p>删除</p>\n<ul>\n<li>\n<p>删除指定元素</p>\n</li>\n<li>\n<p>将列表中前count次出现的值为value的元素移除</p>\n</li>\n<li>\n<p>count &gt; 0: 从头往尾移除</p>\n</li>\n<li>\n<p>count &lt; 0: 从尾往头移除</p>\n</li>\n<li>\n<p>count = 0: 移除所有</p>\n</li>\n</ul>\n<p>lrem key count value</p>\n<ul>\n<li>例6.1：向列表'a2'中加⼊元素'a'、'b'、'a'、'b'、'a'、'b'</li>\n</ul>\n<p>lpush a2 a b a b a b</p>\n<p><img src=\"images/502fb1c7f71408b5df0098c5ea3cde1263bbbe94.png\" alt=\"Image\"></p>\n<p>例6.2：从'a2'列表右侧开始删除2个'b'</p>\n<p>lrem a2 -2 b</p>\n<ul>\n<li>例6.3：查看列表'py12'的所有元素</li>\n</ul>\n<p>lrange a2 0 -1</p>\n<p><img src=\"images/512611397a7c8691dade0417ac834e0c81b82ea2.png\" alt=\"Image\"></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "下载redis-5.0.0安装包",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.5%20centos7%E5%AE%89%E8%A3%85redis-5.0.0%E4%B8%BB%E4%BB%8E/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.5%20centos7%E5%AE%89%E8%A3%85redis-5.0.0%E4%B8%BB%E4%BB%8E/",
      "content_html": "<h2 id=\"下载redis-5-0-0安装包\"> 下载redis-5.0.0安装包</h2>\n<p>从官网下载安装包</p>\n<div><pre><code>cd /opt\nwget http://download.redis.io/releases/redis-5.0.0.tar.gz\ntar -xvf redis-5.0.0.tar.gz\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"编译安装\"> 编译安装</h2>\n<p>安装gcc依赖</p>\n<div><pre><code>yum -y install gcc\ncd /opt/redis-5.0.0\nmake -j `grep processor /proc/cpuinfo | wc -l`\nmake install\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"编辑配置文件\"> 编辑配置文件</h2>\n<h3 id=\"主服务器\"> 主服务器</h3>\n<div><pre><code>cd /opt\nmv redis-5.0.0 redis\ncd redis\nmkdir {conf,log,data}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><code>vim conf/redis.conf</code>增加以下内容</p>\n<p>bind 中的IP地址为服务器IP地址</p>\n<div><pre><code>################################## NETWORK #####################################\n# 绑定IP地址\nbind *.*.*.*\n\n# 5.0新增保护模式\nprotected-mode yes\n\n# 设置启动端口\nport 6379\n\n# tcp最大并发监听数\ntcp-backlog 511\n\n#客户端空闲N秒后关闭连接(0禁用)\ntimeout 0\n\n#向客户机发送TCP ack的沟通，3.2.1以后默认使用300s\ntcp-keepalive 300\n\n################################# GENERAL #####################################\n# 设置后台启动\ndaemonize yes\n\n# 没有监督互动\nsupervised no\n\n# pid文件位置\npidfile /var/run/redis_6379.pid\n\n# 日志等级\nloglevel notice\n\n# 日志文件位置\nlogfile &quot;/opt/redis/log/redis.log&quot;\n\n# 设置数据库的数量\ndatabases 16\n\n# 显示logo\nalways-show-logo yes\n\n################################ SNAPSHOTTING  ################################\n# rdb通过快照方式进行持久化，每个条件之间是“或”的关系\n# 15分钟（900秒钟）内至少1个键被更改则进行快照\nsave 900 1\n# 5分钟（300秒）内至少10个键被更改则进行快照\nsave 300 10\n# 1分钟（60秒）内至少10000个键被更改则进行快照\nsave 60 10000\n\n# 错误停止写入\nstop-writes-on-bgsave-error yes\n\n# 数据存储前设置开启压缩\nrdbcompression yes\n\n# 对rdb数据进行校验，耗费CPU资源，5.0版本以后可以禁用\nrdbchecksum no\n\n# rdb数据转存的文件名称\ndbfilename dump.rdb\n\n# 数据存储目录\ndir &quot;/opt/redis/data&quot;\n\n################################# REPLICATION #################################\n# 设置同步的主节点地址\n# replicaof IP 端口 \n\n# 主从同步认证密码\nmasterauth &quot;&quot;\n\n# 允许从节点正常响应用户的请求\nreplica-serve-stale-data yes\n\n# 从节点设置为只读\nreplica-read-only yes\n\n# 同步策略为磁盘方式\nrepl-diskless-sync no\n\n# socket同步方式的延迟时间\nrepl-diskless-sync-delay 5\n\n# 是否在slave套接字发送SYNC之后禁用 TCP_NODELAY,如果选择no，数据传输到salve的延迟将会减少但要使用更多的带宽\nrepl-disable-tcp-nodelay no\n\n# 提升为主节点的优先级，数字越小，优先级越高\nreplica-priority 100\n\n################################## SECURITY ###################################\n# 客户端认证密码设置\nrequirepass &quot;&quot;\n\n################################### CLIENTS ####################################\n# 客户端最大连接数\nmaxclients 10000\n\n############################## MEMORY MANAGEMENT ################################\n# 指定Redis最大内存限制\n# maxmemory &lt;bytes&gt;\n\n# 最大内存逐出策略\n# maxmemory-policy noeviction\n\n# 用样本量做检测,设置样本量个数\n# maxmemory-samples 5\n\n# replica-ignore-maxmemory yes\n\n############################# LAZY FREEING ####################################\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\n\n############################## APPEND ONLY MODE ###############################\n# 是否开启AOF备份\nappendonly no\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100 \nauto-aof-rewrite-min-size 64mb \naof-load-truncated yes \naof-use-rdb-preamble yes\n\n################################ LUA SCRIPTING  ###############################\nlua-time-limit 5000\n\n################################ REDIS CLUSTER  ###############################\n# 略，后续补充\n\n########################## CLUSTER DOCKER/NAT support  ########################\n# 略，后续补充\n\n################################## SLOW LOG ###################################\nslowlog-log-slower-than 10000\nslowlog-max-len 128\n\n################################ REMAINING PART ##############################\nlatency-monitor-threshold 0\nnotify-keyspace-events &quot;&quot;\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nstream-node-max-bytes 4096\nstream-node-max-entries 100\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br></div></div><h3 id=\"从服务器\"> 从服务器</h3>\n<p>和主服务器操作相同</p>\n<p>改变<code>redis.conf</code>中bind地址</p>\n<p>打开<code>replicaof</code>并改为<strong>主服务器地址</strong>即可</p>\n<h2 id=\"启动服务\"> 启动服务</h2>\n<div><pre><code>cd /opt/redis/src\n./redis-server /opt/redis/conf/redis.conf\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "redis5.0.4集群搭建",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.6%20redis5.0.4%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.6%20redis5.0.4%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "content_html": "<h2 id=\"redis5-0-4集群搭建\"> redis5.0.4集群搭建</h2>\n<h3 id=\"redis5-0新特性\"> redis5.0新特性</h3>\n<p>Redis 5主要专注于几个重要功能。相比之下Redis 4非常非常专注于操作类型，Redis 5的变化大多是面向用户的。即在现有的基础上增加新的数据类型和操作类型。以下是此版本的主要功能：</p>\n<ol>\n<li>新的Stream数据类型。[1]</li>\n<li>新的Redis模块API：Timers and Cluster API。</li>\n<li>RDB现在存储LFU和LRU信息。</li>\n<li>集群管理器从Ruby（redis-trib.rb）移植到C代码。可以在redis-cli中。查看redis-cli —cluster help了解更多信息。</li>\n<li>新sorted set命令：ZPOPMIN / MAX和阻塞变量。</li>\n<li>主动碎片整理V2。</li>\n<li>增强HyperLogLog实现。</li>\n<li>更好的内存统计报告。</li>\n<li>许多带有子命令的命令现在都有一个HELP子命令。</li>\n<li>客户经常连接和断开连接时性能更好。</li>\n<li>错误修复和改进。</li>\n<li>Jemalloc升级到5.1版</li>\n</ol>\n<p>Redis 4.0大多是5.0的严格子集，应用程序从4.0升级到5.0通常不会碰见问题</p>\n<h3 id=\"集群安装\"> 集群安装</h3>\n<h4 id=\"下载\"> 下载</h4>\n<div><pre><code>mkdir -pv /usr/local/software\ncd /usr/local/software\nwget http://download.redis.io/releases/redis-5.0.4.tar.gz\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id=\"解压编译\"> 解压编译</h4>\n<div><pre><code>tar -xvf redis-5.0.4.tar.gz -C /usr/local/\ncd /usr/local/redis-5.0.4/\nmake -j 4 &amp;&amp; make install\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h4 id=\"修改相关内核参数\"> 修改相关内核参数</h4>\n<p>提前做好下面的准备操作，否则redis日志里会有相应报错</p>\n<p>打开<code>/etc/sysctl.conf</code>配置文件，追加一下参数</p>\n<div><pre><code>net.core.somaxconn = 10240\nvm.overcommit_memory = 1\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>刷新内参参数，使其生效</p>\n<div><pre><code>sysctl -p\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code># echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled\n# vim /etc/rc.local\necho never &gt; /sys/kernel/mm/transparent_hugepage/enabled\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code># tail -10 /etc/security/limits.conf \n#@faculty        soft    nproc           20\n#@faculty        hard    nproc           50\n#ftp             hard    nproc           0\n#@student        -       maxlogins       4\n\n# End of file\n* hard nofile 65535\n* soft nofile 65535\n* soft nproc 65535\n* hard nproc 65535\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h4 id=\"修改配置文件\"> 修改配置文件</h4>\n<p>将配置文件修改为</p>\n<div><pre><code># egrep -v &quot;^#|^$&quot; /usr/local/redis-5.0.4/redis.conf \nbind 0.0.0.0  #安全起见，尽量用本机ip地址\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 0\ndaemonize yes\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile &quot;/usr/local/redis-5.0.4/log/redis.log&quot;\ndatabases 16 \nalways-show-logo yes\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /usr/local/redis-5.0.4/data\nreplica-serve-stale-data yes\nreplica-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nreplica-priority 100\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\nappendonly no\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\nlua-time-limit 5000\ncluster-enabled yes\ncluster-config-file nodes-6379.conf\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events Ex\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nstream-node-max-bytes 4096\nstream-node-max-entries 100\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br></div></div><blockquote>\n<p>线上最好开启密码认证</p>\n<p>databases 最好改一下</p>\n</blockquote>\n<h4 id=\"开启防火墙\"> 开启防火墙</h4>\n<div><pre><code># cat /etc/sysconfig/iptables\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 16379 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n\n# systemctl restart iptables\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><hr>\n<p>以上步骤均在6台主机上执行</p>\n<h4 id=\"初始化redis集群\"> 初始化redis集群</h4>\n<div><pre><code>redis-cli --cluster create 192.168.165.23:6379 192.168.165.24:6379 192.168.165.25:6379 192.168.165.26:6379 192.168.165.27:6379 192.168.165.28:6379 --cluster-replicas 1\n</code></pre>\n<div><span>1</span><br></div></div><p>查看redis集群状态</p>\n<div><pre><code># redis-cli \n127.0.0.1:6379&gt; CLUSTER INFO\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:1\ncluster_stats_messages_ping_sent:1263\ncluster_stats_messages_pong_sent:1190\ncluster_stats_messages_sent:2453\ncluster_stats_messages_ping_received:1185\ncluster_stats_messages_pong_received:1263\ncluster_stats_messages_meet_received:5\ncluster_stats_messages_received:2453\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h3 id=\"相关操作\"> 相关操作</h3>\n<h4 id=\"检查集群\"> 检查集群</h4>\n<div><pre><code>redis-cli --cluster check 192.168.165.23:6379\n</code></pre>\n<div><span>1</span><br></div></div><p>查看集群key、slot、slave分布信息</p>\n<div><pre><code>redis-cli --cluster info 192.168.165.23:6379\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"在线迁移槽\"> 在线迁移槽</h4>\n<ul>\n<li>方式1</li>\n</ul>\n<div><pre><code>redis-cli --cluster reshard 192.168.165.23:6379\n</code></pre>\n<div><span>1</span><br></div></div><p>选择一个目标节点的id</p>\n<p>源选择all</p>\n<ul>\n<li>方式2</li>\n</ul>\n<p><strong>将所有master上的slot重新分配到一个master上</strong></p>\n<div><pre><code>redis-cli --cluster reshard --cluster-from 3a32aec6092e6a22a45c64fa8281e3893e1175a2 --cluster-to f760e5d366738b28df034512faf1f5ac4466b09e --cluster-slots 5461 --cluster-yes 192.168.165.24:6379\nredis-cli --cluster reshard --cluster-from 9fa3ee8869d2d21258e0f2d2b705b787d0342d74 --cluster-to f760e5d366738b28df034512faf1f5ac4466b09e --cluster-slots 5462 --cluster-yes 192.168.165.24:6379\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"平衡各节点槽数量\"> 平衡各节点槽数量</h4>\n<div><pre><code>redis-cli --cluster rebalance --cluster-threshold 192.168.165.24:6379\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"删除集群节点\"> 删除集群节点</h4>\n<div><pre><code>redis-cli --cluster del-node 192.168.165.24:6379 f760e5d366738b28df034512faf1f5ac4466b09e\n</code></pre>\n<div><span>1</span><br></div></div><p>这里必须是没有槽的节点，所以必须先移除槽，否则报错\n被删除的node重启后，依然记得集群中的其它节点，这是需要执行cluster forget nodeid来忘记其它节点</p>\n<h4 id=\"添加集群节点\"> 添加集群节点</h4>\n<div><pre><code>redis-cli --cluster add-node 192.168.165.30:6379 192.168.165.31:6379\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"将集群外部redis实例中的数据导入到集群中去\"> 将集群外部redis实例中的数据导入到集群中去</h4>\n<blockquote>\n<p>在redis5中 redis-cli已经集成集群操作的命令， 根本不用把分片迁移到一个节点再操作</p>\n</blockquote>\n<ol>\n<li>把单实例的密码清除</li>\n</ol>\n<p>把Redis单实例及集群所有节点的密码清理掉，通过如下方式：</p>\n<div><pre><code>redis-cli -h [ip] -p [port] -a [pwd]\nconfig set requirepass &quot;&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ol start=\"2\">\n<li>执行集群导入命令【redis-cli -- cluster import】</li>\n</ol>\n<div><pre><code>redis-cli -h 192.168.165.23 -p 6379 --cluster import 192.168.165.23:6379 --cluster-from 192.168.1.46:6379 --cluster-copy --cluster-replace\n</code></pre>\n<div><span>1</span><br></div></div><p>Cluster-from后面跟外部redis的ip和port\n如果只使用cluster-copy，则要导入集群中的key不能在，否则如下：\n如果集群中已有同样的key，如果需要替换，可以cluster-copy和cluster-replace联用，这样集群中的key就会被替换为外部的</p>\n<ol start=\"3\">\n<li>设置回原来的密码</li>\n</ol>\n<div><pre><code>config set requirepass 原密码\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>注意，如果不清楚密码会报如下错误：\nERR Target instance replied with error: NOAUTH Authentication required.</li>\n</ul>\n<h4 id=\"清空集群数据\"> 清空集群数据</h4>\n<p>redis中数据存储比较多，需要进行清理。我们首先用命令查看集群的主从情况。</p>\n<div><pre><code>redis-cli --cluster check 192.168.165.23:6379\n</code></pre>\n<div><span>1</span><br></div></div><p>连接到每个master 节点上进行数据删除</p>\n<p>连接到数据库中，执行如下命令</p>\n<div><pre><code>flushall\n</code></pre>\n<div><span>1</span><br></div></div><p>参考链接：</p>\n<blockquote>\n<p><a href=\"https://yangxx.net/?p=3453\" target=\"_blank\" rel=\"noopener noreferrer\">https://yangxx.net/?p=3453</a></p>\n<p><a href=\"https://www.jianshu.com/p/7a28d3c92dce\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.jianshu.com/p/7a28d3c92dce</a></p>\n<p><a href=\"https://blog.csdn.net/luoww1/article/details/88425263\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/luoww1/article/details/88425263</a></p>\n<p><a href=\"https://www.cnblogs.com/kevingrace/p/9844310.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/kevingrace/p/9844310.html</a></p>\n</blockquote>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Centos7安装升级Ruby",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.7%20centos7%E5%AE%89%E8%A3%85%E5%8D%87%E7%BA%A7ruby/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.7%20centos7%E5%AE%89%E8%A3%85%E5%8D%87%E7%BA%A7ruby/",
      "content_html": "<h2 id=\"centos7安装升级ruby\"> Centos7安装升级Ruby</h2>\n<p>转载自：<a href=\"https://blog.csdn.net/qq_26440803/article/details/82717244\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/qq_26440803/article/details/82717244</a></p>\n<h3 id=\"在线安装ruby\"> 在线安装ruby</h3>\n<div><pre><code>yum -y install ruby\nruby -v\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"添加ruby仓库\"> 添加ruby仓库</h3>\n<p>添加aliyun镜像</p>\n<div><pre><code>gem sources -a http://mirrors.aliyun.com/rubygems/ \n</code></pre>\n<div><span>1</span><br></div></div><p>删除原来的镜像</p>\n<div><pre><code>gem sources --remove https://rubygems.org/\n</code></pre>\n<div><span>1</span><br></div></div><p>查看当前镜像源</p>\n<div><pre><code>gem sources -l\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"安装ram\"> 安装RAM</h3>\n<blockquote>\n<p>RAM（<a href=\"https://rvm.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Ruby Version Manager</a> ）是一款RAM的命令行工具，可以使用RAM轻松安装，管理Ruby版本。RVM包含了Ruby的版本管理和Gem库管理(gemset)安装</p>\n</blockquote>\n<p>安装</p>\n<div><pre><code>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\ncurl -sSL https://get.rvm.io | bash -s stable\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>更新配置文件，使其立马生效：</p>\n<div><pre><code>source /etc/profile.d/rvm.sh\n</code></pre>\n<div><span>1</span><br></div></div><p>查看RVM版本信息，如果可以代表安装成功。</p>\n<div><pre><code>rvm -v\n</code></pre>\n<div><span>1</span><br></div></div><p>查看Ruby版本</p>\n<div><pre><code>rvm list known\n</code></pre>\n<div><span>1</span><br></div></div><p>选定版本进行安装</p>\n<div><pre><code>rvm install 2.5\n</code></pre>\n<div><span>1</span><br></div></div><p>验证版本</p>\n<div><pre><code>ruby -v\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "redis-dump方式导入导出数据",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.8%20redis-dump%E6%96%B9%E5%BC%8F%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/17.8%20redis-dump%E6%96%B9%E5%BC%8F%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/",
      "content_html": "<h2 id=\"redis-dump方式导入导出数据\"> redis-dump方式导入导出数据</h2>\n<h3 id=\"安装redis-dump工具\"> 安装redis-dump工具</h3>\n<p>安装ruby（略）,详见上一章节</p>\n<div><pre><code>gem install redis-dump -V\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"数据导出\"> 数据导出</h3>\n<p>示例</p>\n<div><pre><code>redis-dump -u 127.0.0.1:6379 -a &#39;zykjdr#558996&#39; &gt; test.json\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"数据导入\"> 数据导入</h3>\n<p>示例</p>\n<div><pre><code>&lt; test.json redis-load -u 127.0.0.1:6379 -a &#39;zykjdr#558996&#39;\n</code></pre>\n<div><span>1</span><br></div></div><p>导入本机的6379端口，没有密码时，可以写成下面这样</p>\n<div><pre><code>&lt; test1.json redis-load\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>如果报错，请使用-n选项，使用请参考官方，请谨慎使用</strong>！</p>\n<p>-n （以二进制形式导入）</p>\n<div><pre><code>&lt; test.json redis-load -n \n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Redis是什么",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/redis%E9%9D%A2%E8%AF%95%E9%A2%98/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/db/redis/redis%E9%9D%A2%E8%AF%95%E9%A2%98/",
      "content_html": "<h2 id=\"redis是什么\"> Redis是什么</h2>\n<p>Redis（Remote Dictionary Server）是C语言开发的一个开源的（遵从BSD协议）高性能键值对（key-value）的内存数据库，可以用作数据库、缓存、消息中间件。它是一种NoSQL（not-only sql，泛指非关系型数据库）的数据库。</p>\n<p>Reidis作为一个内存数据库：</p>\n<ul>\n<li>性能优秀，数据在内存中，读写速度非常快，支持并发10W QPS</li>\n<li>单进程单线程，是线程安全的，采用IO多路复用机制</li>\n<li>丰富的数据类型，支持字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）</li>\n<li>支持数据持久化，可以将内存中数据保存在磁盘中，重启时加载</li>\n<li>主从复制，哨兵，集群</li>\n<li>可以用作分布式锁</li>\n<li>可以作为消息中间件使用，支持发布订阅</li>\n</ul>\n<h2 id=\"五种类型\"> 五种类型</h2>\n<ol>\n<li>**string是redis最基本的类型，可以理解成与memcache一模一样的类型，一个key对应一个value。**value不仅是string，也可以是数字。string类型是二进制安全的，意思是redis的string类型可以包含任何数据，比如jpg图片或者序列化的对象。string类型的值最大能存储512M。</li>\n<li>**Hash是一个键值（key-value）的集合。**redis的hash是一个string的key和value的映射表，Hash特别适合存储对象。常用命令：hget、hset、hgetall等。</li>\n<li>**list列表是简单的字符串列表，按照插入顺序排序。**可以添加一个元素到列表的头部（左边）或者尾部（右边）。常用命令：Ipush、rpush、lpop、lrange（获取列表片段）等。</li>\n<li>**set是string类型的无序集合。**集合是通过hashtable实现的。set中的元素是没有顺序的，而且是没有重复的。常用命令：sdd、spop、smembers、sunion等。</li>\n<li>**zset和set一样是string类型元素的集合，且不允许重复的元素。zset是有序集合。**常用命令：zadd、zrange、zrem、zcard等</li>\n</ol>\n<p><img src=\"images/640.webp\" alt=\"img\"></p>\n<h2 id=\"为什么单线程的redis这么快\"> 为什么单线程的redis这么快</h2>\n<ul>\n<li>Redis完全基于内存，绝大部分请求是纯粹的内存操作，非常迅速，数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的复杂度是O(1)</li>\n<li>数据结构简单，对数据操作也简单</li>\n<li>采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的CPU切换，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有死锁问题导致的性能消耗</li>\n<li>使用多路复用IO模型，非阻塞IO</li>\n</ul>\n<h2 id=\"redis相比memcached有哪些优势\"> Redis相比memcached有哪些优势</h2>\n<ul>\n<li>存储方式：memecache会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。redis有部分数据存在硬盘上，这样能保证数据的持久性。</li>\n<li>数据支持类型：memcache对数据类型的支持简单，只支持简单的key-value，而redis支持五种数据类型。</li>\n<li>使用底层模型不同：它们之间底层实现方式以及与客户端之间通信的应用协议不一样。redis直接自己构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</li>\n<li>value的大小：redis可以达到1GB，而memcache只有1MB。</li>\n</ul>\n<h2 id=\"redis的淘汰策略\"> Redis的淘汰策略</h2>\n<p><img src=\"images/640-1578796973640.webp\" alt=\"img\"></p>\n<p>补充一下：Redis4.0加入了LFU(least frequency use)淘汰策略，包括volatile-lfu和allkeys-lfu，通过统计访问频率，将访问频率最少，即最不经常使用的KV淘汰。</p>\n<h2 id=\"redis提供了哪几种持久化方式\"> Redis提供了哪几种持久化方式</h2>\n<ul>\n<li>RDB：在指定的时间间隔能对你的数据进行快照存储</li>\n<li>AOF：记录每次对服务器写的操作，当服务器重启时，会重新执行这些命令来恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾。redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大</li>\n</ul>\n<p>如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式。</p>\n<p>你也可以同时开启两种持久化方式, 在这种情况下, 当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</p>\n<h2 id=\"如何选择合适的持久化方式\"> 如何选择合适的持久化方式</h2>\n<p>一般来说，如果想达到足以媲美postgresql的数据安全性，应该同时使用两种持久化功能；</p>\n<p>如果非常关心你的数据，但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。</p>\n<p>AOF将Redis执行的每一条命令追加到磁盘中，处理巨大的写入会降低Redis的性能，不知道你是否可以接受。</p>\n<p>有很多用户都只使用AOF持久化，但并不推荐这种方式：因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快。</p>\n<h2 id=\"主从复制简介及过程\"> 主从复制简介及过程</h2>\n<p>主从配置结合哨兵模式能解决单点故障问题，提高redis可用性。从节点仅提供读操作，主节点提供写操作。对于读多写少的状况，可给主节点配置多个从节点，从而提高响应效率。</p>\n<p>主从复制的过程：</p>\n<ul>\n<li>从节点执行slave of[master IP][master prot]，保存主节点信息</li>\n<li>从节点中的定时任务发现从节点信息，建立和主节点的socket连接</li>\n<li>从节点发送Ping信号，主节点返回Pong，两遍能互相通信</li>\n<li>连接建立后，主节点将所有数据发送给从节点（数据同步）</li>\n<li>主节点把当前的数据同步给从节点后，便完成了复制的建立过程。接下来，主节点就会持续的把写命令发送给从节点，保证主从数据一致性。</li>\n</ul>\n<h2 id=\"数据同步的过程\"> 数据同步的过程</h2>\n<p><code>redis2.8</code>之前使用<code>sync [runid] [offset]</code>同步命令；</p>\n<p><code>redis2.8</code>之后使用<code>psync [runid] [offset]</code>命令。</p>\n<p>两者不同：<code>sync</code>命令仅支持全量复制过程，<code>psync</code>支持全量和部分复制。介绍同步之前，先介绍几个概念：</p>\n<ul>\n<li><code>runid</code>：每个redis节点启动都会生成唯一uuid，每次redis重启后，<code>runid</code>都会发生变化。</li>\n<li><code>offset</code>：主节点和从节点都各自维护自己的主从复制偏移量offset，当主节点有写入命令时，<code>offset=offset+命令的字节长度</code>。从节点在收到主节点发送的命令后，也会增加自己的offset，并把自己的offset发送给主节点。这样，主节点同时保持自己的offset和从节点的offset，通过对比offset来判断主从节点数据是否一致。</li>\n<li><code>repl_backlog_size</code>：保存在主节点上的一个固定长度的先进先出队列，默认大小是1MB。\n<ul>\n<li>主节点发送数据给从节点工程中，主节点还会进行一些写操作，这时候的数据存储在复制缓冲区中。从节点同步主节点数据完成后，主节点将缓冲区的数据继续发送给从节点，用于部分复制。</li>\n<li>主节点响应写命令时，不但会把命令发送给从节点，还会写入复制积压缓冲区，用于复制命令丢失的数据补救。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/image-20191222150735579.png\" alt=\"image-20191222150735579\"></p>\n<p>上面是psync的执行流程：</p>\n<p>从节点发送<code>psync [runid] [offset]</code> 命令，主节点有三种响应：</p>\n<ul>\n<li>FULLRESYNC：第一次连接，进行全量复制</li>\n<li>CONTINUE：进行部分复制</li>\n<li>ERR：不支持psync命令，进行全量复制</li>\n</ul>\n<h2 id=\"全量复制和部分复制的过程\"> 全量复制和部分复制的过程</h2>\n<p><img src=\"images/640-1578797079401.webp\" alt=\"img\"></p>\n<p>上面是全量复制的流程。主要有以下几步：</p>\n<ul>\n<li>从节点发送psync ？ -1命令（因为第一次发送，不知道主节点的runid，所以为？，因为是第一次复制，所以offset=-1）。</li>\n<li>主节点发现从节点是第一次复制，返回FULLRESYNC {runId} {offset}，runId是主节点的runId，offset是主节点目前的offset。</li>\n<li>从节点接收主节点信息后，保存info中。</li>\n<li>主节点在发送FULLRESYNC后，启动bgsave命令，生产RDB文件（数据持久化）。</li>\n<li>主节点发送RDB文件给从节点。到从节点加载数据完成这段期间主节点的写命令放入缓冲区。</li>\n<li>从节点清理自己的数据库数据。</li>\n<li>从节点加载RDB文件，将数据保存到自己的数据库中。如果从节点开启了AOF，从节点会异步重写AOF文件。</li>\n</ul>\n<p>关于部分复制有以下几点说明：</p>\n<ul>\n<li>部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施，使用<code>psync [runId] [offset]</code>命令实现。当从节点正在复制主节点时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向主节点要求补发丢失的命令数据，主节点的复制积压缓冲区将这部分直接发送给从节点，这样就可以保持主从节点复制的一致性。补发的这部分数据一般远远小于全量数据。</li>\n<li>主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内的复制积压缓冲区依然可以保存最近一段时间的写命令数据。</li>\n<li>当主从连接恢复后，由于从节点之前保存了自己复制的偏移量和主节点的运行ID。因此会把他们当做psync参数发送给主节点，要求进行部分复制。</li>\n<li>主节点接收到psync命令后首先核对参数runId是否与自身一致，如果一致，说明之前复制的是当前主节点；之后根据参数offset在复制积压缓冲区中查找，如果offset之后的数据存在，则对从节点发送+continue命令，表示可以进行部分复制。因为缓冲区大小固定，若发生缓冲溢出，则进行全量复制。</li>\n<li>主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。</li>\n</ul>\n<h2 id=\"redis有哪几种数据淘汰策略\"> Redis有哪几种数据淘汰策略</h2>\n<ul>\n<li>\n<p>noeviction:返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）</p>\n</li>\n<li>\n<p>allkeys-lru: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。</p>\n</li>\n<li>\n<p>volatile-lru: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。</p>\n</li>\n<li>\n<p>allkeys-random: 回收随机的键使得新添加的数据有空间存放。</p>\n</li>\n<li>\n<p>volatile-random: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</p>\n</li>\n<li>\n<p>volatile-ttl: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。</p>\n</li>\n</ul>\n<h2 id=\"为什么redis需要把所有数据放到内存中\"> 为什么Redis需要把所有数据放到内存中</h2>\n<p>Redis为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以redis具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘I/O速度为严重影响redis的性能。在内存越来越便宜的今天，redis将会越来越受欢迎。 如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。</p>\n<h2 id=\"哨兵有哪些功能\"> 哨兵有哪些功能</h2>\n<p><img src=\"images/640-1578798554512.webp\" alt=\"img\"></p>\n<p>如图，是Redis Sentinel（哨兵）的架构图。Redis Sentinel（哨兵）主要功能包括主节点存活检测、主从运行情况检测、自动故障转移、主从切换。Redis Sentinel最小配置是一主一从。</p>\n<p>Redis的Sentinel系统可以用来管理多个Redis服务器，该系统可以执行以下四个任务：</p>\n<ul>\n<li>监控：不断检查主服务器和从服务器是否正常运行。</li>\n<li>通知：当被监控的某个redis服务器出现问题，Sentinel通过API脚本向管理员或者其他应用程序发出通知。</li>\n<li>自动故障转移：当主节点不能正常工作时，Sentinel会开始一次自动的故障转移操作，它会将与失效主节点是主从关系的其中一个从节点升级为新的主节点，并且将其他的从节点指向新的主节点，这样就避免了人工干预。</li>\n<li>配置提供者：在Redis Sentinel模式下，客户端应用在初始化时连接的是Sentinel节点集合，从中获取主节点的信息。</li>\n</ul>\n<h2 id=\"redis如何设置密码及验证密码\"> Redis如何设置密码及验证密码</h2>\n<p>设置密码：config set requirepass 123456</p>\n<p>授权密码：auth 123456</p>\n<h2 id=\"redis哈希槽的概念\"> Redis哈希槽的概念</h2>\n<p>Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。</p>\n<h2 id=\"redis集群之间是如何复制的\"> Redis集群之间是如何复制的</h2>\n<p>异步复制</p>\n<h2 id=\"redis集群如何选择数据库\"> Redis集群如何选择数据库</h2>\n<p>Redis集群目前无法做数据库选择，默认在0数据库。</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "由来",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/git/git-basic/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/git/git-basic/",
      "content_html": "<h2 id=\"由来\"> 由来</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/git.png\" alt=\"git\"></p>\n<blockquote>\n<p>要不说人家是大佬呢，一言不合就自己写一个👍</p>\n</blockquote>\n<h2 id=\"安装\"> 安装</h2>\n<p>下载对应操作系统的 Git 客户端版本 https://git-scm.com/downloads</p>\n<h3 id=\"linux\"> Linux</h3>\n<p>在<code>centos</code>上安装</p>\n<div><pre><code>$ yum <span>install</span> <span>git</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"windows\"> windows</h3>\n<p>下载对应的32位或者64位版本，点击安装即可</p>\n<div><pre><code>$ <span>git</span> --version <span># 查看版本号</span>\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"mac\"> Mac</h3>\n<p>用<code>homebrew</code>命令安装</p>\n<div><pre><code>$ brew <span>install</span> <span>git</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"核心概念\"> 核心概念</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/git%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png\" alt=\"git基本流程\"></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Workspace</td>\n<td>工作区：<code>.git</code>文件所在的目录就是工作区，一般是项目的根目录</td>\n</tr>\n<tr>\n<td>Index/Stage</td>\n<td>暂存区：介于工作区和仓库区之间，暂存修改的</td>\n</tr>\n<tr>\n<td>Repository</td>\n<td>仓库区/本地仓库：git初始化后，会在当前目录生成一个<code>.git</code>目录，这就是版本库</td>\n</tr>\n<tr>\n<td>Remote</td>\n<td>远程仓库：网络上的另一个版本库，可以和本地库交互</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"git-的基本工作流程\"> git 的基本工作流程</h3>\n<ol>\n<li>在工作目录中修改文件。</li>\n<li>暂存文件，将文件的快照放入暂存区域。</li>\n<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\n</ol>\n<h3 id=\"git-文件的生命周期\"> git 文件的生命周期</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/git%E6%96%87%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.png\" alt=\"git文件的生命周期2\"></p>\n<ol>\n<li>\n<p>未追踪的文件（Untracked）在 <code>git add</code> 之后会变成已暂存（staged）状态。</p>\n</li>\n<li>\n<p>未修改的文件（Unmodified）在被修改编辑之后会变成已修改（modified）状态。</p>\n</li>\n<li>\n<p>已修改（modified）的文件在 <code>git add</code>之后会变成已暂存（staged）状态。</p>\n</li>\n<li>\n<p>已暂存的文件（staged）在 <code>git commit</code> 之后会变成未修改（Unmodified）状态。</p>\n</li>\n<li>\n<p>未修改的文件（Unmodified）在 <code>git rm</code> 之后会变成未跟踪（Untracked）状态(注意git rm会删除掉指定的文件)。</p>\n</li>\n</ol>\n<h3 id=\"git-的三种状态\"> git 的三种状态</h3>\n<ul>\n<li>已修改（modified） 表示修改了文件，但还没保存到数据库中，目前在工作目录（Workspace）</li>\n<li>已暂存（staged） 表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中，目前在暂存区域（Index）</li>\n<li>已提交（committed） 表示数据已经安全的保存在本地仓库中，目前在本地仓库（Repository）</li>\n</ul>\n<h3 id=\"git-的文件分类\"> git 的文件分类</h3>\n<ul>\n<li>追踪的 Tracked，已经加入版本库中的文件</li>\n<li>未追踪的 Untracked，未加入到版本库中的，未被管理的文件</li>\n<li>忽略的 Ignored， git 不再关注的文件，例如一些临时文件</li>\n</ul>\n<p><strong><code>.gitignore</code>文件</strong></p>\n<p>书写格式规范</p>\n<ul>\n<li>所有空行或者以 <code>＃</code> 开头的行都会被 Git 忽略。</li>\n<li>可以使用标准的 glob 模式匹配。</li>\n<li>匹配模式可以以（<code>/</code>）开头防止递归。</li>\n<li>匹配模式可以以（<code>/</code>）结尾指定目录。</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li>\n</ul>\n<blockquote>\n<p>详解参考 https://github.com/github/gitignore</p>\n</blockquote>\n<p><strong>glob模式</strong></p>\n<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。</p>\n<p>星号（<code>*</code>）匹配零个或多个任意字符；</p>\n<p><code>[abc]</code> 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；</p>\n<p>问号（<code>?</code>）只匹配一个任意字符；</p>\n<p>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）;</p>\n<p>使用两个星号（<code>*</code>) 表示匹配任意中间目录，比如<code>a/**/z</code> 可以匹配 <code>a/z</code>, <code>a/b/z</code> 或 <code>a/b/c/z</code>等。</p>\n<h2 id=\"git基本操作\"> git基本操作</h2>\n<h3 id=\"新建代码仓库\"> 新建代码仓库</h3>\n<div><pre><code><span># 在当前目录新建一个Git代码库</span>\n$ <span>git</span> init\n\n<span># 新建一个目录，将其初始化为Git代码库</span>\n$ <span>git</span> init <span>[</span>project-name<span>]</span>\n\n<span># 下载一个项目和它的整个代码历史</span>\n$ <span>git</span> clone <span>[</span>url<span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"设置用户信息\"> 设置用户信息</h3>\n<p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置)</p>\n<div><pre><code><span># 设置提交代码时的用户信息</span>\n$ <span>git</span> config <span>[</span>--global<span>]</span> user.name <span>\"[name]\"</span>\n$ <span>git</span> config <span>[</span>--global<span>]</span> user.email <span>\"[email address]\"</span>\n\n<span># 显示当前的Git配置</span>\n$ <span>git</span> config --list\n\n<span># 编辑Git配置文件</span>\n$ <span>git</span> config -e <span>[</span>--global<span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"添加-删除文件\"> 添加/删除文件</h3>\n<div><pre><code><span># 添加指定文件到暂存区</span>\n$ <span>git</span> <span>add</span> <span>[</span>file1<span>]</span> <span>[</span>file2<span>]</span> <span>..</span>.\n\n<span># 添加指定目录到暂存区，包括子目录</span>\n$ <span>git</span> <span>add</span> <span>[</span>dir<span>]</span>\n\n<span># 添加当前目录的所有文件到暂存区</span>\n$ <span>git</span> <span>add</span> <span>.</span>\n\n<span># 删除工作区文件，并且将这次删除放入暂存区</span>\n$ <span>git</span> <span>rm</span> <span>[</span>file1<span>]</span> <span>[</span>file2<span>]</span> <span>..</span>.\n\n<span># 改名文件，并且将这个改名放入暂存区</span>\n$ <span>git</span> <span>mv</span> <span>[</span>file-original<span>]</span> <span>[</span>file-renamed<span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><blockquote>\n<p>⚠️ 这一步是把文件的当前变化增加到暂存区中，也就是以后这个文件那需要版本库来跟踪管理，注意这不是提交。</p>\n</blockquote>\n<div><pre><code><span># 将文件从暂存转成未暂存，从版本库中删除，但不删除工作目录的该文件，即文件恢复成不追踪的状态</span>\n$ <span>git</span> <span>rm</span> --cached <span>file</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"代码提交\"> 代码提交</h3>\n<p>git的提交分为两个步骤：</p>\n<ol>\n<li>暂存变更：add作用是把新文件或者文件新的改动添加到一个暂存区stage，也就是加入到index中</li>\n<li>提交变更：commit提交的是暂存区中的改动，而不是物理文件目前的改动，提交到当前分支，默认是master</li>\n</ol>\n<div><pre><code><span># 提交暂存区到仓库区</span>\n$ <span>git</span> commit -m <span>[</span>message<span>]</span>\n\n<span># 提交暂存区的指定文件到仓库区</span>\n$ <span>git</span> commit <span>[</span>file1<span>]</span> <span>[</span>file2<span>]</span> <span>..</span>. -m <span>[</span>message<span>]</span>\n\n<span># 提交工作区自上次commit之后的变化，直接到仓库区</span>\n$ <span>git</span> commit -a\n\n<span># 提交时显示所有diff信息</span>\n$ <span>git</span> commit -v\n\n<span># 将add和commit合为一步</span>\n$ <span>git</span> commit -am <span>'message'</span>\n\n<span># 使用一次新的commit，替代上一次提交</span>\n<span># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>\n$ <span>git</span> commit --amend -m <span>[</span>message<span>]</span>\n\n<span># 重做上一次commit，并包括指定文件的新变化</span>\n$ <span>git</span> commit --amend <span>[</span>file1<span>]</span> <span>[</span>file2<span>]</span> <span>..</span>.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h3 id=\"远程同步\"> 远程同步</h3>\n<div><pre><code><span># 从远程仓库中抓取和拉取， 它并不会自动合并或修改你当前的工作，要手动合并入你的工作</span>\n$ <span>git</span> fetch <span>[</span>remote<span>]</span>\n\n<span># 列出所有远程仓库</span>\n$ <span>git</span> remote\n\n<span># 详细列出所有远程仓库</span>\n$ <span>git</span> remote -v\n\n<span># 显示某个远程仓库的信息</span>\n$ <span>git</span> remote show <span>[</span>remote<span>]</span>\n\n<span># 增加一个新的远程仓库，并命名</span>\n$ <span>git</span> remote <span>add</span> <span>[</span>shortname<span>]</span> <span>[</span>url<span>]</span>\n\n<span># 取回远程仓库的变化，并与本地分支合并</span>\n$ <span>git</span> pull  <span>[</span>remote<span>]</span> <span>[</span>branch<span>]</span>\n\n<span># 上传本地指定分支到远程仓库</span>\n<span># -u 第一次远程推送的时候加上，以后就可以不使用 -u 参数，可以 git push origin master,也可以 git push都使用默认</span>\n$ <span>git</span> push <span>[</span>-u<span>]</span> <span>[</span>remote<span>]</span> <span>[</span>branch<span>]</span>\n\n<span># 强行推送当前分支到远程仓库，即使有冲突</span>\n$ <span>git</span> push <span>[</span>remote<span>]</span> --force\n\n<span># 推送所有分支到远程仓库</span>\n$ <span>git</span> push <span>[</span>remote<span>]</span> --all\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><blockquote>\n<p>远程版本库名<code>origin</code>，这是个习惯用法，将建立origin和后面url的映射，这些信息保存在<code>.git/config</code>文件的<code>[remote &quot;origin&quot;]</code>端中。</p>\n</blockquote>\n<p>分支</p>\n<h2 id=\"分支-标签\"> 分支/标签</h2>\n<h3 id=\"分支\"> 分支</h3>\n<div><pre><code><span># 列出所有本地分支</span>\n$ <span>git</span> branch\n\n<span># 列出所有远程分支</span>\n$ <span>git</span> branch -r\n\n<span># 列出所有本地分支和远程分支</span>\n$ <span>git</span> branch -a\n\n<span># 新建一个分支，但依然停留在当前分支</span>\n$ <span>git</span> branch <span>[</span>newbranch<span>]</span>\n\n<span># 新建一个本地分支，并切换到该分支</span>\n<span># 等价于这两个命令合在一起 git branch newbranch; git checkout newbranch</span>\n$ <span>git</span> checkout -b <span>[</span>newbranch<span>]</span>\n\n<span># 新建一个分支，指向指定commit</span>\n$ <span>git</span> branch <span>[</span>branch<span>]</span> <span>[</span>commit<span>]</span>\n\n<span># 新建一个分支，与指定的远程分支建立追踪关系</span>\n$ <span>git</span> branch --track <span>[</span>branch<span>]</span> <span>[</span>remote-branch<span>]</span>\n\n<span># 切换到指定分支，并更新工作区</span>\n$ <span>git</span> checkout <span>[</span>branch-name<span>]</span>\n\n<span># 切换到上一个分支</span>\n$ <span>git</span> checkout -\n\n<span># 建立追踪关系，在现有分支与指定的远程分支之间</span>\n$ <span>git</span> branch --set-upstream <span>[</span>branch<span>]</span> <span>[</span>remote-branch<span>]</span>\n\n<span># 合并指定分支到当前分支</span>\n$ <span>git</span> merge <span>[</span>branch<span>]</span>\n\n<span># 选择一个commit，合并进当前分支</span>\n$ <span>git</span> cherry-pick <span>[</span>commit<span>]</span>\n\n<span># 删除本地分支</span>\n$ <span>git</span> branch -d <span>[</span>branch-name<span>]</span>\n\n<span># 删除远程分支</span>\n$ <span>git</span> push origin --delete <span>[</span>branch-name<span>]</span>\n$ <span>git</span> branch -dr <span>[</span>remote/branch<span>]</span>\n\n<span># 检出版本v2.0</span>\n$ <span>git</span> checkout v2.0\n\n<span># 从远程分支develop创建新本地分支devel并检出</span>\n$ <span>git</span> checkout -b devel origin/develop\n\n<span># 检出head版本的README文件（可用于修改错误回退）</span>\n$ <span>git</span> checkout -- README     \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><h3 id=\"标签\"> 标签</h3>\n<div><pre><code><span># 列出所有tag</span>\n$ <span>git</span> tag\n\n<span># 新建一个tag在当前commit</span>\n$ <span>git</span> tag <span>[</span>tag<span>]</span>\n\n<span># 新建一个tag在指定commit</span>\n$ <span>git</span> tag <span>[</span>tag<span>]</span> <span>[</span>commit<span>]</span>\n\n<span># 删除本地tag</span>\n$ <span>git</span> tag -d <span>[</span>tag<span>]</span>\n\n<span># 删除远程tag</span>\n$ <span>git</span> push origin :refs/tags/<span>[</span>tagName<span>]</span>\n\n<span># 查看tag信息</span>\n$ <span>git</span> show <span>[</span>tag<span>]</span>\n\n<span># 提交指定tag</span>\n$ <span>git</span> push <span>[</span>remote<span>]</span> <span>[</span>tag<span>]</span>\n\n<span># 提交所有tag</span>\n$ <span>git</span> push <span>[</span>remote<span>]</span> --tags\n\n<span># 新建一个分支，指向某个tag</span>\n$ <span>git</span> checkout -b <span>[</span>branch<span>]</span> <span>[</span>tag<span>]</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h2 id=\"查看信息\"> 查看信息</h2>\n<div><pre><code><span># 显示有变更的文件</span>\n$ <span>git</span> status\n\n<span># 显示指定文件是什么人在什么时间修改过</span>\n$ <span>git</span> blame <span>[</span>file<span>]</span>\n\n<span># 显示某次提交的元数据和内容变化</span>\n$ <span>git</span> show <span>[</span>commit<span>]</span>\n\n<span># 显示某次提交发生变化的文件</span>\n$ <span>git</span> show --name-only <span>[</span>commit<span>]</span>\n\n<span># 显示某次提交时，某个文件的内容</span>\n$ <span>git</span> show <span>[</span>commit<span>]</span>:<span>[</span>filename<span>]</span>\n\n<span># 显示当前分支的最近几次提交</span>\n$ <span>git</span> reflog\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"diff-比较\"> <code>diff</code> 比较</h3>\n<div><pre><code><span># 显示暂存区和工作区的差异</span>\n$ <span>git</span> <span>diff</span> <span>[</span>file<span>]</span>\n\n<span># 显示暂存区和上一个commit的差异</span>\n$ <span>git</span> <span>diff</span> --cached <span>[</span>file<span>]</span>\n\n<span># 显示工作区与当前分支最新commit之间的差异</span>\n$ <span>git</span> <span>diff</span> HEAD <span>[</span>file<span>]</span>\n\n<span># 显示两次提交之间的差异</span>\n$ <span>git</span> <span>diff</span> <span>[</span>first-branch<span>]</span><span>..</span>.<span>[</span>second-branch<span>]</span>\n\n<span># 显示今天你写了多少行代码</span>\n$ <span>git</span> <span>diff</span> --shortstat <span>\"@{0 day ago}\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p><strong>HEAD</strong>\nHEAD 可以看做是一个游标，一般是指向当前分支最后一次提交。</p>\n<p>HEAD 的值存储在<code>.git/HEAD</code>中。</p>\n<table>\n<thead>\n<tr>\n<th>表示</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HEAD</td>\n<td>指代最后一次 commit</td>\n</tr>\n<tr>\n<td>HEAD^</td>\n<td>指代上一次提交</td>\n</tr>\n<tr>\n<td>HEAD^^</td>\n<td>指代上上一次提交</td>\n</tr>\n<tr>\n<td>HEAD~n</td>\n<td>表示倒数第n次提交</td>\n</tr>\n</tbody>\n</table>\n<p><code>log</code> 提交历史</p>\n<div><pre><code><span># 显示当前分支的版本历史</span>\n$ <span>git</span> log\n\n<span># 显示commit历史，以及每次commit发生变更的文件</span>\n$ <span>git</span> log --stat\n\n<span># 搜索提交历史，根据关键词</span>\n$ <span>git</span> log -S <span>[</span>keyword<span>]</span>\n\n<span># 显示某个commit之后的所有变动，每个commit占据一行</span>\n$ <span>git</span> log <span>[</span>tag<span>]</span> HEAD --pretty<span>=</span>format:%s\n\n<span># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</span>\n$ <span>git</span> log <span>[</span>tag<span>]</span> HEAD --grep feature\n\n<span># 显示某个文件的版本历史，包括文件改名</span>\n$ <span>git</span> log --follow <span>[</span>file<span>]</span>\n$ <span>git</span> whatchanged <span>[</span>file<span>]</span>\n\n<span># 显示指定文件相关的每一次diff</span>\n$ <span>git</span> log -p <span>[</span>file<span>]</span>\n\n<span># 显示过去5次提交</span>\n$ <span>git</span> log -5 --pretty --oneline\n\n<span># 显示所有提交过的用户，按提交次数排序</span>\n$ <span>git</span> shortlog -sn\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h2 id=\"撤销\"> 撤销</h2>\n<ul>\n<li>\n<p>checkout 检出</p>\n<p>checkout 用于创建、切换分支，或恢复工作区文件。</p>\n<p>注意，checkout 会重写工作区，这个命令还是有危险性的。</p>\n</li>\n<li>\n<p>reset 重置</p>\n<p>reset 操作，要慎重，用于版本回滚，再恢复，但也要慎重使用。</p>\n</li>\n<li>\n<p>revert 撤销</p>\n<p>revert 主要用在主分支上，保留信息。在工作分支上，可以采用 reset 。</p>\n</li>\n</ul>\n<div><pre><code><span># 列出暂存区可以被检出的文件</span>\n$ <span>git</span> checkout\n\n<span># 恢复暂存区的指定文件到工作区</span>\n$ <span>git</span> checkout <span>[</span>file<span>]</span>\n\n<span># 恢复某个commit的指定文件到暂存区和工作区</span>\n$ <span>git</span> checkout <span>[</span>commit<span>]</span> <span>[</span>file<span>]</span>\n\n<span># 恢复暂存区的所有文件到工作区</span>\n$ <span>git</span> checkout <span>.</span>\n\n<span># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>\n$ <span>git</span> reset <span>[</span>file<span>]</span>\n\n<span># 重置暂存区与工作区，与上一次commit保持一致</span>\n$ <span>git</span> reset --hard\n\n<span># 显示 commit 的信息，只要HEAD发生变化，就可以在这里看到</span>\n$ <span>git</span> reflog\n\n<span># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>\n$ <span>git</span> reset <span>[</span>commit<span>]</span>\n\n<span># 重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变</span>\n$ <span>git</span> reset --soft commit\n\n<span># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>\n$ <span>git</span> reset --hard <span>[</span>commit<span>]</span>\n\n<span># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>\n$ <span>git</span> reset --keep <span>[</span>commit<span>]</span>\n\n<span># 新建一个commit，用来撤销指定commit</span>\n<span># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>\n$ <span>git</span> revert <span>[</span>commit<span>]</span>\n\n<span># 暂时将未提交的变化移除，稍后再移入</span>\n$ <span>git</span> stash\n$ <span>git</span> stash pop\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h2 id=\"其他\"> 其他</h2>\n<div><pre><code><span>git</span> config --global color.ui <span>true</span>                         <span># git status等命令自动着色</span>\n<span>git</span> config --global color.status auto\n<span>git</span> config --global color.diff auto\n<span>git</span> config --global color.branch auto\n<span>git</span> config --global color.interactive auto\n<span>git</span> config --global --unset http.proxy                    <span># remove  proxy configuration on git</span>\n<span>git</span> clone git+ssh://git@192.168.53.168/VT.git             <span># clone远程仓库</span>\n<span>git</span> clone -b <span>&lt;</span>指定分支名<span>></span> <span>&lt;</span>远程仓库地址<span>></span>                      <span># clone远程指定 分支</span>\n<span>git</span> log -p -m\n<span>git</span> show dfb02e6e4f2f7b573337763e5c0013802e392818         <span># 显示某个提交的详细内容</span>\n<span>git</span> show dfb02                                            <span># 可只用commitid的前几位</span>\n<span>git</span> show HEAD                                             <span># 显示HEAD提交日志</span>\n<span>git</span> show HEAD^                                            <span># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span>\n<span>git</span> tag -a v2.0 -m <span>'xxx'</span>                                  <span># 增加v2.0的tag</span>\n<span>git</span> show v2.0                                             <span># 显示v2.0的日志及详细内容</span>\n<span>git</span> log v2.0                                              <span># 显示v2.0的日志</span>\n<span>git</span> <span>diff</span> HEAD -- ./lib                                    <span># 比较与HEAD版本lib目录的差异</span>\n<span>git</span> <span>diff</span> origin/master<span>..</span>master                            <span># 比较远程分支master上有本地分支master上没有的</span>\n<span>git</span> <span>diff</span> origin/master<span>..</span>master --stat                     <span># 只显示差异的文件，不显示具体内容</span>\n<span>git</span> remote <span>add</span> origin git+ssh://git@192.168.53.168/VT.git <span># 增加远程定义（用于push/pull/fetch）</span>\n<span>git</span> branch --contains <span>50089</span>                               <span># 显示包含提交50089的分支</span>\n<span>git</span> branch --merged                                       <span># 显示所有已合并到当前分支的分支</span>\n<span>git</span> branch --no-merged                                    <span># 显示所有未合并到当前分支的分支</span>\n<span>git</span> branch -m master master_copy                          <span># 本地分支改名</span>\n<span>git</span> checkout -b master_copy                               <span># 从当前分支创建新分支master_copy并检出</span>\n<span>git</span> checkout -b master master_copy                        <span># 上面的完整版</span>\n<span>git</span> checkout features/performance                         <span># 检出已存在的features/performance分支</span>\n<span>git</span> checkout --track hotfixes/BJVEP933                    <span># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span>\n<span>git</span> checkout -b devel origin/develop                      <span># 从远程分支develop创建新本地分支devel并检出</span>\n<span>git</span> checkout -- README                                    <span># 检出head版本的README文件（可用于修改错误回退）</span>\n<span>git</span> merge origin/master                                   <span># 合并远程master分支至当前分支</span>\n<span>git</span> cherry-pick ff44785404a8e                             <span># 合并提交ff44785404a8e的修改</span>\n<span>git</span> push origin :hotfixes/BJVEP933                        <span># 删除远程仓库的hotfixes/BJVEP933分支</span>\n<span>git</span> fetch                                                 <span># 获取所有远程分支（不更新本地分支，另需merge）</span>\n<span>git</span> fetch --prune                                         <span># 获取所有原创分支并清除服务器上已删掉的分支</span>\n<span>git</span> <span>mv</span> README README2                                     <span># 重命名文件README为README2</span>\n<span>git</span> reset --hard HEAD                                     <span># 将当前版本重置为HEAD（通常用于merge失败回退）</span>\n<span>git</span> rebase\n<span>git</span> branch -d hotfixes/BJVEP933                           <span># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span>\n<span>git</span> branch -D hotfixes/BJVEP933                           <span># 强制删除分支hotfixes/BJVEP933</span>\n<span>git</span> ls-files                                              <span># 列出git index包含的文件</span>\n<span>git</span> show-branch                                           <span># 图示当前分支历史</span>\n<span>git</span> show-branch --all                                     <span># 图示所有分支历史</span>\n<span>git</span> whatchanged                                           <span># 显示提交历史对应的文件修改</span>\n<span>git</span> revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span>\n<span>git</span> ls-tree HEAD                                          <span># 内部命令：显示某个git对象</span>\n<span>git</span> rev-parse v2.0                                        <span># 内部命令：显示某个ref对于的SHA1 HASH</span>\n<span>git</span> reflog                                                <span># 显示所有提交，包括孤立节点</span>\n<span>git</span> show HEAD@<span>{</span><span>5</span><span>}</span>\n<span>git</span> show master@<span>{</span>yesterday<span>}</span>                               <span># 显示master分支昨天的状态</span>\n<span>git</span> log --pretty<span>=</span>format:<span>'%h %s'</span> --graph                   <span># 图示提交日志</span>\n<span>git</span> show HEAD~3\n<span>git</span> show -s --pretty<span>=</span>raw 2be7fcb476\n<span>git</span> stash                                                 <span># 暂存当前修改，将所有至为HEAD状态</span>\n<span>git</span> stash list                                            <span># 查看所有暂存</span>\n<span>git</span> stash show -p stash@<span>{</span><span>0</span><span>}</span>                               <span># 参考第一次暂存</span>\n<span>git</span> stash apply stash@<span>{</span><span>0</span><span>}</span>                                 <span># 应用第一次暂存</span>\n<span>git</span> <span>grep</span> <span>\"delete from\"</span>                                    <span># 文件中搜索文本“delete from”</span>\n<span>git</span> <span>grep</span> -e <span>'#define'</span> --and -e SORT_DIRENT\n<span>git</span> gc\n<span>git</span> <span>fsck</span>\n<span># 生成一个可供发布的压缩包</span>\n$ <span>git</span> archive\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br></div></div><h2 id=\"参考链接\"> 参考链接</h2>\n<ul>\n<li>杰哥的IT之旅：常用的 Git 命令清单</li>\n<li>马哥教育：Git基本操作</li>\n</ul>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/git.png",
      "date_published": "2020-11-23T03:26:09.000Z",
      "date_modified": "2020-11-24T09:51:41.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "聊透监控体系，就这一篇够不够？",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/27%20%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/%E8%81%8A%E5%A4%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/27%20%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/%E8%81%8A%E5%A4%B4%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/",
      "content_html": "<h2 id=\"聊透监控体系-就这一篇够不够\"> 聊透监控体系，就这一篇够不够？</h2>\n<p>经济高速发展的今天，我们处于信息大爆炸的时代。随着经济发展，信息借助互联网的力量在全球自由地流动，于是就催生了各种各样的服务平台和软件系统。</p>\n<p><img src=\"images/640-1579057066348.webp\" alt=\"img\"></p>\n<p>由于业务的多样性，这些平台和系统也变得异常的复杂。如何对其进行监控和维护是我们 IT 人需要面对的重要问题。就在这样一个纷繁复杂地环境下，监控系统粉墨登场了。</p>\n<p>今天，我们会对 IT 监控系统进行介绍，包括其功能，分类，分层；同时也会介绍几款流行的监控平台。</p>\n<h2 id=\"监控系统的功能\"> 监控系统的功能</h2>\n<p>在 IT 运维过程中，常遇到这样的情况：</p>\n<ul>\n<li>某个业务模块出现问题，运维人员并不知道，发现的时候问题已经很严重了。</li>\n<li>系统出现瓶颈了，CPU 占用持续升高，内存不足，磁盘被写满；网络请求突增，超出网关承受的压力。</li>\n</ul>\n<p>以上这些问题一旦发生，会对我们的业务产生巨大的影响。因此，每个公司或者 IT 团队都会针对此类情况建立自己的 IT 监控系统。</p>\n<p><img src=\"images/640-1579057079481.webp\" alt=\"img\"></p>\n<p>监控系统工作流程图</p>\n<p>其功能包括：</p>\n<ul>\n<li>对服务，系统，平台的运行状态实时监控</li>\n<li>收集服务，系统，平台的运行信息</li>\n<li>通过收集信息的分析结果，预知存在的故障风险，并采取行动</li>\n<li>根据对风险的评估，进行故障预警</li>\n<li>一旦发生故障，第一时间发出告警信息</li>\n<li>通过监控数据，定位故障，协助生成解决方案</li>\n<li>最终保证系统持续、稳定、安全运行</li>\n<li>监控数据可视化，便于统计，按照一定周期导出、归档，用于数据分析和问题复盘</li>\n</ul>\n<h2 id=\"监控系统的分类\"> 监控系统的分类</h2>\n<p>既然监控系统我们意义重大，针对不同场景把监控系统分为三类，分别是：</p>\n<ul>\n<li><strong>日志类</strong></li>\n<li><strong>调用链类</strong></li>\n<li><strong>度量类</strong></li>\n</ul>\n<p><img src=\"images/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YUgwREdYaFFXUGliamtQV1lCV1RZa0QxVHNsczc4UkxHMm5XZ2hpYnFmMnAyY1lXWVdxZjJ6Y25pY1dBYlhtbDZNQ0E1MExnZlR6TWljSXhHM0QzZmhZQUEvNjQw.jpg\" alt=\"img\"></p>\n<h3 id=\"日志类-logging\"> 日志类(Logging)</h3>\n<p>通常我们在系统和业务级别上加入一些日志代码，记录一些日志信息，方便我们在发现问题的时候查找。</p>\n<p>这些信息会与事件做相关，例如：用户登录，下订单，用户浏览某件商品，一小时以内的网关流量，用户平均响应时间等等。</p>\n<p>这类以日志的记录和查询的解决方案比较多。比如 ELK 方案（Elasticsearch+Logstash+Kibana），使用ELK（Elasticsearch、Logstash、Kibana）+Kafka/Redis/RabbitMQ 来搭建一个日志系统。</p>\n<p><img src=\"images/640-1579057091787.webp\" alt=\"img\"></p>\n<p>ELK 结合 Redis/Kafka/RabbitMQ 实现日志类监控</p>\n<p>程序内部通过 Spring AOP 记录日志，Beats 收集日志文件，然后用 Kafka/Redis/RabbitMQ 将其发送给 Logstash，Logstash 再将日志写入 Elasticsearch。</p>\n<p>最后，使用 Kibana 将存放在 Elasticsearch 中的日志数据显示出来，形式可以是实时数据图表。</p>\n<h3 id=\"调用链类-tracing\"> 调用链类(Tracing)</h3>\n<p>对于服务较多的系统，特别是微服务系统。一次服务的调用有可能涉及到多个服务。A 调用 B，B 又要调用 C，好像一个链条一样，形成了服务调用链。</p>\n<p>调用链就是记录一个请求经过所有服务的过程。请求从开始进入服务，经过不同的服务节点后，再返回给客户端，通过调用链参数来追踪全链路行为。从而知道请求在哪个环节出了故障，系统的瓶颈在哪儿。</p>\n<p>调用链监控的实现原理如下：</p>\n<p><img src=\"images/640-1579057103643.webp\" alt=\"img\"></p>\n<p>Java 代码运行原理图</p>\n<p>在介绍这种方式之前，我们先来复习一下 Java 代码运行的原理。通常我们会把 Java 源代码，通过“Java 编译器”编译成 Class 文件。再把这个 Class 的字节码文件装载到“类装载器”中进行字节码的验证。</p>\n<p>最后，把验证过后的字节码发送到“Java 解释器”和“及时编译器”交给“Java 运行系统”运行。</p>\n<p>Java 探针，字节码增强的方式就是利用 Java 代理，这个代理是运行方法之前的拦截器。</p>\n<p>在 JVM 加载 Class 二进制文件的时候，利用 ASM 动态的修改加载的 Class 文件，在监控的方法前后添加需要监控的内容。</p>\n<p>例如：添加计时语句，用于记录方法耗时。将方法耗时存入处理器，利用栈先特性（先进后出）处理方法调用顺序。</p>\n<p>每当请求处理结束后，将耗时方法和入参 map 输出到文件中，然后根据 map 中相应参数，区分出耗时业务。</p>\n<p>最后将相应耗时文件取下来，转化为 xml 格式并进行解析，通过浏览器将代码分层结构展示出来。</p>\n<p><img src=\"images/640-1579057113936.webp\" alt=\"img\"></p>\n<p>Java 探针工具原理图</p>\n<p>备注：ASM 是一个 Java 字节码操纵框架，它可以动态生成类或者增强既有类的功能。</p>\n<p>ASM 可以直接产生二进制 Class 文件，可以在类被载入 Java 虚拟机之前改变类行为。</p>\n<p>Java Class 被存储在 .class文件里，文件拥有元数据来解析类中的元素：类名称、方法、属性以及 Java 字节码（指令）。</p>\n<p>ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够生成新类。</p>\n<p><strong>②拦截请求</strong></p>\n<p>获取每次请求服务中的信息来实现跟踪的。这里以 Zipkin+Slueth 为例说明其原理。</p>\n<p>Sleuth 提供链路追踪。由于一个请求会涉及到多个服务的互相调用，而这种调用往往成链式结构，经过多次层层调用以后请求才会返回。常常使用 Sleuth 追踪整个调用过程，方便理清服务间的调用关系。</p>\n<p><img src=\"images/640-1579057123079.webp\" alt=\"img\"></p>\n<p>Sleuth 服务调用追踪图例</p>\n<p>每次请求都会生成一个 Trace ID，如上图所示这个 Trace ID 在整个 Request 和 Response 过程中都会保持一致，不论经过了多少个服务。这是为了方便记录一次调用的整个生命周期。</p>\n<p>再看每次请求的时候都会有一个 Span ID，这里的 Span 是 Sleuth 服务跟踪的最小单元，每经过一个服务，每次 Request 和 Response 这个值都会有所不同，这是为了区分不同的调用动作。</p>\n<p>针对每个调用的动作，Sleuth 都做了标示如下：</p>\n<ul>\n<li>Server Received 是服务器接受，也就是服务端接受到请求的意思。</li>\n<li>Client Sent 是客户端发送，也就是这个服务本身不提供响应，需要调用其他的服务提供该响应，所以这个时候是作为客户端发起请求的。</li>\n<li>Server Sent 是服务端发送，看上图SERVICE 3 收到请求后，由于他是最终的服务提供者，所以作为服务端，他需要把请求发送给调用者。</li>\n<li>Client Received 是客户端接受，作为发起调用的客户端接受到服务端返回的请求。</li>\n</ul>\n<p>实际上 Sleuth 就是通过上述方式把每次请求记录一个统一的 Trace ID，每个请求的详细步骤记作 Span ID。</p>\n<p>每次发起请求或者接受请求的状态分别记录成 Server Received，Client Sent，Server Sent，Client Received 四种状态来完成这个服务调用链路的跟踪的。</p>\n<p><img src=\"images/640-1579057133775.webp\" alt=\"img\"></p>\n<p>在调用服务的链路上每个被调用的服务节点都会通过 Parent ID 来记录发起调用服务的 Span ID，由于 Span ID 是唯一确认最小服务单元的，所以知道了 Parent 的 Span ID 也就知道了谁调用自己了。</p>\n<h3 id=\"度量类-metrics\"> 度量类(Metrics)</h3>\n<p>实现了时序数据库（TimeSeriesData，TSD）的监控方案。实际上就是记录一串以时间为维度的数据，然后再通过聚合运算，查看指标数据和指标趋势。说白了，就是描述某个被测主体在一段时间内的测量值变化（度量）。</p>\n<p>由于 IT 基础设施，运维监控和互联网监控的特性，这种方式被广泛应用。一般对时序数据进行建模分为三个部分，分别是：主体，时间点和测量值。</p>\n<p>通过这个例子来看一下，时序数据库的数学模型，例如：需要监控服务器的 In/Out 平均流量：</p>\n<ul>\n<li>整个监控的数据库称为“Metric”，它包含了所有监控的数据。类似关系型数据库中的 Table。</li>\n<li>每条监控数据，称为“Point”，类似于关系型数据库中的 Row 的概念。</li>\n<li>每个“Point”都会定义一个时间戳“Timestamp”，将其作为索引，表明数据采集的时间。</li>\n<li>“Tag”作为维度列，表示监控数据的属性。</li>\n<li>“Field”作为指标列，作为测量值，也就是测量的结果。</li>\n</ul>\n<p><img src=\"images/640-1579057144929.webp\" alt=\"img\"></p>\n<p>时序数据库数据模型图例</p>\n<p>时序数据库的存储原理，关系型数据库存储采用的是 B tree，虽然降低了数据查询的磁盘寻道时间，但是无法解决大量数据写入时的磁盘效率。</p>\n<p>由于监控系统的应用场景，经常会遇到大批量的数据写入，所以我们会选择 LSMtree（Log Structured Merge Tree）存储时序数据库。</p>\n<p>LSMtree（Log Structured Merge Tree），从字面意义上理解，记录的数据按照日志结构（Log Structured）追加到系统中，然后通过合并树（Merge Tree）的方式将其合并。</p>\n<p>来看一个 LevelDB 的例子，方便我们理解，LSM-tree 被分成三种文件：</p>\n<ul>\n<li>接收写入请求的 memtable 文件（内存中）</li>\n<li>不可修改的 immutable memtable 文件（内存中）</li>\n<li>磁盘上的 SStable文件（Sorted String Table），有序字符串表，这个有序的字符串就是数据的key。SStable 一共有七层（L0 到 L6）。下一层的总大小限制是上一层的 10 倍。</li>\n</ul>\n<p><img src=\"images/640-1579057158151.webp\" alt=\"img\"></p>\n<p>LSMtree LevelDB 存储示意图</p>\n<p>LSMtree 写入流程：</p>\n<ul>\n<li>将数据追加到日志 WAL（Write Ahead Log）中，写入日志的目的是为了防止内存数据丢失，可以及时恢复。</li>\n<li>把数据写到 memtable 中。</li>\n<li>当 memtable 满了（超过一定阀值），就将这个 memtable 转入 immutable memtable 中，用新的 memtable 接收新的数据请求。</li>\n<li>immutablememtable 一旦写满了， 就写入磁盘。并且先存储 L0 层的 SSTable 磁盘文件，此时还不需要做文件的合并。每层的所有文件总大小是有限制的（8MB，10MB，100MB… 1TB）。从 L1 层往后，每下一层容量增大十倍。</li>\n<li>某一层的数据文件总量超过阈值，就在这一层中选择一个文件和下一层的文件进行合并。\n如此这般上层的数据都是较新的数据，查询可以从上层开始查找，依次往下，并且这些数据都是按照时间序列存放的。</li>\n</ul>\n<h2 id=\"监控系统的分层\"> 监控系统的分层</h2>\n<p>谈完了监控系统的分类，再来聊聊监控系统的分层。用户请求到数据返回，经历系统中的层层关卡。</p>\n<p><img src=\"images/640-1579057169317.webp\" alt=\"img\"></p>\n<p>一般我们将监控系统分为五层来考虑，当然也有人分成三层，大致的意思都差不多，仅供参考：</p>\n<ul>\n<li><strong>客户端监控</strong>，用户行为信息，业务返回码，客户端性能，运营商，版本，操作系统等。</li>\n<li><strong>业务层监控</strong>，核心业务的监控，例如：登录，注册，下单，支付等等。</li>\n<li><strong>应用层监控</strong>，相关的技术参数，例如：URL 请求次数，Service 请求数量，SQL 执行的结果，Cache 的利用率，QPS 等等。</li>\n<li><strong>系统层监控</strong>，物理主机，虚拟主机以及操作系统的参数。例如：CPU 利用率，内存利用率，磁盘空间情况。</li>\n<li><strong>网络层监控</strong>，网络情况参数。例如：网关流量情况，丢包率，错包率，连接数等等。</li>\n</ul>\n<h2 id=\"流行的监控系统\"> 流行的监控系统</h2>\n<p>前面讲了监控系统的功能，分类，分层，相信大家对 IT 监控系统都有一定的了解了。</p>\n<p>接下来，我们来看看有哪些优秀实践。这里介绍两个比较流行的监控系统：</p>\n<ul>\n<li><strong>Zabbix</strong></li>\n<li><strong>Prometheus</strong></li>\n</ul>\n<h3 id=\"zabbix\"> Zabbix</h3>\n<p>Zabbix 是一款企业级的分布式开源监控方案。它由 Alexei Vladishev 创建，由 Zabbix SIA 在持续开发和支持。</p>\n<p>Zabbix 能够监控网络参数，服务器健康和软件完整性。它提供通知机制，允许用户配置告警，从而快速反馈问题。</p>\n<p>基于存储的数据，Zabbix 提供报表和数据可视化，并且支持主动轮询和被动捕获。它的所有报告、统计信息和配置参数都可以通过 Web 页面访问。</p>\n<p>Zabbix 的 API 功能，完善度很高，大部分操作都提供了 API 接口，方便和现有系统整合。</p>\n<p>例如：通过历史数据查询 API，获取线上服务器使用情况，生成报表；设置条件，对问题服务器和问题业务进行筛选，加入告警。</p>\n<p>利用 Zabbix graph 的 API，生成关键指标趋势图，方便运维人员实时了解系统情况。利用告警添加 API，让监控系统和部署系统联动。</p>\n<p>比如新部署了一个新实例，那么自动添加所需要的监控策略；反之，下线一个实例，就删除关联的监控策略。</p>\n<p>Zabbix 由 Server，Agent，Proxy（可选项）组成：</p>\n<ul>\n<li>Agent 负责收集数据，并且传输给 Server。</li>\n<li>Server 负责接受 Agent 的数据，进行保存或者告警。</li>\n<li>Proxy 负责代理 Server 收集 Agent 传输的数据，并且转发给 Server。Proxy 是安装在被监控的服务器上的，用来和 Server 端进行通信，从而传输数据。</li>\n</ul>\n<p><img src=\"images/640-1579057180229.webp\" alt=\"img\"></p>\n<p>Zabbix 部署模式</p>\n<p>Zabbix 的数据采集，主要有两种模式：Server 主动拉取数据和 Agent 主动上报数据。</p>\n<p>以 Server 拉取数据为例，用户在 Web-portal 中，设置需要监控的机器，配置监控项，告警策略。Zabbix-Server 会根据策略主动获取 Agent 的数据，然后存储到 MySQL 中。</p>\n<p>同时根据用户配置的策略，判定是否需要告警。用户可以在 Web 端，以图表的形式，查看各种指标的历史趋势。</p>\n<p>在 Zabbix 中，将 Server 主动拉取数据的方式称之为 Active Check。这种方式配置起来较为方便，但是会对 Zabbix-Server 的性能存在影响。</p>\n<p>所以在生产环境中，一般会选择主动推送数据到 Zabbix-Server 的方式，称之为 Trapper。</p>\n<p>即用户可以定时生成数据，再按照 Zabbix 定义的数据格式，批量发送给 Zabbix-Server，这样可以大大提高 Server 的处理能力。</p>\n<p>Proxy，作为可选项，起到收集 Agent 数据并且转发到 Server 的作用。</p>\n<p>当 Server 和 Agent 不在一个网络内，就需要使用 Proxy 做远程监控，特别是远程网络有防火墙的时候。同时它也可以分担 Server 的压力，降低 Server 处理连接数的开销。</p>\n<h3 id=\"prometheus-普罗米修斯\"> Prometheus（普罗米修斯）</h3>\n<p>随着这几年云环境的发展，Prometheus 被广泛地认可。它的本质是时间序列数据库，而 Zabbix 采用 MySQL 进行数据存储。</p>\n<p>从上面我们对时间序列数据库的分析来看，Prometheus 能够很好地支持大量数据的写入。</p>\n<p>它采用拉的模式（Pull）从应用中拉取数据，并通过 Alert 模块实现监控预警。据说单机可以消费百万级时间序列。</p>\n<p>一起来看看 Prometheus 的几大组件：</p>\n<ul>\n<li><strong>Prometheus Server</strong>，用于收集和存储时间序列数据，负责监控数据的获取，存储以及查询。</li>\n<li><strong>监控目标配置</strong>，Prometheus Server 可以通过静态配置管理监控目标，也可以配合 Service Discovery（K8s，DNS，Consul）实现动态管理监控目标。</li>\n<li><strong>监控目标存储</strong>，Prometheus Server 本身就是一个时序数据库，将采集到的监控数据按照时间序列存储在本地磁盘中。</li>\n<li><strong>监控数据查询</strong>，Prometheus Server 对外提供了自定义的 PromQL 语言，实现对数据的查询以及分析。</li>\n<li><strong>Client Library</strong>，客户端库。为需要监控的服务生成相应的 Metrics 并暴露给 Prometheus Server。\n当 Prometheus Server 来 Pull 时，直接返回实时状态的 Metrics。通常会和 Job 一起合作。</li>\n<li><strong>Push Gateway</strong>，主要用于短期的 Jobs。由于这类 Jobs 存在时间较短，可能在 Prometheus 来 Pull 之前就消失了。为此，这些 Jobs 可以直接向 Prometheus Server 端推送它们的 Metrics。</li>\n<li><strong>Exporters</strong>，第三方服务接口。将 Metrics（数据集合）发送给 Prometheus。\nExporter 将监控数据采集的端点，通过 HTTP 的形式暴露给 Prometheus Server，使其通过 Endpoint 端点获取监控数据。</li>\n<li><strong>Alertmanager</strong>，从 Prometheus Server 端接收到 Alerts 后，会对数据进行处理。例如：去重，分组，然后根据规则，发出报警。</li>\n<li><strong>Web UI</strong>，Prometheus Server 内置的 Express Browser UI，通过 PromQL 实现数据的查询以及可视化。</li>\n</ul>\n<p><img src=\"images/640-1579057191567.webp\" alt=\"img\"></p>\n<p>Prometheus 架构图</p>\n<p>说完了 Prometheus 的组件，再来看看 Prometheus 的架构：</p>\n<ul>\n<li>Prometheus Server 定期从 Jobs/Exporters 中拉 Metrics。同时也可以接收来自 Pushgateway 发过来的 Metrics。</li>\n<li>Prometheus Server 将接受到的数据存储在本地时序数据库，并运行已定义好的 alert.rules（告警规则），一旦满足告警规则就会向 Alertmanager 推送警报。</li>\n<li>Alertmanager 根据配置文件，对接收到的警报进行处理，例如：发出邮件告警，或者借助第三方组件进行告警。</li>\n<li>WebUI/Grafana/APIclients，可以借助 PromQL 对监控数据进行查询。</li>\n</ul>\n<p>最后将两个工具进行比较如下：</p>\n<p><img src=\"images/640-1579057211728.webp\" alt=\"img\"></p>\n<p>Zabbix 和 Prometheus 比较图</p>\n<p>从上面的比较可以看出：</p>\n<ul>\n<li>Zabbix 的成熟度更高，上手更快。高集成度导致灵活性较差，在监控复杂度增加后，定制难度会升高。而且使用的关系型数据库，对于大规模的监控数据插入和查询是个问题。</li>\n<li>Prometheus 上手难度大，定制灵活度高，有较多数据聚合的可能，而且有时序数据库的加持。</li>\n<li>对于监控物理机或者监控环境相对稳定的情况，Zabbix 有明显优势。如果监控场景多是云环境的话，推荐使用 Prometheus。</li>\n</ul>\n<h2 id=\"总结\"> 总结</h2>\n<p><img src=\"images/640.webp\" alt=\"img\"></p>\n<p>监控系统思维导图</p>\n<p>监控系统对 IT 系统运维意义重大，从状态监控到收集/分析数据，到故障报警，以及问题解决，最后归档报表，协助运维复盘。</p>\n<p>监控系统分为三大类，日志类，调用链类，度量类，他们有各自的特点，且应用场景各不相同。</p>\n<p>因为要对整个 IT 系统进行监控，所以将其分为五层，分别是，客户端，业务层，应用层，系统层，网络层。</p>\n<p>Zabbix 和 Prometheus 是当下流行的监控系统，可以根据他们的特点选择使用。</p>\n<p>作者：崔皓\n简介：十六年开发和架构经验，曾担任过惠普武汉交付中心技术专家，需求分析师，项目经理，后在创业公司担任技术/产品经理。善于学习，乐于分享。目前专注于技术架构与研发管理。</p>\n<blockquote>\n<p>来源：本文转自公众号”51CTO技术栈“，经平台授权转载。</p>\n<p>参考其他链接：https://blog.csdn.net/javaforwork/article/details/101093901</p>\n</blockquote>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "从开源到上市",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.1%20%E6%A6%82%E8%BF%B0/9.1.1%20Elasticsearch%20%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%85%B6%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.1%20%E6%A6%82%E8%BF%B0/9.1.1%20Elasticsearch%20%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%85%B6%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/",
      "content_html": "<h2 id=\"从开源到上市\"> 从开源到上市</h2>\n<ul>\n<li>2018年10月纽交所上市，Elastic Inc -开源软件/上市公司</li>\n<li>当前市值超过50亿美金，开盘当天涨幅达94%</li>\n<li>Elasticsearch软件下载量，超3.5亿次</li>\n<li>10万+的社区成员</li>\n<li>7200+订阅用户，分布在100+国家</li>\n<li>云服务平台的接入- Elastic，Amazon，阿里巴巴，腾讯</li>\n</ul>\n<h2 id=\"elasticsearch的诞生\"> Elasticsearch的诞生</h2>\n<ul>\n<li>2004年Shay Banon基于Lucene开发了Compass</li>\n<li>2010年Shay Banon重写了Compass，取名Elasticsearch</li>\n</ul>\n<p><img src=\"images/1567739412739.png\" alt=\"\"></p>\n<h3 id=\"lucene简介\"> Lucene简介</h3>\n<ul>\n<li>基于Java语言开发的搜索引擎库类</li>\n<li>创建于1999年，2005年成为Apache顶级开源项目</li>\n<li>Lucene具有高性能、易扩张的优点</li>\n<li>Lucene的局限性：\n<ul>\n<li>只能基于Java语言开发</li>\n<li>类库的接口学习曲线陡峭</li>\n<li>原生并不支持水平扩展</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"elasticsearch的特性\"> Elasticsearch的特性</h3>\n<ul>\n<li>\n<p>近实时（Near Real Time）</p>\n</li>\n<li>\n<p>分布式存储/搜索/分析引擎</p>\n</li>\n<li>\n<p>支持多中方式集成接入</p>\n<ul>\n<li>多种编程语言的类库</li>\n<li>RESTful API</li>\n<li>JDBC &amp; ODBC</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"elasticsearch的分布式架构\"> Elasticsearch的分布式架构</h3>\n<ul>\n<li>集群规模可以从单个扩展到数百个节点</li>\n<li>高可用 &amp; 水平扩展\n<ul>\n<li>服务和数据的两个纬度</li>\n</ul>\n</li>\n<li>支持不同的节点类型\n<ul>\n<li>支持 Hot &amp; Warm架构</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/1567737803003.png\" alt=\"\"></p>\n<h3 id=\"elasticsearch版本与升级\"> Elasticsearch版本与升级</h3>\n<ul>\n<li>0.4：2010年2月第一次发布</li>\n<li>1.0：2014年1月</li>\n<li>2.0：2015年10月</li>\n<li>5.0：2016年10月</li>\n<li>6.0：2017年10月</li>\n<li>7.0：2019年4月</li>\n</ul>\n<h4 id=\"新特性5-x\"> 新特性5.X</h4>\n<ul>\n<li>Lucene6.x，性能提升，默认打分机制从TF-IDF改为BM25</li>\n<li>支持Ingest节点/Painless Scripting/Compltion suggested支持/原生的Java REST客户端</li>\n<li>Type标记成deprecad，支持了Keyword的类型</li>\n<li>性能优化\n<ul>\n<li>内部引擎移除了避免同一文档并发更新的竞争锁，带来15%~20%的性能提升</li>\n<li>Instant aggregation，支持分片上聚合的缓存</li>\n<li>新增了Profile API</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"新特性6-x\"> 新特性6.X</h4>\n<ul>\n<li>Lucene 7.X</li>\n<li>新功能\n<ul>\n<li>跨集群复制（CCR）</li>\n<li>索引生命周期管理</li>\n<li>SQL的支持</li>\n</ul>\n</li>\n<li>更友好的升级及数据迁移\n<ul>\n<li>在主要版本之间的迁移更为简化，体验升级</li>\n<li>全新的基于操作的数据复制框架，可加快数据恢复</li>\n</ul>\n</li>\n<li>性能优化\n<ul>\n<li>有效存储稀疏字段的新方法，降低了存储成本</li>\n<li>在索引时进行排序，可加快排序的查询性能</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"新特性7-x\"> 新特性7.X</h4>\n<ul>\n<li>Lucene 8.0</li>\n<li>重大改进 - 正式废除单个索引下多Type的支持</li>\n<li>7.1 开始，Security功能免费使用</li>\n<li>ECK - Elasticsearch Operator on Kubernetes</li>\n<li>新功能\n<ul>\n<li>New Cluster coordination</li>\n<li>Feature - Complete High Level REST Client</li>\n<li>Script Score Query</li>\n</ul>\n</li>\n<li>性能优化\n<ul>\n<li>默认的Primary Shard数从5改为1，避免Over Sharding</li>\n<li>性能优化，更快的Top K</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Elastic Stack 生态圈",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.1%20%E6%A6%82%E8%BF%B0/9.1.2%20Elastic%20Stack%20%E5%AE%B6%E6%97%8F%E6%88%90%E5%91%98%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.1%20%E6%A6%82%E8%BF%B0/9.1.2%20Elastic%20Stack%20%E5%AE%B6%E6%97%8F%E6%88%90%E5%91%98%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/",
      "content_html": "<h2 id=\"elastic-stack-生态圈\"> Elastic Stack 生态圈</h2>\n<p><img src=\"images/1567739481410.png\" alt=\"\"></p>\n<h3 id=\"logstash-数据处理管道\"> Logstash： 数据处理管道</h3>\n<ul>\n<li>\n<p>开源的服务端数据处理管道，支持从不同来源采集数据，转换数据，并将数据发送到不通的存储库中</p>\n</li>\n<li>\n<p>发展</p>\n<ul>\n<li>Logstash诞生于2009年，最初用来做日志的采集与处理</li>\n<li>2013年被Elasticsearch收购</li>\n</ul>\n</li>\n<li>\n<p>特性</p>\n<ul>\n<li>实时解析和转换数据\n<ul>\n<li>从IP地址破译出地理坐标</li>\n<li>将PII数据匿名化，完全排除敏感字段</li>\n</ul>\n</li>\n<li>可扩展 - 200多个插件（日志/数据库/Acsigh/Netflow）</li>\n<li>可靠性安全\n<ul>\n<li>logstash会通过持久化队列来保证至少将运行中的事件送达一次</li>\n<li>数据传输加密</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/1567739654345.png\" alt=\"\"></p>\n<h3 id=\"kibana-可视化分析利器\"> Kibana：可视化分析利器</h3>\n<ul>\n<li>Kibana名字的含义：Kiwifruit + Banana</li>\n<li>数据可视化工具，帮助用户解开对数据的任何疑问</li>\n<li>基于logstash的工具，2013年加入Elastic公司</li>\n</ul>\n<p><img src=\"images/1567739969747.png\" alt=\"\"></p>\n<h3 id=\"beats-轻量级的数据采集器\"> Beats：轻量级的数据采集器</h3>\n<p><img src=\"images/1567740031729.png\" alt=\"\"></p>\n<h3 id=\"x-pack-商业化套件\"> X-pack：商业化套件</h3>\n<ul>\n<li>6.3之前的版本，X-pack以插件方式安装</li>\n<li>X-pack开源之后，ElasticSearch &amp; Kibana支持OSS版和Basic两种版本\n<ul>\n<li>部分X-pack功能支持免费使用，6.8和7.1开始，Security功能免费</li>\n</ul>\n</li>\n<li>OSS，Basic，黄金级，白金级</li>\n</ul>\n<h2 id=\"elk应用场景\"> ELK应用场景</h2>\n<ul>\n<li>网站搜索/垂直搜索/代码搜索</li>\n<li>日志管理与分析/安全指标监控/应用性能监控/WEB支取舆情分</li>\n</ul>\n<h3 id=\"日志的重要性\"> 日志的重要性</h3>\n<ul>\n<li>为什么重要\n<ul>\n<li>运维：医生给病人看病，日志就是病人对自己的陈述</li>\n<li>恶意攻击，恶意注册，刷单，恶意密码猜测</li>\n</ul>\n</li>\n<li>挑战\n<ul>\n<li>关注点很多，任何一个点都有可能引起问题</li>\n<li>日志分散在很多机器，出了问题时，才发现日志被删了</li>\n<li>很多运维人员是消防员，哪里有问题去哪里</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/1567740850711.png\" alt=\"\"></p>\n<h3 id=\"日志管理流程\"> 日志管理流程</h3>\n<p><img src=\"images/1567740876961.png\" alt=\"\"></p>\n<p><img src=\"images/1567740904642.png\" alt=\"\"></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "安装运行",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.2%20%E5%AE%89%E8%A3%85%E4%B8%8A%E6%89%8B/9.2.2%20Kibana%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%95%8C%E9%9D%A2%E5%BF%AB%E9%80%9F%E6%B5%8F%E8%A7%88/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.2%20%E5%AE%89%E8%A3%85%E4%B8%8A%E6%89%8B/9.2.2%20Kibana%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%95%8C%E9%9D%A2%E5%BF%AB%E9%80%9F%E6%B5%8F%E8%A7%88/",
      "content_html": "<h2 id=\"安装运行\"> 安装运行</h2>\n<p>下载地址：</p>\n<blockquote>\n<p>https://www.elastic.co/cn/downloads/kibana</p>\n</blockquote>\n<p><img src=\"images/1567761679082.png\" alt=\"\"></p>\n<p>解压并安装运行</p>\n<p><img src=\"images/1567761719575.png\" alt=\"\"></p>\n<h2 id=\"kibana-console\"> Kibana Console</h2>\n<ul>\n<li>Dev Tool</li>\n<li>Search Profiler</li>\n<li>Help + 一些快捷键\n<ul>\n<li>cmd + / (查看API帮助文档)</li>\n<li>cmd + option + I</li>\n<li>cmd + option + 0</li>\n<li>cmd + option + shift + 0</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"kibana-pulgins\"> Kibana Pulgins</h2>\n<p>常用命令</p>\n<div><pre><code>bin/kibana-plugin <span>install</span> /usr/plugin_location\nbin/kibana-plugin list\nbin/kibana remove\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"用kibana解决日志时间乱序问题\"> 用Kibana解决日志时间乱序问题</h2>\n<p>可以按照偏移量，和主机名进行排序</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "安装",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.2%20%E5%AE%89%E8%A3%85%E4%B8%8A%E6%89%8B/9.2.1%20Elasticsearch%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.2%20%E5%AE%89%E8%A3%85%E4%B8%8A%E6%89%8B/9.2.1%20Elasticsearch%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/",
      "content_html": "<h2 id=\"安装\"> 安装</h2>\n<h3 id=\"安装java\"> 安装JAVA</h3>\n<ul>\n<li>运维Elasticsearch，需要安装并配置JDK，设置$JAVA_HOME</li>\n<li>各个版本对Java的依赖\n<ul>\n<li>Elasticsearch 5 需要Java8以上的版本</li>\n<li>Elasticsearch 从6.5开始支持Java11</li>\n<li>7.0 开始，内置了Java环境</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安装elasticsearch\"> 安装Elasticsearch</h3>\n<ul>\n<li>下载二进制文件</li>\n</ul>\n<blockquote>\n<p>https://www.elastic.co/cn/downloads/elasticsearch</p>\n</blockquote>\n<p><img src=\"images/1567741507169.png\" alt=\"\"></p>\n<p>安装并运维Elasticsearch</p>\n<p><img src=\"images/1567741543204.png\" alt=\"\"></p>\n<h2 id=\"配置\"> 配置</h2>\n<h3 id=\"elasticsearch的文件目录结构\"> Elasticsearch的文件目录结构</h3>\n<p><img src=\"images/1567741696333.png\" alt=\"\"></p>\n<h3 id=\"jvm配置\"> JVM配置</h3>\n<ul>\n<li>修改JCM - config/jvm.options\n<ul>\n<li>7.3 下载的默认设置是1GB</li>\n</ul>\n</li>\n<li>配置的建议\n<ul>\n<li>Xmx和Xms设置成一样</li>\n<li>Xmx不要超过机器内存的50%</li>\n<li>不要超过30GB</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运行\"> 运行</h2>\n<h3 id=\"运行单个实例\"> 运行单个实例</h3>\n<div><pre><code>bin/elasticsearch -E node.name<span>=</span>node0 -E node.name<span>=</span>node0 -E cluster.name<span>=</span>geektime -E path.data<span>=</span>node0_data\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"运行多个实例\"> 运行多个实例</h3>\n<div><pre><code>bin/elasticsearch -E node.name<span>=</span>node1 -E cluster.name<span>=</span>geektime -E path.data<span>=</span>node1_data -d\nbin/elasticsearch -E node.name<span>=</span>node2 -E cluster.name<span>=</span>geektime -E path.data<span>=</span>node2_data -d\nbin/elasticsearch -E node.name<span>=</span>node2 -E cluster.name<span>=</span>geektime -E path.data<span>=</span>node2_data -d\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>\n<li>访问 http://localhost:9200 check cluster health state</li>\n<li>通过 http://localhost:9200_cat/nodes?v 查看节点</li>\n</ul>\n<h3 id=\"安装与查看插件\"> 安装与查看插件</h3>\n<div><pre><code>bin/elasticsearch-plugin <span>install</span> analysis-icu\nbin/elasticsearch-plugin list\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ul>\n<li>Elasticsearch提供插件的机制对系统进行扩展\n<ul>\n<li>Discovery Plugin</li>\n<li>Analysis Plugin</li>\n<li>Security Plugin</li>\n<li>Management Plugin</li>\n<li>Ingest Plugin</li>\n<li>Mapper Plugin</li>\n<li>Backup Plugin</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Elastic Stack 与Docker 容器",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.2%20%E5%AE%89%E8%A3%85%E4%B8%8A%E6%89%8B/9.2.3%20%E5%9C%A8Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8CElasticsearch%EF%BC%8CKibana%E5%92%8CCerebro/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.2%20%E5%AE%89%E8%A3%85%E4%B8%8A%E6%89%8B/9.2.3%20%E5%9C%A8Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8CElasticsearch%EF%BC%8CKibana%E5%92%8CCerebro/",
      "content_html": "<h2 id=\"elastic-stack-与docker-容器\"> Elastic Stack 与Docker 容器</h2>\n<ul>\n<li>Elastic官方提供Docker Image</li>\n<li>如果安装定制的插件，可以写Dockerfile，将官方Image设为Base Image</li>\n<li>2018年12月加入CNCF，提供helm</li>\n<li>2019年5月，7.1版本发布，同时发布ECK，免费提供Elastic Operator on Kubernetes</li>\n</ul>\n<h2 id=\"编写dockerfile\"> 编写dockerfile</h2>\n<p>vim docker-compose.yaml</p>\n<div><pre><code>version<span>:</span> <span>'2.2'</span>\nservices<span>:</span>\n  cerebro<span>:</span>\n    image<span>:</span> lmenezes/cerebro<span>:</span>0.8.3\n    container_name<span>:</span> cerebro\n    ports<span>:</span>\n      <span>-</span> <span>\"9000:9000\"</span>\n    command<span>:</span>\n      <span>-</span> <span>-</span>Dhosts.0.host=http<span>:</span>//elasticsearch<span>:</span>9200\n    networks<span>:</span>\n      <span>-</span> es7net\n  kibana<span>:</span>\n    image<span>:</span> docker.elastic.co/kibana/kibana<span>:</span>7.1.0\n    container_name<span>:</span> kibana7\n    environment<span>:</span>\n      <span>-</span> I18N_LOCALE=zh<span>-</span>CN\n      <span>-</span> XPACK_GRAPH_ENABLED=true\n      <span>-</span> TIMELION_ENABLED=true\n      <span>-</span> XPACK_MONITORING_COLLECTION_ENABLED=<span>\"true\"</span>\n    ports<span>:</span>\n      <span>-</span> <span>\"5601:5601\"</span>\n    networks<span>:</span>\n      <span>-</span> es7net\n  elasticsearch<span>:</span>\n    image<span>:</span> docker.elastic.co/elasticsearch/elasticsearch<span>:</span>7.1.0\n    container_name<span>:</span> es7_01\n    environment<span>:</span>\n      <span>-</span> cluster.name=geektime\n      <span>-</span> node.name=es7_01\n      <span>-</span> bootstrap.memory_lock=true\n      <span>-</span> <span>\"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span>\n      <span>-</span> discovery.seed_hosts=es7_01<span>,</span>es7_02\n      <span>-</span> cluster.initial_master_nodes=es7_01<span>,</span>es7_02\n    ulimits<span>:</span>\n      memlock<span>:</span>\n        soft<span>:</span> <span>-</span>1\n        hard<span>:</span> <span>-</span>1\n    volumes<span>:</span>\n      <span>-</span> es7data1<span>:</span>/usr/share/elasticsearch/data\n    ports<span>:</span>\n      <span>-</span> 9200<span>:</span>9200\n    networks<span>:</span>\n      <span>-</span> es7net\n  elasticsearch2<span>:</span>\n    image<span>:</span> docker.elastic.co/elasticsearch/elasticsearch<span>:</span>7.1.0\n    container_name<span>:</span> es7_02\n    environment<span>:</span>\n      <span>-</span> cluster.name=geektime\n      <span>-</span> node.name=es7_02\n      <span>-</span> bootstrap.memory_lock=true\n      <span>-</span> <span>\"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span>\n      <span>-</span> discovery.seed_hosts=es7_01<span>,</span>es7_02\n      <span>-</span> cluster.initial_master_nodes=es7_01<span>,</span>es7_02\n    ulimits<span>:</span>\n      memlock<span>:</span>\n        soft<span>:</span> <span>-</span>1\n        hard<span>:</span> <span>-</span>1\n    volumes<span>:</span>\n      <span>-</span> es7data2<span>:</span>/usr/share/elasticsearch/data\n    networks<span>:</span>\n      <span>-</span> es7net\n\n\nvolumes<span>:</span>\n  es7data1<span>:</span>\n    driver<span>:</span> local\n  es7data2<span>:</span>\n    driver<span>:</span> local\n\nnetworks<span>:</span>\n  es7net<span>:</span>\n    driver<span>:</span> bridge\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h2 id=\"启动-关闭\"> 启动/关闭</h2>\n<ul>\n<li>启动</li>\n</ul>\n<p><code>cd</code>到<code>docker-compose.yaml</code>所在目录，然后启动</p>\n<div><pre><code>docker-compose up \n</code></pre>\n<div><span>1</span><br></div></div><p>分别访问服务器的9200,9000,5601端口</p>\n<ul>\n<li>关闭</li>\n</ul>\n<div><pre><code>docker-compose down\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>Cerebro简介</strong></p>\n<p>可以用来监控es集群的状态，非常好用，推荐</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "ansible配置",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.2%20%E5%AE%89%E8%A3%85%E4%B8%8A%E6%89%8B/elk%E5%80%9F%E5%8A%A9%E5%AE%89%E8%A3%85ansible/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.2%20%E5%AE%89%E8%A3%85%E4%B8%8A%E6%89%8B/elk%E5%80%9F%E5%8A%A9%E5%AE%89%E8%A3%85ansible/",
      "content_html": "<h2 id=\"ansible配置\"> ansible配置</h2>\n<div><pre><code><span># 修改主机名</span>\nhostnamectl set-hostname elk_ans\n<span># 生产密钥对，生成后将公钥导入到私有云主机中，创建新主机时使用</span>\nssh-keygen -t rsa -f ~/.ssh/id_rsa -N <span>''</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span># yum 安装</span>\nyum -y <span>install</span> ansible\n<span># 修改主机列表为yaml格式</span>\n<span>mv</span> /etc/ansible/hosts<span>{</span>,.yml<span>}</span>\n<span># 优化配置</span>\n<span>cp</span> /etc/ansible/ansible.cfg<span>{</span>,.bak<span>}</span>\n<span>cat</span> <span>></span> /etc/ansible/ansible.cfg <span>&lt;&lt;</span><span>EOF\n[defaults]\ninventory      = /etc/ansible/hosts.yml\nroles_path    = /etc/ansible/roles\nhost_key_checking = False\ndeprecation_warnings = False\nretry_files_enabled = False\n[inventory]\n[privilege_escalation]\n[paramiko_connection]\n[ssh_connection]\nssh_args = -C -o ControlMaster=auto -o ControlPersist=5d\n[persistent_connection]\n[accelerate]\n[selinux]\n[colors]\n[diff]\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><div><pre><code><span># 编写ansible主机清单</span>\n<span>export</span> <span>es_master1</span><span>=</span><span>192.168</span>.135.125 <span>es_master2</span><span>=</span><span>192.168</span>.135.214 <span>es_master3</span><span>=</span><span>192.168</span>.135.62 <span>es_data1</span><span>=</span><span>192.168</span>.135.160 <span>es_data2</span><span>=</span><span>192.168</span>.135.73 <span>es_data3</span><span>=</span><span>192.168</span>.135.105 <span>es_ingest1</span><span>=</span><span>192.168</span>.135.8 <span>es_ingest2</span><span>=</span><span>192.168</span>.135.187 <span>es_ingest3</span><span>=</span><span>192.168</span>.135.189 <span>kibana1</span><span>=</span><span>192.168</span>.135.178 <span>kibana2</span><span>=</span><span>192.168</span>.135.196 <span>kibana3</span><span>=</span><span>192.168</span>.135.198 <span>logstash1</span><span>=</span><span>192.168</span>.135.89 <span>logstash2</span><span>=</span><span>192.168</span>.135.30 <span>logstash3</span><span>=</span><span>192.168</span>.135.96 <span>kafka1</span><span>=</span><span>192.168</span>.135.32 <span>kafka2</span><span>=</span><span>192.168</span>.135.22 <span>kafka3</span><span>=</span><span>192.168</span>.135.51\n<span>cat</span> <span>></span> /etc/ansible/hosts.yml <span>&lt;&lt;</span><span>EOF\nall:\n  children:\n    elasticsearch:\n      children:\n        es_master:\n        es_data:\n        es_ingest:\n    es_master:\n      hosts:\n        es_master1:\n          ansible_host: <span>${es_master1}</span>\n        es_master2:\n          ansible_host: <span>${es_master2}</span>\n        es_master3:\n          ansible_host: <span>${es_master3}</span>\n    es_data:\n      hosts:\n        es_data1:\n          ansible_host: <span>${es_data1}</span>\n        es_data2:\n          ansible_host: <span>${es_data2}</span>\n        es_data3:\n          ansible_host: <span>${es_data3}</span>\n    es_ingest:\n      hosts:\n        es_ingest1:\n          ansible_host: <span>${es_ingest1}</span>\n        es_ingest2:\n          ansible_host: <span>${es_ingest2}</span>\n        es_ingest3:\n          ansible_host: <span>${es_ingest3}</span>\n    kibana:\n      hosts:\n        kibana1:\n          ansible_host: <span>${kibana1}</span>\n        kibana2:\n          ansible_host: <span>${kibana2}</span>\n        kibana3:\n          ansible_host: <span>${kibana3}</span>\n    logstash:\n      hosts:\n        logstash1:\n          ansible_host: <span>${logstash1}</span>\n        logstash2:\n          ansible_host: <span>${logstash2}</span>\n        logstash3:\n          ansible_host: <span>${logstash3}</span>\n    kafka:\n      hosts:\n        kafka1:\n          ansible_host: <span>${kafka1}</span>\n          zookeeper_id: 1\n        kafka2:\n          ansible_host: <span>${kafka2}</span>\n          zookeeper_id: 2\n        kafka3:\n          ansible_host: <span>${kafka3}</span>\n          zookeeper_id: 3\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><div><pre><code><span># 镜像yum源有问题得，替换下yum源</span>\nansible-galaxy <span>install</span> clay_wangzhi.sysinit\n<span>mkdir</span> -p /etc/ansible/playbooks/vars\n<span>cat</span> <span>></span> /etc/ansible/playbooks/sysinit.yml <span>&lt;&lt;</span> <span>EOF\n---\n- hosts: all\n  roles:\n    - clay_wangzhi.sysinit\nEOF</span>\nansible all -m shell -a <span>\"rm -rf /etc/yum.repos.d/bak/\"</span>\nansible-playbook /etc/ansible/playbooks/sysinit.yml --tags upgrade_repo\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"安装-elasticsearch\"> 安装 Elasticsearch</h2>\n<div><pre><code><span># 下载roles</span>\nansible-galaxy <span>install</span> elastic.elasticsearch,v7.11.2\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span># 编写playbook</span>\n<span>cat</span> <span>></span> /etc/ansible/playbooks/elasticsearch.yml <span>&lt;&lt;</span> <span>EOF\n---\n# 注意修改yum源为清华源\n- hosts: es_master\n  roles:\n    - role: elastic.elasticsearch\n  vars:\n    node_master: true\n    node_data: false\n  vars_files:\n    - vars/es_vars.yml\n\n- hosts: es_data\n  roles:\n    - role: elastic.elasticsearch\n  vars:\n    node_master: false\n    node_data: true\n  vars_files:\n    - vars/es_vars.yml\n\n- hosts: es_ingest\n  roles:\n    - role: elastic.elasticsearch\n  vars:\n    node_master: false\n    node_data: false\n  vars_files:\n    - vars/es_vars.yml\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><div><pre><code><span># 新增var_files</span>\n<span>cat</span> <span>></span> /etc/ansible/playbooks/vars/es_vars.yml <span>&lt;&lt;</span> <span>EOF\nes_heap_size: \"4g\"\nes_api_host: \"{{ansible_ssh_host}}\"\nes_data_dirs:\n  - \"/opt/elasticsearch/data\"\nes_log_dir: \"/opt/elasticsearch/logs\"\nes_config:\n  cluster.name: \"suncar-es\"\n  node.name: \"{{inventory_hostname}}\"\n  network.host: \"{{ansible_ssh_host}}\"\n  cluster.initial_master_nodes: '[\"{{hostvars[groups[\"es_master\"][0]].ansible_host}}\"{% for host in groups[\"es_master\"][1:] %}, \"{{hostvars[host].ansible_host}}\"{% endfor %}]'\n  discovery.seed_hosts: '[\"{{hostvars[groups[\"es_master\"][0]].ansible_host}}:9300\"{% for host in groups[\"es_master\"][1:] %}, \"{{hostvars[host].ansible_host}}:9300\"{% endfor %}]'\n  http.port: 9200\n  node.master: \"{{node_master}}\"\n  node.data: \"{{node_data}}\"\n  bootstrap.memory_lock: true\n  gateway.recover_after_nodes: 2\n  xpack.monitoring.collection.enabled: true\n  http.cors.enabled: true\n  http.cors.allow-origin: \"*\"\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><div><pre><code><span># 修改roles文件，修改yum源为清华源</span>\n<span>cat</span> <span>></span> /etc/ansible/roles/elastic.elasticsearch/templates/elasticsearch.repo <span>&lt;&lt;</span> <span>EOF\n[elasticsearch-7.x]\nname=Elasticsearch repository for 7.x packages\nbaseurl=https://mirrors.tuna.tsinghua.edu.cn/elasticstack/yum/elastic-7.x/\ngpgcheck=0\nenabled=1\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span># 修改es yml配置文件,将安全功能开启，并自己设置密码</span>\n<span>vim</span> /etc/ansible/roles/elastic.elasticsearch/templates/elasticsearch.yml.j2\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>{% if es_enable_xpack and es_api_basic_auth_username is defined and es_api_basic_auth_password is defined %}   #将这一行改为下面\n{% if not oss_version %}\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>执行playbook前，首先要进行数据磁盘的挂载，挂载到数据目录，es数据节点磁盘占用很大</p>\n</blockquote>\n<div><pre><code><span># 安装</span>\nansible-playbook /etc/ansible/playbooks/elasticsearch.yml \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span># ansible安装完成后，初始化es通信的密码，在任意es_master1节点执行</span>\n<span>export</span> <span>JAVA_HOME</span><span>=</span>/usr/share/elasticsearch/jdk/\n<span>cd</span> /usr/share/elasticsearch/\nbin/elasticsearch-setup-passwords interactive\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><strong>配置Node间SSL</strong></p>\n<p>注意：这里是指配置ES集群节点间transport的SSL认证，对于ES节点的HTTP API接口并没有配置，所以通过API访问ES时不需要提供证书。</p>\n<p>参考官网:</p>\n<p>https://www.elastic.co/guide/en/elasticsearch/reference/current/ssl-tls.html</p>\n<p>https://www.elastic.co/guide/en/elasticsearch/reference/7.4/configuring-tls.html</p>\n<p>创建SSL/TLS证书：</p>\n<div><pre><code><span>cd</span> /usr/share/elasticsearch/bin\n<span>export</span> <span>JAVA_HOME</span><span>=</span>/usr/share/elasticsearch/jdk/\n./elasticsearch-certutil ca -v   //一路回车\n<span>cd</span> <span>..</span>\n./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12  //一路回车\n<span>mv</span> elastic-* /etc/elasticsearch/\n<span>cd</span> /etc/elasticsearch/\n<span>chown</span> elasticsearch.elasticsearch *.p12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>操作完成后，把证书传到剩余节点，修改剩余节点的配置文件，并重启</p>\n<div><pre><code><span># 将证书传到 ansible /tmp 目录下</span>\nansible elasticsearch -m copy -a <span>\"src=/tmp/elastic-certificates.p12 dest=/etc/elasticsearch/ owner=elasticsearch group=elasticsearch\"</span> \nansible elasticsearch -m copy -a <span>\"src=/tmp/elastic-stack-ca.p12 dest=/etc/elasticsearch/ owner=elasticsearch group=elasticsearch\"</span> \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span># 修改/etc/elasticsearch/elasticsearch.yml 配置文件</span>\nansible elasticsearch -m lineinfile -a <span>\"path=/etc/elasticsearch/elasticsearch.yml line='xpack.security.transport.ssl.enabled: true<span title=\"\\n\">\\n</span>xpack.security.transport.ssl.verification_mode: certificate<span title=\"\\n\">\\n</span>xpack.security.transport.ssl.keystore.path: /etc/elasticsearch/elastic-certificates.p12<span title=\"\\n\">\\n</span>xpack.security.transport.ssl.truststore.path: /etc/elasticsearch/elastic-certificates.p12'\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span># 重启es</span>\nansible elasticsearch -m <span>service</span> -a <span>\"name=elasticsearch state=restarted\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>在此过程中，所有节点必须全部更新完，否则之前的用户名和密码将会认证失败</p>\n<p>更新完成之后，集群的健康检查为yellow，不要着急，等待它自己自动恢复成green，当es中数据较多时会出现</p>\n</blockquote>\n<blockquote>\n<p>Kibana，logstash，kafka的安装可以同时进行，提高效率</p>\n</blockquote>\n<h2 id=\"安装-kibana\"> 安装 Kibana</h2>\n<div><pre><code><span># 下载roles</span>\nansible-galaxy <span>install</span> clay_wangzhi.kibana\n<span># 编写playbook，根据实际情况，填写用户名，密码</span>\n<span>export</span> <span>k_username</span><span>=</span>elastic <span>k_pass</span><span>=</span>E<span>#2021</span>\n<span>cat</span> <span>></span> /etc/ansible/playbooks/kibana.yml <span>&lt;&lt;</span> <span>EOF\n- hosts: kibana\n  roles:\n    - clay_wangzhi.kibana\n  vars:\n    kibana_version: \"7.x\"\n    kibana_dversion: \"7.11.2\"\n    kibana_server_host: \"{{ansible_ssh_host}}\"\n    kibana_server_name: \"{{inventory_hostname}}\"\n    kibana_elasticsearch_url: '[\"http://{{hostvars[groups[\"es_ingest\"][0]].ansible_host}}:9200\"{% for host in groups[\"es_ingest\"][1:] %}, \"http://{{hostvars[host].ansible_host}}:9200\"{% endfor %}]'\n    kibana_elasticsearch_username: \"<span>${k_username}</span>\"\n    kibana_elasticsearch_password: \"<span>${k_pass}</span>\"\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><div><pre><code><span># 安装</span>\nansible-playbook /etc/ansible/playbooks/kibana.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>TODO：Kibana7.11.x 版本具有告警功能，已经GA了，后续可以看一下</p>\n</blockquote>\n<h2 id=\"安装-logstash\"> 安装 logstash</h2>\n<div><pre><code><span># 下载roles</span>\nansible-galaxy <span>install</span> clay_wangzhi.logstash\n<span># 编写playbook，根据实际情况，填写用户名，密码</span>\n<span>export</span> <span>l_username</span><span>=</span>elastic <span>l_pass</span><span>=</span>E<span>#2021</span>\n<span>cat</span> <span>></span> /etc/ansible/playbooks/logstash.yml <span>&lt;&lt;</span> <span>EOF\n- hosts: logstash\n  roles:\n    - clay_wangzhi.logstash\n  vars:\n    logstash_version: '7.x'\n    logstash_dversion: '7.11.2'\n    logstash_elasticsearch_hosts: '[\"http://{{hostvars[groups[\"es_ingest\"][0]].ansible_host}}:9200\"{% for host in groups[\"es_ingest\"][1:] %}, \"http://{{hostvars[host].ansible_host}}:9200\"{% endfor %}]'\n    es_user: \"<span>${l_username}</span>\"\n    es_pass: \"<span>${l_pass}</span>\"\n    kafka_topic: \"h5-jar\"\n    kafka_group_id: \"suncar-h5\"\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><div><pre><code><span># 安装</span>\nansible-playbook /etc/ansible/playbooks/logstash.yml \n<span># kafka 还未安装，先停止logstash</span>\nansible logstash -m <span>service</span> -a <span>\"name=logstash state=stopped\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>TODO: logstash 的playbook后期有空，可以优化一下</p>\n</blockquote>\n<h2 id=\"安装-kafka\"> 安装 kafka</h2>\n<p>kafka集群依赖zookeeper，先安装zookeeper集群</p>\n<blockquote>\n<p>由于下载源有问题，需要手工注释掉了下载的task，我事先把压缩包下载到了ansible控制节点，先传到各个客户端</p>\n<div><pre><code>ansible kafka -m copy -a &quot;src=/tmp/zookeeper-3.4.14.tar.gz dest=/tmp/&quot;\n</code></pre>\n<div><span>1</span><br></div></div></blockquote>\n<p><strong>安装zookeeper</strong></p>\n<div><pre><code><span># 下载roles</span>\nansible-galaxy <span>install</span> clay_wangzhi.zookeeper\n<span># 编写playbook</span>\n<span>cat</span> <span>></span> /etc/ansible/playbooks/zookeeper.yml <span>&lt;&lt;</span> <span>EOF\n---\n- hosts: kafka\n  roles:\n  - role: clay_wangzhi.zookeeper\n    zookeeper_version: 3.4.14\n    zookeeper_mirror: \"https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper\"\n    zookeeper_servers: \"{{groups['kafka']}}\"\n    zookeeper_environment:\n      \"JAVA_HOME\": \"/opt/jdk1.8.0_144\"\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code><span># 安装</span>\nansible-playbook /etc/ansible/playbooks/zookeeper.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><strong>安装kafka</strong></p>\n<div><pre><code><span># 下载roles</span>\nansible-galaxy <span>install</span> clay_wangzhi.kafka\n<span>cat</span> <span>></span> /etc/ansible/playbooks/kafka.yml <span>&lt;&lt;</span> <span>EOF\n---\n- hosts: kafka\n  roles:\n    - clay_wangzhi.kafka\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>\n<p>执行playbook前，首先要进行数据磁盘的挂载，挂载到数据目录，kafka数据节点磁盘占用很大</p>\n</blockquote>\n<div><pre><code><span># 安装</span>\nansible-playbook /etc/ansible/playbooks/kafka.yml\n<span># 启动logstash，上面停止了</span>\nansible logstash -m <span>service</span> -a <span>\"name=logstash state=started\"</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"安装-filebeat\"> 安装 filebeat</h2>\n<div><pre><code># 添加filebeat主机到主机清单\n    filebeat:\n      hosts:\n        192.168.124.3:\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span># 下载roles</span>\nansible-galaxy <span>install</span> elastic.beats,v7.11.2\n<span># 编写playbook，beat_conf 请根据实际情况来填写</span>\n<span>cat</span> <span>></span> /etc/ansible/playbooks/filebeat.yml <span>&lt;&lt;</span> <span>EOF\n---\n- hosts: filebeat\n  roles:\n    - elastic.beats\n  vars:\n    beat: filebeat\n    beat_conf:\n      filebeat:\n        inputs:\n          - type: log\n            enabled: true\n            paths:\n              - /home/ncar/service/webapps/logs/ShengDaGFHD/ShengDaGFHD.log\n            multiline.pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}'\n            multiline.negate: true\n            multiline.match: after\n            tags: [\"jar\"]\n            fields:\n              type: h5-jar\n              ip: \"{{inventory_hostname}}\"\n              service_name: shengdasxgh\n      processors:\n        - drop_fields:\n            fields: [\"agent\", \"ecs.version\", \"host.name\"]\n    \n    output_conf:\n      kafka:\n        hosts: '[\"{{hostvars[groups[\"kafka\"][0]].ansible_host}}:9092\"{% for host in groups[\"kafka\"][1:] %}, \"{{hostvars[host].ansible_host}}:9092\"{% endfor %}]'\n        topic: 'h5-jar'\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><div><pre><code><span># 修改roles文件，修改yum源为清华源</span>\n<span>cat</span> <span>></span> /etc/ansible/roles/elastic.beats/templates/beats.repo.j2 <span>&lt;&lt;</span> <span>EOF\n[filebeat-7.x]\nname=Elasticsearch repository for 7.x packages\nbaseurl=https://mirrors.tuna.tsinghua.edu.cn/elasticstack/yum/elastic-7.x/\ngpgcheck=0\nenabled=1\nEOF</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span># 安装</span>\nansible-playbook /etc/ansible/playbooks/filebeat.yml\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "文档的CRUD",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.2%20%E6%96%87%E6%A1%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9CCRUP%E4%B8%8E%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.2%20%E6%96%87%E6%A1%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9CCRUP%E4%B8%8E%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C/",
      "content_html": "<h2 id=\"文档的crud\"> 文档的CRUD</h2>\n<p><img src=\"images/1568013522348.png\" alt=\"\"></p>\n<ul>\n<li>Type名，约定都用_doc</li>\n<li>Create - 如果ID已经存在，会失败</li>\n<li>Index - 如果ID不存在，创建新的文档。否则，先删除现有的文档，再创建现有的文档，再创建新的文档，版本会增加</li>\n<li>Update - 文档必须已经存在，更新只会对相应字段做增量修改</li>\n</ul>\n<h3 id=\"create一个文档\"> Create一个文档</h3>\n<ul>\n<li>支持自动生产文档id和指定文档id两种方式</li>\n<li>通过调用&quot;post /users/_doc&quot;\n<ul>\n<li>系统会自动生产document id</li>\n</ul>\n</li>\n<li>使用HTTP PUT user/create/1创建时，URI中显示指定_create，此时如果该id的文档已经存在，操作失败</li>\n</ul>\n<p><img src=\"images/1568015379663.png\" alt=\"\"></p>\n<h3 id=\"get一个文档\"> Get一个文档</h3>\n<ul>\n<li>找到文档，返回HTTP 200\n<ul>\n<li>文档元信息\n<ul>\n<li>_index / _type /</li>\n<li>版本信息，同一个id的文档，即使被删除，version号也会不断增加</li>\n<li>_source中默认包含了文档的所有原始信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>找不到文档，返回HTTP 404</li>\n</ul>\n<h3 id=\"index-文档\"> Index 文档</h3>\n<ul>\n<li>Index和Create不一样的地方：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1</li>\n</ul>\n<p><img src=\"images/1568015891907.png\" alt=\"\"></p>\n<h3 id=\"update文档\"> Update文档</h3>\n<ul>\n<li>Update方法不会删除原来的文档，而是实现真正的数据更新</li>\n<li>Post方法 / Payload需要包含在&quot;doc&quot;中</li>\n</ul>\n<p><img src=\"images/1568016019747.png\" alt=\"\"></p>\n<h2 id=\"api的批量操作\"> API的批量操作</h2>\n<h3 id=\"bulk-api\"> Bulk API</h3>\n<ul>\n<li>支持在一次API调用中，对不同的索引进行操作</li>\n<li>支持四种类型操作\n<ul>\n<li>Index</li>\n<li>Create</li>\n<li>Update</li>\n<li>Delete</li>\n</ul>\n</li>\n<li>可以在URI中指定Index，也可以在请求的Payload中进行</li>\n<li>操作中单条操作失败，并不会影响其他操作</li>\n<li>返回结果包括了每一条操作执行的结果</li>\n</ul>\n<p><img src=\"images/1568017190479.png\" alt=\"\"></p>\n<h3 id=\"批量读取-mget\"> 批量读取 - mget</h3>\n<p>批量操作，可以减少网络连接所产生的开销，提高性能</p>\n<p><img src=\"images/1568018531224.png\" alt=\"\"></p>\n<p><img src=\"images/1568018545981.png\" alt=\"\"></p>\n<h3 id=\"批量查询-msearch\"> 批量查询 - msearch</h3>\n<p><img src=\"images/1568018796705.png\" alt=\"\"></p>\n<h2 id=\"常见的错误返回\"> 常见的错误返回</h2>\n<p><img src=\"images/1568018899854.png\" alt=\"\"></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "正排与倒排索引",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.3%20%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E5%85%A5%E9%97%A8/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.3%20%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E5%85%A5%E9%97%A8/",
      "content_html": "<h2 id=\"正排与倒排索引\"> 正排与倒排索引</h2>\n<ul>\n<li>在一本书的开始，有一个目录 - 正排</li>\n</ul>\n<p><img src=\"images/1568083459813.png\" alt=\"\"></p>\n<ul>\n<li>在一本书的最后，有一个索引页 - 倒排</li>\n</ul>\n<p>根据关键词查看内容所在页</p>\n<p><img src=\"images/1568083528241.png\" alt=\"\"></p>\n<h3 id=\"图书和索引引擎的类比\"> 图书和索引引擎的类比</h3>\n<ul>\n<li>图书\n<ul>\n<li>正排索引 - 目录页</li>\n<li>倒排索引 - 索引页</li>\n</ul>\n</li>\n<li>索引引擎\n<ul>\n<li>正排索引 - 文档id到文档内容和单词的关联</li>\n<li>倒排索引 - 单词到文档id的关联</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"举例\"> 举例</h3>\n<p><img src=\"images/1568084661010.png\" alt=\"\"></p>\n<h2 id=\"倒排索引\"> 倒排索引</h2>\n<h3 id=\"倒排索引的核心组成\"> 倒排索引的核心组成</h3>\n<ul>\n<li>\n<p>倒排索引包含两个部分</p>\n<ul>\n<li>单词词典（Term Dictionary）,记录所有文档的单词，记录单词到倒排列表的关联关系\n<ul>\n<li>单词词典一般比较大，可以通过B + 树或哈希拉链法实现，以满足高性能的插入与查询</li>\n</ul>\n</li>\n<li>倒排列表（Posting List）,记录了单词对应的文档组合，由倒排索引项组成\n<ul>\n<li>倒排索引项（Posting）\n<ul>\n<li>文档ID</li>\n<li>词频 TF - 该单词在文档中出现的次数，用户相关性评分</li>\n<li>位置（Position）- 单词在文档中分词的位置。用于语句搜索（phrase query）</li>\n<li>偏移（Offset）- 记录单词的开始结束位置，实现高亮显示</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"举例-2\"> 举例</h3>\n<p>Elasticsearch的在文档内容的索引</p>\n<p><img src=\"images/1568085534232.png\" alt=\"\"></p>\n<h3 id=\"elasticsearch的倒排索引\"> Elasticsearch的倒排索引</h3>\n<ul>\n<li>Elasticsearch的JSON文档中的每个字段，都有自己的倒排索引</li>\n<li>可以指定对某些字段不做索引\n<ul>\n<li>优点：节省存储空间</li>\n<li>缺点： 字段无法被搜索</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Analysis",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.4%20%E9%80%9A%E8%BF%87%E5%88%86%E6%9E%90%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%88%86%E8%AF%8D/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.4%20%E9%80%9A%E8%BF%87%E5%88%86%E6%9E%90%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%88%86%E8%AF%8D/",
      "content_html": "<h2 id=\"analysis\"> Analysis</h2>\n<h3 id=\"analysis与analyzer\"> Analysis与Analyzer</h3>\n<ul>\n<li>Analysis - 文本分析是把全文本转换一系列单词（term/token）的过程，也叫分词</li>\n<li>Analysis是通过Analyzer来实现的\n<ul>\n<li>可使用Elasticsearch内置的分析器/或者按需定制化分析器</li>\n</ul>\n</li>\n<li>除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析</li>\n</ul>\n<h3 id=\"analyzer的组成\"> Analyzer的组成</h3>\n<ul>\n<li>分词器是专门处理分词的组件，Analyzer由三部分组成\n<ul>\n<li>Character Filters（针对原始文本处理，例如去除html）/ Tokenizer（按照规则切分为单词）/ Token Filter（将切分的单词进行加工，小写，删除stopwords，增加同义词）</li>\n</ul>\n</li>\n</ul>\n<p>举例</p>\n<p><img src=\"images/1568094953293.png\" alt=\"\"></p>\n<h2 id=\"elasticsearch的内置分词器\"> Elasticsearch的内置分词器</h2>\n<ul>\n<li>Standard Analyzer - 默认分词器，按词切分，小写处理</li>\n<li>Simple Analyzer - 按照非字母切分（符号被过滤），小写处理</li>\n<li>Stop Analyzer - 小写处理，停用词过滤（the ，a，is）</li>\n<li>Whitespace Analyzer - 按照空格切分，不转小写</li>\n<li>Keyword Analyzer - 不分词，直接将输入当做输出</li>\n<li>Patter Analyzer - 正则表达式，默认\\W+（非字符分隔）</li>\n<li>Language - 提供了30多种常见语言的分词器</li>\n<li>Customer Analyzer  - 自定义分词器</li>\n</ul>\n<h3 id=\"使用-analyzer-api\"> 使用_analyzer API</h3>\n<p><img src=\"images/1568095742575.png\" alt=\"\"></p>\n<h2 id=\"中文分词\"> 中文分词</h2>\n<h3 id=\"分文分词的难点\"> 分文分词的难点</h3>\n<ul>\n<li>中文句子，切分成一个一个词（不是一个个字）</li>\n<li>英文中，单词有自然的空格作为分隔</li>\n<li>一句中文，在不同的上下文，有不同的理解\n<ul>\n<li>这个苹果，不大好吃 / 这个苹果，不大，好吃！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"icu-analyzer\"> ICU Analyzer</h3>\n<ul>\n<li>需要安装plugin\n<ul>\n<li>Elasticsearch-plugin install analysis-icu</li>\n</ul>\n</li>\n<li>提供了Unicode的支持，更好的支持亚洲语言</li>\n</ul>\n<p><img src=\"images/1568096106355.png\" alt=\"\"></p>\n<p>举例</p>\n<p><img src=\"images/1568096123515.png\" alt=\"\"></p>\n<h3 id=\"常用的中文分词器\"> 常用的中文分词器</h3>\n<ul>\n<li>IK\n<ul>\n<li>支持自定义词库，支持热更新分词字典</li>\n<li>https://github.com/medcl/elasticsearch-analysis-ik</li>\n</ul>\n</li>\n<li>THUlAC\n<ul>\n<li>THU Lexucal Analyzer for Chinese，清华大学自然语言处理和社会人文计算实验室的一套中文分词器</li>\n<li>https://github.com/microbun/elasticsearch-thulac-plugin</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Search API",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.5%20Search%20API%E6%A6%82%E8%A7%88/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.5%20Search%20API%E6%A6%82%E8%A7%88/",
      "content_html": "<h2 id=\"search-api\"> Search API</h2>\n<ul>\n<li>URI Search\n<ul>\n<li>在URL中使用查询参数</li>\n</ul>\n</li>\n<li>Request Body Search\n<ul>\n<li>使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language （DSL）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"指定查询的索引\"> 指定查询的索引</h3>\n<p><img src=\"images/1568097742808.png\" alt=\"\"></p>\n<h3 id=\"uri查询\"> URI查询</h3>\n<ul>\n<li>使用&quot;q&quot;，指定查询字符串</li>\n<li>&quot;query string syntax&quot;，KV键值对</li>\n</ul>\n<p>举例</p>\n<p><img src=\"images/1568097928424.png\" alt=\"\"></p>\n<h3 id=\"request-body\"> Request Body</h3>\n<p><img src=\"images/1568098031540.png\" alt=\"\"></p>\n<h3 id=\"搜索response字段说明\"> 搜索Response字段说明</h3>\n<p><img src=\"images/1568098178099.png\" alt=\"\"></p>\n<h2 id=\"衡量相关性\"> 衡量相关性</h2>\n<ul>\n<li>Information Retrieval（检索）\n<ul>\n<li>Rrecision（查准率） - 尽可能返回较少的无关文档</li>\n<li>Recall （查全率）- 尽量返回较多的相关文档</li>\n<li>Ranking - 是否能够按照相关度进行排序</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/1568098803331.png\" alt=\"\"></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "通过URI query实现搜索",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.6%20URI%20Search%E8%AF%A6%E8%A7%A3/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.6%20URI%20Search%E8%AF%A6%E8%A7%A3/",
      "content_html": "<h2 id=\"通过uri-query实现搜索\"> 通过URI query实现搜索</h2>\n<ul>\n<li>q 指定查询语句，使用Query String Syntax</li>\n<li>df 指定默认字段，不指定时会对所有字段进行查询</li>\n<li>Sort排序 / from 和size用于分页</li>\n<li>Profile 可以查看查询是如何被执行的</li>\n</ul>\n<h3 id=\"query-string-syntax\"> Query String Syntax</h3>\n<ul>\n<li>指定字段 v.s 泛查询\n<ul>\n<li>q=title:2012  /   q=2012</li>\n</ul>\n</li>\n<li>Term v.s Phrase\n<ul>\n<li>Beautiful Mind 等效于 Beautiful OR Mind</li>\n<li>&quot;Beautiful Mind&quot;等效于Beautiful AND Mind。Phrase查询，还要求前后顺序保持一致</li>\n</ul>\n</li>\n<li>分组与引号\n<ul>\n<li>title:(Beautiful AND Mind)   - term查询要用&quot;()&quot;括起来</li>\n<li>title=&quot;Beautiful Mind&quot; - phrase查询要用&quot;&quot;双引号</li>\n</ul>\n</li>\n<li>布尔操作\n<ul>\n<li>AND 、OR、NOT或者 &amp;&amp; 、||、！\n<ul>\n<li>必须大写</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>分组\n<ul>\n<li>+ 表示must</li>\n<li>- 表示must_not</li>\n</ul>\n</li>\n<li>范围查询\n<ul>\n<li>区间表示：[]闭区间，{}开区间\n<ul>\n<li>year:{2018 TO 2019}</li>\n<li>year:[* TO 2018]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算数符号\n<ul>\n<li>year:&gt;2010</li>\n<li>year:(&gt;2010 &amp;&amp; &lt;=2018)</li>\n<li>year:(+&gt;2010 -&lt;2018)</li>\n</ul>\n</li>\n<li>通配符查询（通配符查询效率低，占用内存大，不建议使用。特别是放在最前面）\n<ul>\n<li>？代表1个字符，* 代表0或多个字符\n<ul>\n<li>title:mi?d</li>\n<li>title:be*</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>正则表达\n<ul>\n<li>title:[bt]oy</li>\n</ul>\n</li>\n<li>模糊匹配与近似查询\n<ul>\n<li>title:befutifl~1</li>\n<li>title:&quot;lord rings&quot;~2\n<ul>\n<li>表示lord 和rings之间可以存在两个单词</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Request Body Search",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.7%20Request%20Body%E5%92%8CQuery%20DSL%E7%AE%80%E4%BB%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.3%20Elasticsearch%E5%85%A5%E9%97%A8/9.3.7%20Request%20Body%E5%92%8CQuery%20DSL%E7%AE%80%E4%BB%8B/",
      "content_html": "<h2 id=\"request-body-search\"> Request Body Search</h2>\n<ul>\n<li>将查询语句通过HTTP Request Body发送给Elasticsearch</li>\n<li>Query DSL</li>\n</ul>\n<p>举例</p>\n<p><img src=\"images/1568169039971.png\" alt=\"\"></p>\n<h3 id=\"分页\"> 分页</h3>\n<ul>\n<li>From从0开始，默认返回10个结果</li>\n<li>获取靠后的翻页成本较高</li>\n</ul>\n<p><img src=\"images/1568169125069.png\" alt=\"\"></p>\n<h3 id=\"排序\"> 排序</h3>\n<ul>\n<li>最好在&quot;数字型&quot;与&quot;日期型&quot;字段上排序\n<ul>\n<li>因为对于多值类型或分析过的字段排序，系统会选一个值，无法得知该值</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/1568170207936.png\" alt=\"\"></p>\n<h3 id=\"source-filtering\"> _source filtering</h3>\n<ul>\n<li>如果_source没有存储，那就只返回匹配的文档的元数据</li>\n<li>_source支持使用通配符_source[&quot;name*&quot;,&quot;desc*&quot;]</li>\n</ul>\n<p><img src=\"images/1568191600446.png\" alt=\"\"></p>\n<h3 id=\"脚本字段\"> 脚本字段</h3>\n<ul>\n<li>用例：订单中有不同的汇率，需要结合汇率对，订单价格进行排序</li>\n</ul>\n<p><img src=\"images/1568191768549.png\" alt=\"\"></p>\n<h3 id=\"使用查询表达式-match\"> 使用查询表达式 - Match</h3>\n<ul>\n<li>默认使用term类型，或的关系</li>\n</ul>\n<p><img src=\"images/1568191830422.png\" alt=\"\"></p>\n<ul>\n<li>可以指定操作类型为AND</li>\n</ul>\n<p><img src=\"images/1568191867781.png\" alt=\"\"></p>\n<h3 id=\"短语搜索-match-phrase\"> 短语搜索 - Match Phrase</h3>\n<ul>\n<li>slop参数表示，允许各个单词之间插入的单词个数</li>\n</ul>\n<p><img src=\"images/1568192076860.png\" alt=\"\"></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "背景",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.8%20%E4%BF%9D%E6%8A%A4%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE/9.8.1%20%E9%9B%86%E7%BE%A4%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E7%94%A8%E6%88%B7%E9%89%B4%E6%9D%83/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/9.8%20%E4%BF%9D%E6%8A%A4%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE/9.8.1%20%E9%9B%86%E7%BE%A4%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E7%94%A8%E6%88%B7%E9%89%B4%E6%9D%83/",
      "content_html": "<h2 id=\"背景\"> 背景</h2>\n<h3 id=\"数据信息泄漏\"> 数据信息泄漏</h3>\n<p>5700万用户数据泄漏</p>\n<p><img src=\"images/1569311876561.png\" alt=\"\"></p>\n<p>1.08亿条投注信息泄漏</p>\n<p><img src=\"images/1569311911223.png\" alt=\"\"></p>\n<h3 id=\"原因分析\"> 原因分析</h3>\n<ul>\n<li>Elasticsearch在默认安装后，不提供任何形式的安全防护</li>\n<li>错误的配置信息导致公网可以访问ES集群\n<ul>\n<li>在elasticsearch.yml文件中，server.host被错误的配置为0.0.0.0</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据安全性的基本需求\"> 数据安全性的基本需求</h2>\n<ul>\n<li>身份认证\n<ul>\n<li>鉴定用户是否合法</li>\n</ul>\n</li>\n<li>用户鉴权\n<ul>\n<li>指定用户可以访问哪个索引</li>\n</ul>\n</li>\n<li>传输加密</li>\n<li>日志审计</li>\n</ul>\n<h2 id=\"一些免费的方案\"> 一些免费的方案</h2>\n<ul>\n<li>设置Nginx反向代理，用户，密码 登录nginx</li>\n<li>安装免费的Security插件\n<ul>\n<li>Search Guard - https://search-guard.com/</li>\n<li>ReadOnly REST - https://github.com/sscarduzio/elasticsearch-readonlyrest-plugin</li>\n</ul>\n</li>\n<li>X-Pack的Basic版\n<ul>\n<li>从ES 6.8 &amp; ES 7.0开始，Security纳入x-pack的Basic版本中，免费使用一些基本的功能</li>\n<li>https://www.elastic.co/cn/what-is/elastic-stack-security</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"authentication-身份认证\"> Authentication - 身份认证</h3>\n<ul>\n<li>认证体系的几种类型\n<ul>\n<li>提供用户名和密码</li>\n<li>提供秘钥或Kerberos票据</li>\n</ul>\n</li>\n<li>Realms： X-pack中的认证服务\n<ul>\n<li>内置Realms（免费）\n<ul>\n<li>File/Native（用户名密码保存在Elasticsearch）</li>\n</ul>\n</li>\n<li>外部Realms（收费）\n<ul>\n<li>LDAP / Active Diretory / PKI / SAML / Kerberos</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rbac-用户鉴权\"> RBAC - 用户鉴权</h3>\n<ul>\n<li>什么是RBCA: Role Based Access Control，定义一个角色，并分配一组权限。权限包括索引级，字段级，集群级的不同的操作。然后通过将角色分配给用户，使得用户拥有这些权限\n<ul>\n<li>User： The authenticated User</li>\n<li>Role：A named set of permisssions</li>\n<li>Permission：A set of one or more privileges against a secured resource</li>\n<li>Privilege：A named group of 1 or more actions that user may execute against a secured resource</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"privilege\"> Privilege</h3>\n<ul>\n<li>Cluster Privileges\n<ul>\n<li>all / monitor / manager / manage_index / manage_index_template / manage_rollup</li>\n</ul>\n</li>\n<li>Indices Privileges\n<ul>\n<li>all / create / create_index / delete / delete_index / index / manage / read / write / view_index_metadata</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建内置的用户和角色\"> 创建内置的用户和角色</h3>\n<p><img src=\"images/1569313522190.png\" alt=\"\"></p>\n<h4 id=\"使用security-api创建用户\"> 使用Security API创建用户</h4>\n<p><img src=\"images/1569313559385.png\" alt=\"\"></p>\n<h3 id=\"开启并配置x-pack的认证与鉴权\"> 开启并配置X-pack的认证与鉴权</h3>\n<ul>\n<li>修改配置文件，打开认证与授权</li>\n</ul>\n<div><pre><code>bin/elasticsearch -E node.name=node0 -E cluster.name=geektime -E path.data=node0_data -E http.port=9200 -E xpack.security.enabled=true\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>创建默认的用户和分组</li>\n</ul>\n<div><pre><code>bin/elasticsearch-password interactive\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>当集群开启身份认证之后，配置Kibana</li>\n<li>Demo\n<ul>\n<li>创建一个Role，配置为对某个索引只读权限 / 创建一个用户，把用户加入Role</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"配置kibana\"> 配置Kibana</h4>\n<ul>\n<li>修改kibana.yml</li>\n</ul>\n<div><pre><code>elasticsearch.username: &quot;kibana&quot;\nelasticsearch.password: &quot;changeme&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Elasticsearch基础概念",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/9.1%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/9.1%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/",
      "content_html": "<h2 id=\"elasticsearch基础概念\"> Elasticsearch基础概念</h2>\n<h3 id=\"elasticsearch关键概念\"> Elasticsearch关键概念</h3>\n<ul>\n<li>Document（文档）：用户存储在es中的数据文档，它是以JSON格式定义的特定方式的字段集合。每个文档都属于一个类型，并驻留在一个索引中。每个文档都有一个唯一的标识符，称为UID。</li>\n<li>Index（索引）：包含一堆有相似结构的文档数据，比如可以有一个客户索引，商品分类索引，订单索引，索引有一个名称。一个index包含很多document，一个index就代表了一类类似的或者相同的Document。比如说建立一个商品索引，里面可能就存放了所有的商品数据。</li>\n<li>Type/Mapping（类型/映射）：它是共享同一索引中一组公共字段的文档集合。例如，索引包含社交网络应用程序的数据，然后可以有特定类型的用户简档数据、另一种类型的消息数据和另一种类型的评论数据。</li>\n<li>Node（节点）：它指的是ElasticSearch的单个运行实例，是集群的构成单元。单个物理和虚拟服务器可容纳多个节点，具体取决于其物理资源(如内存、存储和处理能力)的能力。</li>\n<li>Cluster（集群）：它是一个或多个节点组成的集合。集群为整个数据提供跨节点的索引和搜索功能。</li>\n<li>Shard（分片）：单台机器无法存储大量数据，ElasticSearch可以将一个索引中的数据切分为多个Shard，分布在多台服务器上存储。有了Shard就可以横向扩展，存储更多数据，让搜索和分析等操作分布到多台服务器上去执行，提升吞吐量和性能。</li>\n<li>Replicas(副本):服务器随时可能故障或宕机，此时Shard可能就会丢失，因此可以为每个Shard创建多个Replica副本。Replica可以在Shard故障时提供备用服务，保证数据不丢失，多个Replica还可以提升搜索操作的吞吐量和性能。</li>\n</ul>\n<h3 id=\"document-文档\"> Document（文档）</h3>\n<p>document其实就是json object 由字段（Field)组成，常见的类型：</p>\n<ul>\n<li>\n<p>字符串：keyword（不分词）,text(分词)</p>\n</li>\n<li>\n<p>数值型：long,integer,short,byte,double,float,half_float,scaled_float</p>\n</li>\n<li>\n<p>布尔：boolean</p>\n</li>\n<li>\n<p>日期：date</p>\n</li>\n<li>\n<p>二进制：binary</p>\n</li>\n<li>\n<p>范围类型：integer_range,float_range,long_range,double_range,date_range</p>\n</li>\n</ul>\n<p>每一个文档有唯一的ID标识</p>\n<ul>\n<li>自行指定</li>\n<li>es 自动生成</li>\n</ul>\n<p><img src=\"images/document01.png\" alt=\"\"></p>\n<ul>\n<li>元数据，用于标注文档的相关信息\n<ul>\n<li>_index：文档所在的索引名</li>\n<li>_type：文档所在的类型名</li>\n<li>_id：文档唯一id</li>\n<li>_uid：组合id，由_type和_id组成（6.x _type不再起作用，同id一样）</li>\n<li>_source：文档的原始Json数据，可以从这里获取每个字段的内容</li>\n<li>_all：整合所有字段内容到该字段，默认禁用</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：元数据不能删除</p>\n</blockquote>\n<h3 id=\"index-索引\"> Index（索引）</h3>\n<ul>\n<li>索引中存储具有相同结构的文档（Document）\n<ul>\n<li>每个索引都有自己的mapping定义，用于定义字段名和类型</li>\n</ul>\n</li>\n<li>一个集群可以有多个索引，比如：\n<ul>\n<li>nginx日志存储的时候可以按照日期每天生产一个索引来存储\n<ul>\n<li>nginx_log_2019-08-01</li>\n<li>nginx_log_2019-08-02</li>\n<li>nginx_log_2019-08-03</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mapping\"> Mapping</h3>\n<h4 id=\"作用\"> 作用</h4>\n<ul>\n<li>类似数据库中的表结构定义，主要作用如下：\n<ul>\n<li>定义Index下的字段名（Field Name）</li>\n<li>定义字段的类型，比如数值型、字符串型、布尔型等</li>\n<li>定义倒排索引相关的配置，比如是否索引、记录position等</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/mapping01.png\" alt=\"\"></p>\n<p><img src=\"images/mapping02.png\" alt=\"\"></p>\n<blockquote>\n<p>Mapping中的字段类型一旦设定后，禁止直接修改，原因如下：</p>\n<p>​\tLucene实现的倒排索引生成后不允许修改</p>\n</blockquote>\n<h4 id=\"常用参数\"> 常用参数</h4>\n<h5 id=\"dynamic\"> Dynamic</h5>\n<ul>\n<li>允许新增字段，通过dynamic参数来控制字段的新增\n<ul>\n<li>true（默认）允许自动新增字段</li>\n<li>false不允许自动新增字段，但是文档可以正常写入，但无法对字段进行查询等操作</li>\n<li>strict文档不能写入，报错</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"copy-to\"> copy_to</h5>\n<ul>\n<li>将该字段的值复制到目标字段，实现类似_all的作用</li>\n<li>不会出现在_source中，只用来搜索</li>\n</ul>\n<h5 id=\"index\"> index</h5>\n<ul>\n<li>控制当前字段是否索引，默认为true，即记录索引，false不记录，即不可搜索</li>\n</ul>\n<h5 id=\"index-options\"> index_options</h5>\n<ul>\n<li>用于控制倒排索引记录的内容，有如下4种配置\n<ul>\n<li>docs：只记录doc id</li>\n<li>freqs：记录doc id和term frequencies</li>\n<li>positions：记录doc id、term frequencies和term position</li>\n<li>offsets：记录doc id、term frequencies、term position和character offsets</li>\n</ul>\n</li>\n<li>text类型默认配置为positions，其他默认为docs</li>\n<li>记录内容越多，占用空间越大</li>\n</ul>\n<h5 id=\"null-value\"> null_value</h5>\n<ul>\n<li>当字段遇到null值时的处理策略，默认为null，即控制，此时es会忽略该值。可以通过设定该值设定字段的默认值</li>\n</ul>\n<h3 id=\"rest-api\"> Rest API</h3>\n<ul>\n<li>\n<p>Elasticsearch集群对外提供Restful API</p>\n<ul>\n<li>REST：REpresentational State Transfer</li>\n<li>URL指定资源，如Index、Document等</li>\n<li>Http Method指明资源操作类型，如GET、POST、PUT、DELETE等</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/rest01.png\" alt=\"\"></p>\n<h4 id=\"创建文档\"> 创建文档</h4>\n<p><img src=\"images/create01.png\" alt=\"\"></p>\n<p><img src=\"images/create02.png\" alt=\"\"></p>\n<h4 id=\"查询文档\"> 查询文档</h4>\n<p><img src=\"images/select01.png\" alt=\"\"></p>\n<p><img src=\"images/select02.png\" alt=\"\"></p>\n<h4 id=\"批量创建\"> 批量创建</h4>\n<p><img src=\"images/create03.png\" alt=\"\"></p>\n<h4 id=\"批量查询\"> 批量查询</h4>\n<p><img src=\"images/select03.png\" alt=\"\"></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Elasticsearch分词",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/9.2%20%E5%88%86%E8%AF%8D/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/9.2%20%E5%88%86%E8%AF%8D/",
      "content_html": "<h2 id=\"elasticsearch分词\"> Elasticsearch分词</h2>\n<h3 id=\"分词相关概念\"> 分词相关概念</h3>\n<ul>\n<li>分词：是指将文本转换成一系列单词（term or token）,也可以叫做文本分析，在es里面称为Analysis。</li>\n<li>分词器：是es中专门处理分词的组件，英文为Analyzer，它的组成如下：\n<ul>\n<li>Character Filters：针对原始文本进行处理，比如去除html特殊标记符</li>\n<li>Tokenizer：将原始文本按照一定规则切分为单词</li>\n<li>Token Filters：针对tokenizer处理完成的单词，再加工，比如转小写、删除或新增等处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用场景\"> 使用场景</h3>\n<ul>\n<li>创建或更新文档时（Index Time），会对相应的文档进行分词处理</li>\n<li>查询时（SearchTime），会对查询语句进行分词</li>\n</ul>\n<h4 id=\"索引时\"> 索引时</h4>\n<ul>\n<li>索引时分词是通过配置Index Mapping中每个字段的analyzer属性实现的，不指定分词时，默认使用standard，如下</li>\n</ul>\n<p><img src=\"images/index01.png\" alt=\"\"></p>\n<h4 id=\"查询时\"> 查询时</h4>\n<ul>\n<li>查时分词的指定方式有如下几种:\n<ul>\n<li>查询的时候通过analyzer指定分词器</li>\n<li>通多index mapping设置search_analyzer实现</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/chaxun01.png\" alt=\"\"></p>\n<h3 id=\"analyze-api\"> Analyze API</h3>\n<ul>\n<li>es提供了一个测试分词的api接口，方便验证分词效果，endpoint是_analyze\n<ul>\n<li>可以直接指定analyzer进行测试</li>\n<li>可以直接指定索引中的字段进行测试</li>\n<li>可以自定义分词器进行测试</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/analyze01.png\" alt=\"\"></p>\n<p><img src=\"images/analyze02.png\" alt=\"\"></p>\n<p><img src=\"images/analyze03.png\" alt=\"\"></p>\n<h3 id=\"预定义的分词器\"> 预定义的分词器</h3>\n<ul>\n<li>\n<p>es自带如下的分词器</p>\n<ul>\n<li>Standard</li>\n<li>Simple</li>\n<li>Whitespace</li>\n<li>Stop</li>\n<li>Keyword</li>\n<li>Pattern</li>\n<li>Language</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"standard-analyzer\"> Standard Analyzer</h4>\n<ul>\n<li>默认分词器</li>\n<li>其组成如图，特性为：\n<ul>\n<li>按词切分，支持多语言</li>\n<li>小写处理</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/yudingyi01.png\" alt=\"\"></p>\n<h4 id=\"simple-analyzer\"> Simple Analyzer</h4>\n<ul>\n<li>其组成如图，特性为：\n<ul>\n<li>按照非字母切分</li>\n<li>小写处理</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/yudingyi02.png\" alt=\"\"></p>\n<h4 id=\"whitespace-analyzer\"> Whitespace Analyzer</h4>\n<ul>\n<li>其组成如图，特性为：\n<ul>\n<li>按照空格切分</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/yudingyi03.png\" alt=\"\"></p>\n<h4 id=\"stop-analyzer\"> Stop Analyzer</h4>\n<ul>\n<li>Stop Word 指预期助词等修饰性的词语，比如the、an、的、这等等</li>\n<li>其组成如图，特性为：\n<ul>\n<li>相比Simple Analyzer多了Stop Word处理</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/yudingyi04.png\" alt=\"\"></p>\n<h4 id=\"keyword-analyzer\"> KeyWord Analyzer</h4>\n<ul>\n<li>其组成如图，特性为：\n<ul>\n<li>不分词，直接将输入作为一个单词输出</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/yudingyi05.png\" alt=\"\"></p>\n<h4 id=\"pattern-analyzer\"> Pattern Analyzer</h4>\n<ul>\n<li>其组成如图，特性为：\n<ul>\n<li>通过正则表达式自定义分割符</li>\n<li>默认是\\W+，即非字词的符号作为分隔符</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/yudingyi06.png\" alt=\"\"></p>\n<h3 id=\"自定义分词\"> 自定义分词</h3>\n<h4 id=\"tokernizer\"> Tokernizer</h4>\n<ul>\n<li>将原始文本按照一定规则切分为单词（term or token）</li>\n<li>自带的如下：\n<ul>\n<li>standard 按照单词进行分割</li>\n<li>letter按照非字符类进行分割</li>\n<li>whitespace 按照空格进行分割</li>\n<li>UAX URL Email按照standard分割，但不会分割邮箱和url</li>\n<li>NGram和Edge NGram连词分割</li>\n<li>Path Hierarchy按照文件路径进行切割</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/zidingyi02.png\" alt=\"\"></p>\n<h4 id=\"character-filters\"> Character Filters</h4>\n<ul>\n<li>在Tokenizer之前对原始文本进行处理，比如增加、删除或替换字符等</li>\n<li>自带的如下：\n<ul>\n<li>HTML Strip 去除html标签和转换html实体</li>\n<li>Mapping进行字符替换操作</li>\n<li>Pattern Replace进行正则匹配替换</li>\n</ul>\n</li>\n<li>会影响后续tokenizer解析的postion和offset信息</li>\n</ul>\n<p><img src=\"images/zidingyi01.png\" alt=\"\"></p>\n<h4 id=\"token-filters\"> Token Filters</h4>\n<ul>\n<li>对于tokenizer输出的单词（term）进行增加、删除、修改等操作</li>\n<li>自带的如下：\n<ul>\n<li>lowercase将所有term转换为小写</li>\n<li>stop删除stop words</li>\n<li>NGram和Edge NGram连词分割</li>\n<li>Synonym添加近义词的term</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"images/zidingyi03.png\" alt=\"\"></p>\n<h4 id=\"api\"> API</h4>\n<ul>\n<li>自定义分词需要在索引的配置中设定，如下所示：</li>\n</ul>\n<p><img src=\"images/zidingyi04.png\" alt=\"\"></p>\n<p><img src=\"images/zidingyi05.png\" alt=\"\"></p>\n<h3 id=\"中文分词\"> 中文分词</h3>\n<ul>\n<li>\n<p>难点</p>\n<ul>\n<li>中文分词指的是将一个汉字序列切分成一个一个单独的词。在英文中，单词之间是以空格作为自然分界符，汉语中词没有一个形式上的分解符。</li>\n<li>上下文不同，分词结果迥异，比如交叉歧义问题，比如下面两种分词都合理\n<ul>\n<li>乒乓球拍/卖/完了</li>\n<li>乒乓球/拍卖/完了</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>常用分词系统</p>\n<ul>\n<li>IK\n<ul>\n<li>实现中英文单词的切分，支持ik_smart、ik_maxword等模式</li>\n<li>可自定义词库，支持热更新分词词典</li>\n</ul>\n</li>\n<li>jieba\n<ul>\n<li>python中最流行的分词系统，支持分词和词性标注</li>\n<li>支持繁体分词、自定义词典、并行分词等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>基于自然语言处理的分词系统</p>\n<ul>\n<li>Hanlp\n<ul>\n<li>由一系列模型与算法组成的Java工具包，目标是普及自然语言处理在生产环境中的应用</li>\n</ul>\n</li>\n<li>THULAC\n<ul>\n<li>THU Lexical Analyzer for Chinese，由清华大学自然语言处理与社会人文计算实验室研制推出的一套中文词法分析工具包，具有中文分词和词性标注功能</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分词使用建议\"> 分词使用建议</h3>\n<ul>\n<li>明确字段是否需要分词，不需要分词的字段就将type设置为keyword，可以节省空间和提高写性能</li>\n<li>善用_analyze API，查看文档的具体分词结果</li>\n<li>动手测试</li>\n</ul>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Centos7.6下Elasticseatch7.2集群搭建步骤",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/9.3%20centos7.6%E4%B8%8Belasticsearch7.2%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/9.3%20centos7.6%E4%B8%8Belasticsearch7.2%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "content_html": "<h2 id=\"centos7-6下elasticseatch7-2集群搭建步骤\"> Centos7.6下Elasticseatch7.2集群搭建步骤</h2>\n<h3 id=\"环境准备\"> 环境准备</h3>\n<ul>\n<li>云主机：3台</li>\n<li>linux系统版本：centos7.6.1810</li>\n<li>配置：4核 8G</li>\n</ul>\n<h4 id=\"主机名解析\"> 主机名解析</h4>\n<div><pre><code>hostnamectl set-hostname es01.csp\n</code></pre>\n<div><span>1</span><br></div></div><p>将三台主机的主机名加入到<code>/etc/hosts</code>文件中</p>\n<div><pre><code>echo &quot;xxx.xxx.xxx.xxx es01.csp&quot; /etc/hosts\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"安装依赖环境\"> 安装依赖环境</h4>\n<h5 id=\"安装jdk11和shasum\"> 安装JDK11和shasum</h5>\n<div><pre><code>yum -y install java-11-openjdk.x86_64 1:perl-Digest-SHA-5.85-4.el7.x86_64\n</code></pre>\n<div><span>1</span><br></div></div><h5 id=\"安装docker\"> 安装docker</h5>\n<h6 id=\"uninstall-old-versions\"> Uninstall old versions</h6>\n<div><pre><code>yum remove docker \\\n  docker-client \\\n  docker-client-latest \\\n  docker-common \\\n  docker-latest \\\n  docker-latest-logrotate \\\n  docker-logrotate \\\n  docker-engine\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h6 id=\"install-using-the-repository\"> Install using the repository</h6>\n<ol>\n<li>Install required packages. <code>yum-utils</code> provides the <code>yum-config-manager</code> utility, and <code>device-mapper-persistent-data</code> and <code>lvm2</code>are required by the <code>devicemapper</code> storage driver.</li>\n</ol>\n<div><pre><code>yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ol start=\"2\">\n<li>Use the following command to set up the <strong>stable</strong> repository.</li>\n</ol>\n<div><pre><code>yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h6 id=\"install-docker-ce\"> INSTALL DOCKER CE</h6>\n<ol>\n<li>Install the <em>latest version</em> of Docker CE and containerd, or go to the next step to install a specific version:</li>\n</ol>\n<div><pre><code>yum -y install docker-ce docker-ce-cli containerd.io\n</code></pre>\n<div><span>1</span><br></div></div><p>2.Start Docker.</p>\n<div><pre><code>systemctl enable docker\nsystemctl start docker\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h6 id=\"configure-the-docker-accelerator\"> Configure the docker accelerator</h6>\n<ul>\n<li>Docker中国区官方镜像</li>\n</ul>\n<div><pre><code>vim /etc/docker/daemon.json\n</code></pre>\n<div><span>1</span><br></div></div><p>加入下面的数据：</p>\n<p>docker-cn镜像：</p>\n<div><pre><code>{\n  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>或者</p>\n<ul>\n<li>阿里云容器  服务（推荐）</li>\n</ul>\n<div><pre><code>tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;\n{\n  &quot;registry-mirrors&quot;: [&quot;https://pclhthp0.mirror.aliyuncs.com&quot;]\n}\nEOF\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>systemctl restart docker\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"新增防火墙策略\"> 新增防火墙策略</h4>\n<div><pre><code>iptables -t filter -I INPUT 5 -m state --state NEW -m tcp -p tcp --dport 9200 -j ACCEPT \niptables -t filter -I INPUT 6 -m state --state NEW -m tcp -p tcp --dport 9300 -j ACCEPT\niptables-save &gt; /etc/sysconfig/iptables\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"安装elasticsearch\"> 安装Elasticsearch</h3>\n<ul>\n<li>自己手动安装Elasticsearch</li>\n</ul>\n<p>Elasticsearch以以下包格式提供：</p>\n<table>\n<thead>\n<tr>\n<th>Linux和MacOS <code>tar.gz</code>档案</th>\n<th>这些<code>tar.gz</code>存档可以在任何Linux发行版和MacOS上安装。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/targz.html\" target=\"_blank\" rel=\"noopener noreferrer\">在Linux或MacOS上从归档安装Elasticsearch</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Windows <code>.zip</code>档案</td>\n<td>该<code>zip</code>存档适合在Windows上安装。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/zip-windows.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>.zip</code>在Windows上安装Elasticsearch</a></td>\n</tr>\n<tr>\n<td><code>deb</code></td>\n<td>该<code>deb</code>软件包适用于Debian，Ubuntu和其他基于Debian的系统。Debian软件包可以从Elasticsearch网站或我们的Debian存储库下载。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/deb.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Debian软件包安装Elasticsearch</a></td>\n</tr>\n<tr>\n<td><code>rpm</code></td>\n<td>该<code>rpm</code>软件包适合安装在Red Hat，Centos，SLES，OpenSuSE和其他基于RPM的系统上。RPM可以从Elasticsearch网站或我们的RPM存储库下载。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/rpm.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用RPM安装Elasticsearch</a></td>\n</tr>\n<tr>\n<td><code>msi</code></td>\n<td>[ beta ] 此功能处于测试版状态，可能会发生变化。设计和代码不如官方GA功能成熟，并且按原样提供，不提供任何保证。测试版功能不受官方GA功能支持SLA的约束。该<code>msi</code>软件包适合安装在至少安装了.NET 4.5框架的Windows 64位系统上，并且是在Windows上开始使用Elasticsearch的最简单选择。MSI可以从Elasticsearch网站下载。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/windows.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Windows MSI安装程序安装Elasticsearch</a></td>\n</tr>\n<tr>\n<td><code>docker</code></td>\n<td>图像可用于将Elasticsearch作为Docker容器运行。它们可以从Elastic Docker Registry下载。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/docker.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Docker安装Elasticsearch</a></td>\n</tr>\n<tr>\n<td><code>brew</code></td>\n<td>可以从Elastic Homebrew tap获得公式，以便使用Homebrew包管理器在macOS上安装Elasticsearch。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/brew.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Homebrew在macOS上安装Elasticsearch</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>配置管理工具</li>\n</ul>\n<p>我们还提供以下配置管理工具来帮助进行大型部署：</p>\n<table>\n<thead>\n<tr>\n<th>Puppet</th>\n<th><a href=\"https://github.com/elastic/puppet-elasticsearch\" target=\"_blank\" rel=\"noopener noreferrer\">puppet-elasticsearch</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chef</td>\n<td><a href=\"https://github.com/elastic/cookbook-elasticsearch\" target=\"_blank\" rel=\"noopener noreferrer\">cookbook-elasticsearch</a></td>\n</tr>\n<tr>\n<td>Ansible</td>\n<td><a href=\"https://github.com/elastic/ansible-elasticsearch\" target=\"_blank\" rel=\"noopener noreferrer\">ansible-elasticsearch</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用rmp安装elasticsearch\"> 使用RMP安装Elasticsearch</h4>\n<h5 id=\"手动下载并安装rpm包\"> 手动下载并安装RPM包</h5>\n<p>可以从网站下载Elasticsearch v7.2.0的RPM并按如下方式安装：</p>\n<div><pre><code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-x86_64.rpm\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-x86_64.rpm.sha512\nshasum -a 512 -c elasticsearch-7.2.0-x86_64.rpm.sha512 \nrpm --install elasticsearch-7.2.0-x86_64.rpm\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h5 id=\"用systemd运行elasticsearch\"> 用systemd运行Elasticsearch</h5>\n<p>要将Elasticsearch配置为在系统启动时自动启动，请运行以下命令：</p>\n<div><pre><code>systemctl daemon-reload\nsystemctl enable elasticsearch.service\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>Elasticsearch可以按如下方式启动和停止：</p>\n<div><pre><code>systemctl start elasticsearch.service\nsystemctl stop elasticsearch.service\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>！！！请改好配置文件后，再启动</p>\n</blockquote>\n<p>这些命令不提供有关Elasticsearch是否成功启动的反馈。相反，此信息将写入位于的日志文件中<code>/var/log/elasticsearch/</code>。</p>\n<p>默认情况下，Elasticsearch服务不会在<code>systemd</code> 日记中记录信息。要启用<code>journalctl</code>日志记录，<code>--quiet</code>必须从文件中的<code>ExecStart</code>命令行中删除该选项<code>elasticsearch.service</code>。</p>\n<h5 id=\"当systemd启用了日志记录-日志信息使用可用journalctl的命令\"> 当<code>systemd</code>启用了日志记录，日志信息使用可用<code>journalctl</code>的命令：</h5>\n<p>To tail the journal:</p>\n<div><pre><code>journalctl -f\n</code></pre>\n<div><span>1</span><br></div></div><p>To list journal entries for the elasticsearch service:</p>\n<div><pre><code>journalctl --unit elasticsearch\n</code></pre>\n<div><span>1</span><br></div></div><p>To list journal entries for the elasticsearch service starting from a given time:</p>\n<div><pre><code>journalctl --unit elasticsearch --since  &quot;2016-10-30 18:17:16&quot;\n</code></pre>\n<div><span>1</span><br></div></div><h5 id=\"检查elasticsearch是否在正常运行\"> 检查Elasticsearch是否在正常运行</h5>\n<p>您可以测试你的Elasticsearch节点通过发送一个HTTP请求的端口上运行<code>9200</code>上<code>localhost</code>：</p>\n<div><pre><code>GET /\n</code></pre>\n<div><span>1</span><br></div></div><p>正常情况下会收到类似下面这样的回复</p>\n<div><pre><code>{\n  &quot;name&quot; : &quot;es01.csp&quot;,\n  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,\n  &quot;cluster_uuid&quot; : &quot;wdgCotLlSOGt_zwv_69CIw&quot;,\n  &quot;version&quot; : {\n    &quot;number&quot; : &quot;7.2.0&quot;,\n    &quot;build_flavor&quot; : &quot;default&quot;,\n    &quot;build_type&quot; : &quot;rpm&quot;,\n    &quot;build_hash&quot; : &quot;508c38a&quot;,\n    &quot;build_date&quot; : &quot;2019-06-20T15:54:18.811730Z&quot;,\n    &quot;build_snapshot&quot; : false,\n    &quot;lucene_version&quot; : &quot;8.0.0&quot;,\n    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,\n    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;\n  },\n  &quot;tagline&quot; : &quot;You Know, for Search&quot;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h5 id=\"配置elasticsearch\"> 配置Elasticsearch</h5>\n<p>Elasticsearch默认使用<code>/etc/elasticsearch</code>运行时配置。此目录的所有权和此目录中的所有文件都设置为 <code>root:elasticsearch</code>打包安装，并且目录<code>setgid</code> 设置了标志，以便创建的所有文件和子目录<code>/etc/elasticsearch</code> 也使用此所有权创建（例如，如果使用密钥库创建<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/secure-settings.html\" target=\"_blank\" rel=\"noopener noreferrer\">密钥库）工具</a>）。预计会对此进行维护，以便Elasticsearch进程可以通过组权限读取此目录下的文件。</p>\n<p><code>/etc/elasticsearch/elasticsearch.yml</code>默认情况下，Elasticsearch从文件加载其配置 。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/settings.html\" target=\"_blank\" rel=\"noopener noreferrer\"><em>配置Elasticsearch中</em></a>介绍了此配置文件的格式。</p>\n<p>RPM还有一个系统配置文件（<code>/etc/sysconfig/elasticsearch</code>），允许您设置以下参数：</p>\n<table>\n<thead>\n<tr>\n<th><code>JAVA_HOME</code></th>\n<th>设置要使用的自定义Java路径。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>MAX_OPEN_FILES</code></td>\n<td>最大打开文件数，默认为<code>65535</code>。</td>\n</tr>\n<tr>\n<td><code>MAX_LOCKED_MEMORY</code></td>\n<td>最大锁定内存大小。<code>unlimited</code>如果您使用<code>bootstrap.memory_lock</code>elasticsearch.yml中的选项，则 设置为。</td>\n</tr>\n<tr>\n<td><code>MAX_MAP_COUNT</code></td>\n<td>进程可能具有的最大内存映射区域数。如果您使用<code>mmapfs</code> 索引存储类型，请确保将其设置为较高的值。欲了解更多信息，请查看 <a href=\"https://github.com/torvalds/linux/blob/master/Documentation/sysctl/vm.txt\" target=\"_blank\" rel=\"noopener noreferrer\">Linux内核文件</a> 有关<code>max_map_count</code>。这是<code>sysctl</code>在启动Elasticsearch之前设置的。默认为<code>262144</code>。</td>\n</tr>\n<tr>\n<td><code>ES_PATH_CONF</code></td>\n<td>配置文件目录（其中必须包括<code>elasticsearch.yml</code>，<code>jvm.options</code>，和<code>log4j2.properties</code>文件）; 默认为<code>/etc/elasticsearch</code>。</td>\n</tr>\n<tr>\n<td><code>ES_JAVA_OPTS</code></td>\n<td>您可能想要应用的任何其他JVM系统属性。</td>\n</tr>\n<tr>\n<td><code>RESTART_ON_UPGRADE</code></td>\n<td>在程序包升级时配置重新启动，默认为<code>false</code>。这意味着您必须在手动安装软件包后重新启动Elasticsearch实例。这样做的原因是为了确保群集中的升级不会导致连续的分片重新分配，从而导致高网络流量并缩短群集的响应时间。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用的分发<code>systemd</code>要求通过<code>systemd</code>而不是通过<code>/etc/sysconfig/elasticsearch</code> 文件来配置系统资源限制。有关更多信息，请参阅<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#systemd\" target=\"_blank\" rel=\"noopener noreferrer\">Systemd配置</a>。</p>\n</blockquote>\n<h5 id=\"rpm目录布局\"> RPM目录布局</h5>\n<p>RPM将配置文件，日志和数据目录放置在基于RPM的系统的适当位置：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n<th>默认位置</th>\n<th>设置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>home</strong></td>\n<td>Elasticsearch主目录或 <code>$ES_HOME</code></td>\n<td><code>/usr/share/elasticsearch</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>bin</strong></td>\n<td>二进制脚本，包括<code>elasticsearch</code>启动节点和<code>elasticsearch-plugin</code>安装插件</td>\n<td><code>/usr/share/elasticsearch/bin</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>conf</strong></td>\n<td>配置文件包括 <code>elasticsearch.yml</code></td>\n<td><code>/etc/elasticsearch</code></td>\n<td><code>ES_PATH_CONF</code></td>\n</tr>\n<tr>\n<td><strong>conf</strong></td>\n<td>环境变量，包括堆大小，文件描述符。</td>\n<td><code>/etc/sysconfig/elasticsearch</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>data</strong></td>\n<td>节点上分配的每个索引/分片的数据文件的位置。可以容纳多个位置。</td>\n<td><code>/var/lib/elasticsearch</code></td>\n<td><code>path.data</code></td>\n</tr>\n<tr>\n<td><strong>logs</strong></td>\n<td>日志文件位置。</td>\n<td><code>/var/log/elasticsearch</code></td>\n<td><code>path.logs</code></td>\n</tr>\n<tr>\n<td><strong>plugins</strong></td>\n<td>插件文件位置。每个插件都将包含在一个子目录中。</td>\n<td><code>/usr/share/elasticsearch/plugins</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>repo</strong></td>\n<td>共享文件系统存储库位置。可以容纳多个位置。文件系统存储库可以放在此处指定的任何目录的任何子目录中。</td>\n<td>未配置</td>\n<td><code>path.repo</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"配置elasticsearch-2\"> 配置Elasticsearch</h3>\n<p>Elasticsearch具有良好的默认值，只需要很少的配置。可以使用<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/cluster-update-settings.html\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Cluster Update Settings</em></a> API 在正在运行的群集上更改大多数设置 。</p>\n<p>配置文件应包含特定于节点的设置（例如<code>node.name</code>和路径），或节点为了能够加入群集而需要的设置，例如<code>cluster.name</code>和<code>network.host</code>。</p>\n<ul>\n<li>配置文件位置</li>\n</ul>\n<p>Elasticsearch有三个配置文件：</p>\n<p>​\t*  <code>elasticsearch.yml</code> 用于配置Elasticsearch</p>\n<p>​\t* <code>jvm.options</code> 用于配置Elasticsearch JVM设置</p>\n<p>​\t* <code>log4j2.properties</code> 用于配置Elasticsearch日志记录</p>\n<p>这些文件位于config目录中，其默认位置取决于安装是来自存档分发（<code>tar.gz</code>或<code>zip</code>）还是包分发（Debian或RPM软件包）。</p>\n<p>对于包分发，config目录位置默认为 <code>/etc/elasticsearch</code>。config目录的位置也可以通过<code>ES_PATH_CONF</code>环境变量进行更改，但请注意，在shell中设置它是不够的。相反，此变量来自 <code>/etc/default/elasticsearch</code>（对于Debian软件包）和<code>/etc/sysconfig/elasticsearch</code>（对于RPM软件包）。您需要相应地编辑<code>ES_PATH_CONF=/etc/elasticsearch</code>其中一个文件中的 条目以更改配置目录位置。</p>\n<ul>\n<li>配置文件格式</li>\n</ul>\n<p>配置格式为<a href=\"http://www.yaml.org/\" target=\"_blank\" rel=\"noopener noreferrer\">YAML</a>。以下是更改数据路径和日志目录的示例：</p>\n<div><pre><code>path:\n    data: /var/lib/elasticsearch\n    logs: /var/log/elasticsearch\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>设置也可以按如下方式展平：</p>\n<div><pre><code>path.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ul>\n<li>环境变量替换</li>\n</ul>\n<p>使用<code>${...}</code>配置文件中的符号引用的环境变量将替换为环境变量的值，例如：</p>\n<div><pre><code>node.name:    ${HOSTNAME}\nnetwork.host: ${ES_NETWORK_HOST}\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h4 id=\"path-data和path-logs\"> <code>path.data</code>和<code>path.logs</code></h4>\n<p>如果您使用<code>.zip</code>或<code>.tar.gz</code>存档，则<code>data</code>和<code>logs</code> 目录是子文件夹<code>$ES_HOME</code>。如果这些重要文件夹保留在其默认位置，则在将Elasticsearch升级到新版本时，存在删除它们的高风险。</p>\n<p>在生产使用中，您几乎肯定会想要更改数据和日志文件夹的位置：</p>\n<div><pre><code>path:\n  logs: /var/log/elasticsearch\n  data: /var/data/elasticsearch\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>该RPM和Debian发行版已经使用自定义路径，<code>data</code>和<code>logs</code>。</p>\n<p>该<code>path.data</code>设置可以被设置为多条路径，在这种情况下，所有的路径将被用于存储数据（虽然属于单个碎片文件将全部存储相同的数据路径上）：</p>\n<div><pre><code>path:\n  data:\n    - /mnt/elasticsearch_1\n    - /mnt/elasticsearch_2\n    - /mnt/elasticsearch_3\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"cluster-name\"> <code>cluster.name</code></h4>\n<p>节点只能<code>cluster.name</code>在与群集中的所有其他节点共享群集时才能加入群集。默认名称是<code>elasticsearch</code>，但您应将其更改为适当的名称，该名称描述了群集的用途。</p>\n<div><pre><code>cluster.name: logging-prod\n</code></pre>\n<div><span>1</span><br></div></div><p>确保不要在不同的环境中重用相同的群集名称，否则最终会导致节点加入错误的群集。</p>\n<h4 id=\"node-name\"> <code>node.name</code></h4>\n<p>Elasticsearch使用Elasticsearch <code>node.name</code>的特定实例作为人类可读标识符，因此它包含在许多API的响应中。它默认为Elasticsearch启动时机器具有的主机名，但可以<code>elasticsearch.yml</code>按如下方式显式配置 ：</p>\n<div><pre><code>node.name: es01.csp\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"network-host\"> <code>network.host</code></h4>\n<p>默认情况下，Elasticsearch仅绑定到环回地址 - 例如<code>127.0.0.1</code> 和<code>[::1]</code>。这足以在服务器上运行单个开发节点。</p>\n<blockquote>\n<p>实际上，可以从<code>$ES_HOME</code> 单个节点上的相同位置启动多个节点。这对于测试Elasticsearch形成集群的能力非常有用，但它不是推荐用于生产的配置。</p>\n</blockquote>\n<p>为了在其他服务器上形成包含节点的集群，您的节点将需要绑定到非环回地址。虽然有许多 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-network.html\" target=\"_blank\" rel=\"noopener noreferrer\">网络设置</a>，但通常您需要配置的是 <code>network.host</code>：</p>\n<div><pre><code>network.host: 192.168.1.10\n</code></pre>\n<div><span>1</span><br></div></div><p>该<code>network.host</code>设置也了解一些特殊的值，比如 <code>_local_</code>，<code>_site_</code>，<code>_global_</code>。</p>\n<h4 id=\"发现和集群形成设置\"> 发现和集群形成设置</h4>\n<p>在开始生产之前，应该配置两个重要的发现和集群形成设置，以便群集中的节点可以相互发现并选择主节点。</p>\n<h5 id=\"discovery-seed-hosts\"> <code>discovery.seed_hosts</code></h5>\n<p>开箱即用，没有任何网络配置，Elasticsearch将绑定到可用的环回地址，并将扫描本地端口9300到9305以尝试连接到在同一服务器上运行的其他节点。这提供了自动集群体验，无需进行任何配置。</p>\n<p>如果要在其他主机上形成包含节点的群集，则必须使用该 <code>discovery.seed_hosts</code>设置提供群集中其他节点的列表，这些节点符合主要条件且可能是实时且可联系的，以便为<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-discovery-hosts-providers.html\" target=\"_blank\" rel=\"noopener noreferrer\">发现过程设定</a>种子。此设置通常应包含群集中所有符合主节点的节点的地址。此设置包含主机数组或逗号分隔的字符串。每个值应采用<code>host:port</code>或的形式<code>host</code>（如果未设置，则<code>port</code> 默认为设置<code>transport.profiles.default.port</code>回落<code>transport.port</code>）。请注意，必须将IPv6主机置于括号内。此设置的默认值为<code>127.0.0.1, [::1]</code>。</p>\n<h5 id=\"cluster-initial-master-nodes\"> <code>cluster.initial_master_nodes</code></h5>\n<p>当您第一次启动全新的Elasticsearch集群时，会出现一个<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-discovery-bootstrap-cluster.html\" target=\"_blank\" rel=\"noopener noreferrer\">集群引导</a>步骤，该步骤确定在第一次选举中计票的主要合格节点集。在<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/bootstrap-checks.html#dev-vs-prod-mode\" target=\"_blank\" rel=\"noopener noreferrer\">开发模式下</a>，如果未配置发现设置，则此步骤由节点本身自动执行。由于此自动引导<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-discovery-quorums.html\" target=\"_blank\" rel=\"noopener noreferrer\">本质上</a>是<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-discovery-quorums.html\" target=\"_blank\" rel=\"noopener noreferrer\">不安全的</a>，因此当您在<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/bootstrap-checks.html#dev-vs-prod-mode\" target=\"_blank\" rel=\"noopener noreferrer\">生产模式下</a>启动全新集群时，必须明确列出符合主要条件的节点，这些节点的投票应在第一次选举中计算。使用该<code>cluster.initial_master_nodes</code>设置设置此列表 。</p>\n<div><pre><code>discovery.seed_hosts:\n   - 192.168.1.10:9300\n   - 192.168.1.11 ###1\n   - seeds.mydomain.com  ###2\ncluster.initial_master_nodes: ###3\n   - master-node-a\n   - master-node-b\n   - master-node-c\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>###1 如果未指定，端口将默认为<code>transport.profiles.default.port</code>和回退<code>transport.port</code>。</p>\n<p>###2 如果主机名解析为多个IP地址，则该节点将尝试发现所有已解析地址的其他节点。</p>\n<p>###3 初始主节点应由其标识 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/node.name.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>node.name</code></a>，默认为其主机名。确保值<code>cluster.initial_master_nodes</code>与<code>node.name</code> 确切匹配。如果使用完全限定的域名（例如 <code>master-node-a.example.com</code>节点名称），则必须在此列表中使用完全限定名称; 相反，如果<code>node.name</code>是一个没有任何尾随限定符的裸主机名，那么你还必须省略尾随限定符<code>cluster.initial_master_nodes</code>。</p>\n<p>有关更多信息，请参阅<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-discovery-bootstrap-cluster.html\" target=\"_blank\" rel=\"noopener noreferrer\">引导群集</a>以及 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-discovery-settings.html\" target=\"_blank\" rel=\"noopener noreferrer\">发现和群集形成设置</a>。</p>\n<blockquote>\n<p>如果在未配置这些设置的情况下启动Elasticsearch节点，则它将以开发模式启动并自动引导至新集群。如果您在不同的主机上启动某些Elasticsearch节点，则默认情况下它们不会相互发现，并且会在每个主机上形成不同的群集。即使您随后尝试将所有节点配置到单个群集中，Elasticsearch也不会在它们形成后将单独的群集合并在一起。这是因为没有办法将这些单独的集群合并在一起而没有数据丢失的风险。您可以通过检查<code>GET /</code>每个节点上报告的群集UUID来判断您是否已形成单独的群集。如果您打算组建一个群集，那么您应该重新开始：</p>\n<ul>\n<li>如果您不想丢失任何数据，请拍摄每个单主机群集的<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-snapshots.html\" target=\"_blank\" rel=\"noopener noreferrer\">快照</a>。请注意，每个群集必须使用自己的快照存储库。</li>\n<li>关闭所有节点。</li>\n<li>通过删除其<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-node.html#data-path\" target=\"_blank\" rel=\"noopener noreferrer\">数据文件夹</a>的内容完全擦除每个节点 。</li>\n<li><code>cluster.initial_master_nodes</code>如上所述配置。</li>\n<li>重新启动所有节点并验证它们是否已形成单个群集。</li>\n<li>根据需要<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-snapshots.html\" target=\"_blank\" rel=\"noopener noreferrer\">还原</a>所有快照。</li>\n</ul>\n</blockquote>\n<h4 id=\"设置堆大小\"> 设置堆大小</h4>\n<p>默认情况下，Elasticsearch告诉JVM使用最小和最大大小为1 GB的堆。迁移到生产环境时，配置堆大小以确保Elasticsearch有足够的可用堆是很重要的。</p>\n<p>Elasticsearch将通过（最小堆大小）和（最大堆大小）设置分配<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/jvm-options.html\" target=\"_blank\" rel=\"noopener noreferrer\">jvm.options中</a>指定的整个堆 。您应该将这两个设置设置为彼此相等。<code>Xms</code> <code>Xmx</code></p>\n<ul>\n<li>设置<code>Xmx</code>并且<code>Xms</code>不超过物理RAM的50％。Elasticsearch需要内存用于JVM堆以外的其他目的，为此留出空间很重要。例如，Elasticsearch使用堆外缓冲区进行有效的网络通信，依赖操作系统的文件系统缓存来有效访问文件，而JVM本身也需要一些内存。使用比使用该<code>Xmx</code>设置配置的限制更多的内存来观察Elasticsearch进程是正常的。</li>\n<li>设置<code>Xmx</code>并且<code>Xms</code>不超过JVM用于压缩对象指针的阈值（压缩oops）; 确切的阈值变化但接近32 GB。您可以通过在日志中查找如下所示的行来验证您是否低于阈值：</li>\n</ul>\n<div><pre><code>heap size [1.9gb], compressed ordinary object pointers [true]\n</code></pre>\n<div><span>1</span><br></div></div><p>以下是如何通过jvm.options文件设置堆大小的示例：</p>\n<div><pre><code>-Xms4g ###1\n-Xmx4g ###2\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>###1 将最小堆大小设置为4g。</p>\n<p>###2 将最大堆大小设置为4g。</p>\n<p>也可以通过环境变量设置堆大小。这可以通过注释掉来完成<code>Xms</code>，并<code>Xmx</code>设置在<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/jvm-options.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>jvm.options</code></a>文件中，并通过设置这些值<code>ES_JAVA_OPTS</code>：</p>\n<div><pre><code>ES_JAVA_OPTS=&quot;-Xms2g -Xmx2g&quot; ./bin/elasticsearch ###1\nES_JAVA_OPTS=&quot;-Xms4000m -Xmx4000m&quot; ./bin/elasticsearch ###2 \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>###1 将最小和最大堆大小设置为2 GB。</p>\n<p>###2 将最小和最大堆大小设置为4000 MB。</p>\n<h4 id=\"jvm堆存储路径\"> JVM堆存储路径</h4>\n<p>默认情况下，Elasticsearch将JVM配置为将内存异常转储到默认数据目录（这<code>/var/lib/elasticsearch</code>适用于<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/rpm.html\" target=\"_blank\" rel=\"noopener noreferrer\">RPM</a>和<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/deb.html\" target=\"_blank\" rel=\"noopener noreferrer\">Debian</a>软件包发行版，以及<code>data</code>用于<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/targz.html\" target=\"_blank\" rel=\"noopener noreferrer\">tar</a>和<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/zip-windows.html\" target=\"_blank\" rel=\"noopener noreferrer\">zip</a>归档文件分发的Elasticsearch安装根目录下的目录） 。</p>\n<p>如果这个路径是不适合接受堆转储，您应该修改的条目<code>-XX:HeapDumpPath=...</code>在 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/jvm-options.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>jvm.options</code></a>。</p>\n<p>如果指定目录，JVM将根据正在运行的实例的PID为堆转储生成文件名。</p>\n<p>如果指定固定文件名而不是目录，则当JVM需要在内存不足异常上执行堆转储时，该文件不能存在，否则堆转储将失败。</p>\n<h4 id=\"gc日志\"> GC日志</h4>\n<p>默认情况下，Elasticsearch启用GC日志。</p>\n<p>这些配置在 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/jvm-options.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>jvm.options</code></a>默认位置和默认位置与Elasticsearch日志相同。</p>\n<p>默认配置每64 MB轮换一次日志，最多可占用2 GB的磁盘空间。</p>\n<h4 id=\"临时目录\"> 临时目录</h4>\n<p>默认情况下，Elasticsearch使用启动脚本在系统临时目录下创建的专用临时目录。</p>\n<p>在某些Linux发行版上，系统实用程序将清除文件和目录（<code>/tmp</code>如果它们最近未被访问过）。如果长时间不使用需要临时目录的功能，则可能导致在Elasticsearch运行时删除专用临时目录。如果随后使用需要临时目录的功能，则会导致问题。</p>\n<p>如果使用<code>.deb</code>或<code>.rpm</code>包安装Elasticsearch 并在其下运行，<code>systemd</code>那么Elasticsearch使用的专用临时目录将从定期清理中排除。</p>\n<p>但是，如果您打算<code>.tar.gz</code>在Linux 上运行分发一段时间，那么您应该考虑为Elasticsearch创建一个专用的临时目录，该目录不在将从中清除旧文件和目录的路径下。此目录应具有权限集，以便只有运行Elasticsearch的用户才能访问它。然后<code>$ES_TMPDIR</code>在启动Elasticsearch之前将环境变量设置 为指向它。</p>\n<h4 id=\"jvm致命错误日志\"> JVM致命错误日志</h4>\n<p>默认情况下，Elasticsearch将JVM配置为将致命错误日志写入默认日志记录目录（这<code>/var/log/elasticsearch</code>适用于<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/rpm.html\" target=\"_blank\" rel=\"noopener noreferrer\">RPM</a>和<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/deb.html\" target=\"_blank\" rel=\"noopener noreferrer\">Debian</a>软件包发行版，以及<code>logs</code> 针对<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/targz.html\" target=\"_blank\" rel=\"noopener noreferrer\">tar</a>和<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/zip-windows.html\" target=\"_blank\" rel=\"noopener noreferrer\">zip</a>归档文件分发的Elasticsearch安装根目录下的目录 ）。</p>\n<p>这些是JVM在遇到致命错误（例如，分段错误）时生成的日志。如果该路径不适合于接收的日志，则应修改条目<code>-XX:ErrorFile=...</code>中 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/jvm-options.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>jvm.options</code></a>到备用路径。</p>\n<h3 id=\"系统配置调优\"> 系统配置调优</h3>\n<h4 id=\"配置系统设置\"> 配置系统设置</h4>\n<p>配置系统设置的位置取决于您用于安装Elasticsearch的软件包以及您使用的操作系统。</p>\n<p>使用<code>.zip</code>或<code>.tar.gz</code>包时，可以配置系统设置：</p>\n<ul>\n<li>暂时用<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#ulimit\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ulimit</code></a>，或</li>\n<li>永久地<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#limits.conf\" target=\"_blank\" rel=\"noopener noreferrer\"><code>/etc/security/limits.conf</code></a>。</li>\n</ul>\n<p>使用RPM或Debian软件包时，大多数系统设置都在<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#sysconfig\" target=\"_blank\" rel=\"noopener noreferrer\">系统配置文件</a>中设置 。但是，使用systemd的系统要求在<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#systemd\" target=\"_blank\" rel=\"noopener noreferrer\">systemd配置文件</a>中指定系统限制 。</p>\n<h5 id=\"ulimit\"> <code>ulimit</code></h5>\n<p>在Linux系统上，<code>ulimit</code>可以用于临时更改资源限制。通常需要<code>root</code>在切换到将运行Elasticsearch的用户之前设置限制。例如，要将打开文件句柄（<code>ulimit -n</code>）的数量设置为65,536，您可以执行以下操作：</p>\n<div><pre><code>ulimit -n 65535 \n</code></pre>\n<div><span>1</span><br></div></div><p>新限制仅在当前会话期间应用。</p>\n<p>您可以查询所有当前应用的限制<code>ulimit -a</code>。</p>\n<h5 id=\"etc-security-limits-conf\"> <code>/etc/security/limits.conf</code></h5>\n<p>在Linux系统上，可以通过编辑<code>/etc/security/limits.conf</code>文件为特定用户设置持久限制。要将用户的最大打开文件数设置<code>elasticsearch</code>为65,536，请将以下行添加到<code>limits.conf</code>文件中：</p>\n<div><pre><code>elasticsearch  -  nofile 65535\n</code></pre>\n<div><span>1</span><br></div></div><p>此更改仅在<code>elasticsearch</code>用户下次打开新会话时生效。</p>\n<blockquote>\n<p>通常在开机以优化<code>/etc/security/limits.conf</code>配置文件</p>\n<p>在最后加入下面内容</p>\n<div><pre><code>* hard nofile 65535\n* soft nofile 65535\n* soft nproc 65535\n* hard nproc 65535\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>如果已经设置上述参数，则无需调整</p>\n<ul>\n<li>hard 硬限制</li>\n<li>soft 软限制</li>\n<li>nofile 最大打开文件数（文件描述符）</li>\n<li>nproc 最大线程数</li>\n</ul>\n</blockquote>\n<h5 id=\"sysconfig文件\"> Sysconfig文件</h5>\n<p>使用RPM或Debian软件包时，可以在系统配置文件中指定系统设置和环境变量，该文件位于：</p>\n<table>\n<thead>\n<tr>\n<th>RPM</th>\n<th><code>/etc/sysconfig/elasticsearch</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Debian的</td>\n<td><code>/etc/default/elasticsearch</code></td>\n</tr>\n</tbody>\n</table>\n<p>但是，对于使用的<code>systemd</code>系统，需要通过<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#systemd\" target=\"_blank\" rel=\"noopener noreferrer\">systemd</a>指定系统限制。</p>\n<h5 id=\"系统配置\"> 系统配置</h5>\n<p>在使用<a href=\"https://en.wikipedia.org/wiki/Systemd\" target=\"_blank\" rel=\"noopener noreferrer\">systemd的</a>系统上使用RPM或Debian软件包时 ，必须通过systemd指定系统限制。</p>\n<p>systemd服务文件（<code>/usr/lib/systemd/system/elasticsearch.service</code>）包含默认应用的限制。</p>\n<p>要覆盖它们，请添加一个名为的文件<code>/etc/systemd/system/elasticsearch.service.d/override.conf</code>（或者，您可以运行<code>systemctl edit elasticsearch</code>它在默认编辑器中自动打开文件）。设置此文件中的任何更改，例如</p>\n<div><pre><code>[Service]\nLimitMEMLOCK=infinity\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>完成后，运行以下命令重新加载：</p>\n<div><pre><code>systemctl daemon-reload\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"禁用交换\"> 禁用交换</h4>\n<p>大多数操作系统尝试使用尽可能多的内存来存储文件系统缓存，并急切地交换掉未使用的应用程序内存。这可能导致部分JVM堆甚至其可执行页面被换出到磁盘。</p>\n<p>交换对性能，节点稳定性非常不利，应该不惜一切代价避免。它可能导致垃圾收集持续<strong>数分钟</strong>而不是毫秒，并且可能导致节点响应缓慢甚至断开与群集的连接。在弹性分布式系统中，让操作系统终止节点更有效。</p>\n<p>有三种禁用交换的方法。首选选项是完全禁用交换。如果这不是一个选项，是否更喜欢最小化swappiness与内存锁定取决于您的环境。</p>\n<h5 id=\"禁用所有交换文件\"> 禁用所有交换文件</h5>\n<p>通常Elasticsearch是在盒子上运行的唯一服务，其内存使用量由JVM选项控制。应该没有必要启用交换。</p>\n<p>在Linux系统上，您可以通过运行以下命令暂时禁用交换：</p>\n<div><pre><code>swapoff -a\n</code></pre>\n<div><span>1</span><br></div></div><p>这不需要重新启动Elasticsearch。</p>\n<p>要永久禁用它，您需要编辑<code>/etc/fstab</code>文件并注释掉包含该单词的任何行<code>swap</code>。</p>\n<h5 id=\"配置swappiness\"> 配置<code>swappiness</code></h5>\n<p>Linux系统上可用的另一个选项是确保将sysctl值 <code>vm.swappiness</code>设置为<code>1</code>。这降低了内核交换的倾向，在正常情况下不应导致交换，同时仍允许整个系统在紧急情况下交换。</p>\n<h5 id=\"启用bootstrap-memory-lock\"> 启用<code>bootstrap.memory_lock</code></h5>\n<p>另一种选择是在Linux / Unix系统上使用<a href=\"http://opengroup.org/onlinepubs/007908799/xsh/mlockall.html\" target=\"_blank\" rel=\"noopener noreferrer\">mlockall</a>，或 在Windows 上 使用 <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa366895%28v=vs.85%29.aspx\" target=\"_blank\" rel=\"noopener noreferrer\">VirtualLock</a>，以尝试将进程地址空间锁定到RAM中，从而防止任何Elasticsearch内存被换出。这可以通过将此行添加到<code>config/elasticsearch.yml</code>文件来完成：</p>\n<div><pre><code>bootstrap.memory_lock: true\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p><code>mlockall</code> 如果尝试分配的内存超过可用内存，可能会导致JVM或shell会话退出！</p>\n</blockquote>\n<p>启动Elasticsearch后，您可以通过检查<code>mlockall</code>此请求的输出中的值来查看是否已成功应用此设置：</p>\n<div><pre><code>GET _nodes?filter_path=**.mlockall\n</code></pre>\n<div><span>1</span><br></div></div><p>如果你看到<code>mlockall</code>的<code>false</code>，那么就意味着该<code>mlockall</code> 请求失败。您还会在日志中看到包含更多信息的行<code>Unable to lock JVM Memory</code>。</p>\n<p>在Linux / Unix系统上，最可能的原因是运行Elasticsearch的用户没有锁定内存的权限。这可以授予如下：</p>\n<ul>\n<li>\n<p><strong><code>.zip</code> 和 <code>.tar.gz</code></strong></p>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#ulimit\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ulimit -l unlimited</code></a>在启动Elasticsearch之前设置为root，或设置<code>memlock</code>为<code>unlimited</code>in <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#limits.conf\" target=\"_blank\" rel=\"noopener noreferrer\"><code>/etc/security/limits.conf</code></a>。</p>\n</li>\n<li>\n<p><strong>RPM和Debian</strong></p>\n<p>设置<code>MAX_LOCKED_MEMORY</code>到<code>unlimited</code>了在 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#sysconfig\" target=\"_blank\" rel=\"noopener noreferrer\">系统配置文件</a>（或见下文使用系统<code>systemd</code>）。</p>\n</li>\n<li>\n<p><strong>系统使用 <code>systemd</code></strong></p>\n<p>设置<code>LimitMEMLOCK</code>于<code>infinity</code>在<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#systemd\" target=\"_blank\" rel=\"noopener noreferrer\">systemd配置</a>。</p>\n</li>\n</ul>\n<p>可能<code>mlockall</code>失败的另一个可能原因是 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/executable-jna-tmpdir.html\" target=\"_blank\" rel=\"noopener noreferrer\">JNA临时目录（通常是子目录 <code>/tmp</code>）随<code>noexec</code>选项一起安装</a>。这可以通过使用<code>ES_JAVA_OPTS</code>环境变量为JNA指定新的临时目录来解决：</p>\n<div><pre><code><span>export</span> ES_JAVA_OPTS <span>=</span>“$ ES_JAVA_OPTS -Djna.tmpdir <span>=</span> <span>&lt;</span>path<span>></span>”\n./bin/elasticsearch\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>或者在jvm.options配置文件中设置此JVM标志。</p>\n<h4 id=\"文件描述符\"> 文件描述符</h4>\n<p>Elasticsearch使用大量文件描述符或文件句柄。用完文件描述符可能是灾难性的，最有可能导致数据丢失。确保将运行Elasticsearch的用户的打开文件描述符数量限制增加到65,536或更高。</p>\n<p>对于<code>.zip</code>and <code>.tar.gz</code>packages，<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#ulimit\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ulimit -n 65535</code></a>在启动Elasticsearch之前设置为root，或设置<code>nofile</code>为<code>65535</code>in <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#limits.conf\" target=\"_blank\" rel=\"noopener noreferrer\"><code>/etc/security/limits.conf</code></a>。</p>\n<p>RPM和Debian软件包已将文件描述符的最大数量默认为65535，无需进一步配置。</p>\n<p>您可以<code>max_file_descriptors</code>使用<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/cluster-nodes-stats.html\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Nodes Stats</em></a> API 检查每个节点的配置，包括：</p>\n<div><pre><code>GET _nodes/stats/process?filter_path=**.max_file_descriptors\n</code></pre>\n<div><span>1</span><br></div></div><h4 id=\"虚拟内存\"> 虚拟内存</h4>\n<p>Elasticsearch <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/index-modules-store.html#mmapfs\" target=\"_blank\" rel=\"noopener noreferrer\"><code>mmapfs</code></a>默认使用目录来存储其索引。mmap计数的默认操作系统限制可能太低，这可能导致内存不足异常。</p>\n<p>在Linux上，您可以通过运行以下命令来增加限制 <code>root</code>：</p>\n<div><pre><code>sysctl -w vm.max_map_count <span>=</span> <span>262144</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>要永久设置此值，请更新<code>vm.max_map_count</code>设置 <code>/etc/sysctl.conf</code>。要在重新启动后进行验证，请运行<code>sysctl vm.max_map_count</code>。</p>\n<p>RPM和Debian软件包将自动配置此设置。无需进一步配置。</p>\n<h4 id=\"线程数\"> 线程数</h4>\n<p>Elasticsearch为不同类型的操作使用许多线程池。重要的是它能够在需要时创建新线程。确保Elasticsearch用户可以创建的线程数至少为4096。</p>\n<p>这可以通过<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#ulimit\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ulimit -u 4096</code></a>在启动Elasticsearch之前设置为root或通过设置<code>nproc</code>为<code>4096</code>in来完成<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/setting-system-settings.html#limits.conf\" target=\"_blank\" rel=\"noopener noreferrer\"><code>/etc/security/limits.conf</code></a>。</p>\n<p>作为服务运行时的程序包分发<code>systemd</code>将自动配置Elasticsearch进程的线程数。无需其他配置。</p>\n<h3 id=\"检测集群状态\"> 检测集群状态</h3>\n<p>让我们从基本运行状况检查开始，我们可以使用它来查看集群的运行情况。我们将使用curl来执行此操作，但您可以使用任何允许您进行HTTP / REST调用的工具。假设我们仍然在我们启动Elasticsearch的同一节点上打开另一个命令shell窗口。</p>\n<h4 id=\"健康状态\"> 健康状态</h4>\n<p>要检查群集运行状况，我们将使用<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/cat.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>_cat</code>API</a>。您可以 通过单击“查看控制台”或单击下面的“COPY AS CURL”链接并将其粘贴到终端中，在<a href=\"https://www.elastic.co/guide/en/kibana/7.2/console-kibana.html\" target=\"_blank\" rel=\"noopener noreferrer\">Kibana控制台中</a>运行以下命令<code>curl</code>。</p>\n<div><pre><code>GET /_cat/health?v\n</code></pre>\n<div><span>1</span><br></div></div><p>并回应：</p>\n<div><pre><code>epoch      timestamp cluster      status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent\n1564125184 07:13:04  logging-prod green           3         3      0   0    0    0        0             0                  -                100.0%\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>我们可以看到名为“elasticsearch”的群集处于绿色状态。</p>\n<p>每当我们要求群集健康时，我们要么获得绿色，黄色或红色。</p>\n<ul>\n<li>绿色 - 一切都很好（集群功能齐全）</li>\n<li>黄色 - 所有数据都可用，但尚未分配一些副本（群集功能齐全）</li>\n<li>红色 - 某些数据由于某种原因不可用（群集部分功能）</li>\n</ul>\n<p>**注意：**当群集为红色时，它将继续提供来自可用分片的搜索请求，但您可能需要尽快修复它，因为存在未分配的分片。</p>\n<p>同样从上面的响应中，我们可以看到总共3个节点，并且我们有0个分片，因为我们还没有数据。请注意，由于我们使用默认群集名称（elasticsearch），并且由于Elasticsearch默认使用单播网络发现来查找同一台计算机上的其他节点，因此您可能会意外启动计算机上的多个节点并拥有它们所有人都加入一个集群。在这种情况下，您可能会在上面的响应中看到多个节点。</p>\n<h4 id=\"节点列表\"> 节点列表</h4>\n<p>我们还可以获得群集中的节点列表，如下所示：</p>\n<div><pre><code>GET /_cat/nodes?v\n</code></pre>\n<div><span>1</span><br></div></div><p>并回应：</p>\n<div><pre><code>ip             heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name\n192.168.165.59           10          79   0    0.00    0.03     0.06 mdi       -      es01.csp\n192.168.165.60           10          76   0    0.00    0.01     0.05 mdi       -      es02.csp\n192.168.165.61           10          76   0    0.00    0.02     0.05 mdi       *      es03.csp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在这里，我们可以看到一个名为“es03.csp”的节点，它是我们集群中当前的主节点。</p>\n<h4 id=\"列出所有指数\"> 列出所有指数</h4>\n<p>现在让我们来看看我们的指数：</p>\n<div><pre><code>GET /_cat/indices?v\n</code></pre>\n<div><span>1</span><br></div></div><p>并回应：</p>\n<div><pre><code>health status index uuid pri rep docs.count docs.deleted store.size pri.store.size\n</code></pre>\n<div><span>1</span><br></div></div><p>这仅仅意味着我们在集群中还没有索引。</p>\n<h3 id=\"插件安装\"> 插件安装</h3>\n<h4 id=\"中文分词\"> 中文分词</h4>\n<h5 id=\"install\"> Install</h5>\n<p>elasticsearch在分词方面，需要添加中文分词的插件。在其安装代码的plugins目录，即<code>/usr/share/elasticsearch/plugins</code>，需要增加中文分词插件。</p>\n<p>download pre-build package from here: <a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p>\n<p>create plugin folder <code>cd your-es-root/plugins/ &amp;&amp; mkdir ik</code></p>\n<p>unzip plugin to folder <code>your-es-root/plugins/ik</code></p>\n<h5 id=\"quick-example\"> Quick Example</h5>\n<p>1.create a index</p>\n<div><pre><code>curl -XPUT http://localhost:9200/index\n</code></pre>\n<div><span>1</span><br></div></div><p>2.create a mapping</p>\n<div><pre><code>curl -XPOST http://localhost:9200/index/_mapping -H &#39;Content-Type:application/json&#39; -d&#39;\n{\n        &quot;properties&quot;: {\n            &quot;content&quot;: {\n                &quot;type&quot;: &quot;text&quot;,\n                &quot;analyzer&quot;: &quot;ik_max_word&quot;,\n                &quot;search_analyzer&quot;: &quot;ik_smart&quot;\n            }\n        }\n\n}&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>3.index some docs</p>\n<div><pre><code>curl -XPOST http://localhost:9200/index/_create/1 -H &#39;Content-Type:application/json&#39; -d&#39;\n{&quot;content&quot;:&quot;美国留给伊拉克的是个烂摊子吗&quot;}\n&#39;\ncurl -XPOST http://localhost:9200/index/_create/2 -H &#39;Content-Type:application/json&#39; -d&#39;\n{&quot;content&quot;:&quot;公安部：各地校车将享最高路权&quot;}\n&#39;\ncurl -XPOST http://localhost:9200/index/_create/3 -H &#39;Content-Type:application/json&#39; -d&#39;\n{&quot;content&quot;:&quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;}\n&#39;\ncurl -XPOST http://localhost:9200/index/_create/4 -H &#39;Content-Type:application/json&#39; -d&#39;\n{&quot;content&quot;:&quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;}\n&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>4.query with highlighting</p>\n<div><pre><code>curl -XPOST http://localhost:9200/index/_search  -H &#39;Content-Type:application/json&#39; -d&#39;\n{\n    &quot;query&quot; : { &quot;match&quot; : { &quot;content&quot; : &quot;中国&quot; }},\n    &quot;highlight&quot; : {\n        &quot;pre_tags&quot; : [&quot;&lt;tag1&gt;&quot;, &quot;&lt;tag2&gt;&quot;],\n        &quot;post_tags&quot; : [&quot;&lt;/tag1&gt;&quot;, &quot;&lt;/tag2&gt;&quot;],\n        &quot;fields&quot; : {\n            &quot;content&quot; : {}\n        }\n    }\n}\n&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>Result</p>\n<div><pre><code>{\n    &quot;took&quot;: 14,\n    &quot;timed_out&quot;: false,\n    &quot;_shards&quot;: {\n        &quot;total&quot;: 5,\n        &quot;successful&quot;: 5,\n        &quot;failed&quot;: 0\n    },\n    &quot;hits&quot;: {\n        &quot;total&quot;: 2,\n        &quot;max_score&quot;: 2,\n        &quot;hits&quot;: [\n            {\n                &quot;_index&quot;: &quot;index&quot;,\n                &quot;_type&quot;: &quot;fulltext&quot;,\n                &quot;_id&quot;: &quot;4&quot;,\n                &quot;_score&quot;: 2,\n                &quot;_source&quot;: {\n                    &quot;content&quot;: &quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;\n                },\n                &quot;highlight&quot;: {\n                    &quot;content&quot;: [\n                        &quot;&lt;tag1&gt;中国&lt;/tag1&gt;驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首 &quot;\n                    ]\n                }\n            },\n            {\n                &quot;_index&quot;: &quot;index&quot;,\n                &quot;_type&quot;: &quot;fulltext&quot;,\n                &quot;_id&quot;: &quot;3&quot;,\n                &quot;_score&quot;: 2,\n                &quot;_source&quot;: {\n                    &quot;content&quot;: &quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;\n                },\n                &quot;highlight&quot;: {\n                    &quot;content&quot;: [\n                        &quot;均每天扣1艘&lt;tag1&gt;中国&lt;/tag1&gt;渔船 &quot;\n                    ]\n                }\n            }\n        ]\n    }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><h4 id=\"elasticsearch-head\"> elasticsearch-head</h4>\n<h5 id=\"running-with-docker\"> Running with docker</h5>\n<div><pre><code>docker run -d -p 9100:9100 mobz/elasticsearch-head:5\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>由于elasticsearch-head:5镜像对elasticsearch的7版本好像适配性不够，所以部分显示可能会有空白</p>\n</blockquote>\n<h5 id=\"connecting-to-elasticsearch\"> Connecting to elasticsearch</h5>\n<p>By default elasticsearch exposes a http rest API on port 9200 which elasticsearch-head connects to.</p>\n<h6 id=\"enable-cors-in-elasticsearch\"> Enable CORS in elasticsearch</h6>\n<p>When not running as a plugin of elasticsearch (which is not even possible from version 5) you must enable <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-http.html\" target=\"_blank\" rel=\"noopener noreferrer\">CORS</a> in elasticsearch otherwise your browser will rejects requests which appear insecure.</p>\n<p>In elasticsearch configuration;</p>\n<ul>\n<li>add <code>http.cors.enabled: true</code></li>\n<li>you must also set <code>http.cors.allow-origin</code> because no origin allowed by default. <code>http.cors.allow-origin: &quot;*&quot;</code> is valid value, however it’s considered as a security risk as your cluster is open to cross origin from <strong>anywhere</strong>.</li>\n</ul>\n<p>改完配置后，重启Elasticsearch服务</p>\n<p><img src=\"images/1.png\" alt=\"\"></p>\n<h4 id=\"cerebro\"> cerebro</h4>\n<h6 id=\"runnging-with-docker\"> Runnging with docker</h6>\n<div><pre><code>docker run -d -p 9000:9000  lmenezes/cerebro\n</code></pre>\n<div><span>1</span><br></div></div><p><img src=\"images/2.png\" alt=\"\"></p>\n<p>参考链接：</p>\n<blockquote>\n<p>官方文档：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.2/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.elastic.co/guide/en/elasticsearch/reference/7.2/getting-started.html</a></p>\n<p>中文分词器elasticsearch-analysis-ik: <a href=\"https://github.com/medcl/elasticsearch-analysis-ik\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/medcl/elasticsearch-analysis-ik</a></p>\n<p>elasticsearch-head：<a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/mobz/elasticsearch-head</a></p>\n<p>cerebro: <a href=\"https://github.com/lmenezes/cerebro\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/lmenezes/cerebro</a></p>\n</blockquote>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "filebeat的安装注意",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/filebeat%E7%9A%84%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/filebeat%E7%9A%84%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F/",
      "content_html": "<h2 id=\"filebeat的安装注意\"> filebeat的安装注意</h2>\n<div><pre><code># filebeat输出到kafka中时，需要指定topic\noutput.kafka:\n  hosts: [&quot;192.168.165.44:9092&quot;,&quot;192.168.165.45:9092&quot;,&quot;192.168.165.48:9092&quot;]\n  topic: &#39;credit&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>\n<p>1.注意yaml文件的格式需要对齐</p>\n<p>2.注意注释掉默认的#output.elasticsearch:</p>\n</blockquote>\n<p>filebeat.yml配置文件</p>\n<p>改动地方</p>\n<div><pre><code>filebeat.inputs:\n\n# Each - is an input. Most options can be set at the input level, so\n# you can use different inputs for various configurations.\n# Below are the input specific configurations.\n\n- type: log\n\n  # Change to true to enable this input configuration.\n  enabled: true\n\n  # Paths that should be crawled and fetched. Glob based paths.\n  paths:\n    - /var/log/aa.txt\n\n# setup.kibana:\n#output.elasticsearch:\n  # Array of hosts to connect to.\n  # hosts: [&quot;localhost:9200&quot;]\n\n  # Optional protocol and basic auth credentials.\n  #protocol: &quot;https&quot;\n  #username: &quot;elastic&quot;\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>enabled 改为true</p>\n<p>setup.kibana注释掉</p>\n<p>output.elasticsearch:下面所有东西注释掉</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "kafka2.12集群搭建步骤",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/kafka2.12%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/kafka2.12%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/",
      "content_html": "<h2 id=\"kafka2-12集群搭建步骤\"> kafka2.12集群搭建步骤</h2>\n<h3 id=\"下载解压\"> 下载解压</h3>\n<p>从官网下载最新的tgz包</p>\n<p>下载地址为：</p>\n<p>http://mirror.bit.edu.cn/apache/kafka/2.3.0/kafka_2.12-2.3.0.tgz</p>\n<p>下载完成后上传到服务器</p>\n<div><pre><code>cd /opt/\nscp 192.168.165.46:/opt/kafka_2.12-2.3.0.tgz  .\nmv kafka_2.12-2.3.0.tgz /usr/local/\ncd /usr/local/\ntar -xvf kafka_2.12-2.3.0.tgz \nmv kafka_2.12-2.3.0 kafka\nrm -f *.tgz\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"修改配置文件\"> 修改配置文件</h3>\n<div><pre><code># egrep -v &quot;^$|^#&quot; /usr/local/kafka/config/server.properties \nbroker.id=45\nlisteners=PLAINTEXT://192.168.165.45:9092\nnum.network.threads=3\nnum.io.threads=8\nsocket.send.buffer.bytes=102400\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nlog.dirs=/opt/kafka-logs\nnum.partitions=3\nnum.recovery.threads.per.data.dir=1\noffsets.topic.replication.factor=3\ntransaction.state.log.replication.factor=3\ntransaction.state.log.min.isr=3\nlog.retention.hours=168\nlog.segment.bytes=1073741824\nlog.retention.check.interval.ms=300000\nzookeeper.connect=192.168.165.44:2181,192.168.165.45:2181,192.168.165.46:2181\nzookeeper.connection.timeout.ms=6000\ngroup.initial.rebalance.delay.ms=0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><blockquote>\n<p>服务器标识不能相同 broker.id</p>\n<p>不同服务器的ip不同 listeners=PLAINTEXT://192.168.165.45:9092</p>\n<p>设置zookeeper的连接地址 zookeeper.connect=192.168.165.44:2181,192.168.165.45:2181,192.168.165.46:2181</p>\n</blockquote>\n<h3 id=\"启动服务\"> 启动服务</h3>\n<div><pre><code>/usr/local/kafka/bin/kafka-server-start.sh -daemon /usr/local/kafka/config/server.properties\n\n创建topic（其中一台执行）\nbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 3 --topic test\n\n\n查看 Topic describe\nbin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test\n\n在其中一台服务器启动consumer\nbin/kafka-console-consumer.sh --bootstrap-server 192.168.165.44:9092,192.168.165.45:9092,192.168.165.46:9092 --topic test --from-beginning\n\n在任意议一台服务器启动producer\nbin/kafka-console-producer.sh --broker-list 192.168.165.44:9092,192.168.165.45:9092,192.168.165.46:9092 --topic test\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>如果<code>consumer</code>服务器接收到<code>producer</code>服务器输入的内容，则启动集群成功.</p>\n<p>参考链接：</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/Cocktail_py/article/details/89877741\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/Cocktail_py/article/details/89877741</a></p>\n<p><a href=\"https://www.jianshu.com/p/5297773fcc1b\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.jianshu.com/p/5297773fcc1b</a>、、</p>\n</blockquote>\n<p>JVM，参数得调整一下</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "logstash安装注意",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/logstash%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/logstash%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F/",
      "content_html": "<h2 id=\"logstash安装注意\"> logstash安装注意</h2>\n<p>在 /etc/sysconfig/logstash中添加对JAVA_HOME的配置</p>\n<div><pre><code># cat /etc/sysconfig/logstash \nJAVA_HOME=/opt/jdk1.8.0_144\n# source /etc/sysconfig/logstash \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>文件权限所属组是不是logstash</p>\n<div><pre><code>/usr/share/logstash/bin/logstash -e &quot;input {stdin{}} output{stdout{codec=&gt;rubydebug}}&quot;\n等价于：\n/usr/share/logstash/bin/logstash -e &quot;&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code> ansible logstash -m shell -a <span>\"export JAVA_HOME=/opt/jdk1.8.0_144;rpm -ivh /opt/logstash-7.7.1.rpm\"</span>\nansible logstash -m shell -a <span>'echo \"JAVA_HOME=/opt/jdk1.8.0_144\" > /etc/sysconfig/logstash '</span>\n ansible logstash -m shell -a <span>'sed -i \"s#1g#4g#g\" /etc/logstash/jvm.options'</span>\nansible logstash -m shell -a <span>\"systemctl enable logstash;systemctl start logstash\"</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "数据类型",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/elasticsearch/bak/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
      "content_html": "<h2 id=\"数据类型\"> 数据类型</h2>\n<h3 id=\"核心数据类型\"> 核心数据类型</h3>\n<ul>\n<li>字符串： text、keyword</li>\n<li>数值：long、integer、short、byte、double、float、half_float、scaled_float</li>\n<li>日期：date</li>\n<li>布尔：boolean</li>\n<li>二进制：binary</li>\n<li>范围：integer_range、float_range、long_range、double_range、date_range</li>\n</ul>\n<h3 id=\"复杂数据类型\"> 复杂数据类型</h3>\n<ul>\n<li>数组：array</li>\n<li>对象：object</li>\n<li>嵌套：nested object</li>\n</ul>\n<h3 id=\"地理位置数据类型\"> 地理位置数据类型</h3>\n<ul>\n<li>geo_point</li>\n<li>geo_shape</li>\n</ul>\n<h3 id=\"专用类型\"> 专用类型</h3>\n<ul>\n<li>记录ip地址：ip</li>\n<li>实现自动补全：completion</li>\n<li>记录分词数：token_count</li>\n<li>记录字符串hash值：murmur3</li>\n<li>percolator</li>\n<li>join</li>\n</ul>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "zabbix-server安装",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.2%20zabbix%E5%80%9F%E5%8A%A9ansible%E5%AE%89%E8%A3%85/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.2%20zabbix%E5%80%9F%E5%8A%A9ansible%E5%AE%89%E8%A3%85/",
      "content_html": "<h2 id=\"zabbix-server安装\"> zabbix-server安装</h2>\n<ol>\n<li>下载roles</li>\n</ol>\n<div><pre><code>ansible-galaxy <span>install</span> dj-wasabi.zabbix-server\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>编写playbook</li>\n</ol>\n<p><code>vim new-zabbix-server.yml</code></p>\n<div><pre><code>---\n- hosts: zabbix-server\n  become: <span>yes</span>\n  vars:\n    <span># mysql</span>\n    <span># host memory is 16G</span>\n    mysql_thread_cache_size: <span>\"64\"</span>\n    mysql_query_cache_size: <span>\"128M\"</span>\n    mysql_innodb_buffer_pool_size: <span>\"4096M\"</span>\n    mysql_tmp_table_size: <span>\"128M\"</span>\n    mysql_table_open_cache: <span>\"2048\"</span>\n    <span># zabbix-server</span>\n    zabbix_version: <span>4.4</span>\n    zabbix_repo_yum:\n      - name: zabbix\n        description: Zabbix Official Repository - <span>$basearch</span>\n        baseurl: http://mirrors.aliyun.com/zabbix/zabbix/<span>{</span><span>{</span> zabbix_version <span>}</span><span>}</span>/rhel/<span>{</span><span>{</span> ansible_distribution_major_version <span>}</span><span>}</span>/<span>$basearch</span>/\n        gpgcheck: <span>0</span>\n        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX\n        state: present\n      - name: zabbix-supported\n        description: Zabbix Official Repository non-supported - <span>$basearch</span>\n        baseurl: https://mirrors.aliyun.com/zabbix/non-supported/rhel/<span>{</span><span>{</span> ansible_distribution_major_version <span>}</span><span>}</span>/<span>$basearch</span>/\n        gpgcheck: <span>0</span>\n        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX\n        state: present\n    zabbix_server_startpollers: <span>12</span>\n    zabbix_server_startpollersunreachable: <span>5</span>\n    zabbix_server_starttrappers: <span>30</span>\n    zabbix_server_startdiscoverers: <span>10</span>\n    zabbix_server_housekeepingfrequency: <span>12</span>\n    zabbix_server_maxhousekeeperdelete: <span>100000</span>\n    zabbix_server_cachesize: 4096M\n    zabbix_server_startdbsyncers: <span>20</span>\n    zabbix_server_historyindexcachesize: 512M\n    zabbix_server_trendcachesize: 256M\n    zabbix_server_historytextcachesize: 80M\n    zabbix_server_valuecachesize: 4096M\n    zabbix_server_timeout: <span>30</span>\n    zabbix_server_database: mysql\n    zabbix_server_database_long: mysql \n    <span># zabbi-web</span>\n    zabbix_url: <span>192.168</span>.165.231\n    zabbix_timezone: Asia/Shanghai\n  roles:\n    - role: geerlingguy.mysql\n    - role: geerlingguy.apache\n    - role: dj-wasabi.zabbix-server\n    - role: dj-wasabi.zabbix-web\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><ol start=\"3\">\n<li>安装zabbix-server</li>\n</ol>\n<div><pre><code>ansible-playbook -i inventory/zabbix.yml new-zabbix-server.yml\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"4\">\n<li>\n<p>优化</p>\n<p>优化磁盘，去除atime</p>\n</li>\n<li>\n<p>注意事项</p>\n<p>zabbix-web，筛选历史问题时，记得选择时间范围</p>\n</li>\n</ol>\n<h2 id=\"zabbix-proxy安装\"> zabbix-proxy安装</h2>\n<ol>\n<li>下载roles</li>\n</ol>\n<div><pre><code>ansible-galaxy <span>install</span> dj-wasabi.zabbix-proxy\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>编写playbook</li>\n</ol>\n<p><code>vim new-zabbix-proxy.yml</code></p>\n<div><pre><code>---\n- hosts: zabbix-proxy\n  become: <span>yes</span>\n  vars:\n    <span># mysql</span>\n    <span># host memory is 8G</span>\n    mysql_thread_cache_size: <span>\"64\"</span>\n    mysql_query_cache_size: <span>\"128M\"</span>\n    mysql_innodb_buffer_pool_size: <span>\"2048M\"</span>\n    mysql_tmp_table_size: <span>\"64M\"</span>\n    mysql_table_open_cache: <span>\"1024\"</span>\n\n    <span># zabbix-proxy</span>\n    zabbix_server_host: <span>192.168</span>.165.231 \n    zabbix_version: <span>4.4</span>\n    zabbix_repo_yum:\n      - name: zabbix\n        description: Zabbix Official Repository - <span>$basearch</span>\n        baseurl: http://mirrors.aliyun.com/zabbix/zabbix/<span>{</span><span>{</span> zabbix_version <span>}</span><span>}</span>/rhel/<span>{</span><span>{</span> ansible_distribution_major_version <span>}</span><span>}</span>/<span>$basearch</span>/\n        gpgcheck: <span>0</span>\n        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX\n        state: present\n      - name: zabbix-supported\n        description: Zabbix Official Repository non-supported - <span>$basearch</span>\n        baseurl: https://mirrors.aliyun.com/zabbix/non-supported/rhel/<span>{</span><span>{</span> ansible_distribution_major_version <span>}</span><span>}</span>/<span>$basearch</span>/\n        gpgcheck: <span>0</span>\n        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX\n        state: present\n    zabbix_proxy_cachesize: <span>2048</span>\n    zabbix_proxy_startpollers: <span>12</span>\n    zabbix_proxy_housekeepingfrequency: <span>12</span>\n\n  roles:\n    - role: geerlingguy.mysql\n    - role: dj-wasabi.zabbix-proxy\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><ol start=\"3\">\n<li>安装zabbix-proxy</li>\n</ol>\n<div><pre><code>ansible-playbook -i inventory/zabbix.yml new-zabbix-proxy.yml\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"4\">\n<li>\n<p>将zabbix-proxy添加到zabbix-server中</p>\n<ol>\n<li>\n<p>) 进入zabbix的web页面，点击Administrator--&gt;Proxies--&gt;Create proxy；</p>\n</li>\n<li>\n<p>) 填写Proxy name为主机名称，Proxy mode为Active，然后Add。</p>\n<blockquote>\n<p>过几十秒，看看proxy是否添加成功，查看proxy和server日志，如无成功，将proxy和server端重启一下；</p>\n<p>proxy name一定要和配置文件中<code>/etc/zabbix/zabbix_proxy.conf</code>的<code>Hostname</code>一致。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"zabbix-agent安装\"> zabbix-agent安装</h2>\n<ol>\n<li>下载roles</li>\n</ol>\n<div><pre><code>ansible-galaxy <span>install</span> dj-wasabi.zabbix-agent\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>编写playbook</li>\n</ol>\n<p><code>vim new-zabbix-agent.yml</code></p>\n<div><pre><code>---\n- hosts: zabbix-server\n  vars:\n    zabbix_version: <span>4.4</span>\n    zabbix_repo_yum:\n      - name: zabbix\n        description: Zabbix Official Repository - <span>$basearch</span>\n        baseurl: http://mirrors.aliyun.com/zabbix/zabbix/<span>{</span><span>{</span> zabbix_version <span>}</span><span>}</span>/rhel/<span>{</span><span>{</span> ansible_distribution_major_version <span>}</span><span>}</span>/<span>$basearch</span>/\n        gpgcheck: <span>0</span>\n        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX\n        state: present\n      - name: zabbix-supported\n        description: Zabbix Official Repository non-supported - <span>$basearch</span>\n        baseurl: https://mirrors.aliyun.com/zabbix/non-supported/rhel/<span>{</span><span>{</span> ansible_distribution_major_version <span>}</span><span>}</span>/<span>$basearch</span>/\n        gpgcheck: <span>0</span>\n        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX\n        state: present\n    zabbix_agent_server: <span>192.168</span>.165.231\n    zabbix_agent_serveractive: <span>192.168</span>.165.231\n    zabbix_url: http://192.168.165.231\n    zabbix_api_use: <span>true</span>\n    zabbix_api_create_hostgroup: <span>true</span>\n    zabbix_api_create_hosts: <span>true</span>\n    zabbix_api_user: Admin\n    zabbix_api_pass: zabbix\n    zabbix_create_host: present\n    zabbix_host_groups:\n      - Zabbix servers\n    zabbix_link_templates:\n      - Template OS Linux by Zabbix agent active\n      - Template App Zabbix Server\n  roles:\n    - role: dj-wasabi.zabbix-agent\n\n- hosts: hy-bes\n  vars:\n    zabbix_version: <span>4.4</span>\n    zabbix_repo_yum:\n      - name: zabbix\n        description: Zabbix Official Repository - <span>$basearch</span>\n        baseurl: http://mirrors.aliyun.com/zabbix/zabbix/<span>{</span><span>{</span> zabbix_version <span>}</span><span>}</span>/rhel/<span>{</span><span>{</span> ansible_distribution_major_version <span>}</span><span>}</span>/<span>$basearch</span>/\n        gpgcheck: <span>0</span>\n        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX\n        state: present\n      - name: zabbix-supported\n        description: Zabbix Official Repository non-supported - <span>$basearch</span>\n        baseurl: https://mirrors.aliyun.com/zabbix/non-supported/rhel/<span>{</span><span>{</span> ansible_distribution_major_version <span>}</span><span>}</span>/<span>$basearch</span>/\n        gpgcheck: <span>0</span>\n        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX\n        state: present\n    zabbix_agent_server: <span>192.168</span>.16.235,192.168.165.232\n    zabbix_agent_serveractive: <span>192.168</span>.16.235,192.168.165.232\n    zabbix_proxy: bes.zabbixproxy\n    zabbix_url: http://192.168.165.231\n    zabbix_api_use: <span>true</span>\n    zabbix_api_create_hostgroup: <span>true</span>\n    zabbix_api_create_hosts: <span>true</span>\n    zabbix_api_user: Admin\n    zabbix_api_pass: zabbix\n    zabbix_create_host: present\n    zabbix_host_groups:\n      - hy-bes\n    zabbix_link_templates:\n      - Template OS Linux by Zabbix agent active\n  roles:\n    - role: dj-wasabi.zabbix-agent\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br></div></div><ol start=\"3\">\n<li>\n<p>修改roles，添加tags</p>\n<p>由于添加监控的主机数以千计，所以必须ansible执行playbook时，必须跳过不必要的判断，这样能大大减少playbook的执行时间，提高执行效率。</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>修改<code>/dj-wasabi.zabbix-agent/tasks/main.yml</code>，给每个操作系统添加tags，例如</p>\n<div><pre><code>- name: &quot;Install the correct repository&quot;\n  include: &quot;Debian.yml&quot;\n  when:\n    - zabbix_agent_os_family == &quot;Debian&quot;\n    - not (zabbix_agent_docker | bool)\n  tags:\n    - zabbix-agent\n    - init\n    - config\n    - service\n    - debian\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><blockquote>\n<p>最后的debian是新增的。</p>\n</blockquote>\n</li>\n<li>\n<p>修改<code>dj-wasabi.zabbix-agent/tasks/Linux.yml</code>，给DOcker增加tags，如下：</p>\n<div><pre><code>- name: &quot;Install the Docker container&quot;\n  include: Docker.yml\n  when:\n    - zabbix_agent_docker | bool\n  tags:\n    - docker\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><blockquote>\n<p>最后两行是新增的。</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"4\">\n<li>安装</li>\n</ol>\n<div><pre><code> ansible-playbook -i inventory/zabbix.yml new-zabbix-agent.yml -l <span>192.168</span>.163.150 --skip-tags <span>\"sangoma,debian,suse,windows,docker\"</span>\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>每次新增zabbix-agent，最后安装完成，重启一下zabbix-proxy，这样proxy会尽快发现agent节点</p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>监控模块</p>\n<p>我们采用的是zabbix主动式的监控方式，zabbix-agent主动推送数据给proxy或server，以减少server端压力。</p>\n<p>我发现在新的zabbix监控中，还可以检查时间有没有同步。</p>\n<p>而且还有磁盘IO的监控，就问你们棒不棒！！！</p>\n<p>很棒！</p>\n<blockquote>\n<p>4.4中新的主动式模板中，需要将监控项system.localtime\t变为enabled，否则主机的可用性为unknown</p>\n</blockquote>\n<p>主动式的缺点，主机宕机，知道的时间不及时，好像是30分钟。</p>\n</li>\n</ol>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "zabbix添加报警媒介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.3%20zabbix%E6%B7%BB%E5%8A%A0%E6%8A%A5%E8%AD%A6%E5%AA%92%E4%BB%8B/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.3%20zabbix%E6%B7%BB%E5%8A%A0%E6%8A%A5%E8%AD%A6%E5%AA%92%E4%BB%8B/",
      "content_html": "<h2 id=\"zabbix添加报警媒介\"> zabbix添加报警媒介</h2>\n<p>进入zabbix-web，点击Administrator--&gt;Media types--&gt;Create Media type</p>\n<h3 id=\"添加email报警\"> 添加Email报警</h3>\n<p><img src=\"images/image-20200115103058976.png\" alt=\"\"></p>\n<h3 id=\"添加钉钉报警\"> 添加钉钉报警</h3>\n<p><img src=\"images/image-20200115103302741.png\" alt=\"image-20200115103302741\"></p>\n<p>图中Script内容如下</p>\n<div><pre><code><span>try</span> <span>{</span>\n    Zabbix<span>.</span><span>Log</span><span>(</span><span>4</span><span>,</span> <span>'dingding webhook script value='</span><span>+</span>value<span>)</span>\n \n    <span>var</span> result <span>=</span> <span>{</span>\n        <span>'tags'</span><span>:</span> <span>{</span>\n            <span>'endpoint'</span><span>:</span> <span>'ding'</span>\n        <span>}</span>\n    <span>}</span><span>,</span>\n    params <span>=</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span>value<span>)</span><span>,</span>\n    req <span>=</span> <span>new</span> <span>CurlHttpRequest</span><span>(</span><span>)</span><span>,</span>\n    fields <span>=</span> <span>{</span><span>}</span><span>,</span>\n    resp<span>;</span>\n \n    req<span>.</span><span>AddHeader</span><span>(</span><span>'Content-Type: application/json'</span><span>)</span><span>;</span>\n \n    fields<span>.</span>msgtype <span>=</span> params<span>.</span>msgtype<span>;</span>\n    fields<span>.</span>text <span>=</span> <span>{</span>\n      <span>\"content\"</span><span>:</span>params<span>.</span>content\n    <span>}</span><span>;</span>\n    resp <span>=</span> req<span>.</span><span>Post</span><span>(</span><span>'https://oapi.dingtalk.com/robot/send?access_token=1163d78d7b8a324d2f5b284414da8e93560008689744495ab4ad3eae14bdd642'</span><span>,</span>\n        <span>JSON</span><span>.</span><span>stringify</span><span>(</span>fields<span>)</span>\n    <span>)</span><span>;</span>\n \n    <span>if</span> <span>(</span>req<span>.</span><span>Status</span><span>(</span><span>)</span> <span>!=</span> <span>201</span><span>)</span> <span>{</span>\n        <span>throw</span> <span>'Response code: '</span><span>+</span>req<span>.</span><span>Status</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n \n    resp <span>=</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span>resp<span>)</span><span>;</span>\n    result<span>.</span>tags<span>.</span>issue_id <span>=</span> resp<span>.</span>id<span>;</span>\n    result<span>.</span>tags<span>.</span>issue_key <span>=</span> resp<span>.</span>key<span>;</span>\n<span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>\n    Zabbix<span>.</span><span>Log</span><span>(</span><span>4</span><span>,</span> <span>'jira issue creation failed json : '</span><span>+</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>{</span><span>\"fields\"</span><span>:</span> fields<span>}</span><span>)</span><span>)</span><span>;</span>\n    Zabbix<span>.</span><span>Log</span><span>(</span><span>4</span><span>,</span> <span>'jira issue creation failed : '</span><span>+</span>error<span>)</span><span>;</span>\n \n    result <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>}</span>\n \n<span>return</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>result<span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><p>这个webhook添加钉钉报警，多亏了我的对象，香香大人，谢谢她！</p>\n<blockquote>\n<p>参考官方文档：https://www.zabbix.com/documentation/current/manual/config/notifications/media/webhook</p>\n</blockquote>\n<p>添加完告警媒介，就可以给用户Administrator用户，添加这两个报警媒介了。</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Template DB MySQL简介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.4%20MySQL%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.4%20MySQL%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/",
      "content_html": "<h2 id=\"template-db-mysql简介\"> Template DB MySQL简介</h2>\n<h3 id=\"应用集\"> 应用集</h3>\n<p>MySQL</p>\n<h3 id=\"监控项\"> 监控项</h3>\n<ol>\n<li>MySQL begin operations per second（MySQL每秒开始操作）</li>\n<li>MySQL bytes received per second（从所有客户端接收的字节数）</li>\n<li>MySQL bytes sent per second（发送到所有客户端的字节数）</li>\n<li>MySQL commit operations per second（MySQL每秒提交操作）</li>\n<li>MySQL delete operations per second（MySQL每秒删除操作）</li>\n<li>MySQL insert operations per second（MySQL每秒插入操作）</li>\n<li>MySQL queries per second（MySQL每秒查询）</li>\n<li>MySQL rollback operations per second（MySQL每秒回滚操作）</li>\n<li>MySQL select operations per second（MySQL每秒选择操作）</li>\n<li>MySQL slow queries（MySQL慢查询）</li>\n<li>MySQL status（MySQL的存活状态）</li>\n<li>MySQL update operations per second（MySQL每秒更新操作）</li>\n<li>MySQL uptime（MySQL正常运行时间）</li>\n<li>MySQL version（MySQL的版本信息）</li>\n</ol>\n<h3 id=\"触发器\"> 触发器</h3>\n<p>MySQL is down</p>\n<p>表达式：{Template DB MySQL:mysql.ping.last(0)}=0</p>\n<h3 id=\"图形\"> 图形</h3>\n<ol>\n<li>MySQL operations（MySQL业务操作）</li>\n</ol>\n<p><img src=\"images/mysql%E5%9B%BE%E5%BD%A21.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>MySQL bandwidth（MySQL带宽）</li>\n</ol>\n<p><img src=\"images/mysql%E5%9B%BE%E5%BD%A22.png\" alt=\"\"></p>\n<h3 id=\"聚合图形\"> 聚合图形</h3>\n<p>MySQL performance（MySQL性能）</p>\n<p><img src=\"images/mysql%E5%9B%BE%E5%BD%A23.png\" alt=\"\"></p>\n<h2 id=\"实现mysql模板监控\"> 实现MySQL模板监控</h2>\n<h3 id=\"mysql监控授权\"> MySQL监控授权</h3>\n<p>配置mysql的客户端，创建一个用户来获取mysql的相关数据，使用mysql账号密码登陆数据库</p>\n<div><pre><code>&gt; grant all on *.* to monitor@&#39;localhost&#39; identified by &#39;W***&#39;;\n&gt; flush privileges;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"修改zabbix-agent配置文件\"> 修改zabbix_agent配置文件</h3>\n<ol>\n<li>设置完帐户之后在被监控端新建/etc/zabbix/etc/.my.cnf以提供Zabbix Agent访问数据库，内容类似如下</li>\n</ol>\n<div><pre><code>#vim /etc/zabbix/etc/.my.cnf\n[mysql]\nhost=localhost\nuser=monitor\npassword=W***\nsocket=/var/lib/mysql/mysql.sock\n[mysqladmin]\nhost=localhost\nuser=monitor\npassword=W***\nsocket=/var/lib/mysql/mysql.sock\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>\n<li>注意：agent安装路径/etc/zabbix/,etc目录若不存在，需要自已创建，创建.my.cnf,为隐藏文件。W***为mysql的密码。</li>\n</ul>\n<ol start=\"2\">\n<li>修改模板中的mysql路径/etc/zabbix/zabbix_agentd.d，将以下三个目录补全</li>\n</ol>\n<div><pre><code>#vim userparameter_mysql.conf\n</code></pre>\n<div><span>1</span><br></div></div><p><img src=\"images/mysql%E9%85%8D%E7%BD%AE.png\" alt=\"\"></p>\n<h3 id=\"重启agent服务\"> 重启agent服务</h3>\n<div><pre><code>service zabbix_agentd restart\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"zabbix-web设置\"> zabbix-web设置</h3>\n<p><img src=\"images/mysqlweb.png\" alt=\"\"></p>\n<h2 id=\"修改模板添加主从和连接数监控\"> 修改模板添加主从和连接数监控</h2>\n<h3 id=\"主从状态监控\"> 主从状态监控</h3>\n<ol>\n<li>在<code>/opt/monitor</code>目录下添加主从监控脚本</li>\n</ol>\n<p>vim mysql_slave.sh</p>\n<div><pre><code>#!/usr/bin/env bash\nuser=&#39;monitor&#39;\npasswd=\n# Seconds_Behind_Master 阈值\ntho=1000\n\n# rs为Yes成功数,sbr为同步时间差\nrs=$(mysql -u&quot;$user&quot; -p&quot;$passwd&quot; -e &quot;show slave status\\G;&quot; 2&gt;/dev/null | grep Running | awk &#39;{print $2}&#39; | grep -c Yes)\nsbr=$(mysql -u&quot;$user&quot; -p&quot;$passwd&quot; -e &quot;show slave status\\G;&quot; 2&gt;/dev/null | grep Seconds_Behind_Master | awk -F&#39;:&#39; &#39;{print $2}&#39;)\n\n# 判断主从状态是否正常,0代表正常,1代表异常\nif [ &quot;$rs&quot; -eq 2 -a &quot;$sbr&quot; -le &quot;$tho&quot; ];then\n    echo 0\nelse\n    echo $(date +&quot;%Y-%m-%d %H:%M:%S&quot;) &quot;Yes成功数为$rs&quot; &quot;延时时间为$sbr&quot; &gt;&gt; /var/log/zabbix/mysql_slave.log\n    echo 1\nfi\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><ol start=\"2\">\n<li>在zabbix_agentd.conf中添加自定义key</li>\n</ol>\n<p>在<code>etc/zabbix/zabbix_agentd.conf</code>中新加</p>\n<div><pre><code>UserParameter=mysql.replication,/opt/monitor/mysql_slave.sh\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"3\">\n<li>重启agent服务</li>\n</ol>\n<div><pre><code>service zabbix_agentd restart\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"4\">\n<li>在mysql模板中新增监控项，新增触发器，返回值不是0时，报警。</li>\n</ol>\n<ul>\n<li>注意：当监控非主从mysql时，把此项监控禁用掉</li>\n</ul>\n<h2 id=\"连接数监控\"> 连接数监控</h2>\n<ol>\n<li>在zabbix_agentd.conf中添加自定义key</li>\n</ol>\n<p>在<code>etc/zabbix/zabbix_agentd.conf</code>中新加</p>\n<div><pre><code>UserParameter=mysql.linknum, ss -an | grep 3306 | grep -c ESTAB\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"2\">\n<li>重启agent服务</li>\n</ol>\n<div><pre><code>service zabbix_agentd restart\n</code></pre>\n<div><span>1</span><br></div></div><ol start=\"3\">\n<li>添加监控项和触发器</li>\n</ol>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "模板导入",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.5%20Redis%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.5%20Redis%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/",
      "content_html": "<h2 id=\"模板导入\"> 模板导入</h2>\n<p>打开“配置”--&gt;“模板”--&gt;&quot;导入&quot;</p>\n<p><img src=\"images/redis_daoru.png\" alt=\"\"></p>\n<p>导入<code>zax_redis</code>文件夹下的<code>redis_templates_for_zbx_3.4.xml</code>文件</p>\n<h2 id=\"配置文件导入\"> 配置文件导入</h2>\n<p>将<code>zax_redis</code>文件夹下的<code>userparameter_redis.conf</code>文件上传到redis服务器的<code>/etc/zabbix/zabbix_agentd.d</code>文件夹下，并根据实际情况修改<code>$HostIP</code>和<code>$Pass</code>。</p>\n<h2 id=\"增加ss命令权限\"> 增加ss命令权限</h2>\n<p>因为zabbix-server端不是通过root用户进行获取数据，所以给ss命令提权</p>\n<div><pre><code>chmod +s /usr/sbin/ss\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"重启zabbix客户端\"> 重启zabbix客户端</h2>\n<p>修改完成后，重新启动zabbix客户端</p>\n<p>centos7下</p>\n<div><pre><code>systemctl restart zabbix-agent.service\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Zabbix客户端日志出现(Not all processes could be identified）",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.6%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.6%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",
      "content_html": "<h1 id=\"zabbix客户端日志出现-not-all-processes-could-be-identified\"> Zabbix客户端日志出现(Not all processes could be identified）</h1>\n<p>场景：因为使用了netstat -p参数。</p>\n<p>权限问题，zabbix_agentd是zabbix用户启动的，默认不能执行netstat -p等命令，导致从服务器取到的自动发现脚本为空</p>\n<p>(Not all processes could be identified, non-owned process info\nwill not be shown, you would have to be root to see it all.)\n解决方法 ：</p>\n<div><pre><code><span>chmod</span> +s /bin/netstat\n</code></pre>\n<div><span>1</span><br></div></div><p>chmod +s 是什么意思</p>\n<blockquote>\n<p>为了方便普通用户执行一些特权命令，SUID/SGID程序允许普通用户以root身份暂时执行该程序，并在执行结束后再恢复身份。</p>\n</blockquote>\n<h2 id=\"zabbix-server-log大量提示cannot-sen-list-of-active-checks-to-ip-host-hostname-not-found\"> zabbix_server.log大量提示cannot sen list of active checks to &quot;IP&quot;:host [Hostname] not found</h2>\n<p>zabbix server 日志大量提示上图信息 原因是 zabbix_agent.conf配置文件中配置的HostName与zabbix的web界面配置的不同导致的</p>\n<p>zabbix_agent.conf里尽量不使用HostnameItem=system.hostname此项去自动获取主机名</p>\n<p>尽量使用HostName指定一个主机名，然后web界面配置相同即可</p>\n<p>最后重启相应的agent即可</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "关闭被监控端的防火墙",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.8%20activemq%E7%9B%91%E6%8E%A7/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.8%20activemq%E7%9B%91%E6%8E%A7/",
      "content_html": "<h2 id=\"关闭被监控端的防火墙\"> 关闭被监控端的防火墙</h2>\n<p>activemq  防火墙的添加还是有问题，先把防火墙给关了，它好像是后续会再产生一个随机端口，进行数据的传输</p>\n<h2 id=\"zabbix-proxy安装java-gateway\"> zabbix_proxy安装java_gateway，</h2>\n<p>因为是基于JMX进行监控的</p>\n<h2 id=\"修改配置文件\"> 修改配置文件</h2>\n<p>配置<code>./apache-activemq-5.11.1/conf/activemq.xml</code></p>\n<p>修改broker字段： 增加useJmx=&quot;true&quot;</p>\n<div><pre><code>&lt;broker useJmx=&quot;true&quot; xmlns=&quot;http://activemq.apache.org/schema/core&quot; brokerName=&quot;localhost&quot; dataDirectory=&quot;${activemq.data}&quot;&gt; \n</code></pre>\n<div><span>1</span><br></div></div><p>修改broken字段内的managementContext节点：</p>\n<div><pre><code>&lt;managementContext&gt;\n            &lt;managementContext createConnector=&quot;true&quot; connectorPort=&quot;11099&quot;/&gt;\n&lt;/managementContext&gt; \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>配置./apache-activemq-5.11.1/bin/activemq</p>\n<p>在脚本最后添加：</p>\n<div><pre><code>ACTIVEMQ_SUNJMX_START=&quot;-Dcom.sun.management.jmxremote.port=11099 &quot;\nACTIVEMQ_SUNJMX_START=&quot;$ACTIVEMQ_SUNJMX_START -Dcom.sun.management.jmxremote.password.file=${ACTIVEMQ_CONF}/jmx.password&quot;\nACTIVEMQ_SUNJMX_START=&quot;$ACTIVEMQ_SUNJMX_START -Dcom.sun.management.jmxremote.access.file=${ACTIVEMQ_CONF}/jmx.access&quot;\nACTIVEMQ_SUNJMX_START=&quot;$ACTIVEMQ_SUNJMX_START -Dcom.sun.management.jmxremote.ssl=false&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后重启activemq</p>\n<blockquote>\n<p>增加的方式不对，添加上以后密码还是为空，后续有空查一下原因</p>\n</blockquote>\n<h2 id=\"导入模板\"> 导入模板</h2>\n<p>在zabbix_web中导入zbx_activemq目录下的xml文件</p>\n<p>在被监控主机上增加宏设置\n加入{<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 13: JMX_PASSWORD}̲，和{'>JMX_PASSWORD}，和{</span>JMX_USERNAME}，user为admin，pass为activemq</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Zabbix-Zookeper-Template",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.9%20zookeeper%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/monitor/zabbix/10.9%20zookeeper%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7/",
      "content_html": "<h1 id=\"zabbix-zookeper-template\"> Zabbix-Zookeper-Template</h1>\n<h2 id=\"system-requirements\"> System requirements</h2>\n<ul>\n<li><a href=\"http://www.zabbix.com/downloads/\" target=\"_blank\" rel=\"noopener noreferrer\">zabbix</a> &gt;= 3.4 (preprocessing used by this template)</li>\n<li><a href=\"https://zookeeper.apache.org/releases.html\" target=\"_blank\" rel=\"noopener noreferrer\">zookeeper</a> &gt;= 3.4 (mntr stats)</li>\n<li>netcat</li>\n<li>zookeeper监控模板，被监控主机，记得添加nc命令</li>\n</ul>\n<h2 id=\"features\"> Features</h2>\n<ul>\n<li>\n<p>ruok check</p>\n</li>\n<li>\n<p>mntr stats :</p>\n<ul>\n<li>zk_num_alive_connections</li>\n<li>zk_approximate_data_size</li>\n<li>zk_ephemerals_count</li>\n<li>zk_min_latency</li>\n<li>zk_avg_latency</li>\n<li>zk_max_latency</li>\n<li>zk_max_file_descriptor_count</li>\n<li>zk_open_file_descriptor_count</li>\n<li>zk_outstanding_requests</li>\n<li>zk_packets_received</li>\n<li>zk_packets_sent</li>\n<li>zk_server_state</li>\n<li>zk_version</li>\n<li>zk_znode_count</li>\n</ul>\n</li>\n<li>\n<p>graphs</p>\n</li>\n<li>\n<p>screen</p>\n</li>\n</ul>\n<h2 id=\"zabbix-macros\"> Zabbix Macros</h2>\n<ul>\n<li>{$ZOO_IP} : IP of the Zookeeper Instance (default : 127.0.0.1)</li>\n<li>{$ZOO_PORT} : Port of the Zookeeper Instance (default : 2181)</li>\n</ul>\n<h2 id=\"zabbix-configuration\"> Zabbix Configuration</h2>\n<ol>\n<li>\n<p>Copy <code>UserParameter_Zookeeper.conf</code> to <code>/etc/zabbix/zabbix_agentd.d</code> folder (or whatever is default and/or configured on your system).</p>\n</li>\n<li>\n<p>Restart your Zabbix Agent</p>\n</li>\n<li>\n<p>Import XML template file (<code>zookeeper.xml</code>) into Zabbix via Web GUI (Configuration -&gt; Templates -&gt; Import).</p>\n</li>\n<li>\n<p>Assign the imported template to a host, change MACROS if needed in the host parameters and enjoy!</p>\n</li>\n</ol>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "显示当前正在编辑的文件名",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/21%20vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/21%20vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
      "content_html": "<h2 id=\"显示当前正在编辑的文件名\"> 显示当前正在编辑的文件名</h2>\n<p>正常模式下 :f 或CTRL+G</p>\n<h2 id=\"vim粘贴\"> vim粘贴</h2>\n<p>要粘贴时：set paste</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "curl方式执行shell脚本时如何传参",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/curl%E6%96%B9%E5%BC%8F%E6%89%A7%E8%A1%8Cshell%E8%84%9A%E6%9C%AC%E6%97%B6%E5%A6%82%E4%BD%95%E4%BC%A0%E5%8F%82/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/curl%E6%96%B9%E5%BC%8F%E6%89%A7%E8%A1%8Cshell%E8%84%9A%E6%9C%AC%E6%97%B6%E5%A6%82%E4%BD%95%E4%BC%A0%E5%8F%82/",
      "content_html": "<h2 id=\"curl方式执行shell脚本时如何传参\"> curl方式执行shell脚本时如何传参</h2>\n<p>有时候shell脚本可以放在http页面上，不用download，可以直接执行。</p>\n<p>通常我们可以用curl的方式执行http页面上的shell脚本。 一般方式是：</p>\n<div><pre><code>curl ftp://192.168.166.21:/system_optimize.sh | bash\n</code></pre>\n<div><span>1</span><br></div></div><p>这样脚本就可以在本地机器上执行了。</p>\n<p>但是需要传入参数的脚本。我们可以用下面的方式传入shell参数</p>\n<ul>\n<li>-s方式</li>\n</ul>\n<div><pre><code>curl -s ftp://192.168.166.21:/system_optimize.sh | bash -s arg1 arg2\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>&lt; 方式</li>\n</ul>\n<div><pre><code>bash &lt;(curl -s ftp://192.168.166.21:/system_optimize.sh) arg1 arg2\n</code></pre>\n<div><span>1</span><br></div></div><blockquote>\n<p>注意 &lt;( 之间不要有空格！！！</p>\n</blockquote>\n<ul>\n<li>若参数中带有<code>-</code>，则可使用长选项<code>--</code>解决</li>\n</ul>\n<div><pre><code>curl -s ftp://192.168.166.21:/system_optimize.sh | bash -s -- arg1 arg2\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>若参数为”-p arg -d arg”,则可使用以下命令执行</li>\n</ul>\n<div><pre><code>curl -s ftp://192.168.166.21:/system_optimize.sh | bash -s -- -p arg1 -d arg2\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>不止是curl的输入，其他方式的输入也满足。可以通过以下例子深入理解下</li>\n</ul>\n<div><pre><code>echo &#39;i=1; for a in $@; do echo &quot;$i = $a&quot;; i=$((i+1)); done&#39; | bash -s -- -a1 -a2 -\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"bash选项\"> Bash选项</h2>\n<p>Bash选项</p>\n<table>\n<thead>\n<tr>\n<th>缩写</th>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-B</td>\n<td>brace expansion</td>\n<td>开启<a href=\"\">大括号展开</a>(默认 setting = on)</td>\n</tr>\n<tr>\n<td>+B</td>\n<td>brace expansion</td>\n<td>关闭大括号展开</td>\n</tr>\n<tr>\n<td>-C</td>\n<td>noclobber</td>\n<td>防止重定向时覆盖文件(可能会被&gt;|覆盖)</td>\n</tr>\n<tr>\n<td>-D</td>\n<td>(none)</td>\n<td>列出用双引号引用起来的, 以$为前缀的字符串, 但是不执行脚本中的命令</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>all export</td>\n<td>export(导出)所有定义过的变量</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>notify</td>\n<td>当后台运行的作业终止时, 给出通知(脚本中并不常见)</td>\n</tr>\n<tr>\n<td>-c ...</td>\n<td>(none)</td>\n<td>从...中读取命令</td>\n</tr>\n<tr>\n<td>checkjobs</td>\n<td>(none)</td>\n<td>通知有活跃shell<a href=\"http://tldp.org/LDP/abs/html/x9644.html#JOBSREF\" target=\"_blank\" rel=\"noopener noreferrer\">任务</a>的用户退出。<a href=\"http://tldp.org/LDP/abs/html/bashver4.html#BASH4REF\" target=\"_blank\" rel=\"noopener noreferrer\">Bash 4</a>版本中引入，仍然处于&quot;实验&quot;阶段. 用法:shopt -s checkjobs .(注意：可能会hang！</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>errexit</td>\n<td>当脚本发生第一个错误时, 就退出脚本, 换种说法就是, 当一个命令返回非零值时, 就退出脚本(除了<a href=\"http://tldp.org/LDP/abs/html/loops1.html#UNTILLOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\">until</a>或<a href=\"http://tldp.org/LDP/abs/html/loops1.html#WHILELOOPREF\" target=\"_blank\" rel=\"noopener noreferrer\">while loops</a>, <a href=\"http://tldp.org/LDP/abs/html/testconstructs.html#TESTCONSTRUCTS1\" target=\"_blank\" rel=\"noopener noreferrer\">if-tests</a>, <a href=\"http://tldp.org/LDP/abs/html/list-cons.html#LCONS1\" target=\"_blank\" rel=\"noopener noreferrer\">list constructs</a>)</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>noglob</td>\n<td>禁用文件名扩展(就是禁用globbing)</td>\n</tr>\n<tr>\n<td>globstar</td>\n<td><a href=\"http://tldp.org/LDP/abs/html/bashver4.html#GLOBSTARREF\" target=\"_blank\" rel=\"noopener noreferrer\">globbing star-match</a></td>\n<td>打开<a href=\"http://tldp.org/LDP/abs/html/globbingref.html\" target=\"_blank\" rel=\"noopener noreferrer\">globbling</a>操作符(Bash <a href=\"http://tldp.org/LDP/abs/html/bashver4.html#BASH4REF\" target=\"_blank\" rel=\"noopener noreferrer\">4+</a>). 使用方法：shopt -s globstar</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>interactive</td>\n<td>让脚本以交互模式运行</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>noexec</td>\n<td>从脚本中读取命令, 但是不执行它们(做语法检查)</td>\n</tr>\n<tr>\n<td>-o Option-Name</td>\n<td>(none)</td>\n<td>调用Option-Name选项</td>\n</tr>\n<tr>\n<td>-o posix</td>\n<td>POSIX</td>\n<td>修改Bash或被调用脚本的行为, 使其符合<a href=\"http://tldp.org/LDP/abs/html/sha-bang.html#POSIX2REF\" target=\"_blank\" rel=\"noopener noreferrer\">POSIX</a>标准.</td>\n</tr>\n<tr>\n<td>-o pipefail</td>\n<td>pipe failure</td>\n<td>创建一个管道去返回最后一条命令的<a href=\"http://tldp.org/LDP/abs/html/exit-status.html#EXITSTATUSREF\" target=\"_blank\" rel=\"noopener noreferrer\">退出状态码</a>，这个返回值是一个非0的返回值</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>privileged</td>\n<td>以&quot;suid&quot;身份来运行脚本(小心!)</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>restricted</td>\n<td>以受限模式来运行脚本(参考 <a href=\"http://tldp.org/LDP/abs/html/restricted-sh.html\" target=\"_blank\" rel=\"noopener noreferrer\">22</a>).</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>stdin</td>\n<td>从stdin 中读取命令</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>(none)</td>\n<td>执行完第一个命令之后, 就退出</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>nounset</td>\n<td>如果尝试使用了未定义的变量, 就会输出一个错误消息, 然后强制退出</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>verbose</td>\n<td>在执行每个命令之前, 把每个命令打印到stdout上</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>xtrace</td>\n<td>与-v选项类似, 但是会打印完整命令</td>\n</tr>\n<tr>\n<td>-</td>\n<td>(none)</td>\n<td>选项结束标志. 后面的参数为<a href=\"http://tldp.org/LDP/abs/html/internalvariables.html#POSPARAMREF\" target=\"_blank\" rel=\"noopener noreferrer\">位置参数</a>.</td>\n</tr>\n<tr>\n<td>--</td>\n<td>(none)</td>\n<td>unset(释放)位置参数. 如果指定了参数列表(-- arg1 arg2), 那么位置 参数将会依次设置到参数列表中.</td>\n</tr>\n</tbody>\n</table>\n<p>重点是后面的&quot;-&quot;和&quot;--&quot;，理解一下</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Nginx升级加固SSL/TLS协议信息泄露漏洞(CVE-2016-2183)和HTTP服务器的缺省banner漏洞",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/nginx%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/nginx%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/",
      "content_html": "<h2 id=\"nginx升级加固ssl-tls协议信息泄露漏洞-cve-2016-2183-和http服务器的缺省banner漏洞\"> Nginx升级加固SSL/TLS协议信息泄露漏洞(CVE-2016-2183)和HTTP服务器的缺省banner漏洞</h2>\n<blockquote>\n<p>⚠️ 注意：要根据实际情况进行修改，这只是大体的思路</p>\n</blockquote>\n<div><pre><code>cd /tmp\nwget  https://www.openssl.org/source/openssl-1.1.0k.tar.gz\ntar zxvf openssl-1.1.0k.tar.gz -C /usr/local\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code># 打开nginx源文件下的/usr/local/src/nginx-1.9.9/auto/lib/openssl/conf文件：\nvi /root/nginx-1.14.2/auto/lib/openssl/conf\n# 找到以下代码,差不多三四十行\nCORE_INCS=&quot;$CORE_INCS $OPENSSL/.openssl/include&quot;\nCORE_DEPS=&quot;$CORE_DEPS $OPENSSL/.openssl/include/openssl/ssl.h&quot;\nCORE_LIBS=&quot;$CORE_LIBS $OPENSSL/.openssl/lib/libssl.a&quot;\nCORE_LIBS=&quot;$CORE_LIBS $OPENSSL/.openssl/lib/libcrypto.a&quot;\nCORE_LIBS=&quot;$CORE_LIBS $NGX_LIBDL&quot;\n# 修改成以下代码\nCORE_INCS=&quot;$CORE_INCS $OPENSSL/include&quot;\nCORE_DEPS=&quot;$CORE_DEPS $OPENSSL/include/openssl/ssl.h&quot;\nCORE_LIBS=&quot;$CORE_LIBS $OPENSSL/lib/libssl.a&quot;\nCORE_LIBS=&quot;$CORE_LIBS $OPENSSL/lib/libcrypto.a&quot;\nCORE_LIBS=&quot;$CORE_LIBS $NGX_LIBDL&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code>cd /usr/local/openssl-1.1.0k/\nmkdir lib\ncp libssl.a libcrypto.a lib\n\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-openssl=/usr/local/openssl-1.1.0k\nmake -j 8\ncd /usr/local/nginx/sbin/\ncp nginx nginx.bak\ncd /opt/nginx-1.16.1\ncp -f objs/nginx /usr/local/nginx/sbin/\n\nps -ef|grep nginx\nkill -USR2 `master 进程号`\n#关闭旧的woker进程，kill -WINCH旧的master进程号\nkill -WINCH `master 进程号`\n#关闭旧的master进程\nkill -QUIT `master 进程号`\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"nginx缺省banner修改\"> Nginx缺省banner修改</h3>\n<div><pre><code>[root@Test ~]# vim nginx-1.19.1/src/http/ngx_http_header_filter_module.c \n\n需要修改：\n\nstatic u_char ngx_http_server_string[] = &quot;Server: nginx&quot; CRLF;\nstatic u_char ngx_http_server_full_string[] = &quot;Server: &quot; NGINX_VER CRLF;\nstatic u_char ngx_http_server_build_string[] = &quot;Server: &quot; NGINX_VER_BUILD CRLF;\n\n修改成：\n\nstatic u_char ngx_http_server_string[] = &quot;Server: unknow&quot; CRLF;\nstatic u_char ngx_http_server_full_string[] = &quot;Server: unknow&quot;  CRLF;\nstatic u_char ngx_http_server_build_string[] = &quot;Server: unknow&quot;  CRLF;\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>然后重新编译，热升级nginx</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "查看哪些表被锁住了",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/oracle%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9B%E8%A1%A8%E8%A2%AB%E9%94%81%E4%BD%8F%E4%BA%86/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/oracle%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9B%E8%A1%A8%E8%A2%AB%E9%94%81%E4%BD%8F%E4%BA%86/",
      "content_html": "<h2 id=\"查看哪些表被锁住了\"> 查看哪些表被锁住了</h2>\n<div><pre><code><span>select</span> b<span>.</span>owner<span>,</span>b<span>.</span>object_name<span>,</span>a<span>.</span>session_id<span>,</span>a<span>.</span>locked_mode <span>from</span> v$locked_object a<span>,</span>dba_objects b <span>where</span> b<span>.</span>object_id <span>=</span> a<span>.</span>OBJECT_ID<span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"查询引起死锁的会话\"> 查询引起死锁的会话</h2>\n<div><pre><code><span>select</span> b<span>.</span>username<span>,</span>b<span>.</span>sid<span>,</span>b<span>.</span><span>serial</span><span>#,logon_time from v$locked_object a , v$session b where a.session_id = b.sid order by b.LOGON_TIME;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"查出sid和serial\"> 查出sid和serial#</h2>\n<div><pre><code><span>select</span> sid<span>,</span><span>serial</span><span>#,paddr from v$session where sid = 259;</span>\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"查v-process视图-得到spid\"> 查v$process视图,得到spid</h2>\n<div><pre><code>select spid from v$process where addr= &#39;00000003E32BDE28&#39;;\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"杀死进程-sid-serial\"> 杀死进程(sid,serial#)</h2>\n<div><pre><code><span>alter</span> system <span>kill</span> <span>session</span> <span>'259,37152'</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "PrometheusAlert",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/promethues-alerts/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/promethues-alerts/",
      "content_html": "<h1 id=\"prometheusalert\"> PrometheusAlert</h1>\n<p>Prometheus Alert是开源的运维告警中心消息转发系统,支持主流的监控系统Prometheus,Zabbix,日志系统Graylog和数据可视化系统Grafana发出的预警消息,支持钉钉,微信,华为云短信,腾讯云短信,腾讯云电话,阿里云短信,阿里云电话等</p>\n<h3 id=\"文档\"> 文档</h3>\n<p>https://feiyu563.gitbook.io/prometheusalert/</p>\n<h3 id=\"自定义的告警模板\"> 自定义的告警模板</h3>\n<div><pre><code>{{ $var := .externalURL}}{{ range $k,$v:=.alerts }}\n{{if eq $v.status &quot;resolved&quot;}}\n## [Prometheus恢复信息]({{$v.generatorURL}})\n\n&gt; &lt;font color=&quot;info&quot;&gt;告警名称&lt;/font&gt;：[{{$v.labels.alertname}}]({{$var}})\n\n&gt; &lt;font color=&quot;info&quot;&gt;告警级别&lt;/font&gt;：{{$v.labels.severity}}\n\n&gt; &lt;font color=&quot;info&quot;&gt;当前状态&lt;/font&gt;：{{$v.status}}\n\n&gt; &lt;font color=&quot;info&quot;&gt;告警分组&lt;/font&gt;：{{$v.labels.team}}\n\n&gt; &lt;font color=&quot;info&quot;&gt;开始时间&lt;/font&gt;：{{GetCSTtime $v.startsAt}}\n\n&gt; &lt;font color=&quot;info&quot;&gt;结束时间&lt;/font&gt;：{{GetCSTtime $v.endsAt}}\n\n&gt; &lt;font color=&quot;info&quot;&gt;实例地址&lt;/font&gt;：{{$v.labels.instance}}\n\n**{{$v.annotations.description}}**\n{{else}}\n## [ &lt;font color=&quot;#FF0000&quot;&gt;Prometheus告警信息&lt;/font&gt;]({{$v.generatorURL}})\n&gt; &lt;font color=&quot;#FF0000&quot;&gt;告警名称&lt;/font&gt;：[{{$v.labels.alertname}}]({{$var}})\n\n&gt; &lt;font color=&quot;#FF0000&quot;&gt;告警级别&lt;/font&gt;：{{$v.labels.severity}}\n\n&gt; &lt;font color=&quot;#FF0000&quot;&gt;当前状态&lt;/font&gt;：{{$v.status}}\n\n&gt; &lt;font color=&quot;#FF0000&quot;&gt;告警分组&lt;/font&gt;：{{$v.labels.team}}\n\n&gt; &lt;font color=&quot;#FF0000&quot;&gt;开始时间&lt;/font&gt;：{{GetCSTtime $v.startsAt}}\n\n&gt; &lt;font color=&quot;#FF0000&quot;&gt;实例地址&lt;/font&gt;：{{$v.labels.instance}}\n\n**{{$v.annotations.description}}**\n{{end}}\n{{ end }}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "调优的目的：",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/%E8%B0%83%E4%BC%98/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/%E8%B0%83%E4%BC%98/",
      "content_html": "<h2 id=\"调优的目的\"> 调优的目的：</h2>\n<ol>\n<li>根据不同的角色调优的方法是不一样的</li>\n<li>找到性能瓶颈以及缓解这个瓶颈（CPU，内存，IO调度、网络、使用的应用程序）</li>\n<li>通常做两种调优：\nresponse time:  Web服务器，用户感受度好\nthroughput: \t文件服务器，拷贝的速度</li>\n</ol>\n<h2 id=\"性能调优的效率问题\"> 性能调优的效率问题：</h2>\n<h3 id=\"业务级调优\"> 业务级调优</h3>\n<p>尽量在业务级调，效果最明显</p>\n<p>例如： 网站一定要使用Apache吗?\n例如：将原有的调度器由LVS换成F5-BigIP\n例如：能否禁用一些不必要的服务如蓝牙、smart card，makewathis, updatadb</p>\n<h3 id=\"应用级调优\"> 应用级调优</h3>\n<p>NFS，Samba，Apache、Nginx、MySQL、Oracle、LVS本身调优\t\t\t\t\n对于日志的处理： 只要有日志产生，就会存盘fsync()，可以调整记录的日志等级或延后日志写，从而避免大量的I/O操作\nkernel级调优\t\t最后的希望，kernel调优具有普遍性</p>\n<p>自上往下，效果越来越不明显</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "centos7下时区问题",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/centos%E6%97%B6%E5%8C%BA/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/centos%E6%97%B6%E5%8C%BA/",
      "content_html": "<h2 id=\"centos7下时区问题\"> centos7下时区问题</h2>\n<p>centos7时区同样, 在\nCentOS 7 中, 引入了一个叫 <strong>timedatectl</strong> 的设置设置程序。</p>\n<p>用法很简单：</p>\n<div><pre><code># timedatectl # 查看系统时间方面的各种状态\n      Local time: 四 2014-12-25 10:52:10 CST\n  Universal time: 四 2014-12-25 02:52:10 UTC\n        RTC time: 四 2014-12-25 02:52:10\n        Timezone: Asia/Shanghai (CST, +0800)\n     NTP enabled: yes\nNTP synchronized: yes\n RTC in local TZ: no\n      DST active: n/a\n# timedatectl list-timezones # 列出所有时区\n# timedatectl set-local-rtc 1 # 将硬件时钟调整为与本地时钟一致, 0 为设置为 UTC 时间\n# timedatectl set-timezone Asia/Shanghai # 设置系统时区为上海\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>其实不考虑各个发行版的差异化, 从更底层出发的话, 修改时间时区比想象中要简单:</p>\n<div><pre><code># cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "curl https报错: curl: (35) SSL connect error",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/curl%20https%E6%8A%A5%E9%94%99/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/curl%20https%E6%8A%A5%E9%94%99/",
      "content_html": "<h2 id=\"curl-https报错-curl-35-ssl-connect-error\"> curl https报错: curl: (35) SSL connect error</h2>\n<p>源码编译curl</p>\n<div><pre><code>cd /usr/local/src/\nwget http://curl.haxx.se/download/archeology/curl-7.19.7.tar.gz\ntar -zxf curl-7.19.7.tar.gz\ncd curl-7.19.7\n./configure --without-nss --with-ssl\nmake\nmake install\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>转载自：<a href=\"https://blog.csdn.net/qq_34810257/article/details/80885622\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/qq_34810257/article/details/80885622</a></p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Linux，du、df统计的硬盘使用情况不一致问题",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/du-df%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E4%B8%8D%E4%B8%80%E8%87%B4/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/du-df%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E4%B8%8D%E4%B8%80%E8%87%B4/",
      "content_html": "<h2 id=\"linux-du、df统计的硬盘使用情况不一致问题\"> Linux，du、df统计的硬盘使用情况不一致问题</h2>\n<p>在运维Linux服务器时，会碰到需要查看硬盘空间的情况，这时候，通常会使用df -lh命令来检查每个挂载了文件系统的硬盘的总量和已使用量，或者，可以使用du -sh [directory]命令来统计某个目录下所有文件的空间占用。</p>\n<p>在使用df、du命令时，常常会遇到统计的硬盘使用情况不一致的问题。比如du统计根目录下文件总共大小为2G，而df判断挂载在根目录的硬盘已用空间达到了3G，20G甚至更多。发生这种情况，有以下三种原因：</p>\n<h2 id=\"预留空间\"> 预留空间</h2>\n<p>为了预防紧急情况，linux ext文件系统会预留部分硬盘空间，具体预留的数值可以通过tune2fs -l [dev_name] | grep “Reserved block count”查看到（dev_name是设备名），这里预留的空间会被df计算到已用空间中，从而导致df和du统计不一致。如果需要调整预留空间大小，我们可以使用tune2fs -m [size][dev_name]来进行调整。</p>\n<h2 id=\"幻影文件-phantom-file\"> 幻影文件（phantom file）</h2>\n<p>du是统计被文件系统记录到的每个文件的大小，然后进行累加得到的大小，这是通过文件系统获取到的。而df主要是从超级块（superblock）中读入硬盘使用信息，df获取到的是磁盘块被使用的情况。当一个文件被删除时，如果有别的进程正在使用它（占有句柄）， 这个文件将不会被du统计到，但是这个文件被占用的磁盘空间却依然会被df统计到。这些文件，以及正在使用这些文件的进程可以通过lsof | grep deleted查到。当进程停止或者被kill时，这些空间将被释放。</p>\n<h2 id=\"未统计到的文件\"> 未统计到的文件</h2>\n<p>如果上面两种情况都排除了，但是数据还是不一致，那是怎么回事？这里隐藏着一种情况：当我们将一个目录挂在到一个新的设备（硬盘）上之前，如果这个目录里面已经有数据，那么这一部分数据不会被du感知，在文件系统中也看不到这些数据，但是这些数据又是确实占用了磁盘空间，是能够被df所统计到的。这时候通过du/df统计原设备的空间使用情况，就会发现df统计到的比du要多。遇到这样的情况时，使用fuser -km [directory]杀死占用该目录的所有进程（小心操作！），然后使用umount [directory]将该目录挂载的设备卸载，这时，目录里面原来已有的数据就会出现，我们将其删除之后，再重新挂载设备（mount -t [type][dev] [directory]）即可。</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "linux下如何增加swap交换分区",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/linux%E4%B8%8B%E5%A2%9E%E5%8A%A0%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/linux%E4%B8%8B%E5%A2%9E%E5%8A%A0%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/",
      "content_html": "<h2 id=\"linux下如何增加swap交换分区\"> linux下如何增加swap交换分区</h2>\n<p>swap即交换分区，类似于<a href=\"http://www.ttlsa.com/windows/\" target=\"_blank\" rel=\"noopener noreferrer\">windows</a>虚拟内存功能，就是在硬盘上分配出一块空间作为虚拟内存来使用.</p>\n<p>通常swap都是在装系统硬盘分区时设定，这里只是探讨一下系统已经安装好后，扩展swap分区的方法.下面我们来将下如何在安装好的<a href=\"http://www.ttlsa.com/linux/\" target=\"_blank\" rel=\"noopener noreferrer\">linux</a>下增加swap交换分区.</p>\n<p>可以有两种方法来增加swap分区，一种是将新的分区来作为swap，另一种是在磁盘中创建一个大的文件来作swap.</p>\n<h2 id=\"新分区扩展swap\"> 新分区扩展swap</h2>\n<p>假如有一个新的分区/dev/sda3,我们用它来作swap.</p>\n<div><pre><code># swapon -s                --查看当前swap情况\n# mkswap /dev/sda3\n# swapon /dev/sda3\n# swapon -s\n# vi /etc/fstab\n/dev/sda3   swap   swap  defaults  0  0    --添加开机自动挂载\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"大文件扩展swap\"> 大文件扩展swap</h2>\n<div><pre><code># cd /var\n# dd if=/dev/zero of=file bs=1M count=1000       --生成1G的大文件\n# mkswap file\n# swapon file\n# swapon -s\n# vi /etc/fstab\n/var/file   swap   swap   defaults  0   0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "mysql最大连接数的改变",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/mysql%E6%9C%80%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%95%B0/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/24%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/mysql%E6%9C%80%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%95%B0/",
      "content_html": "<h2 id=\"mysql最大连接数的改变\"> mysql最大连接数的改变</h2>\n<p>在使用MySQL数据库的时候，经常会遇到这么一个问题，就是“Can not connect to MySQL server. Too many connections”-mysql 1040错误，这是因为访问MySQL且还未释放的连接数目已经达到MySQL的上限。通常，mysql的最大连接数默认是100, 最大可以达到16384。</p>\n<p>常用的有两种方式修改最大连接数。</p>\n<h3 id=\"命令行修改\"> 命令行修改</h3>\n<div><pre><code>#mysql -uuser -ppassword(命令行登录MySQL)\nmysql&gt;show variables like &#39;max_connections&#39;;(查可以看当前的最大连接数)\nmsyql&gt;set global max_connections=1000;(设置最大连接数为1000，可以再次查看是否设置成功)\nmysql&gt;exit(退出)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这种方式有个问题，就是设置的最大连接数只在mysql当前服务进程有效，一旦mysql重启，又会恢复到初始状态。因为mysql启动后的初始化工作是从其配置文件中读取数据的，而这种方式没有对其配置文件做更改。</p>\n<h3 id=\"修改配置文件\"> 修改配置文件</h3>\n<p>这 种方式说来很简单，只要修改MySQL配置文件my.ini 或 my.cnf的参数max_connections，将其改为max_connections=1000，然后重启MySQL即可。</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "安装python解释器，配置好path变量。",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/vscode/%E4%BD%BF%E7%94%A8vscode%E6%89%93%E9%80%A0python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/vscode/%E4%BD%BF%E7%94%A8vscode%E6%89%93%E9%80%A0python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/",
      "content_html": "<h2 id=\"安装python解释器-配置好path变量。\"> 安装python解释器，配置好path变量。</h2>\n<p>下载网址：https://www.python.org/downloads/release/python-374/</p>\n<p>注意区分64位还是32位的。</p>\n<p>安装python的时候，建议将python添加到path环境变量的复选框勾上，并且使用自定义安装，因为可以自定义安装目录，我是安装在C:\\Python37中的</p>\n<p><img src=\"images/1809823-20191024094355579-1616094075.png\" alt=\"img\"></p>\n<p><img src=\"images/1809823-20191024094501565-869967624.png\" alt=\"img\"></p>\n<h2 id=\"安装virtualenv\"> 安装virtualenv</h2>\n<p>win+R输入cmd后点确定，然后执行：</p>\n<div><pre><code>pip install virtualenv\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"下载并安装好vscode编辑器\"> 下载并安装好vscode编辑器</h2>\n<p>（安装时，将复选框全部勾上）</p>\n<p>下载地址：https://code.visualstudio.com/</p>\n<h2 id=\"在vscode中安装python插件\"> 在vscode中安装python插件</h2>\n<p>按下快捷键Ctrl+Shift+X，进入插件管理页面\n在搜索框中搜索python关键字\n点击下载量最高的那个进行安装，一般都是第一个。</p>\n<p><img src=\"images/1809823-20191024100941643-2124999412.png\" alt=\"img\"></p>\n<p>vscode安装了上面这个插件后，能干什么？</p>\n<ul>\n<li>\n<p>这个插件不是python语言的解释器，vscode想要运行python代码，必须另外指定在windows上安装的python解释器路径才可以。</p>\n</li>\n<li>\n<p>这个插件被安装上后，vscode就具有了调用python解释器的功能。其实就是在setting.json和launch.json这两个配置文件中，可以添加python相关的配置了，比如通过python.pythonPath的值找到python解释器的位置等等。</p>\n</li>\n<li>\n<p>可以通过按下ctrl键，点击函数，打开函数的所在文件和定义位置。</p>\n</li>\n<li>\n<p>具有代码提示功能。</p>\n</li>\n</ul>\n<p><img src=\"images/1809823-20191024135540391-1446811264.png\" alt=\"img\"></p>\n<h2 id=\"准备一个项目并用vscode打开\"> 准备一个项目并用vscode打开</h2>\n<blockquote>\n<p>第一步：创建一个总项目目录</p>\n<p>D:\\CodeProjects</p>\n<p>第二步：创建一个python总项目目录</p>\n<p>D:\\CodeProjects\\PythonProjects</p>\n<p>第三步：创建一个测试项目目录</p>\n<p>D:\\CodeProjects\\PythonProjects\\opms</p>\n<p>第四步：在指定项目中创建python虚拟环境</p>\n<p>win+R输入cmd后点确定，依次执行下面三条命令：（-p后面的参数，可以换成其它python解释器的路径）</p>\n<div><pre><code>D:\ncd D:\\CodeProjects\\PythonProjects\\opms\nvirtualenv .venv -p &quot;C:\\Python37\\python.exe&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>第五步：右击opms项目目录，使用vscode打开（一般情况下，一个vscode界面只能打开一个项目目录）</p>\n</blockquote>\n<h2 id=\"为项目运行时指定特定的python解释器\"> 为项目运行时指定特定的python解释器</h2>\n<p>第一步：为新打开的项目生成setting.json配置文件</p>\n<blockquote>\n<p>按下快捷键ctrl+shift+p，输入interpreter，单击筛选出来的结果“Python: Select Interpreter&quot;，就会跳出windows系统上已经安装的所有python解释器，我们这里随便选择一个即可，因为我们之后会自定义setting.json配置文件中的值，这一步只是为了生成setting.json这个配置文件。</p>\n<p><img src=\"images/1809823-20191024111926404-1427330908.png\" alt=\"img\"></p>\n<p>补充：你如果和我一样，在打开项目之前已经在项目中创建了python虚拟环境，那么在选择interpreter时，vscode也会将本项目目录下的虚拟环境中的python解释器也列出来，此时，你可以直接选择这个解释器即可。</p>\n<p><img src=\"images/1809823-20191024114429432-201149058.png\" alt=\"img\"></p>\n</blockquote>\n<p>第二步：修改setting.json配置文件，指定python.pythonPath的值为opms项目目录下python虚拟环境中的python解释器路径</p>\n<blockquote>\n<p><img src=\"images/1809823-20191024110414553-848173359.png\" alt=\"img\"></p>\n</blockquote>\n<p>7.为项目运行时指定入口文件和参数</p>\n<p>第一步：为新打开的项目生成launch.json配置文件</p>\n<blockquote>\n<p>点击Debug，点击Add Configuration，点击Python，然后根据你的项目，在Python File、Django、Flask中选择一个，我这里只是为了说明，选择Python File，你们请根据自己的项目类型的进行选择。</p>\n<p><img src=\"images/1809823-20191024113513104-1372597605.png\" alt=\"img\"></p>\n</blockquote>\n<p>第二步：解释launch.json配置文件中configurations列表的作用</p>\n<blockquote>\n<p>program这个键，用来指定项目运行时的入口文件的，其中<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span><span style=\"margin-right:0.10764em;\">f</span><span>i</span><span style=\"margin-right:0.01968em;\">l</span><span>e</span></span><span>表示当前文件，</span></span></span></span>{workspaceFolder}表示项目根目录，对于django项目来说，入口文件应该是项目根目录下的manage.py文件，所以可以配置为&quot;program&quot;: &quot;${workspaceFolder}\\manage.py&quot;。</p>\n<p>args这个键，用来指定项目运行时，跟在入口文件后面的参数，对于django项目来说，运行参数应该是：runserver 0.0.0.0:8080 --noreload --nothreading ，所以可以配置为：</p>\n<p>&quot;args&quot;:[&quot;runserver&quot;,&quot;0.0.0.0:8080&quot;,&quot;--noreload&quot;,&quot;--nothreading&quot;] 。</p>\n<p>name这个键，用来命名配置名称的，因为在configurations列表中可以定义多个配置，不同的配置命名要相互区分。</p>\n<p>type和request这两个键是必须项，在不同的配置中都要存在的，而它们的值也是固定的。&quot;type&quot;: &quot;python&quot; , &quot;request&quot;: &quot;launch&quot;。</p>\n</blockquote>\n<p>8.测试一下</p>\n<p>在项目目录中，创建一个test.py文件，写入代码后，点击文件上方的绿色三角形按钮运行当前文件。</p>\n<blockquote>\n<p>之所以能够点击按钮就可以运行当前文件，是因为我使用了Python File这个configurations运行配置，参数&quot;program&quot;: &quot;${file}&quot;，表示当前文件。</p>\n<p><img src=\"images/1809823-20191024181603712-2000588466.png\" alt=\"img\"></p>\n</blockquote>\n<p>有时候vscode会报错如下：</p>\n<p>无法加载文件 D:\\CodeProjects\\PythonProjects\\opms.venv\\Scripts\\activate.ps1，因为在此系统上禁止运行脚本。</p>\n<p><img src=\"images/1809823-20191024153804972-561219001.png\" alt=\"img\"></p>\n<p>解决办法：</p>\n<blockquote>\n<p>第一步：以管理员身份运行powershell\n第二步：执行：get-ExecutionPolicy，回复Restricted，表示状态是禁止的。\n第三步：执行：set-ExecutionPolicy RemoteSigned\n第四步：选择Y，回车。</p>\n</blockquote>\n<h2 id=\"关于python虚拟环境的解释\"> 关于python虚拟环境的解释</h2>\n<blockquote>\n<p>python虚拟环境是一个非常好用的东西，以前我以为只有activate激活这个虚拟环境，才可以使用这个虚拟环境中安装的各个模块。现在，我知道之前的认知是局限的。</p>\n<p>其实，你只需要使用虚拟环境中的python.exe解释器的绝对路径就可以使用这个虚拟环境中安装的python模块了，根本不需要激活。不信的话，你试试：</p>\n<p>比如我创建了一个venv虚拟环境：D:\\CodeProjects\\PythonProjects\\opms.venv\\</p>\n<p>然后，我运行下面的命令得到的模块列表和全局解释器中的模块列表是不一样的（此时我并没有激活这个虚拟环境）：</p>\n<p>D:\\CodeProjects\\PythonProjects\\opms.venv\\Scripts\\pip  list</p>\n<p>当使用activate激活一个虚拟环境时，我们就从cmd或者terminal当前窗口中进入到了一个子窗口中了，在这个子窗口中，PATH这个环境变量被临时更改了，当前这个虚拟环境中的Scripts路径就被加入到PATH环境变量中了，那么我们在这个子窗口中运行的python命令、pip命令等也就通过PATH这个环境变量自动查找，然后指向了虚拟环境Scripts目录中的解释器了，这也就解释了为何激活了这个虚拟环境，在这个窗口中切换到任何一个目录中，执行python或者pip命令都能使用和查看这个虚拟环境的所有模块的原因。</p>\n</blockquote>\n<h2 id=\"配置django项目的运行参数\"> 配置django项目的运行参数</h2>\n<p>一般我们运行django项目的命令是：  python manage.py runserver 0.0.0.0:8080</p>\n<p>这个命令分为两部分，第一部分是python解释器，我们在settings.json设置，剩下的参数manage.py runserver 0.0.0.0:8080我们需要在launch.json中设置。</p>\n<p>我粘贴出我在launch.json文件中设置的内容：</p>\n<p>[<img src=\"images/copycode.gif\" alt=\"复制代码\">](javascript:void(0)😉</p>\n<div><pre><code>    &quot;configurations&quot;: [\n        {\n            &quot;name&quot;: &quot;Python: Current File&quot;,\n            &quot;type&quot;: &quot;python&quot;,\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;program&quot;: &quot;${file}&quot;,\n            &quot;console&quot;: &quot;integratedTerminal&quot;\n        },\n        {\n            &quot;name&quot;:&quot;Python: Django&quot;,\n            &quot;type&quot;:&quot;python&quot;,\n            &quot;request&quot;:&quot;launch&quot;,\n            &quot;program&quot;:&quot;${workspaceFolder}\\\\manage.py&quot;,\n            &quot;console&quot;:&quot;integratedTerminal&quot;,\n            &quot;args&quot;:[\n                &quot;runserver&quot;,\n                &quot;0.0.0.0:8080&quot;,\n                &quot;--noreload&quot;,\n                &quot;--nothreading&quot;\n            ],\n            &quot;django&quot;:true\n        }\n    ] \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>此时如果要运行django项目的话，方法如下：</p>\n<blockquote>\n<p>点击左边栏目中的小乌龟，</p>\n<p>点击齿轮图标旁边的下拉框，选择Python: Django，</p>\n<p>然后点击左边绿色三角形的运行按钮即可。</p>\n</blockquote>\n<p><img src=\"images/1809823-20190928205359265-672999965.png\" alt=\"img\"></p>\n<h2 id=\"配置vscode的文件图标和主题美化\"> 配置vscode的文件图标和主题美化</h2>\n<blockquote>\n<p>按下快捷键Ctrl+Shift+X，进入插件管理页面\n在搜索框中搜索这两个插件并安装：Material Icon Theme 和 Son of Obsidian Theme\n然后点击左下角的齿轮图标，选择并点击File Icon Theme,在出现的展示中，选择并点击Material Icon Theme即可。</p>\n<p><img src=\"images/1809823-20190928211305845-549111763.png\" alt=\"img\"></p>\n<p>此时，我们就会发现我们的python文件的图标已经变成了经典的头尾相接的两条蟒蛇了。</p>\n<p><img src=\"images/1809823-20191024134941874-380471130.png\" alt=\"img\"></p>\n</blockquote>\n<p>13.启用自动格式化代码工具yapf（我用的是推荐的autopep8）</p>\n<blockquote>\n<p>第一步：在项目指定的python解释器中安装yapf模块</p>\n<div><pre><code>cd D:\\CodeProjects\\PythonProjects\\opms\\.venv\\Scripts\nactivate\npip install yapf\ndeactivate.bat\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>第二步：在项目中的settings.json配置文件中，添加：&quot;python.formatting.provider&quot;: &quot;yapf&quot;，如下：</p>\n<p><img src=\"images/1809823-20191024154647910-1896543092.png\" alt=\"img\"></p>\n<p>第三步：按Alt+Shift+F即可自动格式化代码</p>\n</blockquote>\n<p>测试一下：</p>\n<p>未经代码格式化之前的代码如下：</p>\n<p><img src=\"images/1809823-20191024155009882-1482382316.png\" alt=\"img\"></p>\n<p>按Alt+Shift+F后，代码如下：</p>\n<p><img src=\"images/1809823-20191024155114340-395399786.png\" alt=\"img\"></p>\n<p>14.启用pylint进行代码编写时格式规范检查</p>\n<blockquote>\n<p>第一步：在项目指定的python解释器中安装pylint模块</p>\n<div><pre><code>cd D:\\CodeProjects\\PythonProjects\\opms\\.venv\\Scripts\nactivate\npip install pylint\ndeactivate.bat\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>第二步：启用pylint功能，在settings.json文件中添加：&quot;python.linting.pylintEnabled&quot;: true，如下：</p>\n<p><img src=\"images/1809823-20191024162433256-353199912.png\" alt=\"img\"></p>\n<p>第三步：关于pylint检查项的一些定制</p>\n<p>&quot;python.linting.pylintArgs&quot;: [&quot;--disable=C,broad-except,unused-variable&quot;,],</p>\n<p><img src=\"images/1809823-20191024182305562-745231240.png\" alt=\"img\"></p>\n<p>检查项按大类分，大约有四个：C、R、E、W，C类应该是与变量、函数名等命名有关的规范，我们把C类检查全部禁用，E类应该是检查模块、类、函数等是否存在，这个是最有用的，W类应该是与声明的变量是否被使用、使用的异常捕捉类是否细化等检查相关，这个可以根据具体的情况具体禁用。R类还不太清楚。</p>\n<p>那么如何禁用具体的检查项呢？</p>\n<p>首先，我们将鼠标停留在报出异常的代码上，如下：</p>\n<p><img src=\"images/1809823-20191024174359019-1472829681.png\" alt=\"img\"></p>\n<p>然后，就可以看到异常是unused-variable了，我们将这个异常检查项在settings.json中禁用掉即可。其它的异常检查项也是这么查看和禁用。</p>\n<p>第四步：Django项目需要安装额外的规范检查模块</p>\n<div><pre><code>pip install pylint_django\n</code></pre>\n<div><span>1</span><br></div></div><p>第五步：在settings.json配置文件中为django项目添加加载检查模块</p>\n<p>&quot;python.linting.pylintArgs&quot;: [\n&quot;--load-plugins&quot;,\n&quot;pylint_django&quot;,\n],</p>\n<p><img src=\"images/1809823-20191024182912313-1550192011.png\" alt=\"img\"></p>\n</blockquote>\n<h2 id=\"记录一下vscode中的一些快捷键\"> 记录一下vscode中的一些快捷键</h2>\n<ul>\n<li>\n<p>终止程序运行：ctrl + `</p>\n</li>\n<li>\n<p>侧边栏显示和隐藏：ctrl + B</p>\n</li>\n<li>\n<p>格式化代码：Alt+Shift+F</p>\n</li>\n<li>\n<p>格式化选中部分的代码：Ctrl + K Ctrl + F</p>\n</li>\n<li>\n<p>打开Git可视管理：Ctrl + Shift + G</p>\n</li>\n</ul>\n<p>补充：</p>\n<p>格式化代码的快捷键用起来太麻烦了，将它更改为常用的ctrl+alt+l（L的小写）的方式。</p>\n<p>按ctrl+k ctrl+s打开快捷键修改的界面，搜索框中搜索shift+alt+f，快速定位到要修改的快捷键：</p>\n<p><img src=\"images/1809823-20191119130519077-417424220.png\" alt=\"img\"></p>\n<p>修改完成后，如下所示，记得更换搜索关键词：</p>\n<p><img src=\"images/1809823-20191119130646807-2122638239.png\" alt=\"img\"></p>\n<h2 id=\"新建python文件时自动添加头部信息\"> 新建python文件时自动添加头部信息</h2>\n<p>第一步：</p>\n<p>点击File，点击Preferences，点击User Snippets，输入python，点击跳出来的&quot;python.json(Python)&quot;，在打开的python.json文件中，先清空文件原内容，然后添加：</p>\n<p>请看：下面的内容，适合python2，在python3中，请将#!/usr/bin/python3(或者用虚拟环境中的python解释器）和#encoding:utf-8替换对应位置的内容。</p>\n<div><pre><code>{\n    &quot;HEADER&quot;:{\n        &quot;prefix&quot;: &quot;header&quot;,\n        &quot;body&quot;: [\n        &quot;#!/usr/bin/python&quot;,\n        &quot;# -*- encoding: utf-8 -*-&quot;,\n        &quot;&#39;&#39;&#39;&quot;,\n        &quot;@File    :   $TM_FILENAME&quot;,\n        &quot;@Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;,\n        &quot;@Author  :   DesignerA &quot;,\n        &quot;@Version :   1.0&quot;,\n        &quot;@Contact :   DesignerA@qq.com&quot;,\n        &quot;@WebSite :   www.cnblogs.com/DesignerA&quot;,\n        &quot;&#39;&#39;&#39;&quot;,\n        &quot;# Start typing your code from here&quot;,\n        &quot;$0&quot;\n    ],\n    }   \n} \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>第二步：</p>\n<p>在新建的python文件开头输入header，然后回车，就会自动出现上面定义的头部信息了(我已经替换对应位置的内容为python3了），如下：</p>\n<p><img src=\"images/1809823-20191025104553418-61291872.png\" alt=\"img\"></p>\n<p>17.vscode配置git管理代码</p>\n<p>第一步：先到git官网下载并安装windows 64位版的git，git官网下载地址：https://git-scm.com/downloads，注意，安装Git的过程中，选择VS Code作为git的默认编辑器，其它都默认即可，如下图：</p>\n<p><img src=\"images/1809823-20191107094409648-1081928631.png\" alt=\"img\"></p>\n<p>第二步：为git配置环境变量，默认情况下，git被安装在C:\\Program Files\\Git\\目录下，我们需要将这个目录下的bin目录添加到Path环境变量中。如下图</p>\n<p><img src=\"images/1809823-20191107103843696-1444117909.png\" alt=\"img\"></p>\n<p>第三步：设置vscode与git关联，依次打开：File -&gt; Preferences -&gt; Settings -&gt; Extensions -&gt; Git -&gt;Path (Edit in settings.json)</p>\n<p>在打开的settings.json文件中，配置git的可执行文件路径，如下：</p>\n<div><pre><code>//启用git\n&quot;git.enabled&quot;: true, \n//启用自动刷新\n&quot;git.autorefresh&quot;: true,\n//启用自动提取\n&quot;git.autofetch&quot;: true,\n//同步前进行确认\n&quot;git.confirmSync&quot;: true,\n//配置git可执行文件路径\n&quot;git.path&quot;:&quot;C:\\\\Program Files\\\\Git\\bin\\\\git.exe&quot;,\n&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;,\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><img src=\"images/1809823-20191107102510744-202119607.png\" alt=\"img\"></p>\n<p>第四步：配置git用户名与邮箱（git暂存时需要用到它们）</p>\n<div><pre><code>git config --global user.name &quot;xxxxxxx&quot;\ngit config --global user.email &quot;xxxxxxx@qq.com&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>第五步：在github上新建一个仓库，然后使用命令git clone &quot;仓库地址&quot; ，将仓库克隆到本地目录中。 如果是私有仓库，这步执行后，会要求你输入github账户密码。</p>\n<p>第六步：让git记住密码，这样不用每次都填写</p>\n<div><pre><code>git config --global credential.helper store\n</code></pre>\n<div><span>1</span><br></div></div><p>第七步：找到git下来的仓库目录，然后右击目录，选择使用vscode打开</p>\n<p>第八步：你编辑这个项目中的文件后，你要先点击小勾暂存所有更改，输入你的提交消息（随便输点你本次提交的说明信息）</p>\n<p>说明：这里的commit并不是提交到github，而是提交到本地的暂存区，而且必须要先提交到本地的暂存区，之后才可以使用push将暂存区中的内容推送到github仓库中。</p>\n<p><img src=\"images/1809823-20191107142454405-769542664.png\" alt=\"img\"></p>\n<p>第九步：将更改提交到github仓库中，从图中可以看到第八步执行完后，本次的更改已经写入到暂存区了。点击Push后，可以到github仓库中看下仓库中的内容是否已经更改</p>\n<p><img src=\"images/1809823-20191107142940191-882413579.png\" alt=\"img\"></p>\n<h2 id=\"vscode添加浏览器预览html代码功能\"> vscode添加浏览器预览html代码功能</h2>\n<p>第一步：按下快捷键Ctrl+Shift+X，进入插件管理页面，搜索并安装插件open in browser</p>\n<p><img src=\"images/1809823-20191107111943913-1369276819.png\" alt=\"img\"></p>\n<p>第二步：修改vscode预览html文件默认使用的浏览器，不修改的话，默认使用IE。当然，这一步可以不执行，因为右击html文件的时候可以选择Open In Other Browers</p>\n<p>​        依次打开：File -&gt; Preferences -&gt; Settings -&gt; Extensions -&gt; plugin open-in-brower -&gt;Auto Complete: Extra Paths (Edit in settings.json)然后在打开的settings.json配置文件中添加：</p>\n<div><pre><code>//如果是火狐，就设置firefox\n&quot;open-in-browser.default&quot;: &quot;chrome&quot;,\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><img src=\"images/1809823-20191107112853772-2002089952.png\" alt=\"img\"></p>\n<h2 id=\"vscode利用远程服务器环境调试项目-五星推荐\"> vscode利用远程服务器环境调试项目（五星推荐）</h2>\n<p>这个还是很好用的，可以不需要在windows服务器上安装python执行环境了。而且，python中的一些与系统操作相关的模块，windows上安装起来也非常麻烦。</p>\n<p>第一步：按下快捷键Ctrl+Shift+X，进入插件管理页面，搜索并安装插件Remote Development</p>\n<p><img src=\"images/1809823-20191118092715192-399355687.png\" alt=\"img\"></p>\n<p>第二步：windows上安装openssh客户端，这里提供一个使用powershell安装的方法</p>\n<p>首先，以管理员身份打开powershell</p>\n<p>然后，输入命令在线查询可获取的安装包 Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'</p>\n<p><img src=\"images/1809823-20191118094734763-1541493353.png\" alt=\"img\"></p>\n<p>最后，如果状态显示NotPresent的话，可以使用命令进行安装，命令为Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0</p>\n<p>提示：随着 Windows 10 2018 年 4 月更新的发布，OpenSSH 客户端已正式推出并在 Windows 10 中默认安装。</p>\n<p>补充：有些人的电脑系统可能是windows7的，这里再提供一个在windows7上安装openssh客户端的方法</p>\n<p>首先，下载cygwin，下载网址为: https://www.cygwin.com/</p>\n<p><img src=\"images/1809823-20191120225326765-1888543090.png\" alt=\"img\"></p>\n<p>然后，安装它，安装过程中，当出现选择要安装的包时，我们将View切换为Full，并在搜索框中搜索openssh，在出现的搜索结果中，我们将openssh中的skip改为8.1p1-1，然后再点击下一步完成安装。如下图，下图中因为我已经安装过了，所以openssh这里没有显示skip：</p>\n<p><img src=\"images/1809823-20191120230219685-1632606585.png\" alt=\"img\"></p>\n<p>再然后，我们需要将Cygwin安装目录下的bin目录的绝对路径添加到Path环境变量中。Cygwin默认的安装路径为：C:\\cygwin64，所以我们需要将C:\\cygwin64\\bin添加到Path环境变量中，如下图所示：</p>\n<p><img src=\"images/1809823-20191120230912717-363541959.png\" alt=\"img\"></p>\n<p>最后，验证一下。我们打开cmd，输入ssh回车看看是否有输出，有输出信息就表示openssh客户端安装成功了：</p>\n<p><img src=\"images/1809823-20191120231056489-255714313.png\" alt=\"img\"></p>\n<p>备注：这个Cygwin软件被安装上后，不但可以使用ssh客户端了，另外很多linux上的命令我们也都可以在cmd中使用了，比如ls和pwd等。原因就是这些命令工具都被提供在C:\\cygwin64\\bin目录下。你可以到这个目录下看看。挺好的软件，给个大大的赞。</p>\n<p>第三步：准备一台centos虚拟机或者ubuntu虚拟机，确保虚拟机上的ssh server服务已经开启，并允许远程连接。比如我准备的是centos7虚拟机，IP地址为192.168.247.133</p>\n<p>第四步：按下快捷键ctrl+shift+p 搜索Remote-SSH:Settings，在打开的页面中，点击Edit in settings.json，在其中添加&quot;remote.SSH.showLoginTerminal&quot;: true,如下图:</p>\n<p><img src=\"images/1809823-20191118100720720-1004879806.png\" alt=\"img\"></p>\n<p>第五步：点击左下角的绿色图标，选择Remote-SSH：Connect to Host 然后点击 Configure SSH Hosts 然后选择点第一个config，默认应该是一个空白的文件，在其中添加如下的配置：</p>\n<div><pre><code>Host Centos7.5_python3\n    HostName 192.168.247.133\n    Port 22\n    User root\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><img src=\"images/1809823-20191118101524704-1699733717.png\" alt=\"img\"></p>\n<p>备注：其中Host后面的名称，可以随便命名，HostName后面的IP地址是准备的虚拟机IP地址，Port后跟的是ssh server服务监听的端口号，默认是22，User后跟的是远程连接的用户名，我这里使用超级用户连接。</p>\n<p>这里补充一点：</p>\n<p>每次连接远程服务器，打开项目都要输入一次密码，是否很烦？（当然我并没有觉得烦）如果有人觉得烦的话，可以先在本地windows系统和远程服务器之间做好ssh免密登陆，然后在上面这个config文件中，在User配置下一行（缩进和User要一致），添加IdentityFile C:\\Users....ssh\\id_rsa即可，其中IdentityFile参数后面跟的是windows上的rsa私钥文件。</p>\n<p>第六步：点击vscode左边栏的远程连接图标，如下：</p>\n<p><img src=\"images/1809823-20191118101908730-1174731395.png\" alt=\"img\"></p>\n<p>第七步：点击配置后的远程虚拟机名称旁边的那个按钮，输入密码进行登陆到服务器上，如下：</p>\n<p><img src=\"images/1809823-20191118102152158-767875613.png\" alt=\"img\"></p>\n<p>备注，如果vscode初次连接这台虚拟机的话，那么需要等待几分钟，因为vscode要做一些初始化工作。</p>\n<p>第八步：连上虚拟机后，可以通过下图中标识的顺序打开远程服务器上的项目，当然每次打开项目都是需要再次输入密码的。这也是为了安全考虑。</p>\n<p>在打开的项目中新建文件，删除文件，修改文件等操作，不需要再次输入密码。</p>\n<p><img src=\"images/1809823-20191118103510878-1427529685.png\" alt=\"img\"></p>\n<p>第九步：运行项目或测试脚本的方法</p>\n<p>感觉这个功能，在一定程度上，都可以代替secure crt或xshell远程连接工具和ftp上传下载客户端了。很强大。</p>\n<p><img src=\"images/1809823-20191118104120944-788931545.png\" alt=\"img\"></p>\n<p>补充：</p>\n<p>没有语法检查，代码自动提示和补全功能，开发真的是一个很难受的事情，那么怎么在远程服务器上使用这些功能呢？下面就是补全这一点的方法：</p>\n<p>首先：按下快捷键Ctrl+Shift+X，进入插件管理页面，搜索python，然后，点击Install in SSH:Centos7.5_python3，如下图：</p>\n<p><img src=\"images/1809823-20191118114031066-1405256168.png\" alt=\"img\"></p>\n<p>然后：在打开的项目中，生成launch.json和settings.json这两个配置文件，方法在最上面，和配置windows本地开发环境一样，我们在settings.json中配置一个远程服务器上的python解释器，如下图：</p>\n<p><img src=\"images/1809823-20191118114509491-1223802505.png\" alt=\"img\"></p>\n<p>最后：运行python文件的方法</p>\n<p><img src=\"images/1809823-20191118114747283-713667578.png\" alt=\"img\"></p>\n<p>第十步：重新打开远程服务器上项目的方法</p>\n<p>点击File，点击Close Folder，这个操作，会重新连接服务器。</p>\n<p>也没找到其它的方法，就这么做吧。</p>\n<blockquote>\n<p>转载链接：https://www.cnblogs.com/DesignerA/p/11604200.html</p>\n</blockquote>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "写作前",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%86%99%E4%BD%9C/IT%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E5%B7%A5%E5%85%B7/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%86%99%E4%BD%9C/IT%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E5%B7%A5%E5%85%B7/",
      "content_html": "<h2 id=\"写作前\"> 写作前</h2>\n<h3 id=\"trello\"> trello</h3>\n<p>官网地址:https://trello.com/</p>\n<p>这是一款任务管理工具，类似于敏捷开发中看板，我们可以快速管理任务。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1419561-20200403080637678-850065086.jpg\" alt=\"img\"></p>\n<p>日常工作我只要想到一个 <strong>idea</strong>，就会第一时间先记录到 <strong>idea</strong> 列表中。这里千万不要高估自己的记忆力，如果想到了，感觉记录下来。以前上午灵光一现想到一个 <strong>idea</strong>，准备晚上写一下，然后晚上就想不起来。。。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1419561-20200403080637826-836232793.jpg\" alt=\"img\"></p>\n<p>前期准备时，可以将收集到的资料，素材，全部放到具体卡片中。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1419561-20200403080637970-706620287.jpg\" alt=\"img\"></p>\n<p>当我们开始写作后，拖动到下一个列表，完成之后，再拖到下一个列表，这样写作任务非常清晰。</p>\n<p><strong>trello</strong> 十分强大，这里只是用了小功能，感兴趣的同学可以深入研究一下。</p>\n<h2 id=\"写作中\"> 写作中</h2>\n<h3 id=\"typora-picgo-码云\"> typora+PicGo+码云</h3>\n<p><strong>markdown 编辑器</strong>：typora，下载地址：https://typora.io/</p>\n<p><strong>图床工具</strong>：PicGo，下载地址：https://github.com/Molunerfinn/PicGo/releases</p>\n<p>就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言，<strong>PicGo</strong> 算得上一款比较优秀的图床工具。</p>\n<blockquote>\n<p>这边使用<code>PicGo+码云</code>来实现markdown图床，也可以使用Github，不过考虑网络问题选择码云。</p>\n</blockquote>\n<ul>\n<li>安装成功界面</li>\n</ul>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200730102149683.png\" alt=\"image-20200730102149683\"></p>\n<ul>\n<li>找到底下插件设置，使用码云需要另外安装插件，搜索gitee安装插件，有两个插件都可以用</li>\n</ul>\n<blockquote>\n<p>注意：安装<code>gitee-uploader 1.1.2</code>插件，必须要先安装<code>node.js</code>才能安装插件，我这里安装的是<code>gitee 2.0.2</code></p>\n</blockquote>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200730102308996.png\" alt=\"image-20200730102308996\"></p>\n<ul>\n<li>建立gitee码云图床库，就是在码云新建一个仓库，步骤：</li>\n</ul>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200323195546145.png\" alt=\"image-20200323195546145\"></p>\n<ul>\n<li>接下来配置PicGO，安装Gitee插件成功，就会出现Gitee图床栏目：</li>\n</ul>\n<div><pre><code>url：https://getee.com\nowner：写你的码云用户名\nrepo：仓库名称\ntoken：填入码云的私人令牌\npath：路径，一般写上img\nmessage：可以不用写\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200730102607452.png\" alt=\"image-20200730102607452\"></p>\n<ul>\n<li>设置PicGo开机自启</li>\n</ul>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200716205307568.png\" alt=\"image-20200716205307568\"></p>\n<ul>\n<li>配置Typora，点击 文件，偏好设置，选择图像，设置PicGo二进制文件的路径：</li>\n</ul>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200323201738802.png\" alt=\"image-20200323201738802\"></p>\n<ul>\n<li>Typora使用下面这个url跟PicGo连接的，所以PicGo的设置也要对应，默认一般就是。</li>\n</ul>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/ipicgo.png\" alt=\"img\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/ipcigo2.png\" alt=\"image-20200323204010678\"></p>\n<ul>\n<li>不过PicGo的Server监听端口会经常变动（比如电脑重启后）,就需要修改不然Typora图片也会上传失败。</li>\n</ul>\n<h3 id=\"代码图片生成器\"> 代码图片生成器</h3>\n<p>官网地址:https://carbon.now.sh/</p>\n<p>生成比较精美的代码图片，不用担心一些网站不支持代码格式。</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1419561-20200403080639617-2113865405.jpg\" alt=\"1419561-20200403080639617-2113865405\"></p>\n<p>另外 <strong>carbon</strong> 还有 IDEA，vscode 等插件，安装之后，可以快速使用。</p>\n<h2 id=\"写作后\"> 写作后</h2>\n<p>写作完成之后，我们需要将文章发布到微信公众号以及其他博客平台。</p>\n<h3 id=\"微信公众号\"> 微信公众号</h3>\n<p>由于之前文章采用 <strong>markdown</strong> 写作，而微信公众号编辑器不支持渲染 <strong>markdown</strong>，这就导致我们需要自己排版。虽然排版我们可以使用 <strong>135 编辑器</strong>，<strong>壹伴插件</strong>等完成，不过还是很麻烦。</p>\n<p>追求方便的同学可以使用自动排版 <strong>markdown</strong> 的网站，里面支持样式也是比较简洁好看。</p>\n<p>官网地址：</p>\n<p>http://md.aclickall.com/</p>\n<p>https://mdnice.com/</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1419561-20200403080640489-1946118352.jpg\" alt=\"1419561-20200403080640489-1946118352\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1419561-20200403080640732-64891255.jpg\" alt=\"1419561-20200403080640732-64891255\"></p>\n<h3 id=\"其他博客平台\"> 其他博客平台</h3>\n<p>目前个人还会把文章分发到掘金，博客园，<strong>segmentfault</strong> 等，这些平台都支持 <strong>markdown</strong>,可以直接将 <strong>markdown</strong> 直接复制过去。不过分发平台较多，一个个发还是比较麻烦。</p>\n<p>下面推荐两个工具，自动分发文章到各个博客网站。</p>\n<p>官网地址：</p>\n<p>https://openwrite.cn/</p>\n<p>https://github.com/ystcode/BlogHelper</p>\n<p><strong>openwrite</strong>，该平台目前采用会员机制，年付会员 <strong>99</strong> 元。免费版可以使用 <strong>BlogHelper</strong> 。</p>\n<h2 id=\"参考文章\"> 参考文章</h2>\n<ul>\n<li>https://www.cnblogs.com/goodAndyxublog/p/12624282.html</li>\n<li>https://www.cnblogs.com/qtzd/p/12554902.html</li>\n</ul>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/1419561-20200403080637678-850065086.jpg",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "Redis-集群",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/Redis-1/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/Redis-1/",
      "content_html": "<p>Redis Cluster是Redis的分布式解决方案，在3.0版本正式推出，有效地解决了Redis分布式方面的需求。当遇到单机内存、并发、流量等瓶颈时，可以采用Cluster架构方案达到负载均衡的目的。</p>\n\n<h2 id=\"数据分布\"> 数据分布</h2>\n<h3 id=\"数据分布理论\"> 数据分布理论</h3>\n<p>分布式数据库首先要解决把整个数据集按照分区规则映射到多个节点的问题，即把数据集划分到多个节点上，每个节点负责整体数据的一个子集。如下图</p>\n<p><img src=\"/images/redis1.png\" alt=\"avatar\"></p>\n<h3 id=\"redis数据分区\"> Redis数据分区</h3>\n<p>Redis Cluser采用虚拟槽分区，所有的键根据哈希函数映射到0~16383整数槽内，计算公式：slot=CRC16（key）&amp;16383。每一个节点负责维护一部分槽以及槽所映射的键值数据，如下图</p>\n<p><img src=\"/images/redis2.png\" alt=\"avatar\"></p>\n<h3 id=\"集群功能限制\"> 集群功能限制</h3>\n<p>Redis集群相对单机在功能上存在一些限制，限制如下：</p>\n<p>1）key批量操作支持有限。如mset、mget，目前只支持具有相同slot值的key执行批量操作。对于映射为不同slot值的key由于执行mget、mget等操作可能存在于多个节点上因此不被支持。\n2）key事务操作支持有限。同理只支持多key在同一节点上的事务操作，当多个key分布在不同的节点上时无法使用事务功能。\n3）key作为数据分区的最小粒度，因此不能将一个大的键值对象如hash、list等映射到不同的节点。\n4）不支持多数据库空间。单机下的Redis可以支持16个数据库，集群模式下只能使用一个数据库空间，即db0。\n5）复制结构只支持一层，从节点只能复制主节点，不支持嵌套树状复制结构。</p>\n<h2 id=\"搭建集群\"> 搭建集群</h2>\n<h3 id=\"准备节点\"> 准备节点</h3>\n<p>Redis集群一般由多个节点组成，节点数量至少为6个才能保证组成完整高可用的集群。每个节点需要开启配置cluster-enabled yes，让Redis运行在集群模式下。建议为集群内所有节点统一目录，一般划分三个目录：conf、data、log，分别存放配置、数据和日志相关文件。</p>\n<div><pre><code># 节点端口\nport 6379\n#  开启集群模式\ncluster-enabled yes\n#  节点超时时间，单位毫秒\ncluster-node-timeout 15000\n#  集群内部配置文件\ncluster-config-file &quot;nodes-6379.conf&quot;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>其他配置和单机模式一致即可，配置文件命名规则redis-{port}.conf，准备好配置后启动所有节点，命令如下：</p>\n<div><pre><code>redis-server conf/redis-6379.conf\nredis-server conf/redis-6380.conf\nredis-server conf/redis-6381.conf\nredis-server conf/redis-6382.conf\nredis-server conf/redis-6383.conf\nredis-server conf/redis-6384.conf\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>检查节点日志是否正确，日志内容如下：</p>\n<div><pre><code>cat log/redis-6379.log\n* No cluster configuration found, I&#39;m cfb28ef1deee4e0fa78da86abe5d24566744411e\n# Server started, Redis version 3.0.7\n* The server is now ready to accept connections on port 6379\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>6379节点启动成功，第一次启动时如果没有集群配置文件，它会自动创建一份，文件名称采用cluster-config-file参数项控制，建议采用node-{port}.conf格式定义，通过使用端口号区分不同节点，防止同一机器下多个节点彼此覆盖，造成集群信息异常。如果启动时存在集群配置文件，节点会使用配置文件内容初始化集群信息。启动过程如下图</p>\n<p><img src=\"/images/redis3.png\" alt=\"avator\"></p>\n<p>集群模式的Redis除了原有的配置文件之外又加了一份集群配置文件。当集群内节点信息发生变化，如添加节点、节点下线、故障转移等。节点会自动保存集群状态到配置文件中。需要注意的是，Redis自动维护集群配置文件，不要手动修改，防止节点重启时产生集群信息错乱。如节点6379首次启动后生成集群配置如下：</p>\n<div><pre><code>#cat data/nodes-6379.conf\ncfb28ef1deee4e0fa78da86abe5d24566744411e 127.0.0.1:6379 myself,master - 0 0 0 connected\nvars currentEpoch 0 lastVoteEpoch 0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>文件内容记录了集群初始状态，这里最重要的是节点ID，它是一个40位16进制字符串，用于唯一标识集群内一个节点，之后很多集群操作都要借助于节点ID来完成。需要注意是，节点ID不同于运行ID。节点ID在集群初始化时只创建一次，节点重启时会加载集群配置文件进行重用，而Redis的运行ID每次重启都会变化。在节点6380执行cluster nodes命令获取集群节点状态：</p>\n<div><pre><code>127.0.0.1:6380&gt;cluster nodes\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 127.0.0.1:6380 myself,master - 0 0 0 connected\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>每个节点目前只能识别出自己的节点信息。我们启动6个节点，但每个节点彼此并不知道对方的存在，下面通过节点握手让6个节点彼此建立联系从而组成一个集群。</p>\n<h3 id=\"节点握手\"> 节点握手</h3>\n<p>节点握手是指一批运行在集群模式下的节点通过Gossip协议彼此通信，达到感知对方的过程。节点握手是集群彼此通信的第一步，由客户端发起命令：cluster meet{ip}{port}，如下图：</p>\n<p><img src=\"/images/redis4.png\" alt=\"avator\"></p>\n<p>图中执行的命令是：cluster meet127.0.0.16380让节点6379和6380节点进行握手通信。cluster meet命令是一个异步命令，执行之后立刻返回。内部发起与目标节点进行握手通信，如下图：</p>\n<p><img src=\"/images/redis5.png\" alt=\"avator\"></p>\n<p>1）节点6379本地创建6380节点信息对象，并发送meet消息。\n2）节点6380接受到meet消息后，保存6379节点信息并回复pong消息。\n3）之后节点6379和6380彼此定期通过ping/pong消息进行正常的节点通信。\n这里的meet、ping、pong消息是Gossip协议通信的载体，之后的节点通信部分做进一步介绍，它的主要作用是节点彼此交换状态数据信息。6379和6380节点通过meet命令彼此建立通信之后，集群结构如下图：</p>\n<p><img src=\"/images/redis6.png\" alt=\"avator\"></p>\n<p>对节点6379和6380分别执行cluster nodes命令，可以看到它们彼此已经感知到对方的存在。</p>\n<div><pre><code>127.0.0.1:6379&gt; cluster nodes\ncfb28ef1deee4e0fa78da86abe5d24566744411e 127.0.0.1:6379 myself,master - 0 0\n0 connected\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 127.0.0.1:6380 master - 0 1468073534265\n1 connected\n127.0.0.1:6380&gt; cluster nodes\ncfb28ef1deee4e0fa78da86abe5d24566744411e 127.0.0.1:6379 master - 0 1468073571641\n0 connected\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 127.0.0.1:6380 myself,master - 0 0\n1 connected\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>下面分别执行meet命令让其他节点加入到集群中：</p>\n<div><pre><code>127.0.0.1:6379&gt;cluster meet 127.0.0.1 6381\n127.0.0.1:6379&gt;cluster meet 127.0.0.1 6382\n127.0.0.1:6379&gt;cluster meet 127.0.0.1 6383\n127.0.0.1:6379&gt;cluster meet 127.0.0.1 6384\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>我们只需要在集群内任意节点上执行cluster meet命令加入新节点，握手状态会通过消息在集群内传播，这样其他节点会自动发现新节点并发起握手流程。最后执行cluster nodes命令确认6个节点都彼此感知并组成集群：</p>\n<div><pre><code>127.0.0.1:6379&gt; cluster nodes\n4fa7eac4080f0b667ffeab9b87841da49b84a6e4 127.0.0.1:6384 master - 0 1468073975551\n5 connected\ncfb28ef1deee4e0fa78da86abe5d24566744411e 127.0.0.1:6379 myself,master - 0 0 0 connected\nbe9485a6a729fc98c5151374bc30277e89a461d8 127.0.0.1:6383 master - 0 1468073978579\n4 connected\n40622f9e7adc8ebd77fca0de9edfe691cb8a74fb 127.0.0.1:6382 master - 0 1468073980598\n3 connected\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 127.0.0.1:6380 master - 0 1468073974541\n1 connected\n40b8d09d44294d2e23c7c768efc8fcd153446746 127.0.0.1:6381 master - 0 1468073979589\n2 connected\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>节点建立握手之后集群还不能正常工作，这时集群处于下线状态，所有的数据读写都被禁止。通过如下命令可以看到：</p>\n<div><pre><code>127.0.0.1:6379&gt; set hello redis\n(error) CLUSTERDOWN The cluster is down\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>通过cluster info命令可以获取集群当前状态：</p>\n<div><pre><code>127.0.0.1:6379&gt; cluster info\ncluster_state:fail\ncluster_slots_assigned:0\ncluster_slots_ok:0\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:0\n...\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>从输出内容可以看到，被分配的槽（cluster_slots_assigned）是0，由于目前所有的槽没有分配到节点，因此集群无法完成槽到节点的映射。只有当16384个槽全部分配给节点后，集群才进入在线状态。</p>\n<h3 id=\"分配槽\"> 分配槽</h3>\n<p>Redis集群把所有的数据映射到16384个槽中。每个key会映射为一个固定的槽，只有当节点分配了槽，才能响应和这些槽关联的键命令。通过cluster addslots命令为节点分配槽。这里利用bash特性批量设置槽（slots），命令如下：</p>\n<div><pre><code>redis-cli -h 127.0.0.1 -p 6379 cluster addslots {0...5461}\nredis-cli -h 127.0.0.1 -p 6380 cluster addslots {5462...10922}\nredis-cli -h 127.0.0.1 -p 6381 cluster addslots {10923...16383}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>把16384个slot平均分配给6379、6380、6381三个节点。执行cluster info查看集群状态，如下所示：</p>\n<div><pre><code>127.0.0.1:6379&gt; cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:5\ncluster_my_epoch:0\ncluster_stats_messages_sent:4874\ncluster_stats_messages_received:4726\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>当前集群状态是OK，集群进入在线状态。所有的槽都已经分配给节点，执行cluster nodes命令可以看到节点和槽的分配关系：</p>\n<div><pre><code>127.0.0.1:6379&gt; cluster nodes\n4fa7eac4080f0b667ffeab9b87841da49b84a6e4 127.0.0.1:6384 master - 0 1468076240123\n5 connected\ncfb28ef1deee4e0fa78da86abe5d24566744411e 127.0.0.1:6379 myself,master - 0 0 0 connected\n0-5461\nbe9485a6a729fc98c5151374bc30277e89a461d8 127.0.0.1:6383 master - 0 1468076239622\n4 connected\n40622f9e7adc8ebd77fca0de9edfe691cb8a74fb 127.0.0.1:6382 master - 0 1468076240628\n3 connected\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 127.0.0.1:6380 master - 0 1468076237606\n1 connected\n5462-10922\n40b8d09d44294d2e23c7c768efc8fcd153446746 127.0.0.1:6381 master - 0 1468076238612\n2 connected\n10923-16383\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>目前还有三个节点没有使用，作为一个完整的集群，每个负责处理槽的节点应该具有从节点，保证当它出现故障时可以自动进行故障转移。集群模式下，Reids节点角色分为主节点和从节点。首次启动的节点和被分配槽的节点都是主节点，从节点负责复制主节点槽信息和相关的数据。使用cluster replicate {nodeId}命令让一个节点成为从节点。其中命令执行必须在对应的从节点上执行，nodeId是要复制主节点的节点ID，命令如下：</p>\n<div><pre><code>127.0.0.1:6382&gt;cluster replicate cfb28ef1deee4e0fa78da86abe5d24566744411e\nOK\n127.0.0.1:6383&gt;cluster replicate 8e41673d59c9568aa9d29fb174ce733345b3e8f1\nOK\n127.0.0.1:6384&gt;cluster replicate 40b8d09d44294d2e23c7c768efc8fcd153446746\nOK\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>Redis集群模式下的主从复制使用了之前介绍的Redis复制流程，依然支持全量和部分复制。复制（replication）完成后，整个集群的结构如下图：</p>\n<p><img src=\"/images/redis7.png\" alt=\"avator\"></p>\n<p>通过cluster nodes命令查看集群状态和复制关系，如下所示：</p>\n<div><pre><code>127.0.0.1:6379&gt; cluster nodes\n4fa7eac4080f0b667ffeab9b87841da49b84a6e4 127.0.0.1:6384 slave 40b8d09d44294d2e2\n3c7c768efc8fcd153446746 0 1468076865939 5 connected\ncfb28ef1deee4e0fa78da86abe5d24566744411e 127.0.0.1:6379 myself,master - 0 0 0 connected\n0-5461\nbe9485a6a729fc98c5151374bc30277e89a461d8 127.0.0.1:6383 slave 8e41673d59c9568aa\n9d29fb174ce733345b3e8f1 0 1468076868966 4 connected\n40622f9e7adc8ebd77fca0de9edfe691cb8a74fb 127.0.0.1:6382 slave cfb28ef1deee4e0fa\n78da86abe5d24566744411e 0 1468076869976 3 connected\n8e41673d59c9568aa9d29fb174ce733345b3e8f1 127.0.0.1:6380 master - 0 1468076870987 1\nconnected 5462-10922\n40b8d09d44294d2e23c7c768efc8fcd153446746 127.0.0.1:6381 master - 0 1468076867957 2\nconnected 10923-16383\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>目前为止，我们依照Redis协议手动建立一个集群。它由6个节点构成，3个主节点负责处理槽和相关数据，3个从节点负责故障转移。手动搭建集群便于理解集群建立的流程和细节，不过读者也从中发现集群搭建需要很多步骤，当集群节点众多时，必然会加大搭建集群的复杂度和运维成本。因此Redis官方提供了redis-trib.rb工具方便我们快速搭建集群。</p>\n<h3 id=\"用redis-trib-rb搭建集群\"> 用redis-trib.rb搭建集群</h3>\n<p>redis-trib.rb是采用Ruby实现的Redis集群管理工具。内部通过Cluster相关命令帮我们简化集群创建、检查、槽迁移和均衡等常见运维操作，使用之前需要安装Ruby依赖环境。下面介绍搭建集群的详细步骤。</p>\n<p>1.Ruby环境准备</p>\n<p>安装Ruby：</p>\n<div><pre><code>--  下载 ruby\nwget https:// cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz\n--  安装 ruby\ntar xvf ruby-2.3.1.tar.gz\n./configure -prefix=/usr/local/ruby\nmake\nmake install\ncd /usr/local/ruby\nsudo cp bin/ruby /usr/local/bin\nsudo cp bin/gem /usr/local/bin\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>安装rubygem redis依赖：</p>\n<div><pre><code>wget http:// rubygems.org/downloads/redis-3.3.0.gem\ngem install -l redis-3.3.0.gem\ngem list --check redis gem\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>安装redis-trib.rb：</p>\n<div><pre><code>sudo cp /{redis_home}/src/redis-trib.rb /usr/local/bin\n</code></pre>\n<div><span>1</span><br></div></div><p>安装完Ruby环境后，执行redis-trib.rb命令确认环境是否正确，输出如下：</p>\n<div><pre><code># redis-trib.rb\nUsage: redis-trib &lt;command&gt; &lt;options&gt; &lt;arguments ...&gt;\ncreate host1:port1 ... hostN:portN\n--replicas &lt;arg&gt;\ncheck host:port\ninfo host:port\nfix host:port\n--timeout &lt;arg&gt;\nreshard host:port\n--from &lt;arg&gt;\n--to &lt;arg&gt;\n--slots &lt;arg&gt;\n--yes\n--timeout &lt;arg&gt;\n--pipeline &lt;arg&gt;\n... 忽略 ...\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>从redis-trib.rb的提示信息可以看出，它提供了集群创建、检查、修复、均衡等命令行工具。这里我们关注集群创建命令，使用redis-trib.rb create命令可快速搭建集群。</p>\n<p>2.准备节点</p>\n<p>首先我们跟之前内容一样准备好节点配置并启动：</p>\n<div><pre><code>redis-server conf/redis-6481.conf\nredis-server conf/redis-6482.conf\nredis-server conf/redis-6483.conf\nredis-server conf/redis-6484.conf\nredis-server conf/redis-6485.conf\nredis-server conf/redis-6486.conf\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>3.创建集群</p>\n<p>启动好6个节点之后，使用redis-trib.rb create命令完成节点握手和槽分配过程，命令如下：</p>\n<div><pre><code>redis-trib.rb create --replicas 1 127.0.0.1:6481 127.0.0.1:6482 127.0.0.1:6483 127.0.0.1:6484 127.0.0.1:6485 127.0.0.1:6486\n</code></pre>\n<div><span>1</span><br></div></div><p>--replicas参数指定集群中每个主节点配备几个从节点，这里设置为1。</p>\n<p>我们出于测试目的使用本地IP地址127.0.0.1，如果部署节点使用不同的IP地址，redis-trib.rb会尽可能保证主从节点不分配在同一机器下，因此会重新排序节点列表顺序。节点列表顺序用于确定主从角色，先主节点之后是从节点。创建过程中首先会给出主从节点角色分配的计划，如下所示。</p>\n<div><pre><code>&gt;&gt;&gt; Creating cluster\n&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...\nUsing 3 masters:\n127.0.0.1:6481\n127.0.0.1:6482\n127.0.0.1:6483\nAdding replica 127.0.0.1:6484 to 127.0.0.1:6481\nAdding replica 127.0.0.1:6485 to 127.0.0.1:6482\nAdding replica 127.0.0.1:6486 to 127.0.0.1:6483\nM: 869de192169c4607bb886944588bc358d6045afa 127.0.0.1:6481\nslots:0-5460 (5461 slots) master\nM: 6f9f24923eb37f1e4dce1c88430f6fc23ad4a47b 127.0.0.1:6482\nslots:5461-10922 (5462 slots) master\nM: 6228a1adb6c26139b0adbe81828f43a4ec196271 127.0.0.1:6483\nslots:10923-16383 (5461 slots) master\nS: 22451ea81fac73fe7a91cf051cd50b2bf308c3f3 127.0.0.1:6484\nreplicates 869de192169c4607bb886944588bc358d6045afa\nS: 89158df8e62958848134d632e75d1a8d2518f07b 127.0.0.1:6485\nreplicates 6f9f24923eb37f1e4dce1c88430f6fc23ad4a47b\nS: bcb394c48d50941f235cd6988a40e469530137af 127.0.0.1:6486\nreplicates 6228a1adb6c26139b0adbe81828f43a4ec196271\nCan I set the above configuration (type &#39;yes&#39; to accept):\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>当我们同意这份计划之后输入yes，redis-trib.rb开始执行节点握手和槽分配操作，输出如下：</p>\n<div><pre><code>&gt;&gt;&gt; Nodes configuration updated\n&gt;&gt;&gt; Assign a different config epoch to each node\n&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster\nWaiting for the cluster to join..\n&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6481)\n... 忽略 ...\n[OK] All nodes agree about slots configuration.\n&gt;&gt;&gt; Check for open slots...\n&gt;&gt;&gt; Check slots coverage...\n[OK] All 16384 slots covered.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>最后的输出报告说明：16384个槽全部被分配，集群创建成功。这里需要注意给redis-trib.rb的节点地址必须是不包含任何槽/数据的节点，否则会拒绝创建集群。</p>\n<p>4.集群完整性检查</p>\n<p>集群完整性指所有的槽都分配到存活的主节点上，只要16384个槽中有一个没有分配给节点则表示集群不完整。可以使用redis-trib.rb check命令检测之前创建的两个集群是否成功，check命令只需要给出集群中任意一个节点地址就可以完成整个集群的检查工作，命令如下：</p>\n<div><pre><code>redis-trib.rb check 127.0.0.1:6379\nredis-trib.rb check 127.0.0.1:6481\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>当最后输出如下信息，提示集群所有的槽都已分配到节点：</p>\n<div><pre><code>[OK] All nodes agree about slots configuration.\n&gt;&gt;&gt; Check for open slots...\n&gt;&gt;&gt; Check slots coverage...\n[OK] All 16384 slots covered.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"节点通信\"> 节点通信</h2>\n<h3 id=\"通信流程\"> 通信流程</h3>\n<p>在分布式存储中需要提供维护节点元数据信息的机制，所谓元数据是指：节点负责哪些数据，是否出现故障等状态信息。常见的元数据维护方式分为：集中式和P2P方式。Redis集群采用P2P的Gossip（流言）协议，Gossip协议工作原理就是节点彼此不断通信交换信息，一段时间后所有的节点都会知道集群完整的信息，这种方式类似流言传播，如下图：</p>\n<p><img src=\"/images/redis8.png\" alt=\"avator\"></p>\n<p>通信过程说明：\n1）集群中的每个节点都会单独开辟一个TCP通道，用于节点之间彼此通信，通信端口号在基础端口上加10000。</p>\n<p>2）每个节点在固定周期内通过特定规则选择几个节点发送ping消息。</p>\n<p>3）接收到ping消息的节点用pong消息作为响应。</p>\n<p>集群中每个节点通过一定规则挑选要通信的节点，每个节点可能知道全部节点，也可能仅知道部分节点，只要这些节点彼此可以正常通信，最终它们会达到一致的状态。当节点出故障、新节点加入、主从角色变化、槽信息变更等事件发生时，通过不断的ping/pong消息通信，经过一段时间后所有的节点都会知道整个集群全部节点的最新状态，从而达到集群状态同步的目的。</p>\n<h3 id=\"gossip消息\"> Gossip消息</h3>\n<p>Gossip协议的主要职责就是信息交换。信息交换的载体就是节点彼此发送的Gossip消息，了解这些消息有助于我们理解集群如何完成信息交换。</p>\n<p>常用的Gossip消息可分为：ping消息、pong消息、meet消息、fail消息\n等，它们的通信模式如下图：</p>\n<p><img src=\"/images/redis9.png\" alt=\"avator\"></p>\n<p>​\t·meet消息：用于通知新节点加入。消息发送者通知接收者加入到当前集群，meet消息通信正常完成后，接收节点会加入到集群中并进行周期性的ping、pong消息交换。</p>\n<p>​\t·ping消息：集群内交换最频繁的消息，集群内每个节点每秒向多个其他节点发送ping消息，用于检测节点是否在线和交换彼此状态信息。ping消息发送封装了自身节点和部分其他节点的状态数据。</p>\n<p>​\t·pong消息：当接收到ping、meet消息时，作为响应消息回复给发送方确认消息正常通信。pong消息内部封装了自身状态数据。节点也可以向集群内广播自身的pong消息来通知整个集群对自身状态进行更新。</p>\n<p>​\t·fail消息：当节点判定集群内另一个节点下线时，会向集群内广播一个fail消息，其他节点接收到fail消息之后把对应节点更新为下线状态。</p>\n<p>所有的消息格式划分为：消息头和消息体。消息头包含发送节点自身状态数据，接收节点根据消息头就可以获取到发送节点的相关数据，结构如下：</p>\n<div><pre><code>typedef struct {\nchar sig[4]; /*  信号标示 */\nuint32_t totlen; /*  消息总长度 */\nuint16_t ver; /*  协议版本 */\nuint16_t type; /*  消息类型 , 用于区分 meet,ping,pong 等消息 */\nuint16_t count; /*  消息体包含的节点数量，仅用于 meet,ping,ping 消息类型 */\nuint64_t currentEpoch; /*  当前发送节点的配置纪元 */\nuint64_t configEpoch; /*  主节点 / 从节点的主节点配置纪元 */\nuint64_t offset; /*  复制偏移量 */\nchar sender[CLUSTER_NAMELEN]; /*  发送节点的 nodeId */\nunsigned char myslots[CLUSTER_SLOTS/8]; /*  发送节点负责的槽信息 */\nchar slaveof[CLUSTER_NAMELEN]; /*  如果发送节点是从节点，记录对应主节点的 nodeId */\nuint16_t port; /*  端口号 */\nuint16_t flags; /*  发送节点标识 , 区分主从角色，是否下线等 */\nunsigned char state; /*  发送节点所处的集群状态 */\nunsigned char mflags[3]; /*  消息标识 */\nunion clusterMsgData data /*  消息正文 */;\n} clusterMsg;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>集群内所有的消息都采用相同的消息头结构clusterMsg，它包含了发送节点关键信息，如节点id、槽映射、节点标识（主从角色，是否下线）等。消息体在Redis内部采用clusterMsgData结构声明，结构如下：</p>\n<div><pre><code>union clusterMsgData {\n/* ping,meet,pong 消息体 */\nstruct {\n/* gossip 消息结构数组 */\nclusterMsgDataGossip gossip[1];\n} ping;\n/* FAIL  消息体 */\nstruct {\nclusterMsgDataFail about;\n} fail;\n// ...\n};\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>当接收到ping、meet消息时，接收节点会解析消息内容并根据自身的识\n别情况做出相应处理，对应流程如下图：</p>\n<p><img src=\"/images/redis10.png\" alt=\"avator\"></p>\n<p><img src=\"/images/redis11.png\" alt=\"avator\"></p>\n<p>接收节点收到ping/meet消息时，执行解析消息头和消息体流程：\n​\t·解析消息头过程：消息头包含了发送节点的信息，如果发送节点是新节点且消息是meet类型，则加入到本地节点列表；如果是已知节点，则尝试更新发送节点的状态，如槽映射关系、主从角色等状态。</p>\n<p>​\t·解析消息体过程：如果消息体的clusterMsgDataGossip数组包含的节点是新节点，则尝试发起与新节点的meet握手流程；如果是已知节点，则根据cluster MsgDataGossip中的flags字段判断该节点是否下线，用于故障转移。\n​\t消息处理完后回复pong消息，内容同样包含消息头和消息体，发送节点接收到回复的pong消息后，采用类似的流程解析处理消息并更新与接收节点最后通信时间，完成一次消息通信。</p>\n<h3 id=\"节点选择\"> 节点选择</h3>\n<p>虽然Gossip协议的信息交换机制具有天然的分布式特性，但它是有成本的。由于内部需要频繁地进行节点信息交换，而ping/pong消息会携带当前节点和部分其他节点的状态数据，势必会加重带宽和计算的负担。Redis集群内节点通信采用固定频率（定时任务每秒执行10次）。因此节点每次选择需要通信的节点列表变得非常重要。通信节点选择过多虽然可以做到信息及时交换但成本过高。节点选择过少会降低集群内所有节点彼此信息交换频率，从而影响故障判定、新节点发现等需求的速度。因此Redis集群的Gossip协议需要兼顾信息交换实时性和成本开销，通信节点选择的规则如下图：</p>\n<p><img src=\"/images/redis12.png\" alt=\"avator\"></p>\n<p>​\t根据通信节点选择的流程可以看出消息交换的成本主要体现在单位时间\n选择发送消息的节点数量和每个消息携带的数据量。</p>\n<p>1.选择发送消息的节点数量\n​\t集群内每个节点维护定时任务默认每秒执行10次，每秒会随机选取5个节点找出最久没有通信的节点发送ping消息，用于保证Gossip信息交换的随机性。每100毫秒都会扫描本地节点列表，如果发现节点最近一次接受pong消息的时间大于cluster_node_timeout/2，则立刻发送ping消息，防止该节点信息太长时间未更新。根据以上规则得出每个节点每秒需要发送ping消息的数量=1+10*num（node.pong_received&gt;cluster_node_timeout/2），因此cluster_node_timeout参数对消息发送的节点数量影响非常大。当我们的带宽资源紧张时，可以适当调大这个参数，如从默认15秒改为30秒来降低带宽占用率。过度调大cluster_node_timeout会影响消息交换的频率从而影响故障转移、槽信息更新、新节点发现的速度。因此需要根据业务容忍度和资源消耗进行平衡。同时整个集群消息总交换量也跟节点数成正比。\n2.消息数据量\n​\t每个ping消息的数据量体现在消息头和消息体中，其中消息头主要占用空间的字段是myslots[CLUSTER_SLOTS/8]，占用2KB，这块空间占用相对固定。消息体会携带一定数量的其他节点信息用于信息交换。具体数量见以下伪代码：</p>\n<div><pre><code>def get_wanted():\nint total_size = size(cluster.nodes)\n#  默认包含节点总量的 1/10\nint wanted = floor(total_size/10);\nif wanted &lt; 3:\n#  至少携带 3 个其他节点信息\nwanted = 3;\nif wanted &gt; total_size -2 :\n#  最多包含 total_size - 2 个\nwanted = total_size - 2;\nreturn wanted;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>根据伪代码可以看出消息体携带数据量跟集群的节点数息息相关，更大的集群每次消息通信的成本也就更高，因此对于Redis集群来说并不是大而全的集群更好，对于集群规模控制的建议见后续集群详解。</p>\n<h2 id=\"集群伸缩\"> 集群伸缩</h2>\n<h3 id=\"伸缩原理\"> 伸缩原理</h3>\n<p>Redis集群提供了灵活的节点扩容和收缩方案。在不影响集群对外服务的情况下，可以为集群添加节点进行扩容也可以下线部分节点进行缩容，如下图</p>\n<p><img src=\"/images/redis13.png\" alt=\"avator\"></p>\n<p>从上图看出，Redis集群可以实现对节点的灵活上下线控制。其中原理可抽象为槽和对应数据在不同节点之间灵活移动。首先来看我们之前搭建的集群槽和数据与节点的对应关系，如下图：</p>\n<p><img src=\"/images/redis14.png\" alt=\"avator\"></p>\n<p><img src=\"/images/redis15.png\" alt=\"avator\"></p>\n<p>三个主节点分别维护自己负责的槽和对应的数据，如果希望加入1个节点实现集群扩容时，需要通过相关命令把一部分槽和数据迁移给新节点，如下图：</p>\n<p><img src=\"/images/redis16.png\" alt=\"avator\"></p>\n<p>图中每个节点把一部分槽和数据迁移到新的节点6385，每个节点负责的槽和数据相比之前变少了从而达到了集群扩容的目的。这里我们故意忽略了槽和数据在节点之间迁移的细节，目的是想让读者重点关注在上层槽和节点分配上来，理解集群的水平伸缩的上层原理：集群伸缩=槽和数据在节点之间的移动，下面将介绍集群扩容和收缩的细节。</p>\n<h3 id=\"扩容集群\"> 扩容集群</h3>\n<p>​\t扩容是分布式存储最常见的需求，Redis集群扩容操作可分为如下步\n骤：\n1）准备新节点。\n2）加入集群。\n3）迁移槽和数据。</p>\n<p>1.准备新节点\n需要提前准备好新节点并运行在集群模式下，新节点建议跟集群内的节点配置保持一致，便于管理统一。准备好配置后启动两个节点命令如下：</p>\n<div><pre><code>redis-server conf/redis-6385.conf\nredis-server conf/redis-6386.conf\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>启动后的新节点作为孤儿节点运行，并没有其他节点与之通信.</p>\n<p>2.加入集群\n新节点依然采用cluster meet命令加入到现有集群中。在集群内任意节点\n执行cluster meet命令让6385和6386节点加入进来，命令如下：</p>\n<div><pre><code>127.0.0.1:6379&gt; cluster meet 127.0.0.1 6385\n127.0.0.1:6379&gt; cluster meet 127.0.0.1 6386\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>集群内新旧节点经过一段时间的ping/pong消息通信之后，所有节点会发现新节点并将它们的状态保存到本地。例如我们在6380节点上执行cluster nodes命令可以看到新节点信息，如下所示：</p>\n<div><pre><code>127.0.0.1:6380&gt;cluster ndoes\n1a205dd8b2819a00dd1e8b6be40a8e2abe77b756 127.0.0.1:6385 master - 0 1469347800759\n7 connected\n475528b1bcf8e74d227104a6cf1bf70f00c24aae 127.0.0.1:6386 master - 0 1469347798743\n8 connected\n...\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>​\t新节点刚开始都是主节点状态，但是由于没有负责的槽，所以不能接受任何读写操作。对于新节点的后续操作我们一般有两种选择：\n​\t·为它迁移槽和数据实现扩容。\n​\t·作为其他主节点的从节点负责故障转移。</p>\n<p>​\tredis-trib.rb工具也实现了为现有集群添加新节点的命令，还实现了直接\n添加为从节点的支持，命令如下：</p>\n<div><pre><code>redis-trib.rb add-node new_host:new_port existing_host:existing_port --slave\n--master-id &lt;arg&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>​\t内部同样采用cluster meet命令实现加入集群功能。对于之前的加入集群操作，我们可以采用如下命令实现新节点加入：</p>\n<div><pre><code>redis-trib.rb add-node 127.0.0.1:6385 127.0.0.1:6379\nredis-trib.rb add-node 127.0.0.1:6386 127.0.0.1:6379\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>运维提示</p>\n<p>​\t正式环境建议使用redis-trib.rb add-node命令加入新节点，该命令内部会执行新节点状态检查，如果新节点已经加入其他集群或者包含数据，则放弃集群加入操作并打印如下信息：</p>\n<div><pre><code>[ERR] Node 127.0.0.1:6385 is not empty. Either the node already knows other\nnodes (check with CLUSTER NODES) or contains some key in database 0.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>如果我们手动执行cluster meet命令加入已经存在于其他集群的节点，会造成被加入节点的集群合并到现有集群的情况，从而造成数据丢失和错乱，后果非常严重，线上谨慎操作。</p>\n<p>3.迁移槽和数据\n​\t加入集群后需要为新节点迁移槽和相关数据，槽在迁移过程中集群可以正常提供读写服务，迁移过程是集群扩容最核心的环节，下面详细讲解。\n​\t（1）槽迁移计划\n​\t槽是Redis集群管理数据的基本单位，首先需要为新节点制定槽的迁移计划，确定原有节点的哪些槽需要迁移到新节点。迁移计划需要确保每个节点负责相似数量的槽，从而保证各节点的数据均匀。例如，在集群中加入6385节点，如图10-21所示。加入6385节点后，原有节点负责的槽数量从6380变为4096个。</p>\n<p>槽迁移计划确定后开始逐个把槽内数据从源节点迁移到目标节点，如下图：</p>\n<p><img src=\"/images/redis17.png\" alt=\"avator\"></p>\n",
      "image": "https://vuepress-theme-hope-demo.mrhope.site/images/redis1.png",
      "date_published": "2017-09-16T21:00:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "docker搭建redis集群",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/Redis-2/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/Redis-2/",
      "content_html": "<p>docker搭建redis集群</p>\n\n<h2 id=\"下载镜像\"> 下载镜像</h2>\n<div><pre><code>docker pull redis\n</code></pre>\n<div><span>1</span><br></div></div><h2 id=\"准备配置文件\"> 准备配置文件</h2>\n<div><pre><code>mkdir /home/docker/redis/  \nwget https://raw.githubusercontent.com/antirez/redis/3.0/redis.conf -O /home/docker/redis/redis.conf\ncd /home/docker/redis/  \nsed -i &#39;s/# slaveof &lt;masterip&gt; &lt;masterport&gt;/slaveof redis-master 6379/g&#39; redis.conf  \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"启动redis容器\"> 启动redis容器</h2>\n<div><pre><code>docker run --name redis-master -p 6379:6379 -d redis\ndocker run --link redis-master:redis-master -v /home/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf --name redis-slave1 -d redis redis-server /usr/local/etc/redis/redis.conf\ndocker run --link redis-master:redis-master -v /home/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf --name redis-slave2 -d redis redis-server /usr/local/etc/redis/redis.conf\ndocker run --link redis-master:redis-master -v /home/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf --name redis-slave3 -d redis redis-server /usr/local/etc/redis/redis.conf \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"查看redis集群\"> 查看redis集群</h2>\n<div><pre><code>redis-cli \n127.0.0.1:6379&gt; info\n# Server\nredis_version:3.0.6\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:48bba53ba79f07ac\nredis_mode:standalone\nos:Linux 3.13.0-27-generic x86_64\narch_bits:64\nmultiplexing_api:epoll\ngcc_version:4.9.2\nprocess_id:1\nrun_id:6d552d47e50137b6ee40697d7254891aa5dbdb68\ntcp_port:6379\nuptime_in_seconds:21554\nuptime_in_days:0\nhz:10\nlru_clock:10637013\nconfig_file:\n\n# Clients\nconnected_clients:1\nclient_longest_output_list:0\nclient_biggest_input_buf:0\nblocked_clients:0\n\n# Memory\nused_memory:1926248\nused_memory_human:1.84M\nused_memory_rss:4419584\nused_memory_peak:1963096\nused_memory_peak_human:1.87M\nused_memory_lua:36864\nmem_fragmentation_ratio:2.29\nmem_allocator:jemalloc-3.6.0\n\n# Persistence\nloading:0\nrdb_changes_since_last_save:0\nrdb_bgsave_in_progress:0\nrdb_last_save_time:1453456066\nrdb_last_bgsave_status:ok\nrdb_last_bgsave_time_sec:0\nrdb_current_bgsave_time_sec:-1\naof_enabled:0\naof_rewrite_in_progress:0\naof_rewrite_scheduled:0\naof_last_rewrite_time_sec:-1\naof_current_rewrite_time_sec:-1\naof_last_bgrewrite_status:ok\naof_last_write_status:ok\n\n# Stats\ntotal_connections_received:5\ntotal_commands_processed:64476\ninstantaneous_ops_per_sec:3\ntotal_net_input_bytes:2426080\ntotal_net_output_bytes:92455\ninstantaneous_input_kbps:0.14\ninstantaneous_output_kbps:0.02\nrejected_connections:0\nsync_full:3\nsync_partial_ok:0\nsync_partial_err:0\nexpired_keys:0\nevicted_keys:0\nkeyspace_hits:0\nkeyspace_misses:0\npubsub_channels:0\npubsub_patterns:0\nlatest_fork_usec:222\nmigrate_cached_sockets:0\n\n# Replication\nrole:master\nconnected_slaves:3\nslave0:ip=172.17.0.2,port=6379,state=online,offset=30087,lag=1\nslave1:ip=172.17.0.3,port=6379,state=online,offset=30101,lag=0\nslave2:ip=172.17.0.4,port=6379,state=online,offset=30087,lag=1\nmaster_repl_offset:30101\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:2\nrepl_backlog_histlen:30100\n\n# CPU\nused_cpu_sys:7.37\nused_cpu_user:5.34\nused_cpu_sys_children:0.00\nused_cpu_user_children:0.00\n\n# Cluster\ncluster_enabled:0\n\n# Keyspace\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br></div></div><p>转载链接：https://segmentfault.com/a/1190000004353368</p>\n",
      "date_published": "2017-09-17T21:00:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "sed命令详解",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/shell-sed/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/shell-sed/",
      "content_html": "<p>Let's learn the sed command together！</p>\n\n<h2 id=\"概述\"> 概述</h2>\n<p>sed是stream editor的简称，也就是流编辑器。它一次处理一行内容，处理是，当前处理的行存储在临时缓冲区中，成为“pattern space”,接着用sed命令处理缓冲区中的内容，处理完后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，知道文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p>\n<h2 id=\"语法\"> 语法</h2>\n<h3 id=\"命令格式\"> 命令格式</h3>\n<p>sed [option] 'command' input_file</p>\n<h3 id=\"常用选项\"> 常用选项</h3>\n<ul>\n<li>-n 使用安静silent模式。在一般sed的用法中，所有来自stdin的内容一般都会列出到屏幕上。但如果加上-n参数后，则只有经过sed特殊处理的那一行（或者动作）才会被列出来</li>\n<li>-e 进行多项编辑，即对输入行应用多条sed命令时使用</li>\n<li>-f 指定sed脚本的文件名</li>\n<li>-i 直接修改读取的文件内容，而不是由屏幕输出</li>\n<li>-r 让sed命令支持扩展的正则表达式（默认是基础正则表达式）</li>\n</ul>\n<h3 id=\"常用命令\"> 常用命令</h3>\n<ul>\n<li>\n<p><code>a\\</code>：追加行，<code>a\\</code>的后面跟上字符串<code>s</code>（多行字符串可以用<code>\\n</code>分隔），则会在当前选择的行的后面都加上字符串<code>s</code></p>\n</li>\n<li>\n<p><code>c\\：</code>替换行，<code>c\\</code>后面跟上字符串<code>s</code>（多行字符串可以用<code>\\n</code>分隔），则会将当前选中的行替换成字符串<code>s</code></p>\n</li>\n<li>\n<p><code>i\\</code>：插入行，<code>i\\</code>后面跟上字符串<code>s</code>(多行字符串可以用<code>\\n</code>分隔)，则会在当前选中的行的前面都插入字符串<code>s</code></p>\n</li>\n<li>\n<p><code>d</code>：删除行<code>delete</code>，该命令会将当前选中的行删除</p>\n</li>\n<li>\n<p><code>p</code>：打印<code>print</code>，该命令会打印当前选择的行到屏幕上</p>\n</li>\n<li>\n<p><code>y</code>：替换字符，通常<code>y</code>命令的用法是这样的：<code>y/Source-chars/Dest-chars/</code>，分割字符<code>/</code>可以用任意单字符代替，用<code>Dest-chars</code>中对应位置的字符替换掉<code>Soutce-chars</code>中对应位置的字符</p>\n</li>\n<li>\n<p><code>s</code>：替换字符串，通常<code>s</code>命令的用法是这样的：<code>1,$s/Regexp/Replacement/Flags</code>，分隔字符<code>/</code>可以用其他任意单字符代替，用<code>Replacement</code>替换掉匹配字符串</p>\n</li>\n</ul>\n<h3 id=\"替换选项\"> 替换选项</h3>\n<ul>\n<li>\n<p><code>\\digit</code>：<code>Replacement</code>中可含有后向引用中的<code>\\digit</code>(<code>digit</code>是<code>1</code>至<code>9</code>)，引用前面定义的子表达</p>\n</li>\n<li>\n<p><code>&amp;</code>：代表模版空间中的整个匹配部分</p>\n</li>\n<li>\n<p><code>\\L</code>：将在其后的替换部分转换成小写字母，直到发现一个<code>\\U</code>或<code>\\E</code>，<code>GNU</code>扩展功能</p>\n</li>\n<li>\n<p><code>\\l</code>：将下一个字符转换成小写字母，<code>GNU</code>扩展功能</p>\n</li>\n<li>\n<p><code>\\U</code>：将在其后的替换部分转换成大写字母，直到发现一个<code>\\L</code>或<code>\\E</code>，<code>GNU</code>扩展功能</p>\n</li>\n<li>\n<p><code>\\u</code>：将下一个字符转换成大写字母，<code>GNU</code>扩展功能</p>\n</li>\n<li>\n<p><code>\\E</code>：停止由<code>\\L</code>或<code>\\U</code>指示开始的大小写转换，<code>GNU</code>扩展功能</p>\n</li>\n</ul>\n<h3 id=\"标记选项\"> 标记选项</h3>\n<ul>\n<li>\n<p><code>g</code>：将用<code>Replacement</code>替换模版空间中所有匹配<code>Regexp</code>的部分，则不仅仅是第一个匹配部分</p>\n</li>\n<li>\n<p><code>digit</code>：只用<code>Replacement</code>替换模版空间中第<code>digit</code>(<code>digit</code>是<code>1</code>至<code>9</code>)个匹配<code>Regexp</code>的部分</p>\n</li>\n<li>\n<p><code>p</code>：若发生了替换操作，指示显示模版空间中新的数据</p>\n</li>\n<li>\n<p><code>w file-name</code>：若发生了替换操作，指示将模版空间中新的数据写入指定的文件<code>file-name</code>中</p>\n</li>\n<li>\n<p><code>i</code>：表示进行<code>Regexp</code>匹配时，是不区分大小写字母的</p>\n</li>\n</ul>\n<h2 id=\"示例\"> 示例</h2>\n<h3 id=\"a命令\"> <code>a</code>命令</h3>\n<ul>\n<li><code>sed '1,$a\\add one' test.txt</code> 从第一行到最后一行所有行后追加<code>&quot;add one&quot;</code>字符串行</li>\n<li><code>sed '/first/a\\add one' test.txt</code> 在匹配到<code>first</code>行追加<code>&quot;add one&quot;</code>字符串行</li>\n</ul>\n<h3 id=\"c命令\"> <code>c</code>命令</h3>\n<ul>\n<li>\n<p><code>sed '1,$c\\add one' test.txt</code> 从第一行到最后一行所有行替换为<code>&quot;add one&quot;</code>字符串行</p>\n</li>\n<li>\n<p><code>sed '/first/c\\add one' test.txt</code> 将匹配到<code>first</code>行替换为<code>&quot;add one&quot;</code>字符串行</p>\n</li>\n</ul>\n<h3 id=\"i命令\"> <code>i</code>命令</h3>\n<p>与<code>a</code>命令类似，只不过在匹配的行前面插入字符串行，不举例了。</p>\n<h3 id=\"d命令\"> <code>d</code>命令</h3>\n<ul>\n<li><code>sed '4,$d' test.txt</code> 从第四行到最后一行全部删除</li>\n</ul>\n<h3 id=\"p命令\"> <code>p</code>命令</h3>\n<ul>\n<li><code>sed -n '/^first.*end$/p' test.txt</code> 以<code>first</code>开头<code>end</code>结尾的所有行全部打印，<strong>-n选项</strong>和<strong>p命令</strong>一起使用表示只打印那些发生替换的行</li>\n</ul>\n<h3 id=\"s命令\"> <code>s</code>命令</h3>\n<ul>\n<li><code>sed 's/line/text/g' test.txt</code> 将所有行的<code>line</code>替换为<code>text</code>，<code>g</code>代表全局选项，没有<code>g</code>只替换所有行的第一个匹配项</li>\n<li><code>sed '/^first.*end$/s/line/text/g' test.txt</code> 匹配以<code>first</code>开头<code>end</code>结尾的所有行，然后将<code>line</code>全部替换为<code>text</code></li>\n<li><code>sed 's/\\(.*\\)line$/\\1/g' test.txt</code> 本例中的<code>\\(\\)</code>中包裹的内容表示正则表达式的第<code>n</code>部分，<code>.*</code>表示任意字符串，所以此例相当于删除所有行末的<code>line</code></li>\n<li><code>sed -i 's/book/books/g' test.txt</code> 直接编辑文件<strong>选项-i</strong>，会匹配file文件中每一行的第一个book替换为books</li>\n</ul>\n<h3 id=\"e命令\"> <code>e</code>命令</h3>\n<div><pre><code>sed -e &#39;1,5d&#39; -e &#39;s/test/check/&#39; file\n</code></pre>\n<div><span>1</span><br></div></div><p>上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</p>\n<h3 id=\"n命令\"> <code>n</code>命令</h3>\n<p>如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：</p>\n<div><pre><code>sed &#39;/test/{ n; s/aa/bb/; }&#39; file\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"q命令\"> <code>q</code>命令</h3>\n<p>打印完第10行后，退出sed</p>\n<div><pre><code>sed &#39;10q&#39; file\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"w命令\"> <code>w</code>命令</h3>\n<p>在example中所有包含test的行都被写入file里：</p>\n<div><pre><code>sed -n &#39;/test/w file&#39; example\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"已匹配字符串标记\"> 已匹配字符串标记&amp;</h3>\n<p>正则表达式 \\w+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：</p>\n<div><pre><code>echo this is a test line | sed &#39;s/\\w\\+/[&amp;]/g&#39;\n[this] [is] [a] [test] [line]\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>所有以192.168.0.1开头的行都会被替换成它自已加localhost：</p>\n<div><pre><code>sed &#39;s/^192.168.0.1/&amp;localhost/&#39; file\n192.168.0.1localhost\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"子串匹配标记-1\"> 子串匹配标记\\1</h3>\n<p>匹配给定样式的其中一部分：</p>\n<div><pre><code>echo this is digit 7 in a number | sed &#39;s/digit \\([0-9]\\)/\\1/&#39;\nthis is 7 in a number\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 <strong>\\1</strong>，依此类推匹配到的第二个结果就是 <strong>\\2</strong>，例如：</p>\n<div><pre><code>echo aaa BBB | sed &#39;s/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/&#39;\nBBB aaa\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>love被标记为1，所有loveable会被替换成lovers，并打印出来：</p>\n<div><pre><code>sed -n &#39;s/\\(love\\)able/\\1rs/p&#39; file\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"选定行的范围-逗号\"> 选定行的范围：,（逗号）</h3>\n<p>所有在模板test和check所确定的范围内的行都被打印：</p>\n<div><pre><code>sed -n &#39;/test/,/check/p&#39; file\n</code></pre>\n<div><span>1</span><br></div></div><p>打印从第5行开始到第一个包含以test开始的行之间的所有行：</p>\n<div><pre><code>sed -n &#39;5,/^test/p&#39; file\n</code></pre>\n<div><span>1</span><br></div></div><p>对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：</p>\n<div><pre><code>sed &#39;/test/,/west/s/$/aaa bbb/&#39; file\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"打印奇数行或偶数行\"> 打印奇数行或偶数行</h3>\n<p>方法1：</p>\n<div><pre><code>sed -n &#39;p;n&#39; test.txt  #奇数行\nsed -n &#39;n;p&#39; test.txt  #偶数行\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>方法2：</p>\n<div><pre><code>sed -n &#39;1~2p&#39; test.txt  #奇数行\nsed -n &#39;2~2p&#39; test.txt  #偶数行\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h2 id=\"基本正则表达式\"> 基本正则表达式</h2>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*</code></td>\n<td>将<code>*</code>前面的正则表达式匹配的结果重复任意次(含<code>0</code>次)。</td>\n</tr>\n<tr>\n<td><code>\\+</code></td>\n<td>与星号(<code>*</code>)相同，只是至少重复<code>1</code>次，<code>GNU</code>的扩展功能。</td>\n</tr>\n<tr>\n<td><code>\\?</code></td>\n<td>与星号(<code>*</code>)相同，只是最多重复<code>1</code>次，<code>GNU</code>的扩展功能。</td>\n</tr>\n<tr>\n<td><code>\\{i\\}</code></td>\n<td>与星号(<code>*</code>)相同，只是重复指定的<code>i</code>次。</td>\n</tr>\n<tr>\n<td><code>\\{i,j\\}</code></td>\n<td>与星号(<code>*</code>)相同，只是重复<code>i</code>至<code>j</code>次。</td>\n</tr>\n<tr>\n<td><code>\\{i, \\}</code></td>\n<td>与星号(<code>*</code>)相同，只是至少重复<code>i</code>次。</td>\n</tr>\n<tr>\n<td><code>\\(regexp\\)</code></td>\n<td>将<code>regexp</code>看作一个整体，用于后向引用，与<code>\\digit</code>配合使用。</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>匹配任意单个字符。</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>匹配模版空间开始处的<code>NULL</code>字符串。</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配的是模版空间结束处的<code>NULL</code>字符串。</td>\n</tr>\n<tr>\n<td><code>[list]</code></td>\n<td>匹配方括号中的字符列表中的任意一个。</td>\n</tr>\n<tr>\n<td><code>[^list]</code></td>\n<td>否定匹配方括号中的字符列表中的任意一个。</td>\n</tr>\n<tr>\n<td><code>regexp1\\|regexp2</code></td>\n<td>用在相邻的正则表达式之间，表示匹配这些正则表达式中任一个都可以。匹配是从左向右开始的，一旦匹配成功就停止匹配。</td>\n</tr>\n<tr>\n<td><code>regexp1regexp2</code></td>\n<td>匹配<code>regexp1</code>和<code>regexp2</code>的连接结果。</td>\n</tr>\n<tr>\n<td><code>\\digit</code></td>\n<td>匹配正则表达式前半部分定义的后向引用的第<code>digit</code>个子表达式。<code>digit</code>为<code>1</code>至<code>9</code>的数字, <code>1</code>为从左开始。</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>匹配换行符。</td>\n</tr>\n<tr>\n<td><code>\\meta</code></td>\n<td>将元字符<code>meta</code>转换成普通字符，以便匹配该字符本身，有<code>$</code>、 <code>*</code>、 <code>.</code>、 <code>[</code>、 <code>\\</code> 和 <code>^</code>。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"扩展正则表达式\"> 扩展正则表达式</h2>\n<p>扩展正则表达式除了以下元字符与基本正则表达式不同外，其余相似。</p>\n<table>\n<thead>\n<tr>\n<th>基本正则表达式</th>\n<th>扩展正则表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\?</code></td>\n<td><code>?</code></td>\n</tr>\n<tr>\n<td><code>\\+</code></td>\n<td><code>+</code></td>\n</tr>\n<tr>\n<td><code>\\|</code></td>\n<td><code>|</code></td>\n</tr>\n<tr>\n<td><code>\\{ \\}</code></td>\n<td><code>{ }</code></td>\n</tr>\n<tr>\n<td><code>\\( \\)</code></td>\n<td><code>( )</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常用转义字符\"> 常用转义字符</h2>\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\a</code></td>\n<td>匹配一个<code>BEL</code>字符。</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>匹配一个换页字符。</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>匹配一个换行字符。</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>匹配一个回车字符。</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>匹配一个水平<code>Tab</code>字符。</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>匹配一个垂直<code>Tab</code>字符。</td>\n</tr>\n<tr>\n<td><code>\\cX</code></td>\n<td>匹配<code>Control+X</code>，<code>X</code>是任意字符。</td>\n</tr>\n<tr>\n<td><code>\\dXXX</code></td>\n<td>匹配一个<code>ASCII</code>码是十进制<code>XXX</code>的字符。</td>\n</tr>\n<tr>\n<td><code>\\oXXX</code></td>\n<td>匹配一个<code>ASCII</code>码是八进制<code>XXX</code>的字符。</td>\n</tr>\n<tr>\n<td><code>\\xXX</code></td>\n<td>匹配一个<code>ASCII</code>码是十六进制<code>XX</code>的字符。</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配任意一个单词字符(字母、数字和下划线)。</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配任意一个非单词字符。</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>匹配一个单词的边界符：字符的左边是一个单词字符，并且右边是一个非单词字符，反之亦然。</td>\n</tr>\n<tr>\n<td><code>\\B</code></td>\n<td>匹配除单词边界符外所有字符：字符的左边和右边同时是单词字符或非单词字符。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考文章\"> 参考文章</h2>\n<p>https://qianngchn.github.io/wiki/4.html#s%E5%91%BD%E4%BB%A4</p>\n<p>http://man.linuxde.net/sed</p>\n<p>https://www.cnblogs.com/edwardlost/archive/2010/09/17/1829145.html</p>\n",
      "date_published": "2017-09-24T21:00:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "keepalived详解",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/%E9%9B%86%E7%BE%A4-keepalived/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/%E9%9B%86%E7%BE%A4-keepalived/",
      "content_html": "<p>Let’s learn keepalived together！</p>\n\n<h2 id=\"keepalived介绍\"> keepalived介绍</h2>\n<p>keepalived观察其名可知，保持存活，在网络里面就是保持在线了，也就是所谓的高可用或热备，它集群管理中保证集群高可用的一个服务软件，其功能类似于heartbeat，用来防止单点故障(单点故障是指一旦某一点出现故障就会导致整个系统架构的不可用)的发生。说到keepalived就不得不说VRRP协议，可以说这个协议就是keepalived实现的基础，那么首先我们来看看VRRP协议。</p>\n<h2 id=\"vrrp协议介绍\"> VRRP协议介绍</h2>\n<p>学过网络的朋友都知道，网络在设计的时候必须考虑到冗余容灾，包括线路冗余，设备冗余等，防止网络存在单点故障，那在路由器或三层交换机处实现冗余就显得尤为重要。</p>\n<p>在网络里面有个协议就是来做这事的，这个协议就是VRRP协议，Keepalived就是巧用VRRP协议来实现高可用性(HA)的发生。</p>\n<p>VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。对于VRRP，需要清楚知道的是：</p>\n<p>1）VRRP是用来实现路由器冗余的协议。\n2）VRRP协议是为了消除在静态缺省路由环境下路由器单点故障引起的网络失效而设计的主备模式的协议，使得发生故障而进行设计设备功能切换时可以不影响内外数据通信，不需要再修改内部网络的网络参数。\n3）VRRP协议需要具有IP备份，优先路由选择，减少不必要的路由器通信等功能。\n4）VRRP协议将两台或多台路由器设备虚拟成一个设备，对外提供虚拟路由器IP（一个或多个）。然而，在路由器组内部，如果实际拥有这个对外IP的路由器如果工作正常的话，就是master，或者是通过算法选举产生的，MASTER实现针对虚拟路由器IP的各种网络功能，如ARP请求，ICMP，以及数据的转发等，其他设备不具有该IP，状态是BACKUP。除了接收MASTER的VRRP状态通告信息外，不执行对外的网络功能，当主级失效时，BACKUP将接管原先MASTER的网络功能。\n5）VRRP协议配置时，需要配置每个路由器的虚拟路由ID(VRID)和优先权值，使用VRID将路由器进行分组，具有相同VRID值的路由器为同一个组，VRID是一个0-255的整整数，；同一个组中的路由器通过使用优先权值来选举MASTER。，优先权大者为MASTER，优先权也是一个0-255的正整数。</p>\n<h2 id=\"keepalived工作原理\"> keepalived工作原理</h2>\n<p>keepalived可提供vrrp以及health-check功能，可以只用它提供双机浮动的vip（vrrp虚拟路由功能），这一样可以简单实现一个双机热备高可用的功能：keepalived是以VRRP虚拟路由冗余协议为基础实现高可用的，可以认为是现实路由高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到VRRP包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p>\n<p>下图是keepalived的组件图</p>\n<p><img src=\"/images/keepalived1.png\" alt=\"\"></p>\n<p>keepalived也是模块化设计，不同模块负责不同的功能，它主要有三个模块，分别是core、check和VRRP，其中：</p>\n<p>core模块：为keepalived的核心组件，负责主进程的启动、维护以及全局配置文件的加载和解析；</p>\n<p>check：负责健康检查，包括常见的各种检查方式；</p>\n<p>VRRP模块：是来实现VRRP协议的。</p>\n<p>system call：系统调用</p>\n<p>watch dog：监控check和vrrp进程的看管者，check负责检测子进程的健康状态，当其检测到master上的服务不可用时则通告vrrp将其转移至backup服务器上。</p>\n<p>除此之外，keepalived还有下面两个组件：</p>\n<p>libipfwc:iptables（ipchains）库，配置LVS会用到</p>\n<p>libipvs*：配置LVS会用到</p>\n<p>注意，keepalived和LVS完全是两码事，只不过他们各负其责相互配合而已。</p>\n<p>keepalived正常启动的时候，共启动3个进程：\n一个是父进程，负责监控其子进程；一个是VRRP子进程，另外一个是checkers子进程；\n两个子进程都被系统watchlog看管，两个子进程各自负责复杂自己的事。\nHealthcheck子进程检查各自服务器的健康状况，，例如http,lvs。如果healthchecks进程检查到master上服务不可用了，就会通知本机上的VRRP子进程，让他删除通告，并且去掉虚拟IP，转换为BACKUP状态。</p>\n<h2 id=\"keepalived作用\"> Keepalived作用</h2>\n<p>Keepalived主要用作RealServer的健康状态检查以及LoadBalance主机和BackUP主机之间failover的实现。Keepalived的作用是检测web服务器的状态，如果有一台web服务器死机，或工作出现故障，Keepalived将检测到，并将有故障的web服务器从系统中剔除，当web服务器工作正常后Keepalived自动将web服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的web服务器。</p>\n<p>----------------------------------------------------------------------------------------------------------------------------\nKeepalived和Heartbeat之间的对比\n1）Keepalived使用更简单：从安装、配置、使用、维护等角度上对比，Keepalived都比Heartbeat要简单得多，尤其是Heartbeat2.1.4后拆分成3个子项目，安装、配置、使用都比较复杂，尤其是出问题的时候，都不知道具体是哪个子系统出问题了；而Keepalived只有1个安装文件、1个配置文件，配置文件也简单很多；\n2）Heartbeat功能更强大：Heartbeat虽然复杂，但功能更强大，配套工具更全，适合做大型集群管理，而Keepalived主要用于集群倒换，基本没有管理功能；\n3）协议不同：Keepalived使用VRRP协议进行通信和选举，Heartbeat使用心跳进行通信和选举；Heartbeat除了走网络外，还可以通过串口通信，貌似更可靠；\nKeepalived使用的vrrp协议方式，虚拟路由冗余协议 ；Heartbeat是基于主机或网络的服务的高可用方式；\nKeepalived的目的是模拟路由器的双机；Heartbeat的目的是用户service的双机\n4）使用方式基本类似：如果要基于两者设计高可用方案，最终都要根据业务需要写自定义的脚本，Keepalived的脚本没有任何约束，随便怎么写都可以；Heartbeat的脚本有约束，即要支持service\nstart/stop/restart这种方式，而且Heartbeart提供了很多默认脚本，简单的绑定ip，启动apache等操作都已经有了；</p>\n<p>使用建议：\n优先使用Keepalived，当Keepalived不够用的时候才选择Heartbeat\nlvs的高可用建议用Keepavlived\n业务的高可用用Heartbeat\n--------------------------------------------------------------------------------------------------------------------------</p>\n<h2 id=\"keepalived的配置文件\"> Keepalived的配置文件</h2>\n<p>keepalived只有一个配置文件keepalived.conf，配置文件里面主要包括以下几个配置项，分别是global_defs、static_ipaddress、static_routes、VRRP_script、VRRP_instance和virtual_server。</p>\n<p>总的来说，keepalived主要有三类区域配置，注意不是三种配置文件，是一个配置文件里面三种不同类别的配置区域：\n1）全局配置(Global Configuration)\n2）VRRPD配置\n3）LVS配置</p>\n<p>下面就重点来说说这三类区域的配置：</p>\n<p>1）全局配置\n全局配置又包括两个子配置：\n全局定义(global definition)\n静态路由配置(static ipaddress/routes)</p>\n<p>1--全局定义(global definition)配置范例：</p>\n<div><pre><code>global_defs\n{\nnotification_email\n{\nadmin@example.com\n}\nnotification_email_from admin@example.com\nsmtp_server 127.0.0.1\nstmp_connect_timeout 30\nrouter_id node1\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>全局配置解析\nglobal_defs全局配置标识，表面这个区域{}是全局配置</p>\n<div><pre><code>notification_email\n{\nadmin@example.com\nadmin@ywlm.net\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>表示keepalived在发生诸如切换操作时需要发送email通知，以及email发送给哪些邮件地址，邮件地址可以多个，每行一个\nnotification_email_from admin@example.com\n表示发送通知邮件时邮件源地址是谁\nsmtp_server 127.0.0.1\n表示发送email时使用的smtp服务器地址，这里可以用本地的sendmail来实现\nsmtp_connect_timeout 30\n连接smtp连接超时时间\nrouter_id node1\n机器标识</p>\n<p>2--静态地址和路由配置范例</p>\n<div><pre><code>static_ipaddress\n{\n192.168.1.1/24 brd + dev eth0 scope global\n192.168.1.2/24 brd + dev eth1 scope global\n}\nstatic_routes\n{\nsrc $SRC_IP to $DST_IP dev $SRC_DEVICE\nsrc $SRC_IP to $DST_IP via $GW dev $SRC_DEVICE\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>这里实际上和系统里面用命令配置IP地址和路由的曹一样，例如：\n192.168.1.1/24 brd + dev eth0 scope global 相当于: ip addr add 192.168.1.1/24 brd + dev eth0 scope global\n就是给eth0配置IP地址\n路由同理\n一般这个区域不需要配置\n这里实际上就是给服务器配置真实的IP地址和路由的，在复杂的环境下可能需要配置，一般不会用这个来配置，我们可以直接用vi /etc/sysconfig/network-script/ifcfg-eth1来配置，切记这里可不是VIP哦，不要搞混淆了，切记切记！</p>\n<p>2）VRRPD配置\nVRRPD配置包括三个类：\nVRRP同步组(synchroization group)\nVRRP实例(VRRP Instance)\nVRRP脚本</p>\n<p>1--VRRP同步组(synchroization group)配置范例</p>\n<div><pre><code>vrrp_sync_group VG_1 {\ngroup {\nhttp\nmysql\n}\nnotify_master /path/to/to_master.sh\nnotify_backup /path_to/to_backup.sh\nnotify_fault “/path/fault.sh VG_1”\nnotify /path/to/notify.sh\nsmtp_alert\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>其中：\ngroup {\nhttp\nmysql\n}\nhttp和mysql是实例名和下面的实例名一致</p>\n<p>notify_master /path/to/to_master.sh：表示当切换到master状态时，要执行的脚本\nnotify_backup /path_to/to_backup.sh：表示当切换到backup状态时，要执行的脚本\nnotify_fault “/path/fault.sh VG_1”\nnotify /path/to/notify.sh：\nsmtp alter表示切换时给global defs中定义的邮件地址发送右键通知</p>\n<p>2--VRRP实例(instance)配置范例</p>\n<div><pre><code>vrrp_instance http {\nstate MASTER\ninterface eth0\ndont_track_primary\ntrack_interface {\neth0\neth1\n}\nmcast_src_ip &lt;IPADDR&gt;\ngarp_master_delay 10\nvirtual_router_id 51\npriority 100\nadvert_int 1\nauthentication {\nauth_type PASS\nautp_pass 1234\n}\nvirtual_ipaddress {\n#&lt;IPADDR&gt;/&lt;MASK&gt; brd &lt;IPADDR&gt; dev &lt;STRING&gt; scope &lt;SCOPT&gt; label &lt;LABEL&gt;\n192.168.200.17/24 dev eth1\n192.168.200.18/24 dev eth2 label eth2:1\n}\nvirtual_routes {\n# src &lt;IPADDR&gt; [to] &lt;IPADDR&gt;/&lt;MASK&gt; via|gw &lt;IPADDR&gt; dev &lt;STRING&gt; scope &lt;SCOPE&gt; tab\nsrc 192.168.100.1 to 192.168.109.0/24 via 192.168.200.254 dev eth1\n192.168.110.0/24 via 192.168.200.254 dev eth1\n192.168.111.0/24 dev eth2\n192.168.112.0/24 via 192.168.100.254\n}\nnopreempt\npreemtp_delay 300\ndebug\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><p>state：state指定instance(Initial)的初始状态，就是说在配置好后，这台服务器的初始状态就是这里指定的，但这里指定的不算，还是得要通过竞选通过优先级来确定，里如果这里设置为master，但如若他的优先级不及另外一台，那么这台在发送通告时，会发送自己的优先级，另外一台发现优先级不如自己的高，那么他会就回抢占为master\ninterface：实例绑定的网卡，因为在配置虚拟IP的时候必须是在已有的网卡上添加的\ndont track primary：忽略VRRP的interface错误\ntrack interface：跟踪接口，设置额外的监控，里面任意一块网卡出现问题，都会进入故障(FAULT)状态，例如，用nginx做均衡器的时候，内网必须正常工作，如果内网出问题了，这个均衡器也就无法运作了，所以必须对内外网同时做健康检查\nmcast\nsrc\nip：发送多播数据包时的源IP地址，这里注意了，这里实际上就是在那个地址上发送VRRP通告，这个非常重要，一定要选择稳定的网卡端口来发送，这里相当于heartbeat的心跳端口，如果没有设置那么就用默认的绑定的网卡的IP，也就是interface指定的IP地址\ngarp master delay：在切换到master状态后，延迟进行免费的ARP(gratuitous ARP)请求\nvirtual router id：这里设置VRID，这里非常重要，相同的VRID为一个组，他将决定多播的MAC地址\npriority 100：设置本节点的优先级，优先级高的为master\nadvert int：检查间隔，默认为1秒\nvirtual</p>\n<p>ipaddress：这里设置的就是VIP，也就是虚拟IP地址，他随着state的变化而增加删除，当state为master的时候就添加，当state为backup的时候删除，这里主要是有优先级来决定的，和state设置的值没有多大关系，这里可以设置多个IP地址\nvirtual routes：原理和virtual ipaddress一样，只不过这里是增加和删除路由\nlvs sync daemon interface：lvs syncd绑定的网卡\nauthentication：这里设置认证\nauth type：认证方式，可以是PASS或AH两种认证方式\nauth pass：认证密码\nnopreempt：设置不抢占，这里只能设置在state为backup的节点上，而且这个节点的优先级必须别另外的高\npreempt delay：抢占延迟\ndebug：debug级别\nnotify master：和sync group这里设置的含义一样，可以单独设置，例如不同的实例通知不同的管理人员，http实例发给网站管理员，mysql的就发邮件给DBA</p>\n<p>3--VRRP脚本范例</p>\n<div><pre><code>vrrp_script check_running {\n   script “/usr/local/bin/check_running”\n   interval 10\n   weight 10\n}\nvrrp_instance http {\n   state BACKUP\n   smtp_alert\n   interface eth0\n   virtual_router_id 101\n   priority 90\n   advert_int 3\n   authentication {\n   auth_type PASS\n   auth_pass whatever\n   }\n   virtual_ipaddress {\n   1.1.1.1\n   }\n   track_script {\n   check_running weight 20\n   }\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>首先在vrrp_script区域定义脚本名字和脚本执行的间隔和脚本执行的优先级变更</p>\n<div><pre><code>vrrp_script check_running {\nscript “/usr/local/bin/check_running”\ninterval 10     #脚本执行间隔\nweight 10      #脚本结果导致的优先级变更：10表示优先级+10；-10则表示优先级-10\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>然后在实例(vrrp_instance)里面引用，有点类似脚本里面的函数引用一样：先定义，后引用函数名</p>\n<div><pre><code>track_script {\ncheck_running weight 20\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>注意：VRRP脚本(vrrp_script)和VRRP实例(vrrp_instance)属于同一个级别</p>\n<p>3)LVS配置\n如果你没有配置LVS+keepalived，那么无需配置这段区域，如果你用的是nginx来代替LVS，这无需配置这款，这里的LVS配置是专门为keepalived+LVS集成准备的。\n注意了，这里LVS配置并不是指真的安装LVS然后用ipvsadm来配置它，而是用keepalived的配置文件来代替ipvsadm来配置LVS，这样会方便很多，一个配置文件搞定这些，维护方便，配置方便是也！\n这里LVS配置也有两个配置\n一个是虚拟主机组配置\n一个是虚拟主机配置</p>\n<p>1--虚拟主机组配置文件详解\n这个配置是可选的，根据需求来配置吧，这里配置主要是为了让一台realserver上的某个服务可以属于多个Virtual Server，并且只做一次健康检查:\nvirtual_server_group <STRING> { # VIP port <IPADDR> <PORT> <IPADDR> <PORT> fwmark <INT> }</p>\n<p>2--虚拟主机配置\nvirtual server可以以下面三种的任意一种来配置:\na）virtual server IP port\nb）virtual server fwmark int\nc）virtual server group string</p>\n<p>下面以第一种比较常用的方式来配详细解说一下：</p>\n<div><pre><code>virtual_server 192.168.1.2 80 {                     #设置一个virtual server: VIP:Vport\ndelay_loop 3                                                  # service polling的delay时间，即服务轮询的时间间隔\n \nlb_algo rr|wrr|lc|wlc|lblc|sh|dh                        #LVS调度算法\nlb_kind NAT|DR|TUN                                      #LVS集群模式                     \npersistence_timeout 120                                #会话保持时间（秒为单位），即以用户在120秒内被分配到同一个后端realserver\npersistence_granularity &lt;NETMASK&gt;              #LVS会话保持粒度，ipvsadm中的-M参数，默认是0xffffffff，即每个客户端都做会话保持\nprotocol TCP                                                  #健康检查用的是TCP还是UDP\nha_suspend                                                   #suspendhealthchecker’s activity\nvirtualhost &lt;string&gt;                                       #HTTP_GET做健康检查时，检查的web服务器的虚拟主机（即host：头）\n \nsorry_server &lt;IPADDR&gt; &lt;PORT&gt;                 #备用机，就是当所有后端realserver节点都不可用时，就用这里设置的，也就是临时把所有的请求都发送到这里啦\n \nreal_server &lt;IPADDR&gt; &lt;PORT&gt;                    #后端真实节点主机的权重等设置，主要，后端有几台这里就要设置几个\n{\nweight 1                                                         #给每台的权重，0表示失效(不知给他转发请求知道他恢复正常)，默认是1\ninhibit_on_failure                                            #表示在节点失败后，把他权重设置成0，而不是冲IPVS中删除\n \nnotify_up &lt;STRING&gt; | &lt;QUOTED-STRING&gt;  #检查服务器正常(UP)后，要执行的脚本\nnotify_down &lt;STRING&gt; | &lt;QUOTED-STRING&gt; #检查服务器失败(down)后，要执行的脚本\nHTTP_GET                                                     #健康检查方式\n{\nurl {                                                                #要坚持的URL，可以有多个\npath /                                                             #具体路径\ndigest &lt;STRING&gt;                                           \nstatus_code 200                                            #返回状态码\n}\nconnect_port 80                                            #监控检查的端口\n \nbindto &lt;IPADD&gt;                                             #健康检查的IP地址\nconnect_timeout   3                                       #连接超时时间\nnb_get_retry 3                                               #重连次数\ndelay_before_retry 2                                      #重连间隔\n} # END OF HTTP_GET|SSL_GET\n \n#下面是常用的健康检查方式，健康检查方式一共有HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK这些\n#TCP方式\nTCP_CHECK {\nconnect_port 80\nbindto 192.168.1.1\nconnect_timeout 4\n} # TCP_CHECK\n \n# SMTP方式，这个可以用来给邮件服务器做集群\nSMTP_CHECK\nhost {\nconnect_ip &lt;IP ADDRESS&gt;\nconnect_port &lt;PORT&gt;                                     #默认检查25端口\n14 KEEPALIVED\nbindto &lt;IP ADDRESS&gt;\n}\nconnect_timeout &lt;INTEGER&gt;\nretry &lt;INTEGER&gt;\ndelay_before_retry &lt;INTEGER&gt;\n# “smtp HELO\nhelo_name &lt;STRING&gt;|&lt;QUOTED-STRING&gt;\n} #SMTP_CHECK\n \n#MISC方式，这个可以用来检查很多服务器只需要自己会些脚本即可\nMISC_CHECK\n{\nmisc_path &lt;STRING&gt;|&lt;QUOTED-STRING&gt; #外部程序或脚本\nmisc_timeout &lt;INT&gt;                                    #脚本或程序执行超时时间\n \nmisc_dynamic                                               #这个就很好用了，可以非常精确的来调整权重，是后端每天服务器的压力都能均衡调配，这个主要是通过执行的程序或脚本返回的状态代码来动态调整weight值，使权重根据真实的后端压力来适当调整，不过这需要有过硬的脚本功夫才行哦\n#返回0：健康检查没问题，不修改权重\n#返回1：健康检查失败，权重设置为0\n#返回2-255：健康检查没问题，但是权重却要根据返回代码修改为返回码-2，例如如果程序或脚本执行后返回的代码为200，#那么权重这回被修改为 200-2\n}\n} # Realserver\n} # Virtual Server\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br></div></div><p>转载地址：</p>\n<p>https://www.cnblogs.com/kevingrace/p/6248941.html</p>\n",
      "image": "https://vuepress-theme-hope-demo.mrhope.site/images/keepalived1.png",
      "date_published": "2017-09-15T21:00:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（21）-find之xargs",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8821%EF%BC%89-find/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8821%EF%BC%89-find/",
      "content_html": "<p>在使用 find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。</p>\n\n<p>find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。</p>\n<p>在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高； 而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p>\n<p>使用实例：</p>\n<p>1） 查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</p>\n<div><pre><code>#ll\n总计 312\n-rw-r--r-- 1 root root 302108 11-03 06:19 log2012.log\n-rw-r--r-- 1 root root      0 11-12 22:25 log2013.log\n-rw-r--r-- 1 root root      0 11-12 22:25 log2014.log\ndrwxr-xr-x 6 root root   4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root   4096 11-12 19:32 test3\ndrwxrwxrwx 2 root root   4096 11-12 19:32 test4\n# find . -type f -print | xargs file\n./log2014.log: empty\n./log2013.log: empty\n./log2012.log: ASCII text\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>2）在整个系统中查找内存信息转储文件(core dump) ，然后把结果保存到/tmp/core.log 文件中</p>\n<div><pre><code># find / -name &quot;core&quot; -print | xargs echo &quot;&quot; &gt;/tmp/core.log\n# cd /tmp\n# ll\n总计 16\n-rw-r--r-- 1 root root 1524 11-12 22:29 core.log\ndrwx------ 2 root root 4096 11-12 22:24 ssh-TzcZDx1766\ndrwx------ 2 root root 4096 11-12 22:28 ssh-ykiRPk1815\ndrwx------ 2 root root 4096 11-03 07:11 vmware-root\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>3）在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限</p>\n<div><pre><code># ll\n总计 312\n-rw-r--r-- 1 root root 302108 11-03 06:19 log2012.log\n-rw-r--r-- 1 root root      0 11-12 22:25 log2013.log\n-rw-r--r-- 1 root root      0 11-12 22:25 log2014.log\ndrwxr-xr-x 6 root root   4096 10-27 01:58 scf\ndrwxrwxrwx 2 root root   4096 11-12 19:32 test3\ndrwxrwxrwx 2 root root   4096 11-12 19:32 test4\n# find . -perm -7 -print | xargs chmod o-w\n# ll\n总计 312\n-rw-r--r-- 1 root root 302108 11-03 06:19 log2012.log\n-rw-r--r-- 1 root root      0 11-12 22:25 log2013.log\n-rw-r--r-- 1 root root      0 11-12 22:25 log2014.log\ndrwxr-xr-x 6 root root   4096 10-27 01:58 scf\ndrwxrwxr-x 2 root root   4096 11-12 19:32 test3\ndrwxrwxr-x 2 root root   4096 11-12 19:32 test4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>说明：</p>\n<p>执行命令后，文件夹scf、test3和test4的权限都发生改变</p>\n<p>4）用grep命令在所有的普通文件中搜索hostname这个词</p>\n<div><pre><code># find . -type f -print | xargs grep &quot;hostname&quot;\n./log2013.log:hostnamebaidu=baidu.com\n./log2013.log:hostnamesina=sina.com\n./log2013.log:hostnames=true\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>5）用grep命令在当前目录下的所有普通文件中搜索hostnames这个词</p>\n<div><pre><code># find . -name \\* -type f -print | xargs grep &quot;hostnames&quot;\n./log2013.log:hostnamesina=sina.com\n./log2013.log:hostnames=true\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>说明：</p>\n<p>注意，在上面的例子中， \\用来取消find命令中的*在shell中的特殊含义。</p>\n<p>6）使用xargs执行mv</p>\n<div><pre><code># ll\n总计 316\n-rw-r--r-- 1 root root 302108 11-03 06:19 log2012.log\n-rw-r--r-- 1 root root     61 11-12 22:44 log2013.log\n-rw-r--r-- 1 root root      0 11-12 22:25 log2014.log\ndrwxr-xr-x 6 root root   4096 10-27 01:58 scf\ndrwxrwxr-x 2 root root   4096 11-12 22:54 test3\ndrwxrwxr-x 2 root root   4096 11-12 19:32 test4\n# cd test4/\n# ll\n总计 0[root@localhost test4]# cd ..\n# find . -name &quot;*.log&quot; | xargs -i mv {} test4\n# ll\n总计 12drwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxr-x 2 root root 4096 11-13 05:50 test3\ndrwxrwxr-x 2 root root 4096 11-13 05:50 test4\n# cd test4/\n# ll\n总计 304\n-rw-r--r-- 1 root root 302108 11-12 22:54 log2012.log\n-rw-r--r-- 1 root root     61 11-12 22:54 log2013.log\n-rw-r--r-- 1 root root      0 11-12 22:54 log2014.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>7）find后执行xargs提示xargs: argument line too long解决方法：</p>\n<div><pre><code>#find . -type f -atime +0 -print0 | xargs -0 -l1 -t rm -f\nrm -f \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>说明：</p>\n<p>-l1是一次处理一个；-t是处理之前打印出命令</p>\n<p>8）使用-i参数默认的前面输出用{}代替，-I参数可以指定其他代替字符，如例子中的[]</p>\n<div><pre><code># ll\n总计 12drwxr-xr-x 6 root root 4096 10-27 01:58 scf\ndrwxrwxr-x 2 root root 4096 11-13 05:50 test3\ndrwxrwxr-x 2 root root 4096 11-13 05:50 test4\n# cd test4\n# find . -name &quot;file&quot; | xargs -I [] cp [] ..\n# ll\n总计 304\n-rw-r--r-- 1 root root 302108 11-12 22:54 log2012.log\n-rw-r--r-- 1 root root     61 11-12 22:54 log2013.log\n-rw-r--r-- 1 root root      0 11-12 22:54 log2014.log\n# cd ..\n# ll\n总计 316\n-rw-r--r-- 1 root root 302108 11-13 06:03 log2012.log\n-rw-r--r-- 1 root root     61 11-13 06:03 log2013.log\n-rw-r--r-- 1 root root      0 11-13 06:03 log2014.log\ndrwxr-xr-x 6 root root   4096 10-27 01:58 scf\ndrwxrwxr-x 2 root root   4096 11-13 05:50 test3\ndrwxrwxr-x 2 root root   4096 11-13 05:50 test4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>说明：</p>\n<p>使用-i参数默认的前面输出用{}代替，-I参数可以指定其他代替字符，如例子中的[]</p>\n<p>9）xargs的-p参数的使用</p>\n<div><pre><code># ll\n总计 0\n-rw-r--r-- 1 root root 0 11-13 06:06 log2015.log\n# cd ..\n# ll\n总计 316\n-rw-r--r-- 1 root root 302108 11-13 06:03 log2012.log\n-rw-r--r-- 1 root root     61 11-13 06:03 log2013.log\n-rw-r--r-- 1 root root      0 11-13 06:03 log2014.log\ndrwxr-xr-x 6 root root   4096 10-27 01:58 scf\ndrwxrwxr-x 2 root root   4096 11-13 06:06 test3\ndrwxrwxr-x 2 root root   4096 11-13 05:50 test4\n# cd test3\n#  find . -name &quot;*.log&quot; | xargs -p -i mv {} ..\nmv ./log2015.log .. ?...y\n# ll\n总计 0\n# cd ..\n# ll\n总计 316\n-rw-r--r-- 1 root root 302108 11-13 06:03 log2012.log\n-rw-r--r-- 1 root root     61 11-13 06:03 log2013.log\n-rw-r--r-- 1 root root      0 11-13 06:03 log2014.log\n-rw-r--r-- 1 root root      0 11-13 06:06 log2015.log\ndrwxr-xr-x 6 root root   4096 10-27 01:58 scf\ndrwxrwxr-x 2 root root   4096 11-13 06:08 test3\ndrwxrwxr-x 2 root root   4096 11-13 05:50 test4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>说明：</p>\n<p>-p参数会提示让你确认是否执行后面的命令,y执行，n不执行。</p>\n<p>转载链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2012/11/15/2770888.html</p>\n",
      "date_published": "2018-07-27T18:50:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（29）-chown",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8829%EF%BC%89-chown/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8829%EF%BC%89-chown/",
      "content_html": "<p>chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。</p>\n\n<h2 id=\"语法\"> 语法</h2>\n<p><code>chown(选项)(参数)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-c或——changes：效果类似“-v”参数，但仅回报更改的部分；\n-f或--quite或——silent：不显示错误信息；\n-h或--no-dereference：只对符号连接的文件作修改，而不更改其他任何相关文件；\n-R或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n-v或——version：显示指令执行过程；\n--dereference：效果和“-h”参数相同；\n--help：在线帮助；\n--reference=&lt;参考文件或目录&gt;：把指定文件或目录的拥有者与所属群组全部设成和参考文件或目录的拥有者与所属群组相同；\n--version：显示版本信息。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"参数\"> 参数</h2>\n<p>用户：组：指定所有者和所属工作组。当省略“：组”，仅改变文件所有者；\n文件：指定要改变所有者和工作组的文件列表。支持多个文件和目标，支持shell通配符。</p>\n<h2 id=\"功能\"> 功能</h2>\n<p>通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。</p>\n<h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）<strong>改变拥有者和群组</strong></p>\n<div><pre><code># ll\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root users 302108 11-30 08:39 log2012.log\n# chown mail:mail log2012.log \n# ll\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>2）<strong>改变文件拥有者</strong></p>\n<div><pre><code>ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 mail mail  302108 11-30 08:39 log2012.log\n# chown root: log2012.log \n# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root mail  302108 11-30 08:39 log2012.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>3）<strong>改变文件群组</strong></p>\n<div><pre><code># ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root root  302108 11-30 08:39 log2012.log\n# chown :mail log2012.log \n# ll\n总计 604\n---xr--r-- 1 root users 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root mail  302108 11-30 08:39 log2012.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>4）**改变指定目录以及其子目录下的所有文件的拥有者和群组 **</p>\n<div><pre><code># ll\ndrwxr-xr-x 2 root users   4096 11-30 08:39 test6\n# chown -R -v root:mail test6\n“test6/log2014.log” 的所有者已更改为 root:mail\n“test6/linklog.log” 的所有者已更改为 root:mail\n“test6/log2015.log” 的所有者已更改为 root:mail\n“test6/log2013.log” 的所有者已更改为 root:mail\n“test6/log2012.log” 的所有者已保留为 root:mail\n“test6/log2017.log” 的所有者已更改为 root:mail\n“test6/log2016.log” 的所有者已更改为 root:mail\n“test6” 的所有者已更改为 root:mail\n# ll\ndrwxr-xr-x 2 root mail   4096 11-30 08:39 test6\n# cd test6\n# ll\n总计 604\n---xr--r-- 1 root mail 302108 11-30 08:39 linklog.log\n---xr--r-- 1 root mail 302108 11-30 08:39 log2012.log\n-rw-r--r-- 1 root mail     61 11-30 08:39 log2013.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2014.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2015.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2016.log\n-rw-r--r-- 1 root mail      0 11-30 08:39 log2017.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/04/2800684.html</p>\n<p>http://man.linuxde.net/chown</p>\n",
      "date_published": "2018-07-27T18:58:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（33）-du",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8833%EF%BC%89-du/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8833%EF%BC%89-du/",
      "content_html": "<p><strong>du命令</strong>也是查看使用空间的，但是与<a href=\"http://man.linuxde.net/df\" target=\"_blank\" rel=\"noopener noreferrer\">df</a>命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的。</p>\n\n<h2 id=\"语法\"> 语法</h2>\n<p><code>du [选项][文件]</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-a或-all 显示目录中个别文件的大小。\n-b或-bytes 显示目录或文件大小时，以byte为单位。\n-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。\n-k或--kilobytes 以KB(1024bytes)为单位输出。\n-m或--megabytes 以MB为单位输出。\n-s或--summarize 仅显示总计，只列出最后加总的值。\n-h或--human-readable 以K，M，G为单位，提高信息的可读性。\n-x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。\n-L&lt;符号链接&gt;或--dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。\n-S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。\n-X&lt;文件&gt;或--exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。\n--exclude=&lt;目录或文件&gt; 略过指定的目录或文件。\n-D或--dereference-args 显示指定符号链接的源文件大小。\n-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。\n-l或--count-links 重复计算硬件链接的文件。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）显示目录或者文件所占空间</p>\n<div><pre><code># du\n608     ./test6\n308     ./test4\n4       ./scf/lib\n4       ./scf/service/deploy/product\n4       ./scf/service/deploy/info\n12      ./scf/service/deploy\n16      ./scf/service\n4       ./scf/doc\n4       ./scf/bin\n32      ./scf\n8       ./test3\n1288    .\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>说明：</p>\n<p>只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小</p>\n<p>2）显示指定文件所占空间</p>\n<div><pre><code># du log2012.log \n300     log2012.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>3）查看指定目录的所占空间</p>\n<div><pre><code># du scf\n4       scf/lib\n4       scf/service/deploy/product\n4       scf/service/deploy/info\n12      scf/service/deploy\n16      scf/service\n4       scf/doc\n4       scf/bin\n32      scf\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>4）显示多个文件所占空间</p>\n<div><pre><code># du log30.tar.gz log31.tar.gz \n4       log30.tar.gz\n4       log31.tar.gz\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>5）只显示总和的大小</p>\n<div><pre><code># du -s\n1288    .\n# du -s scf\n32      scf\n# cd ..\n# du -s test\n1288    test\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>6）方便阅读的格式显示</p>\n<div><pre><code># du -h test\n608K    test/test6\n308K    test/test4\n4.0K    test/scf/lib\n4.0K    test/scf/service/deploy/product\n4.0K    test/scf/service/deploy/info\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>7）文件和目录都显示</p>\n<div><pre><code># du -ah test\n4.0K    test/log31.tar.gz\n4.0K    test/test13.tar.gz\n0       test/linklog.log\n0       test/test6/log2014.log\n300K    test/test6/linklog.log\n0       test/test6/log2015.log\n4.0K    test/test6/log2013.log\n300K    test/test6/log2012.log\n0       test/test6/log2017.log\n0       test/test6/log2016.log\n608K    test/test6\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>8）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</p>\n<div><pre><code># du -c log30.tar.gz log31.tar.gz \n4       log30.tar.gz\n4       log31.tar.gz\n8       总计\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>说明：</p>\n<p>加上-c选项后，du不仅显示两个目录各自占用磁盘空间的大小，还在最后一行统计它们的总和。</p>\n<p>9）按照空间大小排序</p>\n<div><pre><code># du|sort -nr|more\n1288    .\n608     ./test6\n308     ./test4\n32      ./scf\n16      ./scf/service\n12      ./scf/service/deploy\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>10）输出当前目录下各个子目录所使用的空间</p>\n<div><pre><code># du -h  --max-depth=1\n608K    ./test6\n308K    ./test4\n32K     ./scf\n8.0K    ./test3\n1.3M    .\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/10/2810755.html</p>\n<p>http://man.linuxde.net/du</p>\n",
      "date_published": "2018-07-27T19:03:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（36）-date",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8836%EF%BC%89-date/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8836%EF%BC%89-date/",
      "content_html": "<p>在linux环境中，不管是编程还是其他维护，时间是必不可少的，也经常会用到时间的运算，熟练运用date命令来表示自己想要表示的时间，肯定可以给自己的工作带来诸多方便。</p>\n\n<h2 id=\"语法\"> 语法</h2>\n<p><code>date(选项)(参数)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-d&lt;字符串&gt;：显示字符串所指的日期与时间。字符串前后必须加上双引号；\n-s&lt;字符串&gt;：根据字符串来设置日期与时间。字符串前后必须加上双引号；\n-u：显示GMT；\n--help：在线帮助；\n--version：显示版本信息。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"参数\"> 参数</h2>\n<p>&lt;+时间日期格式&gt;：指定显示时使用的日期时间格式。</p>\n<h2 id=\"日期格式字符串列表\"> 日期格式字符串列表</h2>\n<div><pre><code>%H 小时，24小时制（00~23）\n%I 小时，12小时制（01~12）\n%k 小时，24小时制（0~23）\n%l 小时，12小时制（1~12）\n%M 分钟（00~59）\n%p 显示出AM或PM\n%r 显示时间，12小时制（hh:mm:ss %p）\n%s 从1970年1月1日00:00:00到目前经历的秒数\n%S 显示秒（00~59）\n%T 显示时间，24小时制（hh:mm:ss）\n%X 显示时间的格式（%H:%M:%S）\n%Z 显示时区，日期域（CST）\n%a 星期的简称（Sun~Sat）\n%A 星期的全称（Sunday~Saturday）\n%h,%b 月的简称（Jan~Dec）\n%B 月的全称（January~December）\n%c 日期和时间（Tue Nov 20 14:12:58 2012）\n%d 一个月的第几天（01~31）\n%x,%D 日期（mm/dd/yy）\n%j 一年的第几天（001~366）\n%m 月份（01~12）\n%w 一个星期的第几天（0代表星期天）\n%W 一年的第几个星期（00~53，星期一为第一天）\n%y 年的最后两个数字（1999则是99）\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）格式化输出：</p>\n<div><pre><code>#date +&quot;%Y-%m-%d&quot;\n2018-03-29\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>2）输出昨天日期：</p>\n<div><pre><code>#date -d &quot;1 day ago&quot; +&quot;%Y-%m-%d&quot;\n2018-03-28\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>3）2秒后输出：</p>\n<div><pre><code>#date -d &quot;2 second&quot; +&quot;%Y-%m-%d %H:%M:%S&quot; \n2018-03-29 10:08:37\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>4）apache格式转换：</p>\n<div><pre><code>date -d &quot;Dec 5, 2009 12:00:37 AM&quot; +&quot;%Y-%m-%d %H:%M.%S&quot;\n2009-12-05 00:00.37\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>5）格式转换后时间游走：</p>\n<div><pre><code>date -d &quot;Dec 5, 2009 12:00:37 AM 2 year ago&quot; +&quot;%Y-%m-%d %H:%M.%S&quot;\n2007-12-05 00:00.37\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>6）加减操作：</p>\n<div><pre><code>date +%Y%m%d                   //显示前天年月日\ndate -d &quot;+1 day&quot; +%Y%m%d       //显示前一天的日期\ndate -d &quot;-1 day&quot; +%Y%m%d       //显示后一天的日期\ndate -d &quot;-1 month&quot; +%Y%m%d     //显示上一月的日期\ndate -d &quot;+1 month&quot; +%Y%m%d     //显示下一月的日期\ndate -d &quot;-1 year&quot; +%Y%m%d      //显示前一年的日期\ndate -d &quot;+1 year&quot; +%Y%m%d      //显示下一年的日期\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>7）设定时间</p>\n<div><pre><code>date -s                        //设置当前时间，只有root权限才能设置，其他只能查看\ndate -s 20120523               //设置成20120523，这样会把具体时间设置成空00:00:00\ndate -s 01:01:01               //设置具体时间，不会对日期做更改\ndate -s &quot;01:01:01 2012-05-23&quot;  //这样可以设置全部时间\ndate -s &quot;01:01:01 20120523&quot;    //这样可以设置全部时间\ndate -s &quot;2012-05-23 01:01:01&quot;  //这样可以设置全部时间\ndate -s &quot;20120523 01:01:01&quot;    //这样可以设置全部时间\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>8）有时需要检查一组命令花费的时间，举例：</p>\n<div><pre><code>#!/bin/bash\n\nstart=$(date +%s)\nnmap man.linuxde.net &amp;&gt; /dev/null\n\nend=$(date +%s)\ndifference=$(( end - start ))\necho $difference seconds.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>参考链接：</p>\n<p>http://man.linuxde.net/date</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/13/2815687.html</p>\n",
      "date_published": "2018-07-27T19:07:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（35）-diff",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8835%EF%BC%89-diff/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8835%EF%BC%89-diff/",
      "content_html": "<p>diff 命令是 linux上非常重要的工具，用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方。diff在命令行中打印每一个行的改动。最新版本的diff还支持二进制文件。diff程序的输出被称为补丁 (patch)，因为Linux系统中还有一个patch程序，可以根据diff的输出将a.c的文件内容更新为b.c。diff是svn、cvs、git等版本控制工具不可或缺的一部分。</p>\n\n<h2 id=\"语法\"> 语法</h2>\n<p><code>diff(选项)(参数)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-&lt;行数&gt;：指定要显示多少行的文本。此参数必须与-c或-u参数一并使用；\n-a或——text：diff预设只会逐行比较文本文件；\n-b或--ignore-space-change：不检查空格字符的不同；\n-B或--ignore-blank-lines：不检查空白行；\n-c：显示全部内容，并标出不同之处；\n-C&lt;行数&gt;或--context&lt;行数&gt;：与执行“-c-&lt;行数&gt;”指令相同；\n-d或——minimal：使用不同的演算法，以小的单位来做比较；\n-D&lt;巨集名称&gt;或ifdef&lt;巨集名称&gt;：此参数的输出格式可用于前置处理器巨集；\n-e或——ed：此参数的输出格式可用于ed的script文件；\n-f或-forward-ed：输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处；\n-H或--speed-large-files：比较大文件时，可加快速度；\n-l&lt;字符或字符串&gt;或--ignore-matching-lines&lt;字符或字符串&gt;：若两个文件在某几行有所不同，而之际航同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异；\n-i或--ignore-case：不检查大小写的不同；\n-l或——paginate：将结果交由pr程序来分页；\n-n或——rcs：将比较结果以RCS的格式来显示；\n-N或--new-file：在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录，文件A 若使用-N参数，则diff会将文件A 与一个空白的文件比较；\n-p：若比较的文件为C语言的程序码文件时，显示差异所在的函数名称；\n-P或--unidirectional-new-file：与-N类似，但只有当第二个目录包含了第一个目录所没有的文件时，才会将这个文件与空白的文件做比较；\n-q或--brief：仅显示有无差异，不显示详细的信息；\n-r或——recursive：比较子目录中的文件；\n-s或--report-identical-files：若没有发现任何差异，仍然显示信息；\n-S&lt;文件&gt;或--starting-file&lt;文件&gt;：在比较目录时，从指定的文件开始比较；\n-t或--expand-tabs：在输出时，将tab字符展开；\n-T或--initial-tab：在每行前面加上tab字符以便对齐；\n-u，-U&lt;列数&gt;或--unified=&lt;列数&gt;：以合并的方式来显示文件内容的不同；\n-v或——version：显示版本信息；\n-w或--ignore-all-space：忽略全部的空格字符；\n-W&lt;宽度&gt;或--width&lt;宽度&gt;：在使用-y参数时，指定栏宽；\n-x&lt;文件名或目录&gt;或--exclude&lt;文件名或目录&gt;：不比较选项中所指定的文件或目录；\n-X&lt;文件&gt;或--exclude-from&lt;文件&gt;；您可以将文件或目录类型存成文本文件，然后在=&lt;文件&gt;中指定此文本文件；\n-y或--side-by-side：以并列的方式显示文件的异同之处；\n--help：显示帮助；\n--left-column：在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容；\n--suppress-common-lines：在使用-y参数时，仅显示不同之处。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id=\"参数\"> 参数</h2>\n<ul>\n<li>文件1：指定要比较的第一个文件；</li>\n<li>文件2：指定要比较的第二个文件。</li>\n</ul>\n<h2 id=\"功能\"> 功能</h2>\n<p>diff命令能比较单个文件或者目录内容。如果指定比较的是文件，则只有当输入为文本文件时才有效。以逐行的方式，比较文本文件的异同处。如果指定比较的是目录的时候，diff命令会比较两个目录下名字相同的文本文件。列出不同的二进制文件、公共子目录和只在一个目录出现的文件。</p>\n<h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）比较两个文件</p>\n<div><pre><code># diff log2014.log log2013.log \n3c3\n&lt; 2014-03\n---\n&gt; 2013-03\n8c8\n&lt; 2013-07\n---\n&gt; 2013-08\n11,12d10\n&lt; 2013-11\n&lt; 2013-12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>说明：</p>\n<p>上面的“3c3”和“8c8”表示log2014.log和log20143log文件在3行和第8行内容有所不同；&quot;11,12d10&quot;表示第一个文件比第二个文件多了第11和12行。</p>\n<p>diff 的normal 显示格式有三种提示:</p>\n<p>a - add</p>\n<p>c - change</p>\n<p>d - delete</p>\n<p>2）并排格式输出</p>\n<div><pre><code># diff log2014.log log2013.log  -y -W 50\n2013-01                 2013-01\n2013-02                 2013-02\n2014-03               | 2013-03\n2013-04                 2013-04\n2013-05                 2013-05\n2013-06                 2013-06\n2013-07                 2013-07\n2013-07               | 2013-08\n2013-09                 2013-09\n2013-10                 2013-10\n2013-11               &lt;\n2013-12               &lt;\n# diff log2013.log log2014.log  -y -W 50\n2013-01                 2013-01\n2013-02                 2013-02\n2013-03               | 2014-03\n2013-04                 2013-04\n2013-05                 2013-05\n2013-06                 2013-06\n2013-07                 2013-07\n2013-08               | 2013-07\n2013-09                 2013-09\n                      &gt; 2013-11\n                      &gt; 2013-12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>说明：</p>\n<p>“|”表示前后2个文件内容有不同</p>\n<p>“&lt;”表示后面文件比前面文件少了1行内容</p>\n<p>“&gt;”表示后面文件比前面文件多了1行内容</p>\n<p>3）上下文输出格式</p>\n<div><pre><code># diff log2013.log log2014.log  -c\n*** log2013.log 2012-12-07 16:36:26.000000000 +0800\n--- log2014.log 2012-12-07 18:01:54.000000000 +0800\n***************\n*** 1,10 ****\n  2013-01\n  2013-02\n! 2013-03\n  2013-04\n  2013-05\n  2013-06\n  2013-07\n! 2013-08\n  2013-09\n  2013-10\n--- 1,12 ----\n  2013-01\n  2013-02\n! 2014-03\n  2013-04\n  2013-05\n  2013-06\n  2013-07\n! 2013-07\n  2013-09\n  2013-10\n+ 2013-11\n+ 2013-12\n# diff log2014.log log2013.log  -c\n*** log2014.log 2012-12-07 18:01:54.000000000 +0800\n--- log2013.log 2012-12-07 16:36:26.000000000 +0800\n***************\n*** 1,12 ****\n  2013-01\n  2013-02\n! 2014-03\n  2013-04\n  2013-05\n  2013-06\n  2013-07\n! 2013-07\n  2013-09\n  2013-10\n- 2013-11\n- 2013-12\n--- 1,10 ----\n  2013-01\n  2013-02\n! 2013-03\n  2013-04\n  2013-05\n  2013-06\n  2013-07\n! 2013-08\n  2013-09\n  2013-10\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br></div></div><p>说明：</p>\n<p>这种方式在开头两行作了比较文件的说明，这里有三中特殊字符：</p>\n<p>“＋” 比较的文件的后者比前着多一行</p>\n<p>“－” 比较的文件的后者比前着少一行</p>\n<p>“！” 比较的文件两者有差别的行</p>\n<p>4）统一格式输出</p>\n<div><pre><code># diff log2014.log log2013.log  -u\n--- log2014.log 2012-12-07 18:01:54.000000000 +0800\n+++ log2013.log 2012-12-07 16:36:26.000000000 +0800\n@@ -1,12 +1,10 @@\n 2013-01\n 2013-02\n-2014-03\n+2013-03\n 2013-04\n 2013-05\n 2013-06\n 2013-07\n-2013-07\n+2013-08\n 2013-09\n 2013-10\n-2013-11\n-2013-12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>说明：</p>\n<p>它的第一部分，也是文件的基本信息：</p>\n<p>--- log2014.log 2012-12-07 18:01:54.000000000 +0800</p>\n<p>+++ log2013.log 2012-12-07 16:36:26.000000000 +0800</p>\n<p>&quot;---&quot;表示变动前的文件，&quot;+++&quot;表示变动后的文件。</p>\n<p>第二部分，变动的位置用两个@作为起首和结束。</p>\n<p>@@ -1,12 +1,10 @@</p>\n<p>前面的&quot;-1,12&quot;分成三个部分：减号表示第一个文件（即log2014.log），&quot;1&quot;表示第1行，&quot;12&quot;表示连续12行。合在一起，就表示下面是第一个文件从第1行开始的连续12行。同样的，&quot;+1,10&quot;表示变动后，成为第二个文件从第1行开始的连续10行。</p>\n<p>5）比较文件夹不同</p>\n<div><pre><code># diff test3 test6\nOnly in test6: linklog.log\nOnly in test6: log2012.log\ndiff test3/log2013.log test6/log2013.log\n1,10c1,3\n&lt; 2013-01\n&lt; 2013-02\n&lt; 2013-03\n&lt; 2013-04\n&lt; 2013-05\n&lt; 2013-06\n&lt; 2013-07\n&lt; 2013-08\n&lt; 2013-09\n&lt; 2013-10\n---\n&gt; hostnamebaidu=baidu.com\n&gt; hostnamesina=sina.com\n&gt; hostnames=true\ndiff test3/log2014.log test6/log2014.log\n1,12d0\n&lt; 2013-01\n&lt; 2013-02\n&lt; 2014-03\n&lt; 2013-04\n&lt; 2013-05\n&lt; 2013-06\n&lt; 2013-07\n&lt; 2013-07\n&lt; 2013-09\n&lt; 2013-10\n&lt; 2013-11\n&lt; 2013-12\nOnly in test6: log2015.log\nOnly in test6: log2016.log\nOnly in test6: log2017.log\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>6）比较两个文件不同，并生产补丁</p>\n<div><pre><code># diff -ruN log2013.log log2014.log &gt;patch.log\n# ll\n总计 12\n-rw-r--r-- 2 root root  80 12-07 16:36 log2013.log\n-rw-r--r-- 1 root root  96 12-07 18:01 log2014.log\n-rw-r--r-- 1 root root 248 12-07 21:33 patch.log\n# cat patch.log \n--- log2013.log 2012-12-07 16:36:26.000000000 +0800\n+++ log2014.log 2012-12-07 18:01:54.000000000 +0800\n@@ -1,10 +1,12 @@\n 2013-01\n 2013-02\n-2013-03\n+2014-03\n 2013-04\n 2013-05\n 2013-06\n 2013-07\n-2013-08\n+2013-07\n 2013-09\n 2013-10\n+2013-11\n+2013-12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>7）打补丁</p>\n<div><pre><code># cat log2013.log\n2013-01\n2013-02\n2013-03\n2013-04\n2013-05\n2013-06\n2013-07\n2013-08\n2013-09\n2013-10\n# patch log2013.log patch.log \npatching file log2013.log\n# cat log2013.log \n2013-01\n2013-02\n2014-03\n2013-04\n2013-05\n2013-06\n2013-07\n2013-07\n2013-09\n2013-10\n2013-11\n2013-12\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/12/2814048.html</p>\n<p>http://man.linuxde.net/diff</p>\n",
      "date_published": "2018-07-27T19:05:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（42）-killall",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8842%EF%BC%89-killall/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8842%EF%BC%89-killall/",
      "content_html": "<p>Linux系统中的killall命令用于杀死指定名字的进程（kill processes by name）。我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。</p>\n\n<h2 id=\"语法\"> 语法</h2>\n<p><code>killall(选项)(参数)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-Z 只杀死拥有scontext 的进程\n-e 要求匹配进程名称\n-I 忽略小写\n-g 杀死进程组而不是进程\n-i 交互模式，杀死进程前先询问用户\n-l 列出所有的已知信号名称\n-q 不输出警告信息\n-s 发送指定的信号\n-v 报告信号是否成功发送\n-w 等待进程死亡\n--help 显示帮助信息\n--version 显示版本显示\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id=\"参数\"> 参数</h2>\n<p>进程名称：指定要杀死的进程名称</p>\n<h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）杀死所有同名进程</p>\n<div><pre><code># ps -ef|grep vi\nroot     17581 17398  0 17:51 pts/0    00:00:00 vi test.txt\nroot     17640 17612  0 17:51 pts/2    00:00:00 vi test.log\nroot     17642 17582  0 17:51 pts/1    00:00:00 grep vi\n# killall vi\n# ps -ef|grep vi\nroot     17645 17582  0 17:52 pts/1    00:00:00 grep vi\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>2）向进程发送指定信号</p>\n<div><pre><code># vi &amp; \n[1] 17646[root@localhost ~]# killall -TERM vi\n[1]+  Stopped                 vi\n# vi &amp; \n[2] 17648\n# ps -ef|grep vi\nroot     17646 17582  0 17:54 pts/1    00:00:00 vi\nroot     17648 17582  0 17:54 pts/1    00:00:00 vi\nroot     17650 17582  0 17:55 pts/1    00:00:00 grep vi\n[2]+  Stopped                 vi\n# killall -TERM vi\n# ps -ef|grep vi\nroot     17646 17582  0 17:54 pts/1    00:00:00 vi\nroot     17648 17582  0 17:54 pts/1    00:00:00 vi\nroot     17653 17582  0 17:55 pts/1    00:00:00 grep vi\n# killall -KILL vi\n[1]-  已杀死               vi\n[2]+  已杀死               vi\n# ps -ef|grep vi\nroot     17656 17582  0 17:56 pts/1    00:00:00 grep vi\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>3）把所有的登录后的shell给杀掉</p>\n<div><pre><code># w\n 18:01:03 up 41 days, 18:53,  3 users,  load average: 0.00, 0.00, 0.00USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    10.2.0.68        14:58    9:52   0.10s  0.10s -bash\nroot     pts/1    10.2.0.68        17:51    0.00s  0.02s  0.00s w\nroot     pts/2    10.2.0.68        17:51    9:24   0.01s  0.01s -bash\n# killall -9 bash\n# w\n 18:01:48 up 41 days, 18:54,  1 user,  load average: 0.07, 0.02, 0.00USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT\nroot     pts/0    10.2.0.68        18:01    0.00s  0.01s  0.00s w\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>说明：</p>\n<p>运行命令：killall -9 bash 后，所有bash都会被卡掉了，所以当前所有连接丢失了。需要重新连接并登录。</p>\n<p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/21/2827366.html</p>\n<p>http://man.linuxde.net/killall</p>\n",
      "date_published": "2018-07-27T19:13:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（45）-vmstat",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8845%EF%BC%89-vmstat/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8845%EF%BC%89-vmstat/",
      "content_html": "<p>vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控。他是对系统整体情况进行统计，不足之处是无法对某个进程今次那个深入分析。vmstat工具提供了一种低开销的系统性能观察方式。因为vmstat本身就是低开销工具，在非常高负荷的服务器上，你需要查看并监控系统的健康情况，在控制窗口还是能够使用vmstat命令前，我们先了解下Linux系统中关于物理内存和虚拟内存相关信息。</p>\n\n<p>物理内存和虚拟内存区别：</p>\n<p>我们知道，直接从物理内存读取数据要比从硬盘读写数据要快的多，因此，我们希望所有数据的读取和写入都在内存完成，而内存是有限的，这样就引出了物理内存与虚拟内存的概念。</p>\n<p>物理内存就是系统硬件提供的内存大小，是真正的内存，在linux下还有一个虚拟内存的概念，虚拟内存就是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为交换空间（Swap Space）。</p>\n<p>作为物理内存的扩展，linux会在物理内存不足时，使用交换分区的虚拟内存，更详细的说，就是内核会将暂时不用的内存块信息写到交换空间，这样以来，物理内存得到了释放，这块内存就是用于其目的，当需要用到原始的内容时，这些信息会被重新从交换空间读入物理内存。</p>\n<p>linux的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候讲物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。</p>\n<p>要深入了解linux内存运行机制，需要知道下面提到的几个方面：</p>\n<p>首先，linux系统会不时的进行页面，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，linux也会交换出暂时不用的内存页面。这可以避免等待交互所需的时间。</p>\n<p>其次，linux进行页面交换是有条件的，不时所有页面在不用时都交换到虚拟内存，linux内核根据“最近最经常使用”算法，仅仅将一些不经常使用的页面文件交换到虚拟内存，有时我们会看到这么一个现象：linux物理内存还有很多，但是交换空间也使用了很多。其实，这并不奇怪，例如，一个占用很大内存的进程运行时，需要耗费很多内存资源，此时就会有一些不常用页面文件被交换到虚拟内存中，但后来这个占用很多内存资源的进程结束并释放了很多内存是，刚才被交换出去的页面文件并不会自动的交换进物理内存，除非有这个必要，那么此刻系统物理内存就会空闲很多，同时交换空间也在被使用，就出现了刚才所说的现象了。关于这点，不用担心什么，只要知道是怎么一回事就可以了。</p>\n<p>最后，交换空间的页面在使用时会首先被交换到物理内存，如果此时没有足够的物理内存来容纳这些页面，他们又会被马上交换出去，如此以来，虚拟内存中可能没有足够空间来存储这些交换页面，最终会导致linux出现假死机、服务异常等问题，linux虽然可以在一段时间内自行恢复，但是恢复后的系统已经基本不可用了。</p>\n<p>因此，合理规划和设计linux内存的使用，是非常重要的。</p>\n<p>虚拟内存原理：</p>\n<p>在系统中运行的每个进程都需要使用到内存，但不是每个进程都需要每时每刻使用系统分配的内存空间。当系统运行所需内存超过实际的物理内存，内核会释放某些进程所占用但未使用的部分或所有物理内存，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。</p>\n<p>在linux内存管理中，主要是通过“调页Paging”和“交换Swapping”来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面保留在内存中供进程使用。交换技术是将整个进程，而不是部分页面，全部交换到磁盘上。</p>\n<p>分页（Page）写入磁盘的过程被称作Page-Out，分页（Page）从磁盘重新回到内存的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中（因为已经被Page-Out了），此时就发生了分页错误（Page Fault）。</p>\n<p>当系统内核发现可运行内存变少时，就会通过Page-Out来释放一部分物理内存。尽管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态也被称作thrashing（颠簸）。</p>\n<h2 id=\"语法\"> 语法</h2>\n<p><code>vmstat(选项)(参数)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-a：显示活动内页；\n-f：显示启动后创建的进程总数；\n-m：显示slab信息；\n-n：头信息仅显示一次；\n-s：以表格方式显示事件计数器和内存状态；\n-d：报告磁盘状态；\n-p：显示指定的硬盘分区状态；\n-S：输出信息的单位。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"参数\"> 参数</h2>\n<ul>\n<li>事件间隔：状态信息刷新的时间间隔；</li>\n<li>次数：显示报告的次数。</li>\n</ul>\n<h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）显示虚拟内存使用情况</p>\n<div><pre><code># vmstat 5 6\nprocs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 0      0 3029876 199616 690980    0    0     0     2    3    2  0  0 100  0  0\n 0      0 3029752 199616 690980    0    0     0    41 1009   39  0  0 100  0  0\n 0      0 3029752 199616 690980    0    0     0     3 1004   36  0  0 100  0  0\n 0      0 3029752 199616 690980    0    0     0     4 1004   36  0  0 100  0  0\n 0      0 3029752 199616 690980    0    0     0     6 1003   33  0  0 100  0  0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>说明：</p>\n<p>字段说明：</p>\n<p>Procs（进程）：</p>\n<p>r: 运行队列中进程数量</p>\n<p>b: 等待IO的进程数量</p>\n<p>Memory（内存）：</p>\n<p>swpd: 使用虚拟内存大小</p>\n<p>free: 可用内存大小</p>\n<p>buff: 用作缓冲的内存大小</p>\n<p>cache: 用作缓存的内存大小</p>\n<p>Swap：</p>\n<p>si: 每秒从交换区写到内存的大小</p>\n<p>so: 每秒写入交换区的内存大小</p>\n<p>IO：（现在的Linux版本块的大小为1024bytes）</p>\n<p>bi: 每秒读取的块数</p>\n<p>bo: 每秒写入的块数</p>\n<p>系统：</p>\n<p>in: 每秒中断数，包括时钟中断。</p>\n<p>cs: 每秒上下文切换数。</p>\n<p>CPU（以百分比表示）：</p>\n<p>us: 用户进程执行时间(user time)</p>\n<p>sy: 系统进程执行时间(system time)</p>\n<p>id: 空闲时间(包括IO等待时间),中央处理器的空闲时间 。以百分比表示。</p>\n<p>wa: 等待IO时间</p>\n<p>备注： 如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。如果pi，po 长期不等于0，表示内存不足。如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。Linux在具有高稳定性、可靠性的同时，具有很好的可伸缩性和扩展性，能够针对不同的应用和硬件环境调整，优化出满足当前应用需要的最佳性能。因此企业在维护Linux系统、进行系统调优时，了解系统性能分析工具是至关重要的。</p>\n<p>命令：</p>\n<p>vmstat 5 5</p>\n<p>表示在5秒时间内进行5次采样。将得到一个数据汇总他能够反映真正的系统情况。</p>\n<p>2）显示活跃和非活跃内存</p>\n<div><pre><code># vmstat -a 2 5\nprocs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------\n r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st\n 0  0      0 3029752 387728 513008    0    0     0     2    3    2  0  0 100  0  0\n 0  0      0 3029752 387728 513076    0    0     0     0 1005   34  0  0 100  0  0\n 0  0      0 3029752 387728 513076    0    0     0    22 1004   36  0  0 100  0  0\n 0  0      0 3029752 387728 513076    0    0     0     0 1004   33  0  0 100  0  0\n 0  0      0 3029752 387728 513076    0    0     0     0 1003   32  0  0 100  0  0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>说明：</p>\n<p>使用-a选项显示活跃和非活跃内存时，所显示的内容除增加inact和active外，其他显示内容与例子1相同。</p>\n<p>字段说明：</p>\n<p>Memory（内存）：</p>\n<p>inact: 非活跃内存大小（当使用-a选项时显示）</p>\n<p>active: 活跃的内存大小（当使用-a选项时显示）</p>\n<p>3）查看系统已经fork了多少次</p>\n<div><pre><code># vmstat -f\n     12744849 forks\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>说明：</p>\n<p>这个数据是从/proc/stat中的processes字段里取得的</p>\n<p>4）查看内存使用的详细信息</p>\n<div><pre><code># vmstat -s\n      4043760  total memory\n      1013884  used memory\n       513012  active memory\n       387728  inactive memory\n      3029876  free memory\n       199616  buffer memory\n       690980  swap cache\n      6096656  total swap\n            0  used swap\n      6096656  free swap\n        83587 non-nice user cpu ticks\n          132 nice user cpu ticks\n       278599 system cpu ticks\n    913344692 idle cpu ticks\n       814550 IO-wait cpu ticks\n        10547 IRQ cpu ticks\n        21261 softirq cpu ticks\n            0 stolen cpu ticks\n       310215 pages paged in\n     14254652 pages paged out\n            0 pages swapped in\n            0 pages swapped out\n    288374745 interrupts\n    146680577 CPU context switches\n   1351868832 boot time\n       367291 forks \n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>说明：</p>\n<p>这些信息的分别来自于/proc/meminfo,/proc/stat和/proc/vmstat。</p>\n<p>5）查看磁盘的读/写</p>\n<div><pre><code># vmstat -d\ndisk- ------------reads------------ ------------writes----------- -----IO------\n       total merged sectors      ms  total merged sectors      ms    cur    sec\nram0       0      0       0       0      0      0       0       0      0      0\nram1       0      0       0       0      0      0       0       0      0      0\nram2       0      0       0       0      0      0       0       0      0      0\nram3       0      0       0       0      0      0       0       0      0      0\nram4       0      0       0       0      0      0       0       0      0      0\nram5       0      0       0       0      0      0       0       0      0      0\nram6       0      0       0       0      0      0       0       0      0      0\nram7       0      0       0       0      0      0       0       0      0      0\nram8       0      0       0       0      0      0       0       0      0      0\nram9       0      0       0       0      0      0       0       0      0      0\nram10      0      0       0       0      0      0       0       0      0      0\nram11      0      0       0       0      0      0       0       0      0      0\nram12      0      0       0       0      0      0       0       0      0      0\nram13      0      0       0       0      0      0       0       0      0      0\nram14      0      0       0       0      0      0       0       0      0      0\nram15      0      0       0       0      0      0       0       0      0      0\nsda    33381   6455  615407   63224 2068111 1495416 28508288 15990289      0  10491\nhdc        0      0       0       0      0      0       0       0      0      0\nfd0        0      0       0       0      0      0       0       0      0      0\nmd0        0      0       0       0      0      0       0       0      0      0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>这些信息主要来自于/proc/diskstats.</p>\n<p>merged:表示一次来自于合并的写/读请求,一般系统会把多个连接/邻近的读/写请求合并到一起来操作</p>\n<p>6）查看/dev/sda1磁盘的读/写</p>\n<div><pre><code># df\n文件系统                 1K-块      已用      可用 已用% 挂载点\n/dev/sda3            1119336548  27642068 1034835500   3% /tmpfs                 32978376         0  32978376   0% /dev/shm\n/dev/sda1              1032088     59604    920056   7% /boot\n# vmstat -p /dev/sda1\nsda1          reads   read sectors  writes    requested writes\n               18607    4249978          6         48\n# vmstat -p /dev/sda3\nsda3          reads   read sectors  writes    requested writes\n              429350   35176268   28998789  980301488\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>说明：</p>\n<p>这些信息主要来自于/proc/diskstats。</p>\n<p>reads:来自于这个分区的读的次数。</p>\n<p>read sectors:来自于这个分区的读扇区的次数。</p>\n<p>writes:来自于这个分区的写的次数。</p>\n<p>requested writes:来自于这个分区的写请求次数。</p>\n<p>7）查看系统的slab信息</p>\n<div><pre><code># vmstat -m\nCache                       Num  Total   Size  Pages\nip_conntrack_expect           0      0    136     28\nip_conntrack                  3     13    304     13\nip_fib_alias                 11     59     64     59\nip_fib_hash                  11     59     64     59\nAF_VMCI                       0      0    960      4\nbio_map_info                100    105   1064      7\ndm_mpath                      0      0   1064      7\njbd_4k                        0      0   4096      1\ndm_uevent                     0      0   2608      3\ndm_tio                        0      0     24    144\ndm_io                         0      0     48     77\nscsi_cmd_cache               10     10    384     10\nsgpool-128                   32     32   4096      1\nsgpool-64                    32     32   2048      2\nsgpool-32                    32     32   1024      4\nsgpool-16                    32     32    512      8\nsgpool-8                     45     45    256     15\nscsi_io_context               0      0    112     34\next3_inode_cache          51080  51105    760      5\next3_xattr                   36     88     88     44\njournal_handle               18    144     24    144\njournal_head                 56     80     96     40\nrevoke_table                  4    202     16    202\nrevoke_record                 0      0     32    112\nuhci_urb_priv                 0      0     56     67\nUNIX                         13     33    704     11\nflow_cache                    0      0    128     30\nmsi_cache                    33     59     64     59\ncfq_ioc_pool                 14     90    128     30\ncfq_pool                     12     90    216     18\ncrq_pool                     16     96     80     48\ndeadline_drq                  0      0     80     48\nas_arq                        0      0     96     40\nmqueue_inode_cache            1      4    896      4\nisofs_inode_cache             0      0    608      6\nhugetlbfs_inode_cache         1      7    576      7\nCache                       Num  Total   Size  Pages\next2_inode_cache              0      0    720      5\next2_xattr                    0      0     88     44\ndnotify_cache                 0      0     40     92\ndquot                         0      0    256     15\neventpoll_pwq                 3     53     72     53\neventpoll_epi                 3     20    192     20\ninotify_event_cache           0      0     40     92\ninotify_watch_cache           1     53     72     53\nkioctx                        0      0    320     12\nkiocb                         0      0    256     15\nfasync_cache                  0      0     24    144\nshmem_inode_cache           254    290    768      5\nposix_timers_cache            0      0    128     30\nuid_cache                     0      0    128     30\nip_mrt_cache                  0      0    128     30\ntcp_bind_bucket               3    112     32    112\ninet_peer_cache               0      0    128     30\nsecpath_cache                 0      0     64     59\nxfrm_dst_cache                0      0    384     10\nip_dst_cache                  5     10    384     10\narp_cache                     1     15    256     15\nRAW                           3      5    768      5\nUDP                           5     10    768      5\ntw_sock_TCP                   0      0    192     20\nrequest_sock_TCP              0      0    128     30\nTCP                           4      5   1600      5\nblkdev_ioc                   14    118     64     59\nblkdev_queue                 20     30   1576      5\nblkdev_requests              13     42    272     14\nbiovec-256                    7      7   4096      1\nbiovec-128                    7      8   2048      2\nbiovec-64                     7      8   1024      4\nbiovec-16                     7     15    256     15\nbiovec-4                      7     59     64     59\nbiovec-1                     23    202     16    202\nbio                         270    270    128     30\nutrace_engine_cache           0      0     64     59\nCache                       Num  Total   Size  Pages\nutrace_cache                  0      0     64     59\nsock_inode_cache             33     48    640      6\nskbuff_fclone_cache           7      7    512      7\nskbuff_head_cache           319    390    256     15\nfile_lock_cache               1     22    176     22\nAcpi-Operand               4136   4248     64     59\nAcpi-ParseExt                 0      0     64     59\nAcpi-Parse                    0      0     40     92\nAcpi-State                    0      0     80     48\nAcpi-Namespace             2871   2912     32    112\ndelayacct_cache              81    295     64     59\ntaskstats_cache               4     53     72     53\nproc_inode_cache           1427   1440    592      6\nsigqueue                      0      0    160     24\nradix_tree_node           13166  13188    536      7\nbdev_cache                   23     24    832      4\nsysfs_dir_cache            5370   5412     88     44\nmnt_cache                    26     30    256     15\ninode_cache                2009   2009    560      7\ndentry_cache              60952  61020    216     18\nfilp                        479   1305    256     15\nnames_cache                   3      3   4096      1\navc_node                     14     53     72     53\nselinux_inode_security      994   1200     80     48\nkey_jar                       2     20    192     20\nidr_layer_cache              74     77    528      7\nbuffer_head              164045 164800     96     40\nmm_struct                    51     56    896      4\nvm_area_struct             1142   1958    176     22\nfs_cache                     35    177     64     59\nfiles_cache                  36     55    768      5\nsignal_cache                 72    162    832      9\nsighand_cache                68     84   2112      3\ntask_struct                  76     80   1888      2\nanon_vma                    458    864     24    144\npid                          83    295     64     59\nshared_policy_node            0      0     48     77\nCache                       Num  Total   Size  Pages\nnuma_policy                  37    144     24    144\nsize-131072(DMA)              0      0 131072      1\nsize-131072                   0      0 131072      1\nsize-65536(DMA)               0      0  65536      1\nsize-65536                    1      1  65536      1\nsize-32768(DMA)               0      0  32768      1\nsize-32768                    2      2  32768      1\nsize-16384(DMA)               0      0  16384      1\nsize-16384                    5      5  16384      1\nsize-8192(DMA)                0      0   8192      1\nsize-8192                     7      7   8192      1\nsize-4096(DMA)                0      0   4096      1\nsize-4096                   110    111   4096      1\nsize-2048(DMA)                0      0   2048      2\nsize-2048                   602    602   2048      2\nsize-1024(DMA)                0      0   1024      4\nsize-1024                   344    352   1024      4\nsize-512(DMA)                 0      0    512      8\nsize-512                    433    480    512      8\nsize-256(DMA)                 0      0    256     15\nsize-256                   1139   1155    256     15\nsize-128(DMA)                 0      0    128     30\nsize-64(DMA)                  0      0     64     59\nsize-64                    5639   5782     64     59\nsize-32(DMA)                  0      0     32    112\nsize-128                    801    930    128     30\nsize-32                    3005   3024     32    112\nkmem_cache                  137    137   2688      1\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br></div></div><p>这组信息来自于/proc/slabinfo。</p>\n<p>slab:由于内核会有许多小对象，这些对象构造销毁十分频繁，比如i-node，dentry，这些对象如果每次构建的时候就向内存要一个页(4kb)，而其实只有几个字节，这样就会非常浪费，为了解决这个问题，就引入了一种新的机制来处理在同一个页框中如何分配小存储区，而slab可以对小对象进行分配,这样就不用为每一个对象分配页框，从而节省了空间，内核对一些小对象创建析构很频繁，slab对这些小对象进行缓冲,可以重复利用,减少内存分配次数。</p>\n<p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/25/2833108.html</p>\n<p>http://man.linuxde.net/vmstat</p>\n",
      "date_published": "2018-07-27T19:16:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（46）-iostat",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8846%EF%BC%89-iostat/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8846%EF%BC%89-iostat/",
      "content_html": "<p>Linux系统中的 iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。iostat属于sysstat软件包。可以用yum install sysstat 直接安装。</p>\n\n<h2 id=\"语法\"> 语法</h2>\n<p><code>iostat(选项)(参数)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-c：仅显示CPU使用情况；\n-d：仅显示设备利用率；\n-k：显示状态以千字节每秒为单位，而不使用块每秒；\n-m：显示状态以兆字节每秒为单位；\n-p：仅显示块设备和所有被使用的其他分区的状态；\n-t：显示每个报告产生时的时间；\n-V：显示版号并退出；\n-x：显示扩展状态。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"参数\"> 参数</h2>\n<ul>\n<li>\n<p>间隔时间：每次报告的间隔时间（秒）；</p>\n</li>\n<li>\n<p>次数：显示报告的次数。</p>\n</li>\n</ul>\n<h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）显示所有设备负载情况</p>\n<div><pre><code># iostat \nLinux 2.6.32-696.10.2.el6.x86_64 (dzh-hw-bj3219)        04/04/2018      _x86_64_        (8 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.81    0.03    0.16    0.04    0.07   98.90\n\nDevice:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn\nxvda              0.38         0.10         5.71     729274   43157304\nxvdb             30.95         7.62       686.84   57636578 5194927160\ndm-0             85.98         7.62       686.84   57635962 5194927160\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>说明：</p>\n<p>cpu属性值说明：</p>\n<p>%user：CPU处在用户模式下的时间百分比。</p>\n<p>%nice：CPU处在带NICE值的用户模式下的时间百分比。</p>\n<p>%system：CPU处在系统模式下的时间百分比。</p>\n<p>%iowait：CPU等待输入输出完成时间的百分比。</p>\n<p>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</p>\n<p>%idle：CPU空闲时间百分比。</p>\n<p>备注：如果%iowait的值过高，表示硬盘存在I/O瓶颈，%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。</p>\n<p>2）定时显示所有信息</p>\n<div><pre><code>iostat 2 3\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>每隔 2秒刷新显示，且显示3次</p>\n<p>3）显示指定磁盘信息</p>\n<div><pre><code># iostat -d xvda\nLinux 2.6.32-696.10.2.el6.x86_64 (dzh-hw-bj3219)        04/04/2018      _x86_64_        (8 CPU)\n\nDevice:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn\nxvda              0.38         0.10         5.71     729290   43160264\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>4）显示tty和cpu信息</p>\n<div><pre><code># iostat -t\nLinux 2.6.32-696.10.2.el6.x86_64 (dzh-hw-bj3219)        04/04/2018      _x86_64_        (8 CPU)\n\n04/04/2018 02:25:52 PM\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.81    0.03    0.16    0.04    0.07   98.90\n\nDevice:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn\nxvda              0.38         0.10         5.71     729290   43160960\nxvdb             30.95         7.62       686.87   57637978 5195407104\ndm-0             85.99         7.62       686.87   57637362 5195407104\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>5）以m为单位显示所有信息</p>\n<div><pre><code># iostat -m\nLinux 2.6.32-696.10.2.el6.x86_64 (dzh-hw-bj3219)        04/04/2018      _x86_64_        (8 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.81    0.03    0.16    0.04    0.07   98.90\n\nDevice:            tps    MB_read/s    MB_wrtn/s    MB_read    MB_wrtn\nxvda              0.38         0.00         0.00        356      21075\nxvdb             30.95         0.00         0.34      28143    2536858\ndm-0             85.99         0.00         0.34      28143    2536858\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>6）查看TPS和吞吐量信息</p>\n<div><pre><code># iostat -d -k 1 1 \nLinux 2.6.32-696.10.2.el6.x86_64 (dzh-hw-bj3219)        04/04/2018      _x86_64_        (8 CPU)\n\nDevice:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nxvda              0.38         0.05         2.85     364653   21581388\nxvdb             30.95         3.81       343.44   28819121 2597806052\ndm-0             85.99         3.81       343.44   28818813 2597806052\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>说明：</p>\n<p>tps：该设备每秒的传输次数（Indicate the number of transfers per second that were issued to the device.）。“一次传输”意思是“一次I/O请求”。多个逻辑请求可能会被合并为“一次I/O请求”。“一次传输”请求的大小是未知的。</p>\n<p>kB_read/s：每秒从设备（drive expressed）读取的数据量；</p>\n<p>kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；</p>\n<p>kB_read：读取的总数据量；kB_wrtn：写入的总数量数据量；</p>\n<p>这些单位都为Kilobytes。</p>\n<p>7）查看设备使用率（%util）、响应时间（await）</p>\n<div><pre><code># iostat -d -x -k 1 1 \nLinux 2.6.32-696.10.2.el6.x86_64 (dzh-hw-bj3219)        04/04/2018      _x86_64_        (8 CPU)\n\nDevice:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nxvda              0.00     0.33    0.00    0.38     0.05     2.85    15.16     0.00    3.11    1.94    3.12   1.06   0.04\nxvdb              0.00    55.03    0.13   30.83     3.81   343.45    22.44     0.33   10.74    3.87   10.76   0.12   0.37\ndm-0              0.00     0.00    0.13   85.86     3.81   343.45     8.08     0.33    3.89    3.88    3.89   0.04   0.37\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>说明：</p>\n<p>rrqm/s：  每秒进行 merge 的读操作数目.即 delta(rmerge)/s</p>\n<p>wrqm/s： 每秒进行 merge 的写操作数目.即 delta(wmerge)/s</p>\n<p>r/s：  每秒完成的读 I/O 设备次数.即 delta(rio)/s</p>\n<p>w/s：  每秒完成的写 I/O 设备次数.即 delta(wio)/s</p>\n<p>rsec/s：  每秒读扇区数.即 delta(rsect)/s</p>\n<p>wsec/s： 每秒写扇区数.即 delta(wsect)/s</p>\n<p>rkB/s：  每秒读K字节数.是 rsect/s 的一半,因为每扇区大小为512字节.(需要计算)</p>\n<p>wkB/s：  每秒写K字节数.是 wsect/s 的一半.(需要计算)</p>\n<p>avgrq-sz：平均每次设备I/O操作的数据大小 (扇区).delta(rsect+wsect)/delta(rio+wio)</p>\n<p>avgqu-sz：平均I/O队列长度.即 delta(aveq)/s/1000 (因为aveq的单位为毫秒).</p>\n<p>await：  平均每次设备I/O操作的等待时间 (毫秒).即 delta(ruse+wuse)/delta(rio+wio)</p>\n<p>svctm： 平均每次设备I/O操作的服务时间 (毫秒).即 delta(use)/delta(rio+wio)</p>\n<p>%util： 一秒中有百分之多少的时间用于 I/O 操作,或者说一秒中有多少时间 I/O 队列是非空的，即 delta(use)/s/1000 (因为use的单位为毫秒)</p>\n<p>如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。</p>\n<p>idle小于70% IO压力就较大了，一般读取速度有较多的wait。</p>\n<p>同时可以结合vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比，高过30%时IO压力高)。</p>\n<p>另外 await 的参数也要多和 svctm 来参考。差的过高就一定有 IO 的问题。</p>\n<p>avgqu-sz 也是个做 IO 调优时需要注意的地方，这个就是直接每次操作的数据的大小，如果次数多，但数据拿的小的话，其实 IO 也会很小。如果数据拿的大，才IO 的数据会高。也可以通过 avgqu-sz × ( r/s or w/s ) = rsec/s or wsec/s。也就是讲，读定速度是这个来决定的。</p>\n<p>svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了)，svctm 的大小一般和磁盘性能有关，CPU/内存的负荷也会对其有影响，请求过多也会间接导致 svctm 的增加。await 的大小一般取决于服务时间(svctm) 以及 I/O 队列的长度和 I/O 请求的发出模式。如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；如果 await 远大于 svctm，说明 I/O 队列太长，应用得到的响应时间变慢，如果响应时间超过了用户可以容许的范围，这时可以考虑更换更快的磁盘，调整内核 elevator 算法，优化应用，或者升级 CPU。</p>\n<p>队列长度(avgqu-sz)也可作为衡量系统 I/O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I/O 洪水。</p>\n<p>​       形象的比喻：\n​       r/s+w/s 类似于交款人的总数\n​      平均队列长度(avgqu-sz)类似于单位时间里平均排队人的个数\n​      平均服务时间(svctm)类似于收银员的收款速度\n​      平均等待时间(await)类似于平均每人的等待时间\n​      平均I/O数据(avgrq-sz)类似于平均每人所买的东西多少\n​       I/O 操作率 (%util)类似于收款台前有人排队的时间比例\n​       设备IO操作:总IO(io)/s = r/s(读) +w/s(写) =1.46 + 25.28=26.74\n​      平均每次设备I/O操作只需要0.36毫秒完成,现在却需要10.57毫秒完成，因为发出的\t请求太多(每秒26.74个)，假如请求时同时发出的，可以这样计算平均等待时间:\n​      平均等待时间=单个I/O服务器时间*(1+2+...+请求总数-1)/请求总数\n​       每秒发出的I/0请求很多,但是平均队列就4,表示这些请求比较均匀,大部分处理还是比较及时。</p>\n<p>8）查看cpu状态</p>\n<div><pre><code># iostat -c 1 3\nLinux 2.6.32-696.10.2.el6.x86_64 (dzh-hw-bj3219)        04/04/2018      _x86_64_        (8 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.81    0.03    0.16    0.04    0.07   98.90\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           2.29    0.13    0.38    0.00    0.13   97.07\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           4.32    0.00    0.51    0.13    0.00   95.04\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2012/12/28/2837345.html</p>\n<p>http://man.linuxde.net/iostat</p>\n",
      "date_published": "2018-07-27T19:17:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（49）-lsof",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8849%EF%BC%89-lsof/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8849%EF%BC%89-lsof/",
      "content_html": "<p>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p>\n\n<h2 id=\"语法\"> 语法</h2>\n<p><code>lsof(选项)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-a：列出打开文件存在的进程；\n-c&lt;进程名&gt;：列出指定进程所打开的文件；\n-g：列出GID号进程详情；\n-d&lt;文件号&gt;：列出占用该文件号的进程；\n+d&lt;目录&gt;：列出目录下被打开的文件；\n+D&lt;目录&gt;：递归列出目录下被打开的文件；\n-n&lt;目录&gt;：列出使用NFS的文件；\n-i&lt;条件&gt;：列出符合条件的进程。（4、6、协议、:端口、 @ip ）\n-p&lt;进程号&gt;：列出指定进程号所打开的文件；\n-u：列出UID号进程详情；\n-h：显示帮助信息；\n-v：显示版本信息。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id=\"命令功能\"> 命令功能</h2>\n<p>用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回/恢复删除的文件。是十分方便的系统监视工具，因为 lsof 需要访问核心内存和各种文件，所以需要root用户执行。</p>\n<p>lsof打开的文件可以是：</p>\n<p>1.普通文件</p>\n<p>2.目录</p>\n<p>3.网络文件系统的文件</p>\n<p>4.字符或设备文件</p>\n<p>5.(函数)共享库</p>\n<p>6.管道，命名管道</p>\n<p>7.符号链接</p>\n<p>8.网络文件（例如：NFS file、网络socket，unix域名socket）</p>\n<p>9.还有其它类型的文件，等等</p>\n<h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）无任何参数</p>\n<div><pre><code># lsof\ncommand     PID USER   FD      type             DEVICE     SIZE       NODE NAME\ninit          1 root  cwd       DIR                8,2     4096          2 /\ninit          1 root  rtd       DIR                8,2     4096          2 /\ninit          1 root  txt       REG                8,2    43496    6121706 /sbin/init\ninit          1 root  mem       REG                8,2   143600    7823908 /lib64/ld-2.5.so\ninit          1 root  mem       REG                8,2  1722304    7823915 /lib64/libc-2.5.so\ninit          1 root  mem       REG                8,2    23360    7823919 /lib64/libdl-2.5.so\ninit          1 root  mem       REG                8,2    95464    7824116 /lib64/libselinux.so.1\ninit          1 root  mem       REG                8,2   247496    7823947 /lib64/libsepol.so.1\ninit          1 root   10u     FIFO               0,17                1233 /dev/initctl\nmigration     2 root  cwd       DIR                8,2     4096          2 /\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>说明：</p>\n<p><strong>lsof输出各列信息的意义如下：</strong></p>\n<ul>\n<li>COMMAND：进程的名称</li>\n<li>PID：进程标识符</li>\n<li>PPID：父进程标识符（需要指定-R参数）</li>\n<li>USER：进程所有者</li>\n<li>PGID：进程所属组</li>\n<li>FD：文件描述符，应用程序通过文件描述符识别该文件。</li>\n</ul>\n<p>文件描述符列表：</p>\n<ol>\n<li>cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改</li>\n<li>txt：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序</li>\n<li>lnn：library references (AIX);</li>\n<li>er：FD information error (see NAME column);</li>\n<li>jld：jail directory (FreeBSD);</li>\n<li>ltx：shared library text (code and data);</li>\n<li>mxx ：hex memory-mapped type number xx.</li>\n<li>m86：DOS Merge mapped <a href=\"http://man.linuxde.net/file\" target=\"_blank\" rel=\"noopener noreferrer\">file</a>;</li>\n<li>mem：memory-mapped file;</li>\n<li>mmap：memory-mapped device;</li>\n<li>pd：parent directory;</li>\n<li>rtd：root directory;</li>\n<li><a href=\"http://man.linuxde.net/tr\" target=\"_blank\" rel=\"noopener noreferrer\">tr</a>：kernel trace file (OpenBSD);</li>\n<li>v86  VP/ix mapped file;</li>\n<li>0：表示标准输出</li>\n<li>1：表示标准输入</li>\n<li>2：表示标准错误</li>\n</ol>\n<p>一般在标准输出、标准错误、标准输入后还跟着文件状态模式：</p>\n<ol>\n<li>u：表示该文件被打开并处于读取/写入模式。</li>\n<li>r：表示该文件被打开并处于只读模式。</li>\n<li><a href=\"http://man.linuxde.net/w\" target=\"_blank\" rel=\"noopener noreferrer\">w</a>：表示该文件被打开并处于。</li>\n<li>空格：表示该文件的状态模式为unknow，且没有锁定。</li>\n<li>-：表示该文件的状态模式为unknow，且被锁定。</li>\n</ol>\n<p>同时在文件状态模式后面，还跟着相关的锁：</p>\n<ol>\n<li>N：for a Solaris NFS lock of unknown type;</li>\n<li>r：for <a href=\"http://man.linuxde.net/read\" target=\"_blank\" rel=\"noopener noreferrer\">read</a> lock on part of the file;</li>\n<li>R：for a read lock on the entire file;</li>\n<li>w：for a <a href=\"http://man.linuxde.net/write\" target=\"_blank\" rel=\"noopener noreferrer\">write</a> lock on part of the file;（文件的部分写锁）</li>\n<li>W：for a write lock on the entire file;（整个文件的写锁）</li>\n<li>u：for a read and write lock of any length;</li>\n<li>U：for a lock of unknown type;</li>\n<li>x：for an SCO OpenServer Xenix lock on part      of the file;</li>\n<li>X：for an SCO OpenServer Xenix lock on the      entire file;</li>\n<li>space：if there is no lock.</li>\n</ol>\n<p>文件类型：</p>\n<ol>\n<li>\n<p>DIR：表示目录。</p>\n</li>\n<li>\n<p>CHR：表示字符类型。</p>\n</li>\n<li>\n<p>BLK：块设备类型。</p>\n</li>\n<li>\n<p>UNIX： UNIX 域套接字。</p>\n</li>\n<li>\n<p>FIFO：先进先出 (FIFO) 队列。</p>\n</li>\n<li>\n<p>IPv4：网际协议 (IP) 套接字。</p>\n</li>\n<li>\n<p>DEVICE：指定磁盘的名称</p>\n</li>\n<li>\n<p>SIZE：文件的大小</p>\n</li>\n<li>\n<p>NODE：索引节点（文件在磁盘上的标识）</p>\n</li>\n<li>\n<p>NAME：打开文件的确切名称</p>\n</li>\n</ol>\n<p>2）查看谁正在使用某个文件，也就是说查找某个文件相关的进程</p>\n<div><pre><code># lsof /bin/bash\nCOMMAND   PID USER  FD   TYPE DEVICE   SIZE    NODE NAME\nbash    24159 root txt    REG    8,2 801528 5368780 /bin/bash\nbash    24909 root txt    REG    8,2 801528 5368780 /bin/bash\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>3）递归查看某个目录的文件信息</p>\n<div><pre><code># lsof test/test3\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE    NODE NAME\nbash    24941 root  cwd    DIR    8,2 4096 2258872 test/test3\nvi      24976 root  cwd    DIR    8,2 4096 2258872 test/test3\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>说明：</p>\n<p>使用了+D，对应目录下的所有子目录和文件都会被列出</p>\n<p>4）不使用+D选项，遍历查看某个目录的所有文件信息的方法</p>\n<div><pre><code># lsof |grep &#39;test/test3&#39;\nbash      24941 root  cwd       DIR                8,2     4096    2258872 /opt/soft/test/test3\nvi        24976 root  cwd       DIR                8,2     4096    2258872 /opt/soft/test/test3\nvi        24976 root    4u      REG                8,2    12288    2258882 /opt/soft/test/test3/.log2013.log.swp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>5）列出某个用户打开的文件信息</p>\n<div><pre><code># lsof -u username\n</code></pre>\n<div><span>1</span><br></div></div><p>说明:</p>\n<p>-u 选项，u其实是user的缩写</p>\n<p>6）列出某个程序进程所打开的文件信息</p>\n<div><pre><code># lsof -c mysql\n</code></pre>\n<div><span>1</span><br></div></div><p>说明:</p>\n<p>-c 选项将会列出所有以mysql这个进程开头的程序的文件，其实你也可以写成 lsof | grep mysql, 但是第一种方法明显比第二种方法要少打几个字符了</p>\n<p>7）列出多个进程多个打开的文件信息</p>\n<div><pre><code># lsof -c mysql -c apache\n</code></pre>\n<div><span>1</span><br></div></div><p>8）列出某个用户以及某个进程所打开的文件信息</p>\n<div><pre><code># lsof  -u test -c mysql \n</code></pre>\n<div><span>1</span><br></div></div><p>9）列出除了某个用户外的被打开的文件信息</p>\n<div><pre><code># lsof -u ^root\n</code></pre>\n<div><span>1</span><br></div></div><p>说明：</p>\n<p>^这个符号在用户名之前，将会把是root用户打开的进程不让显示</p>\n<p>10）通过某个进程号显示该进行打开的文件</p>\n<div><pre><code># lsof -p 1\n</code></pre>\n<div><span>1</span><br></div></div><p>11）列出多个进程号对应的文件信息</p>\n<div><pre><code># lsof -p 1,2,3\n</code></pre>\n<div><span>1</span><br></div></div><p>12）列出除了某个进程号，其他进程号所打开的文件信息</p>\n<div><pre><code># lsof -p ^1\n</code></pre>\n<div><span>1</span><br></div></div><p>13）列出所有的网络连接</p>\n<div><pre><code># lsof -i\n</code></pre>\n<div><span>1</span><br></div></div><p>14）列出所有tcp 网络连接信息</p>\n<div><pre><code># lsof -i tcp\n</code></pre>\n<div><span>1</span><br></div></div><p>15）列出所有udp网络连接信息</p>\n<div><pre><code># lsof -i udp\n</code></pre>\n<div><span>1</span><br></div></div><p>16）列出谁在使用某个端口</p>\n<div><pre><code># lsof -i :3306\n</code></pre>\n<div><span>1</span><br></div></div><p>17）列出谁在使用某个特定的udp端口</p>\n<div><pre><code># lsof -i udp:55\n</code></pre>\n<div><span>1</span><br></div></div><p>18）特定的tcp端口</p>\n<div><pre><code># lsof -i tcp:80\n</code></pre>\n<div><span>1</span><br></div></div><p>19）列出某个用户的所有活跃的网络端口</p>\n<div><pre><code># lsof -a -u test -i\n</code></pre>\n<div><span>1</span><br></div></div><p>20）列出所有网络文件系统</p>\n<div><pre><code># lsof -N\n</code></pre>\n<div><span>1</span><br></div></div><p>21）域名socket文件</p>\n<div><pre><code># lsof -u\n</code></pre>\n<div><span>1</span><br></div></div><p>22）某个用户组所打开的文件信息</p>\n<div><pre><code># lsof -g 5555\n</code></pre>\n<div><span>1</span><br></div></div><p>23）根据文件描述列出对应的文件信息</p>\n<div><pre><code># lsof -d description(like 2)\n# lsof  -d  txt\n# lsof  -d  1\n# lsof  -d  2\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>说明：</p>\n<p>0表示标准输入，1表示标准输出，2表示标准错误，从而可知：所以大多数应用程序所打开的文件的 FD 都是从 3 开始</p>\n<p>24）根据文件描述范围列出文件信息</p>\n<div><pre><code># lsof -d 2-3\n</code></pre>\n<div><span>1</span><br></div></div><p>25）列出COMMAND列中包含字符串&quot; sshd&quot;，且文件描符的类型为txt的文件信息</p>\n<div><pre><code># lsof -c sshd -a -d txt\nCOMMAND   PID USER  FD   TYPE DEVICE   SIZE    NODE NAME\nsshd     2756 root txt    REG    8,2 409488 1027867 /usr/sbin/sshd\nsshd    24155 root txt    REG    8,2 409488 1027867 /usr/sbin/sshd\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>26）列出被进程号为1234的进程所打开的所有IPV4 network files</p>\n<div><pre><code># lsof -i 4 -a -p 1234\n</code></pre>\n<div><span>1</span><br></div></div><p>27）列出目前连接主机peida.linux上端口为：20，21，22，25，53，80相关的所有文件信息，且每隔3秒不断的执行lsof指令</p>\n<div><pre><code># lsof -i @peida.linux:20,21,22,25,53,80  -r  3\n</code></pre>\n<div><span>1</span><br></div></div><p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2013/02/26/2932972.html</p>\n<p>https://man.linuxde.net/lsof</p>\n",
      "date_published": "2018-07-27T19:20:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（52）-ping",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8852%EF%BC%89-ping/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8852%EF%BC%89-ping/",
      "content_html": "<p>Linux系统的ping命令是常用的网络命令，它通常用来测试与目标主机的连通性，我们经常会说“ping一下某机器，看是不是开着”、不能打开网页时会说“你先ping网关地址192.168.1.1试试”。它通过发送ICMP ECHO_REQUEST数据包到网络主机（send ICMP ECHO_REQUEST to network hosts），并显示响应情况，这样我们就可以根据它输出的信息来确定目标主机是否可访问（但这不是绝对的）。有些服务器为了防止通过ping探测到，通过防火墙设置了禁止ping或者在内核参数中禁止ping，这样就不能通过ping确定该主机是否还处于开启状态。</p>\n\n<p>linux下的ping和windows下的ping稍有区别,linux下ping不会自动终止,需要按ctrl+c终止或者用参数-c指定要求完成的回应次数。</p>\n<h2 id=\"语法\"> 语法</h2>\n<p><code>ping(选项)(参数)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-d：使用Socket的SO_DEBUG功能；\n-c&lt;完成次数&gt;：设置完成要求回应的次数；\n-f：极限检测；\n-i&lt;间隔秒数&gt;：指定收发信息的间隔时间；\n-I&lt;网络界面&gt;：使用指定的网络界面送出数据包；\n-l&lt;前置载入&gt;：设置在送出要求信息之前，先行发出的数据包；\n-n：只输出数值；\n-p&lt;范本样式&gt;：设置填满数据包的范本样式；\n-q：不显示指令执行过程，开头和结尾的相关信息除外；\n-r：忽略普通的Routing Table，直接将数据包送到远端主机上；\n-R：记录路由过程；\n-s&lt;数据包大小&gt;：设置数据包的大小；\n-t&lt;存活数值&gt;：设置存活数值TTL的大小；\n-v：详细显示指令的执行过程。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id=\"参数\"> 参数</h2>\n<p>目的主机：指定发送ICMP报文的目的主机。</p>\n<h2 id=\"功能\"> 功能</h2>\n<p>ping命令用于：确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络。如果主机正在运行并连在网上，它就对回送信号进行响应。每个回送信号请求包含一个网际协议（IP）和 ICMP 头，后面紧跟一个 tim 结构，以及来填写这个信息包的足够的字节。缺省情况是连续发送回送信号请求直到接收到中断信号（Ctrl-C）。</p>\n<p>ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和(信息)包丢失情况的统计信息，并且在完成之后显示一个简要总结。ping 命令在程序超时或当接收到 SIGINT 信号时结束。Host 参数或者是一个有效的主机名或者是因特网地址。</p>\n<h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）ping的通的情况</p>\n<div><pre><code># ping 192.168.120.205\nPING 192.168.120.205 (192.168.120.205) 56(84) bytes of data.\n64 bytes from 192.168.120.205: icmp_seq=1 ttl=64 time=0.720 ms\n64 bytes from 192.168.120.205: icmp_seq=2 ttl=64 time=0.181 ms\n--- 192.168.120.205 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4000ms\nrtt min/avg/max/mdev = 0.181/0.293/0.720/0.214 ms\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>2）ping不同的情况</p>\n<div><pre><code># ping 192.168.120.202\nPING 192.168.120.202 (192.168.120.202) 56(84) bytes of data.\nFrom 192.168.120.204 icmp_seq=1 Destination Host Unreachable\nFrom 192.168.120.204 icmp_seq=2 Destination Host Unreachable\n-- 192.168.120.202 ping statistics ---\n8 packets transmitted, 0 received, +6 errors, 100% packet loss, time 7005ms\n, pipe 4\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>3）ping指定次数</p>\n<div><pre><code># ping -c 10 192.168.120.206\nPING 192.168.120.206 (192.168.120.206) 56(84) bytes of data.\n64 bytes from 192.168.120.206: icmp_seq=1 ttl=64 time=1.25 ms\n64 bytes from 192.168.120.206: icmp_seq=2 ttl=64 time=0.260 ms\n64 bytes from 192.168.120.206: icmp_seq=3 ttl=64 time=0.242 ms\n64 bytes from 192.168.120.206: icmp_seq=4 ttl=64 time=0.271 ms\n64 bytes from 192.168.120.206: icmp_seq=5 ttl=64 time=0.274 ms\n64 bytes from 192.168.120.206: icmp_seq=6 ttl=64 time=0.295 ms\n64 bytes from 192.168.120.206: icmp_seq=7 ttl=64 time=0.269 ms\n64 bytes from 192.168.120.206: icmp_seq=8 ttl=64 time=0.270 ms\n64 bytes from 192.168.120.206: icmp_seq=9 ttl=64 time=0.253 ms\n64 bytes from 192.168.120.206: icmp_seq=10 ttl=64 time=0.289 ms\n\n--- 192.168.120.206 ping statistics ---\n10 packets transmitted, 10 received, 0% packet loss, time 9000ms\nrtt min/avg/max/mdev = 0.242/0.367/1.251/0.295 ms\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>4）时间间隔和次数限制的ping</p>\n<div><pre><code># ping -c 10 -i 0.5 192.168.120.206\nPING 192.168.120.206 (192.168.120.206) 56(84) bytes of data.\n64 bytes from 192.168.120.206: icmp_seq=1 ttl=64 time=1.24 ms\n64 bytes from 192.168.120.206: icmp_seq=2 ttl=64 time=0.235 ms\n64 bytes from 192.168.120.206: icmp_seq=3 ttl=64 time=0.244 ms\n64 bytes from 192.168.120.206: icmp_seq=4 ttl=64 time=0.300 ms\n64 bytes from 192.168.120.206: icmp_seq=5 ttl=64 time=0.255 ms\n64 bytes from 192.168.120.206: icmp_seq=6 ttl=64 time=0.264 ms\n64 bytes from 192.168.120.206: icmp_seq=7 ttl=64 time=0.263 ms\n64 bytes from 192.168.120.206: icmp_seq=8 ttl=64 time=0.331 ms\n64 bytes from 192.168.120.206: icmp_seq=9 ttl=64 time=0.247 ms\n64 bytes from 192.168.120.206: icmp_seq=10 ttl=64 time=0.244 ms\n\n--- 192.168.120.206 ping statistics ---\n10 packets transmitted, 10 received, 0% packet loss, time 4499ms\nrtt min/avg/max/mdev = 0.235/0.362/1.241/0.294 ms\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>5）多参数使用</p>\n<div><pre><code># ping -i 3 -s 1024 -t 255 192.168.120.206\nPING 192.168.120.206 (192.168.120.206) 1024(1052) bytes of data.\n1032 bytes from 192.168.120.206: icmp_seq=1 ttl=64 time=1.99 ms\n1032 bytes from 192.168.120.206: icmp_seq=2 ttl=64 time=0.694 ms\n1032 bytes from 192.168.120.206: icmp_seq=3 ttl=64 time=0.300 ms\n1032 bytes from 192.168.120.206: icmp_seq=4 ttl=64 time=0.481 ms\n1032 bytes from 192.168.120.206: icmp_seq=5 ttl=64 time=0.415 ms\n1032 bytes from 192.168.120.206: icmp_seq=6 ttl=64 time=0.600 ms\n1032 bytes from 192.168.120.206: icmp_seq=7 ttl=64 time=0.411 ms\n1032 bytes from 192.168.120.206: icmp_seq=8 ttl=64 time=0.281 ms\n1032 bytes from 192.168.120.206: icmp_seq=9 ttl=64 time=0.318 ms\n1032 bytes from 192.168.120.206: icmp_seq=10 ttl=64 time=0.362 ms\n1032 bytes from 192.168.120.206: icmp_seq=11 ttl=64 time=0.408 ms\n1032 bytes from 192.168.120.206: icmp_seq=12 ttl=64 time=0.445 ms\n1032 bytes from 192.168.120.206: icmp_seq=13 ttl=64 time=0.397 ms\n1032 bytes from 192.168.120.206: icmp_seq=14 ttl=64 time=0.406 ms\n1032 bytes from 192.168.120.206: icmp_seq=15 ttl=64 time=0.458 ms\n\n--- 192.168.120.206 ping statistics ---\n15 packets transmitted, 15 received, 0% packet loss, time 41999ms\nrtt min/avg/max/mdev = 0.281/0.531/1.993/0.404 ms\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>说明：</p>\n<p>-i 3 发送周期为 3秒 -s 设置发送包的大小为1024 -t 设置TTL值为 255</p>\n<p>参考链接：</p>\n<p>http://man.linuxde.net/ping</p>\n<p>http://www.cnblogs.com/peida/archive/2013/03/06/2945407.html</p>\n",
      "date_published": "2018-07-27T19:23:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "每天一个linux命令（53）-traceroute",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8853%EF%BC%89-traceroute/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8853%EF%BC%89-traceroute/",
      "content_html": "<p>通过traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。linux系统中，我们称之为traceroute,在MS Windows中为tracert。 traceroute通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。</p>\n\n<p>在大多数情况下，我们会在linux主机系统下，直接执行命令行：</p>\n<p>traceroute hostname</p>\n<p>而在Windows系统下是执行tracert的命令：</p>\n<p>tracert hostname</p>\n<h2 id=\"语法\"> 语法</h2>\n<p><code>traceroute(选项)(参数)</code></p>\n<h2 id=\"选项\"> 选项</h2>\n<div><pre><code>-d：使用Socket层级的排错功能；\n-f&lt;存活数值&gt;：设置第一个检测数据包的存活数值TTL的大小；\n-F：设置勿离断位；\n-g&lt;网关&gt;：设置来源路由网关，最多可设置8个；\n-i&lt;网络界面&gt;：使用指定的网络界面送出数据包；\n-I：使用ICMP回应取代UDP资料信息；\n-m&lt;存活数值&gt;：设置检测数据包的最大存活数值TTL的大小；\n-n：直接使用IP地址而非主机名称；\n-p&lt;通信端口&gt;：设置UDP传输协议的通信端口；\n-r：忽略普通的Routing Table，直接将数据包送到远端主机上。\n-s&lt;来源地址&gt;：设置本地主机送出数据包的IP地址；\n-t&lt;服务类型&gt;：设置检测数据包的TOS数值；\n-v：详细显示指令的执行过程；\n-w&lt;超时秒数&gt;：设置等待远端主机回报的时间；\n-x：开启或关闭数据包的正确性检验。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"参数\"> 参数</h2>\n<p>主机：指定目的主机IP地址或主机名。</p>\n<h2 id=\"功能\"> 功能</h2>\n<p>traceroute指令让你追踪网络数据包的路由途径，预设数据包大小是40Bytes，用户可另行设置。</p>\n<p>具体参数格式：traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;...][-i&lt;网络界面&gt;][-m&lt;存活数值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主机名称或IP地址][数据包大小]</p>\n<h2 id=\"常用实例\"> 常用实例</h2>\n<p>1）traceroute 用法简单、最常用的用法</p>\n<div><pre><code># traceroute www.baidu.com\ntraceroute to www.baidu.com (61.135.169.125), 30 hops max, 40 byte packets\n 1  192.168.74.2 (192.168.74.2)  2.606 ms  2.771 ms  2.950 ms\n 2  211.151.56.57 (211.151.56.57)  0.596 ms  0.598 ms  0.591 ms\n 3  211.151.227.206 (211.151.227.206)  0.546 ms  0.544 ms  0.538 ms\n 4  210.77.139.145 (210.77.139.145)  0.710 ms  0.748 ms  0.801 ms\n 5  202.106.42.101 (202.106.42.101)  6.759 ms  6.945 ms  7.107 ms\n 6  61.148.154.97 (61.148.154.97)  718.908 ms * bt-228-025.bta.net.cn (202.106.228.25)  5.177 ms\n 7  124.65.58.213 (124.65.58.213)  4.343 ms  4.336 ms  4.367 ms\n 8  202.106.35.190 (202.106.35.190)  1.795 ms 61.148.156.138 (61.148.156.138)  1.899 ms  1.951 ms\n 9  * * *\n30  * * *\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>说明：</p>\n<p>记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 4 www.58.com ，表示向每个网关发送4个数据包。</p>\n<p>有时我们traceroute 一台主机时，会看到有一些行是以星号表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。</p>\n<p>有时我们在某一网关处延时比较长，有可能是某台网关比较阻塞，也可能是物理设备本身的原因。当然如果某台DNS出现问题时，不能解析主机名、域名时，也会 有延时长的现象；您可以加-n 参数来避免DNS解析，以IP格式输出数据。</p>\n<p>如果在局域网中的不同网段之间，我们可以通过traceroute 来排查问题所在，是主机的问题还是网关的问题。如果我们通过远程来访问某台服务器遇到问题时，我们用到traceroute 追踪数据包所经过的网关，提交IDC服务商，也有助于解决问题；但目前看来在国内解决这样的问题是比较困难的，就是我们发现问题所在，IDC服务商也不可能帮助我们解决。</p>\n<p>2）跳数设置</p>\n<div><pre><code># traceroute -m 10 www.baidu.com\ntraceroute to www.baidu.com (61.135.169.105), 10 hops max, 40 byte packets\n 1  192.168.74.2 (192.168.74.2)  1.534 ms  1.775 ms  1.961 ms\n 2  211.151.56.1 (211.151.56.1)  0.508 ms  0.514 ms  0.507 ms\n 3  211.151.227.206 (211.151.227.206)  0.571 ms  0.558 ms  0.550 ms\n 4  210.77.139.145 (210.77.139.145)  0.708 ms  0.729 ms  0.785 ms\n 5  202.106.42.101 (202.106.42.101)  7.978 ms  8.155 ms  8.311 ms\n 6  bt-228-037.bta.net.cn (202.106.228.37)  772.460 ms bt-228-025.bta.net.cn (202.106.228.25)  2.152 ms 61.148.154.97 (61.148.154.97)  772.107 ms\n 7  124.65.58.221 (124.65.58.221)  4.875 ms 61.148.146.29 (61.148.146.29)  2.124 ms 124.65.58.221 (124.65.58.221)  4.854 ms\n 8  123.126.6.198 (123.126.6.198)  2.944 ms 61.148.156.6 (61.148.156.6)  3.505 ms 123.126.6.198 (123.126.6.198)  2.885 ms\n 9  * * *\n10  * * *\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>3）显示IP地址，不查主机名</p>\n<div><pre><code># traceroute -n www.baidu.com\ntraceroute to www.baidu.com (61.135.169.125), 30 hops max, 40 byte packets\n 1  211.151.74.2  5.430 ms  5.636 ms  5.802 ms\n 2  211.151.56.57  0.627 ms  0.625 ms  0.617 ms\n 3  211.151.227.206  0.575 ms  0.584 ms  0.576 ms\n 4  210.77.139.145  0.703 ms  0.754 ms  0.806 ms\n 5  202.106.42.101  23.683 ms  23.869 ms  23.998 ms\n 6  202.106.228.37  247.101 ms * *\n 7  61.148.146.29  5.256 ms 124.65.58.213  4.386 ms  4.373 ms\n 8  202.106.35.190  1.610 ms 61.148.156.138  1.786 ms 61.148.3.34  2.089 ms\n 9  * * *\n30  * * *\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>4）探测包使用的基本UDP端口设置6888</p>\n<div><pre><code># traceroute -p 6888 www.baidu.com\ntraceroute to www.baidu.com (220.181.111.147), 30 hops max, 40 byte packets\n 1  211.151.74.2 (211.151.74.2)  4.927 ms  5.121 ms  5.298 ms\n 2  211.151.56.1 (211.151.56.1)  0.500 ms  0.499 ms  0.509 ms\n 3  211.151.224.90 (211.151.224.90)  0.637 ms  0.631 ms  0.641 ms\n 4  * * *\n 5  220.181.70.98 (220.181.70.98)  5.050 ms  5.313 ms  5.596 ms\n 6  220.181.17.94 (220.181.17.94)  1.665 ms !X * *\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>5）把探测包的个数设置为值4</p>\n<div><pre><code># traceroute -q 4 www.baidu.com\ntraceroute to www.baidu.com (61.135.169.125), 30 hops max, 40 byte packets\n 1  211.151.74.2 (211.151.74.2)  40.633 ms  40.819 ms  41.004 ms  41.188 ms\n 2  211.151.56.57 (211.151.56.57)  0.637 ms  0.633 ms  0.627 ms  0.619 ms\n 3  211.151.227.206 (211.151.227.206)  0.505 ms  0.580 ms  0.571 ms  0.569 ms\n 4  210.77.139.145 (210.77.139.145)  0.753 ms  0.800 ms  0.853 ms  0.904 ms\n 5  202.106.42.101 (202.106.42.101)  7.449 ms  7.543 ms  7.738 ms  7.893 ms\n 6  61.148.154.97 (61.148.154.97)  316.817 ms bt-228-025.bta.net.cn (202.106.228.25)  3.695 ms  3.672 ms *\n 7  124.65.58.213 (124.65.58.213)  3.056 ms  2.993 ms  2.960 ms 61.148.146.29 (61.148.146.29)  2.837 ms\n 8  61.148.3.34 (61.148.3.34)  2.179 ms  2.295 ms  2.442 ms 202.106.35.190 (202.106.35.190)  7.136 ms\n 9  * * * *\n30  * * * *\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>6）绕过正常的路由表，直接发送到网络相连的主机</p>\n<div><pre><code># traceroute -r www.baidu.com\ntraceroute to www.baidu.com (61.135.169.125), 30 hops max, 40 byte packets\nconnect: 网络不可达\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>7）把对外发探测包的等待响应时间设置为3秒</p>\n<div><pre><code># traceroute -w 3 www.baidu.com\ntraceroute to www.baidu.com (61.135.169.105), 30 hops max, 40 byte packets\n 1  211.151.74.2 (211.151.74.2)  2.306 ms  2.469 ms  2.650 ms\n 2  211.151.56.1 (211.151.56.1)  0.621 ms  0.613 ms  0.603 ms\n 3  211.151.227.206 (211.151.227.206)  0.557 ms  0.560 ms  0.552 ms\n 4  210.77.139.145 (210.77.139.145)  0.708 ms  0.761 ms  0.817 ms\n 5  202.106.42.101 (202.106.42.101)  7.520 ms  7.774 ms  7.902 ms\n 6  bt-228-025.bta.net.cn (202.106.228.25)  2.890 ms  2.369 ms 61.148.154.97 (61.148.154.97)  471.961 ms\n 7  124.65.58.221 (124.65.58.221)  4.490 ms  4.483 ms  4.472 ms\n 8  123.126.6.198 (123.126.6.198)  2.948 ms 61.148.156.6 (61.148.156.6)  7.688 ms  7.756 ms\n 9  * * *\n30  * * *\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>说明：</p>\n<p>Traceroute的工作原理：</p>\n<p>Traceroute最简单的基本用法是：traceroute hostname</p>\n<p>Traceroute程序的设计是利用ICMP及IP header的TTL（Time To Live）栏位（field）。首先，traceroute送出一个TTL是1的IP datagram（其实，每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器（router）收到这个datagram时，它将TTL减1。此时，TTL变为0了，所以该路由器会将此datagram丢掉，并送回一个「ICMP time exceeded」消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着traceroute 再送出另一个TTL是2 的datagram，发现第2 个路由器...... traceroute 每次将送出的datagram的TTL 加1来发现另一个路由器，这个重复的动作一直持续到某个datagram 抵达目的地。当datagram到达目的地后，该主机并不会送回ICMP time exceeded消息，因为它已是目的地了，那么traceroute如何得知目的地到达了呢？</p>\n<p>Traceroute在送出UDP datagrams到目的地时，它所选择送达的port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当traceroute 收到这个消息时，便知道目的地已经到达了。所以traceroute 在Server端也是没有所谓的Daemon 程式。</p>\n<p>Traceroute提取发 ICMP TTL到期消息设备的IP地址并作域名解析。每次 ，Traceroute都打印出一系列数据,包括所经过的路由设备的域名及 IP地址,三个包每次来回所花时间。</p>\n<p>windows之tracert:</p>\n<p>格式：</p>\n<p>​\ttracert [-d] [-h maximum_hops] [-j host-list] [-w timeout] target_name</p>\n<p>参数说明：</p>\n<p>tracert [-d] [-h maximum_hops] [-j computer-list] [-w timeout] target_name</p>\n<p>该诊断实用程序通过向目的地发送具有不同生存时间 (TL) 的 Internet 控制信息协议 (CMP) 回应报文，以确定至目的地的路由。路径上的每个路由器都要在转发该 ICMP 回应报文之前将其 TTL 值至少减 1，因此 TTL 是有效的跳转计数。当报文的 TTL 值减少到 0 时，路由器向源系统发回 ICMP 超时信息。通过发送 TTL 为 1 的第一个回应报文并且在随后的发送中每次将 TTL 值加 1，直到目标响应或达到最大 TTL 值，Tracert 可以确定路由。通过检查中间路由器发发回的 ICMP 超时 (ime Exceeded) 信息，可以确定路由器。注意，有些路由器“安静”地丢弃生存时间 (TLS) 过期的报文并且对 tracert 无效。</p>\n<p>参数：</p>\n<p>-d 指定不对计算机名解析地址。</p>\n<p>-h maximum_hops 指定查找目标的跳转的最大数目。</p>\n<p>-jcomputer-list 指定在 computer-list 中松散源路由。</p>\n<p>-w timeout 等待由 timeout 对每个应答指定的毫秒数。</p>\n<p>target_name 目标计算机的名称。</p>\n<p>实例：</p>\n<div><pre><code>C:\\Users\\Administrator&gt;tracert www.58.com\n\nTracing route to www.58.com [221.187.111.30]\nover a maximum of 30 hops:\n\n  1     1 ms     1 ms     1 ms  10.58.156.1\n  2     1 ms    &lt;1 ms    &lt;1 ms  10.10.10.1\n  3     1 ms     1 ms     1 ms  211.103.193.129\n  4     2 ms     2 ms     2 ms  10.255.109.129\n  5     1 ms     1 ms     3 ms  124.205.98.205\n  6     2 ms     2 ms     2 ms  124.205.98.253\n  7     2 ms     6 ms     1 ms  202.99.1.125\n  8     5 ms     6 ms     5 ms  118.186.0.113\n  9   207 ms     *        *     118.186.0.106\n 10     8 ms     6 ms    11 ms  124.238.226.201\n 11     6 ms     7 ms     6 ms  219.148.19.177\n 12    12 ms    12 ms    16 ms  219.148.18.117\n 13    14 ms    17 ms    16 ms  219.148.19.125\n 14    13 ms    13 ms    12 ms  202.97.80.113\n 15     *        *        *     Request timed out.\n 16    12 ms    12 ms    17 ms  bj141-147-82.bjtelecom.net [219.141.147.82]\n 17    13 ms    13 ms    12 ms  202.97.48.2\n 18     *        *        *     Request timed out.\n 19    14 ms    14 ms    12 ms  221.187.224.85\n 20    15 ms    13 ms    12 ms  221.187.104.2\n 21     *        *        *     Request timed out.\n 22    15 ms    17 ms    18 ms  221.187.111.30\n\nTrace complete.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>参考链接：</p>\n<p>http://www.cnblogs.com/peida/archive/2013/03/07/2947326.html</p>\n<p>http://man.linuxde.net/traceroute</p>\n",
      "date_published": "2018-07-27T19:24:00.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "白天做运维，晚上搞副业赚钱",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/%E7%99%BD%E5%A4%A9%E5%81%9A%E8%BF%90%E7%BB%B4%EF%BC%8C%E6%99%9A%E4%B8%8A%E6%90%9E%E5%89%AF%E4%B8%9A%E8%B5%9A%E9%92%B1/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/other/%E5%BE%85%E6%95%B4%E7%90%86/%E7%99%BD%E5%A4%A9%E5%81%9A%E8%BF%90%E7%BB%B4%EF%BC%8C%E6%99%9A%E4%B8%8A%E6%90%9E%E5%89%AF%E4%B8%9A%E8%B5%9A%E9%92%B1/",
      "content_html": "<h1 id=\"白天做运维-晚上搞副业赚钱\"> 白天做运维，晚上搞副业赚钱</h1>\n<p>作为 <code>运维工程师</code>，除了固定工作外，你有想过副业变现提升收入吗？</p>\n<p>谁不想凭自己的努力赚点钱，让自己和家人过得更好呢？</p>\n<h2 id=\"_1-送外卖-写公号-录教程\"> 1 送外卖？写公号？录教程？</h2>\n<p>你有对副业变现，增加收入，有深入研究么？</p>\n<h3 id=\"_1-1-送外卖-卖血汗\"> 1.1 送外卖，卖血汗？</h3>\n<p>No，这个并不合适我，我第一次送外卖，就骑电动车摔了，摔了好几处伤，恢复了一个月，还把手机摔坏了，总共送了两单，赚了20元，很显然，不适合我。</p>\n<h3 id=\"_1-2-写公众号-然后接广告\"> 1.2 写公众号，然后接广告？</h3>\n<p>可以，我看IT大佬<code>程序员小灰</code>说道，公众号仍然是所有自媒体中变现最好的方式，没有之一。</p>\n<p>当然，可以肯定的是，想短时间内去涨粉，实在太难了！</p>\n<p>我三年前，刚入<code>运维</code>行业时，写过公众号，但基本圈不了粉，后来也就没再推广过，我记得粉丝只有20人，其中大多数是我的亲戚，同学等（失败啊~~）。</p>\n<h3 id=\"_1-3-录教程-直接卖\"> 1.3 录教程，直接卖？</h3>\n<p>直说吧，挑战非常大！当你立志想输出一套 NX 的课程，那你对技术的理解就不再是表层上简单应用了，比如某技术深层次实现原理、系统架构设计是否合理、是否满足高可用、高性能、高并发等特殊场景？对吧？</p>\n<p>目前在线还没有这个实力~~~</p>\n<h2 id=\"_2-如何才能更好落地-赚更多的钱\"> 2 如何才能更好落地？赚更多的钱？</h2>\n<p>作为运维人员，我不建议大家兼职送外卖，如果没有很深的功底，也不建议大家录教程。</p>\n<p>我建议大家写公众号，<strong>要知道，写作确实是一个倒逼自己提升自己能力的很好方式！</strong></p>\n<p>而且还有以下好处：</p>\n<ul>\n<li>沉淀自己的知识体系</li>\n<li>方式自己回来查阅</li>\n<li>求职加分项</li>\n</ul>\n<h2 id=\"_3-如何运营自己的公众号\"> 3 如何运营自己的公众号？</h2>\n<h3 id=\"_3-1-取个好名字\"> 3.1 取个好名字</h3>\n<p>要通俗易懂，而且全网ID最好统一，</p>\n",
      "date_published": "2021-04-02T06:48:33.000Z",
      "date_modified": "2021-04-02T06:48:33.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": []
    },
    {
      "title": "3. nginx配置文件详解",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/config/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/config/",
      "content_html": "<h1 id=\"_3-nginx配置文件详解\"> 3. nginx配置文件详解</h1>\n<p>配置文件详解</p>\n<div><pre><code><span>user</span> nginx<span>;</span>\n<span>worker_processes</span>  <span>8</span><span>;</span>\n<span>worker_cpu_affinity</span> auto<span>;</span>\n<span>#worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;</span>\n<span>error_log</span>  <span>/</span>var<span>/</span>log<span>/</span>nginx<span>/</span>error<span>.</span>log  error<span>;</span>\n<span>pid</span>        <span>/</span>var<span>/</span>run<span>/</span>nginx<span>.</span><span>pid</span><span>;</span>\n<span>worker_rlimit_nofile</span> <span>65535</span><span>;</span>\n\n<span>events</span> <span>{</span>\n    <span>use</span> epoll<span>;</span>\n    <span>worker_connections</span>  <span>20480</span><span>;</span>\n<span>}</span>\n\n<span>http</span> <span>{</span>\n    <span>include</span>       mime<span>.</span><span>types</span><span>;</span>\n    <span>default_type</span>  application<span>/</span>octet<span>-</span>stream<span>;</span>\n    <span>log_format</span>  prod <span>'$remote_addr|$remote_user|[$time_local]|$request|'</span>\n                     <span>'$status|$body_bytes_sent|$http_referer|'</span>\n                     <span>'$http_user_agent|$request_time|$host|$upstream_addr|$upstream_response_time'</span><span>;</span>\n    \n    <span>access_log</span>  <span>/</span>var<span>/</span>log<span>/</span>nginx<span>/</span>access<span>.</span>log  prod<span>;</span>\n    \n    <span>charset</span>  utf<span>-</span><span>8</span><span>;</span>\n    <span>fastcgi_intercept_errors</span> on<span>;</span>\n    <span>server_names_hash_bucket_size</span> <span>256</span><span>;</span>\n    <span>client_header_buffer_size</span> <span>32</span>k<span>;</span>\n    <span>large_client_header_buffers</span> <span>4</span> <span>128</span>k<span>;</span>\n\n    <span>server_tokens</span> off<span>;</span>\n    <span>sendfile</span> on<span>;</span>\n    <span>tcp_nopush</span> on<span>;</span>\n    <span>tcp_nodelay</span> on<span>;</span>\n    <span>#支持ssi包含文件</span>\n    <span>ssi</span> on<span>;</span>\n    <span>ssi_silent_errors</span> on<span>;</span>\n<span>#   ssi_types text/html;</span>\n\n    <span>keepalive_timeout</span>  <span>90</span><span>;</span>\n    <span>client_header_timeout</span> <span>10</span><span>;</span>\n    <span>client_body_timeout</span> <span>20</span><span>;</span>\n    \n    <span>client_max_body_size</span> <span>200</span>m<span>;</span>\n    <span>client_body_buffer_size</span>  <span>128</span>k<span>;</span>\n\n    <span># include /etc/nginx/gzip.conf;</span>\n    <span>gzip</span> on<span>;</span>\n\t<span>gzip_buffers</span> <span>4</span> <span>8</span>k<span>;</span>\n\t<span>gzip_comp_level</span> <span>6</span><span>;</span>\n\t<span>gzip_disable</span> <span>\"MSIE [1-6]\\.\"</span><span>;</span>\n\t<span>gzip_http_version</span> <span>1.1</span><span>;</span>\n\t<span>gzip_min_length</span> <span>1000</span><span>;</span>\n\t<span>gzip_proxied</span> any<span>;</span>\n\t<span>gzip_vary</span> on<span>;</span>\n\t<span>gzip_types</span> text<span>/</span>plain text<span>/</span>css application<span>/</span>javascript application<span>/</span>x<span>-</span>javascript text<span>/</span>xml application<span>/</span>xml application<span>/</span>xml<span>+</span>rss text<span>/</span>javascript application<span>/</span>json image<span>/</span>jpeg image<span>/</span>gif image<span>/</span>png image<span>/</span>jpg<span>;</span>\n    \n\n    <span># include /etc/nginx/proxy.conf;</span>\n    <span>proxy_connect_timeout</span> <span>90</span><span>;</span>\n\t<span>proxy_read_timeout</span> <span>90</span><span>;</span>\n\t<span>proxy_send_timeout</span> <span>90</span><span>;</span>\n\t<span>proxy_buffer_size</span> <span>32</span>k<span>;</span>\n\t<span>proxy_buffers</span> <span>4</span> <span>64</span>k<span>;</span>\n\t<span>proxy_busy_buffers_size</span> <span>128</span>k<span>;</span>\n    \n    \n    <span># include /etc/nginx/backend.conf;</span>\n    <span>upstream</span> my_server_pool <span>{</span>\n        <span>server</span> <span>192.168</span><span>.1</span><span>.109</span><span>:</span><span>80</span> weight<span>=</span><span>1</span> max_fails<span>=</span><span>2</span> fail_timeout<span>=</span><span>30</span><span>;</span>\n        <span>server</span> <span>192.168</span><span>.1</span><span>.108</span><span>:</span><span>80</span> weight<span>=</span><span>2</span> max_fails<span>=</span><span>2</span> fail_timeout<span>=</span><span>30</span><span>;</span>\n    <span>}</span>\n    \n    <span>include</span> <span>/</span>etc<span>/</span>nginx<span>/</span>conf<span>.</span>d<span>/</span>h5<span>.</span>conf<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br></div></div><h2 id=\"_1-样例文件解释\"> 1 样例文件解释</h2>\n<div><pre><code><span>http</span> <span>{</span>\n    <span># 引入文件 mime.types，是一个文件扩展名与文件类型的映射表</span>\n    <span>include</span>       mime<span>.</span><span>types</span><span>;</span>\n    <span># 指定默认MIME类型为二进制字节流(即下载文件)  </span>\n    <span>default_type</span>  application<span>/</span>octet<span>-</span>stream<span>;</span>\n    <span># 定义输出日志的格式</span>\n    <span># 1.$remote_addr 与$http_x_forwarded_for(反向代理服务器) 用以记录客户端的ip地址；</span>\n    <span># 2.$remote_user ：用来记录客户端用户名称；</span>\n    <span># 3.$time_local ：用来记录访问时间与时区；</span>\n    <span># 4.$request  ：用来记录请求的url与http协议</span>\n    <span># 5.$status ：用来记录请求状态； </span>\n    <span># 6.$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span>\n    <span># 7.$http_referer ：用来记录从那个页面链接访问过来的；</span>\n    <span># 8.$http_user_agent ：记录客户端浏览器的相关信息</span>\n    <span># 9.$request_time ：整个请求的总时间</span>\n    <span># 10.$host变量的值按照如下优先级获得：请求行中的host.请求头中的Host头部.与一条请求匹配的server name.</span>\n    <span># 11.$upstream_addr ：后台upstream的地址，即真正提供服务的主机地址，如10.10.10.100:80</span>\n    <span># 12.$upstream_response_time ：请求过程中，upstream响应时间    </span>\n    <span>log_format</span>  main  <span>'$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n                      <span>'$status $body_bytes_sent \"$http_referer\" '</span>\n                      <span>'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span>;</span>\n\n    <span>log_format</span>  prod <span>'$remote_addr|$remote_user|[$time_local]|$request|'</span>\n                     <span>'$status|$body_bytes_sent|$http_referer|'</span>\n                     <span>'$http_user_agent|$request_time|$host|$upstream_addr|$upstream_response_time'</span><span>;</span>\n    \n    <span># 指定access_log的存放路径、格式和缓存大小</span>\n    <span>access_log</span>  <span>/</span>var<span>/</span>log<span>/</span>nginx<span>/</span>access<span>.</span>log  prod<span>;</span>\n    \n    <span># 指定编码格式，若网页格式与此不同，将被自动转码</span>\n    <span>charset</span>  utf<span>-</span><span>8</span><span>;</span>\n    <span># 允许nginx使用error_page处理错误信息，传递4xx和5xx错误信息到客户端</span>\n    <span>fastcgi_intercept_errors</span> on<span>;</span>\n    \n    <span>server_names_hash_bucket_size</span> <span>256</span><span>;</span>\n    <span>client_header_buffer_size</span> <span>32</span>k<span>;</span>\n    <span>large_client_header_buffers</span> <span>4</span> <span>128</span>k<span>;</span>\n    \n    <span>#定义白名单ip列表变量</span>\n\t<span>geo</span> <span>$whiteip_list</span> <span>{</span>     \n    \tdefault <span>1</span><span>;</span>\n    \t<span>127.0</span><span>.0</span><span>.1</span> <span>0</span><span>;</span>\n    \t<span>192.168</span><span>.0</span><span>.167</span> <span>0</span><span>;</span>\n    \t<span>192.168</span><span>.0</span><span>.48</span> <span>0</span><span>;</span>\n\t<span>}</span>\n\n\t<span>#用map指令映射将白名单列表中客户端请求ip为空串 </span>\n\t<span>map</span> <span>$whiteip_list</span> <span>$limit</span> <span>{</span>\n    \t<span>1</span> <span>$binary_remote_addr</span><span>;</span>\n    \t<span>0</span> <span>\"\"</span><span>;</span>\n\t<span>}</span>\n    \n\n\t<span>#当某个IP访问example.com这个域名时，此IP得并发连接超过10，则会报503（Service Temporarily Unavailable），</span>\n\t<span>#表示服务暂时不可用，此时会返回给用户我们事先定义好错误页面。由“limit_conn conn_ip 10;”实现。</span>\n\t<span>limit_conn_zone</span> <span>$limit</span> zone<span>=</span>conn_ip<span>:</span><span>10</span>m<span>;</span>\n\t<span>#当访问example.com这个域名的连接总数超过1000时，同样会报503，返回定义好的错误页面。</span>\n\t<span>#由“limit_conn conn_server 1000;”实现</span>\n\t<span>limit_conn_zone</span> <span>$limit</span> zone<span>=</span>conn_server<span>:</span><span>10</span>m<span>;</span>\n\t<span>#当达到最大限制连接数后，记录日志的等级</span>\n\t<span>limit_conn_log_level</span> info<span>;</span>  <span>#[info | notice | warn | error(默认)]</span>\n\t<span>#当超过限制时，返回的状态码（默认是503），code值只能设置在400到599之间</span>\n\tlimit_conn_status <span>503</span><span>;</span>\n\n\t<span>#利用令牌桶原理，来限制用户的连接频率</span>\n\t<span>#rate每个IP平均处理的请求频率为每秒一次，此值可以设置成每秒处理请求数或者每分钟处理请求数，但必须是整数。</span>\n\t<span>#所以如果你需要指定每秒处理少于1个的请求，2秒处理一个请求，可以使用 “30r/m”。</span>\n\t<span>limit_req_zone</span>  <span>$limit</span> zone<span>=</span>req_ip<span>:</span><span>10</span>m rate<span>=</span><span>10</span>r<span>/</span>s<span>;</span>\n\n    <span># 用户认证</span>\n    <span># yum install httpd-tools               #适用centos</span>\n    <span># sudo apt-get install apache2-utils    #适用ubuntu</span>\n    <span># 生成用户密码文件</span>\n    <span># htpasswd -c /data/.htpasswd user1 </span>\n    <span>auth_basic</span>  <span>\"User Login\"</span><span>;</span>\n    <span>auth_basic_user_file</span>  <span>/</span>data<span>/</span><span>.</span>htpasswd<span>;</span>\n\n    <span># 隐藏nginx版本号</span>\n    <span>server_tokens</span> off<span>;</span>\n     <span># sendfile 指令用于指定 Nginx 是否调用Linux 的 sendfile 函数（zero copy 方式）来输出文件，提高文件传输效率 </span>\n    <span>sendfile</span> on<span>;</span>\n    <span># 告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。就是说数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞。</span>\n    <span>tcp_nopush</span> on<span>;</span>\n    <span># 不缓存data-sends（关闭 Nagle 算法），这个能够提高高频发送小数据报文的实时性</span>\n    <span>tcp_nodelay</span> on<span>;</span>\n    <span>#支持ssi包含文件</span>\n    <span>ssi</span> on<span>;</span>\n    <span>ssi_silent_errors</span> on<span>;</span>\n<span>#   ssi_types text/html;</span>\n    \n    <span># 启用目录浏览</span>\n    <span># autoindex on;</span>\n    <span># 显示出文件的确切／大概大小：on确切大小，单位是bytes；off大概大小，单位是kB或者MB或者GB</span>\n    <span># autoindex_exact_size off;</span>\n    <span># off显示的文件时间为GMT时间，on显示的文件时间为文件的服务器时间</span>\n    <span># autoindex_localtime on; </span>\n\n     <span># 指定客户端连接保持活动的超时时间（单位：秒），超过时间，服务器会关闭连接,太短或者太长都不一定合适，当然，最好是根据业务自身的情况来动态地调整该参数</span>\n    <span>keepalive_timeout</span>  <span>90</span><span>;</span>\n    <span># 客户端向服务端发送一个完整的 request header 的超时时间。如果客户端在指定时间内没有发送一个完整的 request header，Nginx 返回 HTTP 408（Request Timed Out）。</span>\n    <span>client_header_timeout</span> <span>10</span><span>;</span>\n    <span># 指定客户端与服务端建立连接后发送 request body 的超时时间。如果客户端在指定时间内没有发送任何内容，Nginx 返回 HTTP 408（Request Timed Out）。</span>\n    <span>client_body_timeout</span> <span>20</span><span>;</span>\n\n    <span># 客户端请求单个文件的最大字节数,这个参数的设置限制了上传文件的大小。</span>\n    <span>client_max_body_size</span> <span>200</span>m<span>;</span>\n    <span># 当客户端以POST方法提交一些数据到服务端时，会先写入到client_body_buffer中，如果buffer写满会写到临时文件里，建议调整为128k</span>\n    <span>client_body_buffer_size</span>  <span>128</span>k<span>;</span>\n    \n\n    <span>#利用令牌桶原理，来限制用户的连接频率</span>\n\t<span>#rate每个IP平均处理的请求频率为每秒一次，此值可以设置成每秒处理请求数或者每分钟处理请求数，但必须是整数。</span>\n\t<span>#所以如果你需要指定每秒处理少于1个的请求，2秒处理一个请求，可以使用 “30r/m”。</span>\n    <span>limit_req_zone</span> <span>$binary_remote_addr</span> zone<span>=</span>one<span>:</span><span>10</span>m rate<span>=</span><span>10000</span>r<span>/</span>s<span>;</span>\n    <span>limit_conn_zone</span> <span>$binary_remote_addr</span> zone<span>=</span>addr<span>:</span><span>10</span>m<span>;</span>\n    \n    <span># include /etc/nginx/gzip.conf;</span>\n    <span>gzip</span> on<span>;</span>\n\t<span>gzip_buffers</span> <span>4</span> <span>8</span>k<span>;</span>\n\t<span>gzip_comp_level</span> <span>6</span><span>;</span>\n\t<span>gzip_disable</span> <span>\"MSIE [1-6]\\.\"</span><span>;</span>\n\t<span>gzip_http_version</span> <span>1.1</span><span>;</span>\n\t<span>gzip_min_length</span> <span>1000</span><span>;</span>\n\t<span>gzip_proxied</span> any<span>;</span>\n\t<span>gzip_vary</span> on<span>;</span>\n\t<span>gzip_types</span> text<span>/</span>plain text<span>/</span>css application<span>/</span>javascript application<span>/</span>x<span>-</span>javascript text<span>/</span>xml application<span>/</span>xml application<span>/</span>xml<span>+</span>rss text<span>/</span>javascript application<span>/</span>json image<span>/</span>jpeg image<span>/</span>gif image<span>/</span>png image<span>/</span>jpg<span>;</span>\n\n    <span>#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。</span>\n    <span>fastcgi_connect_timeout</span> <span>300</span><span>;</span>\n    <span>fastcgi_send_timeout</span> <span>300</span><span>;</span>\n    <span>fastcgi_read_timeout</span> <span>300</span><span>;</span>\n    <span>fastcgi_buffer_size</span> <span>64</span>k<span>;</span>\n    <span>fastcgi_buffers</span> <span>4</span> <span>64</span>k<span>;</span>\n    <span>fastcgi_busy_buffers_size</span> <span>128</span>k<span>;</span>\n    <span>fastcgi_temp_file_write_size</span> <span>128</span>k<span>;</span>\n\n    <span># include /etc/nginx/proxy.conf;</span>\n    <span>#反向代理</span>\n    <span># nginx跟后端服务器连接超时时间(代理连接超时)</span>\n\t<span>proxy_connect_timeout</span> <span>90</span><span>;</span>\n    <span># 连接成功后，后端服务器响应时间(代理接收超时)</span>\n\t<span>proxy_read_timeout</span> <span>90</span><span>;</span>\n    <span># 后端服务器数据回传时间(代理发送超时)</span>\n\t<span>proxy_send_timeout</span> <span>90</span><span>;</span>\n    <span># 设置代理服务器（nginx）保存用户头信息的缓冲区大小</span>\n\t<span>proxy_buffer_size</span> <span>32</span>k<span>;</span>\n    <span># proxy_buffers缓冲区</span>\n\t<span>proxy_buffers</span> <span>4</span> <span>64</span>k<span>;</span>\n    <span># 高负荷下缓冲大小（proxy_buffers*2）</span>\n\t<span>proxy_busy_buffers_size</span> <span>128</span>k<span>;</span>\n    <span># 设定缓存文件夹大小，大于这个值，将从upstream服务器传</span>\n    <span>proxy_temp_file_write_size</span> <span>64</span>k<span>;</span>\n    \n    \n    <span>#反向代理缓存目录</span>\n    <span>proxy_cache_path</span> <span>/</span>data<span>/</span><span>proxy</span><span>/</span>cache levels<span>=</span><span>1</span><span>:</span><span>2</span> keys_zone<span>=</span>cache_one<span>:</span><span>500</span>m inactive<span>=</span><span>1</span>d max_size<span>=</span><span>1</span>g<span>;</span>\n    <span>#levels=1:2 设置目录深度，第一层目录是1个字符，第2层是2个字符</span>\n    <span>#keys_zone:设置web缓存名称和内存缓存空间大小</span>\n    <span>#inactive:自动清除缓存文件时间。</span>\n    <span>#max_size:硬盘空间最大可使用值。</span>\n    <span>#指定临时缓存文件的存储路径(路径需和上面路径在同一分区)</span>\n    <span>proxy_temp_path</span> <span>/</span>data<span>/</span><span>proxy</span><span>/</span>temp\n\n    <span># include /etc/nginx/backend.conf;  </span>\n    <span># 负载均衡服务器池</span>\n    <span>upstream</span> my_server_pool <span>{</span>\n        <span>#调度算法</span>\n        <span>#1.轮循（默认）（weight轮循权值）</span>\n        <span>#2.ip_hash：根据每个请求访问IP的hash结果分配。（会话保持）</span>\n        <span>#3.fair:根据后端服务器响应时间最短请求。（upstream_fair模块）</span>\n        <span>#4.url_hash:根据访问的url的hash结果分配。（需hash软件包）</span>\n        <span>#参数：</span>\n        <span>#down：表示不参与负载均衡</span>\n        <span>#backup:备份服务器</span>\n        <span>#max_fails:允许最大请求错误次数</span>\n        <span>#fail_timeout:请求失败后暂停服务时间。</span>\n        <span>server</span> <span>192.168</span><span>.1</span><span>.109</span><span>:</span><span>80</span> weight<span>=</span><span>1</span> max_fails<span>=</span><span>2</span> fail_timeout<span>=</span><span>30</span><span>;</span>\n        <span>server</span> <span>192.168</span><span>.1</span><span>.108</span><span>:</span><span>80</span> weight<span>=</span><span>2</span> max_fails<span>=</span><span>2</span> fail_timeout<span>=</span><span>30</span><span>;</span>\n    <span>}</span>\n    \n    <span># 指明包含进来的其他配置文件</span>\n    <span>include</span> <span>/</span>etc<span>/</span>nginx<span>/</span>conf<span>.</span>d<span>/</span>h5<span>.</span>conf<span>;</span>\n    <span># 虚拟主机定义</span>\n    <span>server</span> <span>{</span>\n        <span># 监听端口</span>\n        <span>listen</span>       <span>80</span><span>;</span> \n        <span>#listen     443;</span>\n        <span># 访问域名</span>\n        <span>server_name</span>  example<span>.</span>com<span>;</span>\n\n        <span># 编码格式，若网页格式与此不同，将被自动转码</span>\n        <span>#charset utf-8;</span>\n\n        <span># 虚拟主机访问日志定义</span>\n        <span>#access_log  logs/host.access.log  main;</span>\n\n        <span># 申请的证书zip包中一般含有如下三个文件：</span>\n        <span># SSL 凭证(例如: ssl_certificate.crt,或称最终实体凭证, 公钥凭证或身份验证凭证)</span>\n        <span># 中继CA凭证(例如: IntermediateCA.crt, 或称信任链凭证或SSL凭证的签名者/发行人)</span>\n        <span># 私钥文件(例如: private.key, 生成凭证签章要求(CSR)的时候建立的)</span>\n        <span>#</span>\n        <span># nginx的配置特殊地方: 需要合并SSL凭证和中继CA凭证, 即:</span>\n        <span>#   cat ssl_certificate.crt IntermediateCA.crt >> your_domain_name.crt</span>\n        <span># 注意：-----END CERTIFICATE----------BEGIN CERTIFICATE-----需要调整为：</span>\n        <span>#   -----END CERTIFICATE-----</span>\n        <span>#   -----BEGIN CERTIFICATE-----</span>\n        <span># 否则启动时出错，即SSL: error:0906D066:PEM routines:PEM_read_bio:bad end line</span>\n        <span>#</span>\n        <span>ssl</span> on<span>;</span>  \n        <span>#虚拟主机的证书文件  </span>\n        <span>ssl_certificate</span> <span>/</span>etc<span>/</span><span>ssl</span><span>/</span>your_domain_name<span>.</span>crt<span>;</span> <span>#合并SSL凭证和中继CA凭证的文件</span>\n        <span>#虚拟主机私钥文件  </span>\n        <span>ssl_certificate_key</span> <span>/</span>etc<span>/</span><span>ssl</span><span>/</span>your_domain_name<span>.</span>key<span>;</span> <span>#私钥文件</span>\n        <span># 支持ssl协议版本</span>\n        <span>ssl_protocols</span> TLSv1 TLSv1<span>.</span><span>1</span> TLSv1<span>.</span><span>2</span><span>;</span>\n        <span># 客户端一侧的连接可以复用ssl session cache中缓存 的ssl参数的有效时长；</span>\n\t\t<span>ssl_session_timeout</span> <span>5</span>m<span>;</span>\n        <span># 指定支持加密算法；</span>\n        <span>ssl_ciphers</span> AESGCM<span>:</span>ALL<span>:</span><span>!</span>DH<span>:</span><span>!</span>EXPORT<span>:</span><span>!</span>RC4<span>:</span><span>+</span>HIGH<span>:</span><span>!</span>MEDIUM<span>:</span><span>!</span>LOW<span>:</span><span>!</span>aNULL<span>:</span><span>!</span>eNULL<span>;</span>\n        <span># 服务端倾向使用的加密算法；</span>\n   \t\t<span>ssl_prefer_server_ciphers</span> on<span>;</span>\n\n\n\n        <span># 匹配URL</span>\n        <span>location</span> <span>/</span> <span>{</span>\n            <span># 定义默认网站根目录位置</span>\n            <span>root</span>   html<span>;</span>\n            <span># 定义首页索引文件的名称，按以下顺序匹配</span>\n            <span>index</span>  <span>index</span><span>.</span>html <span>index</span><span>.</span>htm <span>index</span><span>.</span>php<span>;</span>\n\n            <span>#反向代理缓存设置命令(proxy_cache zone|off,默认关闭所以要设置)</span>\n            <span>proxy_cache</span> cache_one<span>;</span>\n            <span>#对不同的状态码缓存不同时间</span>\n            <span>proxy_cache_valid</span> <span>200</span> <span>304</span> <span>12</span>h<span>;</span>\n            <span>#设置以什么样参数获取缓存文件名</span>\n            <span>proxy_cache_key</span> <span>$host</span><span>$uri</span><span>$is_args</span><span>$args</span><span>;</span>\n            <span>#后7端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>\n            <span>proxy_set_header</span> Host <span>$host</span><span>;</span>\n            <span>proxy_set_header</span> X<span>-</span>Real<span>-</span>IP <span>$remote_addr</span><span>;</span> \n            <span>proxy_set_header</span> X<span>-</span>Forwarded<span>-</span>For <span>$proxy_add_x_forwarded_for</span><span>;</span>\n            <span>#nginx反向代理隐藏响应头，多个代理情况下也可以写到http段里面</span>\n            <span>proxy_hide_header</span> X<span>-</span>Application<span>-</span>Context<span>;</span>\n            <span>#代理设置</span>\n            <span>proxy_pass</span>   <span>http</span><span>:</span><span>/</span><span>/</span>my_server_pool<span>;</span> \n            <span>#文件过期时间控制</span>\n            <span>expires</span>    <span>1</span>d<span>;</span>\n\n            <span>#限制某个IP来源的连接并发数，此处为10个</span>\n            <span>limit_conn</span> conn_ip <span>10</span><span>;</span>\n            <span>#限制某个虚拟服务器的总连接数，此处为1000个</span>\n            <span>limit_conn</span> conn_server <span>1000</span><span>;</span>\n            <span>#限制带宽, 每个连接只允许最大5kb/s的速度进行下载</span>\n            <span>limit_rate</span> <span>5</span>k<span>;</span>\n\n            <span>#burst=5这个配置的意思是设置一个大小为5的缓冲区，当有大量请求（爆发）过来时，</span>\n            <span>#超过了访问频次限制的请求可以先放到这个缓冲区内，如果此缓冲区也满了则会返回503</span>\n            <span>#nodelay 如果设置此参数，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队</span>\n            <span>limit_req</span> zone<span>=</span>req_ip burst<span>=</span><span>5</span><span>;</span>\n            <span>#limit_req zone=req_ip burst=5 nodelay;</span>\n        <span>}</span>\n\n        <span>location</span> <span>/</span>download <span>{</span>\n            <span>#限制IP访问</span>\n            <span>deny</span> <span>192.168</span><span>.0</span><span>.2</span>；\n            <span>allow</span> <span>192.168</span><span>.0</span><span>.0</span><span>/</span><span>24</span><span>;</span>\n            <span>allow</span> <span>192.168</span><span>.1</span><span>.1</span><span>;</span>\n            <span>deny</span> all<span>;</span>\n        <span>}</span>\n\n        <span>#静态文件，nginx自己处理</span>\n        <span>location</span> <span>~</span> <span>^</span><span>/</span><span>(</span>images<span>|</span>javascript<span>|</span>js<span>|</span>css<span>|</span>flash<span>|</span>media<span>|</span>static<span>)</span><span>/</span> <span>{</span>\n            <span>access_log</span> off<span>;</span>  <span>#关闭access_log，即不记录访问日志</span>\n            <span>#过期30天，静态文件不怎么更新，过期可以设大一点，</span>\n            <span>#如果频繁更新，则可以设置得小一点。</span>\n            <span>expires</span> <span>30</span>d<span>;</span>\n        <span>}</span>\n\n        <span># 发生 404 错误时返回 404.html页面</span>\n        <span>#error_page  404              /404.html;</span>\n\n        <span># redirect server error pages to the static page /50x.html</span>\n        <span>#</span>\n        <span># 发生 50x 错误时使用 50x.html</span>\n        <span>error_page</span>   <span>500</span> <span>502</span> <span>503</span> <span>504</span>  <span>/</span><span>50</span>x<span>.</span>html<span>;</span>\n        <span>location</span> <span>=</span> <span>/</span><span>50</span>x<span>.</span>html <span>{</span>\n            <span>root</span>   html<span>;</span>\n        <span>}</span>\n\n        <span># 将 PHP 脚本请求全部转发给 FastCGI（127.0.0.1:9000）处理</span>\n        <span># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span>#</span>\n        <span>location</span> <span>~</span> \\<span>.</span>php$ <span>{</span>\n            <span>fastcgi_pass</span>   <span>127.0</span><span>.0</span><span>.1</span><span>:</span><span>9000</span><span>;</span>\n            <span>fastcgi_index</span>  <span>index</span><span>.</span>php<span>;</span>\n            <span>fastcgi_param</span>  SCRIPT_FILENAME  <span>$document_root</span><span>$fastcgi_script_name</span><span>;</span>\n            <span># 引入文件，fastcgi的默认配置参数</span>\n            <span>include</span>        fastcgi_params<span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br><span>203</span><br><span>204</span><br><span>205</span><br><span>206</span><br><span>207</span><br><span>208</span><br><span>209</span><br><span>210</span><br><span>211</span><br><span>212</span><br><span>213</span><br><span>214</span><br><span>215</span><br><span>216</span><br><span>217</span><br><span>218</span><br><span>219</span><br><span>220</span><br><span>221</span><br><span>222</span><br><span>223</span><br><span>224</span><br><span>225</span><br><span>226</span><br><span>227</span><br><span>228</span><br><span>229</span><br><span>230</span><br><span>231</span><br><span>232</span><br><span>233</span><br><span>234</span><br><span>235</span><br><span>236</span><br><span>237</span><br><span>238</span><br><span>239</span><br><span>240</span><br><span>241</span><br><span>242</span><br><span>243</span><br><span>244</span><br><span>245</span><br><span>246</span><br><span>247</span><br><span>248</span><br><span>249</span><br><span>250</span><br><span>251</span><br><span>252</span><br><span>253</span><br><span>254</span><br><span>255</span><br><span>256</span><br><span>257</span><br><span>258</span><br><span>259</span><br><span>260</span><br><span>261</span><br><span>262</span><br><span>263</span><br><span>264</span><br><span>265</span><br><span>266</span><br><span>267</span><br><span>268</span><br><span>269</span><br><span>270</span><br><span>271</span><br><span>272</span><br><span>273</span><br><span>274</span><br><span>275</span><br><span>276</span><br><span>277</span><br><span>278</span><br><span>279</span><br><span>280</span><br><span>281</span><br><span>282</span><br><span>283</span><br><span>284</span><br><span>285</span><br><span>286</span><br><span>287</span><br><span>288</span><br><span>289</span><br><span>290</span><br><span>291</span><br><span>292</span><br><span>293</span><br><span>294</span><br><span>295</span><br><span>296</span><br><span>297</span><br><span>298</span><br><span>299</span><br><span>300</span><br><span>301</span><br></div></div><h2 id=\"_2-全局变量\"> 2 全局变量</h2>\n<div><pre><code>$args ： #这个变量等于请求行中的参数，同$query_string\n$content_length ： 请求头中的Content-length字段。\n$content_type ： 请求头中的Content-Type字段。\n$document_root ： 当前请求在root指令中指定的值。\n$host ： 请求主机头字段，否则为服务器名称。\n$http_user_agent ： 客户端agent信息\n$http_cookie ： 客户端cookie信息\n$limit_rate ： 这个变量可以限制连接速率。\n$request_method ： 客户端请求的动作，通常为GET或POST。\n$remote_addr ： 客户端的IP地址。\n$remote_port ： 客户端的端口。\n$remote_user ： 已经经过Auth Basic Module验证的用户名。\n$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： HTTP方法（如http，https）。\n$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： 服务器名称。\n$server_port ： 请求到达服务器的端口号。\n$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： 与$uri相同。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><blockquote>\n<p>参考链接：</p>\n<p>https://jasonhzy.github.io/2017/09/03/nginx/</p>\n<p>https://blog.csdn.net/tzy233/article/details/79780444</p>\n<p>https://blog.csdn.net/Powerful_Fy/article/details/102845921</p>\n<p>https://www.linuxidc.com/Linux/2018-01/150100.htm</p>\n<p>https://www.jianshu.com/p/73e2cd39722c</p>\n<p>https://www.cnblogs.com/my_life/articles/7070805.html</p>\n<p>https://www.jianshu.com/nb/27610173</p>\n<p>http://nginx.org/en/docs/http/ngx_http_core_module.html#variables</p>\n<p>http://nginx.org/en/docs/</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "4. 内核参数优化",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/core/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/core/",
      "content_html": "<h1 id=\"_4-内核参数优化\"> 4. 内核参数优化</h1>\n<h2 id=\"linux内核参数优化-网络模块\"> linux内核参数优化（网络模块）</h2>\n<p>在Linux下调整内核参数，可以直接编辑配置文件<code>/etc/sysctl.conf</code>，然后执行<code>sysctl -p</code>命令生效</p>\n<p>文件内容如下：</p>\n<div><pre><code>net.ipv4.ip_forward = 1\nnet.ipv4.conf.default.rp_filter = 1\nnet.ipv4.conf.default.accept_source_route = 0\nkernel.sysrq = 0\nkernel.core_uses_pid = 1\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\nkernel.shmmax = 68719476736\nkernel.shmall = 268435456\nnet.core.wmem_default = 8388608\nnet.core.rmem_default = 8388608\nnet.core.rmem_max = 16777216\nnet.core.wmem_max = 16777216\nnet.core.somaxconn = 262144\nnet.core.netdev_max_backlog = 262144\nnet.ipv4.tcp_max_orphans = 262144\nnet.ipv4.tcp_max_tw_buckets = 6000\nnet.ipv4.tcp_tw_recycle = 0\nnet.ipv4.tcp_timestamps = 1\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_max_syn_backlog = 30000\nnet.ipv4.tcp_syn_retries = 1\nnet.ipv4.tcp_synack_retries = 1\nnet.ipv4.ip_local_port_range = 1024 65000\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 30\nnet.ipv4.tcp_sack = 1\nnet.ipv4.tcp_window_scaling = 1\nnet.ipv4.tcp_rmem = 4096 87380 4194304\nnet.ipv4.tcp_wmem = 4096 65536 4194304\nnet.ipv4.tcp_mem = 524288 699050 1048576\nvm.swappiness = 0\nvm.min_free_kbytes = 65536\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><ul>\n<li>\n<p>net.core.somaxconn = 262144</p>\n<p>web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。</p>\n</li>\n<li>\n<p>net.core.netdev_max_backlog = 262144</p>\n<p>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_max_orphans = 262144</p>\n<p>系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤儿连接将即刻被复位并打印出警告信息。这个限制仅仅是为了防止简单的DoS攻击，不能过分依靠它或者人为地减小这个值，更应该增加这个值(如果增加了内存之后)。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_max_tw_buckets = 6000</p>\n<p>对于tcp连接，服务端和客户端通信完后状态变为timewait，假如某台服务器非常忙，连接数特别多的话，那么这个timewait数量就会越来越大。</p>\n<p>毕竟它也是会占用一定的资源，所以应该有一个最大值，当超过这个值，系统就会删除最早的连接，这样始终保持在一个数量级。\n这个数值就是由net.ipv4.tcp_max_tw_buckets这个参数来决定的。</p>\n<p>CentOS7.6版本，默认为16384，可以使用sysctl -a |grep tw_buckets来查看它的值，可以适当把它调低，比如调整到6000，毕竟这个状态的连接太多也是会消耗资源的。</p>\n<p>但不要把它调到几十、几百这样，因为这种状态的tcp连接也是有用的，如果同样的客户端再次和服务端通信，就不用再次建立新的连接了，用这个旧的通道，省时省力。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_tw_recycle = 0</p>\n<p>启用TIME-WAIT状态sockets快速回收功能;用于快速减少在TIME-WAIT状态TCP连接数。1表示启用;0表示关闭。但是要特别留意的是：这个选项一般不推荐启用，因为在NAT(Network Address Translation)网络下，会导致大量的TCP连接建立错误，从而引起网站访问故障。</p>\n<p>实际上，net.ipv4.tcp_tw_recycle功能的开启，要需要net.ipv4.tcp_timestamps（一般系统默认是开启这个功能的）这个开关开启后才有效果；\n当tcp_tw_recycle 开启时（tcp_timestamps 同时开启，快速回收 socket 的效果达到），对于位于NAT设备后面的 Client来说，是一场灾难！\n会导致到NAT设备后面的Client连接Server不稳定（有的 Client 能连接 server，有的 Client 不能连接 server）。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_tw_reuse = 1</p>\n<p>开启重用功能，允许将TIME-WAIT状态的sockets重新用于新的TCP连接。这个功能启用是安全的，一般不要去改动！</p>\n</li>\n<li>\n<p>net.ipv4.tcp_syncookies = 1</p>\n<p>tcp三次握手中，客户端向服务端发起syn请求，服务端收到后，也会向客户端发起syn请求同时连带ack确认，\n假如客户端发送请求后直接断开和服务端的连接，不接收服务端发起的这个请求，服务端会重试多次，\n这个重试的过程会持续一段时间（通常高于30s），当这种状态的连接数量非常大时，服务器会消耗很大的资源，从而造成瘫痪，\n正常的连接进不来，这种恶意的半连接行为其实叫做syn flood攻击。\n设置为1，是开启SYN Cookies，开启后可以避免发生上述的syn flood攻击。\n开启该参数后，服务端接收客户端的ack后，再向客户端发送ack+syn之前会要求client在短时间内回应一个序号，\n如果客户端不能提供序号或者提供的序号不对则认为该客户端不合法，于是不会发ack+syn给客户端，更涉及不到重试。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_max_syn_backlog = 30000</p>\n<p>该参数定义系统能接受的最大半连接状态的tcp连接数。客户端向服务端发送了syn包，服务端收到后，会记录一下，\n该参数决定最多能记录几个这样的连接。在CentOS7，默认是256，当有syn flood攻击时，这个数值太小则很容易导致服务器瘫痪，\n实际上此时服务器并没有消耗太多资源（cpu、内存等），所以可以适当调大它，比如调整到30000。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_syn_retries = 1</p>\n<p>该参数适用于客户端，它定义发起syn的最大重试次数，默认为6，建议改为1。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_synack_retries = 1</p>\n<p>该参数适用于服务端，它定义发起syn+ack的最大重试次数，默认为5，建议改为1，可以适当预防syn flood攻击。</p>\n</li>\n<li>\n<p>net.ipv4.ip_local_port_range = 1024 65000</p>\n<p>该参数定义端口范围，系统默认保留端口为1024及以下，以上部分为自定义端口。这个参数适用于客户端，\n当客户端和服务端建立连接时，比如说访问服务端的80端口，客户端随机开启了一个端口和服务端发起连接，\n这个参数定义随机端口的范围。默认为32768 61000，建议调整为1025 65000。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_fin_timeout = 30</p>\n<p>如果套接字由本端要求关闭，这个参数 决定了它保持在FIN-WAIT-2状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60秒。2.2 内核的通常值是180秒，你可以按这个设置，但要记住的是，即使你的机器是一个轻载的WEB服务器，也有因为大量的死套接字而内存溢出的风险，FIN- WAIT-2的危险性比FIN-WAIT-1要小，因为它最多只能吃掉1.5K内存，但是它们的生存期长些。</p>\n</li>\n<li>\n<p>net.ipv4.tcp_keepalive_time = 30</p>\n<p>tcp连接状态里，有一个是established状态，只有在这个状态下，客户端和服务端才能通信。正常情况下，当通信完毕，\n客户端或服务端会告诉对方要关闭连接，此时状态就会变为timewait，如果客户端没有告诉服务端，\n并且服务端也没有告诉客户端关闭的话（例如，客户端那边断网了），此时需要该参数来判定。\n比如客户端已经断网了，但服务端上本次连接的状态依然是established，服务端为了确认客户端是否断网，\n就需要每隔一段时间去发一个探测包去确认一下看看对方是否在线。这个时间就由该参数决定。它的默认值为7200秒，建议设置为30秒。</p>\n</li>\n</ul>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "6.1 Nginx出现403 forbidden的三种原因",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/forbidden/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/forbidden/",
      "content_html": "<h1 id=\"_6-1-nginx出现403-forbidden的三种原因\"> 6.1 Nginx出现403 forbidden的三种原因</h1>\n<p>引起<code>nginx 403 forbidden</code>通常是三种情况：一是缺少主页文件，二是权限问题，三是<code>SELinux</code>状态。</p>\n<h2 id=\"缺少主页文件\"> 缺少主页文件</h2>\n<div><pre><code><span>server</span> <span>{</span>\n    <span>listen</span> <span>80</span><span>;</span>\n    <span>server_name</span> localhost<span>;</span>\n    <span>index</span> <span>index</span><span>.</span>php <span>index</span><span>.</span>html<span>;</span>\n    <span># index index.html index.htm;</span>\n    <span>root</span> <span>/</span>clay<span>/</span>clay1<span>/</span>clay2<span>/</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>如果在<code>/clay/clay1/clay2/</code>下面没有<code>index.php</code>或<code>index.html</code>的时候，直接文件，会报403 forbidden。</p>\n<blockquote>\n<p>当index文件问<code>index.html</code>时，index指令可以省略不写</p>\n</blockquote>\n<h2 id=\"权限问题\"> 权限问题</h2>\n<p>主要原因是<code>nginx</code>启动用户没有，查看主页文件的权限</p>\n<p>1）查看<code>nginx</code>启动用户</p>\n<div><pre><code><span>ps</span> aux <span>|</span> <span>grep</span> <span>\"nginx: worker process\"</span> <span>|</span> <span>grep</span> -v <span>\"grep\"</span> <span>|</span> <span>awk</span> <span>'{ print <span>$1</span> }'</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>2）查看主页文件权限及递归查看主页文件所在目录权限</p>\n<ul>\n<li>\n<p>主页文件，<code>nginx</code>启动用户要有<code>r</code>权限，读取文件内容的权限</p>\n</li>\n<li>\n<p>递归主页所在的目录，<code>nginx</code>启动用户要有<code>x</code>权限，可以访问目录的内容</p>\n<blockquote>\n<p>递归目录在上述配置文件中是指<code>/clay/</code>、<code>/clay/clay1/</code>、<code>/clay/clay1/clay2/</code>这三个目录</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"selinux为开启状态-enabled\"> <code>SELinux</code>为开启状态(enabled)</h2>\n<p>1）查看当前<code>selinux</code>的状态</p>\n<div><pre><code>/usr/sbin/sestatus \n</code></pre>\n<div><span>1</span><br></div></div><p>2）将<code>SELINUX=enforcing</code> 修改为 <code>SELINUX=disabled</code> 状态</p>\n<div><pre><code><span>vi</span> /etc/selinux/config\n\n<span>#SELINUX=enforcing</span>\n<span>SELINUX</span><span>=</span>disabled\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>3）重启生效</p>\n<div><pre><code><span>reboot</span>\n</code></pre>\n<div><span>1</span><br></div></div>",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "2. nginx架构基础",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/framework/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/framework/",
      "content_html": "<h1 id=\"_2-nginx架构基础\"> 2. nginx架构基础</h1>\n<h2 id=\"_1-nginx请求处理流程\"> 1 Nginx请求处理流程</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310164648893.png\" alt=\"\"></p>\n<h2 id=\"_2-nginx进程结构\"> 2 Nginx进程结构</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310164732720.png\" alt=\"\"></p>\n<h2 id=\"_3-nginx进程管理-信号\"> 3 Nginx进程管理：信号</h2>\n<h3 id=\"_3-1-master进程\"> 3.1 Master进程</h3>\n<ul>\n<li>监控worker进程\n<ul>\n<li>CHLD</li>\n</ul>\n</li>\n<li>管理worker进程</li>\n<li>接收信号\n<ul>\n<li>TERM，INT</li>\n<li>QUIT</li>\n<li>HUP</li>\n<li>USR1</li>\n<li>USR2</li>\n<li>WINCH</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"_3-2-worker进程\"> 3.2 Worker进程</h3>\n<ul>\n<li>接收信号\n<ul>\n<li>TERM，INT</li>\n<li>QUIT</li>\n<li>USR1</li>\n<li>WINCH</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"_3-3-nginx命令行\"> 3.3 nginx命令行</h3>\n<ul>\n<li>reload：HUP</li>\n<li>reopen：USR1</li>\n<li>stop：TERM</li>\n<li>quit：QUIT</li>\n</ul>\n<h2 id=\"_4-reload-流程\"> 4 reload 流程</h2>\n<p>1）向master进程发送HUP信号（reload命令）</p>\n<p>2）master进程校验配置语法是否正确</p>\n<p>3）master进行打开新的监听端口</p>\n<p>4）master进程用新配置启动新的worker子进程</p>\n<p>5）master进程向老worker子进程发送QUIT信号</p>\n<p>6）老worker进程关闭监听句柄，处理完当前连接后结束进程</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310170519124.png\" alt=\"\"></p>\n<h2 id=\"_5-热升级流程\"> 5 热升级流程</h2>\n<p>1）将旧Ningx文件换成新Nginx文件（注意备份）</p>\n<p>2）向master进程发送USR2信号</p>\n<p>3）master进程修改pid文件名，加后缀.oldbin（进程自动改的，不需要手动改）</p>\n<p>4）master进程用新Nginx文件启动新master进程</p>\n<p>5）向老master进程发送QUIT信号，关闭老master</p>\n<p>6）回滚：向老master发送HUP，向新master发送QUIT</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310171424958.png\" alt=\"\"></p>\n<h2 id=\"_6-worker进程-优雅的关闭\"> 6 worker进程：优雅的关闭</h2>\n<p>1）设置定时器<code>worker_shutdown_timeout</code></p>\n<p>2）关闭监听句柄</p>\n<p>3）关闭空闲连接</p>\n<p>4）在循环中等待全部连接关闭</p>\n<p>5）退出进程</p>\n<h2 id=\"_7-网络相关\"> 7 网络相关</h2>\n<h3 id=\"_7-1-网络传输\"> 7.1 网络传输</h3>\n<ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>链路层</li>\n<li>物理层</li>\n</ul>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310172023302.png\" alt=\"\"></p>\n<h3 id=\"_7-2-tcp流与报文\"> 7.2 TCP流与报文</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310172138764.png\" alt=\"\"></p>\n<h3 id=\"_7-3-tcp协议与非阻塞接口\"> 7.3 TCP协议与非阻塞接口</h3>\n<ul>\n<li>读事件\n<ul>\n<li>Accept建立连接</li>\n<li>Read读消息</li>\n</ul>\n</li>\n<li>写事件\n<ul>\n<li>Write写信息</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310172800752.png\" alt=\"\"></p>\n<h2 id=\"_8-nginx事件循环\"> 8 Nginx事件循环</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310173131875.png\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310173315213.png\" alt=\"\"></p>\n<h3 id=\"_8-1-epoll\"> 8.1 epoll</h3>\n<p><strong>前提</strong></p>\n<p>高并发连接中，每次处理的活跃连接数量占比很小</p>\n<p><strong>实现</strong></p>\n<p>红黑树，链表</p>\n<p><strong>使用</strong></p>\n<p>创建，操作（添加/修改/删除），获取句柄，关闭</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310173757670.png\" alt=\"\"></p>\n<h2 id=\"_9-模块分类\"> 9 模块分类</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310174353557.png\" alt=\"\"></p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200310164648893.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "3.1 nginx全局块和events块配置",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/global-events/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/global-events/",
      "content_html": "<h1 id=\"_3-1-nginx全局块和events块配置\"> 3.1 nginx全局块和events块配置</h1>\n<h2 id=\"_1-example\"> 1 example</h2>\n<div><pre><code><span># 运行Nginx进程的用户</span>\n<span>user</span> nginx<span>;</span>\n<span>worker_processes</span>  <span>8</span><span>;</span>\n<span>worker_cpu_affinity</span> auto<span>;</span>\n\n<span># 定义存储某类型的全局错误的日志位置</span>\n<span># nginx日志分为很多级别 [debug | info | notice | warn | error | crit | alert | emerg]</span>\n<span>error_log</span>  <span>/</span>var<span>/</span>log<span>/</span>nginx<span>/</span>error<span>.</span>log  error<span>;</span>\n<span># 指定进程ID（pid）存放的路径 </span>\n<span>pid</span>        <span>/</span>var<span>/</span>run<span>/</span>nginx<span>.</span><span>pid</span><span>;</span>\n<span># 一个nginx进程打开的最多文件描述符数目，理论值应该是系统的最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致。</span>\n<span>worker_rlimit_nofile</span> <span>65535</span><span>;</span>\n\n<span>events</span> <span>{</span>\n    <span># 使用epoll的I/O模型，用这个模型来高效处理异步事件</span>\n    <span>use</span> epoll<span>;</span>\n    <span># 每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为worker_processes*worker_connections。</span>\n    <span>worker_connections</span>  <span>20480</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id=\"_2-配置cpu参数\"> 2 配置CPU参数</h2>\n<p>Nginx默认没有开启利用多核cpu，我们可以通过增加worker_cpu_affinity配置参数来充分利用多核cpu的性能。cpu是任务处理，计算最关键的资源，cpu核越多，性能就越好。</p>\n<h3 id=\"_2-1-nginx-worker-processes\"> 2.1 nginx worker_processes</h3>\n<p>worker_processes最多开启8个，8个以上性能就不会再提升了，而且稳定性会变的更低，因此8个进程够用了；</p>\n<h3 id=\"_2-2-nginx-worker-cpu-affinity\"> 2.2 nginx worker_cpu_affinity</h3>\n<p>cpu有多少个核？就有几位数，1代表内核开启，0代表内核关闭；</p>\n<p>例如：我有一个服务器是最低配，8核CPU，nginx配置信息则如下：</p>\n<div><pre><code><span>worker_processes</span> <span>8</span><span>;</span>\n<span>worker_cpu_affinity</span> <span>00000001</span> <span>00000010</span> <span>00000100</span> <span>00001000</span> <span>00010000</span> <span>00100000</span> <span>01000000</span> <span>10000000</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>上面的配置表示：8核CPU，开启8个进程。</p>\n<blockquote>\n<p>我其实把<code>nginx worker_cpu_affinity</code>参数通常设置为<code>auto</code></p>\n</blockquote>\n<h3 id=\"_2-3-实例\"> 2.3 实例</h3>\n<p><strong>2核CPU，开启2个进程</strong></p>\n<div><pre><code><span>worker_processes</span> <span>2</span><span>;</span>\n<span>worker_cpu_affinity</span> <span>01</span> <span>10</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><strong>2核CPU，开启4进程</strong></p>\n<div><pre><code><span>worker_processes</span> <span>4</span><span>;</span>\n<span>worker_cpu_affinity</span> <span>01</span> <span>10</span> <span>01</span> <span>10</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><strong>2核CPU，开启8进程</strong></p>\n<div><pre><code><span>worker_processes</span> <span>8</span><span>;</span>\n<span>worker_cpu_affinity</span> <span>01</span> <span>10</span> <span>01</span> <span>10</span> <span>01</span> <span>10</span> <span>01</span> <span>10</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><strong>8核CPU，开启2进程</strong></p>\n<div><pre><code><span>worker_processes</span> <span>2</span><span>;</span>\n<span>worker_cpu_affinity</span> <span>10101010</span> <span>01010101</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><blockquote>\n<p>10101010表示开启了第2,4,6,8内核，01010101表示开始了1,3,5,7内核；</p>\n<p>如果多个CPU内核的利用率都相差不多，证明nginx己经成功的利用了多核CPU。</p>\n<p>测试结束后，CPU内核的负载应该都同时降低。</p>\n</blockquote>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "3.2 nginxHTTP块配置",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/http/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/http/",
      "content_html": "<h1 id=\"_3-2-nginxhttp块配置\"> 3.2 nginxHTTP块配置</h1>\n<h2 id=\"_1-配置块的嵌套\"> 1 配置块的嵌套</h2>\n<div><pre><code><span>http</span> <span>{</span>\n    <span>upstream</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n    <span>split_clients</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n    <span>map</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n    <span>geo</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n    <span>server</span> <span>{</span>\n        <span>if</span> <span>(</span><span>)</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n        <span>location</span> <span>{</span>\n            <span>limit_except</span> <span>{</span><span>.</span><span>.</span><span>.</span><span>}</span>\n        <span>}</span>\n        <span>location</span> <span>{</span>\n            <span>location</span> <span>{</span>\n                \n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n    <span>server</span> <span>{</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id=\"_2-指令的合并\"> 2 指令的合并</h2>\n<ul>\n<li>值指令：存储配置项的值\n<ul>\n<li>可以合并</li>\n<li>示例：root，access_log，gzip</li>\n</ul>\n</li>\n<li>动作类指令：指定行为\n<ul>\n<li>不可以合并</li>\n<li>示例：rewrite，proxy_pass</li>\n<li>生效阶段：server_rewrite阶段，rewrite阶段，content阶段</li>\n</ul>\n</li>\n</ul>\n<p><strong>存储值的指令继承规则：向上覆盖</strong></p>\n<ul>\n<li>子配置不存在时，直接使用父配置块</li>\n<li>子配置存在时，直接覆盖父配置块</li>\n</ul>\n<div><pre><code><span>server</span> <span>{</span>\n    <span>listen</span> <span>8080</span><span>;</span>\n    <span>root</span> <span>/</span>home<span>/</span>geek<span>/</span>nginx<span>/</span>html<span>;</span>\n    <span>access_log</span> logs<span>/</span>geek<span>.</span>access<span>.</span>log main<span>;</span>\n    <span>location</span> <span>/</span>test <span>{</span>\n        <span>root</span> <span>/</span>home<span>/</span>geek<span>/</span>nginx<span>/</span>test<span>;</span>\n        <span>access_log</span> logs<span>/</span>access<span>.</span>test<span>.</span>log main<span>;</span>\n    <span>}</span>\n    <span>location</span> <span>/</span>dlib <span>{</span>\n        <span>alias</span> dlib<span>/</span><span>;</span>\n    <span>}</span>\n    <span>location</span> <span>/</span> <span>{</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id=\"_3-http请求处理时的11个阶段\"> 3 HTTP请求处理时的11个阶段</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317095602291.png\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317095641772.png\" alt=\"\"></p>\n<h2 id=\"_4-正则表达式\"> 4 正则表达式</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317093833697.png\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317094000335.png\" alt=\"\"></p>\n<h2 id=\"_5-提取用户真实ip\"> 5 提取用户真实ip</h2>\n<p>如何拿到真实的用户ip地址？</p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317095930682.png\" alt=\"\"></p>\n<p>拿到真实用户ip后如何使用？</p>\n<p>基于变量：如binary_remote_addr、remote_addr这样的变量，其值就为真实的IP！这样做连接限制（limit_conn模块）才有意义！</p>\n<p><strong>步骤</strong></p>\n<ol>\n<li>\n<p>安装realip模块</p>\n<p>realip是Nginx内置模块，需要在编译Nginx时加上<code>--with-http_realip_module</code>参数来启用它。</p>\n</li>\n<li>\n<p>配置语法</p>\n<div><pre><code>set_real_ip_from 192.168.1.0/24; #真实服务器上一级代理的IP地址或者IP段,可以写多行。\nset_real_ip_from 192.168.2.1;\nreal_ip_header X-Forwarded-For;  #从哪个header头检索出要的IP地址。\nreal_ip_recursive on; #递归的去除所配置中的可信IP。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这里详细讲下<code>real_ip_recursive</code>的用途：递归的去除所配置中的可信IP，排除set_real_ip_from里面出现的IP。如果出现了未出现这些IP段的IP，那么这个IP将被认为是用户的IP。</p>\n</li>\n<li>\n<p>配置实例</p>\n<div><pre><code><span>location</span> <span>/</span> <span>{</span>\n    <span>root</span> html<span>/</span><span>;</span>\n    <span>proxy_set_header</span> X<span>-</span>Forwarded<span>-</span>For <span>$proxy_add_x_forwarded_for</span><span>;</span>\n    <span>set_real_ip_from</span> <span>192.168</span><span>.1</span><span>.0</span><span>/</span><span>24</span><span>;</span>\n    <span>set_real_ip_from</span> <span>192.168</span><span>.2</span><span>.1</span><span>;</span>\n    <span>real_ip_header</span> X<span>-</span>Forwarded<span>-</span>For<span>;</span>\n    real_ip_recursive on<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>\n</ol>\n<h2 id=\"_6-定义404错误页面\"> 6 定义404错误页面</h2>\n<h3 id=\"_6-1-nginx自己的错误页面\"> 6.1 Nginx自己的错误页面</h3>\n<p>Nginx访问一个静态的html 页面，当这个页面没有的时候，Nginx抛出404，那么如何返回给客户端404呢？</p>\n<p>看下面的配置，这种情况下不需要修改任何参数，就能实现这个功能。</p>\n<div><pre><code><span>server</span> <span>{</span>\n    <span>listen</span> <span>80</span><span>;</span>\n    <span>server_name</span> www<span>.</span>test<span>.</span>com<span>;</span>\n    <span>root</span> <span>/</span>var<span>/</span>www<span>/</span>test<span>;</span>\n    <span>index</span> <span>index</span><span>.</span>html <span>index</span><span>.</span>htm<span>;</span>\n    <span>location</span> <span>/</span> <span>{</span>\n        \n    <span>}</span>\n    <span># 定义错误页面码，如果出现相应的错误页面码，转发到那里。</span>\n    <span>error_page</span> <span>404</span> <span>403</span> <span>500</span> <span>502</span> <span>503</span> <span>504</span> <span>/</span><span>404.</span>html<span>;</span>\n    <span># 承接上面的location</span>\n    <span>location</span> <span>=</span> <span>/</span><span>404.</span>html <span>{</span>\n        <span># 放错误页面的目录路径。</span>\n        <span>root</span> <span>/</span>usr<span>/</span>share<span>/</span>nginx<span>/</span>html<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id=\"_6-2-反向代理的错误页面\"> 6.2 反向代理的错误页面</h3>\n<p>如果后台Tomcat处理报错抛出404，想把这个状态叫Nginx反馈给客户端或者重定向到某个连接，配置如下：</p>\n<div><pre><code><span>upstream</span> www <span>{</span>\n    <span>server</span> <span>192.168</span><span>.1</span><span>.201</span><span>:</span><span>8080</span> weight<span>=</span><span>20</span> max_fails<span>=</span><span>2</span> fail_timeout<span>=</span><span>30</span>s\n        <span>ip_hash</span><span>;</span>\n<span>}</span>\n<span>server</span> <span>{</span>\n    <span>listen</span> <span>80</span><span>;</span>\n    <span>server_name</span> www<span>.</span>test<span>.</span>com<span>;</span>\n    <span>root</span> <span>/</span>var<span>/</span>www<span>/</span>test<span>;</span>\n    <span>index</span> <span>index</span><span>.</span>html<span>;</span>\n    <span>location</span> <span>/</span> <span>{</span>\n        <span>if</span><span>(</span><span>$request_uri</span> <span>~</span><span>*</span> <span>'^/$'</span><span>)</span> <span>{</span>\n            <span>rewrite</span> <span>.</span><span>*</span> <span>http</span><span>:</span><span>/</span><span>/</span>www<span>.</span>test2<span>.</span>com<span>/</span><span>index</span><span>.</span>html redirect<span>;</span>\n        <span>}</span>\n        <span># 关键参数：这个变量开启后，我们才能自定义错误页面，当后端返回404，nginx拦截错误，定义错误页面</span>\n        <span>proxy_intercept_errors</span> on<span>;</span>\n        <span>proxy_pass</span> <span>http</span><span>:</span><span>/</span><span>/</span>www<span>;</span>\n        <span>proxy_set_header</span> HOST <span>$host</span><span>;</span>\n    <span>}</span>\n    <span>error_page</span> <span>404</span> <span>/</span><span>404.</span>html<span>;</span>\n    <span>location</span> <span>=</span> <span>/</span><span>404.</span>html <span>{</span>\n        <span>root</span> <span>/</span>usr<span>/</span>share<span>/</span>nginx<span>/</span>html<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h3 id=\"_6-3-nginx解析php代码的错误页面\"> 6.3 Nginx解析php代码的错误页面</h3>\n<p>如果后端是php解析的，需要加一个变量</p>\n<p>在http段中加一个变量</p>\n<p><code>fastcgi_intercept_errors on</code>就可以了。</p>\n<blockquote>\n<p>参考链接：</p>\n<p>https://www.hi-linux.com/posts/53006.html</p>\n<p>https://blog.csdn.net/lijunwyf/article/details/79611003</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317095602291.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "3.4 nginxLOCATION块配置",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/location/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/location/",
      "content_html": "<h1 id=\"_3-4-nginxlocation块配置\"> 3.4 nginxLOCATION块配置</h1>\n<p><code>nginx</code>中<code>location</code>的匹配模式有以下几种：</p>\n<ul>\n<li>\n<p>精确匹配：以<code>=</code>开头，只有完全匹配才能生效，例子<code>location = /uri</code></p>\n</li>\n<li>\n<p>非正则匹配：以<code>^~</code>开头，<code>^</code>表示非、<code>~</code>表示正则，例子<code>location ^~ /uri</code></p>\n</li>\n<li>\n<p>正则匹配：</p>\n<ul>\n<li>以<code>~</code>开头，表示区分大小写的正则匹配，例子<code>location ~ pattern</code></li>\n<li>以<code>!~</code>开头，表示区分大小写不匹配的正则，例子<code>location !~ pattern</code></li>\n<li>以<code>~*</code>开头，表示不区分大小写的正则匹配，例子<code>location ~* pattern</code></li>\n<li>以<code>!~*</code>开头，表示不区分大小写不匹配的正则，例子<code>location !~* pattern</code></li>\n</ul>\n</li>\n<li>\n<p>普通匹配：不带任何修饰符，例子<code>location /uri</code>、<code>location /</code></p>\n</li>\n</ul>\n<blockquote>\n<p>我们暂且把非正则匹配和普通匹配称为前缀匹配</p>\n</blockquote>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/nginx%E4%B8%ADlocation%E5%8C%B9%E9%85%8D%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"nginx中location匹配流程图\"></p>\n<h2 id=\"_1-匹配模式优先级\"> 1 匹配模式优先级</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200320195331145.png\" alt=\"\"></p>\n<div><pre><code>location = /uri 　　　=开头表示精确匹配，只有完全匹配上才能生效。\nlocation ^~ /uri 　　^~ 开头对URL路径进行前缀匹配，并且在正则之前。无正则普通匹配（^ 表示“非”，~ 表示“正则”，字符意思是：不要继续匹配正则）\nlocation ~ pattern 　~开头表示区分大小写的正则匹配。!~为区分大小写不匹配的正则\nlocation ~* pattern 　~*开头表示不区分大小写的正则匹配。!~*为不区分大小写不匹配的正则\nlocation /uri 　　　　不带任何修饰符，也表示前缀匹配，但是在正则匹配之后。\nlocation / 　　　　　通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>注意：\n前缀匹配，如果有包含关系时，按最大匹配原则进行匹配。比如在前缀匹配：location /dir1与location /dir1/dir2，如有请求http://localhost/dir1/dir2/file将最终匹配到location /dir1/dir2</p>\n<p>优先级：\n(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location <sub>,</sub>* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>\n<blockquote>\n<p>上述的优先级不完全正确</p>\n</blockquote>\n<p>具体规则：</p>\n<p>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他location的匹配项</p>\n<p>剩下的几种匹配优先级略复杂，具体可以查看Nginx官方文档（http://nginx.org/en/docs/http/ngx_http_core_module.html#location）</p>\n<ul>\n<li>\n<p>^~和普通匹配。</p>\n<p>使用前缀匹配，不支持正则表达式，如果有多个location匹配成功的话，不会终止匹配过程，会记忆表达式最长的那个。</p>\n</li>\n<li>\n<p>如果上一步得到的最长的location为^~类型，则表示阻断正则表达式，不再匹配正则表达式</p>\n</li>\n<li>\n<p>如果上一步得到的最长的location不是^~类型，继续匹配正则表达式，只要有一个正则成功，则使用这个正则的location，立即返回结果，并结束解析过程</p>\n</li>\n</ul>\n<p><strong>“最长”命中</strong></p>\n<p>^~和普通命中，都是优先使用匹配最长的结果，示例如下：</p>\n<p><strong>例子1</strong></p>\n<div><pre><code><span>location</span> <span>/</span>test_1 <span>{</span>\n    <span>return</span> <span>400</span><span>;</span>\n<span>}</span>\n<span>location</span> <span>^</span><span>~</span> <span>/</span>test <span>{</span>\n    <span>return</span> <span>401</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>如上如果path为/test_1，返回的是400，说明^~优先级并不比普通匹配高</p>\n<p><strong>例子2</strong></p>\n<div><pre><code><span>location</span> <span>/</span>test_1 <span>{</span>\n    <span>return</span> <span>400</span><span>;</span>\n<span>}</span>\n<span>location</span> <span>^</span><span>~</span> <span>/</span>test <span>{</span>\n    <span>return</span> <span>401</span><span>;</span>\n<span>}</span>\n<span>location</span> <span>~</span> <span>/</span>test <span>{</span>\n    <span>return</span> <span>402</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>如上如果path为/test_1，返回的是402，此时^~和普通匹配只记住了最长一个location /test_1，不会阻止正则</p>\n<p>如果path为/test，返回401，此时^~和普通匹配只记住了最长一个location ^~ /test，会阻止正则</p>\n<h2 id=\"_2-路径替换\"> 2 路径替换</h2>\n<p><strong>规则</strong></p>\n<p>配置proxy_pass时，可以实现URL路径的部分替换。</p>\n<p>proxy_pass的目标地址，默认不带/，表示只代理域名，url和querystring部分不会变（把请求的path拼接到proxy_pass目标域名之后作为代理的URL）。</p>\n<p>如果在目标地址后增加/，则表示把path中location匹配成功的部分剪切掉之后再拼接到proxy_pass目标地址。</p>\n<p>比如请求 /a/b.html</p>\n<div><pre><code><span>location</span> <span>/</span>a <span>{</span>\n    <span>proxy_pass</span> <span>http</span><span>:</span><span>/</span><span>/</span><span>server</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>location</span> <span>/</span>a<span>/</span> <span>{</span>\n    <span>proxy_pass</span> <span>http</span><span>:</span><span>/</span><span>/</span><span>server</span><span>/</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如上两个匹配成功后，实际代理的目标url分别是</p>\n<p>http://server/a/b.html (把/a/b.html拼接到http://server之后)</p>\n<p>http://server/b.html (把/a/b.html的/a/去掉之后，拼接到http://server/之后)</p>\n<blockquote>\n<p>通过 Nginx Server 访问 <code>http://nginx/nginx_location/some/path</code></p>\n<p><code>proxy_pass</code>直接映射到主机的 <code>/test</code></p>\n<p>建议location和proxy_pass后面都加上/，否则容易引起混乱。</p>\n<table>\n<thead>\n<tr>\n<th>location</th>\n<th>proxy_pass</th>\n<th>实际访问目标</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/nginx_location/</code></td>\n<td><code>http://server/test/</code></td>\n<td><code>http://server/test/some/path</code></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p><strong>要求</strong></p>\n<p>注意的是，对于location为正则表达式的匹配，proxy_pass的目标地址不可以带/</p>\n<p>比如，如下配置会报错：</p>\n<div><pre><code><span>location</span> <span>~</span> <span>/</span><span>abc</span><span>(</span><span>.</span><span>*</span><span>)</span> <span>{</span>\n    <span>proxy_pass</span>   <span>http</span><span>:</span><span>/</span><span>/</span><span>127.0</span><span>.0</span><span>.1</span><span>/</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果是正则表达式，想要实现proxy_pass的路径替换，可以使用如下方式：</p>\n<div><pre><code><span>location</span> <span>~</span> <span>/</span><span>abc</span><span>(</span><span>.</span><span>*</span><span>)</span> <span>{</span>\n    <span>proxy_pass</span>   <span>http</span><span>:</span><span>/</span><span>/</span><span>127.0</span><span>.0</span><span>.1</span><span>/</span>$<span>1</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-root和alias的使用\"> 3 root和alias的使用</h2>\n<p>nginx指定文件路径有两种方式root和alias，</p>\n<p>root与alias主要区别在于nginx如何解释location后面的uri，</p>\n<p>这会使两者分别以不同的方式将请求映射到服务器文件上。</p>\n<h3 id=\"_3-1-最基本的区别\"> 3.1 最基本的区别</h3>\n<p>alias 指定的目录是准确的，给location指定一个目录。</p>\n<p>root 指定目录的上级目录，并且该上级目录要含有locatoin指定名称的同名目录。</p>\n<p>以root方式设置资源路径：</p>\n<div><pre><code>语法: root path;\n配置块: http、server、location、if\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>以alias 方式设置资源路径</p>\n<div><pre><code>语法: alias path;\n配置块: location\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>Example:</p>\n<div><pre><code>location /img/ {\n\talias /var/www/image/;\n}\n#若按照上述配置的话，则访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件\nlocation /img/ {\n\troot /var/www/image;\n}\n#若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>注意：</p>\n<div><pre><code>1.使用alias时，目录名后面一定要加”/“。\n2.使用alias标签的目录块中不能使用rewrite的break。\n3.alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。\n4.alias只能位于location块中\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>所以使用nginx设置root时要注意一个问题，就是如果该root设置的前端目录不是根目录，那么在写root的绝对地址时，要把前端目录的部分省略掉。\n我们用设置虚拟目录指向的alias来和root比较一下就非常明显了</p>\n<div><pre><code>location /abc/ {   alias /home/html/abc/; }  \n</code></pre>\n<div><span>1</span><br></div></div><p>在这段配置下，http://test/abc/a.html就指定的是 /home/html/abc/a.html。这段配置亦可改成</p>\n<div><pre><code>location /abc/ {   root /home/html/;} \n</code></pre>\n<div><span>1</span><br></div></div><p>可以看到，使用root设置目录的绝对路径时，少了/abc,也就是说，使用root来设置前端非根目录时，nginx会组合root和location的路径,即 /home/html/abc/。</p>\n<h2 id=\"_4-try-files指令\"> 4 try_files指令</h2>\n<div><pre><code>Syntax:\ttry_files file ... uri;\ntry_files file ... =code;\nDefault:\t—\nContext:\tserver, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><strong>示例</strong></p>\n<div><pre><code><span>try_files</span> <span>$uri</span> <span>$uri</span><span>/</span> <span>/</span>test<span>/</span><span>;</span>\n</code></pre>\n<div><span>1</span><br></div></div><p>功能：依次试图访问多个url对应的文件（由root或者alias指令指定），当文件存在是直接返回文件内容，如果所有文件都不存在，则按最后一个URL结果或者code返回</p>\n<h2 id=\"_5-stub-status\"> 5 stub_status</h2>\n<p>配置示例</p>\n<div><pre><code><span>location</span> <span>/</span>basic_status <span>{</span>\n\t<span>stub_status</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>ngx_http_stub_status_module模块內建的状态页\n用于输出nginx的基本状态信息；</p>\n<div><pre><code>server{\n....\n\tlocation /ngxstatus {\n\t\tstub_status;\n\t}\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>信息页返回数值：</p>\n<div><pre><code>Active connections: 291\nserver accepts handled requests\n16630948 16630948 31070465\nReading: 6 Writing: 179 Waiting: 106\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>\n<li>Active connections: 活动状态的连接数；</li>\n<li>accepts：已经接受的客户端请求的总数；</li>\n<li>handled：已经处理完成的客户端请求的总数；</li>\n<li>requests：客户端发来的总的请求数；</li>\n<li>Reading：处于读取客户端请求报文首部的连接的连接数；</li>\n<li>Writing：处于向客户端发送响应报文过程中的连接数；</li>\n<li>Waiting：处于等待客户端发出请求的空闲连接数；</li>\n</ul>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/nginx中location匹配流程图.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "3.5 nginx常用模块",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/module/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/module/",
      "content_html": "<h1 id=\"_3-5-nginx常用模块\"> 3.5 nginx常用模块</h1>\n<h2 id=\"_1-module-ngx-http-gzip-module\"> 1 Module ngx_http_gzip_module</h2>\n<p>该<code>ngx_http_gzip_module</code>模块是一个使用“gzip”方法压缩响应的过滤器。这通常有助于将传输数据的大小减少一半甚至更多。</p>\n<blockquote>\n<p>使用SSL / TLS协议时，压缩的响应可能会受到 <a href=\"https://en.wikipedia.org/wiki/BREACH\" target=\"_blank\" rel=\"noopener noreferrer\">BREACH</a>攻击。</p>\n</blockquote>\n<p>在实际的应用中我们发现压缩的比率往往在 3 到 10 倍，也就是本来 50k 大小的页面，采用压缩后实际传输的内容大小只有 5 至 15k 大小，这可以大大节省服务器的网络带宽，同时如果应用程序的响应足够快时，网站的速度瓶颈就转到了网络的传输速度上，因此内容压缩后就可以大大的提升页面的浏览速度。</p>\n<h3 id=\"_1-1-example-configuration\"> 1.1 Example Configuration</h3>\n<div><pre><code>gzip on;\ngzip_buffers 4 8k;\ngzip_comp_level 6;\ngzip_disable &quot;MSIE [1-6]\\.&quot;;\ngzip_http_version 1.1;\ngzip_min_length 1000;\ngzip_proxied any;\ngzip_vary on;\ngzip_types text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json image/jpeg image/gif image/png image/jpg;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"_1-2-directives\"> 1.2 Directives</h3>\n<p><strong>gzip</strong></p>\n<div><pre><code>Syntax:\tgzip on | off;\nDefault: gzip off;\nContext:\thttp, server, location, if in location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>启用或禁用gzipping响应。</p>\n<p><strong>gzip_buffers</strong></p>\n<div><pre><code>Syntax:\tgzip_buffers number size;\nDefault: gzip_buffers 32 4k|16 8k;\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>设置用于压缩响应的缓冲区<code>*number*</code>和<code>*size*</code>。默认情况下，缓冲区大小等于一个内存页面。这是4K或8K，具体取决于平台。</p>\n<p><strong>gzip_comp_level</strong></p>\n<div><pre><code>Syntax:\tgzip_comp_level level;\nDefault: gzip_comp_level 1;\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>设置<code>level</code>响应的gzip压缩。可接受的值范围为1到9。</p>\n<p>推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)</p>\n<p><strong>gzip_disable</strong></p>\n<div><pre><code>Syntax:\tgzip_disable regex ...;\nDefault: —\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>对具有与任何指定正则表达式匹配的“User-Agent”标头字段的请求禁用gzipping响应。</p>\n<p>特殊掩码“ <code>msie6</code>”（0.7.12）对应于正则表达式“ <code>MSIE [4-6]\\.</code>”，但效果更快。</p>\n<p><strong>gzip_http_version</strong></p>\n<div><pre><code>Syntax:\tgzip_http_version 1.0 | 1.1;\nDefault: gzip_http_version 1.1;\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>设置压缩响应所需的最低HTTP请求版本。</p>\n<p>99.99%的浏览器基本上都支持gzip解压了，所以可以不用设这个值,保持系统默认即可。</p>\n<p><strong>gzip_min_length</strong></p>\n<div><pre><code>Syntax:\tgzip_min_length length;\nDefault: gzip_min_length 20;\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>设置将被gzip压缩的响应的最小长度。长度仅由“Content-Length”响应头字段确定。</p>\n<p><strong>gzip_proxied</strong></p>\n<div><pre><code>Syntax:\tgzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;\nDefault: gzip_proxied off;\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>根据请求和响应启用或禁用对代理请求的响应的gzipping。请求被代理的事实由“Via”请求头字段的存在确定。该指令接受多个参数：</p>\n<ul>\n<li><code>off</code>：禁用所有代理请求的压缩，忽略其他参数;</li>\n<li><code>expired</code>：如果响应头包含“Expires”字段，其值为禁用缓存，则启用压缩;</li>\n<li><code>no-cache</code>：如果响应头包含带有“ <code>no-cache</code>”参数的“Cache-Control”字段，则启用压缩;</li>\n<li><code>no-store</code>：如果响应头包含带有“ <code>no-store</code>”参数的“Cache-Control”字段，则启用压缩;</li>\n<li><code>private</code>：如果响应头包含带有“ <code>private</code>”参数的“Cache-Control”字段，则启用压缩;</li>\n<li><code>no_last_modified</code>：如果响应头不包含“Last-Modified”字段，则启用压缩;</li>\n<li><code>no_etag</code>：如果响应头不包含“ETag”字段，则启用压缩;</li>\n<li><code>auth</code>：如果请求标头包含“授权”字段，则启用压缩;</li>\n<li><code>any</code>：为所有代理请求启用压缩。</li>\n</ul>\n<p><strong>gzip_types</strong></p>\n<div><pre><code>Syntax:\tgzip_types mime-type ...;\nDefault:\tgzip_types text/html;\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>除了“ <code>text/html</code>” 之外，还允许对指定的MIME类型进行gzipping响应。特殊值“ <code>*</code>”匹配任何MIME类型。</p>\n<blockquote>\n<p>图片类型的文件压缩比例很小，可以不忽略不计，所以图片不建议压缩</p>\n</blockquote>\n<p><strong>gzip_vary</strong></p>\n<div><pre><code>Syntax:\tgzip_vary on | off;\nDefault:\tgzip_vary off;\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果指令<a href=\"http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip\" target=\"_blank\" rel=\"noopener noreferrer\">gzip</a>， <a href=\"http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html#gzip_static\" target=\"_blank\" rel=\"noopener noreferrer\">gzip_static</a>或<a href=\"http://nginx.org/en/docs/http/ngx_http_gunzip_module.html#gunzip\" target=\"_blank\" rel=\"noopener noreferrer\">gunzip</a> 处于活动状态， 则启用或禁用插入“Vary：Accept-Encoding”响应头字段 。</p>\n<h3 id=\"_1-3-常见问题\"> 1.3 常见问题</h3>\n<p><strong>调用接口时，返回json乱码的问题</strong></p>\n<p>原因：</p>\n<p>gzip是nginx的压缩格式。（gzip是浏览器可接受的压缩格式） 但是我们调用接口并没有通过浏览器。所以没有办法对返回的结果进行解压。</p>\n<p>解决办法：</p>\n<ul>\n<li>在响应的<code>location</code>中关闭gzip</li>\n<li>或者让后端改代码，增加判断，然后用gzip流的方式进行解压读取</li>\n</ul>\n<h2 id=\"_2-module-ngx-http-log-module\"> 2 Module ngx_http_log_module</h2>\n<h3 id=\"_2-1-example-configuration\"> 2.1 Example Configuration</h3>\n<div><pre><code><span>log_format</span> compression <span>'$remote_addr - $remote_user [$time_local] '</span>\n                       <span>'\"$request\" $status $bytes_sent '</span>\n                       <span>'\"$http_referer\" \"$http_user_agent\" \"$gzip_ratio\"'</span><span>;</span>\n\n<span>access_log</span> <span>/</span>spool<span>/</span>logs<span>/</span>nginx<span>-</span>access<span>.</span>log compression buffer<span>=</span><span>32</span>k<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_2-2-access-log指令\"> 2.2 access_log指令</h3>\n<div><pre><code>Syntax:\taccess_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];\n\t\taccess_log off;\nDefault:\taccess_log logs/access.log combined;\nContext:\thttp, server, location, if in location, limit_except\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_2-3-log-format指令\"> 2.3 log_format指令</h3>\n<div><pre><code>Syntax:\tlog_format name [escape=default|json|none] string ...;\nDefault:\tlog_format combined &quot;...&quot;;\nContext:\thttp\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-rewrite模块\"> 3 Rewrite模块</h2>\n<h3 id=\"_3-1-return指令\"> 3.1 return指令</h3>\n<div><pre><code>Syntax:\treturn code [text];\n\t\treturn code URL;\n\t\treturn URL;\nDefault:\t—\nContext:\tserver, location, if\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><strong>返回状态码</strong></p>\n<ul>\n<li>nginx自定义\n<ul>\n<li>444：关闭连接</li>\n</ul>\n</li>\n<li>HTTP1.0标准\n<ul>\n<li>301：http1.0永久重定向</li>\n<li>302：临时重定向，禁止被缓存</li>\n</ul>\n</li>\n<li>HTTP1.1标准\n<ul>\n<li>303：临时重定向，允许改变方法，禁止被缓存</li>\n<li>307：临时重定向，不允许改变方式，禁止被缓存</li>\n<li>308：永久重定向，不允许改变方法</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<div><pre><code><span>server</span> <span>{</span>\n    <span>server_name</span> wiki<span>.</span>clay<span>-</span>wangzhi<span>.</span>com<span>;</span>\n    <span>listen</span> <span>8080</span><span>;</span>\n    \n    <span>root</span> html<span>/</span><span>;</span>\n    <span>error_page</span> <span>404</span><span>/</span><span>403.</span>html<span>;</span>\n    <span>return</span> <span>403</span><span>;</span>\n    <span>location</span> <span>/</span> <span>{</span>\n        <span>return</span> <span>404</span> <span>\"find nothing!\"</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><strong>return指令与errror_page</strong></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200320195040345.png\" alt=\"\"></p>\n<h3 id=\"_3-2-rewrite指令\"> 3.2 rewrite指令</h3>\n<div><pre><code>Syntax:\trewrite regex replacement [flag];\nDefault:\t—\nContext:\tserver, location, if\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>功能</strong></p>\n<ul>\n<li>\n<p>将regex指定的url替换成replacement这个新的url</p>\n<p>可以使用正则表达式及变量提取</p>\n</li>\n<li>\n<p>当replacement以http://或者https://或者$schema开头，则直接返回302重定向</p>\n</li>\n<li>\n<p>替换后的url根据flag指定的方式进行处理</p>\n<p>如果在同一级配置块中存在多个rewrite规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的替换检查，因此，隐含有循环机制；[flag]所表示的标志位用于控制此循环机制；</p>\n<ul>\n<li>\n<p>last：</p>\n<ul>\n<li>浏览器地址栏URL地址不变</li>\n<li>用replacement这个URI进行新的location匹配，重写完成后停止对当前URI在当前location中后续的其它重写操作，而后对新的URI启动新一轮重写检查；提前重启新一轮循环；</li>\n</ul>\n</li>\n<li>\n<p>beak：</p>\n<ul>\n<li>浏览器地址栏URL地址不变</li>\n<li>break指令停止当前脚本指令的执行，等价于独立的break指令,重写完成后停止对当前URI在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环；</li>\n</ul>\n</li>\n<li>\n<p>redirect：</p>\n<ul>\n<li>浏览器地址会显示跳转后的URL地址</li>\n<li>返回302临时重定向，</li>\n</ul>\n</li>\n<li>\n<p>permanent：</p>\n<ul>\n<li>浏览器地址会显示跳转后的URL地址</li>\n<li>返回301永久重定向</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>功能一句话概括为：使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。</p>\n</blockquote>\n<p><strong>示例1</strong></p>\n<div><pre><code>        <span>root</span> html<span>/</span><span>;</span>\n        <span>location</span> <span>/</span>first <span>{</span>\n            <span>rewrite</span> <span>/</span><span>first</span><span>(</span><span>.</span><span>*</span><span>)</span> <span>/</span>second$<span>1</span> last<span>;</span>\n            <span>return</span> <span>200</span> <span>'first!'</span><span>;</span>\n        <span>}</span>\n\n        <span>location</span> <span>/</span>second <span>{</span>\n            <span>rewrite</span> <span>/</span><span>second</span><span>(</span><span>.</span><span>*</span><span>)</span> <span>/</span>third$<span>1</span> <span>break</span><span>;</span>\n            <span>return</span> <span>200</span> <span>'second!'</span><span>;</span>\n        <span>}</span>\n\n        <span>location</span> <span>/</span>third <span>{</span>\n            <span>return</span> <span>200</span> <span>'third!'</span><span>;</span>\n        <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>访问/first/1.txt的结果为：<code>html/third/1.txt</code>的内容</p>\n<p>访问/second/1.txt的结果为：<code>html/third/1.txt</code>的内容</p>\n<p>访问/third/1.txt的结果为：<code>third</code>的内容</p>\n<p><strong>示例</strong>2</p>\n<div><pre><code><span># http://www.test.com/test/abc/1.html ⇒ http://www.test.com/ccc/bbb/2.html</span>\n<span>location</span> <span>/</span>test <span>{</span>\n    <span>rewrite</span> <span>.</span><span>*</span> <span>/</span>ccc<span>/</span>bbb<span>/</span><span>2.</span>html permanent<span>;</span>\n<span>}</span>\n\n<span># http://www.test.com/2015/ccc/bbb/2.html ==> http://www.test.com/2014/ccc/bbb/2.html</span>\n<span>location</span> <span>/</span><span>2015</span> <span>{</span>\n    <span>rewrite</span> <span>^</span><span>/</span><span>2015</span><span>/</span><span>(</span><span>.</span><span>*</span><span>)</span>$ <span>/</span><span>2014</span><span>/</span>$<span>1</span> permanent<span>;</span>\n<span>}</span>\n\n<span># http://www.test.com/2015/ccc/bbb/2.html  ==> http://jd.com/index.php</span>\n<span>location</span> <span>/</span><span>2015</span> <span>{</span>\n    <span>if</span> <span>(</span><span>$host</span> <span>~</span><span>*</span> test<span>.</span>com<span>)</span> <span>{</span>\n        <span>rewrite</span> <span>.</span><span>*</span> <span>http</span><span>:</span><span>/</span><span>/</span>www<span>.</span>jd<span>.</span>com<span>/</span><span>index</span><span>.</span>php permanent<span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span># http://www.test.com/kkk/1.html ==> http://jd.com/kkk/1.html</span>\n<span>location</span> <span>/</span> <span>{</span>\n    <span>root</span> html<span>;</span>\n    <span>index</span> <span>index</span><span>.</span>html <span>index</span><span>.</span>htm<span>;</span>\n    <span>if</span> <span>(</span><span>$host</span> <span>~</span><span>*</span> test<span>.</span>com<span>)</span> <span>{</span>\n        <span>rewrite</span> <span>.</span><span>*</span> <span>http</span><span>:</span><span>/</span><span>/</span>www<span>.</span>jd<span>.</span>com<span>/</span><span>$request_uri</span> permanent<span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span># 有时候在访问一个二级子目录时会出现目录后的/无法补齐，如：</span>\n<span>#  elinks --dump www.test.com/www  无法访问</span>\n<span>#  elinks --dump www.test.com/www/可以访问 </span>\n<span>if</span> <span>(</span><span>-</span>d <span>$request_filename</span><span>)</span> <span>{</span>\n    <span>rewrite</span> <span>^</span><span>(</span><span>.</span><span>*</span><span>)</span><span>(</span><span>[</span><span>^</span><span>/</span><span>]</span><span>)</span>$ <span>http</span><span>:</span><span>/</span><span>/</span><span>$host</span>$<span>1</span>$<span>2</span><span>/</span> permanent<span>;</span>\n<span>}</span>\n<span># ^/(.*)([^/])$表示以/符号开始并紧跟着任何字符，同时不是以/为结束的字符串，在我的url中，(.*)表示的ww，([^/])表示的w</span>\n\n<span># http://www.test.com/login/robin.html     ==>  http://www.test.com/reg/login.php?user=robin</span>\n<span>location</span> <span>/</span>login <span>{</span>\n    <span>rewrite</span> <span>^</span><span>/</span>login<span>/</span><span>(</span><span>.</span><span>*</span><span>)</span>\\<span>.</span>html$ <span>/</span>reg<span>/</span>login<span>.</span>php<span>?</span><span>user</span><span>=</span>$<span>1</span> permanent<span>;</span>\n<span>}</span>\n\n<span># http://www.test.com/uplook/10-10-10.html  ==>  http://www.test.com/uplook/10/10/10.html </span>\n<span>location</span> <span>/</span>uplook <span>{</span>\n    <span>rewrite</span> <span>^</span><span>/</span>uplook<span>/</span><span>(</span><span>[</span><span>0</span><span>-</span><span>9</span><span>]</span><span>+</span><span>)</span><span>-</span><span>(</span><span>[</span><span>0</span><span>-</span><span>9</span><span>]</span><span>+</span><span>)</span><span>-</span><span>(</span><span>[</span><span>0</span><span>-</span><span>9</span><span>]</span><span>+</span><span>)</span>\\<span>.</span>html$ <span>/</span>uplook<span>/</span>$<span>1</span><span>/</span>$<span>2</span><span>/</span>$<span>3.</span>html permanent<span>;</span>\n<span>}</span>\n\n<span># set 指令是用于定义一个变量，并且赋值。应用于server,location,if环境。</span>\n<span># http://robin.test.com ==> http://www.test.com/robin</span>\n<span># http://zorro.test.com ==> http://www.test.com/zorro</span>\n<span>if</span> <span>(</span><span>$host</span> <span>~</span><span>*</span> <span>\"^www.test.com$\"</span><span>)</span> <span>{</span>\n    <span>break</span><span>;</span>\n<span>}</span>\n<span>if</span> <span>(</span><span>$host</span> <span>~</span><span>*</span> <span>\"^(.*)\\.test\\.com$\"</span><span>)</span> <span>{</span>\n    <span>set</span> <span>$user</span> $<span>1</span><span>;</span>\n    <span>rewrite</span> <span>.</span><span>*</span> <span>http</span><span>:</span><span>/</span><span>/</span>www<span>.</span>test<span>.</span>com<span>/</span><span>$user</span> permanent<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div><blockquote>\n<p>last 一般写在server和if中，而break一般使用在location中</p>\n</blockquote>\n<h3 id=\"_3-3-if指令\"> 3.3 if指令</h3>\n<div><pre><code>Syntax:\tif (condition) { ... }\nDefault:\t—\nContext:\tserver, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>规则：条件condition为真，则执行大括号内的指令；遵循值指令的继承规则</p>\n<p><strong>if指令的条件表达式</strong></p>\n<ul>\n<li>检查变量为空或者值是否为0，直接使用\n<ul>\n<li>当表达式只是一个变量时，如果值为空或任何以 0 开头的字符串都会当做 false</li>\n</ul>\n</li>\n<li>将变量与字符串做匹配，使用=或者!=</li>\n<li>将变量与正则表达式做匹配\n<ul>\n<li>大小写敏感，<sub>或者!</sub></li>\n<li>大小写不敏感，<sub>*或者!</sub>*</li>\n</ul>\n</li>\n<li>检查文件是否存在，使用-f或者!-f</li>\n<li>检查目录是否存在，使用-d或者!-d</li>\n<li>检查文件、目录、软连接是否存在，使用-e或者!-e</li>\n<li>检查是否为可执行文件，使用-x或者!-x</li>\n</ul>\n<p><strong>示例</strong></p>\n<div><pre><code><span>if</span> <span>(</span><span>$http_user_agent</span> <span>~</span> MSIE<span>)</span> <span>{</span>\n    <span>rewrite</span> <span>^</span><span>(</span><span>.</span><span>*</span><span>)</span>$ <span>/</span>msie<span>/</span>$<span>1</span> <span>break</span><span>;</span>\n<span>}</span>\n<span>if</span> <span>(</span><span>$http_cookie</span> <span>~</span><span>*</span> <span>\"id=([^;]+)(?:;|$)\"</span><span>)</span> <span>{</span>\n    <span>set</span> <span>$id</span> $<span>1</span><span>;</span>\n<span>}</span>\n<span>if</span> <span>(</span><span>$repuest_method</span> <span>=</span> POST<span>)</span> <span>{</span>\n    <span>return</span> <span>405</span><span>;</span>\n<span>}</span>\n<span>if</span> <span>(</span><span>$slow</span><span>)</span> <span>{</span>\n    <span>limit_rate</span> <span>10</span>k<span>;</span>\n<span>}</span>\n<span>if</span> <span>(</span><span>$invalid_referer</span><span>)</span> <span>{</span>\n    <span>return</span> <span>403</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h3 id=\"_3-4-rewrite-log指令\"> 3.4 rewrite_log指令</h3>\n<div><pre><code>Syntax: rewrite_log on | off;\nDefault:    rewrite_log off;\nContext:    http, server, location, if\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_4-realip模块\"> 4 realip模块</h2>\n<ul>\n<li>默认不会编译进Nginx，通过<code>--with-http_reaip_module</code>启用功能</li>\n<li>功能：修改客户端地址</li>\n<li>指令：set_real_ip_from、real_ip_header、real_ip_recursive</li>\n<li>变量：reaip_remote_addr、reaip_remote_port</li>\n</ul>\n<h3 id=\"_4-1-directives\"> 4.1 Directives</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317100631841.png\" alt=\"\"></p>\n<h2 id=\"_5-limit-conn模块\"> 5 limit_conn模块</h2>\n<p>生效阶段：NGX_HTTP_PREACCESS_PHASE阶段</p>\n<p>生效范围：全部worker进程（基于共享内存），进入preaccess阶段前不生效，限制的有效性取决于key的设计：依赖postread阶段的realip模块取到真实ip</p>\n<h3 id=\"_5-1-指令\"> 5.1 指令</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200321202747188.png\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200321202819297.png\" alt=\"\"></p>\n<h2 id=\"_6-limit-req模块\"> 6 limit_req模块</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200323104235892.png\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200323104251827.png\" alt=\"\"></p>\n<h3 id=\"_6-1-指令\"> 6.1 指令</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200323104336149.png\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200323104534992.png\" alt=\"\"></p>\n<p>限制发生时向客户端返回的错误码</p>\n<div><pre><code>Syntax:\tlimit_req_status code;\nDefault:\tlimit_req_status 503;\nContext:\thttp, server, location\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>\n<p>limit_req 与 limit_conn 配置同时生效时， limit_req有效</p>\n</blockquote>\n<h3 id=\"_6-2-example\"> 6.2 Example</h3>\n<div><pre><code><span>http</span> <span>{</span>\n    <span>geo</span> <span>$limit</span> <span>{</span>\n        default <span>1</span><span>;</span>\n        <span>10.0</span><span>.0</span><span>.0</span><span>/</span><span>8</span> <span>0</span><span>;</span>\n        <span>192.168</span><span>.0</span><span>.0</span><span>/</span><span>64</span> <span>0</span><span>;</span>\n    <span>}</span>\n    \n    <span>map</span> <span>$limit</span> <span>$limit_key</span> <span>{</span>\n        <span>0</span> <span>\"\"</span><span>;</span>\n        <span>1</span> <span>$binary_remote_addr</span><span>;</span>\n    <span>}</span>\n    \n    <span>limit_req_zone</span> <span>$limit_key</span> zone<span>=</span>req_zone<span>:</span><span>10</span>m rate<span>=</span><span>5</span>r<span>/</span>s<span>;</span>\n    \n    <span>server</span> <span>{</span>\n        <span>location</span> <span>/</span> <span>{</span>\n            <span>limit_req</span> zone<span>=</span>req_zone burst<span>=</span><span>10</span> nodelay<span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>这个例子同时使用了geo和map指令。geo块将给在白名单中的IP地址对应的$limit变量分配一个值0，给其它不在白名单中的分配一个值1。然后我们使用一个映射将这些值转为key，如下：</p>\n<p>如果<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>imi</span><span>t</span><span>变量的值是</span><span>0</span><span>，</span></span></span></span>limit_key变量将被赋值为空字符串</p>\n<p>如果<span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.69444em;vertical-align:0em;\"></span><span style=\"margin-right:0.01968em;\">l</span><span>imi</span><span>t</span><span>变量的值是</span><span>1</span><span>，</span></span></span></span>limit_key变量将被赋值为客户端二进制形式的IP地址</p>\n<p>两个指令配合使用，白名单内IP地址的$limit_key变量被赋值为空字符串，不在白名单内的被赋值为客户端的IP地址。当limit_req_zone后的第一个参数是空字符串时，不会应用“流量限制”，所以白名单内的IP地址(10.0.0.0/8和192.168.0.0/24 网段内)不会被限制。其它所有IP地址都会被限制到每秒5个请求。</p>\n<p>limit_req指令将限制应用到**/**的location块，允许在配置的限制上最多超过10个数据包的突发，并且不会延迟转发。</p>\n<blockquote>\n<p>参考链接：</p>\n<p>https://www.jianshu.com/p/bbb51f727d46</p>\n</blockquote>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200320195040345.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "6. nginx的常见问题",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/qa/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/qa/",
      "content_html": "<h1 id=\"_6-nginx的常见问题\"> 6. nginx的常见问题</h1>\n<h2 id=\"nginx前面有多个反向代理时-proxy的正确设置\"> nginx前面有多个反向代理时，proxy的正确设置</h2>\n<div><pre><code>#proxy_redirect off;\n#proxy_set_header Host $host\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>注释掉这两行，让它使用默认配置</p>\n<h2 id=\"nginx解决跨域问题\"> nginx解决跨域问题</h2>\n<p>在nginx.conf中编辑</p>\n<div><pre><code><span>server</span> <span>{</span>\n        <span>location</span> <span>/</span> <span>{</span>\n            <span>root</span>   html<span>;</span>\n            <span>index</span>  <span>index</span><span>.</span>html <span>index</span><span>.</span>htm<span>;</span>\n            <span>/</span><span>/</span>允许cros跨域访问\n            <span>add_header</span> <span>'Access-Control-Allow-Origin'</span> <span>'*'</span><span>;</span>\n        <span>}</span>\n <span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"从http跳转到https\"> 从http跳转到https</h2>\n<p>项目前期使用http，后期为了安全方面的考虑，启用了https。\n项目架构：前端使用nginx作为多个tomcat实例的反向代理和负载均衡。\n实际上只需要在nginx上启用https即可，使客户端与nginx之后使用https方式通信，而nginx与tomcat之间依然以http方式通信。</p>\n<p>现在需要将之前客户端所有的http请求全部都自动重定向为https，只需要在nginx上添加相应配置即可。</p>\n<h3 id=\"使用rewrite指令\"> 使用rewrite指令</h3>\n<div><pre><code><span>server</span> <span>{</span>\n    <span>listen</span> <span>80</span><span>;</span>\n    <span>server_name</span> domain<span>.</span>com<span>;</span>\n    <span>rewrite</span> <span>^</span><span>(</span><span>.</span><span>*</span><span>)</span> <span>https</span><span>:</span><span>/</span><span>/</span><span>$server_name</span>$<span>1</span> permanent<span>;</span>\n<span>}</span>\n<span>server</span> <span>{</span>\n    <span>listen</span> <span>443</span> <span>ssl</span><span>;</span>\n    <span>server_name</span> domain<span>.</span>com<span>;</span>\n    <span>ssl</span> on<span>;</span>\n    <span>ssl_certificate</span>     <span>/</span>etc<span>/</span>nginx<span>/</span><span>ssl</span><span>/</span>domain<span>.</span>com<span>.</span>crt<span>;</span>\n    <span>ssl_certificate_key</span> <span>/</span>etc<span>/</span>nginx<span>/</span><span>ssl</span><span>/</span>domain<span>.</span>com<span>.</span>crt<span>;</span>\n    <span># other</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>如果此时nginx作为Tomcat的前端反向代理的话，需要将相应配置放在配置ssl的server块中。</p>\n<h3 id=\"使用return指令\"> 使用return指令</h3>\n<div><pre><code><span>server</span> <span>{</span>\n    <span>listen</span> <span>80</span><span>;</span>\n    <span>server_name</span> domain<span>.</span>com<span>;</span>\n    <span>return</span> <span>301</span> <span>https</span><span>:</span><span>/</span><span>/</span><span>$server_name</span><span>$request_uri</span><span>;</span>\n<span>}</span>\n<span>server</span> <span>{</span>\n    <span>listen</span> <span>443</span> <span>ssl</span><span>;</span>\n    <span>server_name</span> domain<span>.</span>com<span>;</span>\n    <span>ssl</span> on<span>;</span>\n    <span>ssl_certificate</span>     <span>/</span>etc<span>/</span>nginx<span>/</span><span>ssl</span><span>/</span>domain<span>.</span>com<span>.</span>crt<span>;</span>\n    <span>ssl_certificate_key</span> <span>/</span>etc<span>/</span>nginx<span>/</span><span>ssl</span><span>/</span>domain<span>.</span>com<span>.</span>crt<span>;</span>\n    <span># other</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>如果此时nginx作为Tomcat的前端反向代理的话，需要将相应配置放在配置ssl的server块中。</p>\n<h3 id=\"使用error-page指令\"> 使用error_page指令</h3>\n<p>只允许HTTP来访问时，用HTTP访问会让Nginx报497错误，然后利用error_page将链接重定向至HTTPS上。</p>\n<div><pre><code><span>server</span> <span>{</span>\n    <span>listen</span> <span>80</span><span>;</span>\n    <span>listen</span> <span>443</span> <span>ssl</span><span>;</span>\n    <span>server_name</span> domain<span>.</span>com<span>;</span>\n    <span>ssl</span> on<span>;</span>\n    <span>ssl_certificate</span>     <span>/</span>etc<span>/</span>nginx<span>/</span><span>ssl</span><span>/</span>domain<span>.</span>com<span>.</span>crt<span>;</span> \n    <span>ssl_certificate_key</span> <span>/</span>etc<span>/</span>nginx<span>/</span><span>ssl</span><span>/</span>domain<span>.</span>com<span>.</span>crt<span>;</span>\n    <span># other</span>\n    <span>error_page</span> <span>497</span> <span>https</span><span>:</span><span>/</span><span>/</span><span>$server_name</span><span>$request_uri</span><span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>使用error_page指令时，将http和https的监听配置写在同一个server块中，对应的其他配置也需要在该server配置块中完成。</p>\n<p>需要注意的是，此时需要将<code>error_page</code>指令语句写在最后，否则不能生效。</p>\n<h2 id=\"nginx出现403的原因\"> nginx出现403的原因</h2>\n<h3 id=\"缺少index-html\"> 缺少index.html</h3>\n<p>缺少index.html或者index.php文件，就是配置文件中index index.html index.htm这行中的指定的文件</p>\n<div><pre><code>server {  \n      listen       80;  \n      server_name  localhost;  \n      index  index.php index.html;  \n      root  /data/www/;\n}\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>如果在/data/www/下面没有index.php,index.html的时候，直接文件，会报403 forbidden。</p>\n<h3 id=\"权限问题\"> 权限问题</h3>\n<p>1）查看nginx的启动用户</p>\n<div><pre><code>ps aux | grep &quot;nginx: worker process&quot; | grep -v &quot;grep&quot; | awk &#39;{ print $1 }&#39;\n</code></pre>\n<div><span>1</span><br></div></div><p><code>index</code>文件的权限，<code>nginx</code>启动用户要有读的权限，<code>index</code>所在的目录要有可以访问目录内容的权限（递归都要有，每一级）</p>\n<p>如果nginx没有web目录的操作权限，也会出现403错误。上一级目录权限，有读的权限就行，不必要改为777</p>\n<p>解决办法：修改web目录的读写权限，或者是把nginx的启动用户改成目录的所属用户，重启Nginx即可解决</p>\n<div><pre><code>chmod -R 777 /data\nchmod -R 777 /data/www/\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"selinux设置问题\"> SELinux设置问题</h3>\n<p>设置为：<code>SELINUX=disabled</code></p>\n<h2 id=\"通过nginx实现蓝绿发布\"> 通过nginx实现蓝绿发布</h2>\n<p>样例</p>\n<p><code>nginx.conf</code>通过两个子配置文件来实现</p>\n<div><pre><code><span>include</span> conf<span>.</span>d<span>/</span>v1<span>.</span>conf\n<span>#include conf.d/v2.conf</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>v1.conf</code></p>\n<div><pre><code><span>upstream</span> app_v1 <span>{</span>\n\t<span>server</span> <span>192.168</span><span>.1</span><span>.2</span><span>:</span><span>8080</span><span>;</span>\n    <span>server</span> <span>192.168</span><span>.1</span><span>.3</span><span>:</span><span>8080</span><span>;</span>\n<span>}</span>\n<span>upstream</span> app_v2 <span>{</span>\n    <span>server</span> <span>192.168</span><span>.1</span><span>.3</span><span>:</span><span>8080</span><span>;</span>\n    <span>server</span> <span>192.168</span><span>.1</span><span>.4</span><span>:</span><span>8080</span><span>;</span>\n<span>}</span>\n\n<span>server</span> <span>{</span>\n    <span>listen</span> <span>80</span><span>;</span>\n    <span>server_name</span> localhost<span>;</span>\n    <span>set</span> <span>$group</span> <span>\"app_v1\"</span><span>;</span>\n    <span>location</span> <span>/</span> <span>{</span>\n        <span>proxy_pass</span> <span>http</span><span>:</span><span>/</span><span>/</span><span>$group</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p><code>v2.conf</code></p>\n<div><pre><code><span>upstream</span> app_v1 <span>{</span>\n\t<span>server</span> <span>192.168</span><span>.1</span><span>.2</span><span>:</span><span>8080</span><span>;</span>\n    <span>server</span> <span>192.168</span><span>.1</span><span>.3</span><span>:</span><span>8080</span><span>;</span>\n<span>}</span>\n<span>upstream</span> app_v2 <span>{</span>\n    <span>server</span> <span>192.168</span><span>.1</span><span>.3</span><span>:</span><span>8080</span><span>;</span>\n    <span>server</span> <span>192.168</span><span>.1</span><span>.4</span><span>:</span><span>8080</span><span>;</span>\n<span>}</span>\n\n<span>server</span> <span>{</span>\n    <span>listen</span> <span>80</span><span>;</span>\n    <span>server_name</span> localhost<span>;</span>\n    <span>set</span> <span>$group</span> <span>\"app_v2\"</span><span>;</span>\n    <span>location</span> <span>/</span> <span>{</span>\n        <span>proxy_pass</span> <span>http</span><span>:</span><span>/</span><span>/</span><span>$group</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>有的时候还是结合cookie进行使用</p>\n<div><pre><code><span>if</span> <span>(</span><span>$http_cookie</span> <span>~</span><span>*</span> <span>\"version=V1\"</span><span>)</span> <span>{</span>\n\t<span>set</span> <span>$group</span> app_v1<span>;</span>\n<span>}</span>\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"nginx-allow-多个ip-ipv4的网段表示方法解析\"> nginx allow 多个ip &amp; ipv4的网段表示方法解析</h2>\n<p>单看<a href=\"http://www.ttlsa.com/nginx/\" target=\"_blank\" rel=\"noopener noreferrer\">nginx</a>模块名<code>ngx_http_access_module</code>,很多人一定很陌生，但是deny和allow相比没一个人不知道的，实际上deny和allow指令属于ngx_http_access_module.我们想控制某个uri或者一个路径不让人访问，在nginx就得靠它了。</p>\n<p>nginx的访问控制模块语法很简单，至少比apache好理解，apache的allow和deny的顺序让很多初学者抓头.好了具体看下这个插件的使用方法吧。</p>\n<h3 id=\"_1、安装模块\"> 1、安装模块</h3>\n<p>这个模块内置在了nginx中，除非你安装中使用了--without-http_access_module。如果你还没安装过nginx，那么请参考下ttlsa之前写的<a href=\"http://www.ttlsa.com/html/1548.html\" target=\"_blank\" rel=\"noopener noreferrer\">nginx安装</a>.</p>\n<h3 id=\"_2、指令\"> 2、指令</h3>\n<p>allow\n语法:    allow address | CIDR | unix: | all;\n默认值:    —\n配置段:    http, server, location, limit_except</p>\n<p>允许某个ip或者一个ip段访问.如果指定unix:,那将允许socket的访问.注意：unix在1.5.1中新加入的功能，如果你的版本比这个低，请不要使用这个方法。</p>\n<p>deny\n语法:    deny address | CIDR | unix: | all;\n默认值:    —\n配置段:    http, server, location, limit_except</p>\n<p>禁止某个ip或者一个ip段访问.如果指定unix:,那将禁止socket的访问.注意：unix在1.5.1中新加入的功能，如果你的版本比这个低，请不要使用这个方法。</p>\n<h3 id=\"_3-allow、deny实例\"> 3. allow、deny实例</h3>\n<p>location / {\ndeny 192.168.1.1;\nallow 192.168.1.0/24;\nallow 10.1.1.0/16;\nallow 2001:0db8::/32;\ndeny all;\n}</p>\n<p>从上到下的顺序，类似iptables。匹配到了便跳出。如上的例子先禁止了192.16.1.1，接下来允许了3个网段，其中包含了一个ipv6，最后未匹配的IP全部禁止访问. 在实际生产环境中，我们也会使用nginx 的geo模块配合使用，有兴趣的请参考ttlsa相关文章<a href=\"http://www.ttlsa.com/html/3203.html\" target=\"_blank\" rel=\"noopener noreferrer\">nginx geo使用方法</a>.</p>\n<h3 id=\"\"> </h3>\n<p>nginx访问控制模块要数nginx里面最简单的指令，只要记住你想禁止谁访问就deny加上IP，想允许则加上allow ip，想禁止或者允许所有，那么allow all或者deny all即可.</p>\n<p>但是具体的配置出现很多问题</p>\n<p>简单一点举例说明：\nip段：10.0.0.1-10.0.0.255        的表示方法：10.0.0.0/24\nip段：10.0.0.1-10.0.255.255     的表示方法：10.0.0.0/16\nip段：10.0.0.1-10.255.255.255    的表示方法：10.0.0.0/8</p>\n<p>利用主机数来计算</p>\n<p>1)将主机数目转化为二进制来表示</p>\n<p>2)如果主机数小于或等于254（注意去掉保留的两个IP地址），则取得该主机的二进制位数，为 N，这里肯定 N&lt;8。如果大于254，则 N&gt;8，这就是说主机地址将占据不止8位。</p>\n<p>3)使用255.255.255.255来将该类IP地址的主机地址位数全部置1，然后从后向前的将N位全部置为 0，即为子网掩码值。</p>\n<p>如欲将B类IP地址168.195.0.0划分成若干子网，每个子网内有主机700台：</p>\n<ol>\n<li>700=1010111100</li>\n<li>该二进制为十位数，N = 10</li>\n<li>将该B类地址的子网掩码255.255.0.0的主机地址全部置 1，得到255.255.255.255 然后再从后向前将后 10位置0,即为： 11111111.11111111.11111100.00000000 即255.255.252.0。这就是该欲划分成主机为700台的B类IP地址 168.195.0.0的子网掩码。</li>\n</ol>\n<p>二进制表（表1）</p>\n<p>0  0  0  0   0  0  0 0</p>\n<p>128 64 32 16  8  4   2 1</p>\n<p>CIDR值（表2）</p>\n<p>子网掩码           CIDR值</p>\n<p>255.0.0.0           /8</p>\n<p>255.128.0.0          /9</p>\n<p>255.192.0.0          /10</p>\n<p>255.224.0.0          /11</p>\n<p>255.240.0.0          /12</p>\n<p>255.248.0.0          /13</p>\n<p>255.252.0.0          /14</p>\n<p>255.254.0.0          /15</p>\n<p>255.255.0.0          /16</p>\n<p>255.255.128.0        /17</p>\n<p>255.255.192.0        /18</p>\n<p>255.255.224.0        /19</p>\n<p>255.255.240.0        /20</p>\n<p>255.255.248.0        /21</p>\n<p>255.255.252.0        /22</p>\n<p>255.255.254.0        /23</p>\n<p>255.255.255.0        /24</p>\n<p>255.255.255.128       /25</p>\n<p>255.255.255.192       /26</p>\n<p>255.255.255.224       /27</p>\n<p>255.255.255.240       /28</p>\n<p>255.255.255.248       /29</p>\n<p>255.255.255.252       /30</p>\n",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "1. 初识Nginx",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/",
      "content_html": "<h1 id=\"_1-初识nginx\"> 1. 初识Nginx</h1>\n<h2 id=\"_1-nginx的三个主要应用场景\"> 1 Nginx的三个主要应用场景</h2>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200102212417067.png\" alt=\"\"></p>\n<p>三个主要应用场景为：</p>\n<ul>\n<li>静态资源服务（通过本地文件系统提供服务）</li>\n<li>反向代理服务</li>\n<li>API服务（OpenRestydeng ）</li>\n</ul>\n<h3 id=\"_1-1-反向代理服务\"> 1.1 反向代理服务</h3>\n<h4 id=\"_1-1-1-负载均衡\"> 1.1.1 负载均衡</h4>\n<p>负载均衡，一般包含两方面的含义。</p>\n<ul>\n<li>\n<p>一方面是，将单一的重负载分担到多个网络节点上做并行处理，每个节点处理结束后将结构汇总返回给用户，这样可以大幅提高网络系统的处理能力；</p>\n</li>\n<li>\n<p>第二个方面的含义是，将大量的前段并发访问或数据流量分担到多个后端网络节点上分别处理，这样可以有效减少前端用户等待响应的时间。</p>\n</li>\n</ul>\n<p>Web服务器、FTP服务器、企业关键应用服务器等关键应用服务器等网络应用方面谈到的负载均衡问题，基本隶属于后一方面的含义。</p>\n<p>因此，Nginx服务器的负载均衡主要是对大量前端访问和流量进行分流，以保证前端用户访问效率。可以说，在绝大多数的Nginx应用中，都会或多或少涉及它的负载均衡服务。</p>\n<h5 id=\"复制均衡策略\"> 复制均衡策略</h5>\n<p>即内置策略和扩展策略。</p>\n<ol>\n<li>\n<p>内置策略主要包括轮询、加权轮询和IP hash三种；</p>\n</li>\n<li>\n<p>扩展策略主要通过第三方模块实现，种类比较丰富，常见的有url hash、fair等。</p>\n</li>\n</ol>\n<blockquote>\n<p>在默认情况下，内置策略会被编译进Nginx内核，使用时只需要在Nginx服务器配置中设置相关参数即可；</p>\n<p>扩展策略不会编译进Nginx内核，需要手动将第三方模块编译到Nginx内核。</p>\n</blockquote>\n<p><strong>轮询</strong></p>\n<p>轮询策略比较简单，就是将前端请求按顺序（时间顺序或者排列次序）逐一分配到不同的后端节点上，对于出现问题的后端节点自动排除。</p>\n<p><strong>加权轮询</strong></p>\n<p>加权轮询策略，顾名思义，就是在基本的轮询策略上考虑各后端节点接受请求的权重，指定各后端节点被轮询到的几率。</p>\n<p>加权轮询策略主要用于后端节点不均的情况。根据后端节点性能的实际情况，我们可以在Nginx服务器的配置文件中调整权值，使得整个网络对前端请求达到最佳的响应能力。</p>\n<p><strong>IP hash</strong></p>\n<p><code>IP hash</code>策略，是将前端的访问<code>IP</code>进行<code>hash</code>操作，然后根据<code>hash</code>结果将请求分配给不同的后端节点。</p>\n<p>事实上，这种策略可以看作是一种特殊的轮询策略。</p>\n<p>通过Nginx的实现，每个前端访问IP会固定访问一个后端节点。这样做的好处是避免考虑前端用户的session在后端多个节点上共享的问题。</p>\n<p><strong>url hash</strong></p>\n<p>扩展策略中的<code>url hash</code>在形式上和<code>IP hash</code>相近，不同之处在于，<code>IP hash</code>策略是对前端访问IP进行了hash操作，而<code>url hash</code>策略是对前端请求的<code>url</code>进行了<code>hash</code>操作。<code>url hash</code>策略的优点在于，如果后端有缓存服务器，它能够高缓存效率，同时也解决了<code>session</code>的问题；但其缺点是，如果后端节点出现异常，它不能自动排除该节点。后端节点出现异常会导致Nginx服务器返回503错误。</p>\n<p><strong>fair</strong></p>\n<p>扩展的第三方模块<code>fair</code>则是从另一个角度来实现Nginx服务器负载均衡策略的。该模块将前端请求转发到一个最近负载最小的后台节点。Nginx通过后端节点对请求的响应时间来判断负载情况。响应时间短的节点负载相对就轻。得出判断结果后，Nginx就将前端请求转发到选中的负载最轻的节点。</p>\n<h4 id=\"_1-1-2-web缓存\"> 1.1.2 Web缓存</h4>\n<p>Squid在Web服务器领域中是一款相当流行的开源代理服务器和Web缓存服务器。作为网页服务器的前置缓存服务器，在很多优秀的站点中，它被用以缓存前端请求，从而提高Web服务器的性能；而且，它还可以缓存万维网、域名系统或者其他网络搜索等，为一个集体提供网路资源共享服务。</p>\n<p>Nginx服务器从0.7.48版本开始，也支持了和Squid类似的缓存功能。</p>\n<p>Nginx服务器的Web缓存服务主要由Proxy_Cache相关指令集和FastCGI_Cache相关指令集构成。</p>\n<p>其中，Proxy_Cache主要用于在Nginx服务器提供反向代理服务时，对后端源服务器的返回内容进行URL缓存；</p>\n<p>FastCGI_Cache主要用于对FastCGI的动态程序进行缓存。</p>\n<p>另外还有一款常用的第三方模块ngx_cache_purge也是Nginx服务器Web缓存功能中经常用到的。它主要用于清除Nginx服务器上指定的URL缓存。</p>\n<p>到Nginx 0.8.32版本，Proxy_Cache和FastCGI_Cache两部分的功能已经比较完善，再配合第三方的ngx_cache_purge模块，Nginx服务器已经具备了Squid所拥有的Web缓存加速功能和清除指定URL缓存的功能；</p>\n<p>同时，Nginx服务器对多核CPU的调度比Squid更胜一筹，性能高于Squid，而在反向代理、负载均衡等其他方面，Nginx也不逊于Squid。这使得Nginx服务器可以同时作为负载均衡服务器和Web缓存服务器来使用，基本可以取代Squid。</p>\n<h2 id=\"_2-nginx的优点\"> 2 Nginx的优点</h2>\n<p><strong>nginx的优点</strong></p>\n<ul>\n<li>\n<p>轻量级，同样起web服务比apache占用更少内存及资源；</p>\n</li>\n<li>\n<p>Nginx 异步非阻塞的方式处理高并发请求，能保持低资源、低消耗、高性能；</p>\n</li>\n<li>\n<p>高度模块化设计，编写模块相对简单，生态圈强大。</p>\n</li>\n<li>\n<p>核心优点：高并发、高性能、高可扩展、高可靠性、热部署、BSD许可证。</p>\n</li>\n</ul>\n<p><strong>Nginx为什么性能高、占用内存少？</strong></p>\n<ul>\n<li>Nginx采用多进程模式，对每个worker进程来说，独立的进程不需要加锁，互不影响；</li>\n<li>一个进程退出后，其他进程继续工作，服务不会中断，master进程则很快启动新的worker进程；</li>\n<li>worker进程异常退出肯定是程序有bug导致，但也只会影响当前worker上的请求，不会影响到其他进程的请求，降低风险；</li>\n<li>Nginx采用异步非阻塞的方式去处理请求，更加高效。</li>\n</ul>\n<h2 id=\"_3-nginx的组成\"> 3 Nginx的组成</h2>\n<ol>\n<li>Nginx二进制可执行文件\n<ul>\n<li>由各模块源码编译出的一个文件</li>\n</ul>\n</li>\n<li><code>nginx.conf</code>配置文件\n<ul>\n<li>控制<code>nginx</code>的行为</li>\n</ul>\n</li>\n<li><code>access.log</code>访问日志\n<ul>\n<li>记录每一条http请求信息</li>\n</ul>\n</li>\n<li><code>error.log</code>错误日志\n<ul>\n<li>定位问题</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"_4-编译安装nginx\"> 4 编译安装Nginx</h2>\n<h3 id=\"_4-1-下载nginx\"> 4.1 下载Nginx</h3>\n<blockquote>\n<p>nginx下载地址：http://nginx.org/download/</p>\n<p>在官网找最新稳定版使用：http://nginx.org/en/download.html</p>\n</blockquote>\n<div><pre><code>cd /opt\nwget http://nginx.org/download/nginx-1.16.1.tar.gz\ntar -xvf nginx-1.16.1.tar.gz\ncd nginx-1.16.1/\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_4-2-介绍各目录\"> 4.2 介绍各目录</h3>\n<div><pre><code><span># ls</span>\nauto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  <span>man</span>  README  src\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><ul>\n<li>\n<p>auto：包含了很多会在执行configure进行编译配置时调用的检测代码。</p>\n</li>\n<li>\n<p>CHANGES：Nginx的版本更新细节记录。英文版。</p>\n</li>\n<li>\n<p>CHANGES.ru：Nginx的版本更新细节记录。俄文版。</p>\n</li>\n<li>\n<p>conf：Nginx提供的一些默认配置文件。</p>\n</li>\n<li>\n<p>configure：根据系统环境设定Nginx编译选项的执行脚本。</p>\n</li>\n<li>\n<p>contrib：网友贡献的一些有用脚本（对我来说，里面的vim设置很有用，README中有使用方法）。</p>\n<ul>\n<li>\n<div><pre><code>把contrib/vim下的文件移入~/.vim目录下，让vim识别nginx的配置文件节点；\ncp -r contrib/vim/* ~/.vim\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></li>\n</ul>\n</li>\n<li>\n<p>html：提供了两个默认html页面，比如index.html的Welcome to nginx!。</p>\n</li>\n<li>\n<p>LICENSE：声明的Nginx源码许可协议。</p>\n</li>\n<li>\n<p>man：Nginx的Man手册，本文文件，可直接用vi或记事本打开。</p>\n</li>\n<li>\n<p>README：读我文件，内容很简单，通告一下官网地址。</p>\n</li>\n<li>\n<p>src：Nginx源码，分门别类，比如实现事件的event等，很清晰。</p>\n</li>\n</ul>\n<h3 id=\"_4-3-configure\"> 4.3 Configure</h3>\n<p>先安装相关依赖</p>\n<blockquote>\n<p>gzip模块需要zlib库</p>\n<p>rewrite模块需要pcre库</p>\n<p>ssl功能需要openssl库</p>\n</blockquote>\n<div><pre><code>yum -y install gcc gcc-c++ make zlib-devel pcre-devel openssl-devel\n</code></pre>\n<div><span>1</span><br></div></div><p>然后运行<code>configure</code>文件</p>\n<div><pre><code># ./configure --help\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>--prefix ：指定安装目录</li>\n<li>--with：新增模块</li>\n<li>--without：删除默认模块</li>\n</ul>\n<p>运行期中与路径相关的各种参数</p>\n<div><pre><code>--prefix=PATH                        #指向安装目录\n--sbin-path=PATH                     #指向（执行）程序文件（nginx）\n--conf-path=PATH                     #指向配置文件（nginx.conf）\n--error-log-path=PATH                #指向错误日志目录\n--http-log-path=PATH                 #指定访问日志目录\n--pid-path=PATH                      #指向pid文件（nginx.pid）\n--lock-path=PATH                     #指向lock文件（nginx.lock）（安装文件锁定，防止安装文件被别人利用，或自己误操作。）\n--builddir=PATH                      #指向编译目录\n--http-client-body-temp-path=PATH    #设定http客户端请求临时文件路径\n--http-proxy-temp-path=PATH          #设定http代理临时文件路径\n--http-fastcgi-temp-path=PATH        #设定http fastcgi临时文件路径\n--http-uwsgi-temp-path=PATH          #设定http uwsgi临时文件路径\n--http-scgi-temp-path=PATH           #设定http scgi临时文件路径\n\n--user=USER                          #指定程序运行时的非特权用户\n--group=USER                         #指定程序运行时的非特权用户组\n\n--with-rtsig_module                  #启用rtsig模块支持（实时信号）\n--with-file-aio                      #启用file aio支持（一种APL文件传输格式）\n--with-ipv6                          #启用ipv6支持\n--with-select_module                 #启用select模块支持（一种轮询模式,不推荐在高载环境下使用）禁用：--without-select_module\n--with-poll_module                   #启用poll模块支持（功能与select相同，与select特性相同，为一种轮询模式,不推荐在高载环境下使用）\n--with-http_ssl_module               #启用支持https请求，需已安装openssl\n--with-http_realip_module            #启用ngx_http_realip_module支持（这个模块允许从请求标头更改客户端的IP地址值，默认为关）\n--with-http_addition_module          #启用ngx_http_addition_module支持（作为一个输出过滤器，支持不完全缓冲，分部分响应请求）\n--with-http_xslt_module              #启用ngx_http_xslt_module支持（过滤转换XML请求）\n--with-http_image_filter_module      #启用支持传输JPEG/GIF/PNG 图片过滤，默认为不启用，gd库要用到\n--with-http_sub_module               #启用ngx_http_sub_module支持（允许用一些其他文本替换nginx响应中的一些文本）\n--with-http_dav_module               #启用ngx_http_dav_module支持（增加PUT,DELETE,MKCOL：创建集合,COPY和MOVE方法）\n--with-http_flv_module               #启用ngx_http_flv_module支持（提供寻求内存使用基于时间的偏移量文件）\n--with-http_gzip_static_module       #启用ngx_http_gzip_static_module支持（在线实时压缩输出数据流）\n--with-http_random_index_module      #启用ngx_http_random_index_module支持（从目录中随机挑选一个目录索引）\n--with-http_secure_link_module       #启用ngx_http_secure_link_module支持（计算和检查要求所需的安全链接网址）\n--with-http_degradation_module       #启用ngx_http_degradation_module支持（允许在内存不足的情况下返回204或444码）\n--with-http_stub_status_module       #启用ngx_http_stub_status_module支持（获取nginx自上次启动以来的工作状态）\n--with-http_perl_module              #启用ngx_http_perl_module支持（该模块使nginx可以直接使用perl或通过ssi调用perl）\n\n--with-mail                          #启用POP3/IMAP4/SMTP代理模块支持\n--with-mail_ssl_module               #启用ngx_mail_ssl_module支持\n--add-module=                        #启用外部模块支持\n--with-cpu-opt=                      #指定编译的CPU，可用的值为: pentium,opteron, amd64, sparc32, sparc64, ppc64等\n--with-pcre                          #启用pcre库（默认会自动去找rpm包安装的pcre库文件以及模块）\n--with-pcre=                         #指向pcre库文件目录（如果是源码安装就需要指定，rpm包安装就不需要指定了）\n--with-pcre-opt=                     #在编译时为pcre库设置附加参数\n--with-perl_modules_path=            #设定perl模块路径\n--with-perl=                         #设定perl库文件路径\n--with-debug                         #启用debug日志\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><p>安装额外的echo模块</p>\n<div><pre><code>cd /opt\ngit clone https://github.com/openresty/echo-nginx-module\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>./configure \\\n--prefix=/etc/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--pid-path=/var/run/nginx.pid \\\n--lock-path=/var/run/nginx.lock \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n--user=nginx \\\n--group=nginx \\\n--with-compat \\\n--with-file-aio \\\n--with-threads \\\n--with-http_addition_module \\\n--with-http_auth_request_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_gunzip_module \\\n--with-http_gzip_static_module \\\n--with-http_mp4_module \\\n--with-http_random_index_module \\\n--with-http_realip_module \\\n--with-http_secure_link_module \\\n--with-http_slice_module \\\n--with-http_ssl_module \\\n--with-http_stub_status_module \\\n--with-http_sub_module \\\n--with-http_v2_module \\\n--with-pcre \\\n--with-mail \\\n--with-mail_ssl_module \\\n--with-stream \\\n--with-stream_realip_module \\\n--with-stream_ssl_module \\\n--with-stream_ssl_preread_module \\\n--with-cc-opt=&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#39; \\\n--with-ld-opt=&#39;-Wl,-z,relro -Wl,-z,now -pie&#39; \\\n--add-module=/opt/echo-nginx-module\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><p>执行完后，会生成<code>objs</code>目录</p>\n<p>目录下的关键文件<code>ngx_modules.c</code>，它决定了我们编译nginx时，哪些模块会被编译进nginx</p>\n<h3 id=\"_4-4-中间件介绍\"> 4.4 中间件介绍</h3>\n<p>中间件放在<code>objs/src</code>目下</p>\n<h3 id=\"_4-5-编译\"> 4.5 编译</h3>\n<div><pre><code>make -j 4\n</code></pre>\n<div><span>1</span><br></div></div><ul>\n<li>-j 参数，指定编译时的CPU数量，可加快编译速度</li>\n</ul>\n<p>执行完后，在<code>objs</code>目录下生成二进制可执行文件</p>\n<blockquote>\n<p>注意：如何这时，我们是升级nginx，现在就不需要<code>make install</code>了</p>\n</blockquote>\n<h3 id=\"_4-6-安装\"> 4.6 安装</h3>\n<div><pre><code>make install\n</code></pre>\n<div><span>1</span><br></div></div><p>执行完成后，会在<code>--prefix</code>目录下生成四个目录，我这里是<code>/home/clay</code>目录下</p>\n<ul>\n<li>conf： 配置文件目录</li>\n<li>html：默认的静态页面存放目录</li>\n<li>logs：默认access和error  log存放目录</li>\n<li>sbin：二进制可执行文件<code>nginx</code>存放目录</li>\n</ul>\n<blockquote>\n<p>安装nginx，个人还是推荐yum源安装（里面自动包含了日志切割等）</p>\n<p>可以yum源安装完成之后，再定制化模块，二次编译</p>\n</blockquote>\n<h2 id=\"_5-nginx配置语法\"> 5 Nginx配置语法</h2>\n<ol>\n<li>配置文件由指令与指令块构成</li>\n<li>每条指令以<code>;</code>分号结尾，指令与参数见以空格符号分隔</li>\n<li>指令块以<code>{ }</code>大括号将多条指令组织在一起</li>\n<li><code>include</code>语句允许组合多个配置文件以提升可维护性</li>\n<li>使用<code>#</code>符号添加注释，提高可读性</li>\n<li>使用<code>$</code>符号，使用变量</li>\n<li>部分指令的参数支持正则表达式</li>\n</ol>\n<p><strong>Example</strong></p>\n<div><pre><code><span>http</span> <span>{</span>\n    <span>include</span> mime<span>.</span><span>types</span><span>;</span>\n    <span>upstream</span> thwp <span>{</span>\n        <span>server</span> <span>127.0</span><span>.0</span><span>.1</span><span>:</span><span>8080</span><span>;</span>\n    <span>}</span>\n    \n    <span>server</span> <span>{</span>\n        <span>listen</span> <span>443</span> http2<span>;</span>\n        <span># Nginx配置语法</span>\n        <span>limit_req_zone</span> <span>$binary_remote_addr</span> zone<span>=</span>one<span>:</span><span>10</span>m rate<span>=</span><span>1</span>r<span>/</span>s<span>;</span>\n        <span>location</span> <span>~</span><span>*</span> \\<span>.</span><span>(</span>gif<span>|</span>jpg<span>|</span>jpeg<span>)</span>$ <span>{</span>\n            <span>proxy_cache</span> my_cache<span>;</span>\n            <span>expires</span> <span>3</span>m<span>;</span><span>proxy_cache_key</span> <span>$host</span><span>$uri</span><span>$is_args</span><span>$args</span><span>;</span>\n            <span>proxy_cache_valid</span> <span>200</span> <span>304</span> <span>302</span> <span>1</span>d<span>;</span>\n            <span>proxy_pass</span> <span>http</span><span>:</span><span>/</span><span>/</span>thwp<span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id=\"_5-1-配置参数\"> 5.1 配置参数</h3>\n<h4 id=\"_5-1-1-时间单位\"> 5.1.1 时间单位</h4>\n<ul>\n<li>ms：milliseconds</li>\n<li>s：seconds</li>\n<li>m：minutes</li>\n<li>h：hours</li>\n<li>d：days</li>\n<li>w：weeks</li>\n<li>M：months，30 days</li>\n<li>y：years，365 days</li>\n</ul>\n<h4 id=\"_5-1-2-空间单位\"> 5.1.2 空间单位</h4>\n<ul>\n<li>b/B：bytes</li>\n<li>k/K：kilobytes</li>\n<li>m/M：megabytes</li>\n<li>g/G：gifabytes</li>\n</ul>\n<h2 id=\"_6-nginx配置文件结构\"> 6 Nginx配置文件结构</h2>\n<p>nginx配置文件如下：</p>\n<div><pre><code><span>user</span> nginx<span>;</span>\n<span>worker_processes</span> auto<span>;</span>\n<span>error_log</span> <span>/</span>var<span>/</span>log<span>/</span>nginx<span>/</span>error<span>.</span>log<span>;</span>\n<span>pid</span> <span>/</span>run<span>/</span>nginx<span>.</span><span>pid</span><span>;</span>\n<span>include</span> <span>/</span>usr<span>/</span>share<span>/</span>nginx<span>/</span>modules<span>/</span>\\<span>*</span><span>.</span>conf<span>;</span>\n<span>events</span> <span>{</span>\n    <span>worker_connections</span> <span>1024</span><span>;</span>\n<span>}</span>\n<span>http</span> <span>{</span>\n    <span>log_format</span>  main  <span>'$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n                      <span>'$status $body_bytes_sent \"$http_referer\" '</span>\n                      <span>'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span>;</span>\n    <span>access_log</span>  <span>/</span>var<span>/</span>log<span>/</span>nginx<span>/</span>access<span>.</span>log  main<span>;</span>\n    <span>sendfile</span>            on<span>;</span>\n    <span>tcp_nopush</span>          on<span>;</span>\n    <span>tcp_nodelay</span>         on<span>;</span>\n    <span>keepalive_timeout</span>   <span>65</span><span>;</span>\n    <span>types_hash_max_size</span> <span>2048</span><span>;</span>\n    <span>include</span>             <span>/</span>etc<span>/</span>nginx<span>/</span>mime<span>.</span><span>types</span><span>;</span>\n    <span>default_type</span>        application<span>/</span>octet<span>-</span>stream<span>;</span>\n    <span>include</span> <span>/</span>etc<span>/</span>nginx<span>/</span>conf<span>.</span>d<span>/</span>\\<span>*</span><span>.</span>conf<span>;</span>\n    <span>server</span> <span>{</span>\n        <span>listen</span>       <span>80</span> default_server<span>;</span>\n        <span>listen</span>       <span>[</span><span>:</span><span>:</span><span>]</span><span>:</span><span>80</span> default_server<span>;</span>\n        <span>server_name</span>  _<span>;</span>\n        <span>root</span>         <span>/</span>usr<span>/</span>share<span>/</span>nginx<span>/</span>html<span>;</span>\n        <span>include</span> <span>/</span>etc<span>/</span>nginx<span>/</span>default<span>.</span>d<span>/</span>\\<span>*</span><span>.</span>conf<span>;</span>\n        <span>location</span> <span>/</span> <span>{</span>\n        <span>}</span>\n        <span>error_page</span> <span>404</span> <span>/</span><span>404.</span>html<span>;</span>\n            <span>location</span> <span>=</span> <span>/</span><span>40</span>x<span>.</span>html <span>{</span>\n        <span>}</span>\n        <span>error_page</span> <span>500</span> <span>502</span> <span>503</span> <span>504</span> <span>/</span><span>50</span>x<span>.</span>html<span>;</span>\n            <span>location</span> <span>=</span> <span>/</span><span>50</span>x<span>.</span>html <span>{</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h3 id=\"_6-1-基本结构\"> 6.1 基本结构</h3>\n<ol>\n<li>全局快</li>\n<li><code>events</code>块</li>\n<li><code>http</code>块</li>\n</ol>\n<p>在http块中，又包含http全局块、多个server块。</p>\n<p>每个server块中，可以包含server全局块和多个location块。</p>\n<p>在同一配置块中嵌套的配置块，各个之间不存在次序关系。</p>\n<p>配置文件支持大量可配置的指令，绝大多数指令不是特定属于某一个块的。同一个指令放在不同层级的块中，其作用域也不同，一般情况下，高一级块中的指令可以作用域自身所在的块和此块包含的所有低层级块。如果某个指令在两个不同层级的块中同时出现，则采用“就近原则”，即以较低层级块中的配置为准。</p>\n<h3 id=\"_6-2-全局块\"> 6.2 全局块</h3>\n<p>通常包括配置运行Nginx服务器的用户（组）、允许生成的worker process数、Nginx进程PID存放路径、日志的存放路径和类型以及配置文件引入等。</p>\n<h3 id=\"_6-3-events块\"> 6.3 events块</h3>\n<p>events块涉及的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是否开启对多worker process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型处理连接请求，每个worker process可以同时支持的最大连接数等。</p>\n<p>这一部分的指令对Nginx服务器的性能影响较大，在实际配置中应该根据实际情况灵活调整。</p>\n<h3 id=\"_6-4-http块\"> 6.4 http块</h3>\n<p>http块是Nginx服务器配置中重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块可以放在这个模块中。</p>\n<ul>\n<li>http</li>\n<li>upstream</li>\n<li>server</li>\n<li>location</li>\n</ul>\n<h3 id=\"_6-5-server块\"> 6.5 server块</h3>\n<p>server块和“虚拟主机”的概念密切联系。为了加深相关配置的理解，在介绍server块之前，简单了解一下虚拟主机的相关内容。</p>\n<p>虚拟主机，又称虚拟服务器、主机空间或网页空间，它是一种技术。该技术是为了节省互联网服务器硬件成本而出现的。这里的“主机”或“空间”是由实体的服务器延伸而来，硬件系统可以基于服务器群，或者单个服务器等。对外表现为多个服务器，从而充分利用服务器硬件资源。从用户角度看，一台虚拟主机和一台独立的硬件主机是完全一样的。</p>\n<p>在使用Nginx服务器提供Web服务是，利用虚拟主机的技术就可以避免为每一个要运行的网站提供单独的Nginx服务器，也无需为每个网站对应运行一组Nginx进程。虚拟主机技术使得Nginx服务器可以在同一台服务器上只运行一组Nginx进程，就可以运行多个网站。</p>\n<p>和http块相同，server块也可以包含自己的全局块，同时可以包含多个location块。在server全局块中，最常见的两个配置项是本虚拟主机的监听配置和本虚拟主机的名称或IP配置。</p>\n<h3 id=\"_6-6-location块\"> 6.6 location块</h3>\n<p>每个server块中可以包含多个location块。从严格意义上说，location其实是server块的一个指令，只是由于其在整个Nginx配置文档中起着重要的作用，而且Nginx服务器在许多功能上的灵活性往往在location指令的配置中体现出来。</p>\n<h2 id=\"_7-nginx命令行\"> 7 Nginx命令行</h2>\n<ol>\n<li>格式：<code>nginx -s reload</code></li>\n<li>帮助：<code>-?</code> <code>-h</code></li>\n<li>使用指定的配置位置：<code>-c</code></li>\n<li>指定配置指令：<code>-g</code></li>\n<li>指定运行目录：<code>-p</code></li>\n<li>发送信号：<code>-s</code>\n<ul>\n<li>立刻停止服务：<code>stop</code></li>\n<li>优雅的停止服务：<code>quit</code></li>\n<li>重载配置文件：<code>reload</code></li>\n<li>重新开始记录日志文件：<code>reopen</code></li>\n</ul>\n</li>\n<li>测试配置文件是否有语法错误：<code>-t</code> <code>-T</code></li>\n<li>打印<code>nginx</code>的版本信息、编译信息：<code>-v</code> <code>-V</code></li>\n</ol>\n<h3 id=\"_7-1-重载配置文件\"> 7.1 重载配置文件</h3>\n<div><pre><code>nginx -s reload\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"_7-2-热部署\"> 7.2  热部署</h3>\n<p>只是更换二进制文件</p>\n<ol>\n<li>备份旧的nginx文件</li>\n</ol>\n<div><pre><code>cd /home/clay/sbin/\ncp nginx nginx.old\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>2）将新的编译好的二进制文件，替换掉现在正在运行的二进制文件</p>\n<p>首先重新编译出一个<code>nginx</code>二进制可执行文件，<code>./configure</code>然后<code>make</code>，千万不要<code>make install</code>，执行那<code>make</code>就可以了</p>\n<div><pre><code>cd /opt/nginx-1.16.1/\ncp -f objs/nginx /home/clay/sbin/\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>3）给master进程发送<code>USR2</code>信号</p>\n<div><pre><code># ps -ef|grep nginx\nroot      6159 57006  0 11:18 pts/0    00:00:00 grep --color=auto nginx\nroot     63076     1  0 09:46 ?        00:00:00 nginx: master process /home/clay/sbin/nginx\nnobody   63103 63076  0 09:46 ?        00:00:00 nginx: worker process\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code># kill -USR2 63076\n</code></pre>\n<div><span>1</span><br></div></div><div><pre><code># ps -ef|grep nginx\nroot      6216 63076  0 11:19 ?        00:00:00 nginx: master process /home/clay/sbin/nginx\nnobody    6217  6216  0 11:19 ?        00:00:00 nginx: worker process\nroot      6225 57006  0 11:19 pts/0    00:00:00 grep --color=auto nginx\nroot     63076     1  0 09:46 ?        00:00:00 nginx: master process /home/clay/sbin/nginx\nnobody   63103 63076  0 09:46 ?        00:00:00 nginx: worker process\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code># netstat -nplt| grep 80\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6216/nginx: master  \n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>4）关闭旧的woker进程，<code>kill -WINCH</code>旧的master进程号</p>\n<div><pre><code># kill -WINCH 63076\n# ps -ef|grep nginx\nroot      6216 63076  0 11:19 ?        00:00:00 nginx: master process /home/clay/sbin/nginx\nnobody    6217  6216  0 11:19 ?        00:00:00 nginx: worker process\nroot      6842 57006  0 11:28 pts/0    00:00:00 grep --color=auto nginx\nroot     63076     1  0 09:46 ?        00:00:00 nginx: master process /home/clay/sbin/nginx\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>5）关闭旧的master进程，<code>kill -QUIT</code>旧的master进程号</p>\n<div><pre><code># kill -QUIT 63076\n# ps -ef|grep nginx\nroot      6216     1  0 11:19 ?        00:00:00 nginx: master process /home/clay/sbin/nginx\nnobody    6217  6216  0 11:19 ?        00:00:00 nginx: worker process\nroot      6947 57006  0 11:30 pts/0    00:00:00 grep --color=auto nginx\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"_7-3-切割日志文件\"> 7.3 切割日志文件</h3>\n<p>1）mv掉原来的日志</p>\n<div><pre><code>mv access.log access.log.bak\n</code></pre>\n<div><span>1</span><br></div></div><p>2）重新打开日志文件</p>\n<div><pre><code>nginx -s reopen\n</code></pre>\n<div><span>1</span><br></div></div><p><strong>简单说明一下：</strong></p>\n<p>1、在没有执行kill -USR1 <code>cat ${pid_path}</code>之前，即便已经对文件执行了mv命令也只是改变了文件的名称，nginx还是会向新命名的文件” access.log.20161024”中照常写入日志数据。原因在于linux系统中，内核是根据文件描述符来找文件的</p>\n<p>2、USR1是自定义信号，也就是进程编写者自己确定收到这个信号该干什么。而在nginx中它自己编写了代码当接到USR1信号的时候让nginx重新打开日志文件（重新打开的日志就是配置文件中设置的位置和名称）。</p>\n<h2 id=\"todo\"> Todo</h2>\n<p>1.(必做)</p>\n<p>虚拟主机</p>\n<p>基于域名</p>\n<p>基于ip地址</p>\n<p>基于端口</p>\n<p>2.（可先不做）</p>\n<p>TLS应用实践</p>\n<p>OpenResty安装实践</p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200102212417067.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "3.3 nginxSERVER块配置",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/server/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/server/",
      "content_html": "<h1 id=\"_3-3-nginxserver块配置\"> 3.3 nginxSERVER块配置</h1>\n<h2 id=\"_1-listen-指令\"> 1 Listen 指令</h2>\n<p><strong>Example Configuration</strong></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317093603705.png\" alt=\"\"></p>\n<p><strong>Directives</strong></p>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317093633095.png\" alt=\"\"></p>\n<h2 id=\"_2-server-name指令\"> 2 server_name指令</h2>\n<h3 id=\"_2-1-规则\"> 2.1 规则</h3>\n<ul>\n<li>指令后可以跟多个域名，第一个是主域名</li>\n<li>*泛域名：进支持在最前或最后（<code>server_name *.baiud.com;</code>）</li>\n<li>正则表达式：加<code>~</code>前缀 (<code>server_name www.taohui.tech ~^www\\d+\\.taohui\\.tech$;</code>)</li>\n</ul>\n<p><strong>用正则表达式创建变量：用小括号()</strong></p>\n<p>示例</p>\n<div><pre><code><span>server</span> <span>{</span>\n    <span>server_name</span> <span>~</span><span>^</span><span>(</span>www\\<span>.</span><span>)</span><span>?</span><span>(</span><span>.</span><span>+</span><span>)</span>$<span>;</span>\n    <span>location</span> <span>/</span> <span>{</span>\n        <span>root</span> <span>/</span>sites<span>/</span>$<span>2</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n<span>server</span> <span>{</span>\n    <span>server_name</span> <span>~</span><span>^</span><span>(</span>www\\<span>.</span><span>)</span><span>?</span><span>(</span><span>?</span><span>&lt;</span>domain<span>></span><span>.</span><span>+</span><span>)</span>$<span>;</span>\n    locatoin <span>/</span> <span>{</span>\n        <span>root</span> <span>/</span>sites<span>/</span><span>$domain</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><strong>其他</strong></p>\n<ul>\n<li>.taohui.tech 可以匹配 taohui.tech *.taohui.tech</li>\n<li>_ 匹配所有</li>\n<li>“” 匹配没有传递Host头部</li>\n</ul>\n<h3 id=\"_2-2-匹配顺序\"> 2.2 匹配顺序</h3>\n<p>1）精准匹配</p>\n<p>2）*在前的泛域名</p>\n<p>3）*在后的泛域名</p>\n<p>4）按文件中的顺序匹配正则表达式域名</p>\n<p>5）default server 匹配第1个，listen指定default</p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/image-20200317093603705.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "5. 状态码",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/status/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/nginx/status/",
      "content_html": "<h1 id=\"_5-状态码\"> 5. 状态码</h1>\n<h2 id=\"nginx-code-常用状态码学习小结\"> Nginx code 常用状态码学习小结</h2>\n<h3 id=\"nginx-code-status\"> Nginx Code Status</h3>\n<p>状态码分为五类：</p>\n<ol>\n<li>100-199 用于指定客户端应相应的某些动作。</li>\n<li>200-299 用于表示请求成功。</li>\n<li>300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。</li>\n<li>400-499 用于指出客户端的错误。</li>\n<li>500-599 用于指出服务器错误。</li>\n</ol>\n<hr>\n<p><strong>200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</strong></p>\n<p>201 （已创建） 请求成功并且服务器创建了新的资源。</p>\n<p>202 （已接受） 服务器已接受请求，但尚未处理。</p>\n<p>203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</p>\n<p>204 （无内容） 服务器成功处理了请求，但没有返回任何内容。</p>\n<p>205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。</p>\n<p>206 （部分内容） 服务器成功处理了部分 GET 请求。</p>\n<hr>\n<p>300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p>\n<p>301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p>\n<p>302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>\n<p>303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p>\n<p>304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p>\n<p>305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</p>\n<p>307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>\n<hr>\n<p>400 （错误请求） 服务器不理解请求的语法。</p>\n<p>401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</p>\n<p>403 （禁止） 服务器拒绝请求。</p>\n<p><strong>404 （未找到） 服务器找不到请求的网页。</strong></p>\n<p>405 （方法禁用） 禁用请求中指定的方法。</p>\n<p>406 （不接受） 无法使用请求的内容特性响应请求的网页。</p>\n<p>407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</p>\n<p>408 （请求超时） 服务器等候请求时发生超时。</p>\n<p>409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</p>\n<p>410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</p>\n<p>411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</p>\n<p>412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</p>\n<p>413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p>\n<p>414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</p>\n<p>415 （不支持的媒体类型） 请求的格式不受请求页面的支持。</p>\n<p>416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</p>\n<p>417 （未满足期望值） 服务器未满足<code>&quot;期望&quot;</code>请求标头字段的要求。</p>\n<p><strong>499 客户端主动断开了连接，有的时候是因为客户端请求超时，主动断开连接。</strong></p>\n<hr>\n<p><strong>500 （服务器内部错误） 服务器遇到错误，无法完成请求。</strong></p>\n<p>501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</p>\n<p><strong>502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</strong></p>\n<p><strong>503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</strong></p>\n<p><strong>504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</strong></p>\n<p>505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p>\n<h3 id=\"http请求流程\"> http请求流程</h3>\n<p><img src=\"https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/http.png\" alt=\"\"></p>\n<p>一个普通的http请求处理流程，如上图所示：\nA -&gt; client端发起请求给nginx\nB -&gt; nginx处理后，将请求转发到uwsgi，并等待结果\nC -&gt; uwsgi处理完请求后，返回数据给nginx\nD -&gt; nginx将处理结果返回给客户端\n每个阶段都会有一个预设的超时时间，由于网络、机器负载、代码异常等等各种原因，如果某个阶段没有在预期的时间内正常返回，就会导致这次请求异常，进而产生不同的状态码。</p>\n",
      "image": "https://gitee.com/clay-wangzhi/blogImg/raw/master/blogImg/http.png",
      "date_published": "2020-03-20T00:00:00.000Z",
      "date_modified": "2021-04-02T06:06:34.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "tomcat注意事项",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/danger/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/danger/",
      "content_html": "<h1 id=\"tomcat注意事项\"> tomcat注意事项</h1>\n<h2 id=\"war正确删除姿势\"> war正确删除姿势</h2>\n<p>tomcat中war包停止后才可以删除</p>\n",
      "date_published": "2020-03-08T00:00:00.000Z",
      "date_modified": "2021-04-02T06:11:28.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "tomcat假死现象",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/dead/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/dead/",
      "content_html": "<h1 id=\"tomcat假死现象\"> tomcat假死现象</h1>\n<h1 id=\"_1-背景\"> 1 背景</h1>\n<h2 id=\"_1-1-编写目的\"> 1.1 编写目的</h2>\n<p>为了方便大家以后发现进程假死的时候能够正常的分析并且第一时间保留现场快照。</p>\n<h2 id=\"_1-2编写背景\"> 1.2编写背景</h2>\n<p>最近服务器发现tomcat的应用会偶尔出现无法访问的情况。经过一段时间的观察最近又发现有台tomcat的应用出</p>\n<p>现了无法访问情况。简单描述下该台tomcat当时具体的表现：客户端请求没有响应，查看服务器端tomcat的进程</p>\n<p>是存活的，查看业务日志的时候发现日志停止没有任何最新的访问日志。连tomcat下面的catalina.log也没有任何</p>\n<p>访问记录，基本断定该台tomcat已不能提供服务。</p>\n<h1 id=\"_2-分析步骤\"> 2 分析步骤</h1>\n<p>根据前面我描述的假死现象，我最先想到的是网络是否出现了问题，是不是有什么丢包严重的情况，于是我开始从</p>\n<p>请求的数据流程开始分析，由于我们业务的架构采用的是nginx+tomcat的集群配置，一个请求上来的流向可以用</p>\n<p>下图来简单的描述一下：</p>\n<h2 id=\"_2-1检查nginx的网络情况\"> 2.1检查nginx的网络情况</h2>\n<p>更改nginx的配置，让该台nginx请求只转到本机器的出现问题的tomcat应用上面，在access.log里看是否有网络</p>\n<p>请求，结果可以查看到当前所有的网络请求，也就是说可以排除是网络的问题。</p>\n<h2 id=\"_2-2检查tomcat-的网络情况\"> 2.2检查tomcat 的网络情况</h2>\n<p>分析业务配置的tomcat访问日志xxxx.log上是否有日志访问记录，经过查询该台tomcat应用日志完全没有任何访</p>\n<p>问记录，由于我们的部署是本机的nginx转到本机的tomcat应用，所以可以排除不是网络问题。到此基本可以断定</p>\n<p>网络没有问题，tomcat 本身出现了假死的情况。在tomcat的日志里有报过OutOfMemoryError的异常，所以可以</p>\n<p>肯定tomcat假死的原因是OOM</p>\n<h1 id=\"_3-分析jvm内存溢出\"> 3 分析JVM内存溢出</h1>\n<h2 id=\"_3-1为什么会发生内存泄漏\"> 3.1<strong>为什么会发生内存泄漏</strong></h2>\n<p>在我们学习Java的时候就知道它最为方便的地方就是我们不需要管理内存的分配和释放，一切由JVM自己来进行处</p>\n<p>理，当Java对象不再被应用时，等到堆内存不够用时JVM会进行GC处理，清除这些对象占用的堆内存空间，但是</p>\n<p>如果对象一直被应用，那么JVM是无法对其进行GC处理的，那么我们创建新的对象时，JVM就没有办法从堆中获取</p>\n<p>足够的内存分配给此对象，这时就会导致OOM。我们出现OOM原因，一般都是因为我们不断的往容器里存放对</p>\n<p>象，然而容器没有相应的大小限制或清除机制，这样就容易导致OOM。</p>\n<h2 id=\"_3-2快速定位问题\"> 3.2<strong>快速定位问题</strong></h2>\n<p>当我们的应用服务器占用了过多内存的时候，我们怎么样才能快速的定位问题呢？要想快速定位问题，首先我们</p>\n<p>必需获取服务器JVM某时刻的内存快照。Jdk里面提供了很多相应的命令比如：jstack,jstat,jmap,jps等等. 在出现问</p>\n<p>题后我们应该快速保留现场。</p>\n<p>3.2.1 jstack</p>\n<p>可以观察到jvm中当前所有线程的运行情况和线程当前状态.</p>\n<p>sudo jstack -F 进程ID</p>\n<p>从上面的图我们可以看到tomcat进程里面没有死锁的情况，而且每个线程都处理等待的状态。这个时候我们可以</p>\n<p>telnet命令连上tomcat的端口查看tomcat进程是否有任务回应。这时发现tomcat没有任何回应可以证明tomcat应</p>\n<p>用已没有响应处理假死状态。</p>\n<p>3.2.2 jstat</p>\n<p>这是jdk命令中比较重要，也是相当实用的一个命令，可以观察到classloader，compiler，gc相关信息</p>\n<p>具体参数如下：</p>\n<div><pre><code>-class：统计class loader行为信息\n-compile：统计编译行为信息\n-gc：统计jdk gc时heap信息\n-gccapacity：统计不同的generations（包括新生区，老年区，permanent区）相应的heap容量情况\n-gccause：统计gc的情况，（同-gcutil）和引起gc的事件\n-gcnew：统计gc时，新生代的情况\n-gcnewcapacity：统计gc时，新生代heap容量\n-gcold：统计gc时，老年区的情况\n-gcoldcapacity：统计gc时，老年区heap容量\n-gcpermcapacity：统计gc时，permanent区heap容量\n-gcutil：统计gc时，heap情况\n-printcompilation：不知道干什么的，一直没用过。\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>一般比较常用的几个参数是：</p>\n<div><pre><code>sudo jstat -class 2083 1000 10 （每隔1秒监控一次，一共做10次）\n</code></pre>\n<div><span>1</span><br></div></div><p>查看当时的head情况</p>\n<div><pre><code>sudo jstat -gcutil 20683 2000\n</code></pre>\n<div><span>1</span><br></div></div><p>出现时候截取的数据是gc已经完全没有处理了,因为没有加上full gc的日志所以不确定JVMGC 时间过长，导致应用</p>\n<p>暂停.</p>\n<p>3.2.3获取内存快照</p>\n<p>Jdk自带的jmap可以获取内在某一时刻的快照</p>\n<p>命令：jmap -dump:format=b,file=heap.bin &lt;pid&gt;</p>\n<p>file：保存路径及文件名</p>\n<p>pid：进程编号（windows通过任务管理器查看，linux通过ps aux查看）</p>\n<p>dump文件可以通过MemoryAnalyzer分析查看，网址：http://www.eclipse.org/mat/，可以查看dump时对象数</p>\n<p>量，内存占用，线程情况等。</p>\n<p>从上图我们可以明确的看出此项目的HashMap内存使用率比较高，因为我们的系统都是返回Map的数据结构所以</p>\n<p>占用比较高的内存是正常情况。</p>\n<p>3.2.4观察运行中的jvm物理内存的占用情况</p>\n<p>观察运行中的jvm物理内存的占用情况。我们也可以用jmap命令</p>\n<p>参数如下：</p>\n<div><pre><code>-heap：打印jvm heap的情况\n-histo：打印jvm heap的直方图。其输出信息包括类名，对象数量，对象占用大小。\n-histo：live: 同上，但是只答应存活对象的情况\n-permstat:打印permanent generation heap情况\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>命令使用：</p>\n<p><code>jmap -heap 2083</code></p>\n<p>可以观察到New Generation（Eden Space，From Space，To Space）,tenured generation,Perm Generation的内存使用情况</p>\n<p>上图为tomcat应用出错前JVM的配置信息,可以明确的看到当时的信息:</p>\n<p>MaxHeapSize堆内存大小为：3500M</p>\n<p>MaxNewSize新生代内存大小：512M</p>\n<p>PermSize永久代内存大小:192M</p>\n<p>NewRatio设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为2，则年轻代与年老代所占比值为1：2，年轻代占整个堆栈的1/3</p>\n<p>SurvivorRatio设置年轻代中Eden区与Survivor区的大小比值。设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1/10</p>\n<p>在New Generation中，有一个叫Eden的空间，主要是用来存放新生的对象，还有两个SurvivorSpaces（from,to）, 它们用来存放每次垃圾回收后存活下来的对象。在Old Generation中，主要存放应用程序中生命周期长的内存对象，还有个Permanent Generation，主要用来放JVM自己的反射对象，比如类对象和方法对象等。</p>\n<p>从上面的图可以看出来JVM的新生代设置太小，可以看出应用的新生代区完全占满了，无法再往新生代区增加新的对象此时的这些对象都处于活跃状态，所以不会被GC处理，但是tomcat应用还在继续产生新的对象，这样就会导致OOM的发生，这就是导致tomcat假死的原因.</p>\n<h1 id=\"_4-tomcat假死其它情况\"> 4 Tomcat假死其它情况</h1>\n<p>​     以下是网上资料说的tomcat假的情况：</p>\n<ul>\n<li>应用本身程序的问题，造成死锁。</li>\n<li>load 太高，已经超出服务的极限</li>\n<li>jvm GC时间过长，导致应用暂停\n<ul>\n<li>因为出错项目里面没有打出GC的处理情况，所以不确定此原因是否也是我项目tomcat假死的原因之一。</li>\n</ul>\n</li>\n<li>大量tcp 连接 CLOSE_WAIT\n<ul>\n<li><code>netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>转载链接：https://www.cnblogs.com/lilyjia/p/5729197.html</p>\n</blockquote>\n",
      "date_published": "2020-03-08T00:00:00.000Z",
      "date_modified": "2021-04-02T06:11:28.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "生产环境中的tomcat配置",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/prd/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/prd/",
      "content_html": "<h1 id=\"生产环境中的tomcat配置\"> 生产环境中的tomcat配置</h1>\n<h2 id=\"tomcat安全配置\"> tomcat安全配置</h2>\n<h3 id=\"版本安全\"> 版本安全</h3>\n<p>升级当前tomcat版本为最新稳定版本。</p>\n<p>在升级版本中，需要注意两点：</p>\n<ul>\n<li>\n<p>尽量避免跨大版本的升级</p>\n</li>\n<li>\n<p>将当前老版本的server.xml , catalina.sh, web.xml和tomcat-users.xml进行备份，然后部署完新的tomcat</p>\n<p>后，将这些配置文件覆盖过去。</p>\n</li>\n</ul>\n<h3 id=\"隐藏版本信息\"> 隐藏版本信息</h3>\n<p>当tomcat出现404或其它错误时，就会显示当前版本信息，为避免针对某一版本的攻击，我们应该将其隐藏或伪装</p>\n<p><img src=\"images/883007-20170309115431516-1104120437.png\" alt=\"image\"></p>\n<p>版本信息的显示是由一个jar包控制的，该jar包存放在tomcat安装目录下的lib目录下，名称为catalina.jar.</p>\n<ol>\n<li>通过jar xf命令解压这个jar包会得到两个目录META-INF和org, 通过修改</li>\n</ol>\n<p><code>org/apache/catalina/util/ServerInfo.properties</code>文件中的<code>serverinfo</code>字段来实现更改tomcat版本信息：</p>\n<div><pre><code>[root@localhost ~]# cat org/apache/catalina/util/SererInfo.properties | grep -v &#39;^$|#&#39;\nserver.info=Apache Tomcat/7.0.53\nserver.number=7.0.53.0\nserer.built=Mar 25 2014 06:20:16\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ol start=\"2\">\n<li>当然还有另外一种方法来隐藏或伪装版本信息，这两种方法本质是一样的：</li>\n</ol>\n<div><pre><code>[root@localhost ~]# cd /usr/local/apache-tomcat-7.0.53/lib\n[root@localhost lib]# mkdir -p org/apache/catalina/util\n[root@localhost lib]# cd org/apache/catalina/util\n[root@localhost util]# vim ServerInfo.properties\nserver.info=nolinux        # 如果想修改成其它版本号，把这个地方的值改成其它值就行了\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>修改完成之后，重启tomcat即可看到效果！</p>\n<h2 id=\"tomcat的配置优化\"> tomcat的配置优化</h2>\n<h3 id=\"优化web-xml\"> 优化web.xml</h3>\n<p>servlet与其它适用于整个Web应用程序设置的配置文件，必须符合servlet规范的标准格式。通过它可以配置你</p>\n<p>web应用的相关选项，tomcat在启动的时候会读取这个文件，完成你开发的系统的一些初始化操作。</p>\n<p>它可以做如下事情：</p>\n<ul>\n<li>提供基于servlet的相关配置</li>\n<li>增加监听器，监控session或在tomcat启动时，加载一些你希望加载的资源。比如创建数据库连接池等</li>\n<li>设置session过期时间，tomcat默认是30分钟</li>\n<li>更改应用的默认页面，通常为index.html/index.jsp等</li>\n<li>增加过滤器， 做一些你希望的过滤操作，比如敏感词汇的过滤</li>\n<li>增加一些jstl（标准标签库）的定义，方便在jsp中直接include进来</li>\n<li>struts, spring或hibernate的一些配置等</li>\n</ul>\n<p>由于在生产环境中，tomcat不会直接对公网提供服务，前端肯定有apache或nginx，因此，默认主页或自定义错</p>\n<p>误页，我们都在前端的apache或nginx中完成；另外也有可能是由程序员在项目内的WEB-INF/web.xml中去做定</p>\n<p>义。</p>\n<p>在tomcat新版本中，默认已经禁止列目录功能。</p>\n<p>下面是几种觉的功能，在web.xml中的表现形式：</p>\n<p><strong>站点默认主页：</strong></p>\n<p><img src=\"images/883007-20170309115432875-139916481.png\" alt=\"image\"></p>\n<p><strong>自定义错误页：</strong></p>\n<p><img src=\"images/883007-20170309115433984-443260669.png\" alt=\"image\"></p>\n<p><strong>定义会话超时时间：</strong></p>\n<p><img src=\"images/883007-20170309115435516-1709051054.png\" alt=\"image\"></p>\n<p><strong>禁止列目录：</strong></p>\n<p><img src=\"images/883007-20170309115437047-1295899737.png\" alt=\"image\"></p>\n<h3 id=\"优化-tomcat-user-xml\"> 优化 tomcat-user.xml</h3>\n<p>该文件中包含用户名，角色及密码。 负责提供webapps下manager项目的登录认证管理。</p>\n<p>在生产环境中，我们需要将该文件全部注释。</p>\n<p><img src=\"images/883007-20170309115438797-1710834528.png\" alt=\"image\"></p>\n<h3 id=\"优化server-xml\"> 优化server.xml</h3>\n<ul>\n<li>\n<p>maxThreads连接数限制：</p>\n<p>maxThreads是tomcat所能接受的最大连接数。 一般设置不要超过8000， 如果你的网站访问量非常大可使用</p>\n<p>多个tomcat实例的方法，即在一个服务器上启动多个tomcat，然后做负载均衡。</p>\n</li>\n<li>\n<p>tomcat和php不同，php可以按照cpu和内存的情况去配置连接数，所以上万很正常。 但java还需要注意jvm</p>\n</li>\n<li>\n<p>的参数配置。如果不注意就会因为jvm参数过小而崩溃。</p>\n</li>\n<li>\n<p>不要多个虚拟主机：</p>\n<p>强烈建议不要使用tomcat的虚拟主机功能，推荐一个tomcat实例启动一个站点。即，可以启动多个tomcat，而不是一个tomcat里包含多个虚拟主机。 因为tomcat是多线程，共享内存，任何一个虚拟主机中的应用崩溃，都会影响到所有的应用程序。</p>\n</li>\n<li>\n<p>压缩传输：</p>\n<p>tomcat也支持gzip压缩功能。 可以在server.xml配置文件中的Connector节点中配置如下参数，来实现对指定资源类型进行压缩。</p>\n<div><pre><code>compression=&quot;on&quot;             # 打开压缩功能 \ncompressionMinSize=&quot;50&quot;      # 启用压缩的输出内容大小，默认为2KB \nnoCompressionUserAgents=&quot;gozilla, traviata&quot;      # 对于以下的浏览器，不启用压缩 \ncompressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;　# 哪些资源类型需要压缩\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>要注意的是，对于文本信息比如txt, html, css,javascript进行压缩，效果非常好。而对文件，图片，视频不要压缩。</p>\n</li>\n<li>\n<p>Connector 连接器的配置</p>\n<p>bio、nio 和 apr，三种方式性能差别很大，apr 的性能最优， bio 的性能最差。而 Tomcat 7 使用的 Connector 默认就启用的 Apr 协议，但需要系统安装 Apr 库，否则就会使用 bio 方式。</p>\n</li>\n</ul>\n<p>配置文件样例，connector连接器设置为bio</p>\n<div><pre><code>   &lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;\n        maxThreads=&quot;2000&quot; minSpareThreads=&quot;4&quot;/&gt;\n        \n    &lt;Connector executor=&quot;tomcatThreadPool&quot;\n         port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; \n               connectionTimeout=&quot;20000&quot; \n               redirectPort=&quot;8443&quot;\n         \t   maxHeaderCount=&quot;64&quot;  \n               maxParameterCount=&quot;64&quot;  \n               maxHttpHeaderSize=&quot;8192&quot;  \n               URIEncoding=&quot;UTF-8&quot;  \n               useBodyEncodingForURI=&quot;false&quot;  \n               maxThreads=&quot;2048&quot;  \n               minSpareThreads=&quot;12&quot;  \n               acceptCount=&quot;2048&quot;  \n               connectionLinger=&quot;-1&quot;  \n               keepAliveTimeout=&quot;60&quot;  \n               maxKeepAliveRequests=&quot;32&quot;  \n               maxConnections=&quot;1000&quot;  \n               acceptorThreadCount=&quot;1&quot;  \n               pollerThreadCount=&quot;2&quot;  \n               selectorTimeout=&quot;1000&quot;  \n               enableLookups=&quot;false&quot;\n               useSendfile=&quot;true&quot;  \n               selectorPool.maxSelectors=&quot;128&quot;  /&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h3 id=\"管理ajp端口\"> 管理AJP端口</h3>\n<p>AJP是为tomcat与HTTP服务器之间通信而定制的协议，能提供较高的通信速度和效率。如果前端是apache的话，</p>\n<p>会使用到AJP这个连接器，如果是nginx，就用不上了，因此需要注销掉：</p>\n<div><pre><code>&lt;!--\n    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;\n--&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"更改关闭tomcat实例的指令\"> 更改关闭tomcat实例的指令</h3>\n<p>server.xml中定义了可以直接关闭tomcat实例的管理端口。 我们通过 telnet连接上该端口之后，输入shutdown</p>\n<p>即可关闭。值得注意的是，虽然实例关闭了，但是进程还是存在的。由于默认的端口和指令都很简单，默认端口是</p>\n<p>8005， 指令为SHUTDOWN. 因此我们要改得复杂一点（当然，新版本的tomcat管理端口监听在127.0.0.1）：</p>\n<div><pre><code>&lt;Server port=&quot;8005&quot; shutdown=&quot;9SDKJ29jksjf23sjf0LSDF92JKS9DKkjsd&quot;&gt;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"更改tomcat服务监听端口\"> 更改tomcat服务监听端口</h3>\n<div><pre><code>&lt;Connector port=&quot;8080&quot; address=&quot;172.16.100.1&quot; /&gt;\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"关闭war自动部署\"> 关闭war自动部署</h3>\n<div><pre><code>&lt;Host name=&quot;localhost&quot;  appBase=&quot;&quot;\n      unpackWARs=&quot;false&quot; autoDeploy=&quot;false&quot;&gt;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"禁用tomcat管理页面\"> 禁用tomcat管理页面</h3>\n<p>删除webapps目录下的所有文件，还涉及到管理页面的2个配置文件host-manager.xml和manager.xml也要删</p>\n<p>除，这两个文件在tomcat安装 目录下的conf/Catalina/localhost目录下。</p>\n<h3 id=\"使用普通用户启动tomcat\"> 使用普通用户启动tomcat</h3>\n<p>在启动之前需要将tomcat安装目录下所有文件的属主和属组都设置为指定的用户。</p>\n<h2 id=\"tomcat生产服务器性能优化\"> tomcat生产服务器性能优化</h2>\n<h3 id=\"tomcat内存优化\"> tomcat内存优化</h3>\n<p>tomcat内存优化主要是对tomcat启动参数优化，我们可以在tomcat启动脚本catalina.sh中设置JAVA——OPTS参</p>\n<p>数。</p>\n<div><pre><code>JAVA_OPTS=&#39;-server -Xms2048m -Xmx2048m -XX:PermSize=256M -XX:MaxNewSize=256m -XX:MaxPermSize=256m&#39;\n</code></pre>\n<div><span>1</span><br></div></div><p>参数说明：</p>\n<div><pre><code>-server  启用jdk 的 server 版；  \n-Xms    java虚拟机初始化时的最小内存；  \n-Xmx   java虚拟机可使用的最大内存；  \n-XX:PermSize    内存永久保留区域  \n-XX:MaxPermSize   内存最大永久保留区域\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>-Xmx 默认为物理内存的1/4， 实际建议不大于4GB；一般建议设置-Xms = -Xmx</p>\n<p>-server  一定要作为第一个参数，在多个cpu时性能 佳</p>\n<p>-Xms  初始heap大小，使用的最小内存，cpu性能 高时可以设置的大一些</p>\n<blockquote>\n<p>参考链接:</p>\n<p>https://www.cnblogs.com/huangxm/p/6524968.html</p>\n<p>https://blog.csdn.net/ljj_9/article/details/79145324</p>\n<p>https://blog.csdn.net/loyachen/article/details/47280237</p>\n</blockquote>\n",
      "date_published": "2020-03-08T00:00:00.000Z",
      "date_modified": "2021-04-02T06:11:28.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "tomcat简介",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/",
      "content_html": "<h1 id=\"tomcat简介\"> tomcat简介</h1>\n<h2 id=\"tomcat学习笔记-一\"> Tomcat学习笔记（一）</h2>\n<p>Hello everyone, let's learn tomcat together！</p>\n<h3 id=\"tomcat的开幕式\"> Tomcat的开幕式</h3>\n<p>Tomcat以Java编写</p>\n<h4 id=\"安装tomcat\"> 安装Tomcat</h4>\n<p>官网地址为：https://tomcat.apache.org</p>\n<p>各个版本的下载地址为：https://archive.apache.org/dist/tomcat/</p>\n<p>安装方式</p>\n<p>二进制文件（文件为tar.gz）</p>\n<div><pre><code>wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.23/bin/apache-tomcat-8.5.23.tar.gz\ntar -xvf apache-tomcat-8.5.23.tar.gz\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>需提前配置好jdk的环境变量，jdk配置详见上一章节</p>\n<h4 id=\"tomcat启动、停止、重启\"> Tomcat启动、停止、重启</h4>\n<p>主要用到的脚本有</p>\n<p>catalina.sh、shutdown.sh、startup.sh、version.sh</p>\n<p><img src=\"images/tomcat1.png\" alt=\"\"></p>\n<p>catalina是tomcat的主要脚本，它会执行java命令以调用Tomcat的启动或停止等</p>\n<p>shutdown是停止tomcat脚本</p>\n<p>startup是启动tomcat脚本</p>\n<p>version是查看tomcat的版本信息</p>\n<ul>\n<li>\n<p>常用的catalina脚本启动参数</p>\n<p>config [server.xml file]\t  指定另一个server.xml配置文件。默认是使用驻留在$CATALINA_BASE/conf目录中的server.xml</p>\n<p>help\t\t\t\t\t输出命令行选项摘要表</p>\n<p>ebug\t\t\t\t\t以调试模式启动tomcat</p>\n<p>tart\t\t\t\t\t启动tomcat，并将标准输出与错误送至tomcat的日志文件</p>\n<p>top\t\t\t\t\t停止tomcat</p>\n<p>ersion \t\t\t\t\t输出tomcat的版本信息</p>\n</li>\n</ul>\n<h4 id=\"安装后的测试\"> 安装后的测试</h4>\n<p>当安装以及启动tomcat后，测试是否成功启动，可以访问网页进行测试，默认端口为8080</p>\n<p><img src=\"images/tomcat2.png\" alt=\"\"></p>\n<h3 id=\"配置tomcat\"> 配置tomcat</h3>\n<h4 id=\"从8080改变端口号\"> 从8080改变端口号</h4>\n<p>把机器上目的地为80端口的所有连接需重定向到8080端口的信息通知给内核。</p>\n<div><pre><code>iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080\niptables -t nat -I OUTPUT -p tcp --dport 80 -j REDIRECT --to-ports 8080\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2020-03-08T00:00:00.000Z",
      "date_modified": "2021-04-02T06:11:28.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "Tomcat 错误代号及状态码",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/status/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/web/tomcat/status/",
      "content_html": "<h1 id=\"tomcat-错误代号及状态码\"> Tomcat 错误代号及状态码</h1>\n<p>状态代码  状态信息  含义</p>\n<div><pre><code>100  Continue  初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）\n 101  Switching Protocols  服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）\n 200  OK  一切正常，对GET和POST请求的应答文档跟在后面。\n 201  Created  服务器已经创建了文档，Location头给出了它的URL。\n 202  Accepted  已经接受请求，但处理尚未完成。\n 203  Non-Authoritative Information  文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。\n 204  No Content  没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。\n 205  Reset Content  没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。\n 206  Partial Content  客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。\n 300  Multiple Choices  客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。\n 301  Moved Permanently  客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。\n 302  Found  类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。\n\n出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。\n\n注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求[http://host/~user](https://link.jianshu.com?t=http://host/~user)（缺少了后面的斜杠），有的服务器返回301，有的则返回302。\n\n严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。\n 303  See Other  类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。\n 304  Not Modified  客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。\n 305  Use Proxy  客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。\n 307  Temporary Redirect  和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是 303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）\n 400  Bad Request  请求出现语法错误。\n 401  Unauthorized  客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求。\n 403  Forbidden  资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。\n 404  Not Found  无法找到指定位置的资源。这也是一个常用的应答。\n 405  Method Not Allowed  请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）\n 406  Not Acceptable  指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。\n 407  Proxy Authentication Required  类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）\n 408  Request Timeout  在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）\n 409  Conflict  通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）\n 410  Gone  所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用。（HTTP 1.1新）\n 411  Length Required  服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）\n 412  Precondition Failed  请求头中指定的一些前提条件失败（HTTP 1.1新）。\n 413  Request Entity Too Large  目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。\n 414  Request URI Too Long  URI太长（HTTP 1.1新）。\n 416  Requested Range Not Satisfiable  服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）\n 500  Internal Server Error  服务器遇到了意料不到的情况，不能完成客户的请求。\n 501  Not Implemented  服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。\n 502  Bad Gateway  服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。\n 503  Service Unavailable  服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头。\n 504  Gateway Timeout  由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）\n 505  HTTP Version Not Supported  服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><blockquote>\n<p>转载链接：</p>\n<p>https://www.jianshu.com/p/8ad1009f927d</p>\n</blockquote>\n",
      "date_published": "2020-03-08T00:00:00.000Z",
      "date_modified": "2021-04-02T06:11:28.000Z",
      "authors": [
        {
          "name": "Clay"
        }
      ],
      "tags": [
        "web中间件"
      ]
    },
    {
      "title": "《Advanced Bash-Scripting Guide》 in Chinese",
      "url": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/",
      "id": "https://vuepress-theme-hope-demo.mrhope.site/Linux/shell/",
      "content_html": "<h1 id=\"《advanced-bash-scripting-guide》-in-chinese\"> 《Advanced Bash-Scripting Guide》 in Chinese</h1>\n<blockquote>\n<p>本教程内容转载自：https://github.com/LinuxStory/Advanced-Bash-Scripting-Guide-in-Chinese</p>\n<p>感谢开源翻译！！！</p>\n</blockquote>\n<p><a href=\"https://gitter.im/Advanced-Bash-Scripting-Guide-in-Chinese/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://badges.gitter.im/gitterHQ/gitter.png\" alt=\"Gitter chat\"></a></p>\n<p>《高级Bash脚本编程指南》Revision 10中文版</p>\n<h2 id=\"原著及早期翻译作品\"> 原著及早期翻译作品</h2>\n<h3 id=\"原著\"> 原著</h3>\n<ul>\n<li>原著链接：http://tldp.org/LDP/abs/html/</li>\n<li>原作：Mendel Cooper</li>\n<li>原著版本：Revision 10, 10 Mar 2014</li>\n</ul>\n<h3 id=\"译著\"> 译著</h3>\n<ul>\n<li>早期译著连接：http://www.linuxsir.org/bbs/thread256887.html</li>\n<li>译者：杨春敏 黄毅</li>\n<li>译著版本：Revision 3.7, 23 Oct 2005</li>\n<li>最新 Revision 10 由 Linux Story 社区的 imcmy 同学发起并组织翻译</li>\n<li>Linux Story 通告地址 ：http://www.linuxstory.org/asdvanced-bash-scripting-guide-in-chinese/</li>\n</ul>\n<h2 id=\"翻译作品\"> 翻译作品</h2>\n<p>翻译作品放在<a href=\"https://linuxstory.gitbook.io/advanced-bash-scripting-guide-in-chinese/\" target=\"_blank\" rel=\"noopener noreferrer\">GitBook</a>上，欢迎指正！</p>\n<h2 id=\"翻译进度\"> 翻译进度</h2>\n<ul>\n<li>[x] 第一部分 初见Shell[@imcmy][@zihengcat]\n<ul>\n<li>[x] 1. 为什么使用shell编程[@imcmy][@zihengcat]</li>\n<li>[x] 2. Sha-Bang（#!）一起出发[@imcmy][@zihengcat]</li>\n</ul>\n</li>\n<li>[x] 第二部分 Shell基础[@imcmy][@zihengcat]\n<ul>\n<li>[x] 3. 特殊字符[@imcmy][@zihengcat]</li>\n<li>[x] 4. 变量与参数[@imcmy][@zihengcat]</li>\n<li>[x] 5. 引用[@mr253727942][@zihengcat]</li>\n<li>[x] 6. 退出与退出状态[@samita2030][@zihengcat]</li>\n<li>[x] 7. 测试[@imcmy][@zihengcat]</li>\n<li>[x] 8. 运算符相关话题[@samita2030][@zihengcat]</li>\n</ul>\n</li>\n<li>[x] 第三部分 Shell进阶[@imcmy]\n<ul>\n<li>[x] 9. 换个角度看变量[@imcmy]</li>\n<li>[x] 10. 变量处理[@imcmy]</li>\n<li>[x] 11. 循环与分支[@imcmy]</li>\n<li>[x] 12. 命令替换[@imcmy]</li>\n<li>[x] 13. 算术扩展[@imcmy]</li>\n<li>[x] 14. 休息时间[@imcmy]</li>\n</ul>\n</li>\n<li>[x] 第四部分. 命令[@imcmy]\n<ul>\n<li>[x] 15. 内建命令[@imcmy]</li>\n<li>[ ] 16. 外部过滤器，程序与命令[@hsupu]\n<ul>\n<li>[x] 16.1 基本命令[@hsupu]</li>\n<li>[ ] 16.2 复杂命令</li>\n<li>[ ] 16.3 时间与日期命令</li>\n<li>[ ] 16.4 文本处理命令</li>\n<li>[ ] 16.5 文件与归档命令</li>\n<li>[ ] 16.6 通信命令</li>\n<li>[ ] 16.7 终端控制命令</li>\n<li>[ ] 16.8 数学命令</li>\n<li>[ ] 16.9 杂项命令</li>\n</ul>\n</li>\n<li>[ ] 17. 系统与高级命令</li>\n</ul>\n</li>\n<li>[ ] 第五章. 高级话题\n<ul>\n<li>[x] 18. 正则表达式[@Zjie]</li>\n<li>[x] 19. 嵌入文档[@mingmings]</li>\n<li>[x] 20. I/O 重定向[@mingmings]</li>\n<li>[x] 21. Subshells[@ysun90]</li>\n<li>[x] 22. 限制模式的Shell[@panblack]</li>\n<li>[x] 23. 进程替换[@panblack]</li>\n<li>[x] 24. 函数[@zy416548283]</li>\n<li>[x] 25. 别名[@mingmings]</li>\n<li>[x] 26. 列表结构[@panblack]</li>\n<li>[x] 27. 数组[@zy416548283]</li>\n<li>[x] 28. 间接引用[@plutonji]</li>\n<li>[x] 29. <code>/dev</code> 和 <code>/proc</code>[@plutonji]</li>\n<li>[x] 30. 网络编程[@Zjie]</li>\n<li>[ ] 31. Of Zeros and Nulls</li>\n<li>[x] 32. 调试[@wuqichao]</li>\n<li>[x] 33. 选项[@zy416548283]</li>\n<li>[x] 34. 陷阱[@liuburn]</li>\n<li>[ ] 35. Scripting With Style</li>\n<li>[ ] 36. 杂项[@richard-ma]</li>\n<li>[ ] 37. Bash, versions 2, 3, and 4</li>\n</ul>\n</li>\n<li>[x] 38. 后记[@zy416548283]</li>\n<li>[ ] Bibliography</li>\n<li>[ ] 附录\n<ul>\n<li>[ ] A. Contributed Scripts</li>\n<li>[ ] B. Reference Cards</li>\n<li>[x] C. A Sed and Awk Micro-Primer[@wuqichao]\n<ul>\n<li>[x] C.1 Sed[@wuqichao]</li>\n<li>[x] C.2 Awk[@wuqichao]</li>\n</ul>\n</li>\n<li>[ ] D. Parsing and Managing Pathnames</li>\n<li>[x] E. 带有特殊意义的退出代码[@ShadowRZ]</li>\n<li>[x] F. I/O 与 I/O 重定向详细介绍[@ShadowRZ]</li>\n<li>[ ] G. Command-Line Options\n<ul>\n<li>[ ] G.1 Standard Command-Line Options</li>\n<li>[ ] G.2 Bash Command-Line Options</li>\n</ul>\n</li>\n<li>[x] H. 重要文件[@ShadowRZ]</li>\n<li>[ ] I. Important System Directories</li>\n<li>[ ] J. An Introduction to Programmable Completion</li>\n<li>[ ] K. Localization</li>\n<li>[ ] L. History Commands</li>\n<li>[x] M. 示例 ~/.bashrc 与 ~/.bash_profile[@ShadowRZ]</li>\n<li>[ ] N. Converting DOS Batch Files to Shell Scripts</li>\n<li>[ ] O. Exercises\n<ul>\n<li>O.1 Analyzing Scripts</li>\n<li>O.2 Writing Scripts</li>\n</ul>\n</li>\n<li>[ ] P. Revision History</li>\n<li>[ ] Q. Download and Mirror Sites</li>\n<li>[ ] R. To Do List</li>\n<li>[ ] S. Copyright</li>\n<li>[x] T. ASCII 表[@ShadowRZ]</li>\n</ul>\n</li>\n<li>[ ] Index</li>\n<li>[ ] List of Tables</li>\n<li>[ ] List of Examples</li>\n</ul>\n<h2 id=\"翻译校审流程\"> 翻译校审流程</h2>\n<h3 id=\"初始化\"> 初始化</h3>\n<ol>\n<li>首先fork项目</li>\n<li>把fork过去的项目clone到本地</li>\n<li>命令行下运行 <code>git checkout -b dev</code> 创建一个新分支</li>\n<li>运行 <code>git remote add upstream https://github.com/LinuxStory/Advanced-Bash-Scripting-Guide-in-Chinese.git</code> 添加远端库</li>\n<li>运行 <code>git remote update</code>更新</li>\n<li>运行 <code>git fetch upstream master</code> 拉取更新到本地</li>\n<li>运行 <code>git rebase upstream/master</code> 将更新合并到你的分支</li>\n</ol>\n<p>初始化只需要做一遍，之后请在dev分支进行修改。</p>\n<p>如果修改过程中项目有更新，请重复5、6、7步。</p>\n<h3 id=\"翻译校审流程-2\"> 翻译校审流程</h3>\n<ol>\n<li>\n<p>保证在dev分支中</p>\n</li>\n<li>\n<p>打开README.md，在翻译进度后加上你自己的github名</p>\n<blockquote>\n<p>1. Shell Programming! [@翻译人][@校审人]</p>\n</blockquote>\n</li>\n<li>\n<p>本地提交修改，写明提交信息</p>\n</li>\n<li>\n<p>push到你fork的项目中，然后登录GitHub</p>\n</li>\n<li>\n<p>在你fork的项目的首页可以看到一个 <code>pull request</code> 按钮，点击它，填写说明信息，然后提交即可</p>\n<blockquote>\n<p>为了不重复工作，请等待我们确认了你的pull request(即你的名字出现在项目中时)，再进行翻译校审工作</p>\n</blockquote>\n</li>\n<li>\n<p>进行翻译校审，重复3-5步提交翻译校审的作品</p>\n</li>\n</ol>\n<blockquote>\n<p>新手可以参阅针对github小白的<a href=\"https://github.com/LinuxStory/Advanced-Bash-Scripting-Guide-in-Chinese/wiki/%E7%BF%BB%E8%AF%91%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3\" target=\"_blank\" rel=\"noopener noreferrer\">《翻译流程详解》</a>,妹子写的呦～</p>\n</blockquote>\n<h2 id=\"翻译校审建议\"> 翻译校审建议</h2>\n<ol>\n<li>使用markdown进行翻译校审，文件名必须使用英文</li>\n<li>翻译校审后的文档请放到source文件夹下的对应章节中，然后pull request即可</li>\n<li>有任何问题随时欢迎发issue</li>\n<li>术语尽量保证和已翻译的一致，也可以查询<a href=\"https://www.microsoft.com/zh-cn/language/search\" target=\"_blank\" rel=\"noopener noreferrer\">微软术语搜索</a>或<a href=\"https://github.com/LCTT/TranslateProject/blob/master/Dict.md\" target=\"_blank\" rel=\"noopener noreferrer\">Linux中国术语词典</a></li>\n<li>你可以将你认为是术语的词汇加入术语表<code>TERM.md</code>中</li>\n</ol>\n<h2 id=\"样式规范\"> 样式规范</h2>\n<p>根据原文中不同的注释类型，可以使用 <code>&gt;</code> 或下列html代码进行注释。</p>\n<div><pre><code>{% hint style=\"info\" %}\nHello world\n{% endhint %}\n​```\n\n所有的脚注footnote都需使用html代码进行注释。\n\n## 关于版权\n\n根据原著作者的要求，翻译成果属于公有领域(CC0)，翻译参与人员及原著作者Mendel Cooper享有署名权\n\n翻译参与人员（按名称排序）：\n\n- @chuchingkai\n- @hsupu\n- @imcmy\n- @liuburn\n- @mingmings\n- @mr253727942\n- @panblack\n- @plutonji\n- @richard-ma\n- @samita2030\n- @ShadowRZ\n- @wuqichao\n- @ysun90\n- @zhaozq\n- @zihengcat\n- @Zjie\n- @zy416548283\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div>",
      "image": "https://badges.gitter.im/gitterHQ/gitter.png",
      "date_published": "2021-04-03T14:55:08.000Z",
      "date_modified": "2021-04-03T14:55:08.000Z",
      "authors": [
        {
          "name": "LinuxStory"
        }
      ],
      "tags": [
        "Linux"
      ]
    }
  ]
}